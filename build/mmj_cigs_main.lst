CCS PCH C Compiler, Version 5.104, 57077               19-7-25 19:38

               Filename:   build\mmj_cigs_main.lst

               ROM used:   33302 bytes (25%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           1316 (37%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   78CA
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00CA
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   0132
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
*
000EA:  DATA 54,69
000EC:  DATA 6D,65
000EE:  DATA 72,20
000F0:  DATA 49,6E
000F2:  DATA 69,74
000F4:  DATA 69,61
000F6:  DATA 6C,69
000F8:  DATA 7A,65
000FA:  DATA 0D,0A
000FC:  DATA 00,00
000FE:  DATA 09,43
00100:  DATA 6F,6D
00102:  DATA 70,6C
00104:  DATA 65,74
00106:  DATA 65,0D
00108:  DATA 0A,00
*
0017A:  DATA 55,41
0017C:  DATA 52,54
0017E:  DATA 20,49
00180:  DATA 6E,69
00182:  DATA 74,69
00184:  DATA 61,6C
00186:  DATA 69,7A
00188:  DATA 65,0D
0018A:  DATA 0A,00
0018C:  DATA 09,43
0018E:  DATA 6F,6D
00190:  DATA 70,6C
00192:  DATA 65,74
00194:  DATA 65,0D
00196:  DATA 0A,00
00198:  DATA 53,4D
0019A:  DATA 46,20
0019C:  DATA 64,61
0019E:  DATA 74,61
001A0:  DATA 20,6C
001A2:  DATA 69,73
001A4:  DATA 74,20
001A6:  DATA 69,73
001A8:  DATA 20,66
001AA:  DATA 75,6C
001AC:  DATA 6C,21
001AE:  DATA 21,21
001B0:  DATA 0D,0A
001B2:  DATA 00,00
001B4:  DATA 53,4D
001B6:  DATA 46,20
001B8:  DATA 64,61
001BA:  DATA 74,61
001BC:  DATA 20,6C
001BE:  DATA 69,73
001C0:  DATA 74,20
001C2:  DATA 69,73
001C4:  DATA 20,65
001C6:  DATA 6D,70
001C8:  DATA 74,79
001CA:  DATA 0D,0A
001CC:  DATA 00,00
001CE:  DATA 0D,0A
001D0:  DATA 5F,5F
001D2:  DATA 5F,5F
001D4:  DATA 5F,5F
001D6:  DATA 5F,5F
001D8:  DATA 5F,5F
001DA:  DATA 5F,5F
001DC:  DATA 5F,5F
001DE:  DATA 5F,5F
001E0:  DATA 5F,5F
001E2:  DATA 5F,5F
001E4:  DATA 0D,0A
001E6:  DATA 00,00
001E8:  DATA 5F,5F
001EA:  DATA 5F,53
001EC:  DATA 74,61
001EE:  DATA 72,74
001F0:  DATA 20,73
001F2:  DATA 6D,66
001F4:  DATA 5F,77
001F6:  DATA 72,69
001F8:  DATA 74,65
001FA:  DATA 5F,5F
001FC:  DATA 0D,0A
001FE:  DATA 00,00
00200:  DATA 53,74
00202:  DATA 61,72
00204:  DATA 74,20
00206:  DATA 5B,25
00208:  DATA 64,20
0020A:  DATA 74,68
0020C:  DATA 5D,20
0020E:  DATA 64,61
00210:  DATA 74,61
00212:  DATA 20,63
00214:  DATA 6F,70
00216:  DATA 79,0D
00218:  DATA 0A,0D
0021A:  DATA 0A,00
0021C:  DATA 49,6E
0021E:  DATA 20,73
00220:  DATA 6D,66
00222:  DATA 20,6D
00224:  DATA 69,73
00226:  DATA 73,69
00228:  DATA 6F,6E
0022A:  DATA 20,64
0022C:  DATA 61,74
0022E:  DATA 61,20
00230:  DATA 73,74
00232:  DATA 61,72
00234:  DATA 74,20
00236:  DATA 20,20
00238:  DATA 61,64
0023A:  DATA 64,72
0023C:  DATA 65,73
0023E:  DATA 73,3A
00240:  DATA 20,25
00242:  DATA 30,38
00244:  DATA 4C,58
00246:  DATA 0D,0A
00248:  DATA 00,00
0024A:  DATA 49,6E
0024C:  DATA 20,73
0024E:  DATA 6D,66
00250:  DATA 20,6D
00252:  DATA 69,73
00254:  DATA 73,69
00256:  DATA 6F,6E
00258:  DATA 20,64
0025A:  DATA 61,74
0025C:  DATA 61,20
0025E:  DATA 65,6E
00260:  DATA 64,20
00262:  DATA 20,20
00264:  DATA 20,20
00266:  DATA 61,64
00268:  DATA 64,72
0026A:  DATA 65,73
0026C:  DATA 73,3A
0026E:  DATA 20,25
00270:  DATA 30,38
00272:  DATA 4C,58
00274:  DATA 0D,0A
00276:  DATA 00,00
00278:  DATA 49,6E
0027A:  DATA 20,4D
0027C:  DATA 49,53
0027E:  DATA 20,46
00280:  DATA 4D,20
00282:  DATA 57,72
00284:  DATA 69,74
00286:  DATA 65,20
00288:  DATA 73,6F
0028A:  DATA 75,72
0028C:  DATA 63,65
0028E:  DATA 20,64
00290:  DATA 61,74
00292:  DATA 61,20
00294:  DATA 61,64
00296:  DATA 64,72
00298:  DATA 65,73
0029A:  DATA 73,3A
0029C:  DATA 20,25
0029E:  DATA 30,38
002A0:  DATA 4C,58
002A2:  DATA 0D,0A
002A4:  DATA 00,00
002A6:  DATA 49,6E
002A8:  DATA 20,4D
002AA:  DATA 49,53
002AC:  DATA 20,46
002AE:  DATA 4D,20
002B0:  DATA 57,72
002B2:  DATA 69,74
002B4:  DATA 65,20
002B6:  DATA 64,61
002B8:  DATA 74,61
002BA:  DATA 20,73
002BC:  DATA 69,7A
002BE:  DATA 65,20
002C0:  DATA 20,20
002C2:  DATA 20,20
002C4:  DATA 20,20
002C6:  DATA 20,20
002C8:  DATA 20,3A
002CA:  DATA 20,25
002CC:  DATA 6C,75
002CE:  DATA 20,28
002D0:  DATA 30,78
002D2:  DATA 25,6C
002D4:  DATA 78,29
002D6:  DATA 0D,0A
002D8:  DATA 0D,0A
002DA:  DATA 00,00
002DC:  DATA 45,72
002DE:  DATA 72,6F
002E0:  DATA 72,3A
002E2:  DATA 20,53
002E4:  DATA 4D,46
002E6:  DATA 20,69
002E8:  DATA 73,20
002EA:  DATA 6E,6F
002EC:  DATA 74,20
002EE:  DATA 63,6F
002F0:  DATA 6E,6E
002F2:  DATA 65,63
002F4:  DATA 74,65
002F6:  DATA 64,0D
002F8:  DATA 0A,00
002FA:  DATA 53,69
002FC:  DATA 7A,65
002FE:  DATA 20,61
00300:  DATA 72,65
00302:  DATA 61,20
00304:  DATA 72,65
00306:  DATA 61,64
00308:  DATA 0D,0A
0030A:  DATA 00,00
0030C:  DATA 75,73
0030E:  DATA 65,64
00310:  DATA 5F,73
00312:  DATA 69,7A
00314:  DATA 65,20
00316:  DATA 3D,20
00318:  DATA 25,6C
0031A:  DATA 75,20
0031C:  DATA 28,73
0031E:  DATA 72,63
00320:  DATA 20,30
00322:  DATA 78,25
00324:  DATA 30,38
00326:  DATA 4C,58
00328:  DATA 29,0D
0032A:  DATA 0A,00
0032C:  DATA 6C,6F
0032E:  DATA 6F,70
00330:  DATA 20,63
00332:  DATA 6F,75
00334:  DATA 6E,74
00336:  DATA 3D,20
00338:  DATA 25,64
0033A:  DATA 20,20
0033C:  DATA 28,73
0033E:  DATA 72,63
00340:  DATA 20,30
00342:  DATA 78,25
00344:  DATA 30,38
00346:  DATA 4C,58
00348:  DATA 29,0D
0034A:  DATA 0A,0D
0034C:  DATA 0A,00
0034E:  DATA 57,72
00350:  DATA 61,70
00352:  DATA 20,74
00354:  DATA 72,69
00356:  DATA 67,67
00358:  DATA 65,72
0035A:  DATA 65,64
0035C:  DATA 3A,20
0035E:  DATA 52,65
00360:  DATA 73,65
00362:  DATA 74,74
00364:  DATA 69,6E
00366:  DATA 67,20
00368:  DATA 64,61
0036A:  DATA 74,61
0036C:  DATA 5F,77
0036E:  DATA 72,69
00370:  DATA 74,65
00372:  DATA 5F,61
00374:  DATA 64,64
00376:  DATA 72,20
00378:  DATA 74,6F
0037A:  DATA 20,73
0037C:  DATA 74,61
0037E:  DATA 72,74
00380:  DATA 0D,0A
00382:  DATA 00,00
00384:  DATA 55,70
00386:  DATA 64,61
00388:  DATA 74,65
0038A:  DATA 20,73
0038C:  DATA 69,7A
0038E:  DATA 65,20
00390:  DATA 61,72
00392:  DATA 65,61
00394:  DATA 0D,0A
00396:  DATA 00,00
00398:  DATA 75,73
0039A:  DATA 65,64
0039C:  DATA 5F,73
0039E:  DATA 69,7A
003A0:  DATA 65,20
003A2:  DATA 3D,20
003A4:  DATA 25,6C
003A6:  DATA 64,0D
003A8:  DATA 0A,00
003AA:  DATA 6C,6F
003AC:  DATA 6F,70
003AE:  DATA 5F,63
003B0:  DATA 6F,75
003B2:  DATA 6E,74
003B4:  DATA 20,3D
003B6:  DATA 20,25
003B8:  DATA 75,0D
003BA:  DATA 0A,0D
003BC:  DATA 0A,00
003BE:  DATA 0D,0A
003C0:  DATA 5F,5F
003C2:  DATA 5F,45
003C4:  DATA 6E,64
003C6:  DATA 20,73
003C8:  DATA 6D,66
003CA:  DATA 5F,77
003CC:  DATA 72,69
003CE:  DATA 74,65
003D0:  DATA 5F,5F
003D2:  DATA 5F,5F
003D4:  DATA 0D,0A
003D6:  DATA 00,00
003D8:  DATA 5F,5F
003DA:  DATA 5F,5F
003DC:  DATA 5F,5F
003DE:  DATA 5F,5F
003E0:  DATA 5F,5F
003E2:  DATA 5F,5F
003E4:  DATA 5F,5F
003E6:  DATA 5F,5F
003E8:  DATA 5F,5F
003EA:  DATA 5F,5F
003EC:  DATA 0D,0A
003EE:  DATA 0D,0A
003F0:  DATA 00,00
003F2:  DATA 0D,0A
003F4:  DATA 5F,5F
003F6:  DATA 5F,5F
003F8:  DATA 5F,5F
003FA:  DATA 5F,5F
003FC:  DATA 5F,5F
003FE:  DATA 5F,5F
00400:  DATA 5F,5F
00402:  DATA 5F,5F
00404:  DATA 5F,5F
00406:  DATA 5F,5F
00408:  DATA 0D,0A
0040A:  DATA 00,00
0040C:  DATA 5F,5F
0040E:  DATA 5F,53
00410:  DATA 74,61
00412:  DATA 72,74
00414:  DATA 20,73
00416:  DATA 6D,66
00418:  DATA 5F,77
0041A:  DATA 72,69
0041C:  DATA 74,65
0041E:  DATA 5F,5F
00420:  DATA 0D,0A
00422:  DATA 00,00
00424:  DATA 53,74
00426:  DATA 61,72
00428:  DATA 74,20
0042A:  DATA 5B,25
0042C:  DATA 64,20
0042E:  DATA 74,68
00430:  DATA 5D,20
00432:  DATA 64,61
00434:  DATA 74,61
00436:  DATA 20,63
00438:  DATA 6F,70
0043A:  DATA 79,0D
0043C:  DATA 0A,0D
0043E:  DATA 0A,00
00440:  DATA 49,6E
00442:  DATA 20,73
00444:  DATA 6D,66
00446:  DATA 20,6D
00448:  DATA 69,73
0044A:  DATA 73,69
0044C:  DATA 6F,6E
0044E:  DATA 20,64
00450:  DATA 61,74
00452:  DATA 61,20
00454:  DATA 73,74
00456:  DATA 61,72
00458:  DATA 74,20
0045A:  DATA 20,20
0045C:  DATA 61,64
0045E:  DATA 64,72
00460:  DATA 65,73
00462:  DATA 73,3A
00464:  DATA 20,25
00466:  DATA 30,38
00468:  DATA 4C,58
0046A:  DATA 0D,0A
0046C:  DATA 00,00
0046E:  DATA 49,6E
00470:  DATA 20,73
00472:  DATA 6D,66
00474:  DATA 20,6D
00476:  DATA 69,73
00478:  DATA 73,69
0047A:  DATA 6F,6E
0047C:  DATA 20,64
0047E:  DATA 61,74
00480:  DATA 61,20
00482:  DATA 65,6E
00484:  DATA 64,20
00486:  DATA 20,20
00488:  DATA 20,20
0048A:  DATA 61,64
0048C:  DATA 64,72
0048E:  DATA 65,73
00490:  DATA 73,3A
00492:  DATA 20,25
00494:  DATA 30,38
00496:  DATA 4C,58
00498:  DATA 0D,0A
0049A:  DATA 00,00
0049C:  DATA 49,6E
0049E:  DATA 20,4D
004A0:  DATA 49,53
004A2:  DATA 20,46
004A4:  DATA 4D,20
004A6:  DATA 57,72
004A8:  DATA 69,74
004AA:  DATA 65,20
004AC:  DATA 73,6F
004AE:  DATA 75,72
004B0:  DATA 63,65
004B2:  DATA 20,64
004B4:  DATA 61,74
004B6:  DATA 61,20
004B8:  DATA 61,64
004BA:  DATA 64,72
004BC:  DATA 65,73
004BE:  DATA 73,3A
004C0:  DATA 20,25
004C2:  DATA 30,38
004C4:  DATA 4C,58
004C6:  DATA 0D,0A
004C8:  DATA 00,00
004CA:  DATA 49,6E
004CC:  DATA 20,4D
004CE:  DATA 49,53
004D0:  DATA 20,46
004D2:  DATA 4D,20
004D4:  DATA 57,72
004D6:  DATA 69,74
004D8:  DATA 65,20
004DA:  DATA 64,61
004DC:  DATA 74,61
004DE:  DATA 20,73
004E0:  DATA 69,7A
004E2:  DATA 65,20
004E4:  DATA 20,20
004E6:  DATA 20,20
004E8:  DATA 20,20
004EA:  DATA 20,20
004EC:  DATA 20,3A
004EE:  DATA 20,25
004F0:  DATA 6C,75
004F2:  DATA 20,28
004F4:  DATA 30,78
004F6:  DATA 25,6C
004F8:  DATA 78,29
004FA:  DATA 0D,0A
004FC:  DATA 0D,0A
004FE:  DATA 00,00
00500:  DATA 45,72
00502:  DATA 72,6F
00504:  DATA 72,3A
00506:  DATA 20,53
00508:  DATA 4D,46
0050A:  DATA 20,69
0050C:  DATA 73,20
0050E:  DATA 6E,6F
00510:  DATA 74,20
00512:  DATA 63,6F
00514:  DATA 6E,6E
00516:  DATA 65,63
00518:  DATA 74,65
0051A:  DATA 64,0D
0051C:  DATA 0A,00
0051E:  DATA 53,69
00520:  DATA 7A,65
00522:  DATA 20,61
00524:  DATA 72,65
00526:  DATA 61,20
00528:  DATA 72,65
0052A:  DATA 61,64
0052C:  DATA 0D,0A
0052E:  DATA 00,00
00530:  DATA 75,73
00532:  DATA 65,64
00534:  DATA 5F,73
00536:  DATA 69,7A
00538:  DATA 65,20
0053A:  DATA 3D,20
0053C:  DATA 25,6C
0053E:  DATA 75,20
00540:  DATA 28,73
00542:  DATA 72,63
00544:  DATA 20,30
00546:  DATA 78,25
00548:  DATA 30,38
0054A:  DATA 4C,58
0054C:  DATA 29,0D
0054E:  DATA 0A,00
00550:  DATA 6C,6F
00552:  DATA 6F,70
00554:  DATA 20,63
00556:  DATA 6F,75
00558:  DATA 6E,74
0055A:  DATA 3D,20
0055C:  DATA 25,64
0055E:  DATA 20,20
00560:  DATA 28,73
00562:  DATA 72,63
00564:  DATA 20,30
00566:  DATA 78,25
00568:  DATA 30,38
0056A:  DATA 4C,58
0056C:  DATA 29,0D
0056E:  DATA 0A,0D
00570:  DATA 0A,00
00572:  DATA 57,72
00574:  DATA 61,70
00576:  DATA 20,74
00578:  DATA 72,69
0057A:  DATA 67,67
0057C:  DATA 65,72
0057E:  DATA 65,64
00580:  DATA 3A,20
00582:  DATA 52,65
00584:  DATA 73,65
00586:  DATA 74,74
00588:  DATA 69,6E
0058A:  DATA 67,20
0058C:  DATA 64,61
0058E:  DATA 74,61
00590:  DATA 5F,77
00592:  DATA 72,69
00594:  DATA 74,65
00596:  DATA 5F,61
00598:  DATA 64,64
0059A:  DATA 72,20
0059C:  DATA 74,6F
0059E:  DATA 20,73
005A0:  DATA 74,61
005A2:  DATA 72,74
005A4:  DATA 0D,0A
005A6:  DATA 00,00
005A8:  DATA 55,70
005AA:  DATA 64,61
005AC:  DATA 74,65
005AE:  DATA 20,73
005B0:  DATA 69,7A
005B2:  DATA 65,20
005B4:  DATA 61,72
005B6:  DATA 65,61
005B8:  DATA 0D,0A
005BA:  DATA 00,00
005BC:  DATA 75,73
005BE:  DATA 65,64
005C0:  DATA 5F,73
005C2:  DATA 69,7A
005C4:  DATA 65,20
005C6:  DATA 3D,20
005C8:  DATA 25,6C
005CA:  DATA 64,0D
005CC:  DATA 0A,00
005CE:  DATA 6C,6F
005D0:  DATA 6F,70
005D2:  DATA 5F,63
005D4:  DATA 6F,75
005D6:  DATA 6E,74
005D8:  DATA 20,3D
005DA:  DATA 20,25
005DC:  DATA 75,0D
005DE:  DATA 0A,0D
005E0:  DATA 0A,00
005E2:  DATA 0D,0A
005E4:  DATA 5F,5F
005E6:  DATA 5F,45
005E8:  DATA 6E,64
005EA:  DATA 20,73
005EC:  DATA 6D,66
005EE:  DATA 5F,77
005F0:  DATA 72,69
005F2:  DATA 74,65
005F4:  DATA 5F,5F
005F6:  DATA 5F,5F
005F8:  DATA 0D,0A
005FA:  DATA 00,00
005FC:  DATA 5F,5F
005FE:  DATA 5F,5F
00600:  DATA 5F,5F
00602:  DATA 5F,5F
00604:  DATA 5F,5F
00606:  DATA 5F,5F
00608:  DATA 5F,5F
0060A:  DATA 5F,5F
0060C:  DATA 5F,5F
0060E:  DATA 5F,5F
00610:  DATA 0D,0A
00612:  DATA 0D,0A
00614:  DATA 00,00
00616:  DATA 0D,0A
00618:  DATA 53,74
0061A:  DATA 61,72
0061C:  DATA 74,20
0061E:  DATA 6D,61
00620:  DATA 6B,65
00622:  DATA 5F,72
00624:  DATA 65,63
00626:  DATA 65,69
00628:  DATA 76,65
0062A:  DATA 5F,63
0062C:  DATA 6F,6D
0062E:  DATA 6D,61
00630:  DATA 6E,64
00632:  DATA 0D,0A
00634:  DATA 00,00
00636:  DATA 09,5B
00638:  DATA 42,4F
0063A:  DATA 53,53
0063C:  DATA 5D,20
0063E:  DATA 3E,3E
00640:  DATA 3E,20
00642:  DATA 00,00
00644:  DATA 45,6E
00646:  DATA 64,20
00648:  DATA 6D,61
0064A:  DATA 6B,65
0064C:  DATA 5F,72
0064E:  DATA 65,63
00650:  DATA 69,76
00652:  DATA 65,5F
00654:  DATA 63,6F
00656:  DATA 6D,6D
00658:  DATA 61,6E
0065A:  DATA 64,0D
0065C:  DATA 0A,0D
0065E:  DATA 0A,00
00660:  DATA 73,69
00662:  DATA 67,6E
00664:  DATA 61,6C
00666:  DATA 20,65
00668:  DATA 6E,64
0066A:  DATA 20,77
0066C:  DATA 69,74
0066E:  DATA 68,20
00670:  DATA 53,46
00672:  DATA 44,0D
00674:  DATA 0A,00
00676:  DATA 64,6F
00678:  DATA 6E,27
0067A:  DATA 74,20
0067C:  DATA 66,69
0067E:  DATA 6E,64
00680:  DATA 20,53
00682:  DATA 46,44
00684:  DATA 0D,0A
00686:  DATA 00,00
00688:  DATA 09,2D
0068A:  DATA 3E,20
0068C:  DATA 49,6E
0068E:  DATA 76,61
00690:  DATA 6C,69
00692:  DATA 64,20
00694:  DATA 46,72
00696:  DATA 61,6D
00698:  DATA 65,20
0069A:  DATA 49,44
0069C:  DATA 20,72
0069E:  DATA 65,63
006A0:  DATA 65,69
006A2:  DATA 76,65
006A4:  DATA 64,3A
006A6:  DATA 20,25
006A8:  DATA 58,0D
006AA:  DATA 0A,00
006AC:  DATA 09,2D
006AE:  DATA 3E,20
006B0:  DATA 43,52
006B2:  DATA 43,20
006B4:  DATA 65,72
006B6:  DATA 72,6F
006B8:  DATA 72,21
006BA:  DATA 0D,0A
006BC:  DATA 00,00
006BE:  DATA 09,09
006C0:  DATA 2D,3E
006C2:  DATA 20,72
006C4:  DATA 65,63
006C6:  DATA 65,69
006C8:  DATA 76,65
006CA:  DATA 64,20
006CC:  DATA 43,52
006CE:  DATA 43,3A
006D0:  DATA 20,25
006D2:  DATA 58,0D
006D4:  DATA 0A,00
006D6:  DATA 09,09
006D8:  DATA 20,20
006DA:  DATA 20,63
006DC:  DATA 6F,6C
006DE:  DATA 6C,65
006E0:  DATA 63,74
006E2:  DATA 20,43
006E4:  DATA 52,43
006E6:  DATA 20,3A
006E8:  DATA 20,25
006EA:  DATA 58,0D
006EC:  DATA 0A,00
006EE:  DATA 09,2D
006F0:  DATA 3E,20
006F2:  DATA 49,6E
006F4:  DATA 76,61
006F6:  DATA 6C,69
006F8:  DATA 64,20
006FA:  DATA 64,65
006FC:  DATA 76,69
006FE:  DATA 63,65
00700:  DATA 20,49
00702:  DATA 44,20
00704:  DATA 72,65
00706:  DATA 63,65
00708:  DATA 69,76
0070A:  DATA 65,64
0070C:  DATA 0D,0A
0070E:  DATA 00,00
00710:  DATA 09,09
00712:  DATA 2D,3E
00714:  DATA 20,72
00716:  DATA 65,63
00718:  DATA 65,69
0071A:  DATA 76,65
0071C:  DATA 64,3A
0071E:  DATA 20,20
00720:  DATA 20,20
00722:  DATA 20,25
00724:  DATA 58,0D
00726:  DATA 0A,00
00728:  DATA 09,09
0072A:  DATA 20,20
0072C:  DATA 20,4D
0072E:  DATA 79,20
00730:  DATA 64,65
00732:  DATA 76,69
00734:  DATA 63,65
00736:  DATA 20,49
00738:  DATA 44,3A
0073A:  DATA 20,25
0073C:  DATA 58,0D
0073E:  DATA 0A,00
00740:  DATA 09,5B
00742:  DATA 42,4F
00744:  DATA 53,53
00746:  DATA 5D,20
00748:  DATA 3C,3C
0074A:  DATA 3C,20
0074C:  DATA 00,00
0074E:  DATA 53,74
00750:  DATA 61,72
00752:  DATA 74,20
00754:  DATA 53,4D
00756:  DATA 46,20
00758:  DATA 75,73
0075A:  DATA 69,6E
0075C:  DATA 67,20
0075E:  DATA 72,65
00760:  DATA 71,65
00762:  DATA 73,74
00764:  DATA 20,73
00766:  DATA 65,61
00768:  DATA 71,75
0076A:  DATA 65,6E
0076C:  DATA 63,65
0076E:  DATA 0D,0A
00770:  DATA 00,00
00772:  DATA 45,72
00774:  DATA 72,6F
00776:  DATA 72,21
00778:  DATA 20,52
0077A:  DATA 65,63
0077C:  DATA 65,69
0077E:  DATA 76,69
00780:  DATA 6E,67
00782:  DATA 20,63
00784:  DATA 6F,6D
00786:  DATA 6D,61
00788:  DATA 6E,64
0078A:  DATA 20,69
0078C:  DATA 6E,63
0078E:  DATA 6F,6E
00790:  DATA 73,69
00792:  DATA 73,74
00794:  DATA 65,6E
00796:  DATA 74,20
00798:  DATA 77,69
0079A:  DATA 74,68
0079C:  DATA 20,74
0079E:  DATA 68,65
007A0:  DATA 20,64
007A2:  DATA 65,73
007A4:  DATA 69,67
007A6:  DATA 6E,0D
007A8:  DATA 0A,00
007AA:  DATA 53,4D
007AC:  DATA 46,20
007AE:  DATA 75,73
007B0:  DATA 65,20
007B2:  DATA 72,65
007B4:  DATA 71,75
007B6:  DATA 65,73
007B8:  DATA 74,20
007BA:  DATA 61,6C
007BC:  DATA 6C,6F
007BE:  DATA 77,65
007C0:  DATA 64,0D
007C2:  DATA 0A,00
007C4:  DATA 53,4D
007C6:  DATA 46,20
007C8:  DATA 75,73
007CA:  DATA 65,20
007CC:  DATA 72,65
007CE:  DATA 71,75
007D0:  DATA 65,73
007D2:  DATA 74,20
007D4:  DATA 64,65
007D6:  DATA 6E,79
007D8:  DATA 65,64
007DA:  DATA 0D,0A
007DC:  DATA 00,00
007DE:  DATA 52,65
007E0:  DATA 74,72
007E2:  DATA 79,20
007E4:  DATA 72,65
007E6:  DATA 71,75
007E8:  DATA 65,73
007EA:  DATA 74,20
007EC:  DATA 74,6F
007EE:  DATA 20,42
007F0:  DATA 4F,53
007F2:  DATA 53,20
007F4:  DATA 50,49
007F6:  DATA 43,0D
007F8:  DATA 0A,00
007FA:  DATA 45,72
007FC:  DATA 72,6F
007FE:  DATA 72,21
00800:  DATA 20,52
00802:  DATA 65,63
00804:  DATA 65,69
00806:  DATA 76,69
00808:  DATA 6E,67
0080A:  DATA 20,63
0080C:  DATA 6F,6D
0080E:  DATA 6D,61
00810:  DATA 6E,64
00812:  DATA 20,69
00814:  DATA 6E,63
00816:  DATA 6F,6E
00818:  DATA 73,69
0081A:  DATA 73,74
0081C:  DATA 65,6E
0081E:  DATA 74,20
00820:  DATA 77,69
00822:  DATA 74,68
00824:  DATA 20,74
00826:  DATA 68,65
00828:  DATA 20,64
0082A:  DATA 65,73
0082C:  DATA 69,67
0082E:  DATA 6E,0D
00830:  DATA 0A,00
00832:  DATA 45,6E
00834:  DATA 64,20
00836:  DATA 53,4D
00838:  DATA 46,20
0083A:  DATA 75,73
0083C:  DATA 69,6E
0083E:  DATA 67,20
00840:  DATA 72,65
00842:  DATA 71,65
00844:  DATA 73,74
00846:  DATA 20,73
00848:  DATA 65,61
0084A:  DATA 71,75
0084C:  DATA 65,6E
0084E:  DATA 63,65
00850:  DATA 0D,0A
00852:  DATA 00,00
00854:  DATA 41,44
00856:  DATA 37,34
00858:  DATA 39,30
0085A:  DATA 20,49
0085C:  DATA 6E,69
0085E:  DATA 74,69
00860:  DATA 61,6C
00862:  DATA 69,7A
00864:  DATA 65,0D
00866:  DATA 0A,00
00868:  DATA 09,43
0086A:  DATA 6F,6D
0086C:  DATA 70,6C
0086E:  DATA 65,74
00870:  DATA 65,0D
00872:  DATA 0A,00
00874:  DATA 4D,49
00876:  DATA 53,53
00878:  DATA 49,4F
0087A:  DATA 4E,20
0087C:  DATA 46,4C
0087E:  DATA 41,53
00880:  DATA 48,20
00882:  DATA 49,6E
00884:  DATA 69,74
00886:  DATA 69,61
00888:  DATA 6C,69
0088A:  DATA 7A,65
0088C:  DATA 0D,0A
0088E:  DATA 00,00
00890:  DATA 09,46
00892:  DATA 6C,61
00894:  DATA 73,68
00896:  DATA 20,69
00898:  DATA 73,20
0089A:  DATA 6E,6F
0089C:  DATA 74,20
0089E:  DATA 63,6F
008A0:  DATA 6E,6E
008A2:  DATA 65,63
008A4:  DATA 74,65
008A6:  DATA 64,0D
008A8:  DATA 0A,00
008AA:  DATA 09,53
008AC:  DATA 4D,46
008AE:  DATA 20,69
008B0:  DATA 73,20
008B2:  DATA 6E,6F
008B4:  DATA 74,20
008B6:  DATA 63,6F
008B8:  DATA 6E,6E
008BA:  DATA 65,63
008BC:  DATA 74,65
008BE:  DATA 64,0D
008C0:  DATA 0A,00
008C2:  DATA 09,20
008C4:  DATA 53,4D
008C6:  DATA 46,20
008C8:  DATA 69,73
008CA:  DATA 20,63
008CC:  DATA 6F,6E
008CE:  DATA 6E,65
008D0:  DATA 63,74
008D2:  DATA 65,64
008D4:  DATA 0D,0A
008D6:  DATA 00,00
008D8:  DATA 09,53
008DA:  DATA 4D,46
008DC:  DATA 20,20
008DE:  DATA 50,49
008E0:  DATA 43,4C
008E2:  DATA 4F,47
008E4:  DATA 20,55
008E6:  DATA 73,65
008E8:  DATA 20,43
008EA:  DATA 6F,75
008EC:  DATA 6E,74
008EE:  DATA 65,72
008F0:  DATA 20,20
008F2:  DATA 20,20
008F4:  DATA 20,20
008F6:  DATA 3A,20
008F8:  DATA 30,78
008FA:  DATA 25,30
008FC:  DATA 38,4C
008FE:  DATA 58,0D
00900:  DATA 0A,00
00902:  DATA 09,53
00904:  DATA 4D,46
00906:  DATA 20,20
00908:  DATA 50,49
0090A:  DATA 43,4C
0090C:  DATA 4F,47
0090E:  DATA 20,4C
00910:  DATA 6F,6F
00912:  DATA 70,20
00914:  DATA 43,6F
00916:  DATA 75,6E
00918:  DATA 74,65
0091A:  DATA 72,20
0091C:  DATA 20,20
0091E:  DATA 20,20
00920:  DATA 3A,20
00922:  DATA 30,78
00924:  DATA 25,30
00926:  DATA 32,58
00928:  DATA 0D,0A
0092A:  DATA 00,00
0092C:  DATA 09,53
0092E:  DATA 4D,46
00930:  DATA 20,20
00932:  DATA 4D,45
00934:  DATA 41,53
00936:  DATA 20,20
00938:  DATA 20,55
0093A:  DATA 73,65
0093C:  DATA 20,43
0093E:  DATA 6F,75
00940:  DATA 6E,74
00942:  DATA 65,72
00944:  DATA 20,20
00946:  DATA 20,20
00948:  DATA 20,20
0094A:  DATA 3A,20
0094C:  DATA 30,78
0094E:  DATA 25,30
00950:  DATA 38,4C
00952:  DATA 58,0D
00954:  DATA 0A,00
00956:  DATA 09,53
00958:  DATA 4D,46
0095A:  DATA 20,20
0095C:  DATA 4D,45
0095E:  DATA 41,53
00960:  DATA 20,20
00962:  DATA 20,4C
00964:  DATA 6F,6F
00966:  DATA 70,20
00968:  DATA 43,6F
0096A:  DATA 75,6E
0096C:  DATA 74,65
0096E:  DATA 72,20
00970:  DATA 20,20
00972:  DATA 20,20
00974:  DATA 3A,20
00976:  DATA 30,78
00978:  DATA 25,30
0097A:  DATA 32,58
0097C:  DATA 0D,0A
0097E:  DATA 00,00
00980:  DATA 09,4D
00982:  DATA 49,53
00984:  DATA 46,20
00986:  DATA 50,49
00988:  DATA 43,4C
0098A:  DATA 4F,47
0098C:  DATA 20,55
0098E:  DATA 73,65
00990:  DATA 20,43
00992:  DATA 6F,75
00994:  DATA 6E,74
00996:  DATA 65,72
00998:  DATA 20,20
0099A:  DATA 20,20
0099C:  DATA 20,20
0099E:  DATA 3A,20
009A0:  DATA 30,78
009A2:  DATA 25,30
009A4:  DATA 38,4C
009A6:  DATA 58,0D
009A8:  DATA 0A,00
009AA:  DATA 09,4D
009AC:  DATA 49,53
009AE:  DATA 46,20
009B0:  DATA 50,49
009B2:  DATA 43,4C
009B4:  DATA 4F,47
009B6:  DATA 20,55
009B8:  DATA 6E,63
009BA:  DATA 6F,70
009BC:  DATA 79,65
009BE:  DATA 64,20
009C0:  DATA 43,6F
009C2:  DATA 75,6E
009C4:  DATA 74,65
009C6:  DATA 72,20
009C8:  DATA 3A,20
009CA:  DATA 30,78
009CC:  DATA 25,30
009CE:  DATA 38,4C
009D0:  DATA 58,0D
009D2:  DATA 0A,00
009D4:  DATA 09,4D
009D6:  DATA 49,53
009D8:  DATA 46,20
009DA:  DATA 50,49
009DC:  DATA 43,4C
009DE:  DATA 4F,47
009E0:  DATA 20,4C
009E2:  DATA 6F,6F
009E4:  DATA 70,20
009E6:  DATA 43,6F
009E8:  DATA 75,6E
009EA:  DATA 74,65
009EC:  DATA 72,20
009EE:  DATA 20,20
009F0:  DATA 20,20
009F2:  DATA 3A,20
009F4:  DATA 30,78
009F6:  DATA 25,30
009F8:  DATA 32,58
009FA:  DATA 0D,0A
009FC:  DATA 00,00
009FE:  DATA 09,4D
00A00:  DATA 49,53
00A02:  DATA 46,20
00A04:  DATA 50,49
00A06:  DATA 43,4C
00A08:  DATA 4F,47
00A0A:  DATA 20,57
00A0C:  DATA 72,69
00A0E:  DATA 74,65
00A10:  DATA 20,43
00A12:  DATA 6F,75
00A14:  DATA 6E,74
00A16:  DATA 65,72
00A18:  DATA 20,20
00A1A:  DATA 20,20
00A1C:  DATA 3A,20
00A1E:  DATA 30,78
00A20:  DATA 25,30
00A22:  DATA 32,58
00A24:  DATA 0D,0A
00A26:  DATA 00,00
00A28:  DATA 09,4D
00A2A:  DATA 49,53
00A2C:  DATA 46,20
00A2E:  DATA 4D,45
00A30:  DATA 41,53
00A32:  DATA 20,20
00A34:  DATA 20,55
00A36:  DATA 73,65
00A38:  DATA 20,43
00A3A:  DATA 6F,75
00A3C:  DATA 6E,74
00A3E:  DATA 65,72
00A40:  DATA 20,20
00A42:  DATA 20,20
00A44:  DATA 20,20
00A46:  DATA 3A,20
00A48:  DATA 30,78
00A4A:  DATA 25,30
00A4C:  DATA 38,4C
00A4E:  DATA 58,0D
00A50:  DATA 0A,00
00A52:  DATA 09,4D
00A54:  DATA 49,53
00A56:  DATA 46,20
00A58:  DATA 4D,45
00A5A:  DATA 41,53
00A5C:  DATA 20,20
00A5E:  DATA 20,55
00A60:  DATA 6E,63
00A62:  DATA 6F,70
00A64:  DATA 79,65
00A66:  DATA 64,20
00A68:  DATA 43,6F
00A6A:  DATA 75,6E
00A6C:  DATA 74,65
00A6E:  DATA 72,20
00A70:  DATA 3A,20
00A72:  DATA 30,78
00A74:  DATA 25,30
00A76:  DATA 38,4C
00A78:  DATA 58,0D
00A7A:  DATA 0A,00
00A7C:  DATA 09,4D
00A7E:  DATA 49,53
00A80:  DATA 46,20
00A82:  DATA 4D,45
00A84:  DATA 41,53
00A86:  DATA 20,20
00A88:  DATA 20,4C
00A8A:  DATA 6F,6F
00A8C:  DATA 70,20
00A8E:  DATA 43,6F
00A90:  DATA 75,6E
00A92:  DATA 74,65
00A94:  DATA 72,20
00A96:  DATA 20,20
00A98:  DATA 20,20
00A9A:  DATA 3A,20
00A9C:  DATA 30,78
00A9E:  DATA 25,30
00AA0:  DATA 32,58
00AA2:  DATA 0D,0A
00AA4:  DATA 00,00
00AA6:  DATA 09,43
00AA8:  DATA 6F,6D
00AAA:  DATA 70,6C
00AAC:  DATA 65,74
00AAE:  DATA 65,0D
00AB0:  DATA 0A,00
00AB2:  DATA 4D,69
00AB4:  DATA 73,73
00AB6:  DATA 69,6F
00AB8:  DATA 6E,20
00ABA:  DATA 46,6C
00ABC:  DATA 61,73
00ABE:  DATA 68,20
00AC0:  DATA 69,73
00AC2:  DATA 20,6E
00AC4:  DATA 6F,74
00AC6:  DATA 20,63
00AC8:  DATA 6F,6E
00ACA:  DATA 6E,65
00ACC:  DATA 63,74
00ACE:  DATA 65,64
00AD0:  DATA 0D,0A
00AD2:  DATA 00,00
00AD4:  DATA 57,72
00AD6:  DATA 69,74
00AD8:  DATA 65,20
00ADA:  DATA 4D,49
00ADC:  DATA 53,46
00ADE:  DATA 20,41
00AE0:  DATA 64,64
00AE2:  DATA 72,65
00AE4:  DATA 73,73
00AE6:  DATA 20,41
00AE8:  DATA 72,65
00AEA:  DATA 61,20
00AEC:  DATA 43,6F
00AEE:  DATA 6D,70
00AF0:  DATA 6C,65
00AF2:  DATA 74,65
00AF4:  DATA 0D,0A
00AF6:  DATA 00,00
00AF8:  DATA 49,4F
00AFA:  DATA 20,49
00AFC:  DATA 6E,69
00AFE:  DATA 74,69
00B00:  DATA 61,6C
00B02:  DATA 69,7A
00B04:  DATA 65,0D
00B06:  DATA 0A,00
00B08:  DATA 09,43
00B0A:  DATA 6F,6D
00B0C:  DATA 70,6C
00B0E:  DATA 65,74
00B10:  DATA 65,0D
00B12:  DATA 0A,00
00B14:  DATA 41,44
00B16:  DATA 43,20
00B18:  DATA 49,6E
00B1A:  DATA 69,74
00B1C:  DATA 69,61
00B1E:  DATA 6C,69
00B20:  DATA 7A,65
00B22:  DATA 0D,0A
00B24:  DATA 00,00
00B26:  DATA 09,43
00B28:  DATA 6F,6D
00B2A:  DATA 70,6C
00B2C:  DATA 65,74
00B2E:  DATA 65,0D
00B30:  DATA 0A,00
00B32:  DATA 53,74
00B34:  DATA 61,72
00B36:  DATA 74,20
00B38:  DATA 53,57
00B3A:  DATA 45,45
00B3C:  DATA 50,0D
00B3E:  DATA 0A,00
00B40:  DATA 09,53
00B42:  DATA 77,65
00B44:  DATA 65,70
00B46:  DATA 20,73
00B48:  DATA 74,65
00B4A:  DATA 70,20
00B4C:  DATA 3A,20
00B4E:  DATA 25,75
00B50:  DATA 0D,0A
00B52:  DATA 00,00
00B54:  DATA 53,74
00B56:  DATA 61,72
00B58:  DATA 74,20
00B5A:  DATA 54,45
00B5C:  DATA 53,54
00B5E:  DATA 20,53
00B60:  DATA 57,45
00B62:  DATA 45,50
00B64:  DATA 0D,0A
00B66:  DATA 00,00
00B68:  DATA 73,74
00B6A:  DATA 65,70
00B6C:  DATA 2C,20
00B6E:  DATA 76,6F
00B70:  DATA 6C,74
00B72:  DATA 61,67
00B74:  DATA 65,2C
00B76:  DATA 20,63
00B78:  DATA 75,72
00B7A:  DATA 72,65
00B7C:  DATA 6E,74
00B7E:  DATA 0D,0A
00B80:  DATA 00,00
00B82:  DATA 53,74
00B84:  DATA 61,72
00B86:  DATA 74,20
00B88:  DATA 41,44
00B8A:  DATA 43,20
00B8C:  DATA 54,45
00B8E:  DATA 53,54
00B90:  DATA 0D,0A
00B92:  DATA 00,00
00B94:  DATA 41,44
00B96:  DATA 43,20
00B98:  DATA 56,6F
00B9A:  DATA 6C,74
00B9C:  DATA 61,67
00B9E:  DATA 65,3A
00BA0:  DATA 20,25
00BA2:  DATA 30,34
00BA4:  DATA 4C,58
00BA6:  DATA 0D,0A
00BA8:  DATA 00,00
00BAA:  DATA 41,44
00BAC:  DATA 43,20
00BAE:  DATA 43,75
00BB0:  DATA 72,72
00BB2:  DATA 65,6E
00BB4:  DATA 74,3A
00BB6:  DATA 20,25
00BB8:  DATA 30,34
00BBA:  DATA 4C,58
00BBC:  DATA 0D,0A
00BBE:  DATA 00,00
00BC0:  DATA 41,44
00BC2:  DATA 43,20
00BC4:  DATA 43,49
00BC6:  DATA 47,53
00BC8:  DATA 31,20
00BCA:  DATA 41,6D
00BCC:  DATA 70,3A
00BCE:  DATA 20,25
00BD0:  DATA 30,34
00BD2:  DATA 4C,58
00BD4:  DATA 0D,0A
00BD6:  DATA 00,00
00BD8:  DATA 41,44
00BDA:  DATA 43,20
00BDC:  DATA 43,49
00BDE:  DATA 47,53
00BE0:  DATA 31,20
00BE2:  DATA 56,52
00BE4:  DATA 45,46
00BE6:  DATA 3A,20
00BE8:  DATA 25,30
00BEA:  DATA 34,4C
00BEC:  DATA 58,0D
00BEE:  DATA 0A,00
00BF0:  DATA 5B,50
00BF2:  DATA 49,43
00BF4:  DATA 4C,4F
00BF6:  DATA 47,5D
00BF8:  DATA 20,3A
00BFA:  DATA 20,00
00BFC:  DATA 4D,69
00BFE:  DATA 73,73
00C00:  DATA 69,6F
00C02:  DATA 6E,20
00C04:  DATA 46,6C
00C06:  DATA 61,73
00C08:  DATA 68,20
00C0A:  DATA 69,73
00C0C:  DATA 20,6E
00C0E:  DATA 6F,74
00C10:  DATA 20,63
00C12:  DATA 6F,6E
00C14:  DATA 6E,65
00C16:  DATA 63,74
00C18:  DATA 65,64
00C1A:  DATA 0D,0A
00C1C:  DATA 00,00
00C1E:  DATA 53,74
00C20:  DATA 61,72
00C22:  DATA 74,20
00C24:  DATA 4D,4F
00C26:  DATA 44,45
00C28:  DATA 20,44
00C2A:  DATA 55,4D
00C2C:  DATA 4D,59
00C2E:  DATA 0D,0A
00C30:  DATA 00,00
00C32:  DATA 09,4D
00C34:  DATA 4F,44
00C36:  DATA 45,20
00C38:  DATA 20,20
00C3A:  DATA 20,20
00C3C:  DATA 3A,20
00C3E:  DATA 25,30
00C40:  DATA 32,58
00C42:  DATA 0D,0A
00C44:  DATA 00,00
00C46:  DATA 09,50
00C48:  DATA 61,72
00C4A:  DATA 61,6D
00C4C:  DATA 31,20
00C4E:  DATA 20,20
00C50:  DATA 3A,20
00C52:  DATA 30,78
00C54:  DATA 25,30
00C56:  DATA 38,4C
00C58:  DATA 58,0D
00C5A:  DATA 0A,00
00C5C:  DATA 09,50
00C5E:  DATA 61,72
00C60:  DATA 61,6D
00C62:  DATA 32,20
00C64:  DATA 20,20
00C66:  DATA 3A,20
00C68:  DATA 30,78
00C6A:  DATA 25,30
00C6C:  DATA 34,4C
00C6E:  DATA 58,0D
00C70:  DATA 0A,00
00C72:  DATA 45,6E
00C74:  DATA 64,20
00C76:  DATA 4D,4F
00C78:  DATA 44,45
00C7A:  DATA 20,44
00C7C:  DATA 55,4D
00C7E:  DATA 4D,59
00C80:  DATA 0D,0A
00C82:  DATA 00,00
00C84:  DATA 53,74
00C86:  DATA 61,72
00C88:  DATA 74,20
00C8A:  DATA 4D,4F
00C8C:  DATA 44,45
00C8E:  DATA 20,54
00C90:  DATA 45,53
00C92:  DATA 54,20
00C94:  DATA 49,56
00C96:  DATA 0D,0A
00C98:  DATA 00,00
00C9A:  DATA 09,53
00C9C:  DATA 77,65
00C9E:  DATA 65,70
00CA0:  DATA 20,73
00CA2:  DATA 74,65
00CA4:  DATA 70,20
00CA6:  DATA 3A,20
00CA8:  DATA 25,75
00CAA:  DATA 0D,0A
00CAC:  DATA 00,00
00CAE:  DATA 45,6E
00CB0:  DATA 64,20
00CB2:  DATA 4D,4F
00CB4:  DATA 44,45
00CB6:  DATA 20,54
00CB8:  DATA 45,53
00CBA:  DATA 54,20
00CBC:  DATA 49,56
00CBE:  DATA 0D,0A
00CC0:  DATA 00,00
00CC2:  DATA 53,74
00CC4:  DATA 61,72
00CC6:  DATA 74,20
00CC8:  DATA 4D,4F
00CCA:  DATA 44,45
00CCC:  DATA 20,4D
00CCE:  DATA 45,41
00CD0:  DATA 53,55
00CD2:  DATA 52,45
00CD4:  DATA 0D,0A
00CD6:  DATA 00,00
00CD8:  DATA 53,74
00CDA:  DATA 61,72
00CDC:  DATA 74,20
00CDE:  DATA 53,57
00CE0:  DATA 45,45
00CE2:  DATA 50,0D
00CE4:  DATA 0A,00
00CE6:  DATA 09,53
00CE8:  DATA 77,65
00CEA:  DATA 65,70
00CEC:  DATA 20,73
00CEE:  DATA 74,65
00CF0:  DATA 70,20
00CF2:  DATA 3A,20
00CF4:  DATA 25,75
00CF6:  DATA 0D,0A
00CF8:  DATA 00,00
00CFA:  DATA 45,4E
00CFC:  DATA 44,20
00CFE:  DATA 53,57
00D00:  DATA 45,45
00D02:  DATA 50,0D
00D04:  DATA 0A,00
00D06:  DATA 53,74
00D08:  DATA 61,72
00D0A:  DATA 74,20
00D0C:  DATA 46,6C
00D0E:  DATA 61,73
00D10:  DATA 68,20
00D12:  DATA 45,72
00D14:  DATA 61,73
00D16:  DATA 65,20
00D18:  DATA 41,6C
00D1A:  DATA 6C,0D
00D1C:  DATA 0A,00
00D1E:  DATA 45,6E
00D20:  DATA 64,20
00D22:  DATA 46,6C
00D24:  DATA 61,73
00D26:  DATA 68,20
00D28:  DATA 45,72
00D2A:  DATA 61,73
00D2C:  DATA 65,20
00D2E:  DATA 41,6C
00D30:  DATA 6C,0D
00D32:  DATA 0A,00
00D34:  DATA 53,74
00D36:  DATA 61,72
00D38:  DATA 74,20
00D3A:  DATA 46,6C
00D3C:  DATA 61,73
00D3E:  DATA 68,20
00D40:  DATA 45,72
00D42:  DATA 61,73
00D44:  DATA 65,20
00D46:  DATA 31,20
00D48:  DATA 53,65
00D4A:  DATA 63,74
00D4C:  DATA 6F,72
00D4E:  DATA 0D,0A
00D50:  DATA 00,00
00D52:  DATA 09,53
00D54:  DATA 65,63
00D56:  DATA 74,6F
00D58:  DATA 72,20
00D5A:  DATA 41,64
00D5C:  DATA 64,72
00D5E:  DATA 65,73
00D60:  DATA 73,3A
00D62:  DATA 20,30
00D64:  DATA 78,25
00D66:  DATA 30,38
00D68:  DATA 4C,58
00D6A:  DATA 0D,0A
00D6C:  DATA 00,00
00D6E:  DATA 45,6E
00D70:  DATA 64,20
00D72:  DATA 46,6C
00D74:  DATA 61,73
00D76:  DATA 68,20
00D78:  DATA 45,72
00D7A:  DATA 61,73
00D7C:  DATA 65,20
00D7E:  DATA 31,20
00D80:  DATA 53,65
00D82:  DATA 63,74
00D84:  DATA 6F,72
00D86:  DATA 0D,0A
00D88:  DATA 00,00
00D8A:  DATA 53,74
00D8C:  DATA 61,72
00D8E:  DATA 74,20
00D90:  DATA 46,6C
00D92:  DATA 61,73
00D94:  DATA 68,20
00D96:  DATA 43,6F
00D98:  DATA 70,79
00D9A:  DATA 20,31
00D9C:  DATA 20,53
00D9E:  DATA 65,63
00DA0:  DATA 74,6F
00DA2:  DATA 72,0D
00DA4:  DATA 0A,00
00DA6:  DATA 09,53
00DA8:  DATA 75,62
00DAA:  DATA 73,65
00DAC:  DATA 63,74
00DAE:  DATA 6F,72
00DB0:  DATA 20,41
00DB2:  DATA 64,64
00DB4:  DATA 72,65
00DB6:  DATA 73,73
00DB8:  DATA 3A,20
00DBA:  DATA 30,78
00DBC:  DATA 25,30
00DBE:  DATA 38,4C
00DC0:  DATA 58,0D
00DC2:  DATA 0A,00
00DC4:  DATA 45,6E
00DC6:  DATA 64,20
00DC8:  DATA 46,6C
00DCA:  DATA 61,73
00DCC:  DATA 68,20
00DCE:  DATA 43,6F
00DD0:  DATA 70,79
00DD2:  DATA 20,31
00DD4:  DATA 20,53
00DD6:  DATA 65,63
00DD8:  DATA 74,6F
00DDA:  DATA 72,0D
00DDC:  DATA 0A,00
00DDE:  DATA 53,74
00DE0:  DATA 61,72
00DE2:  DATA 74,20
00DE4:  DATA 46,6C
00DE6:  DATA 61,73
00DE8:  DATA 68,20
00DEA:  DATA 57,72
00DEC:  DATA 69,74
00DEE:  DATA 65,20
00DF0:  DATA 44,65
00DF2:  DATA 6D,6F
00DF4:  DATA 0D,0A
00DF6:  DATA 00,00
00DF8:  DATA 09,4D
00DFA:  DATA 4F,44
00DFC:  DATA 45,20
00DFE:  DATA 20,20
00E00:  DATA 20,20
00E02:  DATA 3A,20
00E04:  DATA 25,30
00E06:  DATA 32,58
00E08:  DATA 0D,0A
00E0A:  DATA 00,00
00E0C:  DATA 09,41
00E0E:  DATA 64,64
00E10:  DATA 72,65
00E12:  DATA 73,73
00E14:  DATA 20,20
00E16:  DATA 3A,20
00E18:  DATA 30,78
00E1A:  DATA 25,30
00E1C:  DATA 38,4C
00E1E:  DATA 58,0D
00E20:  DATA 0A,00
00E22:  DATA 09,50
00E24:  DATA 61,63
00E26:  DATA 6B,65
00E28:  DATA 74,4E
00E2A:  DATA 75,6D
00E2C:  DATA 3A,20
00E2E:  DATA 30,78
00E30:  DATA 25,30
00E32:  DATA 34,4C
00E34:  DATA 58,0D
00E36:  DATA 0A,00
00E38:  DATA 57,72
00E3A:  DATA 69,74
00E3C:  DATA 65,20
00E3E:  DATA 44,61
00E40:  DATA 74,61
00E42:  DATA 0D,0A
00E44:  DATA 00,00
00E46:  DATA 45,6E
00E48:  DATA 64,20
00E4A:  DATA 46,6C
00E4C:  DATA 61,73
00E4E:  DATA 68,20
00E50:  DATA 57,72
00E52:  DATA 69,74
00E54:  DATA 65,20
00E56:  DATA 44,65
00E58:  DATA 6D,6F
00E5A:  DATA 0D,0A
00E5C:  DATA 00,00
00E5E:  DATA 53,74
00E60:  DATA 61,72
00E62:  DATA 74,20
00E64:  DATA 46,6C
00E66:  DATA 61,73
00E68:  DATA 68,20
00E6A:  DATA 57,72
00E6C:  DATA 69,74
00E6E:  DATA 65,20
00E70:  DATA 34,6B
00E72:  DATA 42,79
00E74:  DATA 74,65
00E76:  DATA 20,53
00E78:  DATA 75,62
00E7A:  DATA 73,65
00E7C:  DATA 63,74
00E7E:  DATA 6F,72
00E80:  DATA 0D,0A
00E82:  DATA 00,00
00E84:  DATA 45,6E
00E86:  DATA 64,20
00E88:  DATA 46,6C
00E8A:  DATA 61,73
00E8C:  DATA 68,20
00E8E:  DATA 57,72
00E90:  DATA 69,74
00E92:  DATA 65,20
00E94:  DATA 34,6B
00E96:  DATA 42,79
00E98:  DATA 74,65
00E9A:  DATA 20,53
00E9C:  DATA 75,62
00E9E:  DATA 73,65
00EA0:  DATA 63,74
00EA2:  DATA 6F,72
00EA4:  DATA 0D,0A
00EA6:  DATA 00,00
00EA8:  DATA 53,74
00EAA:  DATA 61,72
00EAC:  DATA 74,20
00EAE:  DATA 46,6C
00EB0:  DATA 61,73
00EB2:  DATA 68,20
00EB4:  DATA 52,65
00EB6:  DATA 61,64
00EB8:  DATA 0D,0A
00EBA:  DATA 00,00
00EBC:  DATA 09,4D
00EBE:  DATA 4F,44
00EC0:  DATA 45,20
00EC2:  DATA 20,20
00EC4:  DATA 20,20
00EC6:  DATA 3A,20
00EC8:  DATA 25,30
00ECA:  DATA 32,58
00ECC:  DATA 0D,0A
00ECE:  DATA 00,00
00ED0:  DATA 09,41
00ED2:  DATA 64,64
00ED4:  DATA 72,65
00ED6:  DATA 73,73
00ED8:  DATA 20,20
00EDA:  DATA 3A,20
00EDC:  DATA 30,78
00EDE:  DATA 25,30
00EE0:  DATA 38,4C
00EE2:  DATA 58,0D
00EE4:  DATA 0A,00
00EE6:  DATA 09,50
00EE8:  DATA 61,63
00EEA:  DATA 6B,65
00EEC:  DATA 74,4E
00EEE:  DATA 75,6D
00EF0:  DATA 3A,20
00EF2:  DATA 30,78
00EF4:  DATA 25,30
00EF6:  DATA 34,4C
00EF8:  DATA 58,0D
00EFA:  DATA 0A,00
00EFC:  DATA 52,45
00EFE:  DATA 41,44
00F00:  DATA 20,44
00F02:  DATA 41,54
00F04:  DATA 41,0D
00F06:  DATA 0A,00
00F08:  DATA 4D,69
00F0A:  DATA 73,73
00F0C:  DATA 69,6F
00F0E:  DATA 6E,20
00F10:  DATA 46,6C
00F12:  DATA 61,73
00F14:  DATA 68,20
00F16:  DATA 69,73
00F18:  DATA 20,6E
00F1A:  DATA 6F,74
00F1C:  DATA 20,63
00F1E:  DATA 6F,6E
00F20:  DATA 6E,65
00F22:  DATA 63,74
00F24:  DATA 65,64
00F26:  DATA 0D,0A
00F28:  DATA 00,00
00F2A:  DATA 45,6E
00F2C:  DATA 64,20
00F2E:  DATA 46,6C
00F30:  DATA 61,73
00F32:  DATA 68,20
00F34:  DATA 52,65
00F36:  DATA 61,64
00F38:  DATA 0D,0A
00F3A:  DATA 00,00
00F3C:  DATA 53,74
00F3E:  DATA 61,72
00F40:  DATA 74,20
00F42:  DATA 46,6C
00F44:  DATA 61,73
00F46:  DATA 68,20
00F48:  DATA 52,65
00F4A:  DATA 61,64
00F4C:  DATA 20,41
00F4E:  DATA 64,64
00F50:  DATA 72,65
00F52:  DATA 73,73
00F54:  DATA 0D,0A
00F56:  DATA 00,00
00F58:  DATA 52,65
00F5A:  DATA 61,64
00F5C:  DATA 20,44
00F5E:  DATA 61,74
00F60:  DATA 61,3A
00F62:  DATA 20,25
00F64:  DATA 30,32
00F66:  DATA 58,20
00F68:  DATA 25,30
00F6A:  DATA 32,58
00F6C:  DATA 20,25
00F6E:  DATA 30,32
00F70:  DATA 58,20
00F72:  DATA 25,30
00F74:  DATA 32,58
00F76:  DATA 0D,0A
00F78:  DATA 00,00
00F7A:  DATA 45,6E
00F7C:  DATA 64,20
00F7E:  DATA 46,6C
00F80:  DATA 61,73
00F82:  DATA 68,20
00F84:  DATA 52,65
00F86:  DATA 61,64
00F88:  DATA 20,41
00F8A:  DATA 64,64
00F8C:  DATA 72,65
00F8E:  DATA 73,73
00F90:  DATA 0D,0A
00F92:  DATA 00,00
00F94:  DATA 53,74
00F96:  DATA 61,72
00F98:  DATA 74,20
00F9A:  DATA 46,6C
00F9C:  DATA 61,73
00F9E:  DATA 68,20
00FA0:  DATA 53,4D
00FA2:  DATA 46,20
00FA4:  DATA 43,6F
00FA6:  DATA 70,79
00FA8:  DATA 0D,0A
00FAA:  DATA 00,00
00FAC:  DATA 45,6E
00FAE:  DATA 64,20
00FB0:  DATA 46,6C
00FB2:  DATA 61,73
00FB4:  DATA 68,20
00FB6:  DATA 53,4D
00FB8:  DATA 46,20
00FBA:  DATA 43,6F
00FBC:  DATA 70,79
00FBE:  DATA 0D,0A
00FC0:  DATA 00,00
00FC2:  DATA 53,74
00FC4:  DATA 61,72
00FC6:  DATA 74,20
00FC8:  DATA 46,6C
00FCA:  DATA 61,73
00FCC:  DATA 68,20
00FCE:  DATA 53,4D
00FD0:  DATA 46,20
00FD2:  DATA 52,65
00FD4:  DATA 61,64
00FD6:  DATA 0D,0A
00FD8:  DATA 00,00
00FDA:  DATA 52,65
00FDC:  DATA 61,64
00FDE:  DATA 20,44
00FE0:  DATA 61,74
00FE2:  DATA 61,3A
00FE4:  DATA 20,00
00FE6:  DATA 0D,0A
00FE8:  DATA 45,6E
00FEA:  DATA 64,20
00FEC:  DATA 46,6C
00FEE:  DATA 61,73
00FF0:  DATA 68,20
00FF2:  DATA 53,4D
00FF4:  DATA 46,20
00FF6:  DATA 52,65
00FF8:  DATA 61,64
00FFA:  DATA 0D,0A
00FFC:  DATA 00,00
00FFE:  DATA 53,74
01000:  DATA 61,72
01002:  DATA 74,20
01004:  DATA 46,6C
01006:  DATA 61,73
01008:  DATA 68,20
0100A:  DATA 53,4D
0100C:  DATA 46,20
0100E:  DATA 57,72
01010:  DATA 69,74
01012:  DATA 65,0D
01014:  DATA 0A,00
01016:  DATA 45,6E
01018:  DATA 64,20
0101A:  DATA 46,6C
0101C:  DATA 61,73
0101E:  DATA 68,20
01020:  DATA 53,4D
01022:  DATA 46,20
01024:  DATA 57,72
01026:  DATA 69,74
01028:  DATA 65,0D
0102A:  DATA 0A,00
0102C:  DATA 53,74
0102E:  DATA 61,72
01030:  DATA 74,20
01032:  DATA 46,6C
01034:  DATA 61,73
01036:  DATA 68,20
01038:  DATA 41,64
0103A:  DATA 64,72
0103C:  DATA 65,73
0103E:  DATA 73,20
01040:  DATA 52,65
01042:  DATA 73,65
01044:  DATA 74,0D
01046:  DATA 0A,00
01048:  DATA 45,6E
0104A:  DATA 64,20
0104C:  DATA 46,6C
0104E:  DATA 61,73
01050:  DATA 68,20
01052:  DATA 41,64
01054:  DATA 64,72
01056:  DATA 65,73
01058:  DATA 73,20
0105A:  DATA 52,65
0105C:  DATA 73,65
0105E:  DATA 74,0D
01060:  DATA 0A,00
01062:  DATA 0D,0A
01064:  DATA 5F,5F
01066:  DATA 5F,5F
01068:  DATA 5F,5F
0106A:  DATA 5F,5F
0106C:  DATA 5F,5F
0106E:  DATA 5F,5F
01070:  DATA 5F,5F
01072:  DATA 5F,5F
01074:  DATA 5F,5F
01076:  DATA 5F,5F
01078:  DATA 5F,5F
0107A:  DATA 5F,5F
0107C:  DATA 5F,5F
0107E:  DATA 5F,5F
01080:  DATA 5F,5F
01082:  DATA 0D,0A
01084:  DATA 5F,5F
01086:  DATA 5F,5F
01088:  DATA 5F,53
0108A:  DATA 74,61
0108C:  DATA 72,74
0108E:  DATA 20,65
01090:  DATA 78,65
01092:  DATA 63,75
01094:  DATA 74,65
01096:  DATA 5F,6D
01098:  DATA 69,73
0109A:  DATA 73,69
0109C:  DATA 6F,6E
0109E:  DATA 5F,5F
010A0:  DATA 5F,5F
010A2:  DATA 5F,0D
010A4:  DATA 0A,0D
010A6:  DATA 0A,00
010A8:  DATA 43,6F
010AA:  DATA 6D,6D
010AC:  DATA 61,6E
010AE:  DATA 64,20
010B0:  DATA 49,44
010B2:  DATA 3A,20
010B4:  DATA 25,58
010B6:  DATA 0D,0A
010B8:  DATA 0D,0A
010BA:  DATA 00,00
010BC:  DATA 09,09
010BE:  DATA 2D,3E
010C0:  DATA 20,49
010C2:  DATA 6E,76
010C4:  DATA 61,6C
010C6:  DATA 69,64
010C8:  DATA 20,43
010CA:  DATA 4D,44
010CC:  DATA 20,49
010CE:  DATA 44,21
010D0:  DATA 0D,0A
010D2:  DATA 00,00
010D4:  DATA 0D,0A
010D6:  DATA 5F,5F
010D8:  DATA 5F,5F
010DA:  DATA 5F,5F
010DC:  DATA 45,6E
010DE:  DATA 64,20
010E0:  DATA 65,78
010E2:  DATA 65,63
010E4:  DATA 75,74
010E6:  DATA 65,5F
010E8:  DATA 6D,69
010EA:  DATA 73,73
010EC:  DATA 69,6F
010EE:  DATA 6E,5F
010F0:  DATA 5F,5F
010F2:  DATA 5F,5F
010F4:  DATA 5F,0D
010F6:  DATA 0A,5F
010F8:  DATA 5F,5F
010FA:  DATA 5F,5F
010FC:  DATA 5F,5F
010FE:  DATA 5F,5F
01100:  DATA 5F,5F
01102:  DATA 5F,5F
01104:  DATA 5F,5F
01106:  DATA 5F,5F
01108:  DATA 5F,5F
0110A:  DATA 5F,5F
0110C:  DATA 5F,5F
0110E:  DATA 5F,5F
01110:  DATA 5F,5F
01112:  DATA 5F,5F
01114:  DATA 5F,5F
01116:  DATA 0D,0A
01118:  DATA 00,00
0111A:  DATA 53,74
0111C:  DATA 61,72
0111E:  DATA 74,20
01120:  DATA 65,78
01122:  DATA 65,63
01124:  DATA 75,74
01126:  DATA 65,5F
01128:  DATA 63,6F
0112A:  DATA 6D,6D
0112C:  DATA 61,6E
0112E:  DATA 64,0D
01130:  DATA 0A,00
01132:  DATA 09,2D
01134:  DATA 3E,20
01136:  DATA 55,70
01138:  DATA 6C,69
0113A:  DATA 6E,6B
0113C:  DATA 20,63
0113E:  DATA 6F,6D
01140:  DATA 6D,61
01142:  DATA 6E,64
01144:  DATA 0D,0A
01146:  DATA 00,00
01148:  DATA 09,20
0114A:  DATA 20,20
0114C:  DATA 54,72
0114E:  DATA 61,6E
01150:  DATA 73,6D
01152:  DATA 69,74
01154:  DATA 20,41
01156:  DATA 63,6B
01158:  DATA 6E,6F
0115A:  DATA 6C,65
0115C:  DATA 67,64
0115E:  DATA 65,0D
01160:  DATA 0A,00
01162:  DATA 09,2D
01164:  DATA 3E,20
01166:  DATA 53,74
01168:  DATA 61,74
0116A:  DATA 75,73
0116C:  DATA 20,63
0116E:  DATA 68,65
01170:  DATA 63,6B
01172:  DATA 0D,0A
01174:  DATA 00,00
01176:  DATA 09,20
01178:  DATA 20,20
0117A:  DATA 54,72
0117C:  DATA 61,6E
0117E:  DATA 73,6D
01180:  DATA 69,74
01182:  DATA 20,4D
01184:  DATA 49,53
01186:  DATA 20,4D
01188:  DATA 43,55
0118A:  DATA 20,53
0118C:  DATA 74,61
0118E:  DATA 74,75
01190:  DATA 73,0D
01192:  DATA 0A,00
01194:  DATA 66,69
01196:  DATA 6E,69
01198:  DATA 73,68
0119A:  DATA 65,64
0119C:  DATA 20,69
0119E:  DATA 6E,20
011A0:  DATA 73,74
011A2:  DATA 61,74
011A4:  DATA 75,73
011A6:  DATA 5F,63
011A8:  DATA 68,65
011AA:  DATA 63,6B
011AC:  DATA 0D,0A
011AE:  DATA 00,00
011B0:  DATA 09,2D
011B2:  DATA 3E,20
011B4:  DATA 53,4D
011B6:  DATA 46,20
011B8:  DATA 61,76
011BA:  DATA 61,69
011BC:  DATA 6C,61
011BE:  DATA 62,6C
011C0:  DATA 65,20
011C2:  DATA 63,68
011C4:  DATA 65,63
011C6:  DATA 6B,0D
011C8:  DATA 0A,00
011CA:  DATA 09,20
011CC:  DATA 20,20
011CE:  DATA 54,72
011D0:  DATA 61,6E
011D2:  DATA 73,6D
011D4:  DATA 69,74
011D6:  DATA 20,41
011D8:  DATA 63,6B
011DA:  DATA 6E,6F
011DC:  DATA 6C,65
011DE:  DATA 67,64
011E0:  DATA 65,0D
011E2:  DATA 0A,00
011E4:  DATA 09,09
011E6:  DATA 2D,3E
011E8:  DATA 20,61
011EA:  DATA 6C,6C
011EC:  DATA 6F,77
011EE:  DATA 64,0D
011F0:  DATA 0A,00
011F2:  DATA 09,09
011F4:  DATA 2D,3E
011F6:  DATA 20,64
011F8:  DATA 65,6E
011FA:  DATA 79,65
011FC:  DATA 64,0D
011FE:  DATA 0A,00
01200:  DATA 0D,0A
01202:  DATA 0D,0A
01204:  DATA 0D,0A
01206:  DATA 3D,3D
01208:  DATA 3D,3D
0120A:  DATA 3D,3D
0120C:  DATA 3D,3D
0120E:  DATA 3D,3D
01210:  DATA 3D,3D
01212:  DATA 3D,3D
01214:  DATA 3D,3D
01216:  DATA 3D,3D
01218:  DATA 3D,3D
0121A:  DATA 3D,3D
0121C:  DATA 3D,3D
0121E:  DATA 3D,3D
01220:  DATA 3D,3D
01222:  DATA 3D,3D
01224:  DATA 3D,3D
01226:  DATA 3D,3D
01228:  DATA 3D,3D
0122A:  DATA 3D,3D
0122C:  DATA 3D,3D
0122E:  DATA 3D,3D
01230:  DATA 3D,3D
01232:  DATA 3D,3D
01234:  DATA 3D,3D
01236:  DATA 3D,3D
01238:  DATA 3D,3D
0123A:  DATA 3D,3D
0123C:  DATA 3D,3D
0123E:  DATA 3D,3D
01240:  DATA 3D,3D
01242:  DATA 0D,0A
01244:  DATA 00,00
01246:  DATA 54,68
01248:  DATA 69,73
0124A:  DATA 20,69
0124C:  DATA 73,20
0124E:  DATA 4D,4F
01250:  DATA 4D,49
01252:  DATA 4A,49
01254:  DATA 20,43
01256:  DATA 49,47
01258:  DATA 53,20
0125A:  DATA 50,49
0125C:  DATA 43,20
0125E:  DATA 42,42
01260:  DATA 4D,20
01262:  DATA 66,6F
01264:  DATA 72,20
01266:  DATA 4D,49
01268:  DATA 53,37
0126A:  DATA 5F,42
0126C:  DATA 42,4D
0126E:  DATA 33,2E
01270:  DATA 0D,0A
01272:  DATA 00,00
01274:  DATA 4C,61
01276:  DATA 73,74
01278:  DATA 20,75
0127A:  DATA 70,64
0127C:  DATA 61,74
0127E:  DATA 65,64
01280:  DATA 20,6F
01282:  DATA 6E,20
01284:  DATA 25,73
01286:  DATA 20,25
01288:  DATA 73,2C
0128A:  DATA 20,62
0128C:  DATA 79,20
0128E:  DATA 49,6E
01290:  DATA 6F,75
01292:  DATA 65,2E
01294:  DATA 0D,0A
01296:  DATA 0D,0A
01298:  DATA 00,00
0129A:  DATA 31,39
0129C:  DATA 2D,4A
0129E:  DATA 75,6C
012A0:  DATA 2D,32
012A2:  DATA 35,00
012A4:  DATA 31,39
012A6:  DATA 3A,33
012A8:  DATA 38,3A
012AA:  DATA 32,32
012AC:  DATA 00,00
012AE:  DATA 5F,5F
012B0:  DATA 5F,5F
012B2:  DATA 43,49
012B4:  DATA 47,53
012B6:  DATA 20,50
012B8:  DATA 49,43
012BA:  DATA 20,53
012BC:  DATA 74,61
012BE:  DATA 72,74
012C0:  DATA 20,4F
012C2:  DATA 70,65
012C4:  DATA 72,61
012C6:  DATA 74,69
012C8:  DATA 6F,6E
012CA:  DATA 5F,5F
012CC:  DATA 5F,5F
012CE:  DATA 5F,0D
012D0:  DATA 0A,0D
012D2:  DATA 0A,00
012D4:  DATA 77,61
012D6:  DATA 69,74
012D8:  DATA 69,6E
012DA:  DATA 67,20
012DC:  DATA 66,6F
012DE:  DATA 72,20
012E0:  DATA 42,4F
012E2:  DATA 53,53
012E4:  DATA 20,50
012E6:  DATA 49,43
012E8:  DATA 20,63
012EA:  DATA 6F,6D
012EC:  DATA 6D,61
012EE:  DATA 6E,64
012F0:  DATA 00,00
012F2:  DATA 0D,0A
012F4:  DATA 77,61
012F6:  DATA 69,74
012F8:  DATA 69,6E
012FA:  DATA 67,20
012FC:  DATA 66,6F
012FE:  DATA 72,20
01300:  DATA 42,4F
01302:  DATA 53,53
01304:  DATA 20,50
01306:  DATA 49,43
01308:  DATA 20,63
0130A:  DATA 6F,6D
0130C:  DATA 6D,61
0130E:  DATA 6E,64
01310:  DATA 00,00
01312:  DATA 0D,0A
01314:  DATA 0D,0A
01316:  DATA 3D,3D
01318:  DATA 3D,3D
0131A:  DATA 3D,3D
0131C:  DATA 0D,0A
0131E:  DATA 0D,0A
01320:  DATA 46,69
01322:  DATA 6E,69
01324:  DATA 73,68
01326:  DATA 65,64
01328:  DATA 20,70
0132A:  DATA 72,6F
0132C:  DATA 63,65
0132E:  DATA 73,73
01330:  DATA 2E,0D
01332:  DATA 0A,57
01334:  DATA 61,69
01336:  DATA 74,20
01338:  DATA 66,6F
0133A:  DATA 72,20
0133C:  DATA 42,4F
0133E:  DATA 53,53
01340:  DATA 20,50
01342:  DATA 49,43
01344:  DATA 20,74
01346:  DATA 75,72
01348:  DATA 6E,20
0134A:  DATA 6F,66
0134C:  DATA 66,20
0134E:  DATA 6D,65
01350:  DATA 00,00
01352:  DATA 45,6E
01354:  DATA 64,20
01356:  DATA 6D,61
01358:  DATA 69,6E
0135A:  DATA 0D,0A
0135C:  DATA 00,00
*
013DE:  TBLRD*+
013E0:  MOVF   FF5,F
013E2:  BTFSC  FD8.2
013E4:  GOTO   140C
013E8:  MOVFF  FF6,4E3
013EC:  MOVFF  FF7,4E4
013F0:  MOVFF  FF8,4E5
013F4:  MOVFF  FF5,4E6
013F8:  CALL   138C
013FC:  MOVFF  4E3,FF6
01400:  MOVFF  4E4,FF7
01404:  MOVFF  4E5,FF8
01408:  GOTO   13DE
0140C:  RETURN 0
0140E:  TBLRD*+
01410:  MOVFF  FF6,41A
01414:  MOVFF  FF7,41B
01418:  MOVFF  FF8,41C
0141C:  MOVFF  FF5,4E6
01420:  CALL   138C
01424:  MOVFF  41A,FF6
01428:  MOVFF  41B,FF7
0142C:  MOVFF  41C,FF8
01430:  MOVLB  4
01432:  DECFSZ x19,F
01434:  BRA    143A
01436:  BRA    1440
01438:  MOVLB  0
0143A:  MOVLB  0
0143C:  GOTO   140E
01440:  MOVLB  0
01442:  RETURN 0
*
014BE:  MOVLB  5
014C0:  MOVF   x01,W
014C2:  ANDLW  07
014C4:  MOVWF  00
014C6:  RRCF   x01,W
014C8:  MOVWF  01
014CA:  RRCF   01,F
014CC:  RRCF   01,F
014CE:  MOVLW  1F
014D0:  ANDWF  01,F
014D2:  MOVF   01,W
014D4:  ADDWF  x03,W
014D6:  MOVWF  FE9
014D8:  MOVLW  00
014DA:  ADDWFC x04,W
014DC:  MOVWF  FEA
014DE:  CLRF   01
014E0:  INCF   01,F
014E2:  INCF   00,F
014E4:  MOVLB  0
014E6:  GOTO   14EC
014EA:  RLCF   01,F
014EC:  DECFSZ 00,F
014EE:  GOTO   14EA
014F2:  MOVLB  5
014F4:  MOVF   x02,F
014F6:  BTFSS  FD8.2
014F8:  BRA    1500
014FA:  MOVLB  0
014FC:  GOTO   150A
01500:  MOVF   01,W
01502:  IORWF  FEF,F
01504:  MOVLB  0
01506:  GOTO   1510
0150A:  COMF   01,F
0150C:  MOVF   01,W
0150E:  ANDWF  FEF,F
01510:  RETURN 0
*
01A16:  MOVLB  4
01A18:  BTFSS  xA5.7
01A1A:  BRA    1A22
01A1C:  MOVLB  0
01A1E:  GOTO   1A52
01A22:  MOVLW  0F
01A24:  MOVWF  00
01A26:  SWAPF  xA4,W
01A28:  ANDWF  00,F
01A2A:  MOVLW  0A
01A2C:  SUBWF  00,W
01A2E:  BTFSS  FD8.0
01A30:  BRA    1A38
01A32:  MOVLB  0
01A34:  GOTO   1A42
01A38:  MOVLW  30
01A3A:  ADDWF  00,F
01A3C:  MOVLB  0
01A3E:  GOTO   1A4A
01A42:  MOVLB  4
01A44:  MOVF   xA5,W
01A46:  ADDWF  00,F
01A48:  MOVLB  0
01A4A:  MOVFF  00,4E6
01A4E:  CALL   138C
01A52:  MOVLW  0F
01A54:  MOVLB  4
01A56:  ANDWF  xA4,F
01A58:  MOVLW  0A
01A5A:  SUBWF  xA4,W
01A5C:  BTFSS  FD8.0
01A5E:  BRA    1A66
01A60:  MOVLB  0
01A62:  GOTO   1A6E
01A66:  MOVLW  30
01A68:  MOVLB  0
01A6A:  GOTO   1A76
01A6E:  MOVLB  4
01A70:  BCF    xA5.7
01A72:  MOVF   xA5,W
01A74:  MOVLB  0
01A76:  MOVLB  4
01A78:  ADDWF  xA4,F
01A7A:  MOVFF  4A4,4E6
01A7E:  MOVLB  0
01A80:  CALL   138C
01A84:  RETURN 0
*
03702:  TSTFSZ 01
03704:  GOTO   3712
03708:  TSTFSZ 02
0370A:  GOTO   3714
0370E:  GOTO   3724
03712:  INCF   02,F
03714:  MOVFF  00,FEE
03718:  DECFSZ 01,F
0371A:  GOTO   3714
0371E:  DECFSZ 02,F
03720:  GOTO   3714
03724:  GOTO   3750 (RETURN)
*
03B0C:  MOVLB  4
03B0E:  MOVF   x20,W
03B10:  CLRF   01
03B12:  SUBWF  x1F,W
03B14:  BTFSS  FD8.0
03B16:  BRA    3B1E
03B18:  MOVLB  0
03B1A:  GOTO   3B28
03B1E:  MOVF   x1F,W
03B20:  MOVWF  00
03B22:  MOVLB  0
03B24:  GOTO   3B52
03B28:  CLRF   00
03B2A:  MOVLW  08
03B2C:  MOVLB  4
03B2E:  MOVWF  x21
03B30:  MOVLB  0
03B32:  MOVLB  4
03B34:  RLCF   x1F,F
03B36:  RLCF   00,F
03B38:  MOVF   x20,W
03B3A:  SUBWF  00,W
03B3C:  BTFSC  FD8.0
03B3E:  MOVWF  00
03B40:  RLCF   01,F
03B42:  DECFSZ x21,F
03B44:  BRA    3B4A
03B46:  BRA    3B50
03B48:  MOVLB  0
03B4A:  MOVLB  0
03B4C:  GOTO   3B32
03B50:  MOVLB  0
03B52:  RETURN 0
03B54:  MOVF   01,W
03B56:  MOVFF  415,41F
03B5A:  MOVLW  64
03B5C:  MOVLB  4
03B5E:  MOVWF  x20
03B60:  MOVLB  0
03B62:  CALL   3B0C
03B66:  MOVFF  00,415
03B6A:  MOVF   01,W
03B6C:  MOVLW  30
03B6E:  BTFSS  FD8.2
03B70:  GOTO   3B94
03B74:  MOVLB  4
03B76:  BTFSC  x16.1
03B78:  BRA    3B80
03B7A:  MOVLB  0
03B7C:  GOTO   3BA8
03B80:  BTFSS  x16.3
03B82:  BRA    3B8A
03B84:  MOVLB  0
03B86:  GOTO   3BA8
03B8A:  BTFSC  x16.4
03B8C:  MOVLW  20
03B8E:  MOVLB  0
03B90:  GOTO   3B9E
03B94:  MOVLB  4
03B96:  BCF    x16.3
03B98:  BCF    x16.4
03B9A:  BSF    x16.0
03B9C:  MOVLB  0
03B9E:  ADDWF  01,F
03BA0:  MOVFF  01,4E6
03BA4:  CALL   138C
03BA8:  MOVFF  415,41F
03BAC:  MOVLW  0A
03BAE:  MOVLB  4
03BB0:  MOVWF  x20
03BB2:  MOVLB  0
03BB4:  CALL   3B0C
03BB8:  MOVFF  00,415
03BBC:  MOVF   01,W
03BBE:  MOVLW  30
03BC0:  BTFSS  FD8.2
03BC2:  GOTO   3BE2
03BC6:  MOVLB  4
03BC8:  BTFSS  x16.3
03BCA:  BRA    3BD2
03BCC:  MOVLB  0
03BCE:  GOTO   3BEC
03BD2:  BTFSC  x16.0
03BD4:  BRA    3BDC
03BD6:  MOVLB  0
03BD8:  GOTO   3BEC
03BDC:  BTFSC  x16.4
03BDE:  MOVLW  20
03BE0:  MOVLB  0
03BE2:  ADDWF  01,F
03BE4:  MOVFF  01,4E6
03BE8:  CALL   138C
03BEC:  MOVLW  30
03BEE:  MOVLB  4
03BF0:  ADDWF  x15,F
03BF2:  MOVFF  415,4E6
03BF6:  MOVLB  0
03BF8:  CALL   138C
03BFC:  RETURN 0
*
03EF4:  MOVFF  FEA,39E
03EF8:  MOVFF  FE9,39D
03EFC:  MOVLB  3
03EFE:  SWAPF  x97,W
03F00:  IORLW  F0
03F02:  MOVWF  x99
03F04:  ADDWF  x99,F
03F06:  ADDLW  E2
03F08:  MOVWF  x9A
03F0A:  ADDLW  32
03F0C:  MOVWF  x9C
03F0E:  MOVF   x97,W
03F10:  ANDLW  0F
03F12:  ADDWF  x9A,F
03F14:  ADDWF  x9A,F
03F16:  ADDWF  x9C,F
03F18:  ADDLW  E9
03F1A:  MOVWF  x9B
03F1C:  ADDWF  x9B,F
03F1E:  ADDWF  x9B,F
03F20:  SWAPF  x96,W
03F22:  ANDLW  0F
03F24:  ADDWF  x9B,F
03F26:  ADDWF  x9C,F
03F28:  RLCF   x9B,F
03F2A:  RLCF   x9C,F
03F2C:  COMF   x9C,F
03F2E:  RLCF   x9C,F
03F30:  MOVF   x96,W
03F32:  ANDLW  0F
03F34:  ADDWF  x9C,F
03F36:  RLCF   x99,F
03F38:  MOVLW  07
03F3A:  MOVWF  x98
03F3C:  MOVLW  0A
03F3E:  MOVLB  0
03F40:  MOVLB  3
03F42:  DECF   x9B,F
03F44:  ADDWF  x9C,F
03F46:  BTFSC  FD8.0
03F48:  BRA    3F50
03F4A:  MOVLB  0
03F4C:  GOTO   3F40
03F50:  MOVLB  0
03F52:  MOVLB  3
03F54:  DECF   x9A,F
03F56:  ADDWF  x9B,F
03F58:  BTFSC  FD8.0
03F5A:  BRA    3F62
03F5C:  MOVLB  0
03F5E:  GOTO   3F52
03F62:  MOVLB  0
03F64:  MOVLB  3
03F66:  DECF   x99,F
03F68:  ADDWF  x9A,F
03F6A:  BTFSC  FD8.0
03F6C:  BRA    3F74
03F6E:  MOVLB  0
03F70:  GOTO   3F64
03F74:  MOVLB  0
03F76:  MOVLB  3
03F78:  DECF   x98,F
03F7A:  ADDWF  x99,F
03F7C:  BTFSC  FD8.0
03F7E:  BRA    3F86
03F80:  MOVLB  0
03F82:  GOTO   3F76
03F86:  MOVLW  03
03F88:  MOVWF  FEA
03F8A:  MOVLW  98
03F8C:  MOVWF  FE9
03F8E:  MOVLW  07
03F90:  ANDWF  x9D,W
03F92:  BCF    x9D.6
03F94:  MOVLB  0
03F96:  ADDWF  FE9,F
03F98:  MOVLW  00
03F9A:  ADDWFC FEA,F
03F9C:  MOVF   FE9,W
03F9E:  SUBLW  9C
03FA0:  BTFSS  FD8.2
03FA2:  GOTO   3FB6
03FA6:  MOVF   FEA,W
03FA8:  SUBLW  03
03FAA:  BTFSS  FD8.2
03FAC:  GOTO   3FB6
03FB0:  MOVLB  3
03FB2:  BSF    x9D.6
03FB4:  MOVLB  0
03FB6:  MOVF   FEF,W
03FB8:  MOVWF  00
03FBA:  BTFSS  FD8.2
03FBC:  GOTO   3FE8
03FC0:  MOVLB  3
03FC2:  BTFSS  x9D.6
03FC4:  BRA    3FCC
03FC6:  MOVLB  0
03FC8:  GOTO   3FE8
03FCC:  BTFSS  x9D.4
03FCE:  BRA    3FD6
03FD0:  MOVLB  0
03FD2:  GOTO   400C
03FD6:  BTFSS  x9D.3
03FD8:  BRA    3FE0
03FDA:  MOVLB  0
03FDC:  GOTO   3FE8
03FE0:  MOVLW  20
03FE2:  MOVLB  0
03FE4:  GOTO   3FF2
03FE8:  MOVLB  3
03FEA:  BSF    x9D.3
03FEC:  BCF    x9D.4
03FEE:  MOVLW  30
03FF0:  MOVLB  0
03FF2:  ADDWF  00,F
03FF4:  MOVFF  FEA,397
03FF8:  MOVFF  FE9,396
03FFC:  MOVFF  00,4E6
04000:  CALL   138C
04004:  MOVFF  397,FEA
04008:  MOVFF  396,FE9
0400C:  MOVF   FEE,W
0400E:  MOVLB  3
04010:  BTFSC  x9D.6
04012:  BRA    401A
04014:  MOVLB  0
04016:  GOTO   3F9C
0401A:  MOVLB  0
0401C:  RETURN 0
*
05AC0:  BTFSC  FD8.1
05AC2:  GOTO   5ACE
05AC6:  MOVLW  04
05AC8:  MOVWF  FEA
05ACA:  MOVLW  29
05ACC:  MOVWF  FE9
05ACE:  CLRF   00
05AD0:  CLRF   01
05AD2:  CLRF   02
05AD4:  CLRF   03
05AD6:  MOVLB  4
05AD8:  CLRF   x29
05ADA:  CLRF   x2A
05ADC:  CLRF   x2B
05ADE:  CLRF   x2C
05AE0:  MOVF   x28,W
05AE2:  IORWF  x27,W
05AE4:  IORWF  x26,W
05AE6:  IORWF  x25,W
05AE8:  BTFSS  FD8.2
05AEA:  BRA    5AF2
05AEC:  MOVLB  0
05AEE:  GOTO   5B82
05AF2:  MOVLB  0
05AF4:  MOVLW  20
05AF6:  MOVLB  4
05AF8:  MOVWF  x2D
05AFA:  MOVLB  0
05AFC:  BCF    FD8.0
05AFE:  MOVLB  4
05B00:  RLCF   x21,F
05B02:  RLCF   x22,F
05B04:  RLCF   x23,F
05B06:  RLCF   x24,F
05B08:  RLCF   x29,F
05B0A:  RLCF   x2A,F
05B0C:  RLCF   x2B,F
05B0E:  RLCF   x2C,F
05B10:  MOVF   x28,W
05B12:  SUBWF  x2C,W
05B14:  BTFSC  FD8.2
05B16:  BRA    5B1E
05B18:  MOVLB  0
05B1A:  GOTO   5B40
05B1E:  MOVF   x27,W
05B20:  SUBWF  x2B,W
05B22:  BTFSC  FD8.2
05B24:  BRA    5B2C
05B26:  MOVLB  0
05B28:  GOTO   5B40
05B2C:  MOVF   x26,W
05B2E:  SUBWF  x2A,W
05B30:  BTFSC  FD8.2
05B32:  BRA    5B3A
05B34:  MOVLB  0
05B36:  GOTO   5B40
05B3A:  MOVF   x25,W
05B3C:  SUBWF  x29,W
05B3E:  MOVLB  0
05B40:  BTFSS  FD8.0
05B42:  GOTO   5B68
05B46:  MOVLB  4
05B48:  MOVF   x25,W
05B4A:  SUBWF  x29,F
05B4C:  MOVF   x26,W
05B4E:  BTFSS  FD8.0
05B50:  INCFSZ x26,W
05B52:  SUBWF  x2A,F
05B54:  MOVF   x27,W
05B56:  BTFSS  FD8.0
05B58:  INCFSZ x27,W
05B5A:  SUBWF  x2B,F
05B5C:  MOVF   x28,W
05B5E:  BTFSS  FD8.0
05B60:  INCFSZ x28,W
05B62:  SUBWF  x2C,F
05B64:  BSF    FD8.0
05B66:  MOVLB  0
05B68:  RLCF   00,F
05B6A:  RLCF   01,F
05B6C:  RLCF   02,F
05B6E:  RLCF   03,F
05B70:  MOVLB  4
05B72:  DECFSZ x2D,F
05B74:  BRA    5B7A
05B76:  BRA    5B80
05B78:  MOVLB  0
05B7A:  MOVLB  0
05B7C:  GOTO   5AFC
05B80:  MOVLB  0
05B82:  MOVFF  429,FEF
05B86:  MOVFF  42A,FEC
05B8A:  MOVFF  42B,FEC
05B8E:  MOVFF  42C,FEC
05B92:  MOVF   FED,F
05B94:  MOVF   FED,F
05B96:  MOVF   FED,F
05B98:  RETURN 0
*
0608E:  MOVLW  20
06090:  MOVLB  4
06092:  BTFSS  x1A.4
06094:  MOVLW  30
06096:  MOVWF  x1B
06098:  MOVFF  419,00
0609C:  BTFSC  00.7
0609E:  BRA    60A6
060A0:  MOVLB  0
060A2:  GOTO   60B8
060A6:  COMF   00,F
060A8:  INCF   00,F
060AA:  MOVFF  00,419
060AE:  MOVLW  2D
060B0:  MOVWF  x1B
060B2:  BSF    x1A.7
060B4:  BSF    x1A.0
060B6:  MOVLB  0
060B8:  MOVF   01,W
060BA:  MOVFF  419,41F
060BE:  MOVLW  64
060C0:  MOVLB  4
060C2:  MOVWF  x20
060C4:  MOVLB  0
060C6:  CALL   3B0C
060CA:  MOVFF  00,419
060CE:  MOVLW  30
060D0:  ADDWF  01,W
060D2:  MOVLB  4
060D4:  MOVWF  x1C
060D6:  MOVFF  419,41F
060DA:  MOVLW  0A
060DC:  MOVWF  x20
060DE:  MOVLB  0
060E0:  CALL   3B0C
060E4:  MOVLW  30
060E6:  ADDWF  00,W
060E8:  MOVLB  4
060EA:  MOVWF  x1E
060EC:  MOVLW  30
060EE:  ADDWF  01,W
060F0:  MOVWF  x1D
060F2:  MOVFF  41B,00
060F6:  MOVLB  0
060F8:  MOVLW  30
060FA:  MOVLB  4
060FC:  SUBWF  x1C,W
060FE:  BTFSS  FD8.2
06100:  BRA    6108
06102:  MOVLB  0
06104:  GOTO   6114
06108:  BSF    x1A.1
0610A:  BTFSC  x1A.7
0610C:  BSF    x1A.2
0610E:  MOVLB  0
06110:  GOTO   6154
06114:  MOVFF  41B,41C
06118:  MOVLW  20
0611A:  MOVLB  4
0611C:  MOVWF  x1B
0611E:  MOVLW  30
06120:  SUBWF  x1D,W
06122:  BTFSS  FD8.2
06124:  BRA    612C
06126:  MOVLB  0
06128:  GOTO   6138
0612C:  BSF    x1A.0
0612E:  BTFSC  x1A.7
06130:  BSF    x1A.1
06132:  MOVLB  0
06134:  GOTO   6154
06138:  BTFSC  FD8.2
0613A:  BRA    6142
0613C:  MOVLB  4
0613E:  BSF    x1A.0
06140:  MOVLB  0
06142:  BTFSS  FD8.2
06144:  GOTO   6154
06148:  MOVFF  41C,41D
0614C:  MOVLW  20
0614E:  MOVLB  4
06150:  MOVWF  x1C
06152:  MOVLB  0
06154:  MOVLB  4
06156:  BTFSS  x1A.2
06158:  BRA    6160
0615A:  MOVLB  0
0615C:  GOTO   617A
06160:  BTFSS  x1A.1
06162:  BRA    616A
06164:  MOVLB  0
06166:  GOTO   6182
0616A:  BTFSS  x1A.0
0616C:  BRA    6174
0616E:  MOVLB  0
06170:  GOTO   618A
06174:  MOVLB  0
06176:  GOTO   6192
0617A:  MOVFF  41B,4E6
0617E:  CALL   138C
06182:  MOVFF  41C,4E6
06186:  CALL   138C
0618A:  MOVFF  41D,4E6
0618E:  CALL   138C
06192:  MOVFF  41E,4E6
06196:  CALL   138C
0619A:  RETURN 0
*
06294:  MOVF   FE9,W
06296:  MOVLB  4
06298:  MOVWF  x19
0629A:  MOVLW  3B
0629C:  MOVWF  x20
0629E:  MOVLW  9A
062A0:  MOVWF  x1F
062A2:  MOVLW  CA
062A4:  MOVWF  x1E
062A6:  CLRF   x1D
062A8:  MOVLW  0A
062AA:  MOVWF  x1B
062AC:  MOVLB  0
062AE:  BSF    FD8.1
062B0:  MOVLW  04
062B2:  MOVWF  FEA
062B4:  MOVLW  15
062B6:  MOVWF  FE9
062B8:  MOVFF  418,424
062BC:  MOVFF  417,423
062C0:  MOVFF  416,422
062C4:  MOVFF  415,421
062C8:  MOVFF  420,428
062CC:  MOVFF  41F,427
062D0:  MOVFF  41E,426
062D4:  MOVFF  41D,425
062D8:  CALL   5AC0
062DC:  MOVF   01,W
062DE:  MOVF   00,F
062E0:  BTFSS  FD8.2
062E2:  GOTO   633A
062E6:  MOVLB  4
062E8:  MOVF   x1B,W
062EA:  XORLW  01
062EC:  BTFSS  FD8.2
062EE:  BRA    62F6
062F0:  MOVLB  0
062F2:  GOTO   633A
062F6:  MOVF   x19,W
062F8:  BTFSS  FD8.2
062FA:  BRA    6302
062FC:  MOVLB  0
062FE:  GOTO   6340
06302:  ANDLW  0F
06304:  SUBWF  x1B,W
06306:  BTFSS  FD8.2
06308:  BRA    6310
0630A:  MOVLB  0
0630C:  GOTO   631C
06310:  BTFSS  FD8.0
06312:  BRA    631A
06314:  MOVLB  0
06316:  GOTO   634C
0631A:  MOVLB  0
0631C:  MOVLB  4
0631E:  BTFSS  x19.7
06320:  BRA    6328
06322:  MOVLB  0
06324:  GOTO   634C
06328:  BTFSS  x19.6
0632A:  BRA    6332
0632C:  MOVLB  0
0632E:  GOTO   6340
06332:  MOVLW  20
06334:  MOVLB  0
06336:  GOTO   6342
0633A:  MOVLB  4
0633C:  CLRF   x19
0633E:  MOVLB  0
06340:  MOVLW  30
06342:  ADDWF  00,F
06344:  MOVFF  00,4E6
06348:  CALL   138C
0634C:  BCF    FD8.1
0634E:  MOVFF  420,424
06352:  MOVFF  41F,423
06356:  MOVFF  41E,422
0635A:  MOVFF  41D,421
0635E:  MOVLB  4
06360:  CLRF   x28
06362:  CLRF   x27
06364:  CLRF   x26
06366:  MOVLW  0A
06368:  MOVWF  x25
0636A:  MOVLB  0
0636C:  CALL   5AC0
06370:  MOVFF  03,420
06374:  MOVFF  02,41F
06378:  MOVFF  01,41E
0637C:  MOVFF  00,41D
06380:  MOVLB  4
06382:  DECFSZ x1B,F
06384:  BRA    638A
06386:  BRA    6390
06388:  MOVLB  0
0638A:  MOVLB  0
0638C:  GOTO   62AE
06390:  MOVLB  0
06392:  RETURN 0
*
0692E:  MOVF   FE9,W
06930:  MOVLB  4
06932:  MOVWF  x19
06934:  BTFSC  x18.7
06936:  BRA    693E
06938:  MOVLB  0
0693A:  GOTO   695A
0693E:  DECF   x19,F
06940:  BSF    x19.5
06942:  COMF   x15,F
06944:  COMF   x16,F
06946:  COMF   x17,F
06948:  COMF   x18,F
0694A:  INCF   x15,F
0694C:  BTFSC  FD8.2
0694E:  INCF   x16,F
06950:  BTFSC  FD8.2
06952:  INCF   x17,F
06954:  BTFSC  FD8.2
06956:  INCF   x18,F
06958:  MOVLB  0
0695A:  MOVLW  3B
0695C:  MOVLB  4
0695E:  MOVWF  x20
06960:  MOVLW  9A
06962:  MOVWF  x1F
06964:  MOVLW  CA
06966:  MOVWF  x1E
06968:  CLRF   x1D
0696A:  MOVLW  0A
0696C:  MOVWF  x1B
0696E:  MOVLB  0
06970:  BSF    FD8.1
06972:  MOVLW  04
06974:  MOVWF  FEA
06976:  MOVLW  15
06978:  MOVWF  FE9
0697A:  MOVFF  418,424
0697E:  MOVFF  417,423
06982:  MOVFF  416,422
06986:  MOVFF  415,421
0698A:  MOVFF  420,428
0698E:  MOVFF  41F,427
06992:  MOVFF  41E,426
06996:  MOVFF  41D,425
0699A:  CALL   5AC0
0699E:  MOVF   01,W
069A0:  MOVF   00,F
069A2:  BTFSS  FD8.2
069A4:  GOTO   69FC
069A8:  MOVLB  4
069AA:  MOVF   x1B,W
069AC:  XORLW  01
069AE:  BTFSS  FD8.2
069B0:  BRA    69B8
069B2:  MOVLB  0
069B4:  GOTO   69FC
069B8:  MOVF   x19,W
069BA:  BTFSS  FD8.2
069BC:  BRA    69C4
069BE:  MOVLB  0
069C0:  GOTO   6A04
069C4:  ANDLW  0F
069C6:  SUBWF  x1B,W
069C8:  BTFSS  FD8.2
069CA:  BRA    69D2
069CC:  MOVLB  0
069CE:  GOTO   69DE
069D2:  BTFSS  FD8.0
069D4:  BRA    69DC
069D6:  MOVLB  0
069D8:  GOTO   6A5E
069DC:  MOVLB  0
069DE:  MOVLB  4
069E0:  BTFSS  x19.7
069E2:  BRA    69EA
069E4:  MOVLB  0
069E6:  GOTO   6A5E
069EA:  BTFSS  x19.6
069EC:  BRA    69F4
069EE:  MOVLB  0
069F0:  GOTO   6A04
069F4:  MOVLW  20
069F6:  MOVLB  0
069F8:  GOTO   6A54
069FC:  MOVLW  20
069FE:  MOVLB  4
06A00:  ANDWF  x19,F
06A02:  MOVLB  0
06A04:  MOVLB  4
06A06:  BTFSC  x19.5
06A08:  BRA    6A10
06A0A:  MOVLB  0
06A0C:  GOTO   6A2A
06A10:  BCF    x19.5
06A12:  MOVF   00,W
06A14:  MOVWF  x19
06A16:  MOVLW  2D
06A18:  MOVWF  xE6
06A1A:  MOVLB  0
06A1C:  CALL   138C
06A20:  MOVLB  4
06A22:  MOVF   x19,W
06A24:  MOVWF  00
06A26:  CLRF   x19
06A28:  MOVLB  0
06A2A:  MOVLW  30
06A2C:  MOVLB  4
06A2E:  BTFSC  x19.5
06A30:  BRA    6A38
06A32:  MOVLB  0
06A34:  GOTO   6A54
06A38:  BCF    x19.5
06A3A:  MOVF   00,W
06A3C:  MOVWF  x19
06A3E:  MOVLW  2D
06A40:  MOVWF  xE6
06A42:  MOVLB  0
06A44:  CALL   138C
06A48:  MOVLB  4
06A4A:  MOVF   x19,W
06A4C:  MOVWF  00
06A4E:  CLRF   x19
06A50:  MOVLW  30
06A52:  MOVLB  0
06A54:  ADDWF  00,F
06A56:  MOVFF  00,4E6
06A5A:  CALL   138C
06A5E:  BCF    FD8.1
06A60:  MOVFF  420,424
06A64:  MOVFF  41F,423
06A68:  MOVFF  41E,422
06A6C:  MOVFF  41D,421
06A70:  MOVLB  4
06A72:  CLRF   x28
06A74:  CLRF   x27
06A76:  CLRF   x26
06A78:  MOVLW  0A
06A7A:  MOVWF  x25
06A7C:  MOVLB  0
06A7E:  CALL   5AC0
06A82:  MOVFF  03,420
06A86:  MOVFF  02,41F
06A8A:  MOVFF  01,41E
06A8E:  MOVFF  00,41D
06A92:  MOVLB  4
06A94:  DECFSZ x1B,F
06A96:  BRA    6A9C
06A98:  BRA    6AA2
06A9A:  MOVLB  0
06A9C:  MOVLB  0
06A9E:  GOTO   6970
06AA2:  MOVLB  0
06AA4:  GOTO   774C (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
0135E:  MOVLW  04
01360:  MOVWF  FEA
01362:  MOVLW  FB
01364:  MOVWF  FE9
01366:  MOVF   FEF,W
01368:  BTFSC  FD8.2
0136A:  GOTO   138A
0136E:  MOVLW  05
01370:  MOVWF  01
01372:  CLRF   00
01374:  DECFSZ 00,F
01376:  BRA    1374
01378:  DECFSZ 01,F
0137A:  BRA    1372
0137C:  MOVLW  2E
0137E:  MOVWF  00
01380:  DECFSZ 00,F
01382:  BRA    1380
01384:  BRA    1386
01386:  DECFSZ FEF,F
01388:  BRA    136E
0138A:  RETURN 0
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
0010A:  BTFSS  FA6.5
0010C:  GOTO   010A
00110:  MOVLB  F
00112:  MOVF   x2F,W
00114:  MOVWF  1B
00116:  MOVLB  0
00118:  MOVLB  F
0011A:  MOVF   x2A,W
0011C:  MOVWF  01
0011E:  BTFSC  1B.1
00120:  BRA    0128
00122:  MOVLB  0
00124:  GOTO   012C
00128:  BCF    x2F.4
0012A:  BSF    x2F.4
0012C:  MOVLB  0
0012E:  GOTO   0168 (RETURN)
*
03766:  BTFSS  FA6.4
03768:  GOTO   3766
0376C:  MOVLB  F
0376E:  MOVWF  x29
03770:  MOVLB  0
03772:  GOTO   37A8 (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
0138C:  BCF    F93.6
0138E:  BCF    F8A.6
01390:  MOVLW  08
01392:  MOVWF  01
01394:  BRA    1396
01396:  NOP   
01398:  BSF    01.7
0139A:  GOTO   13C2
0139E:  BCF    01.7
013A0:  MOVLB  4
013A2:  RRCF   xE6,F
013A4:  MOVLB  0
013A6:  BTFSC  FD8.0
013A8:  BSF    F8A.6
013AA:  BTFSS  FD8.0
013AC:  BCF    F8A.6
013AE:  BSF    01.6
013B0:  GOTO   13C2
013B4:  BCF    01.6
013B6:  DECFSZ 01,F
013B8:  GOTO   13A0
013BC:  BRA    13BE
013BE:  NOP   
013C0:  BSF    F8A.6
013C2:  MOVLW  84
013C4:  MOVWF  FE9
013C6:  DECFSZ FE9,F
013C8:  GOTO   13C6
013CC:  BRA    13CE
013CE:  NOP   
013D0:  BTFSC  01.7
013D2:  GOTO   139E
013D6:  BTFSC  01.6
013D8:  GOTO   13B4
013DC:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01512:  MOVF   FC9,W
01514:  MOVFF  51D,FC9
01518:  RRCF   FC7,W
0151A:  BTFSS  FD8.0
0151C:  GOTO   1518
01520:  MOVFF  FC9,00
01524:  RETURN 0
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
03D54:  MOVLB  3
03D56:  MOVF   x9F,W
03D58:  SUBLW  10
03D5A:  BTFSS  FD8.2
03D5C:  BRA    3D64
03D5E:  MOVLB  0
03D60:  GOTO   3D7E
03D64:  MOVWF  xA1
03D66:  MOVLB  0
03D68:  MOVLB  3
03D6A:  RLCF   x9D,F
03D6C:  RLCF   x9E,F
03D6E:  DECFSZ xA1,F
03D70:  BRA    3D76
03D72:  BRA    3D7C
03D74:  MOVLB  0
03D76:  MOVLB  0
03D78:  GOTO   3D68
03D7C:  MOVLB  0
03D7E:  BSF    F93.4
03D80:  BCF    F93.5
03D82:  BCF    F93.2
03D84:  BCF    F8A.2
03D86:  MOVFF  39F,3A1
03D8A:  MOVLB  3
03D8C:  BTFSS  x9E.7
03D8E:  BCF    F8A.5
03D90:  BTFSC  x9E.7
03D92:  BSF    F8A.5
03D94:  RLCF   x9D,F
03D96:  RLCF   x9E,F
03D98:  BSF    F8A.2
03D9A:  RLCF   01,F
03D9C:  RLCF   02,F
03D9E:  BTFSS  F81.4
03DA0:  BCF    01.0
03DA2:  BTFSC  F81.4
03DA4:  BSF    01.0
03DA6:  BCF    F8A.2
03DA8:  DECFSZ xA1,F
03DAA:  BRA    3DB0
03DAC:  BRA    3DB6
03DAE:  MOVLB  0
03DB0:  MOVLB  0
03DB2:  GOTO   3D8A
03DB6:  MOVLB  0
03DB8:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... //#include "../lib/device/mt25q.h"
.................... 
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000CA:  MOVLW  80
000CC:  MOVWF  FCF
000CE:  MOVLW  12
000D0:  MOVWF  FCE
000D2:  NOP   
....................    sec++;
000D4:  MOVLW  01
000D6:  ADDWF  25,F
000D8:  BTFSC  FD8.0
000DA:  INCF   26,F
000DC:  BTFSC  FD8.2
000DE:  INCF   27,F
000E0:  BTFSC  FD8.2
000E2:  INCF   28,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000E4:  BCF    F9E.0
000E6:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02338:  MOVFF  25,00
0233C:  MOVFF  26,01
02340:  MOVFF  27,02
02344:  MOVFF  28,03
02348:  GOTO   2FC4 (RETURN)
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/communication/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
00132:  GOTO   0136
00136:  GOTO   0140
0013A:  BTFSS  1C.0
0013C:  GOTO   0174
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00140:  MOVF   4D,W
00142:  SUBLW  1F
00144:  BTFSS  FD8.0
00146:  GOTO   0174
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0014A:  MOVF   4D,W
0014C:  INCF   4D,F
0014E:  ANDLW  1F
00150:  CLRF   03
00152:  ADDLW  2D
00154:  MOVWF  FE9
00156:  MOVLW  00
00158:  ADDWFC 03,W
0015A:  MOVWF  FEA
0015C:  MOVFF  FEA,523
00160:  MOVFF  FE9,522
00164:  GOTO   010A
00168:  MOVFF  523,FEA
0016C:  MOVFF  522,FE9
00170:  MOVF   01,W
00172:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
00174:  BCF    FA6.5
00176:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
01470:  MOVLW  7A
01472:  MOVWF  FF6
01474:  MOVLW  01
01476:  MOVWF  FF7
01478:  MOVLW  00
0147A:  MOVWF  FF8
0147C:  CALL   13DE
....................    enable_interrupts(INT_RDA3);
01480:  BSF    F61.5
....................    enable_interrupts(global);
01482:  MOVLW  C0
01484:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
01486:  MOVLW  8C
01488:  MOVWF  FF6
0148A:  MOVLW  01
0148C:  MOVWF  FF7
0148E:  MOVLW  00
01490:  MOVWF  FF8
01492:  CALL   13DE
01496:  GOTO   80AC (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
03728:  MOVFF  385,03
0372C:  MOVLB  3
0372E:  MOVF   x84,W
03730:  MOVWF  FE9
03732:  MOVFF  03,FEA
03736:  MOVFF  FEF,386
0373A:  MOVFF  383,FEA
0373E:  MOVFF  382,FE9
03742:  CLRF   00
03744:  CLRF   02
03746:  MOVFF  386,01
0374A:  MOVLB  0
0374C:  GOTO   3702
....................    *receive_signal_size = 0;
03750:  MOVFF  385,03
03754:  MOVLB  3
03756:  MOVF   x84,W
03758:  MOVWF  FE9
0375A:  MOVFF  03,FEA
0375E:  CLRF   FEF
03760:  MOVLB  0
03762:  GOTO   8146 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // SerialCommunication
.................... //#include "../lib/communication/communication_driver.h"
.................... 
.................... #include "../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
0619C:  MOVF   xDF,W
0619E:  SUBWF  xDE,W
061A0:  BTFSS  FD8.2
061A2:  GOTO   61C6
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
061A6:  MOVLW  B4
061A8:  MOVWF  FF6
061AA:  MOVLW  01
061AC:  MOVWF  FF7
061AE:  MOVLW  00
061B0:  MOVWF  FF8
061B2:  CALL   13DE
....................       return 0x00;
061B6:  MOVLW  00
061B8:  MOVWF  01
061BA:  MOVLW  00
061BC:  MOVWF  02
061BE:  GOTO   61F2
....................    }
061C2:  GOTO   61F2
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
061C6:  MOVFF  DE,415
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
061CA:  MOVLW  01
061CC:  ADDWF  xDE,W
061CE:  ANDLW  0F
061D0:  MOVWF  xDE
....................       return &smf_queue.smf_data[current_head];
061D2:  MOVLB  4
061D4:  MOVF   x15,W
061D6:  MULLW  09
061D8:  MOVF   FF3,W
061DA:  CLRF   03
061DC:  ADDLW  4E
061DE:  MOVWF  01
061E0:  MOVLW  00
061E2:  ADDWFC 03,F
061E4:  MOVF   01,W
061E6:  MOVWF  01
061E8:  MOVF   03,W
061EA:  MOVWF  02
061EC:  MOVLB  0
061EE:  GOTO   61F2
....................    }
061F2:  GOTO   6B1E (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
05FA0:  MOVF   xDF,W
05FA2:  SUBWF  xDE,W
05FA4:  BTFSC  FD8.2
05FA6:  GOTO   5FB0
05FAA:  MOVLW  00
05FAC:  GOTO   5FB2
05FB0:  MOVLW  01
05FB2:  MOVWF  01
05FB4:  RETURN 0
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
061F6:  MOVLB  4
061F8:  CLRF   x1D
061FA:  CLRF   x1E
061FC:  CLRF   x1F
061FE:  CLRF   x20
06200:  CLRF   x21
06202:  CLRF   x22
06204:  CLRF   x23
06206:  CLRF   x24
06208:  CLRF   x25
....................    
....................    if (mis_type == MEAURE_DATA)
0620A:  MOVF   x1C,F
0620C:  BTFSC  FD8.2
0620E:  BRA    6216
06210:  MOVLB  0
06212:  GOTO   623C
06216:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
06218:  MOVLW  04
0621A:  MOVLB  4
0621C:  MOVWF  x20
0621E:  MOVLW  EC
06220:  MOVWF  x1F
06222:  CLRF   x1E
06224:  CLRF   x1D
....................       mis_struct.end_address     = 0x056BFFFF;
06226:  MOVLW  05
06228:  MOVWF  x24
0622A:  MOVLW  6B
0622C:  MOVWF  x23
0622E:  SETF   x22
06230:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000000;
06232:  MOVLW  80
06234:  MOVWF  x25
06236:  MOVLB  0
....................    }
06238:  GOTO   6288
....................    else if (mis_type == PICLOG_DATA)
0623C:  MOVLB  4
0623E:  DECFSZ x1C,W
06240:  BRA    6246
06242:  BRA    624C
06244:  MOVLB  0
06246:  MOVLB  0
06248:  GOTO   6272
0624C:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
0624E:  MOVLW  04
06250:  MOVLB  4
06252:  MOVWF  x20
06254:  MOVLW  DC
06256:  MOVWF  x1F
06258:  CLRF   x1E
0625A:  CLRF   x1D
....................       mis_struct.end_address     = 0x04EBFFFF;
0625C:  MOVLW  04
0625E:  MOVWF  x24
06260:  MOVLW  EB
06262:  MOVWF  x23
06264:  SETF   x22
06266:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000001;  
06268:  MOVLW  81
0626A:  MOVWF  x25
0626C:  MOVLB  0
....................    }
0626E:  GOTO   6288
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
06272:  MOVLB  4
06274:  SETF   x20
06276:  SETF   x1F
06278:  SETF   x1E
0627A:  SETF   x1D
....................       mis_struct.end_address     = 0xFFFFFFFF;
0627C:  SETF   x24
0627E:  SETF   x23
06280:  SETF   x22
06282:  SETF   x21
....................       mis_struct.mission_flag    = 0b11111111; 
06284:  SETF   x25
06286:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
06288:  MOVLW  1D
0628A:  MOVWF  01
0628C:  MOVLW  04
0628E:  MOVWF  02
06290:  GOTO   6B4C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... #Separate
.................... void smf_write(void);
.................... 
.................... #separate
.................... void smf_read(void);
.................... 
.................... #separate
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #include "smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... #include "mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0234C:  MOVLB  4
0234E:  MOVF   xFB,W
02350:  XORLW  00
02352:  MOVLB  0
02354:  BTFSC  FD8.2
02356:  GOTO   2366
0235A:  XORLW  01
0235C:  BTFSC  FD8.2
0235E:  GOTO   23C8
02362:  GOTO   242A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02366:  MOVLB  5
02368:  CLRF   x04
0236A:  CLRF   x03
0236C:  MOVLB  0
0236E:  MOVLB  5
02370:  MOVF   x04,W
02372:  SUBWF  x02,W
02374:  BTFSC  FD8.0
02376:  BRA    237E
02378:  MOVLB  0
0237A:  GOTO   23C4
0237E:  MOVLB  0
02380:  BTFSS  FD8.2
02382:  GOTO   2398
02386:  MOVLB  5
02388:  MOVF   x01,W
0238A:  SUBWF  x03,W
0238C:  BTFSS  FD8.0
0238E:  BRA    2396
02390:  MOVLB  0
02392:  GOTO   23C4
02396:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02398:  MOVLB  4
0239A:  MOVF   xFF,W
0239C:  MOVLB  5
0239E:  ADDWF  x03,W
023A0:  MOVWF  FE9
023A2:  MOVF   x00,W
023A4:  ADDWFC x04,W
023A6:  MOVWF  FEA
023A8:  MOVFF  FEF,507
023AC:  MOVFF  507,51D
023B0:  MOVLB  0
023B2:  CALL   1512
023B6:  MOVLB  5
023B8:  INCF   x03,F
023BA:  BTFSC  FD8.2
023BC:  INCF   x04,F
023BE:  MOVLB  0
023C0:  GOTO   236E
....................          break;
023C4:  GOTO   242E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
023C8:  MOVLB  5
023CA:  CLRF   x06
023CC:  CLRF   x05
023CE:  MOVLB  0
023D0:  MOVLB  5
023D2:  MOVF   x06,W
023D4:  SUBWF  x02,W
023D6:  BTFSC  FD8.0
023D8:  BRA    23E0
023DA:  MOVLB  0
023DC:  GOTO   2426
023E0:  MOVLB  0
023E2:  BTFSS  FD8.2
023E4:  GOTO   23FA
023E8:  MOVLB  5
023EA:  MOVF   x01,W
023EC:  SUBWF  x05,W
023EE:  BTFSS  FD8.0
023F0:  BRA    23F8
023F2:  MOVLB  0
023F4:  GOTO   2426
023F8:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
023FA:  MOVLB  4
023FC:  MOVF   xFF,W
023FE:  MOVLB  5
02400:  ADDWF  x05,W
02402:  MOVWF  FE9
02404:  MOVF   x00,W
02406:  ADDWFC x06,W
02408:  MOVWF  FEA
0240A:  MOVFF  FEF,507
0240E:  MOVFF  507,51D
02412:  MOVLB  0
02414:  CALL   1512
02418:  MOVLB  5
0241A:  INCF   x05,F
0241C:  BTFSC  FD8.2
0241E:  INCF   x06,F
02420:  MOVLB  0
02422:  GOTO   23D0
....................          break;
02426:  GOTO   242E
....................          
....................       default:
....................          break;
0242A:  GOTO   242E
....................    }
....................    return;
0242E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01526:  MOVLB  5
01528:  MOVF   x01,W
0152A:  XORLW  00
0152C:  MOVLB  0
0152E:  BTFSC  FD8.2
01530:  GOTO   1540
01534:  XORLW  01
01536:  BTFSC  FD8.2
01538:  GOTO   163C
0153C:  GOTO   1738
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01540:  MOVLB  5
01542:  CLRF   x10
01544:  CLRF   x0F
01546:  MOVLB  0
01548:  MOVLB  5
0154A:  MOVF   x10,W
0154C:  SUBWF  x08,W
0154E:  BTFSC  FD8.0
01550:  BRA    1558
01552:  MOVLB  0
01554:  GOTO   159C
01558:  MOVLB  0
0155A:  BTFSS  FD8.2
0155C:  GOTO   1572
01560:  MOVLB  5
01562:  MOVF   x07,W
01564:  SUBWF  x0F,W
01566:  BTFSS  FD8.0
01568:  BRA    1570
0156A:  MOVLB  0
0156C:  GOTO   159C
01570:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01572:  MOVLB  5
01574:  MOVF   x05,W
01576:  ADDWF  x0F,W
01578:  MOVWF  FE9
0157A:  MOVF   x06,W
0157C:  ADDWFC x10,W
0157E:  MOVWF  FEA
01580:  MOVFF  FEF,51B
01584:  MOVFF  51B,51D
01588:  MOVLB  0
0158A:  CALL   1512
0158E:  MOVLB  5
01590:  INCF   x0F,F
01592:  BTFSC  FD8.2
01594:  INCF   x10,F
01596:  MOVLB  0
01598:  GOTO   1548
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0159C:  MOVLB  5
0159E:  CLRF   x14
015A0:  CLRF   x13
015A2:  CLRF   x12
015A4:  CLRF   x11
015A6:  MOVLB  0
015A8:  MOVLB  5
015AA:  MOVF   x14,W
015AC:  SUBWF  x0E,W
015AE:  BTFSC  FD8.0
015B0:  BRA    15B8
015B2:  MOVLB  0
015B4:  GOTO   1638
015B8:  MOVLB  0
015BA:  BTFSS  FD8.2
015BC:  GOTO   1602
015C0:  MOVLB  5
015C2:  MOVF   x13,W
015C4:  SUBWF  x0D,W
015C6:  BTFSC  FD8.0
015C8:  BRA    15D0
015CA:  MOVLB  0
015CC:  GOTO   1638
015D0:  MOVLB  0
015D2:  BTFSS  FD8.2
015D4:  GOTO   1602
015D8:  MOVLB  5
015DA:  MOVF   x12,W
015DC:  SUBWF  x0C,W
015DE:  BTFSC  FD8.0
015E0:  BRA    15E8
015E2:  MOVLB  0
015E4:  GOTO   1638
015E8:  MOVLB  0
015EA:  BTFSS  FD8.2
015EC:  GOTO   1602
015F0:  MOVLB  5
015F2:  MOVF   x0B,W
015F4:  SUBWF  x11,W
015F6:  BTFSS  FD8.0
015F8:  BRA    1600
015FA:  MOVLB  0
015FC:  GOTO   1638
01600:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
01602:  MOVLB  5
01604:  MOVF   x09,W
01606:  ADDWF  x11,W
01608:  MOVWF  FE9
0160A:  MOVF   x0A,W
0160C:  ADDWFC x12,W
0160E:  MOVWF  FEA
01610:  MOVLW  01
01612:  MOVWF  x1D
01614:  MOVLB  0
01616:  CALL   1512
0161A:  MOVF   01,W
0161C:  MOVFF  00,FEF
01620:  MOVLW  01
01622:  MOVLB  5
01624:  ADDWF  x11,F
01626:  BTFSC  FD8.0
01628:  INCF   x12,F
0162A:  BTFSC  FD8.2
0162C:  INCF   x13,F
0162E:  BTFSC  FD8.2
01630:  INCF   x14,F
01632:  MOVLB  0
01634:  GOTO   15A8
....................          break;
01638:  GOTO   173C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0163C:  MOVLB  5
0163E:  CLRF   x16
01640:  CLRF   x15
01642:  MOVLB  0
01644:  MOVLB  5
01646:  MOVF   x16,W
01648:  SUBWF  x08,W
0164A:  BTFSC  FD8.0
0164C:  BRA    1654
0164E:  MOVLB  0
01650:  GOTO   1698
01654:  MOVLB  0
01656:  BTFSS  FD8.2
01658:  GOTO   166E
0165C:  MOVLB  5
0165E:  MOVF   x07,W
01660:  SUBWF  x15,W
01662:  BTFSS  FD8.0
01664:  BRA    166C
01666:  MOVLB  0
01668:  GOTO   1698
0166C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0166E:  MOVLB  5
01670:  MOVF   x05,W
01672:  ADDWF  x15,W
01674:  MOVWF  FE9
01676:  MOVF   x06,W
01678:  ADDWFC x16,W
0167A:  MOVWF  FEA
0167C:  MOVFF  FEF,51B
01680:  MOVFF  51B,51D
01684:  MOVLB  0
01686:  CALL   1512
0168A:  MOVLB  5
0168C:  INCF   x15,F
0168E:  BTFSC  FD8.2
01690:  INCF   x16,F
01692:  MOVLB  0
01694:  GOTO   1644
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01698:  MOVLB  5
0169A:  CLRF   x1A
0169C:  CLRF   x19
0169E:  CLRF   x18
016A0:  CLRF   x17
016A2:  MOVLB  0
016A4:  MOVLB  5
016A6:  MOVF   x1A,W
016A8:  SUBWF  x0E,W
016AA:  BTFSC  FD8.0
016AC:  BRA    16B4
016AE:  MOVLB  0
016B0:  GOTO   1734
016B4:  MOVLB  0
016B6:  BTFSS  FD8.2
016B8:  GOTO   16FE
016BC:  MOVLB  5
016BE:  MOVF   x19,W
016C0:  SUBWF  x0D,W
016C2:  BTFSC  FD8.0
016C4:  BRA    16CC
016C6:  MOVLB  0
016C8:  GOTO   1734
016CC:  MOVLB  0
016CE:  BTFSS  FD8.2
016D0:  GOTO   16FE
016D4:  MOVLB  5
016D6:  MOVF   x18,W
016D8:  SUBWF  x0C,W
016DA:  BTFSC  FD8.0
016DC:  BRA    16E4
016DE:  MOVLB  0
016E0:  GOTO   1734
016E4:  MOVLB  0
016E6:  BTFSS  FD8.2
016E8:  GOTO   16FE
016EC:  MOVLB  5
016EE:  MOVF   x0B,W
016F0:  SUBWF  x17,W
016F2:  BTFSS  FD8.0
016F4:  BRA    16FC
016F6:  MOVLB  0
016F8:  GOTO   1734
016FC:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
016FE:  MOVLB  5
01700:  MOVF   x09,W
01702:  ADDWF  x17,W
01704:  MOVWF  FE9
01706:  MOVF   x0A,W
01708:  ADDWFC x18,W
0170A:  MOVWF  FEA
0170C:  MOVLW  01
0170E:  MOVWF  x1D
01710:  MOVLB  0
01712:  CALL   1512
01716:  MOVF   01,W
01718:  MOVFF  00,FEF
0171C:  MOVLW  01
0171E:  MOVLB  5
01720:  ADDWF  x17,F
01722:  BTFSC  FD8.0
01724:  INCF   x18,F
01726:  BTFSC  FD8.2
01728:  INCF   x19,F
0172A:  BTFSC  FD8.2
0172C:  INCF   x1A,F
0172E:  MOVLB  0
01730:  GOTO   16A4
....................          break;
01734:  GOTO   173C
....................    
....................          
....................       default:
....................          break;
01738:  GOTO   173C
....................    }
....................    return;
0173C:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02430:  MOVLB  4
02432:  MOVF   xFB,W
02434:  XORLW  00
02436:  MOVLB  0
02438:  BTFSC  FD8.2
0243A:  GOTO   244A
0243E:  XORLW  01
02440:  BTFSC  FD8.2
02442:  GOTO   24EC
02446:  GOTO   258E
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0244A:  MOVLB  5
0244C:  CLRF   x06
0244E:  MOVLB  0
02450:  MOVLB  5
02452:  MOVF   x01,W
02454:  SUBWF  x06,W
02456:  BTFSS  FD8.0
02458:  BRA    2460
0245A:  MOVLB  0
0245C:  GOTO   248C
02460:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02462:  MOVLB  5
02464:  MOVF   x06,W
02466:  MOVLB  4
02468:  ADDWF  xFF,W
0246A:  MOVWF  FE9
0246C:  MOVLW  00
0246E:  MOVLB  5
02470:  ADDWFC x00,W
02472:  MOVWF  FEA
02474:  MOVFF  FEF,50C
02478:  MOVFF  50C,51D
0247C:  MOVLB  0
0247E:  CALL   1512
02482:  MOVLB  5
02484:  INCF   x06,F
02486:  MOVLB  0
02488:  GOTO   2450
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0248C:  MOVLB  5
0248E:  CLRF   x08
02490:  CLRF   x07
02492:  MOVLB  0
02494:  MOVLB  5
02496:  MOVF   x08,W
02498:  SUBWF  x05,W
0249A:  BTFSC  FD8.0
0249C:  BRA    24A4
0249E:  MOVLB  0
024A0:  GOTO   24E8
024A4:  MOVLB  0
024A6:  BTFSS  FD8.2
024A8:  GOTO   24BE
024AC:  MOVLB  5
024AE:  MOVF   x04,W
024B0:  SUBWF  x07,W
024B2:  BTFSS  FD8.0
024B4:  BRA    24BC
024B6:  MOVLB  0
024B8:  GOTO   24E8
024BC:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
024BE:  MOVLB  5
024C0:  MOVF   x02,W
024C2:  ADDWF  x07,W
024C4:  MOVWF  FE9
024C6:  MOVF   x03,W
024C8:  ADDWFC x08,W
024CA:  MOVWF  FEA
024CC:  MOVFF  FEF,50C
024D0:  MOVFF  50C,51D
024D4:  MOVLB  0
024D6:  CALL   1512
024DA:  MOVLB  5
024DC:  INCF   x07,F
024DE:  BTFSC  FD8.2
024E0:  INCF   x08,F
024E2:  MOVLB  0
024E4:  GOTO   2494
....................          break;
024E8:  GOTO   2592
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
024EC:  MOVLB  5
024EE:  CLRF   x09
024F0:  MOVLB  0
024F2:  MOVLB  5
024F4:  MOVF   x01,W
024F6:  SUBWF  x09,W
024F8:  BTFSS  FD8.0
024FA:  BRA    2502
024FC:  MOVLB  0
024FE:  GOTO   252E
02502:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
02504:  MOVLB  5
02506:  MOVF   x09,W
02508:  MOVLB  4
0250A:  ADDWF  xFF,W
0250C:  MOVWF  FE9
0250E:  MOVLW  00
02510:  MOVLB  5
02512:  ADDWFC x00,W
02514:  MOVWF  FEA
02516:  MOVFF  FEF,50C
0251A:  MOVFF  50C,51D
0251E:  MOVLB  0
02520:  CALL   1512
02524:  MOVLB  5
02526:  INCF   x09,F
02528:  MOVLB  0
0252A:  GOTO   24F2
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0252E:  MOVLB  5
02530:  CLRF   x0B
02532:  CLRF   x0A
02534:  MOVLB  0
02536:  MOVLB  5
02538:  MOVF   x0B,W
0253A:  SUBWF  x05,W
0253C:  BTFSC  FD8.0
0253E:  BRA    2546
02540:  MOVLB  0
02542:  GOTO   258A
02546:  MOVLB  0
02548:  BTFSS  FD8.2
0254A:  GOTO   2560
0254E:  MOVLB  5
02550:  MOVF   x04,W
02552:  SUBWF  x0A,W
02554:  BTFSS  FD8.0
02556:  BRA    255E
02558:  MOVLB  0
0255A:  GOTO   258A
0255E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02560:  MOVLB  5
02562:  MOVF   x02,W
02564:  ADDWF  x0A,W
02566:  MOVWF  FE9
02568:  MOVF   x03,W
0256A:  ADDWFC x0B,W
0256C:  MOVWF  FEA
0256E:  MOVFF  FEF,50C
02572:  MOVFF  50C,51D
02576:  MOVLB  0
02578:  CALL   1512
0257C:  MOVLB  5
0257E:  INCF   x0A,F
02580:  BTFSC  FD8.2
02582:  INCF   x0B,F
02584:  MOVLB  0
02586:  GOTO   2536
....................          break;
0258A:  GOTO   2592
....................          
....................       default:
....................          break;
0258E:  GOTO   2592
....................    }
....................    return;
02592:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
05052:  MOVFF  497,501
05056:  MOVLW  01
05058:  MOVLB  5
0505A:  MOVWF  x02
0505C:  MOVLW  0F
0505E:  MOVWF  x04
05060:  MOVLW  89
05062:  MOVWF  x03
05064:  MOVLB  0
05066:  CALL   14BE
0506A:  MOVFF  497,501
0506E:  MOVLB  5
05070:  CLRF   x02
05072:  MOVLW  0F
05074:  MOVWF  x04
05076:  MOVLW  92
05078:  MOVWF  x03
0507A:  MOVLB  0
0507C:  CALL   14BE
05080:  RETURN 0
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
02594:  MOVLW  05
02596:  MOVLB  4
02598:  MOVWF  xFF
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0259A:  MOVFF  4FD,501
0259E:  MOVLB  5
025A0:  CLRF   x02
025A2:  MOVLW  0F
025A4:  MOVWF  x04
025A6:  MOVLW  89
025A8:  MOVWF  x03
025AA:  MOVLB  0
025AC:  CALL   14BE
025B0:  MOVFF  4FD,501
025B4:  MOVLB  5
025B6:  CLRF   x02
025B8:  MOVLW  0F
025BA:  MOVWF  x04
025BC:  MOVLW  92
025BE:  MOVWF  x03
025C0:  MOVLB  0
025C2:  CALL   14BE
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
025C6:  MOVFF  4FE,504
025CA:  MOVFF  4FD,503
025CE:  MOVFF  4FC,502
025D2:  MOVFF  4FB,501
025D6:  MOVLW  04
025D8:  MOVLB  5
025DA:  MOVWF  x06
025DC:  SETF   x05
025DE:  CLRF   x08
025E0:  MOVLW  01
025E2:  MOVWF  x07
025E4:  MOVLW  05
025E6:  MOVWF  x0A
025E8:  CLRF   x09
025EA:  CLRF   x0E
025EC:  CLRF   x0D
025EE:  CLRF   x0C
025F0:  MOVLW  01
025F2:  MOVWF  x0B
025F4:  MOVLB  0
025F6:  CALL   1526
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
025FA:  MOVFF  4FD,501
025FE:  MOVLW  01
02600:  MOVLB  5
02602:  MOVWF  x02
02604:  MOVLW  0F
02606:  MOVWF  x04
02608:  MOVLW  89
0260A:  MOVWF  x03
0260C:  MOVLB  0
0260E:  CALL   14BE
02612:  MOVFF  4FD,501
02616:  MOVLB  5
02618:  CLRF   x02
0261A:  MOVLW  0F
0261C:  MOVWF  x04
0261E:  MOVLW  92
02620:  MOVWF  x03
02622:  MOVLB  0
02624:  CALL   14BE
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
02628:  MOVLB  5
0262A:  MOVF   x00,W
0262C:  MOVWF  01
0262E:  MOVLB  0
02630:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0451C:  MOVLB  3
0451E:  MOVF   x93,F
04520:  BTFSC  FD8.2
04522:  BRA    452A
04524:  MOVLB  0
04526:  GOTO   468A
0452A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0452C:  MOVLW  06
0452E:  MOVLB  3
04530:  MOVWF  x9A
04532:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
04534:  MOVLW  D8
04536:  MOVLB  3
04538:  MOVWF  x9B
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0453A:  MOVFF  398,3A7
0453E:  MOVFF  399,3A8
04542:  CLRF   xA9
04544:  CLRF   xAA
04546:  MOVF   xA7,W
04548:  MOVWF  00
0454A:  CLRF   01
0454C:  CLRF   02
0454E:  CLRF   03
04550:  MOVFF  00,39C
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04554:  MOVFF  397,3A7
04558:  MOVFF  398,3A8
0455C:  MOVFF  399,3A9
04560:  CLRF   xAA
04562:  MOVF   xA7,W
04564:  MOVWF  00
04566:  CLRF   01
04568:  CLRF   02
0456A:  CLRF   03
0456C:  MOVFF  00,39D
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
04570:  MOVF   x96,W
04572:  MOVWF  00
04574:  CLRF   01
04576:  CLRF   02
04578:  CLRF   03
0457A:  MOVFF  00,39E
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0457E:  MOVFF  394,501
04582:  MOVLB  5
04584:  CLRF   x02
04586:  MOVLW  0F
04588:  MOVWF  x04
0458A:  MOVLW  89
0458C:  MOVWF  x03
0458E:  MOVLB  0
04590:  CALL   14BE
04594:  MOVFF  394,501
04598:  MOVLB  5
0459A:  CLRF   x02
0459C:  MOVLW  0F
0459E:  MOVWF  x04
045A0:  MOVLW  92
045A2:  MOVWF  x03
045A4:  MOVLB  0
045A6:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
045AA:  MOVFF  395,4FE
045AE:  MOVFF  394,4FD
045B2:  MOVFF  393,4FC
045B6:  MOVFF  392,4FB
045BA:  MOVLW  03
045BC:  MOVLB  5
045BE:  MOVWF  x00
045C0:  MOVLW  9A
045C2:  MOVLB  4
045C4:  MOVWF  xFF
045C6:  MOVLB  5
045C8:  CLRF   x02
045CA:  MOVLW  01
045CC:  MOVWF  x01
045CE:  MOVLB  0
045D0:  CALL   234C
....................       output_high(flash_stream.cs_pin);
045D4:  MOVFF  394,501
045D8:  MOVLW  01
045DA:  MOVLB  5
045DC:  MOVWF  x02
045DE:  MOVLW  0F
045E0:  MOVWF  x04
045E2:  MOVLW  89
045E4:  MOVWF  x03
045E6:  MOVLB  0
045E8:  CALL   14BE
045EC:  MOVFF  394,501
045F0:  MOVLB  5
045F2:  CLRF   x02
045F4:  MOVLW  0F
045F6:  MOVWF  x04
045F8:  MOVLW  92
045FA:  MOVWF  x03
045FC:  MOVLB  0
045FE:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04602:  MOVFF  394,501
04606:  MOVLB  5
04608:  CLRF   x02
0460A:  MOVLW  0F
0460C:  MOVWF  x04
0460E:  MOVLW  89
04610:  MOVWF  x03
04612:  MOVLB  0
04614:  CALL   14BE
04618:  MOVFF  394,501
0461C:  MOVLB  5
0461E:  CLRF   x02
04620:  MOVLW  0F
04622:  MOVWF  x04
04624:  MOVLW  92
04626:  MOVWF  x03
04628:  MOVLB  0
0462A:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0462E:  MOVFF  395,4FE
04632:  MOVFF  394,4FD
04636:  MOVFF  393,4FC
0463A:  MOVFF  392,4FB
0463E:  MOVLW  03
04640:  MOVLB  5
04642:  MOVWF  x00
04644:  MOVLW  9B
04646:  MOVLB  4
04648:  MOVWF  xFF
0464A:  MOVLB  5
0464C:  CLRF   x02
0464E:  MOVLW  04
04650:  MOVWF  x01
04652:  MOVLB  0
04654:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04658:  MOVFF  394,501
0465C:  MOVLW  01
0465E:  MOVLB  5
04660:  MOVWF  x02
04662:  MOVLW  0F
04664:  MOVWF  x04
04666:  MOVLW  89
04668:  MOVWF  x03
0466A:  MOVLB  0
0466C:  CALL   14BE
04670:  MOVFF  394,501
04674:  MOVLB  5
04676:  CLRF   x02
04678:  MOVLW  0F
0467A:  MOVWF  x04
0467C:  MOVLW  92
0467E:  MOVWF  x03
04680:  MOVLB  0
04682:  CALL   14BE
....................    }
04686:  GOTO   4812
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0468A:  MOVLB  3
0468C:  DECFSZ x93,W
0468E:  BRA    4694
04690:  BRA    469A
04692:  MOVLB  0
04694:  MOVLB  0
04696:  GOTO   4812
0469A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0469C:  MOVLW  06
0469E:  MOVLB  3
046A0:  MOVWF  x9F
046A2:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
046A4:  MOVLW  DC
046A6:  MOVLB  3
046A8:  MOVWF  xA0
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
046AA:  MOVFF  399,3A7
046AE:  CLRF   xA8
046B0:  CLRF   xA9
046B2:  CLRF   xAA
046B4:  MOVF   xA7,W
046B6:  MOVWF  00
046B8:  CLRF   01
046BA:  CLRF   02
046BC:  CLRF   03
046BE:  MOVFF  00,3A1
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
046C2:  MOVFF  398,3A7
046C6:  MOVFF  399,3A8
046CA:  CLRF   xA9
046CC:  CLRF   xAA
046CE:  MOVF   xA7,W
046D0:  MOVWF  00
046D2:  CLRF   01
046D4:  CLRF   02
046D6:  CLRF   03
046D8:  MOVFF  00,3A2
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
046DC:  MOVFF  397,3A7
046E0:  MOVFF  398,3A8
046E4:  MOVFF  399,3A9
046E8:  CLRF   xAA
046EA:  MOVF   xA7,W
046EC:  MOVWF  00
046EE:  CLRF   01
046F0:  CLRF   02
046F2:  CLRF   03
046F4:  MOVFF  00,3A3
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
046F8:  MOVF   x96,W
046FA:  MOVWF  00
046FC:  CLRF   01
046FE:  CLRF   02
04700:  CLRF   03
04702:  MOVFF  00,3A4
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04706:  MOVFF  394,501
0470A:  MOVLB  5
0470C:  CLRF   x02
0470E:  MOVLW  0F
04710:  MOVWF  x04
04712:  MOVLW  89
04714:  MOVWF  x03
04716:  MOVLB  0
04718:  CALL   14BE
0471C:  MOVFF  394,501
04720:  MOVLB  5
04722:  CLRF   x02
04724:  MOVLW  0F
04726:  MOVWF  x04
04728:  MOVLW  92
0472A:  MOVWF  x03
0472C:  MOVLB  0
0472E:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04732:  MOVFF  395,4FE
04736:  MOVFF  394,4FD
0473A:  MOVFF  393,4FC
0473E:  MOVFF  392,4FB
04742:  MOVLW  03
04744:  MOVLB  5
04746:  MOVWF  x00
04748:  MOVLW  9F
0474A:  MOVLB  4
0474C:  MOVWF  xFF
0474E:  MOVLB  5
04750:  CLRF   x02
04752:  MOVLW  01
04754:  MOVWF  x01
04756:  MOVLB  0
04758:  CALL   234C
....................       output_high(flash_stream.cs_pin);
0475C:  MOVFF  394,501
04760:  MOVLW  01
04762:  MOVLB  5
04764:  MOVWF  x02
04766:  MOVLW  0F
04768:  MOVWF  x04
0476A:  MOVLW  89
0476C:  MOVWF  x03
0476E:  MOVLB  0
04770:  CALL   14BE
04774:  MOVFF  394,501
04778:  MOVLB  5
0477A:  CLRF   x02
0477C:  MOVLW  0F
0477E:  MOVWF  x04
04780:  MOVLW  92
04782:  MOVWF  x03
04784:  MOVLB  0
04786:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0478A:  MOVFF  394,501
0478E:  MOVLB  5
04790:  CLRF   x02
04792:  MOVLW  0F
04794:  MOVWF  x04
04796:  MOVLW  89
04798:  MOVWF  x03
0479A:  MOVLB  0
0479C:  CALL   14BE
047A0:  MOVFF  394,501
047A4:  MOVLB  5
047A6:  CLRF   x02
047A8:  MOVLW  0F
047AA:  MOVWF  x04
047AC:  MOVLW  92
047AE:  MOVWF  x03
047B0:  MOVLB  0
047B2:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
047B6:  MOVFF  395,4FE
047BA:  MOVFF  394,4FD
047BE:  MOVFF  393,4FC
047C2:  MOVFF  392,4FB
047C6:  MOVLW  03
047C8:  MOVLB  5
047CA:  MOVWF  x00
047CC:  MOVLW  A0
047CE:  MOVLB  4
047D0:  MOVWF  xFF
047D2:  MOVLB  5
047D4:  CLRF   x02
047D6:  MOVLW  05
047D8:  MOVWF  x01
047DA:  MOVLB  0
047DC:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
047E0:  MOVFF  394,501
047E4:  MOVLW  01
047E6:  MOVLB  5
047E8:  MOVWF  x02
047EA:  MOVLW  0F
047EC:  MOVWF  x04
047EE:  MOVLW  89
047F0:  MOVWF  x03
047F2:  MOVLB  0
047F4:  CALL   14BE
047F8:  MOVFF  394,501
047FC:  MOVLB  5
047FE:  CLRF   x02
04800:  MOVLW  0F
04802:  MOVWF  x04
04804:  MOVLW  92
04806:  MOVWF  x03
04808:  MOVLB  0
0480A:  CALL   14BE
....................    }
0480E:  GOTO   4812
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04812:  MOVLB  3
04814:  CLRF   xA5
04816:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
04818:  MOVFF  395,4FE
0481C:  MOVFF  394,4FD
04820:  MOVFF  393,4FC
04824:  MOVFF  392,4FB
04828:  CALL   2594
0482C:  MOVF   01,W
0482E:  ANDLW  01
04830:  SUBLW  01
04832:  BTFSS  FD8.2
04834:  GOTO   4886
....................       if(timeout_counter > 10)
04838:  MOVLB  3
0483A:  MOVF   xA5,W
0483C:  SUBLW  0A
0483E:  BTFSS  FD8.0
04840:  BRA    4848
04842:  MOVLB  0
04844:  GOTO   485A
04848:  MOVLB  0
....................          delay_ms(200);
0484A:  MOVLW  C8
0484C:  MOVLB  4
0484E:  MOVWF  xFB
04850:  MOVLB  0
04852:  CALL   135E
04856:  GOTO   4866
....................       else
....................          delay_ms(10);   
0485A:  MOVLW  0A
0485C:  MOVLB  4
0485E:  MOVWF  xFB
04860:  MOVLB  0
04862:  CALL   135E
....................       
....................       if(timeout_counter > 100){
04866:  MOVLB  3
04868:  MOVF   xA5,W
0486A:  SUBLW  64
0486C:  BTFSS  FD8.0
0486E:  BRA    4876
04870:  MOVLB  0
04872:  GOTO   487C
04876:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
04878:  GOTO   4886
....................       }  
....................       timeout_counter++;
0487C:  MOVLB  3
0487E:  INCF   xA5,F
04880:  MOVLB  0
04882:  GOTO   4818
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
04886:  RETURN 0
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
029CA:  MOVLB  4
029CC:  MOVF   xE4,F
029CE:  BTFSC  FD8.2
029D0:  BRA    29D8
029D2:  MOVLB  0
029D4:  GOTO   2B38
029D8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
029DA:  MOVLW  06
029DC:  MOVLB  4
029DE:  MOVWF  xEB
029E0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
029E2:  MOVLW  20
029E4:  MOVLB  4
029E6:  MOVWF  xEC
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
029E8:  MOVFF  4E9,4F8
029EC:  MOVFF  4EA,4F9
029F0:  CLRF   xFA
029F2:  CLRF   xFB
029F4:  MOVF   xF8,W
029F6:  MOVWF  00
029F8:  CLRF   01
029FA:  CLRF   02
029FC:  CLRF   03
029FE:  MOVFF  00,4ED
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02A02:  MOVFF  4E8,4F8
02A06:  MOVFF  4E9,4F9
02A0A:  MOVFF  4EA,4FA
02A0E:  CLRF   xFB
02A10:  MOVF   xF8,W
02A12:  MOVWF  00
02A14:  CLRF   01
02A16:  CLRF   02
02A18:  CLRF   03
02A1A:  MOVFF  00,4EE
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02A1E:  MOVF   xE7,W
02A20:  MOVWF  00
02A22:  CLRF   01
02A24:  CLRF   02
02A26:  CLRF   03
02A28:  MOVFF  00,4EF
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02A2C:  MOVFF  4E5,501
02A30:  MOVLB  5
02A32:  CLRF   x02
02A34:  MOVLW  0F
02A36:  MOVWF  x04
02A38:  MOVLW  89
02A3A:  MOVWF  x03
02A3C:  MOVLB  0
02A3E:  CALL   14BE
02A42:  MOVFF  4E5,501
02A46:  MOVLB  5
02A48:  CLRF   x02
02A4A:  MOVLW  0F
02A4C:  MOVWF  x04
02A4E:  MOVLW  92
02A50:  MOVWF  x03
02A52:  MOVLB  0
02A54:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02A58:  MOVFF  4E6,4FE
02A5C:  MOVFF  4E5,4FD
02A60:  MOVFF  4E4,4FC
02A64:  MOVFF  4E3,4FB
02A68:  MOVLW  04
02A6A:  MOVLB  5
02A6C:  MOVWF  x00
02A6E:  MOVLW  EB
02A70:  MOVLB  4
02A72:  MOVWF  xFF
02A74:  MOVLB  5
02A76:  CLRF   x02
02A78:  MOVLW  01
02A7A:  MOVWF  x01
02A7C:  MOVLB  0
02A7E:  CALL   234C
....................       output_high(flash_stream.cs_pin);
02A82:  MOVFF  4E5,501
02A86:  MOVLW  01
02A88:  MOVLB  5
02A8A:  MOVWF  x02
02A8C:  MOVLW  0F
02A8E:  MOVWF  x04
02A90:  MOVLW  89
02A92:  MOVWF  x03
02A94:  MOVLB  0
02A96:  CALL   14BE
02A9A:  MOVFF  4E5,501
02A9E:  MOVLB  5
02AA0:  CLRF   x02
02AA2:  MOVLW  0F
02AA4:  MOVWF  x04
02AA6:  MOVLW  92
02AA8:  MOVWF  x03
02AAA:  MOVLB  0
02AAC:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02AB0:  MOVFF  4E5,501
02AB4:  MOVLB  5
02AB6:  CLRF   x02
02AB8:  MOVLW  0F
02ABA:  MOVWF  x04
02ABC:  MOVLW  89
02ABE:  MOVWF  x03
02AC0:  MOVLB  0
02AC2:  CALL   14BE
02AC6:  MOVFF  4E5,501
02ACA:  MOVLB  5
02ACC:  CLRF   x02
02ACE:  MOVLW  0F
02AD0:  MOVWF  x04
02AD2:  MOVLW  92
02AD4:  MOVWF  x03
02AD6:  MOVLB  0
02AD8:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
02ADC:  MOVFF  4E6,4FE
02AE0:  MOVFF  4E5,4FD
02AE4:  MOVFF  4E4,4FC
02AE8:  MOVFF  4E3,4FB
02AEC:  MOVLW  04
02AEE:  MOVLB  5
02AF0:  MOVWF  x00
02AF2:  MOVLW  EC
02AF4:  MOVLB  4
02AF6:  MOVWF  xFF
02AF8:  MOVLB  5
02AFA:  CLRF   x02
02AFC:  MOVLW  04
02AFE:  MOVWF  x01
02B00:  MOVLB  0
02B02:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02B06:  MOVFF  4E5,501
02B0A:  MOVLW  01
02B0C:  MOVLB  5
02B0E:  MOVWF  x02
02B10:  MOVLW  0F
02B12:  MOVWF  x04
02B14:  MOVLW  89
02B16:  MOVWF  x03
02B18:  MOVLB  0
02B1A:  CALL   14BE
02B1E:  MOVFF  4E5,501
02B22:  MOVLB  5
02B24:  CLRF   x02
02B26:  MOVLW  0F
02B28:  MOVWF  x04
02B2A:  MOVLW  92
02B2C:  MOVWF  x03
02B2E:  MOVLB  0
02B30:  CALL   14BE
....................    }
02B34:  GOTO   2CC0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02B38:  MOVLB  4
02B3A:  DECFSZ xE4,W
02B3C:  BRA    2B42
02B3E:  BRA    2B48
02B40:  MOVLB  0
02B42:  MOVLB  0
02B44:  GOTO   2CC0
02B48:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
02B4A:  MOVLW  06
02B4C:  MOVLB  4
02B4E:  MOVWF  xF0
02B50:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
02B52:  MOVLW  21
02B54:  MOVLB  4
02B56:  MOVWF  xF1
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
02B58:  MOVFF  4EA,4F8
02B5C:  CLRF   xF9
02B5E:  CLRF   xFA
02B60:  CLRF   xFB
02B62:  MOVF   xF8,W
02B64:  MOVWF  00
02B66:  CLRF   01
02B68:  CLRF   02
02B6A:  CLRF   03
02B6C:  MOVFF  00,4F2
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02B70:  MOVFF  4E9,4F8
02B74:  MOVFF  4EA,4F9
02B78:  CLRF   xFA
02B7A:  CLRF   xFB
02B7C:  MOVF   xF8,W
02B7E:  MOVWF  00
02B80:  CLRF   01
02B82:  CLRF   02
02B84:  CLRF   03
02B86:  MOVFF  00,4F3
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02B8A:  MOVFF  4E8,4F8
02B8E:  MOVFF  4E9,4F9
02B92:  MOVFF  4EA,4FA
02B96:  CLRF   xFB
02B98:  MOVF   xF8,W
02B9A:  MOVWF  00
02B9C:  CLRF   01
02B9E:  CLRF   02
02BA0:  CLRF   03
02BA2:  MOVFF  00,4F4
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
02BA6:  MOVF   xE7,W
02BA8:  MOVWF  00
02BAA:  CLRF   01
02BAC:  CLRF   02
02BAE:  CLRF   03
02BB0:  MOVFF  00,4F5
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02BB4:  MOVFF  4E5,501
02BB8:  MOVLB  5
02BBA:  CLRF   x02
02BBC:  MOVLW  0F
02BBE:  MOVWF  x04
02BC0:  MOVLW  89
02BC2:  MOVWF  x03
02BC4:  MOVLB  0
02BC6:  CALL   14BE
02BCA:  MOVFF  4E5,501
02BCE:  MOVLB  5
02BD0:  CLRF   x02
02BD2:  MOVLW  0F
02BD4:  MOVWF  x04
02BD6:  MOVLW  92
02BD8:  MOVWF  x03
02BDA:  MOVLB  0
02BDC:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02BE0:  MOVFF  4E6,4FE
02BE4:  MOVFF  4E5,4FD
02BE8:  MOVFF  4E4,4FC
02BEC:  MOVFF  4E3,4FB
02BF0:  MOVLW  04
02BF2:  MOVLB  5
02BF4:  MOVWF  x00
02BF6:  MOVLW  F0
02BF8:  MOVLB  4
02BFA:  MOVWF  xFF
02BFC:  MOVLB  5
02BFE:  CLRF   x02
02C00:  MOVLW  01
02C02:  MOVWF  x01
02C04:  MOVLB  0
02C06:  CALL   234C
....................       output_high(flash_stream.cs_pin);
02C0A:  MOVFF  4E5,501
02C0E:  MOVLW  01
02C10:  MOVLB  5
02C12:  MOVWF  x02
02C14:  MOVLW  0F
02C16:  MOVWF  x04
02C18:  MOVLW  89
02C1A:  MOVWF  x03
02C1C:  MOVLB  0
02C1E:  CALL   14BE
02C22:  MOVFF  4E5,501
02C26:  MOVLB  5
02C28:  CLRF   x02
02C2A:  MOVLW  0F
02C2C:  MOVWF  x04
02C2E:  MOVLW  92
02C30:  MOVWF  x03
02C32:  MOVLB  0
02C34:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02C38:  MOVFF  4E5,501
02C3C:  MOVLB  5
02C3E:  CLRF   x02
02C40:  MOVLW  0F
02C42:  MOVWF  x04
02C44:  MOVLW  89
02C46:  MOVWF  x03
02C48:  MOVLB  0
02C4A:  CALL   14BE
02C4E:  MOVFF  4E5,501
02C52:  MOVLB  5
02C54:  CLRF   x02
02C56:  MOVLW  0F
02C58:  MOVWF  x04
02C5A:  MOVLW  92
02C5C:  MOVWF  x03
02C5E:  MOVLB  0
02C60:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
02C64:  MOVFF  4E6,4FE
02C68:  MOVFF  4E5,4FD
02C6C:  MOVFF  4E4,4FC
02C70:  MOVFF  4E3,4FB
02C74:  MOVLW  04
02C76:  MOVLB  5
02C78:  MOVWF  x00
02C7A:  MOVLW  F1
02C7C:  MOVLB  4
02C7E:  MOVWF  xFF
02C80:  MOVLB  5
02C82:  CLRF   x02
02C84:  MOVLW  05
02C86:  MOVWF  x01
02C88:  MOVLB  0
02C8A:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02C8E:  MOVFF  4E5,501
02C92:  MOVLW  01
02C94:  MOVLB  5
02C96:  MOVWF  x02
02C98:  MOVLW  0F
02C9A:  MOVWF  x04
02C9C:  MOVLW  89
02C9E:  MOVWF  x03
02CA0:  MOVLB  0
02CA2:  CALL   14BE
02CA6:  MOVFF  4E5,501
02CAA:  MOVLB  5
02CAC:  CLRF   x02
02CAE:  MOVLW  0F
02CB0:  MOVWF  x04
02CB2:  MOVLW  92
02CB4:  MOVWF  x03
02CB6:  MOVLB  0
02CB8:  CALL   14BE
....................    }
02CBC:  GOTO   2CC0
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
02CC0:  MOVLB  4
02CC2:  CLRF   xF6
02CC4:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
02CC6:  MOVFF  4E6,4FE
02CCA:  MOVFF  4E5,4FD
02CCE:  MOVFF  4E4,4FC
02CD2:  MOVFF  4E3,4FB
02CD6:  CALL   2594
02CDA:  MOVF   01,W
02CDC:  ANDLW  01
02CDE:  SUBLW  01
02CE0:  BTFSS  FD8.2
02CE2:  GOTO   2D34
....................       if(timeout_counter > 10)
02CE6:  MOVLB  4
02CE8:  MOVF   xF6,W
02CEA:  SUBLW  0A
02CEC:  BTFSS  FD8.0
02CEE:  BRA    2CF6
02CF0:  MOVLB  0
02CF2:  GOTO   2D08
02CF6:  MOVLB  0
....................          delay_ms(200);
02CF8:  MOVLW  C8
02CFA:  MOVLB  4
02CFC:  MOVWF  xFB
02CFE:  MOVLB  0
02D00:  CALL   135E
02D04:  GOTO   2D14
....................       else
....................          delay_ms(10);   
02D08:  MOVLW  0A
02D0A:  MOVLB  4
02D0C:  MOVWF  xFB
02D0E:  MOVLB  0
02D10:  CALL   135E
....................       
....................       if(timeout_counter > 100){
02D14:  MOVLB  4
02D16:  MOVF   xF6,W
02D18:  SUBLW  64
02D1A:  BTFSS  FD8.0
02D1C:  BRA    2D24
02D1E:  MOVLB  0
02D20:  GOTO   2D2A
02D24:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
02D26:  GOTO   2D34
....................       }  
....................       timeout_counter++;
02D2A:  MOVLB  4
02D2C:  INCF   xF6,F
02D2E:  MOVLB  0
02D30:  GOTO   2CC6
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
02D34:  RETURN 0
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
06394:  MOVLB  4
06396:  MOVF   x21,F
06398:  BTFSC  FD8.2
0639A:  BRA    63A2
0639C:  MOVLB  0
0639E:  GOTO   648E
063A2:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
063A4:  MOVLW  03
063A6:  MOVLB  4
063A8:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
063AA:  MOVFF  426,433
063AE:  MOVFF  427,434
063B2:  CLRF   x35
063B4:  CLRF   x36
063B6:  MOVF   x33,W
063B8:  MOVWF  00
063BA:  CLRF   01
063BC:  CLRF   02
063BE:  CLRF   03
063C0:  MOVFF  00,42A
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
063C4:  MOVFF  425,433
063C8:  MOVFF  426,434
063CC:  MOVFF  427,435
063D0:  CLRF   x36
063D2:  MOVF   x33,W
063D4:  MOVWF  00
063D6:  CLRF   01
063D8:  CLRF   02
063DA:  CLRF   03
063DC:  MOVFF  00,42B
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
063E0:  MOVF   x24,W
063E2:  MOVWF  00
063E4:  CLRF   01
063E6:  CLRF   02
063E8:  CLRF   03
063EA:  MOVFF  00,42C
....................             
....................       output_low(flash_stream.cs_pin);
063EE:  MOVFF  422,501
063F2:  MOVLB  5
063F4:  CLRF   x02
063F6:  MOVLW  0F
063F8:  MOVWF  x04
063FA:  MOVLW  89
063FC:  MOVWF  x03
063FE:  MOVLB  0
06400:  CALL   14BE
06404:  MOVFF  422,501
06408:  MOVLB  5
0640A:  CLRF   x02
0640C:  MOVLW  0F
0640E:  MOVWF  x04
06410:  MOVLW  92
06412:  MOVWF  x03
06414:  MOVLB  0
06416:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
0641A:  MOVFF  423,504
0641E:  MOVFF  422,503
06422:  MOVFF  421,502
06426:  MOVFF  420,501
0642A:  MOVLW  04
0642C:  MOVLB  5
0642E:  MOVWF  x06
06430:  MOVLW  29
06432:  MOVWF  x05
06434:  CLRF   x08
06436:  MOVLW  04
06438:  MOVWF  x07
0643A:  MOVLW  04
0643C:  MOVWF  x0A
0643E:  MOVLW  28
06440:  MOVWF  x09
06442:  CLRF   x0E
06444:  CLRF   x0D
06446:  CLRF   x0C
06448:  MOVLW  01
0644A:  MOVWF  x0B
0644C:  MOVLB  0
0644E:  CALL   1526
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
06452:  MOVLW  02
06454:  MOVWF  00
06456:  DECFSZ 00,F
06458:  BRA    6456
0645A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0645C:  MOVFF  422,501
06460:  MOVLW  01
06462:  MOVLB  5
06464:  MOVWF  x02
06466:  MOVLW  0F
06468:  MOVWF  x04
0646A:  MOVLW  89
0646C:  MOVWF  x03
0646E:  MOVLB  0
06470:  CALL   14BE
06474:  MOVFF  422,501
06478:  MOVLB  5
0647A:  CLRF   x02
0647C:  MOVLW  0F
0647E:  MOVWF  x04
06480:  MOVLW  92
06482:  MOVWF  x03
06484:  MOVLB  0
06486:  CALL   14BE
....................    }
0648A:  GOTO   659E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0648E:  MOVLB  4
06490:  DECFSZ x21,W
06492:  BRA    6498
06494:  BRA    649E
06496:  MOVLB  0
06498:  MOVLB  0
0649A:  GOTO   659E
0649E:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
064A0:  MOVLW  13
064A2:  MOVLB  4
064A4:  MOVWF  x2D
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
064A6:  MOVFF  427,433
064AA:  CLRF   x34
064AC:  CLRF   x35
064AE:  CLRF   x36
064B0:  MOVF   x33,W
064B2:  MOVWF  00
064B4:  CLRF   01
064B6:  CLRF   02
064B8:  CLRF   03
064BA:  MOVFF  00,42E
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
064BE:  MOVFF  426,433
064C2:  MOVFF  427,434
064C6:  CLRF   x35
064C8:  CLRF   x36
064CA:  MOVF   x33,W
064CC:  MOVWF  00
064CE:  CLRF   01
064D0:  CLRF   02
064D2:  CLRF   03
064D4:  MOVFF  00,42F
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
064D8:  MOVFF  425,433
064DC:  MOVFF  426,434
064E0:  MOVFF  427,435
064E4:  CLRF   x36
064E6:  MOVF   x33,W
064E8:  MOVWF  00
064EA:  CLRF   01
064EC:  CLRF   02
064EE:  CLRF   03
064F0:  MOVFF  00,430
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
064F4:  MOVF   x24,W
064F6:  MOVWF  00
064F8:  CLRF   01
064FA:  CLRF   02
064FC:  CLRF   03
064FE:  MOVFF  00,431
....................    
....................       output_low(flash_stream.cs_pin);
06502:  MOVFF  422,501
06506:  MOVLB  5
06508:  CLRF   x02
0650A:  MOVLW  0F
0650C:  MOVWF  x04
0650E:  MOVLW  89
06510:  MOVWF  x03
06512:  MOVLB  0
06514:  CALL   14BE
06518:  MOVFF  422,501
0651C:  MOVLB  5
0651E:  CLRF   x02
06520:  MOVLW  0F
06522:  MOVWF  x04
06524:  MOVLW  92
06526:  MOVWF  x03
06528:  MOVLB  0
0652A:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
0652E:  MOVFF  423,504
06532:  MOVFF  422,503
06536:  MOVFF  421,502
0653A:  MOVFF  420,501
0653E:  MOVLW  04
06540:  MOVLB  5
06542:  MOVWF  x06
06544:  MOVLW  2D
06546:  MOVWF  x05
06548:  CLRF   x08
0654A:  MOVLW  05
0654C:  MOVWF  x07
0654E:  MOVLW  04
06550:  MOVWF  x0A
06552:  MOVLW  28
06554:  MOVWF  x09
06556:  CLRF   x0E
06558:  CLRF   x0D
0655A:  CLRF   x0C
0655C:  MOVLW  01
0655E:  MOVWF  x0B
06560:  MOVLB  0
06562:  CALL   1526
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
06566:  MOVLW  02
06568:  MOVWF  00
0656A:  DECFSZ 00,F
0656C:  BRA    656A
0656E:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
06570:  MOVFF  422,501
06574:  MOVLW  01
06576:  MOVLB  5
06578:  MOVWF  x02
0657A:  MOVLW  0F
0657C:  MOVWF  x04
0657E:  MOVLW  89
06580:  MOVWF  x03
06582:  MOVLB  0
06584:  CALL   14BE
06588:  MOVFF  422,501
0658C:  MOVLB  5
0658E:  CLRF   x02
06590:  MOVLW  0F
06592:  MOVWF  x04
06594:  MOVLW  92
06596:  MOVWF  x03
06598:  MOVLB  0
0659A:  CALL   14BE
....................    }
....................    return read_data;
0659E:  MOVLB  4
065A0:  MOVF   x28,W
065A2:  MOVWF  01
065A4:  MOVLB  0
065A6:  GOTO   6F22 (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
017FE:  MOVLB  4
01800:  MOVF   x96,F
01802:  BTFSC  FD8.2
01804:  BRA    180C
01806:  MOVLB  0
01808:  GOTO   18FE
0180C:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0180E:  MOVLW  03
01810:  MOVLB  4
01812:  MOVWF  xA3
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
01814:  MOVFF  49B,4AD
01818:  MOVFF  49C,4AE
0181C:  CLRF   xAF
0181E:  CLRF   xB0
01820:  MOVF   xAD,W
01822:  MOVWF  00
01824:  CLRF   01
01826:  CLRF   02
01828:  CLRF   03
0182A:  MOVFF  00,4A4
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0182E:  MOVFF  49A,4AD
01832:  MOVFF  49B,4AE
01836:  MOVFF  49C,4AF
0183A:  CLRF   xB0
0183C:  MOVF   xAD,W
0183E:  MOVWF  00
01840:  CLRF   01
01842:  CLRF   02
01844:  CLRF   03
01846:  MOVFF  00,4A5
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0184A:  MOVF   x99,W
0184C:  MOVWF  00
0184E:  CLRF   01
01850:  CLRF   02
01852:  CLRF   03
01854:  MOVFF  00,4A6
....................             
....................       output_low(flash_stream.cs_pin);
01858:  MOVFF  497,501
0185C:  MOVLB  5
0185E:  CLRF   x02
01860:  MOVLW  0F
01862:  MOVWF  x04
01864:  MOVLW  89
01866:  MOVWF  x03
01868:  MOVLB  0
0186A:  CALL   14BE
0186E:  MOVFF  497,501
01872:  MOVLB  5
01874:  CLRF   x02
01876:  MOVLW  0F
01878:  MOVWF  x04
0187A:  MOVLW  92
0187C:  MOVWF  x03
0187E:  MOVLB  0
01880:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
01884:  MOVFF  498,504
01888:  MOVFF  497,503
0188C:  MOVFF  496,502
01890:  MOVFF  495,501
01894:  MOVLW  04
01896:  MOVLB  5
01898:  MOVWF  x06
0189A:  MOVLW  A3
0189C:  MOVWF  x05
0189E:  CLRF   x08
018A0:  MOVLW  04
018A2:  MOVWF  x07
018A4:  MOVFF  49E,50A
018A8:  MOVFF  49D,509
018AC:  MOVFF  4A2,50E
018B0:  MOVFF  4A1,50D
018B4:  MOVFF  4A0,50C
018B8:  MOVFF  49F,50B
018BC:  MOVLB  0
018BE:  CALL   1526
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
018C2:  MOVLW  02
018C4:  MOVWF  00
018C6:  DECFSZ 00,F
018C8:  BRA    18C6
018CA:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
018CC:  MOVFF  497,501
018D0:  MOVLW  01
018D2:  MOVLB  5
018D4:  MOVWF  x02
018D6:  MOVLW  0F
018D8:  MOVWF  x04
018DA:  MOVLW  89
018DC:  MOVWF  x03
018DE:  MOVLB  0
018E0:  CALL   14BE
018E4:  MOVFF  497,501
018E8:  MOVLB  5
018EA:  CLRF   x02
018EC:  MOVLW  0F
018EE:  MOVWF  x04
018F0:  MOVLW  92
018F2:  MOVWF  x03
018F4:  MOVLB  0
018F6:  CALL   14BE
....................    }
018FA:  GOTO   1A14
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
018FE:  MOVLB  4
01900:  DECFSZ x96,W
01902:  BRA    1908
01904:  BRA    190E
01906:  MOVLB  0
01908:  MOVLB  0
0190A:  GOTO   1A14
0190E:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
01910:  MOVLW  13
01912:  MOVLB  4
01914:  MOVWF  xA7
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
01916:  MOVFF  49C,4AD
0191A:  CLRF   xAE
0191C:  CLRF   xAF
0191E:  CLRF   xB0
01920:  MOVF   xAD,W
01922:  MOVWF  00
01924:  CLRF   01
01926:  CLRF   02
01928:  CLRF   03
0192A:  MOVFF  00,4A8
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0192E:  MOVFF  49B,4AD
01932:  MOVFF  49C,4AE
01936:  CLRF   xAF
01938:  CLRF   xB0
0193A:  MOVF   xAD,W
0193C:  MOVWF  00
0193E:  CLRF   01
01940:  CLRF   02
01942:  CLRF   03
01944:  MOVFF  00,4A9
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
01948:  MOVFF  49A,4AD
0194C:  MOVFF  49B,4AE
01950:  MOVFF  49C,4AF
01954:  CLRF   xB0
01956:  MOVF   xAD,W
01958:  MOVWF  00
0195A:  CLRF   01
0195C:  CLRF   02
0195E:  CLRF   03
01960:  MOVFF  00,4AA
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
01964:  MOVF   x99,W
01966:  MOVWF  00
01968:  CLRF   01
0196A:  CLRF   02
0196C:  CLRF   03
0196E:  MOVFF  00,4AB
....................    
....................       output_low(flash_stream.cs_pin);
01972:  MOVFF  497,501
01976:  MOVLB  5
01978:  CLRF   x02
0197A:  MOVLW  0F
0197C:  MOVWF  x04
0197E:  MOVLW  89
01980:  MOVWF  x03
01982:  MOVLB  0
01984:  CALL   14BE
01988:  MOVFF  497,501
0198C:  MOVLB  5
0198E:  CLRF   x02
01990:  MOVLW  0F
01992:  MOVWF  x04
01994:  MOVLW  92
01996:  MOVWF  x03
01998:  MOVLB  0
0199A:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0199E:  MOVFF  498,504
019A2:  MOVFF  497,503
019A6:  MOVFF  496,502
019AA:  MOVFF  495,501
019AE:  MOVLW  04
019B0:  MOVLB  5
019B2:  MOVWF  x06
019B4:  MOVLW  A7
019B6:  MOVWF  x05
019B8:  CLRF   x08
019BA:  MOVLW  05
019BC:  MOVWF  x07
019BE:  MOVFF  49E,50A
019C2:  MOVFF  49D,509
019C6:  MOVFF  4A2,50E
019CA:  MOVFF  4A1,50D
019CE:  MOVFF  4A0,50C
019D2:  MOVFF  49F,50B
019D6:  MOVLB  0
019D8:  CALL   1526
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
019DC:  MOVLW  02
019DE:  MOVWF  00
019E0:  DECFSZ 00,F
019E2:  BRA    19E0
019E4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
019E6:  MOVFF  497,501
019EA:  MOVLW  01
019EC:  MOVLB  5
019EE:  MOVWF  x02
019F0:  MOVLW  0F
019F2:  MOVWF  x04
019F4:  MOVLW  89
019F6:  MOVWF  x03
019F8:  MOVLB  0
019FA:  CALL   14BE
019FE:  MOVFF  497,501
01A02:  MOVLB  5
01A04:  CLRF   x02
01A06:  MOVLW  0F
01A08:  MOVWF  x04
01A0A:  MOVLW  92
01A0C:  MOVWF  x03
01A0E:  MOVLB  0
01A10:  CALL   14BE
....................    }
....................    return;
01A14:  RETURN 0
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
065AA:  MOVLB  4
065AC:  MOVF   x1F,F
065AE:  BTFSC  FD8.2
065B0:  BRA    65B8
065B2:  MOVLB  0
065B4:  GOTO   6726
065B8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
065BA:  MOVLW  06
065BC:  MOVLB  4
065BE:  MOVWF  x27
065C0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
065C2:  MOVLW  02
065C4:  MOVLB  4
065C6:  MOVWF  x28
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
065C8:  MOVFF  424,436
065CC:  MOVFF  425,437
065D0:  CLRF   x38
065D2:  CLRF   x39
065D4:  MOVF   x36,W
065D6:  MOVWF  00
065D8:  CLRF   01
065DA:  CLRF   02
065DC:  CLRF   03
065DE:  MOVFF  00,429
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
065E2:  MOVFF  423,436
065E6:  MOVFF  424,437
065EA:  MOVFF  425,438
065EE:  CLRF   x39
065F0:  MOVF   x36,W
065F2:  MOVWF  00
065F4:  CLRF   01
065F6:  CLRF   02
065F8:  CLRF   03
065FA:  MOVFF  00,42A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
065FE:  MOVF   x22,W
06600:  MOVWF  00
06602:  CLRF   01
06604:  CLRF   02
06606:  CLRF   03
06608:  MOVFF  00,42B
....................       flash_cmd[4] = write_data;
0660C:  MOVFF  426,42C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
06610:  MOVFF  420,501
06614:  MOVLB  5
06616:  CLRF   x02
06618:  MOVLW  0F
0661A:  MOVWF  x04
0661C:  MOVLW  89
0661E:  MOVWF  x03
06620:  MOVLB  0
06622:  CALL   14BE
06626:  MOVFF  420,501
0662A:  MOVLB  5
0662C:  CLRF   x02
0662E:  MOVLW  0F
06630:  MOVWF  x04
06632:  MOVLW  92
06634:  MOVWF  x03
06636:  MOVLB  0
06638:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0663C:  MOVFF  421,4FE
06640:  MOVFF  420,4FD
06644:  MOVFF  41F,4FC
06648:  MOVFF  41E,4FB
0664C:  MOVLW  04
0664E:  MOVLB  5
06650:  MOVWF  x00
06652:  MOVLW  27
06654:  MOVLB  4
06656:  MOVWF  xFF
06658:  MOVLB  5
0665A:  CLRF   x02
0665C:  MOVLW  01
0665E:  MOVWF  x01
06660:  MOVLB  0
06662:  CALL   234C
....................       output_high(flash_stream.cs_pin);
06666:  MOVFF  420,501
0666A:  MOVLW  01
0666C:  MOVLB  5
0666E:  MOVWF  x02
06670:  MOVLW  0F
06672:  MOVWF  x04
06674:  MOVLW  89
06676:  MOVWF  x03
06678:  MOVLB  0
0667A:  CALL   14BE
0667E:  MOVFF  420,501
06682:  MOVLB  5
06684:  CLRF   x02
06686:  MOVLW  0F
06688:  MOVWF  x04
0668A:  MOVLW  92
0668C:  MOVWF  x03
0668E:  MOVLB  0
06690:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
06694:  MOVFF  420,501
06698:  MOVLB  5
0669A:  CLRF   x02
0669C:  MOVLW  0F
0669E:  MOVWF  x04
066A0:  MOVLW  89
066A2:  MOVWF  x03
066A4:  MOVLB  0
066A6:  CALL   14BE
066AA:  MOVFF  420,501
066AE:  MOVLB  5
066B0:  CLRF   x02
066B2:  MOVLW  0F
066B4:  MOVWF  x04
066B6:  MOVLW  92
066B8:  MOVWF  x03
066BA:  MOVLB  0
066BC:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
066C0:  MOVFF  421,4FE
066C4:  MOVFF  420,4FD
066C8:  MOVFF  41F,4FC
066CC:  MOVFF  41E,4FB
066D0:  MOVLW  04
066D2:  MOVLB  5
066D4:  MOVWF  x00
066D6:  MOVLW  28
066D8:  MOVLB  4
066DA:  MOVWF  xFF
066DC:  MOVLB  5
066DE:  CLRF   x02
066E0:  MOVLW  05
066E2:  MOVWF  x01
066E4:  MOVLB  0
066E6:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
066EA:  MOVLW  02
066EC:  MOVWF  00
066EE:  DECFSZ 00,F
066F0:  BRA    66EE
066F2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
066F4:  MOVFF  420,501
066F8:  MOVLW  01
066FA:  MOVLB  5
066FC:  MOVWF  x02
066FE:  MOVLW  0F
06700:  MOVWF  x04
06702:  MOVLW  89
06704:  MOVWF  x03
06706:  MOVLB  0
06708:  CALL   14BE
0670C:  MOVFF  420,501
06710:  MOVLB  5
06712:  CLRF   x02
06714:  MOVLW  0F
06716:  MOVWF  x04
06718:  MOVLW  92
0671A:  MOVWF  x03
0671C:  MOVLB  0
0671E:  CALL   14BE
....................    }
06722:  GOTO   68B8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
06726:  MOVLB  4
06728:  DECFSZ x1F,W
0672A:  BRA    6730
0672C:  BRA    6736
0672E:  MOVLB  0
06730:  MOVLB  0
06732:  GOTO   68B8
06736:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
06738:  MOVLW  06
0673A:  MOVLB  4
0673C:  MOVWF  x2D
0673E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
06740:  MOVLW  12
06742:  MOVLB  4
06744:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
06746:  MOVFF  425,436
0674A:  CLRF   x37
0674C:  CLRF   x38
0674E:  CLRF   x39
06750:  MOVF   x36,W
06752:  MOVWF  00
06754:  CLRF   01
06756:  CLRF   02
06758:  CLRF   03
0675A:  MOVFF  00,42F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0675E:  MOVFF  424,436
06762:  MOVFF  425,437
06766:  CLRF   x38
06768:  CLRF   x39
0676A:  MOVF   x36,W
0676C:  MOVWF  00
0676E:  CLRF   01
06770:  CLRF   02
06772:  CLRF   03
06774:  MOVFF  00,430
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
06778:  MOVFF  423,436
0677C:  MOVFF  424,437
06780:  MOVFF  425,438
06784:  CLRF   x39
06786:  MOVF   x36,W
06788:  MOVWF  00
0678A:  CLRF   01
0678C:  CLRF   02
0678E:  CLRF   03
06790:  MOVFF  00,431
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
06794:  MOVF   x22,W
06796:  MOVWF  00
06798:  CLRF   01
0679A:  CLRF   02
0679C:  CLRF   03
0679E:  MOVFF  00,432
....................       flash_cmd[5] = write_data;
067A2:  MOVFF  426,433
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
067A6:  MOVFF  420,501
067AA:  MOVLB  5
067AC:  CLRF   x02
067AE:  MOVLW  0F
067B0:  MOVWF  x04
067B2:  MOVLW  89
067B4:  MOVWF  x03
067B6:  MOVLB  0
067B8:  CALL   14BE
067BC:  MOVFF  420,501
067C0:  MOVLB  5
067C2:  CLRF   x02
067C4:  MOVLW  0F
067C6:  MOVWF  x04
067C8:  MOVLW  92
067CA:  MOVWF  x03
067CC:  MOVLB  0
067CE:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
067D2:  MOVFF  421,4FE
067D6:  MOVFF  420,4FD
067DA:  MOVFF  41F,4FC
067DE:  MOVFF  41E,4FB
067E2:  MOVLW  04
067E4:  MOVLB  5
067E6:  MOVWF  x00
067E8:  MOVLW  2D
067EA:  MOVLB  4
067EC:  MOVWF  xFF
067EE:  MOVLB  5
067F0:  CLRF   x02
067F2:  MOVLW  01
067F4:  MOVWF  x01
067F6:  MOVLB  0
067F8:  CALL   234C
....................       output_high(flash_stream.cs_pin);
067FC:  MOVFF  420,501
06800:  MOVLW  01
06802:  MOVLB  5
06804:  MOVWF  x02
06806:  MOVLW  0F
06808:  MOVWF  x04
0680A:  MOVLW  89
0680C:  MOVWF  x03
0680E:  MOVLB  0
06810:  CALL   14BE
06814:  MOVFF  420,501
06818:  MOVLB  5
0681A:  CLRF   x02
0681C:  MOVLW  0F
0681E:  MOVWF  x04
06820:  MOVLW  92
06822:  MOVWF  x03
06824:  MOVLB  0
06826:  CALL   14BE
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
0682A:  MOVFF  420,501
0682E:  MOVLB  5
06830:  CLRF   x02
06832:  MOVLW  0F
06834:  MOVWF  x04
06836:  MOVLW  89
06838:  MOVWF  x03
0683A:  MOVLB  0
0683C:  CALL   14BE
06840:  MOVFF  420,501
06844:  MOVLB  5
06846:  CLRF   x02
06848:  MOVLW  0F
0684A:  MOVWF  x04
0684C:  MOVLW  92
0684E:  MOVWF  x03
06850:  MOVLB  0
06852:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
06856:  MOVFF  421,4FE
0685A:  MOVFF  420,4FD
0685E:  MOVFF  41F,4FC
06862:  MOVFF  41E,4FB
06866:  MOVLW  04
06868:  MOVLB  5
0686A:  MOVWF  x00
0686C:  MOVLW  2E
0686E:  MOVLB  4
06870:  MOVWF  xFF
06872:  MOVLB  5
06874:  CLRF   x02
06876:  MOVLW  06
06878:  MOVWF  x01
0687A:  MOVLB  0
0687C:  CALL   234C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
06880:  MOVLW  02
06882:  MOVWF  00
06884:  DECFSZ 00,F
06886:  BRA    6884
06888:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0688A:  MOVFF  420,501
0688E:  MOVLW  01
06890:  MOVLB  5
06892:  MOVWF  x02
06894:  MOVLW  0F
06896:  MOVWF  x04
06898:  MOVLW  89
0689A:  MOVWF  x03
0689C:  MOVLB  0
0689E:  CALL   14BE
068A2:  MOVFF  420,501
068A6:  MOVLB  5
068A8:  CLRF   x02
068AA:  MOVLW  0F
068AC:  MOVWF  x04
068AE:  MOVLW  92
068B0:  MOVWF  x03
068B2:  MOVLB  0
068B4:  CALL   14BE
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
068B8:  MOVLB  4
068BA:  CLRF   x34
068BC:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
068BE:  MOVFF  421,4FE
068C2:  MOVFF  420,4FD
068C6:  MOVFF  41F,4FC
068CA:  MOVFF  41E,4FB
068CE:  CALL   2594
068D2:  MOVF   01,W
068D4:  ANDLW  01
068D6:  SUBLW  01
068D8:  BTFSS  FD8.2
068DA:  GOTO   692C
....................       if(timeout_counter > 10)
068DE:  MOVLB  4
068E0:  MOVF   x34,W
068E2:  SUBLW  0A
068E4:  BTFSS  FD8.0
068E6:  BRA    68EE
068E8:  MOVLB  0
068EA:  GOTO   6900
068EE:  MOVLB  0
....................          delay_ms(200);
068F0:  MOVLW  C8
068F2:  MOVLB  4
068F4:  MOVWF  xFB
068F6:  MOVLB  0
068F8:  CALL   135E
068FC:  GOTO   690C
....................       else
....................          delay_ms(10);   
06900:  MOVLW  0A
06902:  MOVLB  4
06904:  MOVWF  xFB
06906:  MOVLB  0
06908:  CALL   135E
....................       
....................       if(timeout_counter > 100){
0690C:  MOVLB  4
0690E:  MOVF   x34,W
06910:  SUBLW  64
06912:  BTFSS  FD8.0
06914:  BRA    691C
06916:  MOVLB  0
06918:  GOTO   6922
0691C:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0691E:  GOTO   692C
....................       }  
....................       timeout_counter++;
06922:  MOVLB  4
06924:  INCF   x34,F
06926:  MOVLB  0
06928:  GOTO   68BE
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
0692C:  RETURN 0
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02632:  MOVLB  4
02634:  MOVF   xE4,F
02636:  BTFSC  FD8.2
02638:  BRA    2640
0263A:  MOVLB  0
0263C:  GOTO   27B8
02640:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02642:  MOVLW  06
02644:  MOVLB  4
02646:  MOVWF  xEF
02648:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0264A:  MOVLW  02
0264C:  MOVLB  4
0264E:  MOVWF  xF0
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02650:  MOVFF  4E9,4FC
02654:  MOVFF  4EA,4FD
02658:  CLRF   xFE
0265A:  CLRF   xFF
0265C:  MOVF   xFC,W
0265E:  MOVWF  00
02660:  CLRF   01
02662:  CLRF   02
02664:  CLRF   03
02666:  MOVFF  00,4F1
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0266A:  MOVFF  4E8,4FC
0266E:  MOVFF  4E9,4FD
02672:  MOVFF  4EA,4FE
02676:  CLRF   xFF
02678:  MOVF   xFC,W
0267A:  MOVWF  00
0267C:  CLRF   01
0267E:  CLRF   02
02680:  CLRF   03
02682:  MOVFF  00,4F2
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02686:  MOVF   xE7,W
02688:  MOVWF  00
0268A:  CLRF   01
0268C:  CLRF   02
0268E:  CLRF   03
02690:  MOVFF  00,4F3
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02694:  MOVFF  4E5,501
02698:  MOVLB  5
0269A:  CLRF   x02
0269C:  MOVLW  0F
0269E:  MOVWF  x04
026A0:  MOVLW  89
026A2:  MOVWF  x03
026A4:  MOVLB  0
026A6:  CALL   14BE
026AA:  MOVFF  4E5,501
026AE:  MOVLB  5
026B0:  CLRF   x02
026B2:  MOVLW  0F
026B4:  MOVWF  x04
026B6:  MOVLW  92
026B8:  MOVWF  x03
026BA:  MOVLB  0
026BC:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
026C0:  MOVFF  4E6,4FE
026C4:  MOVFF  4E5,4FD
026C8:  MOVFF  4E4,4FC
026CC:  MOVFF  4E3,4FB
026D0:  MOVLW  04
026D2:  MOVLB  5
026D4:  MOVWF  x00
026D6:  MOVLW  EF
026D8:  MOVLB  4
026DA:  MOVWF  xFF
026DC:  MOVLB  5
026DE:  CLRF   x02
026E0:  MOVLW  01
026E2:  MOVWF  x01
026E4:  MOVLB  0
026E6:  CALL   234C
....................       output_high(flash_stream.cs_pin);
026EA:  MOVFF  4E5,501
026EE:  MOVLW  01
026F0:  MOVLB  5
026F2:  MOVWF  x02
026F4:  MOVLW  0F
026F6:  MOVWF  x04
026F8:  MOVLW  89
026FA:  MOVWF  x03
026FC:  MOVLB  0
026FE:  CALL   14BE
02702:  MOVFF  4E5,501
02706:  MOVLB  5
02708:  CLRF   x02
0270A:  MOVLW  0F
0270C:  MOVWF  x04
0270E:  MOVLW  92
02710:  MOVWF  x03
02712:  MOVLB  0
02714:  CALL   14BE
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02718:  MOVFF  4E5,501
0271C:  MOVLB  5
0271E:  CLRF   x02
02720:  MOVLW  0F
02722:  MOVWF  x04
02724:  MOVLW  89
02726:  MOVWF  x03
02728:  MOVLB  0
0272A:  CALL   14BE
0272E:  MOVFF  4E5,501
02732:  MOVLB  5
02734:  CLRF   x02
02736:  MOVLW  0F
02738:  MOVWF  x04
0273A:  MOVLW  92
0273C:  MOVWF  x03
0273E:  MOVLB  0
02740:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
02744:  MOVFF  4E6,4FE
02748:  MOVFF  4E5,4FD
0274C:  MOVFF  4E4,4FC
02750:  MOVFF  4E3,4FB
02754:  MOVLW  04
02756:  MOVLB  5
02758:  MOVWF  x00
0275A:  MOVLW  F0
0275C:  MOVLB  4
0275E:  MOVWF  xFF
02760:  MOVLW  04
02762:  MOVLB  5
02764:  MOVWF  x01
02766:  MOVFF  4EC,503
0276A:  MOVFF  4EB,502
0276E:  MOVFF  4EE,505
02772:  MOVFF  4ED,504
02776:  MOVLB  0
02778:  CALL   2430
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0277C:  MOVLW  02
0277E:  MOVWF  00
02780:  DECFSZ 00,F
02782:  BRA    2780
02784:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02786:  MOVFF  4E5,501
0278A:  MOVLW  01
0278C:  MOVLB  5
0278E:  MOVWF  x02
02790:  MOVLW  0F
02792:  MOVWF  x04
02794:  MOVLW  89
02796:  MOVWF  x03
02798:  MOVLB  0
0279A:  CALL   14BE
0279E:  MOVFF  4E5,501
027A2:  MOVLB  5
027A4:  CLRF   x02
027A6:  MOVLW  0F
027A8:  MOVWF  x04
027AA:  MOVLW  92
027AC:  MOVWF  x03
027AE:  MOVLB  0
027B0:  CALL   14BE
....................    }
027B4:  GOTO   2954
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
027B8:  MOVLB  4
027BA:  DECFSZ xE4,W
027BC:  BRA    27C2
027BE:  BRA    27C8
027C0:  MOVLB  0
027C2:  MOVLB  0
027C4:  GOTO   2954
027C8:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
027CA:  MOVLW  06
027CC:  MOVLB  4
027CE:  MOVWF  xF4
027D0:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
027D2:  MOVLW  12
027D4:  MOVLB  4
027D6:  MOVWF  xF5
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
027D8:  MOVFF  4EA,4FC
027DC:  CLRF   xFD
027DE:  CLRF   xFE
027E0:  CLRF   xFF
027E2:  MOVF   xFC,W
027E4:  MOVWF  00
027E6:  CLRF   01
027E8:  CLRF   02
027EA:  CLRF   03
027EC:  MOVFF  00,4F6
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
027F0:  MOVFF  4E9,4FC
027F4:  MOVFF  4EA,4FD
027F8:  CLRF   xFE
027FA:  CLRF   xFF
027FC:  MOVF   xFC,W
027FE:  MOVWF  00
02800:  CLRF   01
02802:  CLRF   02
02804:  CLRF   03
02806:  MOVFF  00,4F7
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0280A:  MOVFF  4E8,4FC
0280E:  MOVFF  4E9,4FD
02812:  MOVFF  4EA,4FE
02816:  CLRF   xFF
02818:  MOVF   xFC,W
0281A:  MOVWF  00
0281C:  CLRF   01
0281E:  CLRF   02
02820:  CLRF   03
02822:  MOVFF  00,4F8
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02826:  MOVF   xE7,W
02828:  MOVWF  00
0282A:  CLRF   01
0282C:  CLRF   02
0282E:  CLRF   03
02830:  MOVFF  00,4F9
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02834:  MOVFF  4E5,501
02838:  MOVLB  5
0283A:  CLRF   x02
0283C:  MOVLW  0F
0283E:  MOVWF  x04
02840:  MOVLW  89
02842:  MOVWF  x03
02844:  MOVLB  0
02846:  CALL   14BE
0284A:  MOVFF  4E5,501
0284E:  MOVLB  5
02850:  CLRF   x02
02852:  MOVLW  0F
02854:  MOVWF  x04
02856:  MOVLW  92
02858:  MOVWF  x03
0285A:  MOVLB  0
0285C:  CALL   14BE
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02860:  MOVFF  4E6,4FE
02864:  MOVFF  4E5,4FD
02868:  MOVFF  4E4,4FC
0286C:  MOVFF  4E3,4FB
02870:  MOVLW  04
02872:  MOVLB  5
02874:  MOVWF  x00
02876:  MOVLW  F4
02878:  MOVLB  4
0287A:  MOVWF  xFF
0287C:  MOVLB  5
0287E:  CLRF   x02
02880:  MOVLW  01
02882:  MOVWF  x01
02884:  MOVLB  0
02886:  CALL   234C
....................       output_high(flash_stream.cs_pin);
0288A:  MOVFF  4E5,501
0288E:  MOVLW  01
02890:  MOVLB  5
02892:  MOVWF  x02
02894:  MOVLW  0F
02896:  MOVWF  x04
02898:  MOVLW  89
0289A:  MOVWF  x03
0289C:  MOVLB  0
0289E:  CALL   14BE
028A2:  MOVFF  4E5,501
028A6:  MOVLB  5
028A8:  CLRF   x02
028AA:  MOVLW  0F
028AC:  MOVWF  x04
028AE:  MOVLW  92
028B0:  MOVWF  x03
028B2:  MOVLB  0
028B4:  CALL   14BE
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
028B8:  MOVFF  4E5,501
028BC:  MOVLB  5
028BE:  CLRF   x02
028C0:  MOVLW  0F
028C2:  MOVWF  x04
028C4:  MOVLW  89
028C6:  MOVWF  x03
028C8:  MOVLB  0
028CA:  CALL   14BE
028CE:  MOVFF  4E5,501
028D2:  MOVLB  5
028D4:  CLRF   x02
028D6:  MOVLW  0F
028D8:  MOVWF  x04
028DA:  MOVLW  92
028DC:  MOVWF  x03
028DE:  MOVLB  0
028E0:  CALL   14BE
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
028E4:  MOVFF  4E6,4FE
028E8:  MOVFF  4E5,4FD
028EC:  MOVFF  4E4,4FC
028F0:  MOVFF  4E3,4FB
028F4:  MOVLW  04
028F6:  MOVLB  5
028F8:  MOVWF  x00
028FA:  MOVLW  F5
028FC:  MOVLB  4
028FE:  MOVWF  xFF
02900:  MOVLW  05
02902:  MOVLB  5
02904:  MOVWF  x01
02906:  MOVFF  4EC,503
0290A:  MOVFF  4EB,502
0290E:  MOVFF  4EE,505
02912:  MOVFF  4ED,504
02916:  MOVLB  0
02918:  CALL   2430
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0291C:  MOVLW  02
0291E:  MOVWF  00
02920:  DECFSZ 00,F
02922:  BRA    2920
02924:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02926:  MOVFF  4E5,501
0292A:  MOVLW  01
0292C:  MOVLB  5
0292E:  MOVWF  x02
02930:  MOVLW  0F
02932:  MOVWF  x04
02934:  MOVLW  89
02936:  MOVWF  x03
02938:  MOVLB  0
0293A:  CALL   14BE
0293E:  MOVFF  4E5,501
02942:  MOVLB  5
02944:  CLRF   x02
02946:  MOVLW  0F
02948:  MOVWF  x04
0294A:  MOVLW  92
0294C:  MOVWF  x03
0294E:  MOVLB  0
02950:  CALL   14BE
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
02954:  MOVLB  4
02956:  CLRF   xFA
02958:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0295A:  MOVFF  4E6,4FE
0295E:  MOVFF  4E5,4FD
02962:  MOVFF  4E4,4FC
02966:  MOVFF  4E3,4FB
0296A:  CALL   2594
0296E:  MOVF   01,W
02970:  ANDLW  01
02972:  SUBLW  01
02974:  BTFSS  FD8.2
02976:  GOTO   29C8
....................       if(timeout_counter > 10)
0297A:  MOVLB  4
0297C:  MOVF   xFA,W
0297E:  SUBLW  0A
02980:  BTFSS  FD8.0
02982:  BRA    298A
02984:  MOVLB  0
02986:  GOTO   299C
0298A:  MOVLB  0
....................          delay_ms(200);
0298C:  MOVLW  C8
0298E:  MOVLB  4
02990:  MOVWF  xFB
02992:  MOVLB  0
02994:  CALL   135E
02998:  GOTO   29A8
....................       else
....................          delay_ms(10);   
0299C:  MOVLW  0A
0299E:  MOVLB  4
029A0:  MOVWF  xFB
029A2:  MOVLB  0
029A4:  CALL   135E
....................       
....................       if(timeout_counter > 100){
029A8:  MOVLB  4
029AA:  MOVF   xFA,W
029AC:  SUBLW  64
029AE:  BTFSS  FD8.0
029B0:  BRA    29B8
029B2:  MOVLB  0
029B4:  GOTO   29BE
029B8:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
029BA:  GOTO   29C8
....................       }  
....................       timeout_counter++;
029BE:  MOVLB  4
029C0:  INCF   xFA,F
029C2:  MOVLB  0
029C4:  GOTO   295A
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
029C8:  RETURN 0
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0173E:  MOVLW  9F
01740:  MOVLB  4
01742:  MOVWF  xEB
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
01744:  MOVFF  4E5,501
01748:  MOVLB  5
0174A:  CLRF   x02
0174C:  MOVLW  0F
0174E:  MOVWF  x04
01750:  MOVLW  89
01752:  MOVWF  x03
01754:  MOVLB  0
01756:  CALL   14BE
0175A:  MOVFF  4E5,501
0175E:  MOVLB  5
01760:  CLRF   x02
01762:  MOVLW  0F
01764:  MOVWF  x04
01766:  MOVLW  92
01768:  MOVWF  x03
0176A:  MOVLB  0
0176C:  CALL   14BE
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
01770:  MOVFF  4E6,504
01774:  MOVFF  4E5,503
01778:  MOVFF  4E4,502
0177C:  MOVFF  4E3,501
01780:  MOVLW  04
01782:  MOVLB  5
01784:  MOVWF  x06
01786:  MOVLW  EB
01788:  MOVWF  x05
0178A:  CLRF   x08
0178C:  MOVLW  01
0178E:  MOVWF  x07
01790:  MOVLW  04
01792:  MOVWF  x0A
01794:  MOVLW  E7
01796:  MOVWF  x09
01798:  CLRF   x0E
0179A:  CLRF   x0D
0179C:  CLRF   x0C
0179E:  MOVLW  04
017A0:  MOVWF  x0B
017A2:  MOVLB  0
017A4:  CALL   1526
....................    output_high(flash_stream.cs_pin);
017A8:  MOVFF  4E5,501
017AC:  MOVLW  01
017AE:  MOVLB  5
017B0:  MOVWF  x02
017B2:  MOVLW  0F
017B4:  MOVWF  x04
017B6:  MOVLW  89
017B8:  MOVWF  x03
017BA:  MOVLB  0
017BC:  CALL   14BE
017C0:  MOVFF  4E5,501
017C4:  MOVLB  5
017C6:  CLRF   x02
017C8:  MOVLW  0F
017CA:  MOVWF  x04
017CC:  MOVLW  92
017CE:  MOVWF  x03
017D0:  MOVLB  0
017D2:  CALL   14BE
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
017D6:  MOVLB  4
017D8:  MOVF   xE7,W
017DA:  SUBLW  20
017DC:  BTFSC  FD8.2
017DE:  BRA    17E6
017E0:  MOVLB  0
017E2:  GOTO   17F4
017E6:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
017E8:  MOVLW  01
017EA:  MOVWF  01
017EC:  GOTO   17FC
....................    }
017F0:  GOTO   17FC
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
017F4:  MOVLW  00
017F6:  MOVWF  01
017F8:  GOTO   17FC
....................    }
017FC:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
06AA8:  MOVLW  F2
06AAA:  MOVWF  FF6
06AAC:  MOVLW  03
06AAE:  MOVWF  FF7
06AB0:  MOVLW  00
06AB2:  MOVWF  FF8
06AB4:  CALL   13DE
....................     fprintf(PC, "___Start smf_write__\r\n");
06AB8:  MOVLW  0C
06ABA:  MOVWF  FF6
06ABC:  MOVLW  04
06ABE:  MOVWF  FF7
06AC0:  MOVLW  00
06AC2:  MOVWF  FF8
06AC4:  CALL   13DE
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
06AC8:  MOVLB  3
06ACA:  CLRF   xC6
06ACC:  MOVLB  0
06ACE:  CALL   5FA0
06AD2:  MOVF   01,F
06AD4:  BTFSS  FD8.2
06AD6:  GOTO   77AE
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
06ADA:  MOVLW  24
06ADC:  MOVWF  FF6
06ADE:  MOVLW  04
06AE0:  MOVWF  FF7
06AE2:  MOVLW  00
06AE4:  MOVWF  FF8
06AE6:  MOVLW  07
06AE8:  MOVLB  4
06AEA:  MOVWF  x19
06AEC:  MOVLB  0
06AEE:  CALL   140E
06AF2:  MOVFF  3C6,419
06AF6:  MOVLW  18
06AF8:  MOVLB  4
06AFA:  MOVWF  x1A
06AFC:  MOVLB  0
06AFE:  CALL   608E
06B02:  MOVLW  2D
06B04:  MOVWF  FF6
06B06:  MOVLW  04
06B08:  MOVWF  FF7
06B0A:  MOVLW  00
06B0C:  MOVWF  FF8
06B0E:  MOVLW  12
06B10:  MOVLB  4
06B12:  MOVWF  x19
06B14:  MOVLB  0
06B16:  CALL   140E
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
06B1A:  GOTO   619C
06B1E:  MOVFF  02,3C8
06B22:  MOVFF  01,3C7
06B26:  MOVLB  3
06B28:  MOVF   xC7,W
06B2A:  MOVWF  01
06B2C:  MOVF   xC8,W
06B2E:  MOVWF  03
06B30:  MOVF   01,W
06B32:  MOVWF  FE9
06B34:  MOVFF  03,FEA
*
06B3E:  MOVLB  4
06B40:  MOVWF  x15
06B42:  MOVFF  415,41C
06B46:  MOVLB  0
06B48:  GOTO   61F6
06B4C:  MOVFF  02,03
06B50:  MOVF   01,W
06B52:  MOVWF  FE1
06B54:  MOVFF  03,FE2
06B58:  MOVLW  03
06B5A:  MOVWF  FEA
06B5C:  MOVLW  C9
06B5E:  MOVWF  FE9
06B60:  MOVLW  09
06B62:  MOVWF  01
06B64:  MOVFF  FE6,FEE
06B68:  DECFSZ 01,F
06B6A:  GOTO   6B64
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
06B6E:  MOVLW  01
06B70:  MOVLB  3
06B72:  ADDWF  xC6,W
06B74:  CLRF   03
06B76:  ADDLW  1D
06B78:  MOVWF  FE9
06B7A:  MOVLW  00
06B7C:  ADDWFC 03,W
06B7E:  MOVWF  FEA
06B80:  MOVFF  3D1,FEF
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
06B84:  MOVFF  3CC,3D5
06B88:  MOVFF  3CB,3D4
06B8C:  MOVFF  3CA,3D3
06B90:  MOVFF  3C9,3D2
06B94:  MOVFF  3D0,3D9
06B98:  MOVFF  3CF,3D8
06B9C:  MOVFF  3CE,3D7
06BA0:  MOVFF  3CD,3D6
06BA4:  MOVLW  01
06BA6:  ADDWF  xC7,W
06BA8:  MOVWF  FE9
06BAA:  MOVLW  00
06BAC:  ADDWFC xC8,W
06BAE:  MOVWF  FEA
06BB0:  MOVFF  FEF,3DA
06BB4:  MOVFF  FEC,3DB
06BB8:  MOVFF  FEC,3DC
06BBC:  MOVFF  FEC,3DD
06BC0:  MOVF   FED,F
06BC2:  MOVF   FED,F
06BC4:  MOVF   FED,F
06BC6:  MOVLW  05
06BC8:  ADDWF  xC7,W
06BCA:  MOVWF  FE9
06BCC:  MOVLW  00
06BCE:  ADDWFC xC8,W
06BD0:  MOVWF  FEA
06BD2:  MOVFF  FEF,3DE
06BD6:  MOVFF  FEC,3DF
06BDA:  MOVFF  FEC,3E0
06BDE:  MOVFF  FEC,3E1
06BE2:  MOVF   FED,F
06BE4:  MOVF   FED,F
06BE6:  MOVF   FED,F
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
06BE8:  MOVLW  40
06BEA:  MOVWF  FF6
06BEC:  MOVLW  04
06BEE:  MOVWF  FF7
06BF0:  MOVLW  00
06BF2:  MOVWF  FF8
06BF4:  MOVLW  25
06BF6:  MOVLB  4
06BF8:  MOVWF  x19
06BFA:  MOVLB  0
06BFC:  CALL   140E
06C00:  MOVFF  3D5,4A4
06C04:  MOVLW  37
06C06:  MOVLB  4
06C08:  MOVWF  xA5
06C0A:  MOVLB  0
06C0C:  CALL   1A16
06C10:  MOVFF  3D4,4A4
06C14:  MOVLW  37
06C16:  MOVLB  4
06C18:  MOVWF  xA5
06C1A:  MOVLB  0
06C1C:  CALL   1A16
06C20:  MOVFF  3D3,4A4
06C24:  MOVLW  37
06C26:  MOVLB  4
06C28:  MOVWF  xA5
06C2A:  MOVLB  0
06C2C:  CALL   1A16
06C30:  MOVFF  3D2,4A4
06C34:  MOVLW  37
06C36:  MOVLB  4
06C38:  MOVWF  xA5
06C3A:  MOVLB  0
06C3C:  CALL   1A16
06C40:  MOVLW  0D
06C42:  MOVLB  4
06C44:  MOVWF  xE6
06C46:  MOVLB  0
06C48:  CALL   138C
06C4C:  MOVLW  0A
06C4E:  MOVLB  4
06C50:  MOVWF  xE6
06C52:  MOVLB  0
06C54:  CALL   138C
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
06C58:  MOVLW  6E
06C5A:  MOVWF  FF6
06C5C:  MOVLW  04
06C5E:  MOVWF  FF7
06C60:  MOVLW  00
06C62:  MOVWF  FF8
06C64:  MOVLW  25
06C66:  MOVLB  4
06C68:  MOVWF  x19
06C6A:  MOVLB  0
06C6C:  CALL   140E
06C70:  MOVFF  3D9,4A4
06C74:  MOVLW  37
06C76:  MOVLB  4
06C78:  MOVWF  xA5
06C7A:  MOVLB  0
06C7C:  CALL   1A16
06C80:  MOVFF  3D8,4A4
06C84:  MOVLW  37
06C86:  MOVLB  4
06C88:  MOVWF  xA5
06C8A:  MOVLB  0
06C8C:  CALL   1A16
06C90:  MOVFF  3D7,4A4
06C94:  MOVLW  37
06C96:  MOVLB  4
06C98:  MOVWF  xA5
06C9A:  MOVLB  0
06C9C:  CALL   1A16
06CA0:  MOVFF  3D6,4A4
06CA4:  MOVLW  37
06CA6:  MOVLB  4
06CA8:  MOVWF  xA5
06CAA:  MOVLB  0
06CAC:  CALL   1A16
06CB0:  MOVLW  0D
06CB2:  MOVLB  4
06CB4:  MOVWF  xE6
06CB6:  MOVLB  0
06CB8:  CALL   138C
06CBC:  MOVLW  0A
06CBE:  MOVLB  4
06CC0:  MOVWF  xE6
06CC2:  MOVLB  0
06CC4:  CALL   138C
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
06CC8:  MOVLW  9C
06CCA:  MOVWF  FF6
06CCC:  MOVLW  04
06CCE:  MOVWF  FF7
06CD0:  MOVLW  00
06CD2:  MOVWF  FF8
06CD4:  MOVLW  25
06CD6:  MOVLB  4
06CD8:  MOVWF  x19
06CDA:  MOVLB  0
06CDC:  CALL   140E
06CE0:  MOVFF  3DD,4A4
06CE4:  MOVLW  37
06CE6:  MOVLB  4
06CE8:  MOVWF  xA5
06CEA:  MOVLB  0
06CEC:  CALL   1A16
06CF0:  MOVFF  3DC,4A4
06CF4:  MOVLW  37
06CF6:  MOVLB  4
06CF8:  MOVWF  xA5
06CFA:  MOVLB  0
06CFC:  CALL   1A16
06D00:  MOVFF  3DB,4A4
06D04:  MOVLW  37
06D06:  MOVLB  4
06D08:  MOVWF  xA5
06D0A:  MOVLB  0
06D0C:  CALL   1A16
06D10:  MOVFF  3DA,4A4
06D14:  MOVLW  37
06D16:  MOVLB  4
06D18:  MOVWF  xA5
06D1A:  MOVLB  0
06D1C:  CALL   1A16
06D20:  MOVLW  0D
06D22:  MOVLB  4
06D24:  MOVWF  xE6
06D26:  MOVLB  0
06D28:  CALL   138C
06D2C:  MOVLW  0A
06D2E:  MOVLB  4
06D30:  MOVWF  xE6
06D32:  MOVLB  0
06D34:  CALL   138C
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
06D38:  MOVLW  CA
06D3A:  MOVWF  FF6
06D3C:  MOVLW  04
06D3E:  MOVWF  FF7
06D40:  MOVLW  00
06D42:  MOVWF  FF8
06D44:  MOVLW  25
06D46:  MOVLB  4
06D48:  MOVWF  x19
06D4A:  MOVLB  0
06D4C:  CALL   140E
06D50:  MOVLW  41
06D52:  MOVWF  FE9
06D54:  MOVFF  3E1,418
06D58:  MOVFF  3E0,417
06D5C:  MOVFF  3DF,416
06D60:  MOVFF  3DE,415
06D64:  CALL   6294
06D68:  MOVLW  F2
06D6A:  MOVWF  FF6
06D6C:  MOVLW  04
06D6E:  MOVWF  FF7
06D70:  MOVLW  00
06D72:  MOVWF  FF8
06D74:  MOVLW  04
06D76:  MOVLB  4
06D78:  MOVWF  x19
06D7A:  MOVLB  0
06D7C:  CALL   140E
06D80:  MOVFF  3E1,4A4
06D84:  MOVLW  57
06D86:  MOVLB  4
06D88:  MOVWF  xA5
06D8A:  MOVLB  0
06D8C:  CALL   1A16
06D90:  MOVFF  3E0,4A4
06D94:  MOVLW  57
06D96:  MOVLB  4
06D98:  MOVWF  xA5
06D9A:  MOVLB  0
06D9C:  CALL   1A16
06DA0:  MOVFF  3DF,4A4
06DA4:  MOVLW  57
06DA6:  MOVLB  4
06DA8:  MOVWF  xA5
06DAA:  MOVLB  0
06DAC:  CALL   1A16
06DB0:  MOVFF  3DE,4A4
06DB4:  MOVLW  57
06DB6:  MOVLB  4
06DB8:  MOVWF  xA5
06DBA:  MOVLB  0
06DBC:  CALL   1A16
06DC0:  MOVLW  F9
06DC2:  MOVWF  FF6
06DC4:  MOVLW  04
06DC6:  MOVWF  FF7
06DC8:  MOVLW  00
06DCA:  MOVWF  FF8
06DCC:  MOVLW  05
06DCE:  MOVLB  4
06DD0:  MOVWF  x19
06DD2:  MOVLB  0
06DD4:  CALL   140E
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
06DD8:  MOVFF  E7,4E6
06DDC:  MOVFF  E6,4E5
06DE0:  MOVFF  E5,4E4
06DE4:  MOVFF  E4,4E3
06DE8:  CALL   173E
06DEC:  MOVF   01,F
06DEE:  BTFSS  FD8.2
06DF0:  GOTO   6E08
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
06DF4:  MOVLW  00
06DF6:  MOVWF  FF6
06DF8:  MOVLW  05
06DFA:  MOVWF  FF7
06DFC:  MOVLW  00
06DFE:  MOVWF  FF8
06E00:  CALL   13DE
....................             return;
06E04:  GOTO   77CE
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
06E08:  MOVFF  E7,498
06E0C:  MOVFF  E6,497
06E10:  MOVFF  E5,496
06E14:  MOVFF  E4,495
06E18:  MOVFF  3D5,49C
06E1C:  MOVFF  3D4,49B
06E20:  MOVFF  3D3,49A
06E24:  MOVFF  3D2,499
06E28:  MOVLW  03
06E2A:  MOVLB  4
06E2C:  MOVWF  x9E
06E2E:  MOVLW  E2
06E30:  MOVWF  x9D
06E32:  CLRF   xA2
06E34:  CLRF   xA1
06E36:  CLRF   xA0
06E38:  MOVLW  04
06E3A:  MOVWF  x9F
06E3C:  MOVLB  0
06E3E:  CALL   17FE
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
06E42:  MOVLB  4
06E44:  CLRF   x18
06E46:  CLRF   x17
06E48:  CLRF   x16
06E4A:  MOVFF  3E5,415
06E4E:  MOVFF  415,418
06E52:  CLRF   x15
06E54:  CLRF   x16
06E56:  CLRF   x17
06E58:  CLRF   x1D
06E5A:  CLRF   x1C
06E5C:  CLRF   x1B
06E5E:  MOVFF  3E4,41A
06E62:  MOVFF  41B,03
06E66:  MOVFF  41A,02
06E6A:  CLRF   00
06E6C:  CLRF   01
06E6E:  MOVF   00,W
06E70:  IORWF  x15,F
06E72:  MOVF   01,W
06E74:  IORWF  x16,F
06E76:  MOVF   02,W
06E78:  IORWF  x17,F
06E7A:  MOVF   03,W
06E7C:  IORWF  x18,F
06E7E:  CLRF   x1D
06E80:  CLRF   x1C
06E82:  CLRF   x1B
06E84:  MOVFF  3E3,41A
06E88:  MOVFF  41C,03
06E8C:  MOVFF  41B,02
06E90:  MOVFF  41A,01
06E94:  CLRF   00
06E96:  MOVF   00,W
06E98:  IORWF  x15,F
06E9A:  MOVF   01,W
06E9C:  IORWF  x16,F
06E9E:  MOVF   02,W
06EA0:  IORWF  x17,F
06EA2:  MOVF   03,W
06EA4:  IORWF  x18,F
06EA6:  MOVFF  3E2,00
06EAA:  CLRF   01
06EAC:  CLRF   02
06EAE:  CLRF   03
06EB0:  MOVF   00,W
06EB2:  IORWF  x15,W
06EB4:  MOVLB  3
06EB6:  MOVWF  xE6
06EB8:  MOVF   01,W
06EBA:  MOVLB  4
06EBC:  IORWF  x16,W
06EBE:  MOVLB  3
06EC0:  MOVWF  xE7
06EC2:  MOVF   02,W
06EC4:  MOVLB  4
06EC6:  IORWF  x17,W
06EC8:  MOVLB  3
06ECA:  MOVWF  xE8
06ECC:  MOVF   03,W
06ECE:  MOVLB  4
06ED0:  IORWF  x18,W
06ED2:  MOVLB  3
06ED4:  MOVWF  xE9
06ED6:  MOVLW  04
06ED8:  ADDWF  xD2,W
06EDA:  MOVLB  4
06EDC:  MOVWF  x15
06EDE:  MOVLW  00
06EE0:  MOVLB  3
06EE2:  ADDWFC xD3,W
06EE4:  MOVLB  4
06EE6:  MOVWF  x16
06EE8:  MOVLW  00
06EEA:  MOVLB  3
06EEC:  ADDWFC xD4,W
06EEE:  MOVLB  4
06EF0:  MOVWF  x17
06EF2:  MOVLW  00
06EF4:  MOVLB  3
06EF6:  ADDWFC xD5,W
06EF8:  MOVLB  4
06EFA:  MOVWF  x18
06EFC:  MOVFF  E7,423
06F00:  MOVFF  E6,422
06F04:  MOVFF  E5,421
06F08:  MOVFF  E4,420
06F0C:  MOVFF  418,427
06F10:  MOVFF  417,426
06F14:  MOVFF  416,425
06F18:  MOVFF  415,424
06F1C:  MOVLB  0
06F1E:  GOTO   6394
06F22:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
06F26:  MOVLW  1E
06F28:  MOVWF  FF6
06F2A:  MOVLW  05
06F2C:  MOVWF  FF7
06F2E:  MOVLW  00
06F30:  MOVWF  FF8
06F32:  CALL   13DE
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
06F36:  MOVLW  30
06F38:  MOVWF  FF6
06F3A:  MOVLW  05
06F3C:  MOVWF  FF7
06F3E:  MOVLW  00
06F40:  MOVWF  FF8
06F42:  MOVLW  0C
06F44:  MOVLB  4
06F46:  MOVWF  x19
06F48:  MOVLB  0
06F4A:  CALL   140E
06F4E:  MOVLW  41
06F50:  MOVWF  FE9
06F52:  MOVFF  3E9,418
06F56:  MOVFF  3E8,417
06F5A:  MOVFF  3E7,416
06F5E:  MOVFF  3E6,415
06F62:  CALL   6294
06F66:  MOVLW  3F
06F68:  MOVWF  FF6
06F6A:  MOVLW  05
06F6C:  MOVWF  FF7
06F6E:  MOVLW  00
06F70:  MOVWF  FF8
06F72:  MOVLW  08
06F74:  MOVLB  4
06F76:  MOVWF  x19
06F78:  MOVLB  0
06F7A:  CALL   140E
06F7E:  MOVFF  3D5,4A4
06F82:  MOVLW  37
06F84:  MOVLB  4
06F86:  MOVWF  xA5
06F88:  MOVLB  0
06F8A:  CALL   1A16
06F8E:  MOVFF  3D4,4A4
06F92:  MOVLW  37
06F94:  MOVLB  4
06F96:  MOVWF  xA5
06F98:  MOVLB  0
06F9A:  CALL   1A16
06F9E:  MOVFF  3D3,4A4
06FA2:  MOVLW  37
06FA4:  MOVLB  4
06FA6:  MOVWF  xA5
06FA8:  MOVLB  0
06FAA:  CALL   1A16
06FAE:  MOVFF  3D2,4A4
06FB2:  MOVLW  37
06FB4:  MOVLB  4
06FB6:  MOVWF  xA5
06FB8:  MOVLB  0
06FBA:  CALL   1A16
06FBE:  MOVLW  4C
06FC0:  MOVWF  FF6
06FC2:  MOVLW  05
06FC4:  MOVWF  FF7
06FC6:  MOVLW  00
06FC8:  MOVWF  FF8
06FCA:  MOVLW  03
06FCC:  MOVLB  4
06FCE:  MOVWF  x19
06FD0:  MOVLB  0
06FD2:  CALL   140E
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
06FD6:  MOVLW  04
06FD8:  MOVLB  3
06FDA:  ADDWF  xD2,W
06FDC:  MOVLB  4
06FDE:  MOVWF  x15
06FE0:  MOVLW  00
06FE2:  MOVLB  3
06FE4:  ADDWFC xD3,W
06FE6:  MOVLB  4
06FE8:  MOVWF  x16
06FEA:  MOVLW  00
06FEC:  MOVLB  3
06FEE:  ADDWFC xD4,W
06FF0:  MOVLB  4
06FF2:  MOVWF  x17
06FF4:  MOVLW  00
06FF6:  MOVLB  3
06FF8:  ADDWFC xD5,W
06FFA:  MOVLB  4
06FFC:  MOVWF  x18
06FFE:  MOVLW  50
07000:  MOVWF  FF6
07002:  MOVLW  05
07004:  MOVWF  FF7
07006:  MOVLW  00
07008:  MOVWF  FF8
0700A:  MOVLW  0C
0700C:  MOVWF  x19
0700E:  MOVLB  0
07010:  CALL   140E
07014:  MOVFF  3EA,419
07018:  MOVLW  18
0701A:  MOVLB  4
0701C:  MOVWF  x1A
0701E:  MOVLB  0
07020:  CALL   608E
07024:  MOVLW  5E
07026:  MOVWF  FF6
07028:  MOVLW  05
0702A:  MOVWF  FF7
0702C:  MOVLW  00
0702E:  MOVWF  FF8
07030:  MOVLW  09
07032:  MOVLB  4
07034:  MOVWF  x19
07036:  MOVLB  0
07038:  CALL   140E
0703C:  MOVFF  418,4A4
07040:  MOVLW  37
07042:  MOVLB  4
07044:  MOVWF  xA5
07046:  MOVLB  0
07048:  CALL   1A16
0704C:  MOVFF  417,4A4
07050:  MOVLW  37
07052:  MOVLB  4
07054:  MOVWF  xA5
07056:  MOVLB  0
07058:  CALL   1A16
0705C:  MOVFF  416,4A4
07060:  MOVLW  37
07062:  MOVLB  4
07064:  MOVWF  xA5
07066:  MOVLB  0
07068:  CALL   1A16
0706C:  MOVFF  415,4A4
07070:  MOVLW  37
07072:  MOVLB  4
07074:  MOVWF  xA5
07076:  MOVLB  0
07078:  CALL   1A16
0707C:  MOVLW  6C
0707E:  MOVWF  FF6
07080:  MOVLW  05
07082:  MOVWF  FF7
07084:  MOVLW  00
07086:  MOVWF  FF8
07088:  MOVLW  05
0708A:  MOVLB  4
0708C:  MOVWF  x19
0708E:  MOVLB  0
07090:  CALL   140E
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
07094:  MOVLB  3
07096:  MOVF   xD2,W
07098:  MOVWF  xEB
0709A:  MOVLW  10
0709C:  ADDWF  xD3,W
0709E:  MOVWF  xEC
070A0:  MOVLW  00
070A2:  ADDWFC xD4,W
070A4:  MOVWF  xED
070A6:  MOVLW  00
070A8:  ADDWFC xD5,W
070AA:  MOVWF  xEE
070AC:  MOVFF  3D9,3F2
070B0:  MOVFF  3D8,3F1
070B4:  MOVFF  3D7,3F0
070B8:  MOVFF  3D6,3EF
070BC:  MOVF   xEB,W
070BE:  SUBWF  xEF,W
070C0:  MOVWF  xF3
070C2:  MOVF   xEC,W
070C4:  SUBWFB xF0,W
070C6:  MOVWF  xF4
070C8:  MOVF   xED,W
070CA:  SUBWFB xF1,W
070CC:  MOVWF  xF5
070CE:  MOVF   xEE,W
070D0:  SUBWFB xF2,W
070D2:  MOVWF  xF6
070D4:  MOVF   xE6,W
070D6:  ADDWF  xEB,W
070D8:  MOVWF  xF7
070DA:  MOVF   xE7,W
070DC:  ADDWFC xEC,W
070DE:  MOVWF  xF8
070E0:  MOVF   xE8,W
070E2:  ADDWFC xED,W
070E4:  MOVWF  xF9
070E6:  MOVF   xE9,W
070E8:  ADDWFC xEE,W
070EA:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
070EC:  MOVF   xDE,W
070EE:  ADDWF  xE6,W
070F0:  MOVLB  4
070F2:  MOVWF  x15
070F4:  MOVLB  3
070F6:  MOVF   xDF,W
070F8:  ADDWFC xE7,W
070FA:  MOVLB  4
070FC:  MOVWF  x16
070FE:  MOVLB  3
07100:  MOVF   xE0,W
07102:  ADDWFC xE8,W
07104:  MOVLB  4
07106:  MOVWF  x17
07108:  MOVLB  3
0710A:  MOVF   xE1,W
0710C:  ADDWFC xE9,W
0710E:  MOVLB  4
07110:  MOVWF  x18
07112:  MOVLB  3
07114:  MOVF   xF6,W
07116:  MOVLB  4
07118:  SUBWF  x18,W
0711A:  BTFSC  FD8.0
0711C:  BRA    7124
0711E:  MOVLB  0
07120:  GOTO   7244
07124:  MOVLB  0
07126:  BTFSS  FD8.2
07128:  GOTO   7174
0712C:  MOVLB  3
0712E:  MOVF   xF5,W
07130:  MOVLB  4
07132:  SUBWF  x17,W
07134:  BTFSC  FD8.0
07136:  BRA    713E
07138:  MOVLB  0
0713A:  GOTO   7244
0713E:  MOVLB  0
07140:  BTFSS  FD8.2
07142:  GOTO   7174
07146:  MOVLB  3
07148:  MOVF   xF4,W
0714A:  MOVLB  4
0714C:  SUBWF  x16,W
0714E:  BTFSC  FD8.0
07150:  BRA    7158
07152:  MOVLB  0
07154:  GOTO   7244
07158:  MOVLB  0
0715A:  BTFSS  FD8.2
0715C:  GOTO   7174
07160:  MOVLB  4
07162:  MOVF   x15,W
07164:  MOVLB  3
07166:  SUBWF  xF3,W
07168:  BTFSS  FD8.0
0716A:  BRA    7172
0716C:  MOVLB  0
0716E:  GOTO   7244
07172:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
07174:  MOVLW  72
07176:  MOVWF  FF6
07178:  MOVLW  05
0717A:  MOVWF  FF7
0717C:  MOVLW  00
0717E:  MOVWF  FF8
07180:  CALL   13DE
....................             loop_count++;
07184:  MOVLB  3
07186:  INCF   xEA,F
....................             used_size = 0;
07188:  CLRF   xE9
0718A:  CLRF   xE8
0718C:  CLRF   xE7
0718E:  CLRF   xE6
....................             data_write_addr = data_region_start;
07190:  MOVFF  3EE,3FA
07194:  MOVFF  3ED,3F9
07198:  MOVFF  3EC,3F8
0719C:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
071A0:  MOVFF  3EE,3FE
071A4:  MOVFF  3ED,3FD
071A8:  MOVFF  3EC,3FC
071AC:  MOVFF  3EB,3FB
071B0:  MOVLB  0
....................             while (erase_ptr < data_region_end)
071B2:  MOVLB  3
071B4:  MOVF   xFE,W
071B6:  SUBWF  xF2,W
071B8:  BTFSC  FD8.0
071BA:  BRA    71C2
071BC:  MOVLB  0
071BE:  GOTO   7244
071C2:  MOVLB  0
071C4:  BTFSS  FD8.2
071C6:  GOTO   720C
071CA:  MOVLB  3
071CC:  MOVF   xFD,W
071CE:  SUBWF  xF1,W
071D0:  BTFSC  FD8.0
071D2:  BRA    71DA
071D4:  MOVLB  0
071D6:  GOTO   7244
071DA:  MOVLB  0
071DC:  BTFSS  FD8.2
071DE:  GOTO   720C
071E2:  MOVLB  3
071E4:  MOVF   xFC,W
071E6:  SUBWF  xF0,W
071E8:  BTFSC  FD8.0
071EA:  BRA    71F2
071EC:  MOVLB  0
071EE:  GOTO   7244
071F2:  MOVLB  0
071F4:  BTFSS  FD8.2
071F6:  GOTO   720C
071FA:  MOVLB  3
071FC:  MOVF   xEF,W
071FE:  SUBWF  xFB,W
07200:  BTFSS  FD8.0
07202:  BRA    720A
07204:  MOVLB  0
07206:  GOTO   7244
0720A:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
0720C:  MOVFF  E7,4E6
07210:  MOVFF  E6,4E5
07214:  MOVFF  E5,4E4
07218:  MOVFF  E4,4E3
0721C:  MOVFF  3FE,4EA
07220:  MOVFF  3FD,4E9
07224:  MOVFF  3FC,4E8
07228:  MOVFF  3FB,4E7
0722C:  CALL   29CA
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
07230:  MOVLW  10
07232:  MOVLB  3
07234:  ADDWF  xFC,F
07236:  MOVLW  00
07238:  ADDWFC xFD,F
0723A:  MOVLW  00
0723C:  ADDWFC xFE,F
0723E:  MOVLB  0
07240:  GOTO   71B2
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
07244:  MOVLB  3
07246:  CLRF   xFF
07248:  MOVF   xF8,W
0724A:  ANDLW  F0
0724C:  MOVLB  4
0724E:  MOVWF  x00
07250:  CLRF   x01
07252:  CLRF   x02
07254:  MOVLB  3
07256:  MOVF   xDE,W
07258:  ADDWF  xF7,W
0725A:  MOVLB  4
0725C:  MOVWF  x15
0725E:  MOVLB  3
07260:  MOVF   xDF,W
07262:  ADDWFC xF8,W
07264:  MOVLB  4
07266:  MOVWF  x16
07268:  MOVLB  3
0726A:  MOVF   xE0,W
0726C:  ADDWFC xF9,W
0726E:  MOVLB  4
07270:  MOVWF  x17
07272:  MOVLB  3
07274:  MOVF   xE1,W
07276:  ADDWFC xFA,W
07278:  MOVLB  4
0727A:  MOVWF  x18
0727C:  MOVLW  FF
0727E:  ADDWF  x15,F
07280:  MOVLW  0F
07282:  ADDWFC x16,F
07284:  MOVLW  00
07286:  ADDWFC x17,F
07288:  MOVLW  00
0728A:  ADDWFC x18,F
0728C:  CLRF   x03
0728E:  MOVF   x16,W
07290:  ANDLW  F0
07292:  MOVWF  x04
07294:  CLRF   x05
07296:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
07298:  MOVFF  402,40A
0729C:  MOVFF  401,409
072A0:  MOVFF  400,408
072A4:  MOVFF  3FF,407
072A8:  MOVLB  0
072AA:  MOVLB  4
072AC:  MOVF   x0A,W
072AE:  SUBWF  x06,W
072B0:  BTFSC  FD8.0
072B2:  BRA    72BA
072B4:  MOVLB  0
072B6:  GOTO   739E
072BA:  MOVLB  0
072BC:  BTFSS  FD8.2
072BE:  GOTO   7304
072C2:  MOVLB  4
072C4:  MOVF   x09,W
072C6:  SUBWF  x05,W
072C8:  BTFSC  FD8.0
072CA:  BRA    72D2
072CC:  MOVLB  0
072CE:  GOTO   739E
072D2:  MOVLB  0
072D4:  BTFSS  FD8.2
072D6:  GOTO   7304
072DA:  MOVLB  4
072DC:  MOVF   x08,W
072DE:  SUBWF  x04,W
072E0:  BTFSC  FD8.0
072E2:  BRA    72EA
072E4:  MOVLB  0
072E6:  GOTO   739E
072EA:  MOVLB  0
072EC:  BTFSS  FD8.2
072EE:  GOTO   7304
072F2:  MOVLB  4
072F4:  MOVF   x03,W
072F6:  SUBWF  x07,W
072F8:  BTFSS  FD8.0
072FA:  BRA    7302
072FC:  MOVLB  0
072FE:  GOTO   739E
07302:  MOVLB  0
07304:  MOVLB  4
07306:  MOVF   x0A,W
07308:  MOVLB  3
0730A:  SUBWF  xD9,W
0730C:  BTFSC  FD8.0
0730E:  BRA    7316
07310:  MOVLB  0
07312:  GOTO   739E
07316:  MOVLB  0
07318:  BTFSS  FD8.2
0731A:  GOTO   7366
0731E:  MOVLB  4
07320:  MOVF   x09,W
07322:  MOVLB  3
07324:  SUBWF  xD8,W
07326:  BTFSC  FD8.0
07328:  BRA    7330
0732A:  MOVLB  0
0732C:  GOTO   739E
07330:  MOVLB  0
07332:  BTFSS  FD8.2
07334:  GOTO   7366
07338:  MOVLB  4
0733A:  MOVF   x08,W
0733C:  MOVLB  3
0733E:  SUBWF  xD7,W
07340:  BTFSC  FD8.0
07342:  BRA    734A
07344:  MOVLB  0
07346:  GOTO   739E
0734A:  MOVLB  0
0734C:  BTFSS  FD8.2
0734E:  GOTO   7366
07352:  MOVLB  3
07354:  MOVF   xD6,W
07356:  MOVLB  4
07358:  SUBWF  x07,W
0735A:  BTFSS  FD8.0
0735C:  BRA    7364
0735E:  MOVLB  0
07360:  GOTO   739E
07364:  MOVLB  0
....................             subsector_4kByte_erase(smf, addr);
07366:  MOVFF  E7,4E6
0736A:  MOVFF  E6,4E5
0736E:  MOVFF  E5,4E4
07372:  MOVFF  E4,4E3
07376:  MOVFF  40A,4EA
0737A:  MOVFF  409,4E9
0737E:  MOVFF  408,4E8
07382:  MOVFF  407,4E7
07386:  CALL   29CA
0738A:  MOVLW  10
0738C:  MOVLB  4
0738E:  ADDWF  x08,F
07390:  MOVLW  00
07392:  ADDWFC x09,F
07394:  MOVLW  00
07396:  ADDWFC x0A,F
07398:  MOVLB  0
0739A:  GOTO   72AA
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
0739E:  MOVFF  3E1,40E
073A2:  MOVFF  3E0,40D
073A6:  MOVFF  3DF,40C
073AA:  MOVFF  3DE,40B
073AE:  MOVFF  3DD,412
073B2:  MOVFF  3DC,411
073B6:  MOVFF  3DB,410
073BA:  MOVFF  3DA,40F
....................         while (remaining > 0)
073BE:  MOVLB  4
073C0:  MOVF   x0B,F
073C2:  BTFSC  FD8.2
073C4:  BRA    73CC
073C6:  MOVLB  0
073C8:  GOTO   73FE
073CC:  MOVLB  0
073CE:  MOVLB  4
073D0:  MOVF   x0C,F
073D2:  BTFSC  FD8.2
073D4:  BRA    73DC
073D6:  MOVLB  0
073D8:  GOTO   73FE
073DC:  MOVLB  0
073DE:  MOVLB  4
073E0:  MOVF   x0D,F
073E2:  BTFSC  FD8.2
073E4:  BRA    73EC
073E6:  MOVLB  0
073E8:  GOTO   73FE
073EC:  MOVLB  0
073EE:  MOVLB  4
073F0:  MOVF   x0E,F
073F2:  BTFSS  FD8.2
073F4:  BRA    73FC
073F6:  MOVLB  0
073F8:  GOTO   7528
073FC:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
073FE:  MOVLB  4
07400:  MOVF   x0E,F
07402:  BTFSC  FD8.2
07404:  BRA    740C
07406:  MOVLB  0
07408:  GOTO   7440
0740C:  MOVLB  0
0740E:  MOVLB  4
07410:  MOVF   x0D,F
07412:  BTFSC  FD8.2
07414:  BRA    741C
07416:  MOVLB  0
07418:  GOTO   7440
0741C:  MOVLB  0
0741E:  MOVLB  4
07420:  MOVF   x0C,F
07422:  BTFSC  FD8.2
07424:  BRA    742C
07426:  MOVLB  0
07428:  GOTO   7440
0742C:  MOVLB  0
0742E:  MOVLB  4
07430:  MOVF   x0B,W
07432:  SUBLW  40
07434:  BTFSS  FD8.0
07436:  BRA    743E
07438:  MOVLB  0
0743A:  GOTO   7448
0743E:  MOVLB  0
07440:  CLRF   03
07442:  MOVLW  40
07444:  GOTO   7452
07448:  MOVFF  40C,03
0744C:  MOVLB  4
0744E:  MOVF   x0B,W
07450:  MOVLB  0
07452:  MOVLB  4
07454:  MOVWF  x13
07456:  MOVFF  03,414
0745A:  MOVLB  0
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
0745C:  MOVFF  E3,498
07460:  MOVFF  E2,497
07464:  MOVFF  E1,496
07468:  MOVFF  E0,495
0746C:  MOVFF  412,49C
07470:  MOVFF  411,49B
07474:  MOVFF  410,49A
07478:  MOVFF  40F,499
0747C:  MOVLW  03
0747E:  MOVLB  4
07480:  MOVWF  x9E
07482:  MOVLW  86
07484:  MOVWF  x9D
07486:  CLRF   xA2
07488:  CLRF   xA1
0748A:  MOVFF  414,4A0
0748E:  MOVFF  413,49F
07492:  MOVLB  0
07494:  CALL   17FE
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
07498:  MOVFF  E7,4E6
0749C:  MOVFF  E6,4E5
074A0:  MOVFF  E5,4E4
074A4:  MOVFF  E4,4E3
074A8:  MOVFF  3FA,4EA
074AC:  MOVFF  3F9,4E9
074B0:  MOVFF  3F8,4E8
074B4:  MOVFF  3F7,4E7
074B8:  MOVLW  03
074BA:  MOVLB  4
074BC:  MOVWF  xEC
074BE:  MOVLW  86
074C0:  MOVWF  xEB
074C2:  MOVFF  414,4EE
074C6:  MOVFF  413,4ED
074CA:  MOVLB  0
074CC:  CALL   2632
.................... 
....................             src_addr += chunk;
074D0:  MOVLB  4
074D2:  MOVF   x13,W
074D4:  ADDWF  x0F,F
074D6:  MOVF   x14,W
074D8:  ADDWFC x10,F
074DA:  MOVLW  00
074DC:  ADDWFC x11,F
074DE:  MOVLW  00
074E0:  ADDWFC x12,F
....................             data_write_addr += chunk;
074E2:  MOVF   x13,W
074E4:  MOVLB  3
074E6:  ADDWF  xF7,F
074E8:  MOVLB  4
074EA:  MOVF   x14,W
074EC:  MOVLB  3
074EE:  ADDWFC xF8,F
074F0:  MOVLW  00
074F2:  ADDWFC xF9,F
074F4:  MOVLW  00
074F6:  ADDWFC xFA,F
....................             used_size += chunk;
074F8:  MOVLB  4
074FA:  MOVF   x13,W
074FC:  MOVLB  3
074FE:  ADDWF  xE6,F
07500:  MOVLB  4
07502:  MOVF   x14,W
07504:  MOVLB  3
07506:  ADDWFC xE7,F
07508:  MOVLW  00
0750A:  ADDWFC xE8,F
0750C:  MOVLW  00
0750E:  ADDWFC xE9,F
....................             remaining -= chunk;
07510:  MOVLB  4
07512:  MOVF   x13,W
07514:  SUBWF  x0B,F
07516:  MOVF   x14,W
07518:  SUBWFB x0C,F
0751A:  MOVLW  00
0751C:  SUBWFB x0D,F
0751E:  MOVLW  00
07520:  SUBWFB x0E,F
07522:  MOVLB  0
07524:  GOTO   73BE
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
07528:  MOVLW  A8
0752A:  MOVWF  FF6
0752C:  MOVLW  05
0752E:  MOVWF  FF7
07530:  MOVLW  00
07532:  MOVWF  FF8
07534:  CALL   13DE
....................         subsector_4kByte_erase(smf, mis_start_address);
07538:  MOVFF  E7,4E6
0753C:  MOVFF  E6,4E5
07540:  MOVFF  E5,4E4
07544:  MOVFF  E4,4E3
07548:  MOVFF  3D5,4EA
0754C:  MOVFF  3D4,4E9
07550:  MOVFF  3D3,4E8
07554:  MOVFF  3D2,4E7
07558:  CALL   29CA
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
0755C:  MOVFF  3E9,419
07560:  MOVFF  3E8,418
07564:  MOVFF  3E7,417
07568:  MOVFF  3E6,416
0756C:  MOVLB  4
0756E:  CLRF   x17
07570:  CLRF   x18
07572:  CLRF   x19
07574:  MOVFF  E7,421
07578:  MOVFF  E6,420
0757C:  MOVFF  E5,41F
07580:  MOVFF  E4,41E
07584:  MOVFF  3D5,425
07588:  MOVFF  3D4,424
0758C:  MOVFF  3D3,423
07590:  MOVFF  3D2,422
07594:  MOVFF  416,426
07598:  MOVLB  0
0759A:  CALL   65AA
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
0759E:  MOVLW  01
075A0:  MOVLB  3
075A2:  ADDWF  xD2,W
075A4:  MOVLB  4
075A6:  MOVWF  x15
075A8:  MOVLW  00
075AA:  MOVLB  3
075AC:  ADDWFC xD3,W
075AE:  MOVLB  4
075B0:  MOVWF  x16
075B2:  MOVLW  00
075B4:  MOVLB  3
075B6:  ADDWFC xD4,W
075B8:  MOVLB  4
075BA:  MOVWF  x17
075BC:  MOVLW  00
075BE:  MOVLB  3
075C0:  ADDWFC xD5,W
075C2:  MOVLB  4
075C4:  MOVWF  x18
075C6:  MOVFF  3E7,41A
075CA:  MOVFF  3E8,41B
075CE:  MOVFF  3E9,41C
075D2:  CLRF   x1D
075D4:  CLRF   x1B
075D6:  CLRF   x1C
075D8:  CLRF   x1D
075DA:  MOVFF  E7,421
075DE:  MOVFF  E6,420
075E2:  MOVFF  E5,41F
075E6:  MOVFF  E4,41E
075EA:  MOVFF  418,425
075EE:  MOVFF  417,424
075F2:  MOVFF  416,423
075F6:  MOVFF  415,422
075FA:  MOVFF  41A,426
075FE:  MOVLB  0
07600:  CALL   65AA
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
07604:  MOVLW  02
07606:  MOVLB  3
07608:  ADDWF  xD2,W
0760A:  MOVLB  4
0760C:  MOVWF  x15
0760E:  MOVLW  00
07610:  MOVLB  3
07612:  ADDWFC xD3,W
07614:  MOVLB  4
07616:  MOVWF  x16
07618:  MOVLW  00
0761A:  MOVLB  3
0761C:  ADDWFC xD4,W
0761E:  MOVLB  4
07620:  MOVWF  x17
07622:  MOVLW  00
07624:  MOVLB  3
07626:  ADDWFC xD5,W
07628:  MOVLB  4
0762A:  MOVWF  x18
0762C:  MOVFF  3E8,41A
07630:  MOVFF  3E9,41B
07634:  CLRF   x1C
07636:  CLRF   x1D
07638:  CLRF   x1B
0763A:  CLRF   x1C
0763C:  CLRF   x1D
0763E:  MOVFF  E7,421
07642:  MOVFF  E6,420
07646:  MOVFF  E5,41F
0764A:  MOVFF  E4,41E
0764E:  MOVFF  418,425
07652:  MOVFF  417,424
07656:  MOVFF  416,423
0765A:  MOVFF  415,422
0765E:  MOVFF  41A,426
07662:  MOVLB  0
07664:  CALL   65AA
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
07668:  MOVLW  03
0766A:  MOVLB  3
0766C:  ADDWF  xD2,W
0766E:  MOVLB  4
07670:  MOVWF  x15
07672:  MOVLW  00
07674:  MOVLB  3
07676:  ADDWFC xD3,W
07678:  MOVLB  4
0767A:  MOVWF  x16
0767C:  MOVLW  00
0767E:  MOVLB  3
07680:  ADDWFC xD4,W
07682:  MOVLB  4
07684:  MOVWF  x17
07686:  MOVLW  00
07688:  MOVLB  3
0768A:  ADDWFC xD5,W
0768C:  MOVLB  4
0768E:  MOVWF  x18
07690:  MOVFF  3E9,41A
07694:  CLRF   x1B
07696:  CLRF   x1C
07698:  CLRF   x1D
0769A:  CLRF   x1B
0769C:  CLRF   x1C
0769E:  CLRF   x1D
076A0:  MOVFF  E7,421
076A4:  MOVFF  E6,420
076A8:  MOVFF  E5,41F
076AC:  MOVFF  E4,41E
076B0:  MOVFF  418,425
076B4:  MOVFF  417,424
076B8:  MOVFF  416,423
076BC:  MOVFF  415,422
076C0:  MOVFF  41A,426
076C4:  MOVLB  0
076C6:  CALL   65AA
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
076CA:  MOVLW  04
076CC:  MOVLB  3
076CE:  ADDWF  xD2,W
076D0:  MOVLB  4
076D2:  MOVWF  x15
076D4:  MOVLW  00
076D6:  MOVLB  3
076D8:  ADDWFC xD3,W
076DA:  MOVLB  4
076DC:  MOVWF  x16
076DE:  MOVLW  00
076E0:  MOVLB  3
076E2:  ADDWFC xD4,W
076E4:  MOVLB  4
076E6:  MOVWF  x17
076E8:  MOVLW  00
076EA:  MOVLB  3
076EC:  ADDWFC xD5,W
076EE:  MOVLB  4
076F0:  MOVWF  x18
076F2:  MOVFF  E7,421
076F6:  MOVFF  E6,420
076FA:  MOVFF  E5,41F
076FE:  MOVFF  E4,41E
07702:  MOVFF  418,425
07706:  MOVFF  417,424
0770A:  MOVFF  416,423
0770E:  MOVFF  415,422
07712:  MOVFF  3EA,426
07716:  MOVLB  0
07718:  CALL   65AA
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
0771C:  MOVLW  BC
0771E:  MOVWF  FF6
07720:  MOVLW  05
07722:  MOVWF  FF7
07724:  MOVLW  00
07726:  MOVWF  FF8
07728:  MOVLW  0C
0772A:  MOVLB  4
0772C:  MOVWF  x19
0772E:  MOVLB  0
07730:  CALL   140E
07734:  MOVLW  41
07736:  MOVWF  FE9
07738:  MOVFF  3E9,418
0773C:  MOVFF  3E8,417
07740:  MOVFF  3E7,416
07744:  MOVFF  3E6,415
07748:  GOTO   692E
0774C:  MOVLW  0D
0774E:  MOVLB  4
07750:  MOVWF  xE6
07752:  MOVLB  0
07754:  CALL   138C
07758:  MOVLW  0A
0775A:  MOVLB  4
0775C:  MOVWF  xE6
0775E:  MOVLB  0
07760:  CALL   138C
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
07764:  MOVLW  CE
07766:  MOVWF  FF6
07768:  MOVLW  05
0776A:  MOVWF  FF7
0776C:  MOVLW  00
0776E:  MOVWF  FF8
07770:  MOVLW  0D
07772:  MOVLB  4
07774:  MOVWF  x19
07776:  MOVLB  0
07778:  CALL   140E
0777C:  MOVFF  3EA,415
07780:  MOVLW  1B
07782:  MOVLB  4
07784:  MOVWF  x16
07786:  MOVLB  0
07788:  CALL   3B54
0778C:  MOVLW  DD
0778E:  MOVWF  FF6
07790:  MOVLW  05
07792:  MOVWF  FF7
07794:  MOVLW  00
07796:  MOVWF  FF8
07798:  MOVLW  04
0779A:  MOVLB  4
0779C:  MOVWF  x19
0779E:  MOVLB  0
077A0:  CALL   140E
077A4:  MOVLB  3
077A6:  INCF   xC6,F
077A8:  MOVLB  0
077AA:  GOTO   6ACE
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
077AE:  MOVLW  E2
077B0:  MOVWF  FF6
077B2:  MOVLW  05
077B4:  MOVWF  FF7
077B6:  MOVLW  00
077B8:  MOVWF  FF8
077BA:  CALL   13DE
....................     fprintf(PC, "____________________\r\n\r\n");
077BE:  MOVLW  FC
077C0:  MOVWF  FF6
077C2:  MOVLW  05
077C4:  MOVWF  FF7
077C6:  MOVLW  00
077C8:  MOVWF  FF8
077CA:  CALL   13DE
077CE:  GOTO   782C (RETURN)
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... #include "communication.c"
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #include "calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03318:  MOVLB  3
0331A:  MOVF   xA4,W
0331C:  MOVWF  FE9
0331E:  MOVF   xA5,W
03320:  MOVWF  FEA
03322:  MOVFF  FEF,3A7
03326:  MOVLW  01
03328:  MOVWF  xA8
0332A:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0332C:  MOVLB  3
0332E:  MOVF   xA6,W
03330:  SUBWF  xA8,W
03332:  BTFSS  FD8.0
03334:  BRA    333C
03336:  MOVLB  0
03338:  GOTO   3358
0333C:  MOVLB  0
....................       crc ^= frame[i++];
0333E:  MOVLB  3
03340:  MOVF   xA8,W
03342:  INCF   xA8,F
03344:  ADDWF  xA4,W
03346:  MOVWF  FE9
03348:  MOVLW  00
0334A:  ADDWFC xA5,W
0334C:  MOVWF  FEA
0334E:  MOVF   FEF,W
03350:  XORWF  xA7,F
03352:  MOVLB  0
03354:  GOTO   332C
....................    return crc;
03358:  MOVLB  3
0335A:  MOVF   xA7,W
0335C:  MOVWF  01
0335E:  MOVLB  0
03360:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
03506:  MOVLB  3
03508:  CLRF   x8B
0350A:  CLRF   x8C
0350C:  CLRF   x8D
0350E:  CLRF   x8E
03510:  CLRF   x8F
03512:  CLRF   x90
03514:  CLRF   x91
03516:  CLRF   x92
03518:  CLRF   x93
0351A:  CLRF   x94
0351C:  CLRF   x95
0351E:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
03520:  MOVLW  16
03522:  MOVWF  FF6
03524:  MOVLW  06
03526:  MOVWF  FF7
03528:  MOVLW  00
0352A:  MOVWF  FF8
0352C:  MOVLB  0
0352E:  CALL   13DE
....................    fprintf(PC, "\t[BOSS] >>> ");
03532:  MOVLW  36
03534:  MOVWF  FF6
03536:  MOVLW  06
03538:  MOVWF  FF7
0353A:  MOVLW  00
0353C:  MOVWF  FF8
0353E:  CALL   13DE
....................    for (int8 i = 0; i < receive_signal_size; i++)
03542:  MOVLB  3
03544:  CLRF   x97
03546:  MOVLB  0
03548:  MOVLB  3
0354A:  MOVF   x8A,W
0354C:  SUBWF  x97,W
0354E:  BTFSS  FD8.0
03550:  BRA    3558
03552:  MOVLB  0
03554:  GOTO   3592
03558:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
0355A:  MOVLB  3
0355C:  MOVF   x97,W
0355E:  ADDWF  x88,W
03560:  MOVWF  FE9
03562:  MOVLW  00
03564:  ADDWFC x89,W
03566:  MOVWF  FEA
03568:  MOVFF  FEF,39E
0356C:  MOVFF  39E,4A4
03570:  MOVLW  37
03572:  MOVLB  4
03574:  MOVWF  xA5
03576:  MOVLB  0
03578:  CALL   1A16
0357C:  MOVLW  20
0357E:  MOVLB  4
03580:  MOVWF  xE6
03582:  MOVLB  0
03584:  CALL   138C
03588:  MOVLB  3
0358A:  INCF   x97,F
0358C:  MOVLB  0
0358E:  GOTO   3548
....................    fprintf(PC, "\r\n");
03592:  MOVLW  0D
03594:  MOVLB  4
03596:  MOVWF  xE6
03598:  MOVLB  0
0359A:  CALL   138C
0359E:  MOVLW  0A
035A0:  MOVLB  4
035A2:  MOVWF  xE6
035A4:  MOVLB  0
035A6:  CALL   138C
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
035AA:  MOVFF  389,39F
035AE:  MOVFF  388,39E
035B2:  MOVFF  38A,3A0
035B6:  GOTO   31B4
035BA:  MOVFF  01,398
....................    if (frame_start_position == -1)
035BE:  MOVLB  3
035C0:  MOVF   x98,W
035C2:  SUBLW  FF
035C4:  BTFSC  FD8.2
035C6:  BRA    35CE
035C8:  MOVLB  0
035CA:  GOTO   35DC
035CE:  MOVLB  0
....................       return command;
035D0:  MOVLW  8B
035D2:  MOVWF  01
035D4:  MOVLW  03
035D6:  MOVWF  02
035D8:  GOTO   36FE
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
035DC:  MOVLB  3
035DE:  MOVF   x98,W
035E0:  ADDWF  x88,W
035E2:  MOVWF  01
035E4:  MOVLW  00
035E6:  ADDWFC x89,W
035E8:  MOVWF  03
035EA:  MOVF   01,W
035EC:  MOVWF  x99
035EE:  MOVFF  03,39A
035F2:  MOVF   x99,W
035F4:  MOVWF  FE9
035F6:  MOVF   x9A,W
035F8:  MOVWF  FEA
035FA:  MOVF   FEF,W
035FC:  ANDLW  0F
035FE:  MOVWF  x9B
03600:  MOVFF  39B,39E
03604:  MOVLB  0
03606:  GOTO   325C
0360A:  MOVFF  01,39C
....................    if (content_size == -1)
0360E:  MOVLB  3
03610:  MOVF   x9C,W
03612:  SUBLW  FF
03614:  BTFSC  FD8.2
03616:  BRA    361E
03618:  MOVLB  0
0361A:  GOTO   362C
0361E:  MOVLB  0
....................       return command;
03620:  MOVLW  8B
03622:  MOVWF  01
03624:  MOVLW  03
03626:  MOVWF  02
03628:  GOTO   36FE
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
0362C:  MOVLB  3
0362E:  MOVF   x98,W
03630:  SUBWF  x8A,W
03632:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
03634:  MOVFF  39A,39F
03638:  MOVFF  399,39E
0363C:  MOVFF  39D,3A0
03640:  MOVLB  0
03642:  GOTO   3362
03646:  MOVF   01,F
03648:  BTFSS  FD8.2
0364A:  GOTO   365A
....................       return command;
0364E:  MOVLW  8B
03650:  MOVWF  01
03652:  MOVLW  03
03654:  MOVWF  02
03656:  GOTO   36FE
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
0365A:  MOVLB  3
0365C:  MOVF   x99,W
0365E:  MOVWF  FE9
03660:  MOVF   x9A,W
03662:  MOVWF  FEA
03664:  MOVF   FEF,W
03666:  ANDLW  F0
03668:  MOVWF  00
0366A:  SWAPF  00,W
0366C:  MOVWF  x9E
0366E:  MOVLW  0F
03670:  ANDWF  x9E,F
03672:  MOVFF  39E,39F
03676:  MOVLB  0
03678:  GOTO   344C
0367C:  MOVF   01,F
0367E:  BTFSS  FD8.2
03680:  GOTO   3690
....................       return command;
03684:  MOVLW  8B
03686:  MOVWF  01
03688:  MOVLW  03
0368A:  MOVWF  02
0368C:  GOTO   36FE
.................... 
....................    command.frame_id = frame_id;
03690:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
03694:  MOVLW  01
03696:  MOVLB  3
03698:  ADDWF  x99,W
0369A:  MOVWF  01
0369C:  MOVLW  00
0369E:  ADDWFC x9A,W
036A0:  MOVWF  03
036A2:  MOVF   01,W
036A4:  MOVWF  x9E
036A6:  MOVFF  03,39F
036AA:  MOVLW  02
036AC:  SUBWF  x9D,W
036AE:  MOVWF  xA0
036B0:  MOVLW  03
036B2:  MOVWF  FEA
036B4:  MOVLW  8E
036B6:  MOVWF  FE9
036B8:  MOVFF  39F,FE2
036BC:  MOVFF  39E,FE1
036C0:  MOVF   xA0,W
036C2:  MOVWF  01
036C4:  BTFSS  FD8.2
036C6:  BRA    36CE
036C8:  MOVLB  0
036CA:  GOTO   36DA
036CE:  MOVLB  0
036D0:  MOVFF  FE6,FEE
036D4:  DECFSZ 01,F
036D6:  GOTO   36D0
....................    command.size = receive_frame_size-2;
036DA:  MOVLW  02
036DC:  MOVLB  3
036DE:  SUBWF  x9D,W
036E0:  MOVWF  x8C
....................    command.is_exist = TRUE;
036E2:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
036E4:  MOVLW  44
036E6:  MOVWF  FF6
036E8:  MOVLW  06
036EA:  MOVWF  FF7
036EC:  MOVLW  00
036EE:  MOVWF  FF8
036F0:  MOVLB  0
036F2:  CALL   13DE
....................    return command;
036F6:  MOVLW  8B
036F8:  MOVWF  01
036FA:  MOVLW  03
036FC:  MOVWF  02
036FE:  GOTO   8110 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
031B4:  MOVLB  3
031B6:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
031B8:  CLRF   xA1
031BA:  MOVLB  0
031BC:  MOVLW  01
031BE:  MOVLB  3
031C0:  SUBWF  xA0,W
031C2:  SUBWF  xA1,W
031C4:  BTFSS  FD8.0
031C6:  BRA    31CE
031C8:  MOVLB  0
031CA:  GOTO   3206
031CE:  MOVLB  0
....................       if(receive_signal[i] == SFD)
031D0:  MOVLB  3
031D2:  MOVF   xA1,W
031D4:  ADDWF  x9E,W
031D6:  MOVWF  FE9
031D8:  MOVLW  00
031DA:  ADDWFC x9F,W
031DC:  MOVWF  FEA
031DE:  MOVF   FEF,W
031E0:  SUBLW  AA
031E2:  BTFSC  FD8.2
031E4:  BRA    31EC
031E6:  MOVLB  0
031E8:  GOTO   31FC
031EC:  MOVLB  0
....................          return i+1;
031EE:  MOVLW  01
031F0:  MOVLB  3
031F2:  ADDWF  xA1,W
031F4:  MOVWF  01
031F6:  MOVLB  0
031F8:  GOTO   3258
031FC:  MOVLB  3
031FE:  INCF   xA1,F
03200:  MOVLB  0
03202:  GOTO   31BC
....................    if (receive_signal[i] == SFD)
03206:  MOVLB  3
03208:  MOVF   xA1,W
0320A:  ADDWF  x9E,W
0320C:  MOVWF  FE9
0320E:  MOVLW  00
03210:  ADDWFC x9F,W
03212:  MOVWF  FEA
03214:  MOVF   FEF,W
03216:  SUBLW  AA
03218:  BTFSC  FD8.2
0321A:  BRA    3222
0321C:  MOVLB  0
0321E:  GOTO   3240
03222:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03224:  MOVLW  60
03226:  MOVWF  FF6
03228:  MOVLW  06
0322A:  MOVWF  FF7
0322C:  MOVLW  00
0322E:  MOVWF  FF8
03230:  CALL   13DE
....................       return -1;
03234:  MOVLW  FF
03236:  MOVWF  01
03238:  GOTO   3258
....................    }
0323C:  GOTO   3258
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03240:  MOVLW  76
03242:  MOVWF  FF6
03244:  MOVLW  06
03246:  MOVWF  FF7
03248:  MOVLW  00
0324A:  MOVWF  FF8
0324C:  CALL   13DE
....................       return -1;
03250:  MOVLW  FF
03252:  MOVWF  01
03254:  GOTO   3258
....................    }
03258:  GOTO   35BA (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
0325C:  MOVLB  3
0325E:  CLRF   x9F
03260:  MOVLB  0
03262:  MOVLB  3
03264:  MOVF   x9F,W
03266:  SUBLW  02
03268:  BTFSC  FD8.0
0326A:  BRA    3272
0326C:  MOVLB  0
0326E:  GOTO   32D0
03272:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03274:  BCF    FD8.0
03276:  MOVLB  3
03278:  RLCF   x9F,W
0327A:  CLRF   xA1
0327C:  MOVWF  xA0
0327E:  MOVLW  E8
03280:  ADDWF  xA0,W
03282:  MOVWF  FE9
03284:  MOVLW  00
03286:  ADDWFC xA1,W
03288:  MOVWF  FEA
0328A:  MOVF   FEF,W
0328C:  SUBWF  x9E,W
0328E:  BTFSC  FD8.2
03290:  BRA    3298
03292:  MOVLB  0
03294:  GOTO   32C6
03298:  MOVLB  0
....................          return frame_ids[i].length;
0329A:  BCF    FD8.0
0329C:  MOVLB  3
0329E:  RLCF   x9F,W
032A0:  CLRF   xA1
032A2:  MOVWF  xA0
032A4:  MOVLW  01
032A6:  ADDWF  xA0,W
032A8:  MOVWF  01
032AA:  MOVLW  00
032AC:  ADDWFC xA1,W
032AE:  MOVWF  03
032B0:  MOVF   01,W
032B2:  ADDLW  E8
032B4:  MOVWF  FE9
032B6:  MOVLW  00
032B8:  ADDWFC 03,W
032BA:  MOVWF  FEA
032BC:  MOVF   FEF,W
032BE:  MOVWF  01
032C0:  MOVLB  0
032C2:  GOTO   3314
032C6:  MOVLB  3
032C8:  INCF   x9F,F
032CA:  MOVLB  0
032CC:  GOTO   3262
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
032D0:  MOVLW  88
032D2:  MOVWF  FF6
032D4:  MOVLW  06
032D6:  MOVWF  FF7
032D8:  MOVLW  00
032DA:  MOVWF  FF8
032DC:  MOVLW  1F
032DE:  MOVLB  4
032E0:  MOVWF  x19
032E2:  MOVLB  0
032E4:  CALL   140E
032E8:  MOVFF  39E,4A4
032EC:  MOVLW  37
032EE:  MOVLB  4
032F0:  MOVWF  xA5
032F2:  MOVLB  0
032F4:  CALL   1A16
032F8:  MOVLW  0D
032FA:  MOVLB  4
032FC:  MOVWF  xE6
032FE:  MOVLB  0
03300:  CALL   138C
03304:  MOVLW  0A
03306:  MOVLB  4
03308:  MOVWF  xE6
0330A:  MOVLB  0
0330C:  CALL   138C
....................    return -1;
03310:  MOVLW  FF
03312:  MOVWF  01
03314:  GOTO   360A (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03362:  MOVLW  01
03364:  MOVLB  3
03366:  SUBWF  xA0,W
03368:  ADDWF  x9E,W
0336A:  MOVWF  FE9
0336C:  MOVLW  00
0336E:  ADDWFC x9F,W
03370:  MOVWF  FEA
03372:  MOVFF  FEF,3A1
03376:  MOVLW  01
03378:  SUBWF  xA0,W
0337A:  MOVWF  xA3
0337C:  MOVFF  39F,3A5
03380:  MOVFF  39E,3A4
03384:  MOVFF  3A3,3A6
03388:  MOVLB  0
0338A:  CALL   3318
0338E:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03392:  MOVLB  3
03394:  MOVF   xA2,W
03396:  SUBWF  xA1,W
03398:  BTFSC  FD8.2
0339A:  BRA    33A2
0339C:  MOVLB  0
0339E:  GOTO   33B0
033A2:  MOVLB  0
....................       return TRUE;
033A4:  MOVLW  01
033A6:  MOVWF  01
033A8:  GOTO   3448
033AC:  GOTO   3448
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
033B0:  MOVLW  AC
033B2:  MOVWF  FF6
033B4:  MOVLW  06
033B6:  MOVWF  FF7
033B8:  MOVLW  00
033BA:  MOVWF  FF8
033BC:  CALL   13DE
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
033C0:  MOVLW  BE
033C2:  MOVWF  FF6
033C4:  MOVLW  06
033C6:  MOVWF  FF7
033C8:  MOVLW  00
033CA:  MOVWF  FF8
033CC:  MOVLW  13
033CE:  MOVLB  4
033D0:  MOVWF  x19
033D2:  MOVLB  0
033D4:  CALL   140E
033D8:  MOVFF  3A1,4A4
033DC:  MOVLW  37
033DE:  MOVLB  4
033E0:  MOVWF  xA5
033E2:  MOVLB  0
033E4:  CALL   1A16
033E8:  MOVLW  0D
033EA:  MOVLB  4
033EC:  MOVWF  xE6
033EE:  MOVLB  0
033F0:  CALL   138C
033F4:  MOVLW  0A
033F6:  MOVLB  4
033F8:  MOVWF  xE6
033FA:  MOVLB  0
033FC:  CALL   138C
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03400:  MOVLW  D6
03402:  MOVWF  FF6
03404:  MOVLW  06
03406:  MOVWF  FF7
03408:  MOVLW  00
0340A:  MOVWF  FF8
0340C:  MOVLW  13
0340E:  MOVLB  4
03410:  MOVWF  x19
03412:  MOVLB  0
03414:  CALL   140E
03418:  MOVFF  3A2,4A4
0341C:  MOVLW  37
0341E:  MOVLB  4
03420:  MOVWF  xA5
03422:  MOVLB  0
03424:  CALL   1A16
03428:  MOVLW  0D
0342A:  MOVLB  4
0342C:  MOVWF  xE6
0342E:  MOVLB  0
03430:  CALL   138C
03434:  MOVLW  0A
03436:  MOVLB  4
03438:  MOVWF  xE6
0343A:  MOVLB  0
0343C:  CALL   138C
....................       return FALSE;
03440:  MOVLW  00
03442:  MOVWF  01
03444:  GOTO   3448
....................    }
03448:  GOTO   3646 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
0344C:  MOVLB  3
0344E:  MOVF   x9F,W
03450:  SUBLW  0C
03452:  BTFSC  FD8.2
03454:  BRA    345C
03456:  MOVLB  0
03458:  GOTO   346A
0345C:  MOVLB  0
....................       return TRUE;
0345E:  MOVLW  01
03460:  MOVWF  01
03462:  GOTO   3502
03466:  GOTO   3502
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
0346A:  MOVLW  EE
0346C:  MOVWF  FF6
0346E:  MOVLW  06
03470:  MOVWF  FF7
03472:  MOVLW  00
03474:  MOVWF  FF8
03476:  CALL   13DE
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
0347A:  MOVLW  10
0347C:  MOVWF  FF6
0347E:  MOVLW  07
03480:  MOVWF  FF7
03482:  MOVLW  00
03484:  MOVWF  FF8
03486:  MOVLW  13
03488:  MOVLB  4
0348A:  MOVWF  x19
0348C:  MOVLB  0
0348E:  CALL   140E
03492:  MOVFF  39F,4A4
03496:  MOVLW  37
03498:  MOVLB  4
0349A:  MOVWF  xA5
0349C:  MOVLB  0
0349E:  CALL   1A16
034A2:  MOVLW  0D
034A4:  MOVLB  4
034A6:  MOVWF  xE6
034A8:  MOVLB  0
034AA:  CALL   138C
034AE:  MOVLW  0A
034B0:  MOVLB  4
034B2:  MOVWF  xE6
034B4:  MOVLB  0
034B6:  CALL   138C
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
034BA:  MOVLW  28
034BC:  MOVWF  FF6
034BE:  MOVLW  07
034C0:  MOVWF  FF7
034C2:  MOVLW  00
034C4:  MOVWF  FF8
034C6:  MOVLW  13
034C8:  MOVLB  4
034CA:  MOVWF  x19
034CC:  MOVLB  0
034CE:  CALL   140E
034D2:  MOVLW  0C
034D4:  MOVLB  4
034D6:  MOVWF  xA4
034D8:  MOVLW  37
034DA:  MOVWF  xA5
034DC:  MOVLB  0
034DE:  CALL   1A16
034E2:  MOVLW  0D
034E4:  MOVLB  4
034E6:  MOVWF  xE6
034E8:  MOVLB  0
034EA:  CALL   138C
034EE:  MOVLW  0A
034F0:  MOVLB  4
034F2:  MOVWF  xE6
034F4:  MOVLB  0
034F6:  CALL   138C
....................       return FALSE;  
034FA:  MOVLW  00
034FC:  MOVWF  01
034FE:  GOTO   3502
....................    }
03502:  GOTO   367C (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0382E:  MOVLW  AA
03830:  MOVLB  3
03832:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
03834:  MOVF   x86,W
03836:  IORLW  50
03838:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
0383A:  MOVLW  03
0383C:  MOVWF  FEA
0383E:  MOVLW  8C
03840:  MOVWF  FE9
03842:  MOVFF  388,FE2
03846:  MOVFF  387,FE1
0384A:  MOVF   x89,W
0384C:  MOVWF  01
0384E:  BTFSS  FD8.2
03850:  BRA    3858
03852:  MOVLB  0
03854:  GOTO   3864
03858:  MOVLB  0
0385A:  MOVFF  FE6,FEE
0385E:  DECFSZ 01,F
03860:  GOTO   385A
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
03864:  MOVLW  02
03866:  MOVLB  3
03868:  ADDWF  x89,W
0386A:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
0386C:  CLRF   03
0386E:  MOVF   x9A,W
03870:  ADDLW  8A
03872:  MOVWF  01
03874:  MOVLW  03
03876:  ADDWFC 03,F
03878:  MOVF   01,W
0387A:  MOVWF  x9C
0387C:  MOVFF  03,39D
03880:  MOVLW  01
03882:  SUBWF  x9A,W
03884:  MOVWF  x9E
03886:  MOVLW  03
03888:  MOVWF  xA5
0388A:  MOVLW  8B
0388C:  MOVWF  xA4
0388E:  MOVFF  39E,3A6
03892:  MOVLB  0
03894:  CALL   3318
03898:  MOVFF  39D,FEA
0389C:  MOVFF  39C,FE9
038A0:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
038A4:  MOVLW  01
038A6:  MOVLB  3
038A8:  ADDWF  x9A,W
038AA:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
038AC:  MOVLW  03
038AE:  MOVWF  x9D
038B0:  MOVLW  8A
038B2:  MOVWF  x9C
038B4:  MOVFF  39B,39E
038B8:  MOVLB  0
038BA:  GOTO   3776
038BE:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
03776:  MOVLB  3
03778:  CLRF   x9F
0377A:  MOVLB  0
0377C:  MOVLB  3
0377E:  MOVF   x9E,W
03780:  SUBWF  x9F,W
03782:  BTFSS  FD8.0
03784:  BRA    378C
03786:  MOVLB  0
03788:  GOTO   37B2
0378C:  MOVLB  0
....................       fputc(data[i], BOSS);
0378E:  MOVLB  3
03790:  MOVF   x9F,W
03792:  ADDWF  x9C,W
03794:  MOVWF  FE9
03796:  MOVLW  00
03798:  ADDWFC x9D,W
0379A:  MOVWF  FEA
0379C:  MOVFF  FEF,3A1
037A0:  MOVF   xA1,W
037A2:  MOVLB  0
037A4:  GOTO   3766
037A8:  MOVLB  3
037AA:  INCF   x9F,F
037AC:  MOVLB  0
037AE:  GOTO   377C
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
037B2:  MOVLW  40
037B4:  MOVWF  FF6
037B6:  MOVLW  07
037B8:  MOVWF  FF7
037BA:  MOVLW  00
037BC:  MOVWF  FF8
037BE:  CALL   13DE
....................    for(int i = 0; i < data_size; i++)
037C2:  MOVLB  3
037C4:  CLRF   xA0
037C6:  MOVLB  0
037C8:  MOVLB  3
037CA:  MOVF   x9E,W
037CC:  SUBWF  xA0,W
037CE:  BTFSS  FD8.0
037D0:  BRA    37D8
037D2:  MOVLB  0
037D4:  GOTO   3812
037D8:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
037DA:  MOVLB  3
037DC:  MOVF   xA0,W
037DE:  ADDWF  x9C,W
037E0:  MOVWF  FE9
037E2:  MOVLW  00
037E4:  ADDWFC x9D,W
037E6:  MOVWF  FEA
037E8:  MOVFF  FEF,3A1
037EC:  MOVFF  3A1,4A4
037F0:  MOVLW  37
037F2:  MOVLB  4
037F4:  MOVWF  xA5
037F6:  MOVLB  0
037F8:  CALL   1A16
037FC:  MOVLW  20
037FE:  MOVLB  4
03800:  MOVWF  xE6
03802:  MOVLB  0
03804:  CALL   138C
03808:  MOVLB  3
0380A:  INCF   xA0,F
0380C:  MOVLB  0
0380E:  GOTO   37C8
....................    fprintf(PC, "\r\n");
03812:  MOVLW  0D
03814:  MOVLB  4
03816:  MOVWF  xE6
03818:  MOVLB  0
0381A:  CALL   138C
0381E:  MOVLW  0A
03820:  MOVLB  4
03822:  MOVWF  xE6
03824:  MOVLB  0
03826:  CALL   138C
0382A:  GOTO   38BE (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... #include "communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
038C0:  MOVLW  0F
038C2:  MOVLB  3
038C4:  MOVWF  x86
038C6:  CLRF   x88
038C8:  CLRF   x87
038CA:  CLRF   x89
038CC:  MOVLB  0
038CE:  CALL   382E
038D2:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0601E:  MOVLW  03
06020:  MOVLB  3
06022:  MOVWF  x86
06024:  CLRF   x88
06026:  MOVLW  1D
06028:  MOVWF  x87
0602A:  MOVLW  04
0602C:  MOVWF  x89
0602E:  MOVLB  0
06030:  CALL   382E
06034:  GOTO   605C (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... #separate
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode_mission.c"
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... #separate
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode_mission.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... #include "ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
0149A:  MOVLW  54
0149C:  MOVWF  FF6
0149E:  MOVLW  08
014A0:  MOVWF  FF7
014A2:  MOVLW  00
014A4:  MOVWF  FF8
014A6:  CALL   13DE
....................     // Set default register values
.................... 
....................     fprintf(PC, "\tComplete\r\n");
014AA:  MOVLW  68
014AC:  MOVWF  FF6
014AE:  MOVLW  08
014B0:  MOVWF  FF7
014B2:  MOVLW  00
014B4:  MOVWF  FF8
014B6:  CALL   13DE
014BA:  GOTO   80B0 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
03DF8:  MOVLB  3
03DFA:  BCF    x9E.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
03DFC:  BCF    x9E.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
03DFE:  BCF    x9E.2
....................     cmd.fields.reserved3 = 0;
03E00:  BCF    x9E.3
....................     cmd.fields.coding = 1; // Two's complement
03E02:  BSF    x9E.4
....................     cmd.fields.range = 1; // Normal mode
03E04:  BSF    x9E.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
03E06:  BCF    x9E.6
....................     cmd.fields.shadow = 0; // Direct access
03E08:  BCF    x9E.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
03E0A:  BSF    x9F.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
03E0C:  BSF    x9F.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
03E0E:  MOVF   x9D,W
03E10:  ANDLW  01
03E12:  MOVWF  01
03E14:  BCF    x9F.2
03E16:  BTFSC  01.0
03E18:  BSF    x9F.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
03E1A:  BCF    FD8.0
03E1C:  RRCF   x9D,W
03E1E:  ANDLW  01
03E20:  MOVWF  01
03E22:  BCF    x9F.3
03E24:  BTFSC  01.0
03E26:  BSF    x9F.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
03E28:  RRCF   x9D,W
03E2A:  MOVWF  00
03E2C:  RRCF   00,F
03E2E:  MOVLW  3F
03E30:  ANDWF  00,F
03E32:  MOVF   00,W
03E34:  ANDLW  01
03E36:  MOVWF  01
03E38:  BCF    x9F.4
03E3A:  BTFSC  01.0
03E3C:  BSF    x9F.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
03E3E:  RRCF   x9D,W
03E40:  MOVWF  00
03E42:  RRCF   00,F
03E44:  RRCF   00,F
03E46:  MOVLW  1F
03E48:  ANDWF  00,F
03E4A:  MOVF   00,W
03E4C:  ANDLW  01
03E4E:  MOVWF  01
03E50:  BCF    x9F.5
03E52:  BTFSC  01.0
03E54:  BSF    x9F.5
....................     cmd.fields.seq = 0; // Random mode
03E56:  BCF    x9F.6
....................     cmd.fields.write = 1; // Read operation
03E58:  BSF    x9F.7
.................... 
.................... 
....................     return cmd.value;
03E5A:  MOVF   x9E,W
03E5C:  MOVWF  01
03E5E:  MOVF   x9F,W
03E60:  MOVWF  02
03E62:  MOVLB  0
03E64:  GOTO   3E70 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... //#fuses NOMCLR
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
01A86:  MOVLW  74
01A88:  MOVWF  FF6
01A8A:  MOVLW  08
01A8C:  MOVWF  FF7
01A8E:  MOVLW  00
01A90:  MOVWF  FF8
01A92:  CALL   13DE
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
01A96:  BCF    F92.5
01A98:  BSF    F89.5
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
01A9A:  BCF    F92.2
01A9C:  BSF    F89.2
....................     
....................     if (!is_connect(mis_fm)) {
01A9E:  MOVFF  E3,4E6
01AA2:  MOVFF  E2,4E5
01AA6:  MOVFF  E1,4E4
01AAA:  MOVFF  E0,4E3
01AAE:  CALL   173E
01AB2:  MOVF   01,F
01AB4:  BTFSS  FD8.2
01AB6:  GOTO   1AD2
....................         fprintf(PC, "\tFlash is not connected\r\n");
01ABA:  MOVLW  90
01ABC:  MOVWF  FF6
01ABE:  MOVLW  08
01AC0:  MOVWF  FF7
01AC2:  MOVLW  00
01AC4:  MOVWF  FF8
01AC6:  CALL   13DE
....................         return;
01ACA:  GOTO   2336
....................     }else {
01ACE:  GOTO   1AD2
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     if (!is_connect(smf)) {
01AD2:  MOVFF  E7,4E6
01AD6:  MOVFF  E6,4E5
01ADA:  MOVFF  E5,4E4
01ADE:  MOVFF  E4,4E3
01AE2:  CALL   173E
01AE6:  MOVF   01,F
01AE8:  BTFSS  FD8.2
01AEA:  GOTO   1B06
....................         fprintf(PC, "\tSMF is not connected\r\n");
01AEE:  MOVLW  AA
01AF0:  MOVWF  FF6
01AF2:  MOVLW  08
01AF4:  MOVWF  FF7
01AF6:  MOVLW  00
01AF8:  MOVWF  FF8
01AFA:  CALL   13DE
....................         return;
01AFE:  GOTO   2336
....................     }else {
01B02:  GOTO   1B16
....................         fprintf(PC, "\t SMF is connected\r\n");
01B06:  MOVLW  C2
01B08:  MOVWF  FF6
01B0A:  MOVLW  08
01B0C:  MOVWF  FF7
01B0E:  MOVLW  00
01B10:  MOVWF  FF8
01B12:  CALL   13DE
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
01B16:  MOVFF  E3,498
01B1A:  MOVFF  E2,497
01B1E:  MOVFF  E1,496
01B22:  MOVFF  E0,495
01B26:  MOVLB  4
01B28:  CLRF   x9C
01B2A:  CLRF   x9B
01B2C:  CLRF   x9A
01B2E:  CLRF   x99
01B30:  MOVLW  03
01B32:  MOVWF  x9E
01B34:  MOVLW  CD
01B36:  MOVWF  x9D
01B38:  CLRF   xA2
01B3A:  CLRF   xA1
01B3C:  CLRF   xA0
01B3E:  MOVLW  40
01B40:  MOVWF  x9F
01B42:  MOVLB  0
01B44:  CALL   17FE
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
01B48:  MOVLB  4
01B4A:  CLRF   x10
01B4C:  CLRF   x0F
01B4E:  CLRF   x0E
01B50:  MOVFF  3CD,40D
01B54:  MOVFF  40D,410
01B58:  CLRF   x0D
01B5A:  CLRF   x0E
01B5C:  CLRF   x0F
01B5E:  CLRF   x15
01B60:  CLRF   x14
01B62:  CLRF   x13
01B64:  MOVFF  3CE,412
01B68:  MOVFF  413,03
01B6C:  MOVFF  412,02
01B70:  CLRF   00
01B72:  CLRF   01
01B74:  MOVF   00,W
01B76:  IORWF  x0D,F
01B78:  MOVF   01,W
01B7A:  IORWF  x0E,F
01B7C:  MOVF   02,W
01B7E:  IORWF  x0F,F
01B80:  MOVF   03,W
01B82:  IORWF  x10,F
01B84:  CLRF   x15
01B86:  CLRF   x14
01B88:  CLRF   x13
01B8A:  MOVFF  3CF,412
01B8E:  MOVFF  414,03
01B92:  MOVFF  413,02
01B96:  MOVFF  412,01
01B9A:  CLRF   00
01B9C:  MOVF   00,W
01B9E:  IORWF  x0D,F
01BA0:  MOVF   01,W
01BA2:  IORWF  x0E,F
01BA4:  MOVF   02,W
01BA6:  IORWF  x0F,F
01BA8:  MOVF   03,W
01BAA:  IORWF  x10,F
01BAC:  MOVFF  3D0,00
01BB0:  CLRF   01
01BB2:  CLRF   02
01BB4:  CLRF   03
01BB6:  MOVF   00,W
01BB8:  IORWF  x0D,W
01BBA:  MOVLB  3
01BBC:  MOVWF  x53
01BBE:  MOVF   01,W
01BC0:  MOVLB  4
01BC2:  IORWF  x0E,W
01BC4:  MOVLB  3
01BC6:  MOVWF  x54
01BC8:  MOVF   02,W
01BCA:  MOVLB  4
01BCC:  IORWF  x0F,W
01BCE:  MOVLB  3
01BD0:  MOVWF  x55
01BD2:  MOVF   03,W
01BD4:  MOVLB  4
01BD6:  IORWF  x10,W
01BD8:  MOVLB  3
01BDA:  MOVWF  x56
....................     smf_piclog_loop_counter = readdata[4];
01BDC:  MOVFF  3D1,357
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
01BE0:  MOVLB  4
01BE2:  CLRF   x10
01BE4:  CLRF   x0F
01BE6:  CLRF   x0E
01BE8:  MOVFF  3D2,40D
01BEC:  MOVFF  40D,410
01BF0:  CLRF   x0D
01BF2:  CLRF   x0E
01BF4:  CLRF   x0F
01BF6:  CLRF   x15
01BF8:  CLRF   x14
01BFA:  CLRF   x13
01BFC:  MOVFF  3D3,412
01C00:  MOVFF  413,03
01C04:  MOVFF  412,02
01C08:  CLRF   00
01C0A:  CLRF   01
01C0C:  MOVF   00,W
01C0E:  IORWF  x0D,F
01C10:  MOVF   01,W
01C12:  IORWF  x0E,F
01C14:  MOVF   02,W
01C16:  IORWF  x0F,F
01C18:  MOVF   03,W
01C1A:  IORWF  x10,F
01C1C:  CLRF   x15
01C1E:  CLRF   x14
01C20:  CLRF   x13
01C22:  MOVFF  3D4,412
01C26:  MOVFF  414,03
01C2A:  MOVFF  413,02
01C2E:  MOVFF  412,01
01C32:  CLRF   00
01C34:  MOVF   00,W
01C36:  IORWF  x0D,F
01C38:  MOVF   01,W
01C3A:  IORWF  x0E,F
01C3C:  MOVF   02,W
01C3E:  IORWF  x0F,F
01C40:  MOVF   03,W
01C42:  IORWF  x10,F
01C44:  MOVFF  3D5,00
01C48:  CLRF   01
01C4A:  CLRF   02
01C4C:  CLRF   03
01C4E:  MOVF   00,W
01C50:  IORWF  x0D,W
01C52:  MOVLB  3
01C54:  MOVWF  x58
01C56:  MOVF   01,W
01C58:  MOVLB  4
01C5A:  IORWF  x0E,W
01C5C:  MOVLB  3
01C5E:  MOVWF  x59
01C60:  MOVF   02,W
01C62:  MOVLB  4
01C64:  IORWF  x0F,W
01C66:  MOVLB  3
01C68:  MOVWF  x5A
01C6A:  MOVF   03,W
01C6C:  MOVLB  4
01C6E:  IORWF  x10,W
01C70:  MOVLB  3
01C72:  MOVWF  x5B
....................     smf_meas_loop_counter = readdata[9];
01C74:  MOVFF  3D6,35C
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
01C78:  MOVLB  4
01C7A:  CLRF   x10
01C7C:  CLRF   x0F
01C7E:  CLRF   x0E
01C80:  MOVFF  3D7,40D
01C84:  MOVFF  40D,410
01C88:  CLRF   x0D
01C8A:  CLRF   x0E
01C8C:  CLRF   x0F
01C8E:  CLRF   x15
01C90:  CLRF   x14
01C92:  CLRF   x13
01C94:  MOVFF  3D8,412
01C98:  MOVFF  413,03
01C9C:  MOVFF  412,02
01CA0:  CLRF   00
01CA2:  CLRF   01
01CA4:  MOVF   00,W
01CA6:  IORWF  x0D,F
01CA8:  MOVF   01,W
01CAA:  IORWF  x0E,F
01CAC:  MOVF   02,W
01CAE:  IORWF  x0F,F
01CB0:  MOVF   03,W
01CB2:  IORWF  x10,F
01CB4:  CLRF   x15
01CB6:  CLRF   x14
01CB8:  CLRF   x13
01CBA:  MOVFF  3D9,412
01CBE:  MOVFF  414,03
01CC2:  MOVFF  413,02
01CC6:  MOVFF  412,01
01CCA:  CLRF   00
01CCC:  MOVF   00,W
01CCE:  IORWF  x0D,F
01CD0:  MOVF   01,W
01CD2:  IORWF  x0E,F
01CD4:  MOVF   02,W
01CD6:  IORWF  x0F,F
01CD8:  MOVF   03,W
01CDA:  IORWF  x10,F
01CDC:  MOVFF  3DA,00
01CE0:  CLRF   01
01CE2:  CLRF   02
01CE4:  CLRF   03
01CE6:  MOVF   00,W
01CE8:  IORWF  x0D,W
01CEA:  MOVLB  3
01CEC:  MOVWF  x5D
01CEE:  MOVF   01,W
01CF0:  MOVLB  4
01CF2:  IORWF  x0E,W
01CF4:  MOVLB  3
01CF6:  MOVWF  x5E
01CF8:  MOVF   02,W
01CFA:  MOVLB  4
01CFC:  IORWF  x0F,W
01CFE:  MOVLB  3
01D00:  MOVWF  x5F
01D02:  MOVF   03,W
01D04:  MOVLB  4
01D06:  IORWF  x10,W
01D08:  MOVLB  3
01D0A:  MOVWF  x60
....................     misf_piclog_loop_counter = readdata[14];
01D0C:  MOVFF  3DB,361
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
01D10:  MOVLB  4
01D12:  CLRF   x10
01D14:  CLRF   x0F
01D16:  CLRF   x0E
01D18:  MOVFF  3DC,40D
01D1C:  MOVFF  40D,410
01D20:  CLRF   x0D
01D22:  CLRF   x0E
01D24:  CLRF   x0F
01D26:  CLRF   x15
01D28:  CLRF   x14
01D2A:  CLRF   x13
01D2C:  MOVFF  3DD,412
01D30:  MOVFF  413,03
01D34:  MOVFF  412,02
01D38:  CLRF   00
01D3A:  CLRF   01
01D3C:  MOVF   00,W
01D3E:  IORWF  x0D,F
01D40:  MOVF   01,W
01D42:  IORWF  x0E,F
01D44:  MOVF   02,W
01D46:  IORWF  x0F,F
01D48:  MOVF   03,W
01D4A:  IORWF  x10,F
01D4C:  CLRF   x15
01D4E:  CLRF   x14
01D50:  CLRF   x13
01D52:  MOVFF  3DE,412
01D56:  MOVFF  414,03
01D5A:  MOVFF  413,02
01D5E:  MOVFF  412,01
01D62:  CLRF   00
01D64:  MOVF   00,W
01D66:  IORWF  x0D,F
01D68:  MOVF   01,W
01D6A:  IORWF  x0E,F
01D6C:  MOVF   02,W
01D6E:  IORWF  x0F,F
01D70:  MOVF   03,W
01D72:  IORWF  x10,F
01D74:  MOVFF  3DF,00
01D78:  CLRF   01
01D7A:  CLRF   02
01D7C:  CLRF   03
01D7E:  MOVF   00,W
01D80:  IORWF  x0D,W
01D82:  MOVLB  3
01D84:  MOVWF  x62
01D86:  MOVF   01,W
01D88:  MOVLB  4
01D8A:  IORWF  x0E,W
01D8C:  MOVLB  3
01D8E:  MOVWF  x63
01D90:  MOVF   02,W
01D92:  MOVLB  4
01D94:  IORWF  x0F,W
01D96:  MOVLB  3
01D98:  MOVWF  x64
01D9A:  MOVF   03,W
01D9C:  MOVLB  4
01D9E:  IORWF  x10,W
01DA0:  MOVLB  3
01DA2:  MOVWF  x65
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
01DA4:  MOVLB  4
01DA6:  CLRF   x10
01DA8:  CLRF   x0F
01DAA:  CLRF   x0E
01DAC:  MOVFF  3E0,40D
01DB0:  MOVFF  40D,410
01DB4:  CLRF   x0D
01DB6:  CLRF   x0E
01DB8:  CLRF   x0F
01DBA:  CLRF   x15
01DBC:  CLRF   x14
01DBE:  CLRF   x13
01DC0:  MOVFF  3E1,412
01DC4:  MOVFF  413,03
01DC8:  MOVFF  412,02
01DCC:  CLRF   00
01DCE:  CLRF   01
01DD0:  MOVF   00,W
01DD2:  IORWF  x0D,F
01DD4:  MOVF   01,W
01DD6:  IORWF  x0E,F
01DD8:  MOVF   02,W
01DDA:  IORWF  x0F,F
01DDC:  MOVF   03,W
01DDE:  IORWF  x10,F
01DE0:  CLRF   x15
01DE2:  CLRF   x14
01DE4:  CLRF   x13
01DE6:  MOVFF  3E2,412
01DEA:  MOVFF  414,03
01DEE:  MOVFF  413,02
01DF2:  MOVFF  412,01
01DF6:  CLRF   00
01DF8:  MOVF   00,W
01DFA:  IORWF  x0D,F
01DFC:  MOVF   01,W
01DFE:  IORWF  x0E,F
01E00:  MOVF   02,W
01E02:  IORWF  x0F,F
01E04:  MOVF   03,W
01E06:  IORWF  x10,F
01E08:  MOVFF  3E3,00
01E0C:  CLRF   01
01E0E:  CLRF   02
01E10:  CLRF   03
01E12:  MOVF   00,W
01E14:  IORWF  x0D,W
01E16:  MOVLB  3
01E18:  MOVWF  x66
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
01E1A:  MOVLB  4
01E1C:  CLRF   x10
01E1E:  CLRF   x0F
01E20:  CLRF   x0E
01E22:  MOVFF  3E4,40D
01E26:  MOVFF  40D,410
01E2A:  CLRF   x0D
01E2C:  CLRF   x0E
01E2E:  CLRF   x0F
01E30:  CLRF   x15
01E32:  CLRF   x14
01E34:  CLRF   x13
01E36:  MOVFF  3E5,412
01E3A:  MOVFF  413,03
01E3E:  MOVFF  412,02
01E42:  CLRF   00
01E44:  CLRF   01
01E46:  MOVF   00,W
01E48:  IORWF  x0D,F
01E4A:  MOVF   01,W
01E4C:  IORWF  x0E,F
01E4E:  MOVF   02,W
01E50:  IORWF  x0F,F
01E52:  MOVF   03,W
01E54:  IORWF  x10,F
01E56:  CLRF   x15
01E58:  CLRF   x14
01E5A:  CLRF   x13
01E5C:  MOVFF  3E6,412
01E60:  MOVFF  414,03
01E64:  MOVFF  413,02
01E68:  MOVFF  412,01
01E6C:  CLRF   00
01E6E:  MOVF   00,W
01E70:  IORWF  x0D,F
01E72:  MOVF   01,W
01E74:  IORWF  x0E,F
01E76:  MOVF   02,W
01E78:  IORWF  x0F,F
01E7A:  MOVF   03,W
01E7C:  IORWF  x10,F
01E7E:  MOVFF  3E7,00
01E82:  CLRF   01
01E84:  CLRF   02
01E86:  CLRF   03
01E88:  MOVF   00,W
01E8A:  IORWF  x0D,W
01E8C:  MOVLB  3
01E8E:  MOVWF  x67
01E90:  MOVF   01,W
01E92:  MOVLB  4
01E94:  IORWF  x0E,W
01E96:  MOVLB  3
01E98:  MOVWF  x68
01E9A:  MOVF   02,W
01E9C:  MOVLB  4
01E9E:  IORWF  x0F,W
01EA0:  MOVLB  3
01EA2:  MOVWF  x69
01EA4:  MOVF   03,W
01EA6:  MOVLB  4
01EA8:  IORWF  x10,W
01EAA:  MOVLB  3
01EAC:  MOVWF  x6A
....................     misf_meas_loop_counter = readdata[27];
01EAE:  MOVFF  3E8,36B
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
01EB2:  MOVLB  4
01EB4:  CLRF   x10
01EB6:  CLRF   x0F
01EB8:  CLRF   x0E
01EBA:  MOVFF  3E9,40D
01EBE:  MOVFF  40D,410
01EC2:  CLRF   x0D
01EC4:  CLRF   x0E
01EC6:  CLRF   x0F
01EC8:  CLRF   x15
01ECA:  CLRF   x14
01ECC:  CLRF   x13
01ECE:  MOVFF  3EA,412
01ED2:  MOVFF  413,03
01ED6:  MOVFF  412,02
01EDA:  CLRF   00
01EDC:  CLRF   01
01EDE:  MOVF   00,W
01EE0:  IORWF  x0D,F
01EE2:  MOVF   01,W
01EE4:  IORWF  x0E,F
01EE6:  MOVF   02,W
01EE8:  IORWF  x0F,F
01EEA:  MOVF   03,W
01EEC:  IORWF  x10,F
01EEE:  CLRF   x15
01EF0:  CLRF   x14
01EF2:  CLRF   x13
01EF4:  MOVFF  3EB,412
01EF8:  MOVFF  414,03
01EFC:  MOVFF  413,02
01F00:  MOVFF  412,01
01F04:  CLRF   00
01F06:  MOVF   00,W
01F08:  IORWF  x0D,F
01F0A:  MOVF   01,W
01F0C:  IORWF  x0E,F
01F0E:  MOVF   02,W
01F10:  IORWF  x0F,F
01F12:  MOVF   03,W
01F14:  IORWF  x10,F
01F16:  MOVFF  3EC,00
01F1A:  CLRF   01
01F1C:  CLRF   02
01F1E:  CLRF   03
01F20:  MOVF   00,W
01F22:  IORWF  x0D,W
01F24:  MOVLB  3
01F26:  MOVWF  x6C
01F28:  MOVF   01,W
01F2A:  MOVLB  4
01F2C:  IORWF  x0E,W
01F2E:  MOVLB  3
01F30:  MOVWF  x6D
01F32:  MOVF   02,W
01F34:  MOVLB  4
01F36:  IORWF  x0F,W
01F38:  MOVLB  3
01F3A:  MOVWF  x6E
01F3C:  MOVF   03,W
01F3E:  MOVLB  4
01F40:  IORWF  x10,W
01F42:  MOVLB  3
01F44:  MOVWF  x6F
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
01F46:  MOVLW  D8
01F48:  MOVWF  FF6
01F4A:  MOVLW  08
01F4C:  MOVWF  FF7
01F4E:  MOVLW  00
01F50:  MOVWF  FF8
01F52:  MOVLW  22
01F54:  MOVLB  4
01F56:  MOVWF  x19
01F58:  MOVLB  0
01F5A:  CALL   140E
01F5E:  MOVFF  356,4A4
01F62:  MOVLW  37
01F64:  MOVLB  4
01F66:  MOVWF  xA5
01F68:  MOVLB  0
01F6A:  CALL   1A16
01F6E:  MOVFF  355,4A4
01F72:  MOVLW  37
01F74:  MOVLB  4
01F76:  MOVWF  xA5
01F78:  MOVLB  0
01F7A:  CALL   1A16
01F7E:  MOVFF  354,4A4
01F82:  MOVLW  37
01F84:  MOVLB  4
01F86:  MOVWF  xA5
01F88:  MOVLB  0
01F8A:  CALL   1A16
01F8E:  MOVFF  353,4A4
01F92:  MOVLW  37
01F94:  MOVLB  4
01F96:  MOVWF  xA5
01F98:  MOVLB  0
01F9A:  CALL   1A16
01F9E:  MOVLW  0D
01FA0:  MOVLB  4
01FA2:  MOVWF  xE6
01FA4:  MOVLB  0
01FA6:  CALL   138C
01FAA:  MOVLW  0A
01FAC:  MOVLB  4
01FAE:  MOVWF  xE6
01FB0:  MOVLB  0
01FB2:  CALL   138C
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
01FB6:  MOVLW  02
01FB8:  MOVWF  FF6
01FBA:  MOVLW  09
01FBC:  MOVWF  FF7
01FBE:  MOVLW  00
01FC0:  MOVWF  FF8
01FC2:  MOVLW  22
01FC4:  MOVLB  4
01FC6:  MOVWF  x19
01FC8:  MOVLB  0
01FCA:  CALL   140E
01FCE:  MOVFF  357,4A4
01FD2:  MOVLW  37
01FD4:  MOVLB  4
01FD6:  MOVWF  xA5
01FD8:  MOVLB  0
01FDA:  CALL   1A16
01FDE:  MOVLW  0D
01FE0:  MOVLB  4
01FE2:  MOVWF  xE6
01FE4:  MOVLB  0
01FE6:  CALL   138C
01FEA:  MOVLW  0A
01FEC:  MOVLB  4
01FEE:  MOVWF  xE6
01FF0:  MOVLB  0
01FF2:  CALL   138C
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
01FF6:  MOVLW  2C
01FF8:  MOVWF  FF6
01FFA:  MOVLW  09
01FFC:  MOVWF  FF7
01FFE:  MOVLW  00
02000:  MOVWF  FF8
02002:  MOVLW  22
02004:  MOVLB  4
02006:  MOVWF  x19
02008:  MOVLB  0
0200A:  CALL   140E
0200E:  MOVFF  35B,4A4
02012:  MOVLW  37
02014:  MOVLB  4
02016:  MOVWF  xA5
02018:  MOVLB  0
0201A:  CALL   1A16
0201E:  MOVFF  35A,4A4
02022:  MOVLW  37
02024:  MOVLB  4
02026:  MOVWF  xA5
02028:  MOVLB  0
0202A:  CALL   1A16
0202E:  MOVFF  359,4A4
02032:  MOVLW  37
02034:  MOVLB  4
02036:  MOVWF  xA5
02038:  MOVLB  0
0203A:  CALL   1A16
0203E:  MOVFF  358,4A4
02042:  MOVLW  37
02044:  MOVLB  4
02046:  MOVWF  xA5
02048:  MOVLB  0
0204A:  CALL   1A16
0204E:  MOVLW  0D
02050:  MOVLB  4
02052:  MOVWF  xE6
02054:  MOVLB  0
02056:  CALL   138C
0205A:  MOVLW  0A
0205C:  MOVLB  4
0205E:  MOVWF  xE6
02060:  MOVLB  0
02062:  CALL   138C
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
02066:  MOVLW  56
02068:  MOVWF  FF6
0206A:  MOVLW  09
0206C:  MOVWF  FF7
0206E:  MOVLW  00
02070:  MOVWF  FF8
02072:  MOVLW  22
02074:  MOVLB  4
02076:  MOVWF  x19
02078:  MOVLB  0
0207A:  CALL   140E
0207E:  MOVFF  35C,4A4
02082:  MOVLW  37
02084:  MOVLB  4
02086:  MOVWF  xA5
02088:  MOVLB  0
0208A:  CALL   1A16
0208E:  MOVLW  0D
02090:  MOVLB  4
02092:  MOVWF  xE6
02094:  MOVLB  0
02096:  CALL   138C
0209A:  MOVLW  0A
0209C:  MOVLB  4
0209E:  MOVWF  xE6
020A0:  MOVLB  0
020A2:  CALL   138C
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
020A6:  MOVLW  80
020A8:  MOVWF  FF6
020AA:  MOVLW  09
020AC:  MOVWF  FF7
020AE:  MOVLW  00
020B0:  MOVWF  FF8
020B2:  MOVLW  22
020B4:  MOVLB  4
020B6:  MOVWF  x19
020B8:  MOVLB  0
020BA:  CALL   140E
020BE:  MOVFF  360,4A4
020C2:  MOVLW  37
020C4:  MOVLB  4
020C6:  MOVWF  xA5
020C8:  MOVLB  0
020CA:  CALL   1A16
020CE:  MOVFF  35F,4A4
020D2:  MOVLW  37
020D4:  MOVLB  4
020D6:  MOVWF  xA5
020D8:  MOVLB  0
020DA:  CALL   1A16
020DE:  MOVFF  35E,4A4
020E2:  MOVLW  37
020E4:  MOVLB  4
020E6:  MOVWF  xA5
020E8:  MOVLB  0
020EA:  CALL   1A16
020EE:  MOVFF  35D,4A4
020F2:  MOVLW  37
020F4:  MOVLB  4
020F6:  MOVWF  xA5
020F8:  MOVLB  0
020FA:  CALL   1A16
020FE:  MOVLW  0D
02100:  MOVLB  4
02102:  MOVWF  xE6
02104:  MOVLB  0
02106:  CALL   138C
0210A:  MOVLW  0A
0210C:  MOVLB  4
0210E:  MOVWF  xE6
02110:  MOVLB  0
02112:  CALL   138C
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
02116:  MOVLW  AA
02118:  MOVWF  FF6
0211A:  MOVLW  09
0211C:  MOVWF  FF7
0211E:  MOVLW  00
02120:  MOVWF  FF8
02122:  MOVLW  22
02124:  MOVLB  4
02126:  MOVWF  x19
02128:  MOVLB  0
0212A:  CALL   140E
0212E:  MOVFF  365,4A4
02132:  MOVLW  37
02134:  MOVLB  4
02136:  MOVWF  xA5
02138:  MOVLB  0
0213A:  CALL   1A16
0213E:  MOVFF  364,4A4
02142:  MOVLW  37
02144:  MOVLB  4
02146:  MOVWF  xA5
02148:  MOVLB  0
0214A:  CALL   1A16
0214E:  MOVFF  363,4A4
02152:  MOVLW  37
02154:  MOVLB  4
02156:  MOVWF  xA5
02158:  MOVLB  0
0215A:  CALL   1A16
0215E:  MOVFF  362,4A4
02162:  MOVLW  37
02164:  MOVLB  4
02166:  MOVWF  xA5
02168:  MOVLB  0
0216A:  CALL   1A16
0216E:  MOVLW  0D
02170:  MOVLB  4
02172:  MOVWF  xE6
02174:  MOVLB  0
02176:  CALL   138C
0217A:  MOVLW  0A
0217C:  MOVLB  4
0217E:  MOVWF  xE6
02180:  MOVLB  0
02182:  CALL   138C
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
02186:  MOVLW  D4
02188:  MOVWF  FF6
0218A:  MOVLW  09
0218C:  MOVWF  FF7
0218E:  MOVLW  00
02190:  MOVWF  FF8
02192:  MOVLW  22
02194:  MOVLB  4
02196:  MOVWF  x19
02198:  MOVLB  0
0219A:  CALL   140E
0219E:  MOVFF  361,4A4
021A2:  MOVLW  37
021A4:  MOVLB  4
021A6:  MOVWF  xA5
021A8:  MOVLB  0
021AA:  CALL   1A16
021AE:  MOVLW  0D
021B0:  MOVLB  4
021B2:  MOVWF  xE6
021B4:  MOVLB  0
021B6:  CALL   138C
021BA:  MOVLW  0A
021BC:  MOVLB  4
021BE:  MOVWF  xE6
021C0:  MOVLB  0
021C2:  CALL   138C
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
021C6:  MOVLW  FE
021C8:  MOVWF  FF6
021CA:  MOVLW  09
021CC:  MOVWF  FF7
021CE:  MOVLW  00
021D0:  MOVWF  FF8
021D2:  MOVLW  22
021D4:  MOVLB  4
021D6:  MOVWF  x19
021D8:  MOVLB  0
021DA:  CALL   140E
021DE:  MOVFF  366,4A4
021E2:  MOVLW  37
021E4:  MOVLB  4
021E6:  MOVWF  xA5
021E8:  MOVLB  0
021EA:  CALL   1A16
021EE:  MOVLW  0D
021F0:  MOVLB  4
021F2:  MOVWF  xE6
021F4:  MOVLB  0
021F6:  CALL   138C
021FA:  MOVLW  0A
021FC:  MOVLB  4
021FE:  MOVWF  xE6
02200:  MOVLB  0
02202:  CALL   138C
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02206:  MOVLW  28
02208:  MOVWF  FF6
0220A:  MOVLW  0A
0220C:  MOVWF  FF7
0220E:  MOVLW  00
02210:  MOVWF  FF8
02212:  MOVLW  22
02214:  MOVLB  4
02216:  MOVWF  x19
02218:  MOVLB  0
0221A:  CALL   140E
0221E:  MOVFF  36A,4A4
02222:  MOVLW  37
02224:  MOVLB  4
02226:  MOVWF  xA5
02228:  MOVLB  0
0222A:  CALL   1A16
0222E:  MOVFF  369,4A4
02232:  MOVLW  37
02234:  MOVLB  4
02236:  MOVWF  xA5
02238:  MOVLB  0
0223A:  CALL   1A16
0223E:  MOVFF  368,4A4
02242:  MOVLW  37
02244:  MOVLB  4
02246:  MOVWF  xA5
02248:  MOVLB  0
0224A:  CALL   1A16
0224E:  MOVFF  367,4A4
02252:  MOVLW  37
02254:  MOVLB  4
02256:  MOVWF  xA5
02258:  MOVLB  0
0225A:  CALL   1A16
0225E:  MOVLW  0D
02260:  MOVLB  4
02262:  MOVWF  xE6
02264:  MOVLB  0
02266:  CALL   138C
0226A:  MOVLW  0A
0226C:  MOVLB  4
0226E:  MOVWF  xE6
02270:  MOVLB  0
02272:  CALL   138C
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02276:  MOVLW  52
02278:  MOVWF  FF6
0227A:  MOVLW  0A
0227C:  MOVWF  FF7
0227E:  MOVLW  00
02280:  MOVWF  FF8
02282:  MOVLW  22
02284:  MOVLB  4
02286:  MOVWF  x19
02288:  MOVLB  0
0228A:  CALL   140E
0228E:  MOVFF  36F,4A4
02292:  MOVLW  37
02294:  MOVLB  4
02296:  MOVWF  xA5
02298:  MOVLB  0
0229A:  CALL   1A16
0229E:  MOVFF  36E,4A4
022A2:  MOVLW  37
022A4:  MOVLB  4
022A6:  MOVWF  xA5
022A8:  MOVLB  0
022AA:  CALL   1A16
022AE:  MOVFF  36D,4A4
022B2:  MOVLW  37
022B4:  MOVLB  4
022B6:  MOVWF  xA5
022B8:  MOVLB  0
022BA:  CALL   1A16
022BE:  MOVFF  36C,4A4
022C2:  MOVLW  37
022C4:  MOVLB  4
022C6:  MOVWF  xA5
022C8:  MOVLB  0
022CA:  CALL   1A16
022CE:  MOVLW  0D
022D0:  MOVLB  4
022D2:  MOVWF  xE6
022D4:  MOVLB  0
022D6:  CALL   138C
022DA:  MOVLW  0A
022DC:  MOVLB  4
022DE:  MOVWF  xE6
022E0:  MOVLB  0
022E2:  CALL   138C
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
022E6:  MOVLW  7C
022E8:  MOVWF  FF6
022EA:  MOVLW  0A
022EC:  MOVWF  FF7
022EE:  MOVLW  00
022F0:  MOVWF  FF8
022F2:  MOVLW  22
022F4:  MOVLB  4
022F6:  MOVWF  x19
022F8:  MOVLB  0
022FA:  CALL   140E
022FE:  MOVFF  36B,4A4
02302:  MOVLW  37
02304:  MOVLB  4
02306:  MOVWF  xA5
02308:  MOVLB  0
0230A:  CALL   1A16
0230E:  MOVLW  0D
02310:  MOVLB  4
02312:  MOVWF  xE6
02314:  MOVLB  0
02316:  CALL   138C
0231A:  MOVLW  0A
0231C:  MOVLB  4
0231E:  MOVWF  xE6
02320:  MOVLB  0
02322:  CALL   138C
....................     fprintf(PC, "\tComplete\r\n");
02326:  MOVLW  A6
02328:  MOVWF  FF6
0232A:  MOVLW  0A
0232C:  MOVWF  FF7
0232E:  MOVLW  00
02330:  MOVWF  FF8
02332:  CALL   13DE
02336:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
02D36:  MOVLB  4
02D38:  CLRF   xA3
02D3A:  CLRF   xA4
02D3C:  CLRF   xA5
02D3E:  CLRF   xA6
02D40:  CLRF   xA7
02D42:  CLRF   xA8
02D44:  CLRF   xA9
02D46:  CLRF   xAA
02D48:  CLRF   xAB
02D4A:  CLRF   xAC
02D4C:  CLRF   xAD
02D4E:  CLRF   xAE
02D50:  CLRF   xAF
02D52:  CLRF   xB0
02D54:  CLRF   xB1
02D56:  CLRF   xB2
02D58:  CLRF   xB3
02D5A:  CLRF   xB4
02D5C:  CLRF   xB5
02D5E:  CLRF   xB6
02D60:  CLRF   xB7
02D62:  CLRF   xB8
02D64:  CLRF   xB9
02D66:  CLRF   xBA
02D68:  CLRF   xBB
02D6A:  CLRF   xBC
02D6C:  CLRF   xBD
02D6E:  CLRF   xBE
02D70:  CLRF   xBF
02D72:  CLRF   xC0
02D74:  CLRF   xC1
02D76:  CLRF   xC2
02D78:  CLRF   xC3
02D7A:  CLRF   xC4
02D7C:  CLRF   xC5
02D7E:  CLRF   xC6
02D80:  CLRF   xC7
02D82:  CLRF   xC8
02D84:  CLRF   xC9
02D86:  CLRF   xCA
02D88:  CLRF   xCB
02D8A:  CLRF   xCC
02D8C:  CLRF   xCD
02D8E:  CLRF   xCE
02D90:  CLRF   xCF
02D92:  CLRF   xD0
02D94:  CLRF   xD1
02D96:  CLRF   xD2
02D98:  CLRF   xD3
02D9A:  CLRF   xD4
02D9C:  CLRF   xD5
02D9E:  CLRF   xD6
02DA0:  CLRF   xD7
02DA2:  CLRF   xD8
02DA4:  CLRF   xD9
02DA6:  CLRF   xDA
02DA8:  CLRF   xDB
02DAA:  CLRF   xDC
02DAC:  CLRF   xDD
02DAE:  CLRF   xDE
02DB0:  CLRF   xDF
02DB2:  CLRF   xE0
02DB4:  CLRF   xE1
02DB6:  CLRF   xE2
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
02DB8:  MOVFF  356,4E4
02DBC:  CLRF   xE5
02DBE:  CLRF   xE6
02DC0:  CLRF   xE7
02DC2:  MOVF   xE4,W
02DC4:  MOVWF  xA3
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
02DC6:  MOVFF  355,4E4
02DCA:  MOVFF  356,4E5
02DCE:  CLRF   xE6
02DD0:  CLRF   xE7
02DD2:  MOVF   xE4,W
02DD4:  MOVWF  xA4
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
02DD6:  MOVFF  354,4E4
02DDA:  MOVFF  355,4E5
02DDE:  MOVFF  356,4E6
02DE2:  CLRF   xE7
02DE4:  MOVF   xE4,W
02DE6:  MOVWF  xA5
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
02DE8:  MOVLB  3
02DEA:  MOVF   x53,W
02DEC:  MOVLB  4
02DEE:  MOVWF  xA6
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
02DF0:  MOVFF  357,4A7
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
02DF4:  MOVFF  35B,4E4
02DF8:  CLRF   xE5
02DFA:  CLRF   xE6
02DFC:  CLRF   xE7
02DFE:  MOVF   xE4,W
02E00:  MOVWF  xA8
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
02E02:  MOVFF  35A,4E4
02E06:  MOVFF  35B,4E5
02E0A:  CLRF   xE6
02E0C:  CLRF   xE7
02E0E:  MOVF   xE4,W
02E10:  MOVWF  xA9
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
02E12:  MOVFF  359,4E4
02E16:  MOVFF  35A,4E5
02E1A:  MOVFF  35B,4E6
02E1E:  CLRF   xE7
02E20:  MOVF   xE4,W
02E22:  MOVWF  xAA
....................     writedata[8] = smf_meas_use_counter & 0xFF;
02E24:  MOVLB  3
02E26:  MOVF   x58,W
02E28:  MOVLB  4
02E2A:  MOVWF  xAB
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
02E2C:  MOVFF  35C,4AC
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
02E30:  MOVFF  360,4E4
02E34:  CLRF   xE5
02E36:  CLRF   xE6
02E38:  CLRF   xE7
02E3A:  MOVF   xE4,W
02E3C:  MOVWF  xAD
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
02E3E:  MOVFF  35F,4E4
02E42:  MOVFF  360,4E5
02E46:  CLRF   xE6
02E48:  CLRF   xE7
02E4A:  MOVF   xE4,W
02E4C:  MOVWF  xAE
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
02E4E:  MOVFF  35E,4E4
02E52:  MOVFF  35F,4E5
02E56:  MOVFF  360,4E6
02E5A:  CLRF   xE7
02E5C:  MOVF   xE4,W
02E5E:  MOVWF  xAF
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
02E60:  MOVLB  3
02E62:  MOVF   x5D,W
02E64:  MOVLB  4
02E66:  MOVWF  xB0
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
02E68:  MOVFF  361,4B1
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
02E6C:  MOVFF  365,4E4
02E70:  CLRF   xE5
02E72:  CLRF   xE6
02E74:  CLRF   xE7
02E76:  MOVF   xE4,W
02E78:  MOVWF  xB2
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
02E7A:  MOVFF  364,4E4
02E7E:  MOVFF  365,4E5
02E82:  CLRF   xE6
02E84:  CLRF   xE7
02E86:  MOVF   xE4,W
02E88:  MOVWF  xB3
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
02E8A:  MOVFF  363,4E4
02E8E:  MOVFF  364,4E5
02E92:  MOVFF  365,4E6
02E96:  CLRF   xE7
02E98:  MOVF   xE4,W
02E9A:  MOVWF  xB4
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
02E9C:  MOVLB  3
02E9E:  MOVF   x62,W
02EA0:  MOVLB  4
02EA2:  MOVWF  xB5
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
02EA4:  MOVLW  00
02EA6:  MOVWF  xB6
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
02EA8:  MOVLW  00
02EAA:  MOVWF  xB7
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
02EAC:  MOVLW  00
02EAE:  MOVWF  xB8
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
02EB0:  MOVLB  3
02EB2:  MOVF   x66,W
02EB4:  MOVLB  4
02EB6:  MOVWF  xB9
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
02EB8:  MOVFF  36A,4E4
02EBC:  CLRF   xE5
02EBE:  CLRF   xE6
02EC0:  CLRF   xE7
02EC2:  MOVF   xE4,W
02EC4:  MOVWF  xBA
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
02EC6:  MOVFF  369,4E4
02ECA:  MOVFF  36A,4E5
02ECE:  CLRF   xE6
02ED0:  CLRF   xE7
02ED2:  MOVF   xE4,W
02ED4:  MOVWF  xBB
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
02ED6:  MOVFF  368,4E4
02EDA:  MOVFF  369,4E5
02EDE:  MOVFF  36A,4E6
02EE2:  CLRF   xE7
02EE4:  MOVF   xE4,W
02EE6:  MOVWF  xBC
....................     writedata[26] = misf_meas_use_counter & 0xFF;
02EE8:  MOVLB  3
02EEA:  MOVF   x67,W
02EEC:  MOVLB  4
02EEE:  MOVWF  xBD
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
02EF0:  MOVFF  36B,4BE
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
02EF4:  MOVFF  36F,4E4
02EF8:  CLRF   xE5
02EFA:  CLRF   xE6
02EFC:  CLRF   xE7
02EFE:  MOVF   xE4,W
02F00:  MOVWF  xBF
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
02F02:  MOVFF  36E,4E4
02F06:  MOVFF  36F,4E5
02F0A:  CLRF   xE6
02F0C:  CLRF   xE7
02F0E:  MOVF   xE4,W
02F10:  MOVWF  xC0
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
02F12:  MOVFF  36D,4E4
02F16:  MOVFF  36E,4E5
02F1A:  MOVFF  36F,4E6
02F1E:  CLRF   xE7
02F20:  MOVF   xE4,W
02F22:  MOVWF  xC1
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
02F24:  MOVLB  3
02F26:  MOVF   x6C,W
02F28:  MOVLB  4
02F2A:  MOVWF  xC2
.................... 
....................     if (!is_connect(mis_fm)) {
02F2C:  MOVFF  E3,4E6
02F30:  MOVFF  E2,4E5
02F34:  MOVFF  E1,4E4
02F38:  MOVFF  E0,4E3
02F3C:  MOVLB  0
02F3E:  CALL   173E
02F42:  MOVF   01,F
02F44:  BTFSS  FD8.2
02F46:  GOTO   2F5E
....................         fprintf(PC, "Mission Flash is not connected\r\n");
02F4A:  MOVLW  B2
02F4C:  MOVWF  FF6
02F4E:  MOVLW  0A
02F50:  MOVWF  FF7
02F52:  MOVLW  00
02F54:  MOVWF  FF8
02F56:  CALL   13DE
....................         return;
02F5A:  GOTO   2FBC
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
02F5E:  MOVFF  E3,4E6
02F62:  MOVFF  E2,4E5
02F66:  MOVFF  E1,4E4
02F6A:  MOVFF  E0,4E3
02F6E:  MOVLB  4
02F70:  CLRF   xEA
02F72:  CLRF   xE9
02F74:  CLRF   xE8
02F76:  CLRF   xE7
02F78:  MOVLB  0
02F7A:  CALL   29CA
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
02F7E:  MOVFF  E3,4E6
02F82:  MOVFF  E2,4E5
02F86:  MOVFF  E1,4E4
02F8A:  MOVFF  E0,4E3
02F8E:  MOVLB  4
02F90:  CLRF   xEA
02F92:  CLRF   xE9
02F94:  CLRF   xE8
02F96:  CLRF   xE7
02F98:  MOVLW  04
02F9A:  MOVWF  xEC
02F9C:  MOVLW  A3
02F9E:  MOVWF  xEB
02FA0:  CLRF   xEE
02FA2:  MOVLW  40
02FA4:  MOVWF  xED
02FA6:  MOVLB  0
02FA8:  CALL   2632
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
02FAC:  MOVLW  D4
02FAE:  MOVWF  FF6
02FB0:  MOVLW  0A
02FB2:  MOVWF  FF7
02FB4:  MOVLW  00
02FB6:  MOVWF  FF8
02FB8:  CALL   13DE
02FBC:  GOTO   31B2 (RETURN)
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #include "mcp4901.c"
.................... #include "mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #include "mcp4901.c"
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
03BFE:  MOVLB  3
03C00:  BCF    x9D.7
....................    cmd.fields.buffer = 1; // Buffer used
03C02:  BSF    x9D.6
....................    cmd.fields.gain = 1; // Gain 1x
03C04:  BSF    x9D.5
....................    cmd.fields.shutdown = 1; // Normal operation
03C06:  BSF    x9D.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
03C08:  RRCF   x9B,W
03C0A:  MOVWF  x9F
03C0C:  RRCF   x9A,W
03C0E:  MOVWF  x9E
03C10:  RRCF   x9F,F
03C12:  RRCF   x9E,F
03C14:  RRCF   x9F,F
03C16:  RRCF   x9E,F
03C18:  RRCF   x9F,F
03C1A:  RRCF   x9E,F
03C1C:  RRCF   x9F,F
03C1E:  RRCF   x9E,F
03C20:  RRCF   x9F,F
03C22:  RRCF   x9E,F
03C24:  RRCF   x9F,F
03C26:  RRCF   x9E,F
03C28:  MOVLW  01
03C2A:  ANDWF  x9F,F
03C2C:  MOVF   x9E,W
03C2E:  ANDLW  01
03C30:  MOVWF  00
03C32:  CLRF   03
03C34:  MOVF   00,W
03C36:  MOVWF  01
03C38:  BCF    x9D.3
03C3A:  BTFSC  01.0
03C3C:  BSF    x9D.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
03C3E:  RRCF   x9B,W
03C40:  MOVWF  x9F
03C42:  RRCF   x9A,W
03C44:  MOVWF  x9E
03C46:  RRCF   x9F,F
03C48:  RRCF   x9E,F
03C4A:  RRCF   x9F,F
03C4C:  RRCF   x9E,F
03C4E:  RRCF   x9F,F
03C50:  RRCF   x9E,F
03C52:  RRCF   x9F,F
03C54:  RRCF   x9E,F
03C56:  RRCF   x9F,F
03C58:  RRCF   x9E,F
03C5A:  MOVLW  03
03C5C:  ANDWF  x9F,F
03C5E:  MOVF   x9E,W
03C60:  ANDLW  01
03C62:  MOVWF  00
03C64:  CLRF   03
03C66:  MOVF   00,W
03C68:  MOVWF  01
03C6A:  BCF    x9D.2
03C6C:  BTFSC  01.0
03C6E:  BSF    x9D.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
03C70:  RRCF   x9B,W
03C72:  MOVWF  x9F
03C74:  RRCF   x9A,W
03C76:  MOVWF  x9E
03C78:  RRCF   x9F,F
03C7A:  RRCF   x9E,F
03C7C:  RRCF   x9F,F
03C7E:  RRCF   x9E,F
03C80:  RRCF   x9F,F
03C82:  RRCF   x9E,F
03C84:  RRCF   x9F,F
03C86:  RRCF   x9E,F
03C88:  MOVLW  07
03C8A:  ANDWF  x9F,F
03C8C:  MOVF   x9E,W
03C8E:  ANDLW  01
03C90:  MOVWF  00
03C92:  CLRF   03
03C94:  MOVF   00,W
03C96:  MOVWF  01
03C98:  BCF    x9D.1
03C9A:  BTFSC  01.0
03C9C:  BSF    x9D.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
03C9E:  RRCF   x9B,W
03CA0:  MOVWF  x9F
03CA2:  RRCF   x9A,W
03CA4:  MOVWF  x9E
03CA6:  RRCF   x9F,F
03CA8:  RRCF   x9E,F
03CAA:  RRCF   x9F,F
03CAC:  RRCF   x9E,F
03CAE:  RRCF   x9F,F
03CB0:  RRCF   x9E,F
03CB2:  MOVLW  0F
03CB4:  ANDWF  x9F,F
03CB6:  MOVF   x9E,W
03CB8:  ANDLW  01
03CBA:  MOVWF  00
03CBC:  CLRF   03
03CBE:  MOVF   00,W
03CC0:  MOVWF  01
03CC2:  BCF    x9D.0
03CC4:  BTFSC  01.0
03CC6:  BSF    x9D.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
03CC8:  RRCF   x9B,W
03CCA:  MOVWF  x9F
03CCC:  RRCF   x9A,W
03CCE:  MOVWF  x9E
03CD0:  RRCF   x9F,F
03CD2:  RRCF   x9E,F
03CD4:  RRCF   x9F,F
03CD6:  RRCF   x9E,F
03CD8:  MOVLW  1F
03CDA:  ANDWF  x9F,F
03CDC:  MOVF   x9E,W
03CDE:  ANDLW  01
03CE0:  MOVWF  00
03CE2:  CLRF   03
03CE4:  MOVF   00,W
03CE6:  MOVWF  01
03CE8:  BCF    x9C.7
03CEA:  BTFSC  01.0
03CEC:  BSF    x9C.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
03CEE:  RRCF   x9B,W
03CF0:  MOVWF  x9F
03CF2:  RRCF   x9A,W
03CF4:  MOVWF  x9E
03CF6:  RRCF   x9F,F
03CF8:  RRCF   x9E,F
03CFA:  MOVLW  3F
03CFC:  ANDWF  x9F,F
03CFE:  MOVF   x9E,W
03D00:  ANDLW  01
03D02:  MOVWF  00
03D04:  CLRF   03
03D06:  MOVF   00,W
03D08:  MOVWF  01
03D0A:  BCF    x9C.6
03D0C:  BTFSC  01.0
03D0E:  BSF    x9C.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
03D10:  BCF    FD8.0
03D12:  RRCF   x9B,W
03D14:  MOVWF  x9F
03D16:  RRCF   x9A,W
03D18:  MOVWF  x9E
03D1A:  MOVF   x9E,W
03D1C:  ANDLW  01
03D1E:  MOVWF  00
03D20:  CLRF   03
03D22:  MOVF   00,W
03D24:  MOVWF  01
03D26:  BCF    x9C.5
03D28:  BTFSC  01.0
03D2A:  BSF    x9C.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
03D2C:  MOVF   x9A,W
03D2E:  ANDLW  01
03D30:  MOVWF  00
03D32:  CLRF   03
03D34:  MOVF   00,W
03D36:  MOVWF  01
03D38:  BCF    x9C.4
03D3A:  BTFSC  01.0
03D3C:  BSF    x9C.4
....................    cmd.fields.reserved = 0; // Reserved bits
03D3E:  BCF    x9C.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
03D40:  BCF    x9C.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
03D42:  BCF    x9C.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
03D44:  BCF    x9C.0
.................... 
....................    return cmd.value;
03D46:  MOVF   x9C,W
03D48:  MOVWF  01
03D4A:  MOVF   x9D,W
03D4C:  MOVWF  02
03D4E:  MOVLB  0
03D50:  GOTO   3DC6 (RETURN)
.................... }
.................... 
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... 
.................... //////////// Function to execute a mission based on the command content
.................... void mcp4901_1_write(unsigned int16 value)
*
03DBA:  MOVFF  397,39B
03DBE:  MOVFF  396,39A
03DC2:  GOTO   3BFE
03DC6:  MOVFF  02,399
03DCA:  MOVFF  01,398
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
03DCE:  BCF    F93.3
03DD0:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
03DD2:  MOVLW  85
03DD4:  MOVWF  00
03DD6:  DECFSZ 00,F
03DD8:  BRA    3DD6
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
03DDA:  MOVFF  399,39E
03DDE:  MOVFF  398,39D
03DE2:  MOVLW  10
03DE4:  MOVLB  3
03DE6:  MOVWF  x9F
03DE8:  MOVLW  01
03DEA:  MOVWF  xA0
03DEC:  MOVLB  0
03DEE:  CALL   3D54
....................    output_high(DAC1_CS); // Deselect MCP4901
03DF2:  BCF    F93.3
03DF4:  BSF    F8A.3
03DF6:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
....................    delay_us(100); // Ensure CS is stable before sending data
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
....................    output_high(DAC2_CS); // Deselect MCP4901
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
03E68:  MOVFF  396,39D
03E6C:  GOTO   3DF8
03E70:  MOVFF  02,398
03E74:  MOVFF  01,397
.................... {   
.................... 
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
03E78:  BCF    F93.1
03E7A:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
03E7C:  MOVLW  0D
03E7E:  MOVWF  00
03E80:  DECFSZ 00,F
03E82:  BRA    3E80
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
03E84:  MOVFF  398,39E
03E88:  MOVFF  397,39D
03E8C:  MOVLW  10
03E8E:  MOVLB  3
03E90:  MOVWF  x9F
03E92:  MOVLW  01
03E94:  MOVWF  xA0
03E96:  MOVLB  0
03E98:  CALL   3D54
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
03E9C:  MOVLW  0D
03E9E:  MOVWF  00
03EA0:  DECFSZ 00,F
03EA2:  BRA    3EA0
....................     output_high(ADC_CS); // Set CS pin high to end communication
03EA4:  BCF    F93.1
03EA6:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
03EA8:  MOVLW  0D
03EAA:  MOVWF  00
03EAC:  DECFSZ 00,F
03EAE:  BRA    3EAC
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
03EB0:  BCF    F93.1
03EB2:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
03EB4:  MOVLW  0D
03EB6:  MOVWF  00
03EB8:  DECFSZ 00,F
03EBA:  BRA    3EB8
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
03EBC:  MOVLB  3
03EBE:  CLRF   x9E
03EC0:  CLRF   x9D
03EC2:  MOVLW  10
03EC4:  MOVWF  x9F
03EC6:  MOVLW  01
03EC8:  MOVWF  xA0
03ECA:  MOVLB  0
03ECC:  CALL   3D54
03ED0:  MOVFF  02,39A
03ED4:  MOVFF  01,399
....................     output_high(ADC_CS); 
03ED8:  BCF    F93.1
03EDA:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
03EDC:  MOVLB  3
03EDE:  MOVF   x99,W
03EE0:  MOVWF  x9B
03EE2:  MOVF   x9A,W
03EE4:  ANDLW  0F
03EE6:  MOVWF  x9C
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
03EE8:  MOVF   x9B,W
03EEA:  MOVWF  01
03EEC:  MOVF   x9C,W
03EEE:  MOVWF  02
03EF0:  MOVLB  0
03EF2:  RETURN 0
.................... }
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
01444:  MOVLW  F8
01446:  MOVWF  FF6
01448:  MOVLW  0A
0144A:  MOVWF  FF7
0144C:  MOVLW  00
0144E:  MOVWF  FF8
01450:  CALL   13DE
....................     output_low(CONNECT_CIGS1);
01454:  BCF    F94.0
01456:  BCF    F8B.0
....................     output_high(EN_NPWR);
01458:  BCF    F94.7
0145A:  BSF    F8B.7
....................     fprintf(PC, "\tComplete\r\n");
0145C:  MOVLW  08
0145E:  MOVWF  FF6
01460:  MOVLW  0B
01462:  MOVWF  FF7
01464:  MOVLW  00
01466:  MOVWF  FF8
01468:  CALL   13DE
0146C:  GOTO   80A8 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // read header data
....................     /*
....................     measured_time = get_current_sec(); // read time from timer0
....................     measured_pd = ad7490_read(ADC_PD); // read PD value
....................     measured_temp_top = ad7490_read(ADC_TEMP_TOP); // read temperature at top
....................     measured_temp_bot = ad7490_read(ADC_TEMP_BOT); // read temperature at bottom
....................     measured_open_voltage = ad7490_read(ADC_CIGS_VOLT); // read open voltage at CIGS
....................     */
....................       /*
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
0401E:  MOVLW  54
04020:  MOVWF  FF6
04022:  MOVLW  0B
04024:  MOVWF  FF7
04026:  MOVLW  00
04028:  MOVWF  FF8
0402A:  CALL   13DE
....................     output_high(CONNECT_CIGS1);
0402E:  BCF    F94.0
04030:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04032:  BCF    F94.7
04034:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
04036:  MOVLW  85
04038:  MOVWF  00
0403A:  DECFSZ 00,F
0403C:  BRA    403A
....................     fprintf(PC, "step, voltage, current\r\n");
0403E:  MOVLW  68
04040:  MOVWF  FF6
04042:  MOVLW  0B
04044:  MOVWF  FF7
04046:  MOVLW  00
04048:  MOVWF  FF8
0404A:  CALL   13DE
....................     mcp4901_1_write(0); // Initialize DAC to 0
0404E:  MOVLB  3
04050:  CLRF   x97
04052:  CLRF   x96
04054:  MOVLB  0
04056:  CALL   3DBA
....................     delay_ms(100); // wait for the DAC to stabilize
0405A:  MOVLW  64
0405C:  MOVLB  4
0405E:  MOVWF  xFB
04060:  MOVLB  0
04062:  CALL   135E
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
04066:  MOVLB  3
04068:  CLRF   x95
0406A:  MOVLB  0
0406C:  MOVLB  3
0406E:  MOVF   x90,W
04070:  SUBWF  x95,W
04072:  BTFSS  FD8.0
04074:  BRA    407C
04076:  MOVLB  0
04078:  GOTO   4142
0407C:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
0407E:  MOVLB  3
04080:  CLRF   x97
04082:  MOVFF  395,396
04086:  MOVLB  0
04088:  CALL   3DBA
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
0408C:  MOVLW  02
0408E:  MOVLB  3
04090:  MOVWF  x96
04092:  MOVLB  0
04094:  CALL   3E68
04098:  MOVFF  02,392
0409C:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
040A0:  MOVLW  01
040A2:  MOVLB  3
040A4:  MOVWF  x96
040A6:  MOVLB  0
040A8:  CALL   3E68
040AC:  MOVFF  02,394
040B0:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
040B4:  MOVFF  395,415
040B8:  MOVLW  1B
040BA:  MOVLB  4
040BC:  MOVWF  x16
040BE:  MOVLB  0
040C0:  CALL   3B54
040C4:  MOVLW  2C
040C6:  MOVLB  4
040C8:  MOVWF  xE6
040CA:  MOVLB  0
040CC:  CALL   138C
040D0:  MOVLW  20
040D2:  MOVLB  4
040D4:  MOVWF  xE6
040D6:  MOVLB  0
040D8:  CALL   138C
040DC:  MOVLW  10
040DE:  MOVWF  FE9
040E0:  MOVFF  392,397
040E4:  MOVFF  391,396
040E8:  CALL   3EF4
040EC:  MOVLW  2C
040EE:  MOVLB  4
040F0:  MOVWF  xE6
040F2:  MOVLB  0
040F4:  CALL   138C
040F8:  MOVLW  20
040FA:  MOVLB  4
040FC:  MOVWF  xE6
040FE:  MOVLB  0
04100:  CALL   138C
04104:  MOVLW  10
04106:  MOVWF  FE9
04108:  MOVFF  394,397
0410C:  MOVFF  393,396
04110:  CALL   3EF4
04114:  MOVLW  0D
04116:  MOVLB  4
04118:  MOVWF  xE6
0411A:  MOVLB  0
0411C:  CALL   138C
04120:  MOVLW  0A
04122:  MOVLB  4
04124:  MOVWF  xE6
04126:  MOVLB  0
04128:  CALL   138C
....................         delay_ms(1); // wait for the ADC to stabilize
0412C:  MOVLW  01
0412E:  MOVLB  4
04130:  MOVWF  xFB
04132:  MOVLB  0
04134:  CALL   135E
04138:  MOVLB  3
0413A:  INCF   x95,F
0413C:  MOVLB  0
0413E:  GOTO   406C
....................     }
04142:  GOTO   41BA (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
041D6:  MOVLB  3
041D8:  CLRF   x97
041DA:  CLRF   x96
041DC:  MOVLB  0
041DE:  CALL   3DBA
....................     fprintf(PC, "Start ADC TEST\r\n");
041E2:  MOVLW  82
041E4:  MOVWF  FF6
041E6:  MOVLW  0B
041E8:  MOVWF  FF7
041EA:  MOVLW  00
041EC:  MOVWF  FF8
041EE:  CALL   13DE
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
041F2:  MOVLB  3
041F4:  CLRF   x96
041F6:  MOVLB  0
041F8:  CALL   3E68
041FC:  MOVFF  02,38C
04200:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04204:  MOVLW  94
04206:  MOVWF  FF6
04208:  MOVLW  0B
0420A:  MOVWF  FF7
0420C:  MOVLW  00
0420E:  MOVWF  FF8
04210:  MOVLW  0D
04212:  MOVLB  4
04214:  MOVWF  x19
04216:  MOVLB  0
04218:  CALL   140E
0421C:  MOVFF  38C,4A4
04220:  MOVLW  37
04222:  MOVLB  4
04224:  MOVWF  xA5
04226:  MOVLB  0
04228:  CALL   1A16
0422C:  MOVFF  38B,4A4
04230:  MOVLW  37
04232:  MOVLB  4
04234:  MOVWF  xA5
04236:  MOVLB  0
04238:  CALL   1A16
0423C:  MOVLW  0D
0423E:  MOVLB  4
04240:  MOVWF  xE6
04242:  MOVLB  0
04244:  CALL   138C
04248:  MOVLW  0A
0424A:  MOVLB  4
0424C:  MOVWF  xE6
0424E:  MOVLB  0
04250:  CALL   138C
....................     ans = ad7490_read(ADC_CIGS1_CURR);
04254:  MOVLW  01
04256:  MOVLB  3
04258:  MOVWF  x96
0425A:  MOVLB  0
0425C:  CALL   3E68
04260:  MOVFF  02,38C
04264:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
04268:  MOVLW  AA
0426A:  MOVWF  FF6
0426C:  MOVLW  0B
0426E:  MOVWF  FF7
04270:  MOVLW  00
04272:  MOVWF  FF8
04274:  MOVLW  0D
04276:  MOVLB  4
04278:  MOVWF  x19
0427A:  MOVLB  0
0427C:  CALL   140E
04280:  MOVFF  38C,4A4
04284:  MOVLW  37
04286:  MOVLB  4
04288:  MOVWF  xA5
0428A:  MOVLB  0
0428C:  CALL   1A16
04290:  MOVFF  38B,4A4
04294:  MOVLW  37
04296:  MOVLB  4
04298:  MOVWF  xA5
0429A:  MOVLB  0
0429C:  CALL   1A16
042A0:  MOVLW  0D
042A2:  MOVLB  4
042A4:  MOVWF  xE6
042A6:  MOVLB  0
042A8:  CALL   138C
042AC:  MOVLW  0A
042AE:  MOVLB  4
042B0:  MOVWF  xE6
042B2:  MOVLB  0
042B4:  CALL   138C
....................     ans = ad7490_read(ADC_CIGS1_AMP);
042B8:  MOVLW  02
042BA:  MOVLB  3
042BC:  MOVWF  x96
042BE:  MOVLB  0
042C0:  CALL   3E68
042C4:  MOVFF  02,38C
042C8:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
042CC:  MOVLW  C0
042CE:  MOVWF  FF6
042D0:  MOVLW  0B
042D2:  MOVWF  FF7
042D4:  MOVLW  00
042D6:  MOVWF  FF8
042D8:  MOVLW  0F
042DA:  MOVLB  4
042DC:  MOVWF  x19
042DE:  MOVLB  0
042E0:  CALL   140E
042E4:  MOVFF  38C,4A4
042E8:  MOVLW  37
042EA:  MOVLB  4
042EC:  MOVWF  xA5
042EE:  MOVLB  0
042F0:  CALL   1A16
042F4:  MOVFF  38B,4A4
042F8:  MOVLW  37
042FA:  MOVLB  4
042FC:  MOVWF  xA5
042FE:  MOVLB  0
04300:  CALL   1A16
04304:  MOVLW  0D
04306:  MOVLB  4
04308:  MOVWF  xE6
0430A:  MOVLB  0
0430C:  CALL   138C
04310:  MOVLW  0A
04312:  MOVLB  4
04314:  MOVWF  xE6
04316:  MOVLB  0
04318:  CALL   138C
....................     ans = ad7490_read(ADC_CIGS1_VREF);
0431C:  MOVLW  03
0431E:  MOVLB  3
04320:  MOVWF  x96
04322:  MOVLB  0
04324:  CALL   3E68
04328:  MOVFF  02,38C
0432C:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
04330:  MOVLW  D8
04332:  MOVWF  FF6
04334:  MOVLW  0B
04336:  MOVWF  FF7
04338:  MOVLW  00
0433A:  MOVWF  FF8
0433C:  MOVLW  10
0433E:  MOVLB  4
04340:  MOVWF  x19
04342:  MOVLB  0
04344:  CALL   140E
04348:  MOVFF  38C,4A4
0434C:  MOVLW  37
0434E:  MOVLB  4
04350:  MOVWF  xA5
04352:  MOVLB  0
04354:  CALL   1A16
04358:  MOVFF  38B,4A4
0435C:  MOVLW  37
0435E:  MOVLB  4
04360:  MOVWF  xA5
04362:  MOVLB  0
04364:  CALL   1A16
04368:  MOVLW  0D
0436A:  MOVLB  4
0436C:  MOVWF  xE6
0436E:  MOVLB  0
04370:  CALL   138C
04374:  MOVLW  0A
04376:  MOVLB  4
04378:  MOVWF  xE6
0437A:  MOVLB  0
0437C:  CALL   138C
04380:  GOTO   5EB4 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... 
.................... 
.................... 
.................... 
.................... // Private Functions
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
02FC0:  GOTO   2338
02FC4:  MOVFF  03,49D
02FC8:  MOVFF  02,49C
02FCC:  MOVFF  01,49B
02FD0:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
02FD4:  MOVFF  49D,4A4
02FD8:  MOVLB  4
02FDA:  CLRF   xA5
02FDC:  CLRF   xA6
02FDE:  CLRF   xA7
02FE0:  MOVF   xA4,W
02FE2:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
02FE4:  MOVFF  49C,4A4
02FE8:  MOVFF  49D,4A5
02FEC:  CLRF   xA6
02FEE:  CLRF   xA7
02FF0:  MOVF   xA4,W
02FF2:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
02FF4:  MOVFF  49B,4A4
02FF8:  MOVFF  49C,4A5
02FFC:  MOVFF  49D,4A6
03000:  CLRF   xA7
03002:  MOVF   xA4,W
03004:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
03006:  MOVF   x9A,W
03008:  MOVWF  x97
....................     piclog[4] = function;            // Function code
0300A:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
0300E:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
03012:  MOVLW  F0
03014:  MOVWF  FF6
03016:  MOVLW  0B
03018:  MOVWF  FF7
0301A:  MOVLW  00
0301C:  MOVWF  FF8
0301E:  MOVLB  0
03020:  CALL   13DE
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
03024:  MOVLB  4
03026:  CLRF   x9E
03028:  MOVLB  0
0302A:  MOVLB  4
0302C:  MOVF   x9E,W
0302E:  SUBLW  05
03030:  BTFSC  FD8.0
03032:  BRA    303A
03034:  MOVLB  0
03036:  GOTO   3074
0303A:  MOVLB  0
....................             fprintf(PC, "%02X ", piclog[i]);
0303C:  CLRF   03
0303E:  MOVLB  4
03040:  MOVF   x9E,W
03042:  ADDLW  94
03044:  MOVWF  FE9
03046:  MOVLW  04
03048:  ADDWFC 03,W
0304A:  MOVWF  FEA
0304C:  MOVFF  FEF,4A3
03050:  MOVFF  4A3,4A4
03054:  MOVLW  37
03056:  MOVWF  xA5
03058:  MOVLB  0
0305A:  CALL   1A16
0305E:  MOVLW  20
03060:  MOVLB  4
03062:  MOVWF  xE6
03064:  MOVLB  0
03066:  CALL   138C
0306A:  MOVLB  4
0306C:  INCF   x9E,F
0306E:  MOVLB  0
03070:  GOTO   302A
....................         }
....................         fprintf(PC, "\r\n");
03074:  MOVLW  0D
03076:  MOVLB  4
03078:  MOVWF  xE6
0307A:  MOVLB  0
0307C:  CALL   138C
03080:  MOVLW  0A
03082:  MOVLB  4
03084:  MOVWF  xE6
03086:  MOVLB  0
03088:  CALL   138C
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
0308C:  MOVLB  3
0308E:  MOVF   x5D,W
03090:  MOVLB  4
03092:  MOVWF  x9F
03094:  MOVLB  3
03096:  MOVF   x5E,W
03098:  MOVLB  4
0309A:  MOVWF  xA0
0309C:  MOVLW  02
0309E:  MOVLB  3
030A0:  ADDWF  x5F,W
030A2:  MOVLB  4
030A4:  MOVWF  xA1
030A6:  MOVLW  00
030A8:  MOVLB  3
030AA:  ADDWFC x60,W
030AC:  MOVLB  4
030AE:  MOVWF  xA2
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
030B0:  MOVFF  E3,4E6
030B4:  MOVFF  E2,4E5
030B8:  MOVFF  E1,4E4
030BC:  MOVFF  E0,4E3
030C0:  MOVLB  0
030C2:  CALL   173E
030C6:  MOVF   01,F
030C8:  BTFSS  FD8.2
030CA:  GOTO   30E2
....................         fprintf(PC, "Mission Flash is not connected\r\n");
030CE:  MOVLW  FC
030D0:  MOVWF  FF6
030D2:  MOVLW  0B
030D4:  MOVWF  FF7
030D6:  MOVLW  00
030D8:  MOVWF  FF8
030DA:  CALL   13DE
....................         return;
030DE:  GOTO   31B2
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
030E2:  MOVFF  E3,4E6
030E6:  MOVFF  E2,4E5
030EA:  MOVFF  E1,4E4
030EE:  MOVFF  E0,4E3
030F2:  MOVFF  4A2,4EA
030F6:  MOVFF  4A1,4E9
030FA:  MOVFF  4A0,4E8
030FE:  MOVFF  49F,4E7
03102:  MOVLW  04
03104:  MOVLB  4
03106:  MOVWF  xEC
03108:  MOVLW  94
0310A:  MOVWF  xEB
0310C:  CLRF   xEE
0310E:  MOVLW  06
03110:  MOVWF  xED
03112:  MOVLB  0
03114:  CALL   2632
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
03118:  MOVLW  06
0311A:  MOVLB  3
0311C:  ADDWF  x5D,F
0311E:  MOVLW  00
03120:  ADDWFC x5E,F
03122:  MOVLW  00
03124:  ADDWFC x5F,F
03126:  MOVLW  00
03128:  ADDWFC x60,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
0312A:  MOVLW  06
0312C:  ADDWF  x62,F
0312E:  MOVLW  00
03130:  ADDWFC x63,F
03132:  MOVLW  00
03134:  ADDWFC x64,F
03136:  MOVLW  00
03138:  ADDWFC x65,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
0313A:  MOVLW  06
0313C:  ADDWF  x66,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
0313E:  MOVLW  06
03140:  ADDWF  x66,W
03142:  SUBLW  3F
03144:  BTFSS  FD8.0
03146:  BRA    314E
03148:  MOVLB  0
0314A:  GOTO   31AE
0314E:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
03150:  MOVLB  3
03152:  MOVF   x5D,W
03154:  MOVLB  4
03156:  MOVWF  x9F
03158:  MOVLB  3
0315A:  MOVF   x5E,W
0315C:  MOVLB  4
0315E:  MOVWF  xA0
03160:  MOVLW  02
03162:  MOVLB  3
03164:  ADDWF  x5F,W
03166:  MOVLB  4
03168:  MOVWF  xA1
0316A:  MOVLW  00
0316C:  MOVLB  3
0316E:  ADDWFC x60,W
03170:  MOVLB  4
03172:  MOVWF  xA2
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
03174:  MOVFF  E3,4E6
03178:  MOVFF  E2,4E5
0317C:  MOVFF  E1,4E4
03180:  MOVFF  E0,4E3
03184:  MOVFF  4A2,4EA
03188:  MOVFF  4A1,4E9
0318C:  MOVFF  4A0,4E8
03190:  MOVFF  49F,4E7
03194:  MOVLW  03
03196:  MOVWF  xEC
03198:  MOVLW  71
0319A:  MOVWF  xEB
0319C:  CLRF   xEE
0319E:  MOVLW  06
031A0:  MOVWF  xED
031A2:  MOVLB  0
031A4:  CALL   2632
....................         misf_piclog_write_counter = 0;
031A8:  MOVLB  3
031AA:  CLRF   x66
031AC:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
031AE:  GOTO   2D36
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
031B2:  RETURN 0
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
038D4:  MOVLW  1E
038D6:  MOVWF  FF6
038D8:  MOVLW  0C
038DA:  MOVWF  FF7
038DC:  MOVLW  00
038DE:  MOVWF  FF8
038E0:  CALL   13DE
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
038E4:  MOVLB  3
038E6:  MOVF   x8B,W
038E8:  MOVWF  FE9
038EA:  MOVF   x8C,W
038EC:  MOVWF  FEA
038EE:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
038F2:  MOVLW  01
038F4:  ADDWF  x8B,W
038F6:  MOVWF  FE9
038F8:  MOVLW  00
038FA:  ADDWFC x8C,W
038FC:  MOVWF  FEA
038FE:  MOVF   FEF,W
03900:  CLRF   x97
03902:  CLRF   x96
03904:  CLRF   x95
03906:  MOVWF  x94
03908:  MOVFF  394,397
0390C:  CLRF   x94
0390E:  CLRF   x95
03910:  CLRF   x96
03912:  MOVLW  02
03914:  ADDWF  x8B,W
03916:  MOVWF  FE9
03918:  MOVLW  00
0391A:  ADDWFC x8C,W
0391C:  MOVWF  FEA
0391E:  MOVF   FEF,W
03920:  CLRF   x9C
03922:  CLRF   x9B
03924:  CLRF   x9A
03926:  MOVWF  x99
03928:  MOVFF  39A,03
0392C:  MOVFF  399,02
03930:  CLRF   00
03932:  CLRF   01
03934:  MOVF   00,W
03936:  IORWF  x94,F
03938:  MOVF   01,W
0393A:  IORWF  x95,F
0393C:  MOVF   02,W
0393E:  IORWF  x96,F
03940:  MOVF   03,W
03942:  IORWF  x97,F
03944:  MOVLW  03
03946:  ADDWF  x8B,W
03948:  MOVWF  FE9
0394A:  MOVLW  00
0394C:  ADDWFC x8C,W
0394E:  MOVWF  FEA
03950:  MOVF   FEF,W
03952:  CLRF   x9C
03954:  CLRF   x9B
03956:  CLRF   x9A
03958:  MOVWF  x99
0395A:  MOVFF  39B,03
0395E:  MOVFF  39A,02
03962:  MOVFF  399,01
03966:  CLRF   00
03968:  MOVF   00,W
0396A:  IORWF  x94,F
0396C:  MOVF   01,W
0396E:  IORWF  x95,F
03970:  MOVF   02,W
03972:  IORWF  x96,F
03974:  MOVF   03,W
03976:  IORWF  x97,F
03978:  MOVLW  04
0397A:  ADDWF  x8B,W
0397C:  MOVWF  FE9
0397E:  MOVLW  00
03980:  ADDWFC x8C,W
03982:  MOVWF  FEA
03984:  MOVF   FEF,W
03986:  MOVWF  00
03988:  CLRF   01
0398A:  CLRF   02
0398C:  CLRF   03
0398E:  MOVF   00,W
03990:  IORWF  x94,W
03992:  MOVWF  x8E
03994:  MOVF   01,W
03996:  IORWF  x95,W
03998:  MOVWF  x8F
0399A:  MOVF   02,W
0399C:  IORWF  x96,W
0399E:  MOVWF  x90
039A0:  MOVF   03,W
039A2:  IORWF  x97,W
039A4:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
039A6:  MOVLW  05
039A8:  ADDWF  x8B,W
039AA:  MOVWF  FE9
039AC:  MOVLW  00
039AE:  ADDWFC x8C,W
039B0:  MOVWF  FEA
039B2:  MOVF   FEF,W
039B4:  CLRF   x95
039B6:  MOVWF  x94
039B8:  MOVFF  394,395
039BC:  CLRF   x94
039BE:  MOVLW  06
039C0:  ADDWF  x8B,W
039C2:  MOVWF  FE9
039C4:  MOVLW  00
039C6:  ADDWFC x8C,W
039C8:  MOVWF  FEA
039CA:  MOVF   FEF,W
039CC:  CLRF   03
039CE:  IORWF  x94,W
039D0:  MOVWF  x92
039D2:  MOVF   03,W
039D4:  IORWF  x95,W
039D6:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
039D8:  MOVLW  32
039DA:  MOVWF  FF6
039DC:  MOVLW  0C
039DE:  MOVWF  FF7
039E0:  MOVLW  00
039E2:  MOVWF  FF8
039E4:  MOVLW  0C
039E6:  MOVLB  4
039E8:  MOVWF  x19
039EA:  MOVLB  0
039EC:  CALL   140E
039F0:  MOVFF  38D,4A4
039F4:  MOVLW  37
039F6:  MOVLB  4
039F8:  MOVWF  xA5
039FA:  MOVLB  0
039FC:  CALL   1A16
03A00:  MOVLW  0D
03A02:  MOVLB  4
03A04:  MOVWF  xE6
03A06:  MOVLB  0
03A08:  CALL   138C
03A0C:  MOVLW  0A
03A0E:  MOVLB  4
03A10:  MOVWF  xE6
03A12:  MOVLB  0
03A14:  CALL   138C
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
03A18:  MOVLW  46
03A1A:  MOVWF  FF6
03A1C:  MOVLW  0C
03A1E:  MOVWF  FF7
03A20:  MOVLW  00
03A22:  MOVWF  FF8
03A24:  MOVLW  0E
03A26:  MOVLB  4
03A28:  MOVWF  x19
03A2A:  MOVLB  0
03A2C:  CALL   140E
03A30:  MOVFF  391,4A4
03A34:  MOVLW  37
03A36:  MOVLB  4
03A38:  MOVWF  xA5
03A3A:  MOVLB  0
03A3C:  CALL   1A16
03A40:  MOVFF  390,4A4
03A44:  MOVLW  37
03A46:  MOVLB  4
03A48:  MOVWF  xA5
03A4A:  MOVLB  0
03A4C:  CALL   1A16
03A50:  MOVFF  38F,4A4
03A54:  MOVLW  37
03A56:  MOVLB  4
03A58:  MOVWF  xA5
03A5A:  MOVLB  0
03A5C:  CALL   1A16
03A60:  MOVFF  38E,4A4
03A64:  MOVLW  37
03A66:  MOVLB  4
03A68:  MOVWF  xA5
03A6A:  MOVLB  0
03A6C:  CALL   1A16
03A70:  MOVLW  0D
03A72:  MOVLB  4
03A74:  MOVWF  xE6
03A76:  MOVLB  0
03A78:  CALL   138C
03A7C:  MOVLW  0A
03A7E:  MOVLB  4
03A80:  MOVWF  xE6
03A82:  MOVLB  0
03A84:  CALL   138C
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
03A88:  MOVLW  5C
03A8A:  MOVWF  FF6
03A8C:  MOVLW  0C
03A8E:  MOVWF  FF7
03A90:  MOVLW  00
03A92:  MOVWF  FF8
03A94:  MOVLW  0E
03A96:  MOVLB  4
03A98:  MOVWF  x19
03A9A:  MOVLB  0
03A9C:  CALL   140E
03AA0:  MOVFF  393,4A4
03AA4:  MOVLW  37
03AA6:  MOVLB  4
03AA8:  MOVWF  xA5
03AAA:  MOVLB  0
03AAC:  CALL   1A16
03AB0:  MOVFF  392,4A4
03AB4:  MOVLW  37
03AB6:  MOVLB  4
03AB8:  MOVWF  xA5
03ABA:  MOVLB  0
03ABC:  CALL   1A16
03AC0:  MOVLW  0D
03AC2:  MOVLB  4
03AC4:  MOVWF  xE6
03AC6:  MOVLB  0
03AC8:  CALL   138C
03ACC:  MOVLW  0A
03ACE:  MOVLB  4
03AD0:  MOVWF  xE6
03AD2:  MOVLB  0
03AD4:  CALL   138C
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
03AD8:  MOVFF  38D,492
03ADC:  MOVLW  01
03ADE:  MOVLB  4
03AE0:  MOVWF  x93
03AE2:  MOVLB  0
03AE4:  CALL   2FC0
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
03AE8:  MOVFF  38D,492
03AEC:  MOVLW  02
03AEE:  MOVLB  4
03AF0:  MOVWF  x93
03AF2:  MOVLB  0
03AF4:  CALL   2FC0
....................    fprintf(PC, "End MODE DUMMY\r\n");
03AF8:  MOVLW  72
03AFA:  MOVWF  FF6
03AFC:  MOVLW  0C
03AFE:  MOVWF  FF7
03B00:  MOVLW  00
03B02:  MOVWF  FF8
03B04:  CALL   13DE
03B08:  GOTO   5E9C (RETURN)
.................... }
.................... 
.................... #separate
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
04146:  MOVLW  01
04148:  MOVLB  3
0414A:  ADDWF  x8B,W
0414C:  MOVWF  FE9
0414E:  MOVLW  00
04150:  ADDWFC x8C,W
04152:  MOVWF  FEA
04154:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
04158:  MOVLW  84
0415A:  MOVWF  FF6
0415C:  MOVLW  0C
0415E:  MOVWF  FF7
04160:  MOVLW  00
04162:  MOVWF  FF8
04164:  MOVLB  0
04166:  CALL   13DE
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
0416A:  MOVLW  9A
0416C:  MOVWF  FF6
0416E:  MOVLW  0C
04170:  MOVWF  FF7
04172:  MOVLW  00
04174:  MOVWF  FF8
04176:  MOVLW  0E
04178:  MOVLB  4
0417A:  MOVWF  x19
0417C:  MOVLB  0
0417E:  CALL   140E
04182:  MOVFF  38D,415
04186:  MOVLW  1B
04188:  MOVLB  4
0418A:  MOVWF  x16
0418C:  MOVLB  0
0418E:  CALL   3B54
04192:  MOVLW  0D
04194:  MOVLB  4
04196:  MOVWF  xE6
04198:  MOVLB  0
0419A:  CALL   138C
0419E:  MOVLW  0A
041A0:  MOVLB  4
041A2:  MOVWF  xE6
041A4:  MOVLB  0
041A6:  CALL   138C
....................    output_high(CONNECT_CIGS1);
041AA:  BCF    F94.0
041AC:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
041AE:  BCF    F94.7
041B0:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
041B2:  MOVFF  38B,390
041B6:  GOTO   401E
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
041BA:  MOVLW  AE
041BC:  MOVWF  FF6
041BE:  MOVLW  0C
041C0:  MOVWF  FF7
041C2:  MOVLW  00
041C4:  MOVWF  FF8
041C6:  CALL   13DE
....................    output_low(CONNECT_CIGS1);
041CA:  BCF    F94.0
041CC:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
041CE:  BCF    F94.7
041D0:  BSF    F8B.7
041D2:  GOTO   5EAC (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
04384:  MOVLW  C2
04386:  MOVWF  FF6
04388:  MOVLW  0C
0438A:  MOVWF  FF7
0438C:  MOVLW  00
0438E:  MOVWF  FF8
04390:  CALL   13DE
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
04394:  MOVLB  3
04396:  MOVF   x8B,W
04398:  MOVWF  FE9
0439A:  MOVF   x8C,W
0439C:  MOVWF  FEA
0439E:  MOVFF  FEF,38D
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
043A2:  MOVF   x8B,W
043A4:  MOVWF  FE9
043A6:  MOVF   x8C,W
043A8:  MOVWF  FEA
043AA:  MOVFF  FEF,38F
043AE:  MOVFF  38F,492
043B2:  MOVLW  01
043B4:  MOVLB  4
043B6:  MOVWF  x93
043B8:  MOVLB  0
043BA:  CALL   2FC0
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
043BE:  MOVLB  3
043C0:  CLRF   x8E
043C2:  MOVLB  0
043C4:  MOVLB  3
043C6:  MOVF   x8E,W
043C8:  SUBLW  27
043CA:  BTFSC  FD8.0
043CC:  BRA    43D4
043CE:  MOVLB  0
043D0:  GOTO   4518
043D4:  MOVLB  0
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
043D6:  MOVLW  64
043D8:  MOVLB  4
043DA:  MOVWF  xFB
043DC:  MOVLB  0
043DE:  CALL   135E
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
043E2:  BCF    FD8.0
043E4:  MOVLB  3
043E6:  RLCF   x8E,W
043E8:  CLRF   03
043EA:  MOVWF  02
043EC:  BCF    FD8.0
043EE:  RLCF   02,F
043F0:  RLCF   03,F
043F2:  MOVF   02,W
043F4:  ADDLW  EF
043F6:  MOVWF  01
043F8:  MOVLW  00
043FA:  ADDWFC 03,F
043FC:  MOVF   01,W
043FE:  MOVWF  x8F
04400:  MOVFF  03,390
04404:  CLRF   x96
04406:  MOVLB  0
04408:  CALL   3E68
0440C:  MOVFF  390,FEA
04410:  MOVFF  38F,FE9
04414:  MOVFF  02,FEC
04418:  MOVF   FED,F
0441A:  MOVFF  01,FEF
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
0441E:  BCF    FD8.0
04420:  MOVLB  3
04422:  RLCF   x8E,W
04424:  ADDLW  01
04426:  CLRF   03
04428:  MOVWF  02
0442A:  BCF    FD8.0
0442C:  RLCF   02,F
0442E:  RLCF   03,F
04430:  MOVF   02,W
04432:  ADDLW  EF
04434:  MOVWF  01
04436:  MOVLW  00
04438:  ADDWFC 03,F
0443A:  MOVF   01,W
0443C:  MOVWF  x8F
0443E:  MOVFF  03,390
04442:  MOVLW  01
04444:  MOVWF  x96
04446:  MOVLB  0
04448:  CALL   3E68
0444C:  MOVFF  390,FEA
04450:  MOVFF  38F,FE9
04454:  MOVFF  02,FEC
04458:  MOVF   FED,F
0445A:  MOVFF  01,FEF
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
0445E:  BCF    FD8.0
04460:  MOVLB  3
04462:  RLCF   x8E,W
04464:  CLRF   03
04466:  MOVWF  02
04468:  BCF    FD8.0
0446A:  RLCF   02,F
0446C:  RLCF   03,F
0446E:  MOVF   02,W
04470:  ADDLW  EF
04472:  MOVWF  FE9
04474:  MOVLW  00
04476:  ADDWFC 03,W
04478:  MOVWF  FEA
0447A:  MOVFF  FEC,390
0447E:  MOVF   FED,F
04480:  MOVFF  FEF,38F
04484:  BCF    FD8.0
04486:  RLCF   x8E,W
04488:  ADDLW  01
0448A:  CLRF   03
0448C:  MOVWF  02
0448E:  BCF    FD8.0
04490:  RLCF   02,F
04492:  RLCF   03,F
04494:  MOVF   02,W
04496:  ADDLW  EF
04498:  MOVWF  FE9
0449A:  MOVLW  00
0449C:  ADDWFC 03,W
0449E:  MOVWF  FEA
044A0:  MOVFF  FEC,392
044A4:  MOVF   FED,F
044A6:  MOVFF  FEF,391
044AA:  MOVFF  390,4A4
044AE:  MOVLW  37
044B0:  MOVLB  4
044B2:  MOVWF  xA5
044B4:  MOVLB  0
044B6:  CALL   1A16
044BA:  MOVFF  38F,4A4
044BE:  MOVLW  37
044C0:  MOVLB  4
044C2:  MOVWF  xA5
044C4:  MOVLB  0
044C6:  CALL   1A16
044CA:  MOVLW  2C
044CC:  MOVLB  4
044CE:  MOVWF  xE6
044D0:  MOVLB  0
044D2:  CALL   138C
044D6:  MOVFF  392,4A4
044DA:  MOVLW  37
044DC:  MOVLB  4
044DE:  MOVWF  xA5
044E0:  MOVLB  0
044E2:  CALL   1A16
044E6:  MOVFF  391,4A4
044EA:  MOVLW  37
044EC:  MOVLB  4
044EE:  MOVWF  xA5
044F0:  MOVLB  0
044F2:  CALL   1A16
044F6:  MOVLW  0D
044F8:  MOVLB  4
044FA:  MOVWF  xE6
044FC:  MOVLB  0
044FE:  CALL   138C
04502:  MOVLW  0A
04504:  MOVLB  4
04506:  MOVWF  xE6
04508:  MOVLB  0
0450A:  CALL   138C
0450E:  MOVLB  3
04510:  INCF   x8E,F
04512:  MOVLB  0
04514:  GOTO   43C4
....................    }
04518:  GOTO   5EC4 (RETURN)
....................    
....................    
.................... }
.................... 
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
05B9A:  MOVLW  D8
05B9C:  MOVWF  FF6
05B9E:  MOVLW  0C
05BA0:  MOVWF  FF7
05BA2:  MOVLW  00
05BA4:  MOVWF  FF8
05BA6:  CALL   13DE
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
05BAA:  MOVLW  64
05BAC:  MOVLB  3
05BAE:  MOVWF  x8B
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
05BB0:  MOVLW  E6
05BB2:  MOVWF  FF6
05BB4:  MOVLW  0C
05BB6:  MOVWF  FF7
05BB8:  MOVLW  00
05BBA:  MOVWF  FF8
05BBC:  MOVLW  0E
05BBE:  MOVLB  4
05BC0:  MOVWF  x19
05BC2:  MOVLB  0
05BC4:  CALL   140E
05BC8:  MOVFF  38B,415
05BCC:  MOVLW  1B
05BCE:  MOVLB  4
05BD0:  MOVWF  x16
05BD2:  MOVLB  0
05BD4:  CALL   3B54
05BD8:  MOVLW  0D
05BDA:  MOVLB  4
05BDC:  MOVWF  xE6
05BDE:  MOVLB  0
05BE0:  CALL   138C
05BE4:  MOVLW  0A
05BE6:  MOVLB  4
05BE8:  MOVWF  xE6
05BEA:  MOVLB  0
05BEC:  CALL   138C
....................    output_high(CONNECT_CIGS1);
05BF0:  BCF    F94.0
05BF2:  BSF    F8B.0
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
05BF4:  MOVLW  0D
05BF6:  MOVWF  00
05BF8:  DECFSZ 00,F
05BFA:  BRA    5BF8
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
05BFC:  MOVLB  3
05BFE:  CLRF   x96
05C00:  MOVLB  0
05C02:  CALL   3E68
05C06:  MOVFF  02,350
05C0A:  MOVFF  01,34F
....................    delay_us(10); // wait for the ADC to stabilize
05C0E:  MOVLW  0D
05C10:  MOVWF  00
05C12:  DECFSZ 00,F
05C14:  BRA    5C12
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
05C16:  MOVLB  3
05C18:  CLRF   x96
05C1A:  MOVLB  0
05C1C:  CALL   3E68
05C20:  MOVFF  02,352
05C24:  MOVFF  01,351
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
05C28:  MOVLW  0D
05C2A:  MOVWF  00
05C2C:  DECFSZ 00,F
05C2E:  BRA    5C2C
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
05C30:  MOVLB  3
05C32:  CLRF   x91
05C34:  CLRF   x90
05C36:  MOVLB  0
05C38:  MOVLB  3
05C3A:  MOVF   x91,F
05C3C:  BTFSC  FD8.2
05C3E:  BRA    5C46
05C40:  MOVLB  0
05C42:  GOTO   5D80
05C46:  MOVLB  0
05C48:  MOVLB  3
05C4A:  MOVF   x8B,W
05C4C:  SUBWF  x90,W
05C4E:  BTFSS  FD8.0
05C50:  BRA    5C58
05C52:  MOVLB  0
05C54:  GOTO   5D80
05C58:  MOVLB  0
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
05C5A:  MOVLW  85
05C5C:  MOVWF  00
05C5E:  DECFSZ 00,F
05C60:  BRA    5C5E
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
05C62:  MOVLW  0D
05C64:  MOVWF  00
05C66:  DECFSZ 00,F
05C68:  BRA    5C66
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
05C6A:  BCF    FD8.0
05C6C:  MOVLB  3
05C6E:  RLCF   x90,W
05C70:  MOVWF  x93
05C72:  RLCF   x91,W
05C74:  MOVWF  x94
05C76:  BCF    FD8.0
05C78:  RLCF   x93,W
05C7A:  MOVWF  02
05C7C:  RLCF   x94,W
05C7E:  MOVWF  03
05C80:  MOVF   02,W
05C82:  ADDLW  EF
05C84:  MOVWF  01
05C86:  MOVLW  00
05C88:  ADDWFC 03,F
05C8A:  MOVF   01,W
05C8C:  MOVWF  x93
05C8E:  MOVFF  03,394
05C92:  CLRF   x96
05C94:  MOVLB  0
05C96:  CALL   3E68
05C9A:  MOVFF  394,FEA
05C9E:  MOVFF  393,FE9
05CA2:  MOVFF  02,FEC
05CA6:  MOVF   FED,F
05CA8:  MOVFF  01,FEF
....................       
....................       current = 0; // reset current value
05CAC:  MOVLB  3
05CAE:  CLRF   x8F
05CB0:  CLRF   x8E
05CB2:  CLRF   x8D
05CB4:  CLRF   x8C
....................       for(int k=0; k<10; k++)
05CB6:  CLRF   x92
05CB8:  MOVLB  0
05CBA:  MOVLB  3
05CBC:  MOVF   x92,W
05CBE:  SUBLW  09
05CC0:  BTFSC  FD8.0
05CC2:  BRA    5CCA
05CC4:  MOVLB  0
05CC6:  GOTO   5D00
05CCA:  MOVLB  0
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
05CCC:  MOVLW  0D
05CCE:  MOVWF  00
05CD0:  DECFSZ 00,F
05CD2:  BRA    5CD0
....................             current = current + ad7490_read(AD7490_VIN0); 
05CD4:  MOVLB  3
05CD6:  CLRF   x96
05CD8:  MOVLB  0
05CDA:  CALL   3E68
05CDE:  MOVFF  02,03
05CE2:  MOVF   01,W
05CE4:  MOVLB  3
05CE6:  ADDWF  x8C,F
05CE8:  MOVF   03,W
05CEA:  ADDWFC x8D,F
05CEC:  MOVLW  00
05CEE:  ADDWFC x8E,F
05CF0:  MOVLW  00
05CF2:  ADDWFC x8F,F
05CF4:  MOVLB  0
05CF6:  MOVLB  3
05CF8:  INCF   x92,F
05CFA:  MOVLB  0
05CFC:  GOTO   5CBA
....................       }    
....................       
....................       current = current / 10; // average the current value
05D00:  BCF    FD8.1
05D02:  MOVFF  38F,424
05D06:  MOVFF  38E,423
05D0A:  MOVFF  38D,422
05D0E:  MOVFF  38C,421
05D12:  MOVLB  4
05D14:  CLRF   x28
05D16:  CLRF   x27
05D18:  CLRF   x26
05D1A:  MOVLW  0A
05D1C:  MOVWF  x25
05D1E:  MOVLB  0
05D20:  CALL   5AC0
05D24:  MOVFF  03,38F
05D28:  MOVFF  02,38E
05D2C:  MOVFF  01,38D
05D30:  MOVFF  00,38C
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
05D34:  MOVLW  0D
05D36:  MOVWF  00
05D38:  DECFSZ 00,F
05D3A:  BRA    5D38
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
05D3C:  BCF    FD8.0
05D3E:  MOVLB  3
05D40:  RLCF   x90,W
05D42:  MOVWF  x93
05D44:  RLCF   x91,W
05D46:  MOVWF  x94
05D48:  MOVLW  01
05D4A:  ADDWF  x93,F
05D4C:  MOVLW  00
05D4E:  ADDWFC x94,F
05D50:  BCF    FD8.0
05D52:  RLCF   x93,W
05D54:  MOVWF  02
05D56:  RLCF   x94,W
05D58:  MOVWF  03
05D5A:  MOVF   02,W
05D5C:  ADDLW  EF
05D5E:  MOVWF  FE9
05D60:  MOVLW  00
05D62:  ADDWFC 03,W
05D64:  MOVWF  FEA
05D66:  MOVFF  38C,FEF
05D6A:  MOVFF  38D,FEC
05D6E:  MOVF   FED,F
05D70:  MOVLB  0
05D72:  MOVLB  3
05D74:  INCF   x90,F
05D76:  BTFSC  FD8.2
05D78:  INCF   x91,F
05D7A:  MOVLB  0
05D7C:  GOTO   5C38
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
05D80:  MOVLW  FA
05D82:  MOVWF  FF6
05D84:  MOVLW  0C
05D86:  MOVWF  FF7
05D88:  MOVLW  00
05D8A:  MOVWF  FF8
05D8C:  CALL   13DE
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
05D90:  BCF    F94.0
05D92:  BCF    F8B.0
05D94:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... 
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_smf_read(unsigned int8 parameter[]);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FLASH_ERASE_64kByte_SUBSECTOR 0x93
.................... #define ID_FALSH_WRITE_DEMO 0x94
.................... #define ID_FLASH_WRITE_4kByte_SUBSECTOR 0x95
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_SMF_READ 0x9B
.................... #define ID_FLASH_SMF_ERASE 0x9C
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... 
.................... 
.................... #include "src/mmj_cigs_mode_flash.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== Flash Command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
04888:  MOVLW  06
0488A:  MOVWF  FF6
0488C:  MOVLW  0D
0488E:  MOVWF  FF7
04890:  MOVLW  00
04892:  MOVWF  FF8
04894:  CALL   13DE
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
04898:  MOVLB  3
0489A:  MOVF   x8B,W
0489C:  MOVWF  FE9
0489E:  MOVF   x8C,W
048A0:  MOVWF  FEA
048A2:  MOVFF  FEF,38D
....................    piclog_make(cmd, 0x00); // Log the command execution
048A6:  MOVFF  38D,492
048AA:  MOVLB  4
048AC:  CLRF   x93
048AE:  MOVLB  0
048B0:  CALL   2FC0
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
048B4:  MOVLB  3
048B6:  CLRF   x91
048B8:  CLRF   x90
048BA:  CLRF   x8F
048BC:  CLRF   x8E
048BE:  MOVLB  0
048C0:  MOVLB  3
048C2:  MOVF   x91,F
048C4:  BTFSC  FD8.2
048C6:  BRA    48CE
048C8:  MOVLB  0
048CA:  GOTO   492E
048CE:  MOVLB  0
048D0:  MOVLB  3
048D2:  MOVF   x90,W
048D4:  SUBLW  F4
048D6:  BTFSC  FD8.0
048D8:  BRA    48E0
048DA:  MOVLB  0
048DC:  GOTO   492E
048E0:  MOVLB  0
048E2:  BTFSS  FD8.2
048E4:  GOTO   48FA
048E8:  MOVLB  3
048EA:  MOVF   x8F,W
048EC:  SUBLW  23
048EE:  BTFSC  FD8.0
048F0:  BRA    48F8
048F2:  MOVLB  0
048F4:  GOTO   492E
048F8:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
048FA:  MOVFF  E3,395
048FE:  MOVFF  E2,394
04902:  MOVFF  E1,393
04906:  MOVFF  E0,392
0490A:  MOVFF  391,399
0490E:  MOVFF  390,398
04912:  MOVFF  38F,397
04916:  MOVFF  38E,396
0491A:  CALL   451C
0491E:  MOVLW  01
04920:  MOVLB  3
04922:  ADDWF  x90,F
04924:  MOVLW  00
04926:  ADDWFC x91,F
04928:  MOVLB  0
0492A:  GOTO   48C0
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0492E:  MOVFF  38D,492
04932:  MOVLW  02
04934:  MOVLB  4
04936:  MOVWF  x93
04938:  MOVLB  0
0493A:  CALL   2FC0
....................    fprintf(PC, "End Flash Erase All\r\n");
0493E:  MOVLW  1E
04940:  MOVWF  FF6
04942:  MOVLW  0D
04944:  MOVWF  FF7
04946:  MOVLW  00
04948:  MOVWF  FF8
0494A:  CALL   13DE
0494E:  GOTO   5ED8 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
04952:  MOVLW  34
04954:  MOVWF  FF6
04956:  MOVLW  0D
04958:  MOVWF  FF7
0495A:  MOVLW  00
0495C:  MOVWF  FF8
0495E:  CALL   13DE
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04962:  MOVLB  3
04964:  MOVF   x8B,W
04966:  MOVWF  FE9
04968:  MOVF   x8C,W
0496A:  MOVWF  FEA
0496C:  MOVFF  FEF,38D
04970:  MOVLW  01
04972:  ADDWF  x8B,W
04974:  MOVWF  FE9
04976:  MOVLW  00
04978:  ADDWFC x8C,W
0497A:  MOVWF  FEA
0497C:  MOVF   FEF,W
0497E:  CLRF   x95
04980:  CLRF   x94
04982:  CLRF   x93
04984:  MOVWF  x92
04986:  MOVFF  392,395
0498A:  CLRF   x92
0498C:  CLRF   x93
0498E:  CLRF   x94
04990:  MOVLW  02
04992:  ADDWF  x8B,W
04994:  MOVWF  FE9
04996:  MOVLW  00
04998:  ADDWFC x8C,W
0499A:  MOVWF  FEA
0499C:  MOVF   FEF,W
0499E:  CLRF   x9A
049A0:  CLRF   x99
049A2:  CLRF   x98
049A4:  MOVWF  x97
049A6:  MOVFF  398,03
049AA:  MOVFF  397,02
049AE:  CLRF   00
049B0:  CLRF   01
049B2:  MOVF   00,W
049B4:  IORWF  x92,F
049B6:  MOVF   01,W
049B8:  IORWF  x93,F
049BA:  MOVF   02,W
049BC:  IORWF  x94,F
049BE:  MOVF   03,W
049C0:  IORWF  x95,F
049C2:  MOVLW  03
049C4:  ADDWF  x8B,W
049C6:  MOVWF  FE9
049C8:  MOVLW  00
049CA:  ADDWFC x8C,W
049CC:  MOVWF  FEA
049CE:  MOVF   FEF,W
049D0:  CLRF   x9A
049D2:  CLRF   x99
049D4:  CLRF   x98
049D6:  MOVWF  x97
049D8:  MOVFF  399,03
049DC:  MOVFF  398,02
049E0:  MOVFF  397,01
049E4:  CLRF   00
049E6:  MOVF   00,W
049E8:  IORWF  x92,F
049EA:  MOVF   01,W
049EC:  IORWF  x93,F
049EE:  MOVF   02,W
049F0:  IORWF  x94,F
049F2:  MOVF   03,W
049F4:  IORWF  x95,F
049F6:  MOVLW  04
049F8:  ADDWF  x8B,W
049FA:  MOVWF  FE9
049FC:  MOVLW  00
049FE:  ADDWFC x8C,W
04A00:  MOVWF  FEA
04A02:  MOVF   FEF,W
04A04:  MOVWF  00
04A06:  CLRF   01
04A08:  CLRF   02
04A0A:  CLRF   03
04A0C:  MOVF   00,W
04A0E:  IORWF  x92,W
04A10:  MOVWF  x8E
04A12:  MOVF   01,W
04A14:  IORWF  x93,W
04A16:  MOVWF  x8F
04A18:  MOVF   02,W
04A1A:  IORWF  x94,W
04A1C:  MOVWF  x90
04A1E:  MOVF   03,W
04A20:  IORWF  x95,W
04A22:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
04A24:  MOVLW  52
04A26:  MOVWF  FF6
04A28:  MOVLW  0D
04A2A:  MOVWF  FF7
04A2C:  MOVLW  00
04A2E:  MOVWF  FF8
04A30:  MOVLW  13
04A32:  MOVLB  4
04A34:  MOVWF  x19
04A36:  MOVLB  0
04A38:  CALL   140E
04A3C:  MOVFF  391,4A4
04A40:  MOVLW  37
04A42:  MOVLB  4
04A44:  MOVWF  xA5
04A46:  MOVLB  0
04A48:  CALL   1A16
04A4C:  MOVFF  390,4A4
04A50:  MOVLW  37
04A52:  MOVLB  4
04A54:  MOVWF  xA5
04A56:  MOVLB  0
04A58:  CALL   1A16
04A5C:  MOVFF  38F,4A4
04A60:  MOVLW  37
04A62:  MOVLB  4
04A64:  MOVWF  xA5
04A66:  MOVLB  0
04A68:  CALL   1A16
04A6C:  MOVFF  38E,4A4
04A70:  MOVLW  37
04A72:  MOVLB  4
04A74:  MOVWF  xA5
04A76:  MOVLB  0
04A78:  CALL   1A16
04A7C:  MOVLW  0D
04A7E:  MOVLB  4
04A80:  MOVWF  xE6
04A82:  MOVLB  0
04A84:  CALL   138C
04A88:  MOVLW  0A
04A8A:  MOVLB  4
04A8C:  MOVWF  xE6
04A8E:  MOVLB  0
04A90:  CALL   138C
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04A94:  MOVFF  38D,492
04A98:  MOVLW  01
04A9A:  MOVLB  4
04A9C:  MOVWF  x93
04A9E:  MOVLB  0
04AA0:  CALL   2FC0
....................    
....................    sector_erase(mis_fm, sector_address);
04AA4:  MOVFF  E3,395
04AA8:  MOVFF  E2,394
04AAC:  MOVFF  E1,393
04AB0:  MOVFF  E0,392
04AB4:  MOVFF  391,399
04AB8:  MOVFF  390,398
04ABC:  MOVFF  38F,397
04AC0:  MOVFF  38E,396
04AC4:  CALL   451C
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04AC8:  MOVFF  38D,492
04ACC:  MOVLW  02
04ACE:  MOVLB  4
04AD0:  MOVWF  x93
04AD2:  MOVLB  0
04AD4:  CALL   2FC0
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
04AD8:  MOVLW  6E
04ADA:  MOVWF  FF6
04ADC:  MOVLW  0D
04ADE:  MOVWF  FF7
04AE0:  MOVLW  00
04AE2:  MOVWF  FF8
04AE4:  CALL   13DE
04AE8:  GOTO   5EE8 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
04AEC:  MOVLW  8A
04AEE:  MOVWF  FF6
04AF0:  MOVLW  0D
04AF2:  MOVWF  FF7
04AF4:  MOVLW  00
04AF6:  MOVWF  FF8
04AF8:  CALL   13DE
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
04AFC:  MOVLB  3
04AFE:  MOVF   x8B,W
04B00:  MOVWF  FE9
04B02:  MOVF   x8C,W
04B04:  MOVWF  FEA
04B06:  MOVFF  FEF,38D
04B0A:  MOVLW  01
04B0C:  ADDWF  x8B,W
04B0E:  MOVWF  FE9
04B10:  MOVLW  00
04B12:  ADDWFC x8C,W
04B14:  MOVWF  FEA
04B16:  MOVF   FEF,W
04B18:  CLRF   x95
04B1A:  CLRF   x94
04B1C:  CLRF   x93
04B1E:  MOVWF  x92
04B20:  MOVFF  392,395
04B24:  CLRF   x92
04B26:  CLRF   x93
04B28:  CLRF   x94
04B2A:  MOVLW  02
04B2C:  ADDWF  x8B,W
04B2E:  MOVWF  FE9
04B30:  MOVLW  00
04B32:  ADDWFC x8C,W
04B34:  MOVWF  FEA
04B36:  MOVF   FEF,W
04B38:  CLRF   x9A
04B3A:  CLRF   x99
04B3C:  CLRF   x98
04B3E:  MOVWF  x97
04B40:  MOVFF  398,03
04B44:  MOVFF  397,02
04B48:  CLRF   00
04B4A:  CLRF   01
04B4C:  MOVF   00,W
04B4E:  IORWF  x92,F
04B50:  MOVF   01,W
04B52:  IORWF  x93,F
04B54:  MOVF   02,W
04B56:  IORWF  x94,F
04B58:  MOVF   03,W
04B5A:  IORWF  x95,F
04B5C:  MOVLW  03
04B5E:  ADDWF  x8B,W
04B60:  MOVWF  FE9
04B62:  MOVLW  00
04B64:  ADDWFC x8C,W
04B66:  MOVWF  FEA
04B68:  MOVF   FEF,W
04B6A:  CLRF   x9A
04B6C:  CLRF   x99
04B6E:  CLRF   x98
04B70:  MOVWF  x97
04B72:  MOVFF  399,03
04B76:  MOVFF  398,02
04B7A:  MOVFF  397,01
04B7E:  CLRF   00
04B80:  MOVF   00,W
04B82:  IORWF  x92,F
04B84:  MOVF   01,W
04B86:  IORWF  x93,F
04B88:  MOVF   02,W
04B8A:  IORWF  x94,F
04B8C:  MOVF   03,W
04B8E:  IORWF  x95,F
04B90:  MOVLW  04
04B92:  ADDWF  x8B,W
04B94:  MOVWF  FE9
04B96:  MOVLW  00
04B98:  ADDWFC x8C,W
04B9A:  MOVWF  FEA
04B9C:  MOVF   FEF,W
04B9E:  MOVWF  00
04BA0:  CLRF   01
04BA2:  CLRF   02
04BA4:  CLRF   03
04BA6:  MOVF   00,W
04BA8:  IORWF  x92,W
04BAA:  MOVWF  x8E
04BAC:  MOVF   01,W
04BAE:  IORWF  x93,W
04BB0:  MOVWF  x8F
04BB2:  MOVF   02,W
04BB4:  IORWF  x94,W
04BB6:  MOVWF  x90
04BB8:  MOVF   03,W
04BBA:  IORWF  x95,W
04BBC:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
04BBE:  MOVLW  A6
04BC0:  MOVWF  FF6
04BC2:  MOVLW  0D
04BC4:  MOVWF  FF7
04BC6:  MOVLW  00
04BC8:  MOVWF  FF8
04BCA:  MOVLW  16
04BCC:  MOVLB  4
04BCE:  MOVWF  x19
04BD0:  MOVLB  0
04BD2:  CALL   140E
04BD6:  MOVFF  391,4A4
04BDA:  MOVLW  37
04BDC:  MOVLB  4
04BDE:  MOVWF  xA5
04BE0:  MOVLB  0
04BE2:  CALL   1A16
04BE6:  MOVFF  390,4A4
04BEA:  MOVLW  37
04BEC:  MOVLB  4
04BEE:  MOVWF  xA5
04BF0:  MOVLB  0
04BF2:  CALL   1A16
04BF6:  MOVFF  38F,4A4
04BFA:  MOVLW  37
04BFC:  MOVLB  4
04BFE:  MOVWF  xA5
04C00:  MOVLB  0
04C02:  CALL   1A16
04C06:  MOVFF  38E,4A4
04C0A:  MOVLW  37
04C0C:  MOVLB  4
04C0E:  MOVWF  xA5
04C10:  MOVLB  0
04C12:  CALL   1A16
04C16:  MOVLW  0D
04C18:  MOVLB  4
04C1A:  MOVWF  xE6
04C1C:  MOVLB  0
04C1E:  CALL   138C
04C22:  MOVLW  0A
04C24:  MOVLB  4
04C26:  MOVWF  xE6
04C28:  MOVLB  0
04C2A:  CALL   138C
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
04C2E:  MOVFF  38D,492
04C32:  MOVLW  01
04C34:  MOVLB  4
04C36:  MOVWF  x93
04C38:  MOVLB  0
04C3A:  CALL   2FC0
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
04C3E:  MOVFF  E3,4E6
04C42:  MOVFF  E2,4E5
04C46:  MOVFF  E1,4E4
04C4A:  MOVFF  E0,4E3
04C4E:  MOVLB  4
04C50:  CLRF   xEA
04C52:  CLRF   xE9
04C54:  CLRF   xE8
04C56:  CLRF   xE7
04C58:  MOVLB  0
04C5A:  CALL   29CA
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
04C5E:  MOVFF  38D,492
04C62:  MOVLW  02
04C64:  MOVLB  4
04C66:  MOVWF  x93
04C68:  MOVLB  0
04C6A:  CALL   2FC0
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
04C6E:  MOVLW  C4
04C70:  MOVWF  FF6
04C72:  MOVLW  0D
04C74:  MOVWF  FF7
04C76:  MOVLW  00
04C78:  MOVWF  FF8
04C7A:  CALL   13DE
04C7E:  GOTO   5EF8 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
04C82:  MOVLW  DE
04C84:  MOVWF  FF6
04C86:  MOVLW  0D
04C88:  MOVWF  FF7
04C8A:  MOVLW  00
04C8C:  MOVWF  FF8
04C8E:  CALL   13DE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04C92:  MOVLB  3
04C94:  MOVF   x8B,W
04C96:  MOVWF  FE9
04C98:  MOVF   x8C,W
04C9A:  MOVWF  FEA
04C9C:  MOVFF  FEF,3DD
04CA0:  MOVFF  3DD,492
04CA4:  MOVLW  01
04CA6:  MOVLB  4
04CA8:  MOVWF  x93
04CAA:  MOVLB  0
04CAC:  CALL   2FC0
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
04CB0:  MOVLB  3
04CB2:  CLRF   x8D
04CB4:  CLRF   x8E
04CB6:  CLRF   x8F
04CB8:  CLRF   x90
04CBA:  CLRF   x91
04CBC:  CLRF   x92
04CBE:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
04CC0:  MOVF   x8B,W
04CC2:  MOVWF  FE9
04CC4:  MOVF   x8C,W
04CC6:  MOVWF  FEA
04CC8:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
04CCC:  MOVLW  01
04CCE:  ADDWF  x8B,W
04CD0:  MOVWF  FE9
04CD2:  MOVLW  00
04CD4:  ADDWFC x8C,W
04CD6:  MOVWF  FEA
04CD8:  MOVF   FEF,W
04CDA:  CLRF   xE0
04CDC:  CLRF   xDF
04CDE:  CLRF   xDE
04CE0:  MOVWF  xDD
04CE2:  MOVFF  3DD,3E0
04CE6:  CLRF   xDD
04CE8:  CLRF   xDE
04CEA:  CLRF   xDF
04CEC:  MOVLW  02
04CEE:  ADDWF  x8B,W
04CF0:  MOVWF  FE9
04CF2:  MOVLW  00
04CF4:  ADDWFC x8C,W
04CF6:  MOVWF  FEA
04CF8:  MOVF   FEF,W
04CFA:  CLRF   xE5
04CFC:  CLRF   xE4
04CFE:  CLRF   xE3
04D00:  MOVWF  xE2
04D02:  MOVFF  3E3,03
04D06:  MOVFF  3E2,02
04D0A:  CLRF   00
04D0C:  CLRF   01
04D0E:  MOVF   00,W
04D10:  IORWF  xDD,F
04D12:  MOVF   01,W
04D14:  IORWF  xDE,F
04D16:  MOVF   02,W
04D18:  IORWF  xDF,F
04D1A:  MOVF   03,W
04D1C:  IORWF  xE0,F
04D1E:  MOVLW  03
04D20:  ADDWF  x8B,W
04D22:  MOVWF  FE9
04D24:  MOVLW  00
04D26:  ADDWFC x8C,W
04D28:  MOVWF  FEA
04D2A:  MOVF   FEF,W
04D2C:  CLRF   xE5
04D2E:  CLRF   xE4
04D30:  CLRF   xE3
04D32:  MOVWF  xE2
04D34:  MOVFF  3E4,03
04D38:  MOVFF  3E3,02
04D3C:  MOVFF  3E2,01
04D40:  CLRF   00
04D42:  MOVF   00,W
04D44:  IORWF  xDD,F
04D46:  MOVF   01,W
04D48:  IORWF  xDE,F
04D4A:  MOVF   02,W
04D4C:  IORWF  xDF,F
04D4E:  MOVF   03,W
04D50:  IORWF  xE0,F
04D52:  MOVLW  04
04D54:  ADDWF  x8B,W
04D56:  MOVWF  FE9
04D58:  MOVLW  00
04D5A:  ADDWFC x8C,W
04D5C:  MOVWF  FEA
04D5E:  MOVF   FEF,W
04D60:  MOVWF  00
04D62:  CLRF   01
04D64:  CLRF   02
04D66:  CLRF   03
04D68:  MOVF   00,W
04D6A:  IORWF  xDD,W
04D6C:  MOVWF  x8E
04D6E:  MOVF   01,W
04D70:  IORWF  xDE,W
04D72:  MOVWF  x8F
04D74:  MOVF   02,W
04D76:  IORWF  xDF,W
04D78:  MOVWF  x90
04D7A:  MOVF   03,W
04D7C:  IORWF  xE0,W
04D7E:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
04D80:  MOVLW  07
04D82:  ADDWF  x8B,W
04D84:  MOVWF  FE9
04D86:  MOVLW  00
04D88:  ADDWFC x8C,W
04D8A:  MOVWF  FEA
04D8C:  MOVF   FEF,W
04D8E:  CLRF   xDE
04D90:  MOVWF  xDD
04D92:  MOVFF  3DD,3DE
04D96:  CLRF   xDD
04D98:  MOVLW  08
04D9A:  ADDWF  x8B,W
04D9C:  MOVWF  FE9
04D9E:  MOVLW  00
04DA0:  ADDWFC x8C,W
04DA2:  MOVWF  FEA
04DA4:  MOVF   FEF,W
04DA6:  CLRF   03
04DA8:  IORWF  xDD,W
04DAA:  MOVWF  x92
04DAC:  MOVF   03,W
04DAE:  IORWF  xDE,W
04DB0:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
04DB2:  MOVLW  F8
04DB4:  MOVWF  FF6
04DB6:  MOVLW  0D
04DB8:  MOVWF  FF7
04DBA:  MOVLW  00
04DBC:  MOVWF  FF8
04DBE:  MOVLW  0C
04DC0:  MOVLB  4
04DC2:  MOVWF  x19
04DC4:  MOVLB  0
04DC6:  CALL   140E
04DCA:  MOVFF  38D,4A4
04DCE:  MOVLW  37
04DD0:  MOVLB  4
04DD2:  MOVWF  xA5
04DD4:  MOVLB  0
04DD6:  CALL   1A16
04DDA:  MOVLW  0D
04DDC:  MOVLB  4
04DDE:  MOVWF  xE6
04DE0:  MOVLB  0
04DE2:  CALL   138C
04DE6:  MOVLW  0A
04DE8:  MOVLB  4
04DEA:  MOVWF  xE6
04DEC:  MOVLB  0
04DEE:  CALL   138C
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
04DF2:  MOVLW  0C
04DF4:  MOVWF  FF6
04DF6:  MOVLW  0E
04DF8:  MOVWF  FF7
04DFA:  MOVLW  00
04DFC:  MOVWF  FF8
04DFE:  MOVLW  0E
04E00:  MOVLB  4
04E02:  MOVWF  x19
04E04:  MOVLB  0
04E06:  CALL   140E
04E0A:  MOVFF  391,4A4
04E0E:  MOVLW  37
04E10:  MOVLB  4
04E12:  MOVWF  xA5
04E14:  MOVLB  0
04E16:  CALL   1A16
04E1A:  MOVFF  390,4A4
04E1E:  MOVLW  37
04E20:  MOVLB  4
04E22:  MOVWF  xA5
04E24:  MOVLB  0
04E26:  CALL   1A16
04E2A:  MOVFF  38F,4A4
04E2E:  MOVLW  37
04E30:  MOVLB  4
04E32:  MOVWF  xA5
04E34:  MOVLB  0
04E36:  CALL   1A16
04E3A:  MOVFF  38E,4A4
04E3E:  MOVLW  37
04E40:  MOVLB  4
04E42:  MOVWF  xA5
04E44:  MOVLB  0
04E46:  CALL   1A16
04E4A:  MOVLW  0D
04E4C:  MOVLB  4
04E4E:  MOVWF  xE6
04E50:  MOVLB  0
04E52:  CALL   138C
04E56:  MOVLW  0A
04E58:  MOVLB  4
04E5A:  MOVWF  xE6
04E5C:  MOVLB  0
04E5E:  CALL   138C
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
04E62:  MOVLW  22
04E64:  MOVWF  FF6
04E66:  MOVLW  0E
04E68:  MOVWF  FF7
04E6A:  MOVLW  00
04E6C:  MOVWF  FF8
04E6E:  MOVLW  0E
04E70:  MOVLB  4
04E72:  MOVWF  x19
04E74:  MOVLB  0
04E76:  CALL   140E
04E7A:  MOVFF  393,4A4
04E7E:  MOVLW  37
04E80:  MOVLB  4
04E82:  MOVWF  xA5
04E84:  MOVLB  0
04E86:  CALL   1A16
04E8A:  MOVFF  392,4A4
04E8E:  MOVLW  37
04E90:  MOVLB  4
04E92:  MOVWF  xA5
04E94:  MOVLB  0
04E96:  CALL   1A16
04E9A:  MOVLW  0D
04E9C:  MOVLB  4
04E9E:  MOVWF  xE6
04EA0:  MOVLB  0
04EA2:  CALL   138C
04EA6:  MOVLW  0A
04EA8:  MOVLB  4
04EAA:  MOVWF  xE6
04EAC:  MOVLB  0
04EAE:  CALL   138C
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
04EB2:  MOVFF  38D,492
04EB6:  MOVLB  4
04EB8:  CLRF   x93
04EBA:  MOVLB  0
04EBC:  CALL   2FC0
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
04EC0:  MOVLW  38
04EC2:  MOVWF  FF6
04EC4:  MOVLW  0E
04EC6:  MOVWF  FF7
04EC8:  MOVLW  00
04ECA:  MOVWF  FF8
04ECC:  CALL   13DE
....................    for (p = 0; p < flash_write_param.packetnum; p++)
04ED0:  MOVLB  3
04ED2:  CLRF   xD5
04ED4:  CLRF   xD4
04ED6:  MOVLB  0
04ED8:  MOVLB  3
04EDA:  MOVF   xD5,W
04EDC:  SUBWF  x93,W
04EDE:  BTFSC  FD8.0
04EE0:  BRA    4EE8
04EE2:  MOVLB  0
04EE4:  GOTO   5016
04EE8:  MOVLB  0
04EEA:  BTFSS  FD8.2
04EEC:  GOTO   4F02
04EF0:  MOVLB  3
04EF2:  MOVF   x92,W
04EF4:  SUBWF  xD4,W
04EF6:  BTFSS  FD8.0
04EF8:  BRA    4F00
04EFA:  MOVLB  0
04EFC:  GOTO   5016
04F00:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
04F02:  MOVLB  3
04F04:  RLCF   xD4,W
04F06:  MOVWF  xD6
04F08:  RLCF   xD5,W
04F0A:  MOVWF  xD7
04F0C:  RLCF   xD6,F
04F0E:  RLCF   xD7,F
04F10:  RLCF   xD6,F
04F12:  RLCF   xD7,F
04F14:  RLCF   xD6,F
04F16:  RLCF   xD7,F
04F18:  RLCF   xD6,F
04F1A:  RLCF   xD7,F
04F1C:  RLCF   xD6,F
04F1E:  RLCF   xD7,F
04F20:  MOVLW  C0
04F22:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
04F24:  CLRF   xD8
04F26:  MOVLB  0
04F28:  MOVLB  3
04F2A:  MOVF   xD8,W
04F2C:  SUBLW  3F
04F2E:  BTFSC  FD8.0
04F30:  BRA    4F38
04F32:  MOVLB  0
04F34:  GOTO   4F98
04F38:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
04F3A:  CLRF   03
04F3C:  MOVLB  3
04F3E:  MOVF   xD8,W
04F40:  ADDLW  94
04F42:  MOVWF  FE9
04F44:  MOVLW  03
04F46:  ADDWFC 03,W
04F48:  MOVWF  FEA
04F4A:  MOVF   xD8,W
04F4C:  ADDWF  xD6,W
04F4E:  MOVWF  xDF
04F50:  MOVLW  00
04F52:  ADDWFC xD7,W
04F54:  MOVWF  xE0
04F56:  MOVF   xDF,W
04F58:  MOVWF  00
04F5A:  CLRF   03
04F5C:  MOVF   00,W
04F5E:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
04F60:  CLRF   03
04F62:  MOVF   xD8,W
04F64:  ADDLW  94
04F66:  MOVWF  FE9
04F68:  MOVLW  03
04F6A:  ADDWFC 03,W
04F6C:  MOVWF  FEA
04F6E:  MOVFF  FEF,3DD
04F72:  MOVFF  3DD,4A4
04F76:  MOVLW  37
04F78:  MOVLB  4
04F7A:  MOVWF  xA5
04F7C:  MOVLB  0
04F7E:  CALL   1A16
04F82:  MOVLW  20
04F84:  MOVLB  4
04F86:  MOVWF  xE6
04F88:  MOVLB  0
04F8A:  CALL   138C
04F8E:  MOVLB  3
04F90:  INCF   xD8,F
04F92:  MOVLB  0
04F94:  GOTO   4F28
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
04F98:  MOVLB  3
04F9A:  RLCF   xD4,W
04F9C:  MOVWF  02
04F9E:  RLCF   xD5,W
04FA0:  MOVWF  03
04FA2:  RLCF   02,F
04FA4:  RLCF   03,F
04FA6:  RLCF   02,F
04FA8:  RLCF   03,F
04FAA:  RLCF   02,F
04FAC:  RLCF   03,F
04FAE:  RLCF   02,F
04FB0:  RLCF   03,F
04FB2:  RLCF   02,F
04FB4:  RLCF   03,F
04FB6:  MOVLW  C0
04FB8:  ANDWF  02,F
04FBA:  MOVF   02,W
04FBC:  ADDWF  x8E,W
04FBE:  MOVWF  xD9
04FC0:  MOVF   03,W
04FC2:  ADDWFC x8F,W
04FC4:  MOVWF  xDA
04FC6:  MOVLW  00
04FC8:  ADDWFC x90,W
04FCA:  MOVWF  xDB
04FCC:  MOVLW  00
04FCE:  ADDWFC x91,W
04FD0:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
04FD2:  MOVFF  E3,4E6
04FD6:  MOVFF  E2,4E5
04FDA:  MOVFF  E1,4E4
04FDE:  MOVFF  E0,4E3
04FE2:  MOVFF  3DC,4EA
04FE6:  MOVFF  3DB,4E9
04FEA:  MOVFF  3DA,4E8
04FEE:  MOVFF  3D9,4E7
04FF2:  MOVLW  03
04FF4:  MOVLB  4
04FF6:  MOVWF  xEC
04FF8:  MOVLW  94
04FFA:  MOVWF  xEB
04FFC:  CLRF   xEE
04FFE:  MOVLW  40
05000:  MOVWF  xED
05002:  MOVLB  0
05004:  CALL   2632
05008:  MOVLB  3
0500A:  INCF   xD4,F
0500C:  BTFSC  FD8.2
0500E:  INCF   xD5,F
05010:  MOVLB  0
05012:  GOTO   4ED8
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05016:  MOVFF  38D,492
0501A:  MOVLW  02
0501C:  MOVLB  4
0501E:  MOVWF  x93
05020:  MOVLB  0
05022:  CALL   2FC0
....................    fprintf(PC, "\r\n");
05026:  MOVLW  0D
05028:  MOVLB  4
0502A:  MOVWF  xE6
0502C:  MOVLB  0
0502E:  CALL   138C
05032:  MOVLW  0A
05034:  MOVLB  4
05036:  MOVWF  xE6
05038:  MOVLB  0
0503A:  CALL   138C
....................    fprintf(PC, "End Flash Write Demo\r\n");
0503E:  MOVLW  46
05040:  MOVWF  FF6
05042:  MOVLW  0E
05044:  MOVWF  FF7
05046:  MOVLW  00
05048:  MOVWF  FF8
0504A:  CALL   13DE
0504E:  GOTO   5F08 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05082:  MOVLW  5E
05084:  MOVWF  FF6
05086:  MOVLW  0E
05088:  MOVWF  FF7
0508A:  MOVLW  00
0508C:  MOVWF  FF8
0508E:  CALL   13DE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05092:  MOVLB  3
05094:  MOVF   x8B,W
05096:  MOVWF  FE9
05098:  MOVF   x8C,W
0509A:  MOVWF  FEA
0509C:  MOVFF  FEF,491
050A0:  MOVFF  491,492
050A4:  MOVLW  01
050A6:  MOVLB  4
050A8:  MOVWF  x93
050AA:  MOVLB  0
050AC:  CALL   2FC0
....................    flash_setting(mis_fm);
050B0:  MOVFF  E3,498
050B4:  MOVFF  E2,497
050B8:  MOVFF  E1,496
050BC:  MOVFF  E0,495
050C0:  CALL   5052
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
050C4:  MOVLB  3
050C6:  CLRF   x90
050C8:  CLRF   x8F
050CA:  CLRF   x8E
050CC:  CLRF   x8D
050CE:  MOVLW  01
050D0:  MOVWF  x91
050D2:  MOVLW  02
050D4:  MOVWF  x92
050D6:  MOVLW  03
050D8:  MOVWF  x93
050DA:  MOVLW  04
050DC:  MOVWF  x94
050DE:  CLRF   x95
050E0:  CLRF   x96
050E2:  CLRF   x97
050E4:  CLRF   x98
050E6:  CLRF   x99
050E8:  CLRF   x9A
050EA:  CLRF   x9B
050EC:  CLRF   x9C
050EE:  CLRF   x9D
050F0:  CLRF   x9E
050F2:  CLRF   x9F
050F4:  CLRF   xA0
050F6:  CLRF   xA1
050F8:  CLRF   xA2
050FA:  CLRF   xA3
050FC:  CLRF   xA4
050FE:  CLRF   xA5
05100:  CLRF   xA6
05102:  CLRF   xA7
05104:  CLRF   xA8
05106:  CLRF   xA9
05108:  CLRF   xAA
0510A:  CLRF   xAB
0510C:  CLRF   xAC
0510E:  CLRF   xAD
05110:  CLRF   xAE
05112:  CLRF   xAF
05114:  CLRF   xB0
05116:  CLRF   xB1
05118:  CLRF   xB2
0511A:  CLRF   xB3
0511C:  CLRF   xB4
0511E:  CLRF   xB5
05120:  CLRF   xB6
05122:  CLRF   xB7
05124:  CLRF   xB8
05126:  CLRF   xB9
05128:  CLRF   xBA
0512A:  CLRF   xBB
0512C:  CLRF   xBC
0512E:  CLRF   xBD
05130:  CLRF   xBE
05132:  CLRF   xBF
05134:  CLRF   xC0
05136:  CLRF   xC1
05138:  CLRF   xC2
0513A:  CLRF   xC3
0513C:  CLRF   xC4
0513E:  CLRF   xC5
05140:  CLRF   xC6
05142:  CLRF   xC7
05144:  CLRF   xC8
05146:  CLRF   xC9
05148:  CLRF   xCA
0514A:  CLRF   xCB
0514C:  CLRF   xCC
0514E:  CLRF   xCD
05150:  CLRF   xCE
05152:  CLRF   xCF
05154:  CLRF   xD0
05156:  CLRF   xD1
05158:  CLRF   xD2
0515A:  CLRF   xD3
0515C:  CLRF   xD4
0515E:  CLRF   xD5
05160:  CLRF   xD6
05162:  CLRF   xD7
05164:  CLRF   xD8
05166:  CLRF   xD9
05168:  CLRF   xDA
0516A:  CLRF   xDB
0516C:  CLRF   xDC
0516E:  CLRF   xDD
05170:  CLRF   xDE
05172:  CLRF   xDF
05174:  CLRF   xE0
05176:  CLRF   xE1
05178:  CLRF   xE2
0517A:  CLRF   xE3
0517C:  CLRF   xE4
0517E:  CLRF   xE5
05180:  CLRF   xE6
05182:  CLRF   xE7
05184:  CLRF   xE8
05186:  CLRF   xE9
05188:  CLRF   xEA
0518A:  CLRF   xEB
0518C:  CLRF   xEC
0518E:  CLRF   xED
05190:  CLRF   xEE
05192:  CLRF   xEF
05194:  CLRF   xF0
05196:  CLRF   xF1
05198:  CLRF   xF2
0519A:  CLRF   xF3
0519C:  CLRF   xF4
0519E:  CLRF   xF5
051A0:  CLRF   xF6
051A2:  CLRF   xF7
051A4:  CLRF   xF8
051A6:  CLRF   xF9
051A8:  CLRF   xFA
051AA:  CLRF   xFB
051AC:  CLRF   xFC
051AE:  CLRF   xFD
051B0:  CLRF   xFE
051B2:  CLRF   xFF
051B4:  MOVLB  4
051B6:  CLRF   x00
051B8:  CLRF   x01
051BA:  CLRF   x02
051BC:  CLRF   x03
051BE:  CLRF   x04
051C0:  CLRF   x05
051C2:  CLRF   x06
051C4:  CLRF   x07
051C6:  CLRF   x08
051C8:  CLRF   x09
051CA:  CLRF   x0A
051CC:  CLRF   x0B
051CE:  CLRF   x0C
051D0:  CLRF   x0D
051D2:  CLRF   x0E
051D4:  CLRF   x0F
051D6:  CLRF   x10
051D8:  CLRF   x11
051DA:  CLRF   x12
051DC:  CLRF   x13
051DE:  CLRF   x14
051E0:  CLRF   x15
051E2:  CLRF   x16
051E4:  CLRF   x17
051E6:  CLRF   x18
051E8:  CLRF   x19
051EA:  CLRF   x1A
051EC:  CLRF   x1B
051EE:  CLRF   x1C
051F0:  CLRF   x1D
051F2:  CLRF   x1E
051F4:  CLRF   x1F
051F6:  CLRF   x20
051F8:  CLRF   x21
051FA:  CLRF   x22
051FC:  CLRF   x23
051FE:  CLRF   x24
05200:  CLRF   x25
05202:  CLRF   x26
05204:  CLRF   x27
05206:  CLRF   x28
05208:  CLRF   x29
0520A:  CLRF   x2A
0520C:  CLRF   x2B
0520E:  CLRF   x2C
05210:  CLRF   x2D
05212:  CLRF   x2E
05214:  CLRF   x2F
05216:  CLRF   x30
05218:  CLRF   x31
0521A:  CLRF   x32
0521C:  CLRF   x33
0521E:  CLRF   x34
05220:  CLRF   x35
05222:  CLRF   x36
05224:  CLRF   x37
05226:  CLRF   x38
05228:  CLRF   x39
0522A:  CLRF   x3A
0522C:  CLRF   x3B
0522E:  CLRF   x3C
05230:  CLRF   x3D
05232:  CLRF   x3E
05234:  CLRF   x3F
05236:  CLRF   x40
05238:  CLRF   x41
0523A:  CLRF   x42
0523C:  CLRF   x43
0523E:  CLRF   x44
05240:  CLRF   x45
05242:  CLRF   x46
05244:  CLRF   x47
05246:  CLRF   x48
05248:  CLRF   x49
0524A:  CLRF   x4A
0524C:  CLRF   x4B
0524E:  CLRF   x4C
05250:  CLRF   x4D
05252:  CLRF   x4E
05254:  CLRF   x4F
05256:  CLRF   x50
05258:  CLRF   x51
0525A:  CLRF   x52
0525C:  CLRF   x53
0525E:  CLRF   x54
05260:  CLRF   x55
05262:  CLRF   x56
05264:  CLRF   x57
05266:  CLRF   x58
05268:  CLRF   x59
0526A:  CLRF   x5A
0526C:  CLRF   x5B
0526E:  CLRF   x5C
05270:  CLRF   x5D
05272:  CLRF   x5E
05274:  CLRF   x5F
05276:  CLRF   x60
05278:  CLRF   x61
0527A:  CLRF   x62
0527C:  CLRF   x63
0527E:  CLRF   x64
05280:  CLRF   x65
05282:  CLRF   x66
05284:  CLRF   x67
05286:  CLRF   x68
05288:  CLRF   x69
0528A:  CLRF   x6A
0528C:  CLRF   x6B
0528E:  CLRF   x6C
05290:  CLRF   x6D
05292:  CLRF   x6E
05294:  CLRF   x6F
05296:  CLRF   x70
05298:  CLRF   x71
0529A:  CLRF   x72
0529C:  CLRF   x73
0529E:  CLRF   x74
052A0:  CLRF   x75
052A2:  CLRF   x76
052A4:  CLRF   x77
052A6:  CLRF   x78
052A8:  CLRF   x79
052AA:  CLRF   x7A
052AC:  CLRF   x7B
052AE:  CLRF   x7C
052B0:  CLRF   x7D
052B2:  CLRF   x7E
052B4:  CLRF   x7F
052B6:  CLRF   x80
052B8:  CLRF   x81
052BA:  CLRF   x82
052BC:  CLRF   x83
052BE:  CLRF   x84
052C0:  CLRF   x85
052C2:  CLRF   x86
052C4:  CLRF   x87
052C6:  CLRF   x88
052C8:  CLRF   x89
052CA:  CLRF   x8A
052CC:  CLRF   x8B
052CE:  CLRF   x8C
052D0:  CLRF   x8D
052D2:  CLRF   x8E
052D4:  CLRF   x8F
052D6:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
052D8:  MOVFF  E3,4E6
052DC:  MOVFF  E2,4E5
052E0:  MOVFF  E1,4E4
052E4:  MOVFF  E0,4E3
052E8:  MOVFF  390,4EA
052EC:  MOVFF  38F,4E9
052F0:  MOVFF  38E,4E8
052F4:  MOVFF  38D,4E7
052F8:  MOVLW  03
052FA:  MOVWF  xEC
052FC:  MOVLW  91
052FE:  MOVWF  xEB
05300:  MOVLW  01
05302:  MOVWF  xEE
05304:  CLRF   xED
05306:  MOVLB  0
05308:  CALL   2632
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0530C:  MOVLB  3
0530E:  MOVF   x8B,W
05310:  MOVWF  FE9
05312:  MOVF   x8C,W
05314:  MOVWF  FEA
05316:  MOVFF  FEF,491
0531A:  MOVFF  491,492
0531E:  MOVLW  02
05320:  MOVLB  4
05322:  MOVWF  x93
05324:  MOVLB  0
05326:  CALL   2FC0
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
0532A:  MOVLW  84
0532C:  MOVWF  FF6
0532E:  MOVLW  0E
05330:  MOVWF  FF7
05332:  MOVLW  00
05334:  MOVWF  FF8
05336:  CALL   13DE
0533A:  GOTO   5F18 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
0533E:  MOVLW  A8
05340:  MOVWF  FF6
05342:  MOVLW  0E
05344:  MOVWF  FF7
05346:  MOVLW  00
05348:  MOVWF  FF8
0534A:  CALL   13DE
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
0534E:  MOVLB  3
05350:  MOVF   x8B,W
05352:  MOVWF  FE9
05354:  MOVF   x8C,W
05356:  MOVWF  FEA
05358:  MOVFF  FEF,3DD
0535C:  MOVFF  3DD,492
05360:  MOVLW  01
05362:  MOVLB  4
05364:  MOVWF  x93
05366:  MOVLB  0
05368:  CALL   2FC0
....................    FLASH_PARAM flash_param = {0};
0536C:  MOVLB  3
0536E:  CLRF   x8D
05370:  CLRF   x8E
05372:  CLRF   x8F
05374:  CLRF   x90
05376:  CLRF   x91
05378:  CLRF   x92
0537A:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
0537C:  MOVF   x8B,W
0537E:  MOVWF  FE9
05380:  MOVF   x8C,W
05382:  MOVWF  FEA
05384:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
05388:  MOVLW  01
0538A:  ADDWF  x8B,W
0538C:  MOVWF  FE9
0538E:  MOVLW  00
05390:  ADDWFC x8C,W
05392:  MOVWF  FEA
05394:  MOVF   FEF,W
05396:  CLRF   xE0
05398:  CLRF   xDF
0539A:  CLRF   xDE
0539C:  MOVWF  xDD
0539E:  MOVFF  3DD,3E0
053A2:  CLRF   xDD
053A4:  CLRF   xDE
053A6:  CLRF   xDF
053A8:  MOVLW  02
053AA:  ADDWF  x8B,W
053AC:  MOVWF  FE9
053AE:  MOVLW  00
053B0:  ADDWFC x8C,W
053B2:  MOVWF  FEA
053B4:  MOVF   FEF,W
053B6:  CLRF   xE5
053B8:  CLRF   xE4
053BA:  CLRF   xE3
053BC:  MOVWF  xE2
053BE:  MOVFF  3E3,03
053C2:  MOVFF  3E2,02
053C6:  CLRF   00
053C8:  CLRF   01
053CA:  MOVF   00,W
053CC:  IORWF  xDD,F
053CE:  MOVF   01,W
053D0:  IORWF  xDE,F
053D2:  MOVF   02,W
053D4:  IORWF  xDF,F
053D6:  MOVF   03,W
053D8:  IORWF  xE0,F
053DA:  MOVLW  03
053DC:  ADDWF  x8B,W
053DE:  MOVWF  FE9
053E0:  MOVLW  00
053E2:  ADDWFC x8C,W
053E4:  MOVWF  FEA
053E6:  MOVF   FEF,W
053E8:  CLRF   xE5
053EA:  CLRF   xE4
053EC:  CLRF   xE3
053EE:  MOVWF  xE2
053F0:  MOVFF  3E4,03
053F4:  MOVFF  3E3,02
053F8:  MOVFF  3E2,01
053FC:  CLRF   00
053FE:  MOVF   00,W
05400:  IORWF  xDD,F
05402:  MOVF   01,W
05404:  IORWF  xDE,F
05406:  MOVF   02,W
05408:  IORWF  xDF,F
0540A:  MOVF   03,W
0540C:  IORWF  xE0,F
0540E:  MOVLW  04
05410:  ADDWF  x8B,W
05412:  MOVWF  FE9
05414:  MOVLW  00
05416:  ADDWFC x8C,W
05418:  MOVWF  FEA
0541A:  MOVF   FEF,W
0541C:  MOVWF  00
0541E:  CLRF   01
05420:  CLRF   02
05422:  CLRF   03
05424:  MOVF   00,W
05426:  IORWF  xDD,W
05428:  MOVWF  x90
0542A:  MOVF   01,W
0542C:  IORWF  xDE,W
0542E:  MOVWF  x91
05430:  MOVF   02,W
05432:  IORWF  xDF,W
05434:  MOVWF  x92
05436:  MOVF   03,W
05438:  IORWF  xE0,W
0543A:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
0543C:  MOVLW  07
0543E:  ADDWF  x8B,W
05440:  MOVWF  FE9
05442:  MOVLW  00
05444:  ADDWFC x8C,W
05446:  MOVWF  FEA
05448:  MOVF   FEF,W
0544A:  CLRF   xDE
0544C:  MOVWF  xDD
0544E:  MOVFF  3DD,3DE
05452:  CLRF   xDD
05454:  MOVLW  08
05456:  ADDWF  x8B,W
05458:  MOVWF  FE9
0545A:  MOVLW  00
0545C:  ADDWFC x8C,W
0545E:  MOVWF  FEA
05460:  MOVF   FEF,W
05462:  CLRF   03
05464:  IORWF  xDD,W
05466:  MOVWF  x8E
05468:  MOVF   03,W
0546A:  IORWF  xDE,W
0546C:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
0546E:  MOVLW  BC
05470:  MOVWF  FF6
05472:  MOVLW  0E
05474:  MOVWF  FF7
05476:  MOVLW  00
05478:  MOVWF  FF8
0547A:  MOVLW  0C
0547C:  MOVLB  4
0547E:  MOVWF  x19
05480:  MOVLB  0
05482:  CALL   140E
05486:  MOVFF  38D,4A4
0548A:  MOVLW  37
0548C:  MOVLB  4
0548E:  MOVWF  xA5
05490:  MOVLB  0
05492:  CALL   1A16
05496:  MOVLW  0D
05498:  MOVLB  4
0549A:  MOVWF  xE6
0549C:  MOVLB  0
0549E:  CALL   138C
054A2:  MOVLW  0A
054A4:  MOVLB  4
054A6:  MOVWF  xE6
054A8:  MOVLB  0
054AA:  CALL   138C
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
054AE:  MOVLW  D0
054B0:  MOVWF  FF6
054B2:  MOVLW  0E
054B4:  MOVWF  FF7
054B6:  MOVLW  00
054B8:  MOVWF  FF8
054BA:  MOVLW  0E
054BC:  MOVLB  4
054BE:  MOVWF  x19
054C0:  MOVLB  0
054C2:  CALL   140E
054C6:  MOVFF  393,4A4
054CA:  MOVLW  37
054CC:  MOVLB  4
054CE:  MOVWF  xA5
054D0:  MOVLB  0
054D2:  CALL   1A16
054D6:  MOVFF  392,4A4
054DA:  MOVLW  37
054DC:  MOVLB  4
054DE:  MOVWF  xA5
054E0:  MOVLB  0
054E2:  CALL   1A16
054E6:  MOVFF  391,4A4
054EA:  MOVLW  37
054EC:  MOVLB  4
054EE:  MOVWF  xA5
054F0:  MOVLB  0
054F2:  CALL   1A16
054F6:  MOVFF  390,4A4
054FA:  MOVLW  37
054FC:  MOVLB  4
054FE:  MOVWF  xA5
05500:  MOVLB  0
05502:  CALL   1A16
05506:  MOVLW  0D
05508:  MOVLB  4
0550A:  MOVWF  xE6
0550C:  MOVLB  0
0550E:  CALL   138C
05512:  MOVLW  0A
05514:  MOVLB  4
05516:  MOVWF  xE6
05518:  MOVLB  0
0551A:  CALL   138C
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
0551E:  MOVLW  E6
05520:  MOVWF  FF6
05522:  MOVLW  0E
05524:  MOVWF  FF7
05526:  MOVLW  00
05528:  MOVWF  FF8
0552A:  MOVLW  0E
0552C:  MOVLB  4
0552E:  MOVWF  x19
05530:  MOVLB  0
05532:  CALL   140E
05536:  MOVFF  38F,4A4
0553A:  MOVLW  37
0553C:  MOVLB  4
0553E:  MOVWF  xA5
05540:  MOVLB  0
05542:  CALL   1A16
05546:  MOVFF  38E,4A4
0554A:  MOVLW  37
0554C:  MOVLB  4
0554E:  MOVWF  xA5
05550:  MOVLB  0
05552:  CALL   1A16
05556:  MOVLW  0D
05558:  MOVLB  4
0555A:  MOVWF  xE6
0555C:  MOVLB  0
0555E:  CALL   138C
05562:  MOVLW  0A
05564:  MOVLB  4
05566:  MOVWF  xE6
05568:  MOVLB  0
0556A:  CALL   138C
....................    
....................    piclog_make(flash_param.id, 0x00);
0556E:  MOVFF  38D,492
05572:  MOVLB  4
05574:  CLRF   x93
05576:  MOVLB  0
05578:  CALL   2FC0
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
0557C:  MOVLB  3
0557E:  CLRF   x94
05580:  CLRF   x95
05582:  CLRF   x96
05584:  CLRF   x97
05586:  CLRF   x98
05588:  CLRF   x99
0558A:  CLRF   x9A
0558C:  CLRF   x9B
0558E:  CLRF   x9C
05590:  CLRF   x9D
05592:  CLRF   x9E
05594:  CLRF   x9F
05596:  CLRF   xA0
05598:  CLRF   xA1
0559A:  CLRF   xA2
0559C:  CLRF   xA3
0559E:  CLRF   xA4
055A0:  CLRF   xA5
055A2:  CLRF   xA6
055A4:  CLRF   xA7
055A6:  CLRF   xA8
055A8:  CLRF   xA9
055AA:  CLRF   xAA
055AC:  CLRF   xAB
055AE:  CLRF   xAC
055B0:  CLRF   xAD
055B2:  CLRF   xAE
055B4:  CLRF   xAF
055B6:  CLRF   xB0
055B8:  CLRF   xB1
055BA:  CLRF   xB2
055BC:  CLRF   xB3
055BE:  CLRF   xB4
055C0:  CLRF   xB5
055C2:  CLRF   xB6
055C4:  CLRF   xB7
055C6:  CLRF   xB8
055C8:  CLRF   xB9
055CA:  CLRF   xBA
055CC:  CLRF   xBB
055CE:  CLRF   xBC
055D0:  CLRF   xBD
055D2:  CLRF   xBE
055D4:  CLRF   xBF
055D6:  CLRF   xC0
055D8:  CLRF   xC1
055DA:  CLRF   xC2
055DC:  CLRF   xC3
055DE:  CLRF   xC4
055E0:  CLRF   xC5
055E2:  CLRF   xC6
055E4:  CLRF   xC7
055E6:  CLRF   xC8
055E8:  CLRF   xC9
055EA:  CLRF   xCA
055EC:  CLRF   xCB
055EE:  CLRF   xCC
055F0:  CLRF   xCD
055F2:  CLRF   xCE
055F4:  CLRF   xCF
055F6:  CLRF   xD0
055F8:  CLRF   xD1
055FA:  CLRF   xD2
055FC:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
055FE:  MOVLW  FC
05600:  MOVWF  FF6
05602:  MOVLW  0E
05604:  MOVWF  FF7
05606:  MOVLW  00
05608:  MOVWF  FF8
0560A:  MOVLB  0
0560C:  CALL   13DE
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
05610:  MOVFF  E3,4E6
05614:  MOVFF  E2,4E5
05618:  MOVFF  E1,4E4
0561C:  MOVFF  E0,4E3
05620:  CALL   173E
05624:  MOVF   01,F
05626:  BTFSS  FD8.2
05628:  GOTO   5640
....................       fprintf(PC, "Mission Flash is not connected\r\n");
0562C:  MOVLW  08
0562E:  MOVWF  FF6
05630:  MOVLW  0F
05632:  MOVWF  FF7
05634:  MOVLW  00
05636:  MOVWF  FF8
05638:  CALL   13DE
....................       return;
0563C:  GOTO   57C8
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
05640:  MOVLB  3
05642:  CLRF   xDB
05644:  CLRF   xDA
05646:  CLRF   xD9
05648:  CLRF   xD8
0564A:  MOVLB  0
0564C:  MOVLB  3
0564E:  MOVF   xDB,F
05650:  BTFSC  FD8.2
05652:  BRA    565A
05654:  MOVLB  0
05656:  GOTO   57A8
0565A:  MOVLB  0
0565C:  MOVLB  3
0565E:  MOVF   xDA,F
05660:  BTFSC  FD8.2
05662:  BRA    566A
05664:  MOVLB  0
05666:  GOTO   57A8
0566A:  MOVLB  0
0566C:  MOVLB  3
0566E:  MOVF   xD9,W
05670:  SUBWF  x8F,W
05672:  BTFSC  FD8.0
05674:  BRA    567C
05676:  MOVLB  0
05678:  GOTO   57A8
0567C:  MOVLB  0
0567E:  BTFSS  FD8.2
05680:  GOTO   5696
05684:  MOVLB  3
05686:  MOVF   x8E,W
05688:  SUBWF  xD8,W
0568A:  BTFSS  FD8.0
0568C:  BRA    5694
0568E:  MOVLB  0
05690:  GOTO   57A8
05694:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
05696:  MOVLB  3
05698:  RLCF   xD8,W
0569A:  MOVWF  00
0569C:  RLCF   xD9,W
0569E:  MOVWF  01
056A0:  RLCF   xDA,W
056A2:  MOVWF  02
056A4:  RLCF   xDB,W
056A6:  MOVWF  03
056A8:  RLCF   00,F
056AA:  RLCF   01,F
056AC:  RLCF   02,F
056AE:  RLCF   03,F
056B0:  RLCF   00,F
056B2:  RLCF   01,F
056B4:  RLCF   02,F
056B6:  RLCF   03,F
056B8:  RLCF   00,F
056BA:  RLCF   01,F
056BC:  RLCF   02,F
056BE:  RLCF   03,F
056C0:  RLCF   00,F
056C2:  RLCF   01,F
056C4:  RLCF   02,F
056C6:  RLCF   03,F
056C8:  RLCF   00,F
056CA:  RLCF   01,F
056CC:  RLCF   02,F
056CE:  RLCF   03,F
056D0:  MOVLW  C0
056D2:  ANDWF  00,F
056D4:  MOVF   00,W
056D6:  ADDWF  x90,W
056D8:  MOVWF  xD4
056DA:  MOVF   01,W
056DC:  ADDWFC x91,W
056DE:  MOVWF  xD5
056E0:  MOVF   02,W
056E2:  ADDWFC x92,W
056E4:  MOVWF  xD6
056E6:  MOVF   03,W
056E8:  ADDWFC x93,W
056EA:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
056EC:  MOVFF  E3,498
056F0:  MOVFF  E2,497
056F4:  MOVFF  E1,496
056F8:  MOVFF  E0,495
056FC:  MOVFF  3D7,49C
05700:  MOVFF  3D6,49B
05704:  MOVFF  3D5,49A
05708:  MOVFF  3D4,499
0570C:  MOVLW  03
0570E:  MOVLB  4
05710:  MOVWF  x9E
05712:  MOVLW  94
05714:  MOVWF  x9D
05716:  CLRF   xA2
05718:  CLRF   xA1
0571A:  CLRF   xA0
0571C:  MOVLW  40
0571E:  MOVWF  x9F
05720:  MOVLB  0
05722:  CALL   17FE
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
05726:  MOVLB  3
05728:  CLRF   xDC
0572A:  MOVLB  0
0572C:  MOVLB  3
0572E:  MOVF   xDC,W
05730:  SUBLW  3F
05732:  BTFSC  FD8.0
05734:  BRA    573C
05736:  MOVLB  0
05738:  GOTO   5778
0573C:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
0573E:  CLRF   03
05740:  MOVLB  3
05742:  MOVF   xDC,W
05744:  ADDLW  94
05746:  MOVWF  FE9
05748:  MOVLW  03
0574A:  ADDWFC 03,W
0574C:  MOVWF  FEA
0574E:  MOVFF  FEF,3DD
05752:  MOVFF  3DD,4A4
05756:  MOVLW  37
05758:  MOVLB  4
0575A:  MOVWF  xA5
0575C:  MOVLB  0
0575E:  CALL   1A16
05762:  MOVLW  20
05764:  MOVLB  4
05766:  MOVWF  xE6
05768:  MOVLB  0
0576A:  CALL   138C
0576E:  MOVLB  3
05770:  INCF   xDC,F
05772:  MOVLB  0
05774:  GOTO   572C
....................       }
....................       fprintf(PC,"\r\n");
05778:  MOVLW  0D
0577A:  MOVLB  4
0577C:  MOVWF  xE6
0577E:  MOVLB  0
05780:  CALL   138C
05784:  MOVLW  0A
05786:  MOVLB  4
05788:  MOVWF  xE6
0578A:  MOVLB  0
0578C:  CALL   138C
05790:  MOVLW  01
05792:  MOVLB  3
05794:  ADDWF  xD8,F
05796:  BTFSC  FD8.0
05798:  INCF   xD9,F
0579A:  BTFSC  FD8.2
0579C:  INCF   xDA,F
0579E:  BTFSC  FD8.2
057A0:  INCF   xDB,F
057A2:  MOVLB  0
057A4:  GOTO   564C
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
057A8:  MOVFF  38D,492
057AC:  MOVLW  02
057AE:  MOVLB  4
057B0:  MOVWF  x93
057B2:  MOVLB  0
057B4:  CALL   2FC0
....................    fprintf(PC, "End Flash Read\r\n");
057B8:  MOVLW  2A
057BA:  MOVWF  FF6
057BC:  MOVLW  0F
057BE:  MOVWF  FF7
057C0:  MOVLW  00
057C2:  MOVWF  FF8
057C4:  CALL   13DE
057C8:  GOTO   5F28 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
057CC:  MOVLW  3C
057CE:  MOVWF  FF6
057D0:  MOVLW  0F
057D2:  MOVWF  FF7
057D4:  MOVLW  00
057D6:  MOVWF  FF8
057D8:  CALL   13DE
....................    flash_setting(mis_fm);
057DC:  MOVFF  E3,498
057E0:  MOVFF  E2,497
057E4:  MOVFF  E1,496
057E8:  MOVFF  E0,495
057EC:  CALL   5052
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
057F0:  MOVLB  3
057F2:  CLRF   x90
057F4:  CLRF   x8F
057F6:  CLRF   x8E
057F8:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
057FA:  MOVFF  E3,498
057FE:  MOVFF  E2,497
05802:  MOVFF  E1,496
05806:  MOVFF  E0,495
0580A:  MOVFF  390,49C
0580E:  MOVFF  38F,49B
05812:  MOVFF  38E,49A
05816:  MOVFF  38D,499
0581A:  MOVLW  03
0581C:  MOVLB  4
0581E:  MOVWF  x9E
05820:  MOVLW  91
05822:  MOVWF  x9D
05824:  CLRF   xA2
05826:  CLRF   xA1
05828:  CLRF   xA0
0582A:  MOVLW  04
0582C:  MOVWF  x9F
0582E:  MOVLB  0
05830:  CALL   17FE
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
05834:  MOVLW  58
05836:  MOVWF  FF6
05838:  MOVLW  0F
0583A:  MOVWF  FF7
0583C:  MOVLW  00
0583E:  MOVWF  FF8
05840:  MOVLW  0B
05842:  MOVLB  4
05844:  MOVWF  x19
05846:  MOVLB  0
05848:  CALL   140E
0584C:  MOVFF  391,4A4
05850:  MOVLW  37
05852:  MOVLB  4
05854:  MOVWF  xA5
05856:  MOVLB  0
05858:  CALL   1A16
0585C:  MOVLW  20
0585E:  MOVLB  4
05860:  MOVWF  xE6
05862:  MOVLB  0
05864:  CALL   138C
05868:  MOVFF  392,4A4
0586C:  MOVLW  37
0586E:  MOVLB  4
05870:  MOVWF  xA5
05872:  MOVLB  0
05874:  CALL   1A16
05878:  MOVLW  20
0587A:  MOVLB  4
0587C:  MOVWF  xE6
0587E:  MOVLB  0
05880:  CALL   138C
05884:  MOVFF  393,4A4
05888:  MOVLW  37
0588A:  MOVLB  4
0588C:  MOVWF  xA5
0588E:  MOVLB  0
05890:  CALL   1A16
05894:  MOVLW  20
05896:  MOVLB  4
05898:  MOVWF  xE6
0589A:  MOVLB  0
0589C:  CALL   138C
058A0:  MOVFF  394,4A4
058A4:  MOVLW  37
058A6:  MOVLB  4
058A8:  MOVWF  xA5
058AA:  MOVLB  0
058AC:  CALL   1A16
058B0:  MOVLW  0D
058B2:  MOVLB  4
058B4:  MOVWF  xE6
058B6:  MOVLB  0
058B8:  CALL   138C
058BC:  MOVLW  0A
058BE:  MOVLB  4
058C0:  MOVWF  xE6
058C2:  MOVLB  0
058C4:  CALL   138C
....................    fprintf(PC, "End Flash Read Address\r\n");
058C8:  MOVLW  7A
058CA:  MOVWF  FF6
058CC:  MOVLW  0F
058CE:  MOVWF  FF7
058D0:  MOVLW  00
058D2:  MOVWF  FF8
058D4:  CALL   13DE
058D8:  GOTO   5F38 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
058DC:  MOVLW  94
058DE:  MOVWF  FF6
058E0:  MOVLW  0F
058E2:  MOVWF  FF7
058E4:  MOVLW  00
058E6:  MOVWF  FF8
058E8:  CALL   13DE
....................    flash_setting(mis_fm);
058EC:  MOVFF  E3,498
058F0:  MOVFF  E2,497
058F4:  MOVFF  E1,496
058F8:  MOVFF  E0,495
058FC:  CALL   5052
....................    flash_setting(smf);
05900:  MOVFF  E7,498
05904:  MOVFF  E6,497
05908:  MOVFF  E5,496
0590C:  MOVFF  E4,495
05910:  CALL   5052
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
05914:  MOVLB  3
05916:  CLRF   x90
05918:  CLRF   x8F
0591A:  CLRF   x8E
0591C:  CLRF   x8D
0591E:  CLRF   x94
05920:  CLRF   x93
05922:  MOVLW  10
05924:  MOVWF  x92
05926:  CLRF   x91
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
05928:  MOVFF  E3,498
0592C:  MOVFF  E2,497
05930:  MOVFF  E1,496
05934:  MOVFF  E0,495
05938:  MOVFF  390,49C
0593C:  MOVFF  38F,49B
05940:  MOVFF  38E,49A
05944:  MOVFF  38D,499
05948:  MOVLW  03
0594A:  MOVLB  4
0594C:  MOVWF  x9E
0594E:  MOVLW  95
05950:  MOVWF  x9D
05952:  CLRF   xA2
05954:  CLRF   xA1
05956:  MOVLW  01
05958:  MOVWF  xA0
0595A:  CLRF   x9F
0595C:  MOVLB  0
0595E:  CALL   17FE
....................    write_data_bytes(smf, dest_address, read_data, 256);
05962:  MOVFF  E7,4E6
05966:  MOVFF  E6,4E5
0596A:  MOVFF  E5,4E4
0596E:  MOVFF  E4,4E3
05972:  MOVFF  394,4EA
05976:  MOVFF  393,4E9
0597A:  MOVFF  392,4E8
0597E:  MOVFF  391,4E7
05982:  MOVLW  03
05984:  MOVLB  4
05986:  MOVWF  xEC
05988:  MOVLW  95
0598A:  MOVWF  xEB
0598C:  MOVLW  01
0598E:  MOVWF  xEE
05990:  CLRF   xED
05992:  MOVLB  0
05994:  CALL   2632
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
05998:  MOVLW  AC
0599A:  MOVWF  FF6
0599C:  MOVLW  0F
0599E:  MOVWF  FF7
059A0:  MOVLW  00
059A2:  MOVWF  FF8
059A4:  CALL   13DE
059A8:  GOTO   5F48 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
059AC:  MOVLW  2C
059AE:  MOVWF  FF6
059B0:  MOVLW  10
059B2:  MOVWF  FF7
059B4:  MOVLW  00
059B6:  MOVWF  FF8
059B8:  CALL   13DE
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
059BC:  MOVLB  3
059BE:  MOVF   x8B,W
059C0:  MOVWF  FE9
059C2:  MOVF   x8C,W
059C4:  MOVWF  FEA
059C6:  MOVFF  FEF,3CD
059CA:  MOVFF  3CD,492
059CE:  MOVLW  01
059D0:  MOVLB  4
059D2:  MOVWF  x93
059D4:  MOVLB  0
059D6:  CALL   2FC0
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
059DA:  MOVLB  3
059DC:  CLRF   x8D
059DE:  CLRF   x8E
059E0:  CLRF   x8F
059E2:  CLRF   x90
059E4:  CLRF   x91
059E6:  CLRF   x92
059E8:  CLRF   x93
059EA:  CLRF   x94
059EC:  CLRF   x95
059EE:  CLRF   x96
059F0:  CLRF   x97
059F2:  CLRF   x98
059F4:  CLRF   x99
059F6:  CLRF   x9A
059F8:  CLRF   x9B
059FA:  CLRF   x9C
059FC:  CLRF   x9D
059FE:  CLRF   x9E
05A00:  CLRF   x9F
05A02:  CLRF   xA0
05A04:  CLRF   xA1
05A06:  CLRF   xA2
05A08:  CLRF   xA3
05A0A:  CLRF   xA4
05A0C:  CLRF   xA5
05A0E:  CLRF   xA6
05A10:  CLRF   xA7
05A12:  CLRF   xA8
05A14:  CLRF   xA9
05A16:  CLRF   xAA
05A18:  CLRF   xAB
05A1A:  CLRF   xAC
05A1C:  CLRF   xAD
05A1E:  CLRF   xAE
05A20:  CLRF   xAF
05A22:  CLRF   xB0
05A24:  CLRF   xB1
05A26:  CLRF   xB2
05A28:  CLRF   xB3
05A2A:  CLRF   xB4
05A2C:  CLRF   xB5
05A2E:  CLRF   xB6
05A30:  CLRF   xB7
05A32:  CLRF   xB8
05A34:  CLRF   xB9
05A36:  CLRF   xBA
05A38:  CLRF   xBB
05A3A:  CLRF   xBC
05A3C:  CLRF   xBD
05A3E:  CLRF   xBE
05A40:  CLRF   xBF
05A42:  CLRF   xC0
05A44:  CLRF   xC1
05A46:  CLRF   xC2
05A48:  CLRF   xC3
05A4A:  CLRF   xC4
05A4C:  CLRF   xC5
05A4E:  CLRF   xC6
05A50:  CLRF   xC7
05A52:  CLRF   xC8
05A54:  CLRF   xC9
05A56:  CLRF   xCA
05A58:  CLRF   xCB
05A5A:  CLRF   xCC
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
05A5C:  MOVFF  E3,4E6
05A60:  MOVFF  E2,4E5
05A64:  MOVFF  E1,4E4
05A68:  MOVFF  E0,4E3
05A6C:  MOVLB  4
05A6E:  CLRF   xEA
05A70:  CLRF   xE9
05A72:  CLRF   xE8
05A74:  CLRF   xE7
05A76:  MOVLW  03
05A78:  MOVWF  xEC
05A7A:  MOVLW  8D
05A7C:  MOVWF  xEB
05A7E:  CLRF   xEE
05A80:  MOVLW  40
05A82:  MOVWF  xED
05A84:  MOVLB  0
05A86:  CALL   2632
....................    misf_init(); // Update the address area after writing
05A8A:  CALL   1A86
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
05A8E:  MOVLB  3
05A90:  MOVF   x8B,W
05A92:  MOVWF  FE9
05A94:  MOVF   x8C,W
05A96:  MOVWF  FEA
05A98:  MOVFF  FEF,3CD
05A9C:  MOVFF  3CD,492
05AA0:  MOVLW  02
05AA2:  MOVLB  4
05AA4:  MOVWF  x93
05AA6:  MOVLB  0
05AA8:  CALL   2FC0
....................    fprintf(PC, "End Flash Address Reset\r\n");
05AAC:  MOVLW  48
05AAE:  MOVWF  FF6
05AB0:  MOVLW  10
05AB2:  MOVWF  FF7
05AB4:  MOVLW  00
05AB6:  MOVWF  FF8
05AB8:  CALL   13DE
05ABC:  GOTO   5F58 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
05D96:  MOVLB  3
05D98:  MOVF   x88,W
05D9A:  MOVWF  FE9
05D9C:  MOVF   x89,W
05D9E:  MOVWF  FEA
05DA0:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
05DA4:  MOVLW  62
05DA6:  MOVWF  FF6
05DA8:  MOVLW  10
05DAA:  MOVWF  FF7
05DAC:  MOVLW  00
05DAE:  MOVWF  FF8
05DB0:  MOVLB  0
05DB2:  CALL   13DE
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
05DB6:  MOVLW  A8
05DB8:  MOVWF  FF6
05DBA:  MOVLW  10
05DBC:  MOVWF  FF7
05DBE:  MOVLW  00
05DC0:  MOVWF  FF8
05DC2:  MOVLW  0C
05DC4:  MOVLB  4
05DC6:  MOVWF  x19
05DC8:  MOVLB  0
05DCA:  CALL   140E
05DCE:  MOVFF  38A,4A4
05DD2:  MOVLW  37
05DD4:  MOVLB  4
05DD6:  MOVWF  xA5
05DD8:  MOVLB  0
05DDA:  CALL   1A16
05DDE:  MOVLW  B6
05DE0:  MOVWF  FF6
05DE2:  MOVLW  10
05DE4:  MOVWF  FF7
05DE6:  MOVLW  00
05DE8:  MOVWF  FF8
05DEA:  MOVLW  04
05DEC:  MOVLB  4
05DEE:  MOVWF  x19
05DF0:  MOVLB  0
05DF2:  CALL   140E
....................    switch(command_id)
05DF6:  MOVLB  3
05DF8:  MOVF   x8A,W
05DFA:  XORLW  10
05DFC:  MOVLB  0
05DFE:  BTFSC  FD8.2
05E00:  GOTO   5E90
05E04:  XORLW  01
05E06:  BTFSC  FD8.2
05E08:  GOTO   5EA0
05E0C:  XORLW  03
05E0E:  BTFSC  FD8.2
05E10:  GOTO   5EB0
05E14:  XORLW  13
05E16:  BTFSC  FD8.2
05E18:  GOTO   5EB8
05E1C:  XORLW  03
05E1E:  BTFSC  FD8.2
05E20:  GOTO   5EC8
05E24:  XORLW  92
05E26:  BTFSC  FD8.2
05E28:  GOTO   5ECC
05E2C:  XORLW  01
05E2E:  BTFSC  FD8.2
05E30:  GOTO   5EDC
05E34:  XORLW  03
05E36:  BTFSC  FD8.2
05E38:  GOTO   5EEC
05E3C:  XORLW  06
05E3E:  BTFSC  FD8.2
05E40:  GOTO   5EFC
05E44:  XORLW  01
05E46:  BTFSC  FD8.2
05E48:  GOTO   5F0C
05E4C:  XORLW  03
05E4E:  BTFSC  FD8.2
05E50:  GOTO   5F1C
05E54:  XORLW  01
05E56:  BTFSC  FD8.2
05E58:  GOTO   5F2C
05E5C:  XORLW  0D
05E5E:  BTFSC  FD8.2
05E60:  GOTO   5F3C
05E64:  XORLW  05
05E66:  BTFSC  FD8.2
05E68:  GOTO   5F4C
05E6C:  XORLW  EE
05E6E:  BTFSC  FD8.2
05E70:  GOTO   5F5C
05E74:  XORLW  03
05E76:  BTFSC  FD8.2
05E78:  GOTO   5F64
05E7C:  XORLW  01
05E7E:  BTFSC  FD8.2
05E80:  GOTO   5F6C
05E84:  XORLW  03
05E86:  BTFSC  FD8.2
05E88:  GOTO   5F74
05E8C:  GOTO   5F7C
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
05E90:  MOVFF  389,38C
05E94:  MOVFF  388,38B
05E98:  GOTO   38D4
....................          //mode_iv_meas_adc();
....................          break;
05E9C:  GOTO   5F8C
....................       case 0x11:
....................          mode_test_iv(content);
05EA0:  MOVFF  389,38C
05EA4:  MOVFF  388,38B
05EA8:  GOTO   4146
....................          break;
05EAC:  GOTO   5F8C
....................       case 0x12:
....................          test_adc();
05EB0:  GOTO   41D6
....................          break;
05EB4:  GOTO   5F8C
....................       case 0x01:
....................          mode_measure(content); // check if the flash is connected
05EB8:  MOVFF  389,38C
05EBC:  MOVFF  388,38B
05EC0:  GOTO   4384
....................          break;
05EC4:  GOTO   5F8C
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
05EC8:  GOTO   5F8C
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
05ECC:  MOVFF  389,38C
05ED0:  MOVFF  388,38B
05ED4:  GOTO   4888
....................          break;
05ED8:  GOTO   5F8C
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
05EDC:  MOVFF  389,38C
05EE0:  MOVFF  388,38B
05EE4:  GOTO   4952
....................          break;
05EE8:  GOTO   5F8C
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
05EEC:  MOVFF  389,38C
05EF0:  MOVFF  388,38B
05EF4:  GOTO   4AEC
....................          break;
05EF8:  GOTO   5F8C
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
05EFC:  MOVFF  389,38C
05F00:  MOVFF  388,38B
05F04:  GOTO   4C82
....................          break;
05F08:  GOTO   5F8C
....................       case ID_FLASH_WRITE_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
05F0C:  MOVFF  389,38C
05F10:  MOVFF  388,38B
05F14:  GOTO   5082
....................          break;
05F18:  GOTO   5F8C
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
05F1C:  MOVFF  389,38C
05F20:  MOVFF  388,38B
05F24:  GOTO   533E
....................          break;
05F28:  GOTO   5F8C
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
05F2C:  MOVFF  389,38C
05F30:  MOVFF  388,38B
05F34:  GOTO   57CC
....................          break;
05F38:  GOTO   5F8C
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
05F3C:  MOVFF  389,38C
05F40:  MOVFF  388,38B
05F44:  GOTO   58DC
....................          break;
05F48:  GOTO   5F8C
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
05F4C:  MOVFF  389,38C
05F50:  MOVFF  388,38B
05F54:  GOTO   59AC
....................          break;
05F58:  GOTO   5F8C
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
05F5C:  CALL   5B9A
....................          break;
05F60:  GOTO   5F8C
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
05F64:  CALL   5B9A
....................          break;
05F68:  GOTO   5F8C
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
05F6C:  CALL   5B9A
....................          break;
05F70:  GOTO   5F8C
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
05F74:  CALL   5B9A
....................          break;
05F78:  GOTO   5F8C
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
05F7C:  MOVLW  BC
05F7E:  MOVWF  FF6
05F80:  MOVLW  10
05F82:  MOVWF  FF7
05F84:  MOVLW  00
05F86:  MOVWF  FF8
05F88:  CALL   13DE
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
05F8C:  MOVLW  D4
05F8E:  MOVWF  FF6
05F90:  MOVLW  10
05F92:  MOVWF  FF7
05F94:  MOVLW  00
05F96:  MOVWF  FF8
05F98:  CALL   13DE
05F9C:  GOTO   6002 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
07848:  MOVLW  1A
0784A:  MOVWF  FF6
0784C:  MOVLW  11
0784E:  MOVWF  FF7
07850:  MOVLW  00
07852:  MOVWF  FF8
07854:  CALL   13DE
....................    
....................    switch(command->frame_id)
07858:  MOVLB  3
0785A:  MOVF   x82,W
0785C:  MOVWF  FE9
0785E:  MOVF   x83,W
07860:  MOVWF  FEA
07862:  MOVF   FEF,W
07864:  XORLW  00
07866:  MOVLB  0
07868:  BTFSC  FD8.2
0786A:  GOTO   7882
0786E:  XORLW  01
07870:  BTFSC  FD8.2
07872:  GOTO   7892
07876:  XORLW  03
07878:  BTFSC  FD8.2
0787A:  GOTO   78B2
0787E:  GOTO   78C2
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
07882:  MOVFF  383,385
07886:  MOVFF  382,384
0788A:  GOTO   5FB6
....................          break;
0788E:  GOTO   78C2
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
07892:  MOVFF  383,385
07896:  MOVFF  382,384
0789A:  GOTO   6038
0789E:  MOVF   01,F
078A0:  BTFSC  FD8.2
078A2:  GOTO   78AE
....................             return TRUE; // if status is finished, return TRUE
078A6:  MOVLW  01
078A8:  MOVWF  01
078AA:  GOTO   78C6
....................          }        
....................          break;
078AE:  GOTO   78C2
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
078B2:  MOVFF  383,385
078B6:  MOVFF  382,384
078BA:  GOTO   77D2
....................          break;
078BE:  GOTO   78C2
....................    }
....................    return FALSE;
078C2:  MOVLW  00
078C4:  MOVWF  01
078C6:  GOTO   8164 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
05FB6:  MOVLW  32
05FB8:  MOVWF  FF6
05FBA:  MOVLW  11
05FBC:  MOVWF  FF7
05FBE:  MOVLW  00
05FC0:  MOVWF  FF8
05FC2:  CALL   13DE
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
05FC6:  MOVLW  48
05FC8:  MOVWF  FF6
05FCA:  MOVLW  11
05FCC:  MOVWF  FF7
05FCE:  MOVLW  00
05FD0:  MOVWF  FF8
05FD2:  CALL   13DE
....................    transmit_ack();
05FD6:  CALL   38C0
.................... 
....................    status[0] = EXECUTING_MISSION;
05FDA:  MOVLW  02
05FDC:  MOVWF  1D
....................    execute_mission(command->content);
05FDE:  MOVLW  03
05FE0:  MOVLB  3
05FE2:  ADDWF  x84,W
05FE4:  MOVWF  01
05FE6:  MOVLW  00
05FE8:  ADDWFC x85,W
05FEA:  MOVWF  03
05FEC:  MOVF   01,W
05FEE:  MOVWF  x86
05FF0:  MOVFF  03,387
05FF4:  MOVFF  387,389
05FF8:  MOVFF  386,388
05FFC:  MOVLB  0
05FFE:  GOTO   5D96
....................    if (is_empty_smf_data())
06002:  CALL   5FA0
06006:  MOVF   01,F
06008:  BTFSC  FD8.2
0600A:  GOTO   6016
....................       status[0] = FINISHED;
0600E:  MOVLW  06
06010:  MOVWF  1D
06012:  GOTO   601A
....................    else
....................       status[0] = SMF_USE_REQ;
06016:  MOVLW  04
06018:  MOVWF  1D
0601A:  GOTO   788E (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
06038:  MOVLW  62
0603A:  MOVWF  FF6
0603C:  MOVLW  11
0603E:  MOVWF  FF7
06040:  MOVLW  00
06042:  MOVWF  FF8
06044:  CALL   13DE
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
06048:  MOVLW  76
0604A:  MOVWF  FF6
0604C:  MOVLW  11
0604E:  MOVWF  FF7
06050:  MOVLW  00
06052:  MOVWF  FF8
06054:  CALL   13DE
....................    transmit_status();
06058:  GOTO   601E
....................    if (status[0] == FINISHED)
0605C:  MOVF   1D,W
0605E:  SUBLW  06
06060:  BTFSS  FD8.2
06062:  GOTO   6082
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
06066:  MOVLW  94
06068:  MOVWF  FF6
0606A:  MOVLW  11
0606C:  MOVWF  FF7
0606E:  MOVLW  00
06070:  MOVWF  FF8
06072:  CALL   13DE
....................       return TRUE;
06076:  MOVLW  01
06078:  MOVWF  01
0607A:  GOTO   608A
....................    }
0607E:  GOTO   608A
....................    else{
....................       return FALSE;
06082:  MOVLW  00
06084:  MOVWF  01
06086:  GOTO   608A
....................    }
0608A:  GOTO   789E (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
077D2:  MOVLW  B0
077D4:  MOVWF  FF6
077D6:  MOVLW  11
077D8:  MOVWF  FF7
077DA:  MOVLW  00
077DC:  MOVWF  FF8
077DE:  CALL   13DE
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
077E2:  MOVLW  CA
077E4:  MOVWF  FF6
077E6:  MOVLW  11
077E8:  MOVWF  FF7
077EA:  MOVLW  00
077EC:  MOVWF  FF8
077EE:  CALL   13DE
....................     transmit_ack();
077F2:  CALL   38C0
....................     
....................     if (command->content[0] == ALLOW) {
077F6:  MOVLW  03
077F8:  MOVLB  3
077FA:  ADDWF  x84,W
077FC:  MOVWF  FE9
077FE:  MOVLW  00
07800:  ADDWFC x85,W
07802:  MOVWF  FEA
07804:  DECFSZ FEF,W
07806:  BRA    780C
07808:  BRA    7812
0780A:  MOVLB  0
0780C:  MOVLB  0
0780E:  GOTO   7834
07812:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
07814:  MOVLW  E4
07816:  MOVWF  FF6
07818:  MOVLW  11
0781A:  MOVWF  FF7
0781C:  MOVLW  00
0781E:  MOVWF  FF8
07820:  CALL   13DE
....................         status[0] = COPYING;
07824:  MOVLW  05
07826:  MOVWF  1D
....................         smf_write();
07828:  GOTO   6AA8
....................         status[0] = FINISHED;
0782C:  MOVLW  06
0782E:  MOVWF  1D
....................     } else {
07830:  GOTO   7844
....................         fprintf(PC, "\t\t-> denyed\r\n");
07834:  MOVLW  F2
07836:  MOVWF  FF6
07838:  MOVLW  11
0783A:  MOVWF  FF7
0783C:  MOVLW  00
0783E:  MOVWF  FF8
07840:  CALL   13DE
....................     }
07844:  GOTO   78BE (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... unsigned int16 ad7490_read(int8 channel);
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
078CA:  CLRF   FF8
078CC:  BCF    FD0.7
078CE:  BSF    07.7
078D0:  MOVLB  E
078D2:  MOVLW  55
078D4:  MOVWF  F7E
078D6:  MOVLW  AA
078D8:  MOVWF  F7E
078DA:  BCF    F66.6
078DC:  MOVLW  F9
078DE:  MOVWF  x2C
078E0:  MOVLW  00
078E2:  MOVWF  x2E
078E4:  MOVLW  40
078E6:  MOVWF  x12
078E8:  MOVLW  30
078EA:  MOVWF  x13
078EC:  MOVLW  20
078EE:  MOVWF  x22
078F0:  MOVLW  55
078F2:  MOVWF  F7E
078F4:  MOVLW  AA
078F6:  MOVWF  F7E
078F8:  BSF    F66.6
078FA:  CLRF   F9B
078FC:  CLRF   F64
078FE:  CLRF   F65
07900:  CLRF   F66
07902:  MOVLW  02
07904:  MOVWF  FD3
07906:  CLRF   1B
07908:  MOVLB  F
0790A:  BSF    x2D.3
0790C:  MOVLW  A0
0790E:  MOVWF  x2B
07910:  MOVLW  01
07912:  MOVWF  x2C
07914:  MOVLW  A6
07916:  MOVWF  x2E
07918:  MOVLW  90
0791A:  MOVWF  x2F
0791C:  BCF    F93.6
0791E:  BSF    F8A.6
07920:  BCF    FC6.5
07922:  MOVLW  40
07924:  MOVWF  FC7
07926:  MOVLW  03
07928:  MOVWF  FC8
0792A:  MOVLW  2A
0792C:  MOVWF  FC6
0792E:  BCF    F92.1
07930:  BSF    F92.0
07932:  BCF    F92.3
07934:  BSF    F93.4
07936:  BCF    F93.5
07938:  BCF    F93.2
0793A:  BCF    F8A.2
0793C:  BCF    1C.0
0793E:  CLRF   24
07940:  CLRF   23
07942:  CLRF   22
07944:  CLRF   21
07946:  CLRF   28
07948:  CLRF   27
0794A:  CLRF   26
0794C:  CLRF   25
0794E:  CLRF   2A
07950:  CLRF   29
07952:  CLRF   2C
07954:  CLRF   2B
07956:  CLRF   4D
07958:  MOVLW  1E
0795A:  MOVLB  0
0795C:  MOVWF  xEE
0795E:  MOVLB  3
07960:  CLRF   x4A
07962:  CLRF   x49
07964:  CLRF   x48
07966:  CLRF   x47
07968:  CLRF   x4C
0796A:  CLRF   x4B
0796C:  CLRF   x4E
0796E:  CLRF   x4D
07970:  CLRF   x50
07972:  CLRF   x4F
07974:  CLRF   x52
07976:  CLRF   x51
07978:  CLRF   x70
0797A:  MOVLB  E
0797C:  CLRF   xD9
0797E:  CLRF   xDA
07980:  CLRF   xCE
07982:  CLRF   xCF
07984:  CLRF   xD0
07986:  CLRF   xD1
07988:  CLRF   xD2
0798A:  CLRF   xD3
0798C:  CLRF   xD4
0798E:  CLRF   xD5
07990:  CLRF   x45
07992:  CLRF   x46
07994:  CLRF   x47
07996:  BCF    x8D.7
07998:  BCF    x8D.6
0799A:  BCF    x8D.5
0799C:  MOVLB  F
0799E:  CLRF   x53
079A0:  CLRF   x38
079A2:  CLRF   x37
079A4:  MOVLB  0
079A6:  MOVLW  03
079A8:  MOVWF  1D
079AA:  CLRF   1E
079AC:  CLRF   1F
079AE:  CLRF   20
079B0:  CLRF   2D
079B2:  CLRF   2E
079B4:  CLRF   2F
079B6:  CLRF   30
079B8:  CLRF   31
079BA:  CLRF   32
079BC:  CLRF   33
079BE:  CLRF   34
079C0:  CLRF   35
079C2:  CLRF   36
079C4:  CLRF   37
079C6:  CLRF   38
079C8:  CLRF   39
079CA:  CLRF   3A
079CC:  CLRF   3B
079CE:  CLRF   3C
079D0:  CLRF   3D
079D2:  CLRF   3E
079D4:  CLRF   3F
079D6:  CLRF   40
079D8:  CLRF   41
079DA:  CLRF   42
079DC:  CLRF   43
079DE:  CLRF   44
079E0:  CLRF   45
079E2:  CLRF   46
079E4:  CLRF   47
079E6:  CLRF   48
079E8:  CLRF   49
079EA:  CLRF   4A
079EC:  CLRF   4B
079EE:  CLRF   4C
079F0:  CLRF   4E
079F2:  CLRF   4F
079F4:  CLRF   50
079F6:  CLRF   51
079F8:  CLRF   52
079FA:  CLRF   53
079FC:  CLRF   54
079FE:  CLRF   55
07A00:  CLRF   56
07A02:  CLRF   57
07A04:  CLRF   58
07A06:  CLRF   59
07A08:  CLRF   5A
07A0A:  CLRF   5B
07A0C:  CLRF   5C
07A0E:  CLRF   5D
07A10:  CLRF   5E
07A12:  CLRF   5F
07A14:  CLRF   x60
07A16:  CLRF   x61
07A18:  CLRF   x62
07A1A:  CLRF   x63
07A1C:  CLRF   x64
07A1E:  CLRF   x65
07A20:  CLRF   x66
07A22:  CLRF   x67
07A24:  CLRF   x68
07A26:  CLRF   x69
07A28:  CLRF   x6A
07A2A:  CLRF   x6B
07A2C:  CLRF   x6C
07A2E:  CLRF   x6D
07A30:  CLRF   x6E
07A32:  CLRF   x6F
07A34:  CLRF   x70
07A36:  CLRF   x71
07A38:  CLRF   x72
07A3A:  CLRF   x73
07A3C:  CLRF   x74
07A3E:  CLRF   x75
07A40:  CLRF   x76
07A42:  CLRF   x77
07A44:  CLRF   x78
07A46:  CLRF   x79
07A48:  CLRF   x7A
07A4A:  CLRF   x7B
07A4C:  CLRF   x7C
07A4E:  CLRF   x7D
07A50:  CLRF   x7E
07A52:  CLRF   x7F
07A54:  CLRF   x80
07A56:  CLRF   x81
07A58:  CLRF   x82
07A5A:  CLRF   x83
07A5C:  CLRF   x84
07A5E:  CLRF   x85
07A60:  CLRF   x86
07A62:  CLRF   x87
07A64:  CLRF   x88
07A66:  CLRF   x89
07A68:  CLRF   x8A
07A6A:  CLRF   x8B
07A6C:  CLRF   x8C
07A6E:  CLRF   x8D
07A70:  CLRF   x8E
07A72:  CLRF   x8F
07A74:  CLRF   x90
07A76:  CLRF   x91
07A78:  CLRF   x92
07A7A:  CLRF   x93
07A7C:  CLRF   x94
07A7E:  CLRF   x95
07A80:  CLRF   x96
07A82:  CLRF   x97
07A84:  CLRF   x98
07A86:  CLRF   x99
07A88:  CLRF   x9A
07A8A:  CLRF   x9B
07A8C:  CLRF   x9C
07A8E:  CLRF   x9D
07A90:  CLRF   x9E
07A92:  CLRF   x9F
07A94:  CLRF   xA0
07A96:  CLRF   xA1
07A98:  CLRF   xA2
07A9A:  CLRF   xA3
07A9C:  CLRF   xA4
07A9E:  CLRF   xA5
07AA0:  CLRF   xA6
07AA2:  CLRF   xA7
07AA4:  CLRF   xA8
07AA6:  CLRF   xA9
07AA8:  CLRF   xAA
07AAA:  CLRF   xAB
07AAC:  CLRF   xAC
07AAE:  CLRF   xAD
07AB0:  CLRF   xAE
07AB2:  CLRF   xAF
07AB4:  CLRF   xB0
07AB6:  CLRF   xB1
07AB8:  CLRF   xB2
07ABA:  CLRF   xB3
07ABC:  CLRF   xB4
07ABE:  CLRF   xB5
07AC0:  CLRF   xB6
07AC2:  CLRF   xB7
07AC4:  CLRF   xB8
07AC6:  CLRF   xB9
07AC8:  CLRF   xBA
07ACA:  CLRF   xBB
07ACC:  CLRF   xBC
07ACE:  CLRF   xBD
07AD0:  CLRF   xBE
07AD2:  CLRF   xBF
07AD4:  CLRF   xC0
07AD6:  CLRF   xC1
07AD8:  CLRF   xC2
07ADA:  CLRF   xC3
07ADC:  CLRF   xC4
07ADE:  CLRF   xC5
07AE0:  CLRF   xC6
07AE2:  CLRF   xC7
07AE4:  CLRF   xC8
07AE6:  CLRF   xC9
07AE8:  CLRF   xCA
07AEA:  CLRF   xCB
07AEC:  CLRF   xCC
07AEE:  CLRF   xCD
07AF0:  CLRF   xCE
07AF2:  CLRF   xCF
07AF4:  CLRF   xD0
07AF6:  CLRF   xD1
07AF8:  CLRF   xD2
07AFA:  CLRF   xD3
07AFC:  CLRF   xD4
07AFE:  CLRF   xD5
07B00:  CLRF   xD6
07B02:  CLRF   xD7
07B04:  CLRF   xD8
07B06:  CLRF   xD9
07B08:  CLRF   xDA
07B0A:  CLRF   xDB
07B0C:  CLRF   xDC
07B0E:  CLRF   xDD
07B10:  CLRF   xDE
07B12:  CLRF   xDF
07B14:  CLRF   xE0
07B16:  CLRF   xE1
07B18:  MOVLW  05
07B1A:  MOVWF  xE2
07B1C:  MOVLW  7C
07B1E:  MOVWF  xE3
07B20:  MOVLW  01
07B22:  MOVWF  xE4
07B24:  MOVLW  01
07B26:  MOVWF  xE5
07B28:  MOVLW  02
07B2A:  MOVWF  xE6
07B2C:  MOVLW  7C
07B2E:  MOVWF  xE7
07B30:  CLRF   xE8
07B32:  MOVLW  09
07B34:  MOVWF  xE9
07B36:  MOVLW  01
07B38:  MOVWF  xEA
07B3A:  CLRF   xEB
07B3C:  MOVLW  02
07B3E:  MOVWF  xEC
07B40:  MOVLW  01
07B42:  MOVWF  xED
07B44:  CLRF   xEF
07B46:  CLRF   xF0
07B48:  CLRF   xF1
07B4A:  CLRF   xF2
07B4C:  CLRF   xF3
07B4E:  CLRF   xF4
07B50:  CLRF   xF5
07B52:  CLRF   xF6
07B54:  CLRF   xF7
07B56:  CLRF   xF8
07B58:  CLRF   xF9
07B5A:  CLRF   xFA
07B5C:  CLRF   xFB
07B5E:  CLRF   xFC
07B60:  CLRF   xFD
07B62:  CLRF   xFE
07B64:  CLRF   xFF
07B66:  MOVLB  1
07B68:  CLRF   x00
07B6A:  CLRF   x01
07B6C:  CLRF   x02
07B6E:  CLRF   x03
07B70:  CLRF   x04
07B72:  CLRF   x05
07B74:  CLRF   x06
07B76:  CLRF   x07
07B78:  CLRF   x08
07B7A:  CLRF   x09
07B7C:  CLRF   x0A
07B7E:  CLRF   x0B
07B80:  CLRF   x0C
07B82:  CLRF   x0D
07B84:  CLRF   x0E
07B86:  CLRF   x0F
07B88:  CLRF   x10
07B8A:  CLRF   x11
07B8C:  CLRF   x12
07B8E:  CLRF   x13
07B90:  CLRF   x14
07B92:  CLRF   x15
07B94:  CLRF   x16
07B96:  CLRF   x17
07B98:  CLRF   x18
07B9A:  CLRF   x19
07B9C:  CLRF   x1A
07B9E:  CLRF   x1B
07BA0:  CLRF   x1C
07BA2:  CLRF   x1D
07BA4:  CLRF   x1E
07BA6:  CLRF   x1F
07BA8:  CLRF   x20
07BAA:  CLRF   x21
07BAC:  CLRF   x22
07BAE:  CLRF   x23
07BB0:  CLRF   x24
07BB2:  CLRF   x25
07BB4:  CLRF   x26
07BB6:  CLRF   x27
07BB8:  CLRF   x28
07BBA:  CLRF   x29
07BBC:  CLRF   x2A
07BBE:  CLRF   x2B
07BC0:  CLRF   x2C
07BC2:  CLRF   x2D
07BC4:  CLRF   x2E
07BC6:  CLRF   x2F
07BC8:  CLRF   x30
07BCA:  CLRF   x31
07BCC:  CLRF   x32
07BCE:  CLRF   x33
07BD0:  CLRF   x34
07BD2:  CLRF   x35
07BD4:  CLRF   x36
07BD6:  CLRF   x37
07BD8:  CLRF   x38
07BDA:  CLRF   x39
07BDC:  CLRF   x3A
07BDE:  CLRF   x3B
07BE0:  CLRF   x3C
07BE2:  CLRF   x3D
07BE4:  CLRF   x3E
07BE6:  CLRF   x3F
07BE8:  CLRF   x40
07BEA:  CLRF   x41
07BEC:  CLRF   x42
07BEE:  CLRF   x43
07BF0:  CLRF   x44
07BF2:  CLRF   x45
07BF4:  CLRF   x46
07BF6:  CLRF   x47
07BF8:  CLRF   x48
07BFA:  CLRF   x49
07BFC:  CLRF   x4A
07BFE:  CLRF   x4B
07C00:  CLRF   x4C
07C02:  CLRF   x4D
07C04:  CLRF   x4E
07C06:  CLRF   x4F
07C08:  CLRF   x50
07C0A:  CLRF   x51
07C0C:  CLRF   x52
07C0E:  CLRF   x53
07C10:  CLRF   x54
07C12:  CLRF   x55
07C14:  CLRF   x56
07C16:  CLRF   x57
07C18:  CLRF   x58
07C1A:  CLRF   x59
07C1C:  CLRF   x5A
07C1E:  CLRF   x5B
07C20:  CLRF   x5C
07C22:  CLRF   x5D
07C24:  CLRF   x5E
07C26:  CLRF   x5F
07C28:  CLRF   x60
07C2A:  CLRF   x61
07C2C:  CLRF   x62
07C2E:  CLRF   x63
07C30:  CLRF   x64
07C32:  CLRF   x65
07C34:  CLRF   x66
07C36:  CLRF   x67
07C38:  CLRF   x68
07C3A:  CLRF   x69
07C3C:  CLRF   x6A
07C3E:  CLRF   x6B
07C40:  CLRF   x6C
07C42:  CLRF   x6D
07C44:  CLRF   x6E
07C46:  CLRF   x6F
07C48:  CLRF   x70
07C4A:  CLRF   x71
07C4C:  CLRF   x72
07C4E:  CLRF   x73
07C50:  CLRF   x74
07C52:  CLRF   x75
07C54:  CLRF   x76
07C56:  CLRF   x77
07C58:  CLRF   x78
07C5A:  CLRF   x79
07C5C:  CLRF   x7A
07C5E:  CLRF   x7B
07C60:  CLRF   x7C
07C62:  CLRF   x7D
07C64:  CLRF   x7E
07C66:  CLRF   x7F
07C68:  CLRF   x80
07C6A:  CLRF   x81
07C6C:  CLRF   x82
07C6E:  CLRF   x83
07C70:  CLRF   x84
07C72:  CLRF   x85
07C74:  CLRF   x86
07C76:  CLRF   x87
07C78:  CLRF   x88
07C7A:  CLRF   x89
07C7C:  CLRF   x8A
07C7E:  CLRF   x8B
07C80:  CLRF   x8C
07C82:  CLRF   x8D
07C84:  CLRF   x8E
07C86:  CLRF   x8F
07C88:  CLRF   x90
07C8A:  CLRF   x91
07C8C:  CLRF   x92
07C8E:  CLRF   x93
07C90:  CLRF   x94
07C92:  CLRF   x95
07C94:  CLRF   x96
07C96:  CLRF   x97
07C98:  CLRF   x98
07C9A:  CLRF   x99
07C9C:  CLRF   x9A
07C9E:  CLRF   x9B
07CA0:  CLRF   x9C
07CA2:  CLRF   x9D
07CA4:  CLRF   x9E
07CA6:  CLRF   x9F
07CA8:  CLRF   xA0
07CAA:  CLRF   xA1
07CAC:  CLRF   xA2
07CAE:  CLRF   xA3
07CB0:  CLRF   xA4
07CB2:  CLRF   xA5
07CB4:  CLRF   xA6
07CB6:  CLRF   xA7
07CB8:  CLRF   xA8
07CBA:  CLRF   xA9
07CBC:  CLRF   xAA
07CBE:  CLRF   xAB
07CC0:  CLRF   xAC
07CC2:  CLRF   xAD
07CC4:  CLRF   xAE
07CC6:  CLRF   xAF
07CC8:  CLRF   xB0
07CCA:  CLRF   xB1
07CCC:  CLRF   xB2
07CCE:  CLRF   xB3
07CD0:  CLRF   xB4
07CD2:  CLRF   xB5
07CD4:  CLRF   xB6
07CD6:  CLRF   xB7
07CD8:  CLRF   xB8
07CDA:  CLRF   xB9
07CDC:  CLRF   xBA
07CDE:  CLRF   xBB
07CE0:  CLRF   xBC
07CE2:  CLRF   xBD
07CE4:  CLRF   xBE
07CE6:  CLRF   xBF
07CE8:  CLRF   xC0
07CEA:  CLRF   xC1
07CEC:  CLRF   xC2
07CEE:  CLRF   xC3
07CF0:  CLRF   xC4
07CF2:  CLRF   xC5
07CF4:  CLRF   xC6
07CF6:  CLRF   xC7
07CF8:  CLRF   xC8
07CFA:  CLRF   xC9
07CFC:  CLRF   xCA
07CFE:  CLRF   xCB
07D00:  CLRF   xCC
07D02:  CLRF   xCD
07D04:  CLRF   xCE
07D06:  CLRF   xCF
07D08:  CLRF   xD0
07D0A:  CLRF   xD1
07D0C:  CLRF   xD2
07D0E:  CLRF   xD3
07D10:  CLRF   xD4
07D12:  CLRF   xD5
07D14:  CLRF   xD6
07D16:  CLRF   xD7
07D18:  CLRF   xD8
07D1A:  CLRF   xD9
07D1C:  CLRF   xDA
07D1E:  CLRF   xDB
07D20:  CLRF   xDC
07D22:  CLRF   xDD
07D24:  CLRF   xDE
07D26:  CLRF   xDF
07D28:  CLRF   xE0
07D2A:  CLRF   xE1
07D2C:  CLRF   xE2
07D2E:  CLRF   xE3
07D30:  CLRF   xE4
07D32:  CLRF   xE5
07D34:  CLRF   xE6
07D36:  CLRF   xE7
07D38:  CLRF   xE8
07D3A:  CLRF   xE9
07D3C:  CLRF   xEA
07D3E:  CLRF   xEB
07D40:  CLRF   xEC
07D42:  CLRF   xED
07D44:  CLRF   xEE
07D46:  CLRF   xEF
07D48:  CLRF   xF0
07D4A:  CLRF   xF1
07D4C:  CLRF   xF2
07D4E:  CLRF   xF3
07D50:  CLRF   xF4
07D52:  CLRF   xF5
07D54:  CLRF   xF6
07D56:  CLRF   xF7
07D58:  CLRF   xF8
07D5A:  CLRF   xF9
07D5C:  CLRF   xFA
07D5E:  CLRF   xFB
07D60:  CLRF   xFC
07D62:  CLRF   xFD
07D64:  CLRF   xFE
07D66:  CLRF   xFF
07D68:  MOVLB  2
07D6A:  CLRF   x00
07D6C:  CLRF   x01
07D6E:  CLRF   x02
07D70:  CLRF   x03
07D72:  CLRF   x04
07D74:  CLRF   x05
07D76:  CLRF   x06
07D78:  CLRF   x07
07D7A:  CLRF   x08
07D7C:  CLRF   x09
07D7E:  CLRF   x0A
07D80:  CLRF   x0B
07D82:  CLRF   x0C
07D84:  CLRF   x0D
07D86:  CLRF   x0E
07D88:  CLRF   x0F
07D8A:  CLRF   x10
07D8C:  CLRF   x11
07D8E:  CLRF   x12
07D90:  CLRF   x13
07D92:  CLRF   x14
07D94:  CLRF   x15
07D96:  CLRF   x16
07D98:  CLRF   x17
07D9A:  CLRF   x18
07D9C:  CLRF   x19
07D9E:  CLRF   x1A
07DA0:  CLRF   x1B
07DA2:  CLRF   x1C
07DA4:  CLRF   x1D
07DA6:  CLRF   x1E
07DA8:  CLRF   x1F
07DAA:  CLRF   x20
07DAC:  CLRF   x21
07DAE:  CLRF   x22
07DB0:  CLRF   x23
07DB2:  CLRF   x24
07DB4:  CLRF   x25
07DB6:  CLRF   x26
07DB8:  CLRF   x27
07DBA:  CLRF   x28
07DBC:  CLRF   x29
07DBE:  CLRF   x2A
07DC0:  CLRF   x2B
07DC2:  CLRF   x2C
07DC4:  CLRF   x2D
07DC6:  CLRF   x2E
07DC8:  CLRF   x2F
07DCA:  CLRF   x30
07DCC:  CLRF   x31
07DCE:  CLRF   x32
07DD0:  CLRF   x33
07DD2:  CLRF   x34
07DD4:  CLRF   x35
07DD6:  CLRF   x36
07DD8:  CLRF   x37
07DDA:  CLRF   x38
07DDC:  CLRF   x39
07DDE:  CLRF   x3A
07DE0:  CLRF   x3B
07DE2:  CLRF   x3C
07DE4:  CLRF   x3D
07DE6:  CLRF   x3E
07DE8:  CLRF   x3F
07DEA:  CLRF   x40
07DEC:  CLRF   x41
07DEE:  CLRF   x42
07DF0:  CLRF   x43
07DF2:  CLRF   x44
07DF4:  CLRF   x45
07DF6:  CLRF   x46
07DF8:  CLRF   x47
07DFA:  CLRF   x48
07DFC:  CLRF   x49
07DFE:  CLRF   x4A
07E00:  CLRF   x4B
07E02:  CLRF   x4C
07E04:  CLRF   x4D
07E06:  CLRF   x4E
07E08:  CLRF   x4F
07E0A:  CLRF   x50
07E0C:  CLRF   x51
07E0E:  CLRF   x52
07E10:  CLRF   x53
07E12:  CLRF   x54
07E14:  CLRF   x55
07E16:  CLRF   x56
07E18:  CLRF   x57
07E1A:  CLRF   x58
07E1C:  CLRF   x59
07E1E:  CLRF   x5A
07E20:  CLRF   x5B
07E22:  CLRF   x5C
07E24:  CLRF   x5D
07E26:  CLRF   x5E
07E28:  CLRF   x5F
07E2A:  CLRF   x60
07E2C:  CLRF   x61
07E2E:  CLRF   x62
07E30:  CLRF   x63
07E32:  CLRF   x64
07E34:  CLRF   x65
07E36:  CLRF   x66
07E38:  CLRF   x67
07E3A:  CLRF   x68
07E3C:  CLRF   x69
07E3E:  CLRF   x6A
07E40:  CLRF   x6B
07E42:  CLRF   x6C
07E44:  CLRF   x6D
07E46:  CLRF   x6E
07E48:  CLRF   x6F
07E4A:  CLRF   x70
07E4C:  CLRF   x71
07E4E:  CLRF   x72
07E50:  CLRF   x73
07E52:  CLRF   x74
07E54:  CLRF   x75
07E56:  CLRF   x76
07E58:  CLRF   x77
07E5A:  CLRF   x78
07E5C:  CLRF   x79
07E5E:  CLRF   x7A
07E60:  CLRF   x7B
07E62:  CLRF   x7C
07E64:  CLRF   x7D
07E66:  CLRF   x7E
07E68:  CLRF   x7F
07E6A:  CLRF   x80
07E6C:  CLRF   x81
07E6E:  CLRF   x82
07E70:  CLRF   x83
07E72:  CLRF   x84
07E74:  CLRF   x85
07E76:  CLRF   x86
07E78:  CLRF   x87
07E7A:  CLRF   x88
07E7C:  CLRF   x89
07E7E:  CLRF   x8A
07E80:  CLRF   x8B
07E82:  CLRF   x8C
07E84:  CLRF   x8D
07E86:  CLRF   x8E
07E88:  CLRF   x8F
07E8A:  CLRF   x90
07E8C:  CLRF   x91
07E8E:  CLRF   x92
07E90:  CLRF   x93
07E92:  CLRF   x94
07E94:  CLRF   x95
07E96:  CLRF   x96
07E98:  CLRF   x97
07E9A:  CLRF   x98
07E9C:  CLRF   x99
07E9E:  CLRF   x9A
07EA0:  CLRF   x9B
07EA2:  CLRF   x9C
07EA4:  CLRF   x9D
07EA6:  CLRF   x9E
07EA8:  CLRF   x9F
07EAA:  CLRF   xA0
07EAC:  CLRF   xA1
07EAE:  CLRF   xA2
07EB0:  CLRF   xA3
07EB2:  CLRF   xA4
07EB4:  CLRF   xA5
07EB6:  CLRF   xA6
07EB8:  CLRF   xA7
07EBA:  CLRF   xA8
07EBC:  CLRF   xA9
07EBE:  CLRF   xAA
07EC0:  CLRF   xAB
07EC2:  CLRF   xAC
07EC4:  CLRF   xAD
07EC6:  CLRF   xAE
07EC8:  CLRF   xAF
07ECA:  CLRF   xB0
07ECC:  CLRF   xB1
07ECE:  CLRF   xB2
07ED0:  CLRF   xB3
07ED2:  CLRF   xB4
07ED4:  CLRF   xB5
07ED6:  CLRF   xB6
07ED8:  CLRF   xB7
07EDA:  CLRF   xB8
07EDC:  CLRF   xB9
07EDE:  CLRF   xBA
07EE0:  CLRF   xBB
07EE2:  CLRF   xBC
07EE4:  CLRF   xBD
07EE6:  CLRF   xBE
07EE8:  CLRF   xBF
07EEA:  CLRF   xC0
07EEC:  CLRF   xC1
07EEE:  CLRF   xC2
07EF0:  CLRF   xC3
07EF2:  CLRF   xC4
07EF4:  CLRF   xC5
07EF6:  CLRF   xC6
07EF8:  CLRF   xC7
07EFA:  CLRF   xC8
07EFC:  CLRF   xC9
07EFE:  CLRF   xCA
07F00:  CLRF   xCB
07F02:  CLRF   xCC
07F04:  CLRF   xCD
07F06:  CLRF   xCE
07F08:  CLRF   xCF
07F0A:  CLRF   xD0
07F0C:  CLRF   xD1
07F0E:  CLRF   xD2
07F10:  CLRF   xD3
07F12:  CLRF   xD4
07F14:  CLRF   xD5
07F16:  CLRF   xD6
07F18:  CLRF   xD7
07F1A:  CLRF   xD8
07F1C:  CLRF   xD9
07F1E:  CLRF   xDA
07F20:  CLRF   xDB
07F22:  CLRF   xDC
07F24:  CLRF   xDD
07F26:  CLRF   xDE
07F28:  CLRF   xDF
07F2A:  CLRF   xE0
07F2C:  CLRF   xE1
07F2E:  CLRF   xE2
07F30:  CLRF   xE3
07F32:  CLRF   xE4
07F34:  CLRF   xE5
07F36:  CLRF   xE6
07F38:  CLRF   xE7
07F3A:  CLRF   xE8
07F3C:  CLRF   xE9
07F3E:  CLRF   xEA
07F40:  CLRF   xEB
07F42:  CLRF   xEC
07F44:  CLRF   xED
07F46:  CLRF   xEE
07F48:  CLRF   xEF
07F4A:  CLRF   xF0
07F4C:  CLRF   xF1
07F4E:  CLRF   xF2
07F50:  CLRF   xF3
07F52:  CLRF   xF4
07F54:  CLRF   xF5
07F56:  CLRF   xF6
07F58:  CLRF   xF7
07F5A:  CLRF   xF8
07F5C:  CLRF   xF9
07F5E:  CLRF   xFA
07F60:  CLRF   xFB
07F62:  CLRF   xFC
07F64:  CLRF   xFD
07F66:  CLRF   xFE
07F68:  CLRF   xFF
07F6A:  MOVLB  3
07F6C:  CLRF   x00
07F6E:  CLRF   x01
07F70:  CLRF   x02
07F72:  CLRF   x03
07F74:  CLRF   x04
07F76:  CLRF   x05
07F78:  CLRF   x06
07F7A:  CLRF   x07
07F7C:  CLRF   x08
07F7E:  CLRF   x09
07F80:  CLRF   x0A
07F82:  CLRF   x0B
07F84:  CLRF   x0C
07F86:  CLRF   x0D
07F88:  CLRF   x0E
07F8A:  CLRF   x0F
07F8C:  CLRF   x10
07F8E:  CLRF   x11
07F90:  CLRF   x12
07F92:  CLRF   x13
07F94:  CLRF   x14
07F96:  CLRF   x15
07F98:  CLRF   x16
07F9A:  CLRF   x17
07F9C:  CLRF   x18
07F9E:  CLRF   x19
07FA0:  CLRF   x1A
07FA2:  CLRF   x1B
07FA4:  CLRF   x1C
07FA6:  CLRF   x1D
07FA8:  CLRF   x1E
07FAA:  CLRF   x1F
07FAC:  CLRF   x20
07FAE:  CLRF   x21
07FB0:  CLRF   x22
07FB2:  CLRF   x23
07FB4:  CLRF   x24
07FB6:  CLRF   x25
07FB8:  CLRF   x26
07FBA:  CLRF   x27
07FBC:  CLRF   x28
07FBE:  CLRF   x29
07FC0:  CLRF   x2A
07FC2:  CLRF   x2B
07FC4:  CLRF   x2C
07FC6:  CLRF   x2D
07FC8:  CLRF   x2E
07FCA:  CLRF   x2F
07FCC:  CLRF   x30
07FCE:  CLRF   x31
07FD0:  CLRF   x32
07FD2:  CLRF   x33
07FD4:  CLRF   x34
07FD6:  CLRF   x35
07FD8:  CLRF   x36
07FDA:  CLRF   x37
07FDC:  CLRF   x38
07FDE:  CLRF   x39
07FE0:  CLRF   x3A
07FE2:  CLRF   x3B
07FE4:  CLRF   x3C
07FE6:  CLRF   x3D
07FE8:  CLRF   x3E
07FEA:  CLRF   x3F
07FEC:  CLRF   x40
07FEE:  CLRF   x41
07FF0:  CLRF   x42
07FF2:  CLRF   x43
07FF4:  CLRF   x44
07FF6:  CLRF   x45
07FF8:  CLRF   x46
07FFA:  CLRF   x71
07FFC:  CLRF   x72
07FFE:  CLRF   x73
08000:  CLRF   x74
08002:  MOVLB  0
.................... { 
....................    delay_ms(1000); // wait for power stable
08004:  MOVLW  04
08006:  MOVLB  3
08008:  MOVWF  x82
0800A:  MOVLB  0
0800C:  MOVLW  FA
0800E:  MOVLB  4
08010:  MOVWF  xFB
08012:  MOVLB  0
08014:  CALL   135E
08018:  MOVLB  3
0801A:  DECFSZ x82,F
0801C:  BRA    8022
0801E:  BRA    8026
08020:  MOVLB  0
08022:  MOVLB  0
08024:  BRA    800C
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
08026:  MOVLW  00
08028:  MOVWF  FF6
0802A:  MOVLW  12
0802C:  MOVWF  FF7
0802E:  MOVLW  00
08030:  MOVWF  FF8
08032:  MOVLB  0
08034:  CALL   13DE
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
08038:  MOVLW  46
0803A:  MOVWF  FF6
0803C:  MOVLW  12
0803E:  MOVWF  FF7
08040:  MOVLW  00
08042:  MOVWF  FF8
08044:  CALL   13DE
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
08048:  MOVLW  74
0804A:  MOVWF  FF6
0804C:  MOVLW  12
0804E:  MOVWF  FF7
08050:  MOVLW  00
08052:  MOVWF  FF8
08054:  MOVLW  10
08056:  MOVLB  4
08058:  MOVWF  x19
0805A:  MOVLB  0
0805C:  CALL   140E
08060:  MOVLW  9A
08062:  MOVWF  FF6
08064:  MOVLW  12
08066:  MOVWF  FF7
08068:  MOVLW  00
0806A:  MOVWF  FF8
0806C:  CALL   13DE
08070:  MOVLW  20
08072:  MOVLB  4
08074:  MOVWF  xE6
08076:  MOVLB  0
08078:  CALL   138C
0807C:  MOVLW  A4
0807E:  MOVWF  FF6
08080:  MOVLW  12
08082:  MOVWF  FF7
08084:  MOVLW  00
08086:  MOVWF  FF8
08088:  CALL   13DE
0808C:  MOVLW  89
0808E:  MOVWF  FF6
08090:  MOVLW  12
08092:  MOVWF  FF7
08094:  MOVLW  00
08096:  MOVWF  FF8
08098:  MOVLW  0F
0809A:  MOVLB  4
0809C:  MOVWF  x19
0809E:  MOVLB  0
080A0:  CALL   140E
....................    
....................    io_init();
080A4:  GOTO   1444
....................    //adc_init();
....................    setup_uart_to_boss();
080A8:  GOTO   1470
....................    //setup_timer();
....................    ad7490_init();
080AC:  GOTO   149A
....................    misf_init();
080B0:  CALL   1A86
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
080B4:  MOVFF  370,492
080B8:  MOVLB  4
080BA:  CLRF   x93
080BC:  MOVLB  0
080BE:  CALL   2FC0
.................... 
....................    int1 is_finished = FALSE;
080C2:  MOVLB  3
080C4:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
080C6:  MOVLW  AE
080C8:  MOVWF  FF6
080CA:  MOVLW  12
080CC:  MOVWF  FF7
080CE:  MOVLW  00
080D0:  MOVWF  FF8
080D2:  MOVLB  0
080D4:  CALL   13DE
....................    
....................    //dac_cell.write_spi = spi_cell_write;
....................    //dac_cell.cs_pin = PIN_C0;
.................... 
....................    //mcp4911_init(&dac_cell);
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
080D8:  MOVLW  D4
080DA:  MOVWF  FF6
080DC:  MOVLW  12
080DE:  MOVWF  FF7
080E0:  MOVLW  00
080E2:  MOVWF  FF8
080E4:  CALL   13DE
....................    
....................    //Start loop
....................    while(!is_finished)
080E8:  MOVLB  3
080EA:  BTFSS  x75.0
080EC:  BRA    80F4
080EE:  MOVLB  0
080F0:  GOTO   81C2
080F4:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
080F6:  MOVF   4D,F
080F8:  BTFSC  FD8.2
080FA:  GOTO   817E
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
080FE:  MOVLB  3
08100:  CLRF   x89
08102:  MOVLW  2D
08104:  MOVWF  x88
08106:  MOVFF  4D,38A
0810A:  MOVLB  0
0810C:  GOTO   3506
08110:  MOVFF  02,03
08114:  MOVF   01,W
08116:  MOVWF  FE1
08118:  MOVFF  03,FE2
0811C:  MOVLW  03
0811E:  MOVWF  FEA
08120:  MOVLW  76
08122:  MOVWF  FE9
08124:  MOVLW  0C
08126:  MOVWF  01
08128:  MOVFF  FE6,FEE
0812C:  DECFSZ 01,F
0812E:  GOTO   8128
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
08132:  MOVLB  3
08134:  CLRF   x83
08136:  MOVLW  2D
08138:  MOVWF  x82
0813A:  CLRF   x85
0813C:  MOVLW  4D
0813E:  MOVWF  x84
08140:  MOVLB  0
08142:  GOTO   3728
....................          
....................          if(recieve_cmd.is_exist)
08146:  MOVLB  3
08148:  BTFSC  x78.0
0814A:  BRA    8152
0814C:  MOVLB  0
0814E:  GOTO   816E
08152:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
08154:  MOVLW  03
08156:  MOVLB  3
08158:  MOVWF  x83
0815A:  MOVLW  76
0815C:  MOVWF  x82
0815E:  MOVLB  0
08160:  GOTO   7848
08164:  MOVLB  3
08166:  BCF    x75.1
08168:  BTFSC  01.0
0816A:  BSF    x75.1
0816C:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
0816E:  MOVLW  F2
08170:  MOVWF  FF6
08172:  MOVLW  12
08174:  MOVWF  FF7
08176:  MOVLW  00
08178:  MOVWF  FF8
0817A:  CALL   13DE
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0817E:  MOVLB  3
08180:  BTFSC  x75.0
08182:  BRA    818A
08184:  MOVLB  0
08186:  GOTO   8190
0818A:  MOVLB  0
....................          break;
0818C:  GOTO   81C2
....................          
....................       delay_ms(400);
08190:  MOVLW  02
08192:  MOVLB  3
08194:  MOVWF  x82
08196:  MOVLB  0
08198:  MOVLW  C8
0819A:  MOVLB  4
0819C:  MOVWF  xFB
0819E:  MOVLB  0
081A0:  CALL   135E
081A4:  MOVLB  3
081A6:  DECFSZ x82,F
081A8:  BRA    81AE
081AA:  BRA    81B2
081AC:  MOVLB  0
081AE:  MOVLB  0
081B0:  BRA    8198
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
081B2:  MOVLW  2E
081B4:  MOVLB  4
081B6:  MOVWF  xE6
081B8:  MOVLB  0
081BA:  CALL   138C
081BE:  GOTO   80E8
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
081C2:  MOVLW  12
081C4:  MOVWF  FF6
081C6:  MOVLW  13
081C8:  MOVWF  FF7
081CA:  MOVLW  00
081CC:  MOVWF  FF8
081CE:  CALL   13DE
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
081D2:  MOVLW  2E
081D4:  MOVLB  4
081D6:  MOVWF  xE6
081D8:  MOVLB  0
081DA:  CALL   138C
....................       delay_ms(1000);
081DE:  MOVLW  04
081E0:  MOVLB  3
081E2:  MOVWF  x82
081E4:  MOVLB  0
081E6:  MOVLW  FA
081E8:  MOVLB  4
081EA:  MOVWF  xFB
081EC:  MOVLB  0
081EE:  CALL   135E
081F2:  MOVLB  3
081F4:  DECFSZ x82,F
081F6:  BRA    81FC
081F8:  BRA    8200
081FA:  MOVLB  0
081FC:  MOVLB  0
081FE:  BRA    81E6
08200:  MOVLB  0
08202:  GOTO   81D2
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
08206:  MOVLW  52
08208:  MOVWF  FF6
0820A:  MOVLW  13
0820C:  MOVWF  FF7
0820E:  MOVLW  00
08210:  MOVWF  FF8
08212:  CALL   13DE
....................    
.................... }
.................... 
08216:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
