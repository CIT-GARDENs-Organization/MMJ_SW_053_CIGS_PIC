CCS PCH C Compiler, Version 5.104, 57077               21-7-25 20:15

               Filename:   build\mmj_cigs_main.lst

               ROM used:   36228 bytes (28%)
                           Largest free fragment is 65520
               RAM used:   899 (25%) at main() level
                           2157 (60%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   8428
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  FF8,18
00048:  MOVFF  FFB,19
0004C:  MOVFF  00,0E
00050:  MOVFF  01,0F
00054:  MOVFF  02,10
00058:  MOVFF  03,11
0005C:  BTFSS  F9D.0
0005E:  GOTO   0068
00062:  BTFSC  F9E.0
00064:  GOTO   00D4
00068:  BTFSS  F61.5
0006A:  GOTO   0074
0006E:  BTFSC  FA6.5
00070:  GOTO   05DC
00074:  MOVFF  0E,00
00078:  MOVFF  0F,01
0007C:  MOVFF  10,02
00080:  MOVFF  11,03
00084:  MOVFF  0C,FE9
00088:  MOVFF  07,FEA
0008C:  BSF    07.7
0008E:  MOVFF  08,FE1
00092:  MOVFF  09,FE2
00096:  MOVFF  0A,FD9
0009A:  MOVFF  0B,FDA
0009E:  MOVFF  12,FF3
000A2:  MOVFF  13,FF4
000A6:  MOVFF  14,FFA
000AA:  MOVFF  15,FF5
000AE:  MOVFF  16,FF6
000B2:  MOVFF  17,FF7
000B6:  MOVFF  18,FF8
000BA:  MOVFF  19,FFB
000BE:  MOVF   04,W
000C0:  MOVFF  06,FE0
000C4:  MOVFF  05,FD8
000C8:  RETFIE 0
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: ハードウェア抽象化層
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000CA:  DATA 52,65
000CC:  DATA 61,64
000CE:  DATA 20,49
000D0:  DATA 44,3A
000D2:  DATA 00,00
*
000F4:  DATA 54,69
000F6:  DATA 6D,65
000F8:  DATA 72,20
000FA:  DATA 49,6E
000FC:  DATA 69,74
000FE:  DATA 69,61
00100:  DATA 6C,69
00102:  DATA 7A,65
00104:  DATA 0D,0A
00106:  DATA 00,00
00108:  DATA 09,43
0010A:  DATA 6F,6D
0010C:  DATA 70,6C
0010E:  DATA 65,74
00110:  DATA 65,0D
00112:  DATA 0A,00
00114:  DATA 0D,0A
00116:  DATA 5F,5F
00118:  DATA 5F,5F
0011A:  DATA 5F,5F
0011C:  DATA 5F,5F
0011E:  DATA 5F,5F
00120:  DATA 5F,5F
00122:  DATA 5F,5F
00124:  DATA 5F,5F
00126:  DATA 5F,5F
00128:  DATA 5F,5F
0012A:  DATA 0D,0A
0012C:  DATA 00,00
0012E:  DATA 5F,5F
00130:  DATA 5F,53
00132:  DATA 74,61
00134:  DATA 72,74
00136:  DATA 20,73
00138:  DATA 6D,66
0013A:  DATA 5F,77
0013C:  DATA 72,69
0013E:  DATA 74,65
00140:  DATA 5F,5F
00142:  DATA 0D,0A
00144:  DATA 00,00
00146:  DATA 53,74
00148:  DATA 61,72
0014A:  DATA 74,20
0014C:  DATA 5B,25
0014E:  DATA 64,20
00150:  DATA 74,68
00152:  DATA 5D,20
00154:  DATA 64,61
00156:  DATA 74,61
00158:  DATA 20,63
0015A:  DATA 6F,70
0015C:  DATA 79,0D
0015E:  DATA 0A,0D
00160:  DATA 0A,00
00162:  DATA 49,6E
00164:  DATA 20,73
00166:  DATA 6D,66
00168:  DATA 20,6D
0016A:  DATA 69,73
0016C:  DATA 73,69
0016E:  DATA 6F,6E
00170:  DATA 20,64
00172:  DATA 61,74
00174:  DATA 61,20
00176:  DATA 73,74
00178:  DATA 61,72
0017A:  DATA 74,20
0017C:  DATA 20,20
0017E:  DATA 61,64
00180:  DATA 64,72
00182:  DATA 65,73
00184:  DATA 73,3A
00186:  DATA 20,25
00188:  DATA 30,38
0018A:  DATA 4C,58
0018C:  DATA 0D,0A
0018E:  DATA 00,00
00190:  DATA 49,6E
00192:  DATA 20,73
00194:  DATA 6D,66
00196:  DATA 20,6D
00198:  DATA 69,73
0019A:  DATA 73,69
0019C:  DATA 6F,6E
0019E:  DATA 20,64
001A0:  DATA 61,74
001A2:  DATA 61,20
001A4:  DATA 65,6E
001A6:  DATA 64,20
001A8:  DATA 20,20
001AA:  DATA 20,20
001AC:  DATA 61,64
001AE:  DATA 64,72
001B0:  DATA 65,73
001B2:  DATA 73,3A
001B4:  DATA 20,25
001B6:  DATA 30,38
001B8:  DATA 4C,58
001BA:  DATA 0D,0A
001BC:  DATA 00,00
001BE:  DATA 49,6E
001C0:  DATA 20,4D
001C2:  DATA 49,53
001C4:  DATA 20,46
001C6:  DATA 4D,20
001C8:  DATA 57,72
001CA:  DATA 69,74
001CC:  DATA 65,20
001CE:  DATA 73,6F
001D0:  DATA 75,72
001D2:  DATA 63,65
001D4:  DATA 20,64
001D6:  DATA 61,74
001D8:  DATA 61,20
001DA:  DATA 61,64
001DC:  DATA 64,72
001DE:  DATA 65,73
001E0:  DATA 73,3A
001E2:  DATA 20,25
001E4:  DATA 30,38
001E6:  DATA 4C,58
001E8:  DATA 0D,0A
001EA:  DATA 00,00
001EC:  DATA 49,6E
001EE:  DATA 20,4D
001F0:  DATA 49,53
001F2:  DATA 20,46
001F4:  DATA 4D,20
001F6:  DATA 57,72
001F8:  DATA 69,74
001FA:  DATA 65,20
001FC:  DATA 64,61
001FE:  DATA 74,61
00200:  DATA 20,73
00202:  DATA 69,7A
00204:  DATA 65,20
00206:  DATA 20,20
00208:  DATA 20,20
0020A:  DATA 20,20
0020C:  DATA 20,20
0020E:  DATA 20,3A
00210:  DATA 20,25
00212:  DATA 6C,75
00214:  DATA 20,28
00216:  DATA 30,78
00218:  DATA 25,6C
0021A:  DATA 78,29
0021C:  DATA 0D,0A
0021E:  DATA 0D,0A
00220:  DATA 00,00
00222:  DATA 45,72
00224:  DATA 72,6F
00226:  DATA 72,3A
00228:  DATA 20,4D
0022A:  DATA 49,53
0022C:  DATA 20,46
0022E:  DATA 4D,20
00230:  DATA 69,73
00232:  DATA 20,6E
00234:  DATA 6F,74
00236:  DATA 20,63
00238:  DATA 6F,6E
0023A:  DATA 6E,65
0023C:  DATA 63,74
0023E:  DATA 65,64
00240:  DATA 0D,0A
00242:  DATA 00,00
00244:  DATA 45,72
00246:  DATA 72,6F
00248:  DATA 72,3A
0024A:  DATA 20,53
0024C:  DATA 4D,46
0024E:  DATA 20,69
00250:  DATA 73,20
00252:  DATA 6E,6F
00254:  DATA 74,20
00256:  DATA 63,6F
00258:  DATA 6E,6E
0025A:  DATA 65,63
0025C:  DATA 74,65
0025E:  DATA 64,0D
00260:  DATA 0A,00
00262:  DATA 53,69
00264:  DATA 7A,65
00266:  DATA 20,61
00268:  DATA 72,65
0026A:  DATA 61,20
0026C:  DATA 72,65
0026E:  DATA 61,64
00270:  DATA 0D,0A
00272:  DATA 00,00
00274:  DATA 75,73
00276:  DATA 65,64
00278:  DATA 5F,73
0027A:  DATA 69,7A
0027C:  DATA 65,20
0027E:  DATA 3D,20
00280:  DATA 25,6C
00282:  DATA 75,20
00284:  DATA 28,73
00286:  DATA 72,63
00288:  DATA 20,30
0028A:  DATA 78,25
0028C:  DATA 30,38
0028E:  DATA 4C,58
00290:  DATA 29,0D
00292:  DATA 0A,00
00294:  DATA 6C,6F
00296:  DATA 6F,70
00298:  DATA 20,63
0029A:  DATA 6F,75
0029C:  DATA 6E,74
0029E:  DATA 3D,20
002A0:  DATA 25,64
002A2:  DATA 20,20
002A4:  DATA 28,73
002A6:  DATA 72,63
002A8:  DATA 20,30
002AA:  DATA 78,25
002AC:  DATA 30,38
002AE:  DATA 4C,58
002B0:  DATA 29,0D
002B2:  DATA 0A,0D
002B4:  DATA 0A,00
002B6:  DATA 57,72
002B8:  DATA 61,70
002BA:  DATA 20,74
002BC:  DATA 72,69
002BE:  DATA 67,67
002C0:  DATA 65,72
002C2:  DATA 65,64
002C4:  DATA 3A,20
002C6:  DATA 52,65
002C8:  DATA 73,65
002CA:  DATA 74,74
002CC:  DATA 69,6E
002CE:  DATA 67,20
002D0:  DATA 64,61
002D2:  DATA 74,61
002D4:  DATA 5F,77
002D6:  DATA 72,69
002D8:  DATA 74,65
002DA:  DATA 5F,61
002DC:  DATA 64,64
002DE:  DATA 72,20
002E0:  DATA 74,6F
002E2:  DATA 20,73
002E4:  DATA 74,61
002E6:  DATA 72,74
002E8:  DATA 0D,0A
002EA:  DATA 00,00
002EC:  DATA 55,70
002EE:  DATA 64,61
002F0:  DATA 74,65
002F2:  DATA 20,73
002F4:  DATA 69,7A
002F6:  DATA 65,20
002F8:  DATA 61,72
002FA:  DATA 65,61
002FC:  DATA 0D,0A
002FE:  DATA 00,00
00300:  DATA 75,73
00302:  DATA 65,64
00304:  DATA 5F,73
00306:  DATA 69,7A
00308:  DATA 65,20
0030A:  DATA 3D,20
0030C:  DATA 25,6C
0030E:  DATA 64,0D
00310:  DATA 0A,00
00312:  DATA 6C,6F
00314:  DATA 6F,70
00316:  DATA 5F,63
00318:  DATA 6F,75
0031A:  DATA 6E,74
0031C:  DATA 20,3D
0031E:  DATA 20,25
00320:  DATA 75,0D
00322:  DATA 0A,0D
00324:  DATA 0A,00
00326:  DATA 0D,0A
00328:  DATA 5F,5F
0032A:  DATA 5F,45
0032C:  DATA 6E,64
0032E:  DATA 20,73
00330:  DATA 6D,66
00332:  DATA 5F,77
00334:  DATA 72,69
00336:  DATA 74,65
00338:  DATA 5F,5F
0033A:  DATA 5F,5F
0033C:  DATA 0D,0A
0033E:  DATA 00,00
00340:  DATA 5F,5F
00342:  DATA 5F,5F
00344:  DATA 5F,5F
00346:  DATA 5F,5F
00348:  DATA 5F,5F
0034A:  DATA 5F,5F
0034C:  DATA 5F,5F
0034E:  DATA 5F,5F
00350:  DATA 5F,5F
00352:  DATA 5F,5F
00354:  DATA 0D,0A
00356:  DATA 0D,0A
00358:  DATA 00,00
0035A:  DATA 0D,0A
0035C:  DATA 5F,5F
0035E:  DATA 5F,5F
00360:  DATA 5F,5F
00362:  DATA 5F,5F
00364:  DATA 5F,5F
00366:  DATA 5F,5F
00368:  DATA 5F,5F
0036A:  DATA 5F,5F
0036C:  DATA 5F,5F
0036E:  DATA 5F,5F
00370:  DATA 0D,0A
00372:  DATA 00,00
00374:  DATA 5F,5F
00376:  DATA 5F,53
00378:  DATA 74,61
0037A:  DATA 72,74
0037C:  DATA 20,73
0037E:  DATA 6D,66
00380:  DATA 5F,77
00382:  DATA 72,69
00384:  DATA 74,65
00386:  DATA 5F,5F
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 53,74
0038E:  DATA 61,72
00390:  DATA 74,20
00392:  DATA 5B,25
00394:  DATA 64,20
00396:  DATA 74,68
00398:  DATA 5D,20
0039A:  DATA 64,61
0039C:  DATA 74,61
0039E:  DATA 20,63
003A0:  DATA 6F,70
003A2:  DATA 79,0D
003A4:  DATA 0A,0D
003A6:  DATA 0A,00
003A8:  DATA 49,6E
003AA:  DATA 20,73
003AC:  DATA 6D,66
003AE:  DATA 20,6D
003B0:  DATA 69,73
003B2:  DATA 73,69
003B4:  DATA 6F,6E
003B6:  DATA 20,64
003B8:  DATA 61,74
003BA:  DATA 61,20
003BC:  DATA 73,74
003BE:  DATA 61,72
003C0:  DATA 74,20
003C2:  DATA 20,20
003C4:  DATA 61,64
003C6:  DATA 64,72
003C8:  DATA 65,73
003CA:  DATA 73,3A
003CC:  DATA 20,25
003CE:  DATA 30,38
003D0:  DATA 4C,58
003D2:  DATA 0D,0A
003D4:  DATA 00,00
003D6:  DATA 49,6E
003D8:  DATA 20,73
003DA:  DATA 6D,66
003DC:  DATA 20,6D
003DE:  DATA 69,73
003E0:  DATA 73,69
003E2:  DATA 6F,6E
003E4:  DATA 20,64
003E6:  DATA 61,74
003E8:  DATA 61,20
003EA:  DATA 65,6E
003EC:  DATA 64,20
003EE:  DATA 20,20
003F0:  DATA 20,20
003F2:  DATA 61,64
003F4:  DATA 64,72
003F6:  DATA 65,73
003F8:  DATA 73,3A
003FA:  DATA 20,25
003FC:  DATA 30,38
003FE:  DATA 4C,58
00400:  DATA 0D,0A
00402:  DATA 00,00
00404:  DATA 49,6E
00406:  DATA 20,4D
00408:  DATA 49,53
0040A:  DATA 20,46
0040C:  DATA 4D,20
0040E:  DATA 57,72
00410:  DATA 69,74
00412:  DATA 65,20
00414:  DATA 73,6F
00416:  DATA 75,72
00418:  DATA 63,65
0041A:  DATA 20,64
0041C:  DATA 61,74
0041E:  DATA 61,20
00420:  DATA 61,64
00422:  DATA 64,72
00424:  DATA 65,73
00426:  DATA 73,3A
00428:  DATA 20,25
0042A:  DATA 30,38
0042C:  DATA 4C,58
0042E:  DATA 0D,0A
00430:  DATA 00,00
00432:  DATA 49,6E
00434:  DATA 20,4D
00436:  DATA 49,53
00438:  DATA 20,46
0043A:  DATA 4D,20
0043C:  DATA 57,72
0043E:  DATA 69,74
00440:  DATA 65,20
00442:  DATA 64,61
00444:  DATA 74,61
00446:  DATA 20,73
00448:  DATA 69,7A
0044A:  DATA 65,20
0044C:  DATA 20,20
0044E:  DATA 20,20
00450:  DATA 20,20
00452:  DATA 20,20
00454:  DATA 20,3A
00456:  DATA 20,25
00458:  DATA 6C,75
0045A:  DATA 20,28
0045C:  DATA 30,78
0045E:  DATA 25,6C
00460:  DATA 78,29
00462:  DATA 0D,0A
00464:  DATA 0D,0A
00466:  DATA 00,00
00468:  DATA 45,72
0046A:  DATA 72,6F
0046C:  DATA 72,3A
0046E:  DATA 20,53
00470:  DATA 4D,46
00472:  DATA 20,69
00474:  DATA 73,20
00476:  DATA 6E,6F
00478:  DATA 74,20
0047A:  DATA 63,6F
0047C:  DATA 6E,6E
0047E:  DATA 65,63
00480:  DATA 74,65
00482:  DATA 64,0D
00484:  DATA 0A,00
00486:  DATA 53,69
00488:  DATA 7A,65
0048A:  DATA 20,61
0048C:  DATA 72,65
0048E:  DATA 61,20
00490:  DATA 72,65
00492:  DATA 61,64
00494:  DATA 0D,0A
00496:  DATA 00,00
00498:  DATA 75,73
0049A:  DATA 65,64
0049C:  DATA 5F,73
0049E:  DATA 69,7A
004A0:  DATA 65,20
004A2:  DATA 3D,20
004A4:  DATA 25,6C
004A6:  DATA 75,20
004A8:  DATA 28,73
004AA:  DATA 72,63
004AC:  DATA 20,30
004AE:  DATA 78,25
004B0:  DATA 30,38
004B2:  DATA 4C,58
004B4:  DATA 29,0D
004B6:  DATA 0A,00
004B8:  DATA 6C,6F
004BA:  DATA 6F,70
004BC:  DATA 20,63
004BE:  DATA 6F,75
004C0:  DATA 6E,74
004C2:  DATA 3D,20
004C4:  DATA 25,64
004C6:  DATA 20,20
004C8:  DATA 28,73
004CA:  DATA 72,63
004CC:  DATA 20,30
004CE:  DATA 78,25
004D0:  DATA 30,38
004D2:  DATA 4C,58
004D4:  DATA 29,0D
004D6:  DATA 0A,0D
004D8:  DATA 0A,00
004DA:  DATA 57,72
004DC:  DATA 61,70
004DE:  DATA 20,74
004E0:  DATA 72,69
004E2:  DATA 67,67
004E4:  DATA 65,72
004E6:  DATA 65,64
004E8:  DATA 3A,20
004EA:  DATA 52,65
004EC:  DATA 73,65
004EE:  DATA 74,74
004F0:  DATA 69,6E
004F2:  DATA 67,20
004F4:  DATA 64,61
004F6:  DATA 74,61
004F8:  DATA 5F,77
004FA:  DATA 72,69
004FC:  DATA 74,65
004FE:  DATA 5F,61
00500:  DATA 64,64
00502:  DATA 72,20
00504:  DATA 74,6F
00506:  DATA 20,73
00508:  DATA 74,61
0050A:  DATA 72,74
0050C:  DATA 0D,0A
0050E:  DATA 00,00
00510:  DATA 55,70
00512:  DATA 64,61
00514:  DATA 74,65
00516:  DATA 20,73
00518:  DATA 69,7A
0051A:  DATA 65,20
0051C:  DATA 61,72
0051E:  DATA 65,61
00520:  DATA 0D,0A
00522:  DATA 00,00
00524:  DATA 75,73
00526:  DATA 65,64
00528:  DATA 5F,73
0052A:  DATA 69,7A
0052C:  DATA 65,20
0052E:  DATA 3D,20
00530:  DATA 25,6C
00532:  DATA 64,0D
00534:  DATA 0A,00
00536:  DATA 6C,6F
00538:  DATA 6F,70
0053A:  DATA 5F,63
0053C:  DATA 6F,75
0053E:  DATA 6E,74
00540:  DATA 20,3D
00542:  DATA 20,25
00544:  DATA 75,0D
00546:  DATA 0A,0D
00548:  DATA 0A,00
0054A:  DATA 0D,0A
0054C:  DATA 5F,5F
0054E:  DATA 5F,45
00550:  DATA 6E,64
00552:  DATA 20,73
00554:  DATA 6D,66
00556:  DATA 5F,77
00558:  DATA 72,69
0055A:  DATA 74,65
0055C:  DATA 5F,5F
0055E:  DATA 5F,5F
00560:  DATA 0D,0A
00562:  DATA 00,00
00564:  DATA 5F,5F
00566:  DATA 5F,5F
00568:  DATA 5F,5F
0056A:  DATA 5F,5F
0056C:  DATA 5F,5F
0056E:  DATA 5F,5F
00570:  DATA 5F,5F
00572:  DATA 5F,5F
00574:  DATA 5F,5F
00576:  DATA 5F,5F
00578:  DATA 0D,0A
0057A:  DATA 0D,0A
0057C:  DATA 00,00
0057E:  DATA 53,4D
00580:  DATA 46,20
00582:  DATA 64,61
00584:  DATA 74,61
00586:  DATA 20,6C
00588:  DATA 69,73
0058A:  DATA 74,20
0058C:  DATA 69,73
0058E:  DATA 20,66
00590:  DATA 75,6C
00592:  DATA 6C,21
00594:  DATA 21,21
00596:  DATA 0D,0A
00598:  DATA 00,00
0059A:  DATA 53,4D
0059C:  DATA 46,20
0059E:  DATA 64,61
005A0:  DATA 74,61
005A2:  DATA 20,6C
005A4:  DATA 69,73
005A6:  DATA 74,20
005A8:  DATA 69,73
005AA:  DATA 20,65
005AC:  DATA 6D,70
005AE:  DATA 74,79
005B0:  DATA 0D,0A
005B2:  DATA 00,00
*
00624:  DATA 55,41
00626:  DATA 52,54
00628:  DATA 20,49
0062A:  DATA 6E,69
0062C:  DATA 74,69
0062E:  DATA 61,6C
00630:  DATA 69,7A
00632:  DATA 65,0D
00634:  DATA 0A,00
00636:  DATA 09,43
00638:  DATA 6F,6D
0063A:  DATA 70,6C
0063C:  DATA 65,74
0063E:  DATA 65,0D
00640:  DATA 0A,00
00642:  DATA 0D,0A
00644:  DATA 53,74
00646:  DATA 61,72
00648:  DATA 74,20
0064A:  DATA 6D,61
0064C:  DATA 6B,65
0064E:  DATA 5F,72
00650:  DATA 65,63
00652:  DATA 65,69
00654:  DATA 76,65
00656:  DATA 5F,63
00658:  DATA 6F,6D
0065A:  DATA 6D,61
0065C:  DATA 6E,64
0065E:  DATA 0D,0A
00660:  DATA 00,00
00662:  DATA 09,5B
00664:  DATA 42,4F
00666:  DATA 53,53
00668:  DATA 5D,20
0066A:  DATA 3E,3E
0066C:  DATA 3E,20
0066E:  DATA 00,00
00670:  DATA 45,6E
00672:  DATA 64,20
00674:  DATA 6D,61
00676:  DATA 6B,65
00678:  DATA 5F,72
0067A:  DATA 65,63
0067C:  DATA 69,76
0067E:  DATA 65,5F
00680:  DATA 63,6F
00682:  DATA 6D,6D
00684:  DATA 61,6E
00686:  DATA 64,0D
00688:  DATA 0A,0D
0068A:  DATA 0A,00
0068C:  DATA 73,69
0068E:  DATA 67,6E
00690:  DATA 61,6C
00692:  DATA 20,65
00694:  DATA 6E,64
00696:  DATA 20,77
00698:  DATA 69,74
0069A:  DATA 68,20
0069C:  DATA 53,46
0069E:  DATA 44,0D
006A0:  DATA 0A,00
006A2:  DATA 64,6F
006A4:  DATA 6E,27
006A6:  DATA 74,20
006A8:  DATA 66,69
006AA:  DATA 6E,64
006AC:  DATA 20,53
006AE:  DATA 46,44
006B0:  DATA 0D,0A
006B2:  DATA 00,00
006B4:  DATA 09,2D
006B6:  DATA 3E,20
006B8:  DATA 49,6E
006BA:  DATA 76,61
006BC:  DATA 6C,69
006BE:  DATA 64,20
006C0:  DATA 46,72
006C2:  DATA 61,6D
006C4:  DATA 65,20
006C6:  DATA 49,44
006C8:  DATA 20,72
006CA:  DATA 65,63
006CC:  DATA 65,69
006CE:  DATA 76,65
006D0:  DATA 64,3A
006D2:  DATA 20,25
006D4:  DATA 58,0D
006D6:  DATA 0A,00
006D8:  DATA 09,2D
006DA:  DATA 3E,20
006DC:  DATA 43,52
006DE:  DATA 43,20
006E0:  DATA 65,72
006E2:  DATA 72,6F
006E4:  DATA 72,21
006E6:  DATA 0D,0A
006E8:  DATA 00,00
006EA:  DATA 09,09
006EC:  DATA 2D,3E
006EE:  DATA 20,72
006F0:  DATA 65,63
006F2:  DATA 65,69
006F4:  DATA 76,65
006F6:  DATA 64,20
006F8:  DATA 43,52
006FA:  DATA 43,3A
006FC:  DATA 20,25
006FE:  DATA 58,0D
00700:  DATA 0A,00
00702:  DATA 09,09
00704:  DATA 20,20
00706:  DATA 20,63
00708:  DATA 6F,6C
0070A:  DATA 6C,65
0070C:  DATA 63,74
0070E:  DATA 20,43
00710:  DATA 52,43
00712:  DATA 20,3A
00714:  DATA 20,25
00716:  DATA 58,0D
00718:  DATA 0A,00
0071A:  DATA 09,2D
0071C:  DATA 3E,20
0071E:  DATA 49,6E
00720:  DATA 76,61
00722:  DATA 6C,69
00724:  DATA 64,20
00726:  DATA 64,65
00728:  DATA 76,69
0072A:  DATA 63,65
0072C:  DATA 20,49
0072E:  DATA 44,20
00730:  DATA 72,65
00732:  DATA 63,65
00734:  DATA 69,76
00736:  DATA 65,64
00738:  DATA 0D,0A
0073A:  DATA 00,00
0073C:  DATA 09,09
0073E:  DATA 2D,3E
00740:  DATA 20,72
00742:  DATA 65,63
00744:  DATA 65,69
00746:  DATA 76,65
00748:  DATA 64,3A
0074A:  DATA 20,20
0074C:  DATA 20,20
0074E:  DATA 20,25
00750:  DATA 58,0D
00752:  DATA 0A,00
00754:  DATA 09,09
00756:  DATA 20,20
00758:  DATA 20,4D
0075A:  DATA 79,20
0075C:  DATA 64,65
0075E:  DATA 76,69
00760:  DATA 63,65
00762:  DATA 20,49
00764:  DATA 44,3A
00766:  DATA 20,25
00768:  DATA 58,0D
0076A:  DATA 0A,00
0076C:  DATA 09,5B
0076E:  DATA 42,4F
00770:  DATA 53,53
00772:  DATA 5D,20
00774:  DATA 3C,3C
00776:  DATA 3C,20
00778:  DATA 00,00
0077A:  DATA 53,74
0077C:  DATA 61,72
0077E:  DATA 74,20
00780:  DATA 53,4D
00782:  DATA 46,20
00784:  DATA 75,73
00786:  DATA 69,6E
00788:  DATA 67,20
0078A:  DATA 72,65
0078C:  DATA 71,65
0078E:  DATA 73,74
00790:  DATA 20,73
00792:  DATA 65,61
00794:  DATA 71,75
00796:  DATA 65,6E
00798:  DATA 63,65
0079A:  DATA 0D,0A
0079C:  DATA 00,00
0079E:  DATA 45,72
007A0:  DATA 72,6F
007A2:  DATA 72,21
007A4:  DATA 20,52
007A6:  DATA 65,63
007A8:  DATA 65,69
007AA:  DATA 76,69
007AC:  DATA 6E,67
007AE:  DATA 20,63
007B0:  DATA 6F,6D
007B2:  DATA 6D,61
007B4:  DATA 6E,64
007B6:  DATA 20,69
007B8:  DATA 6E,63
007BA:  DATA 6F,6E
007BC:  DATA 73,69
007BE:  DATA 73,74
007C0:  DATA 65,6E
007C2:  DATA 74,20
007C4:  DATA 77,69
007C6:  DATA 74,68
007C8:  DATA 20,74
007CA:  DATA 68,65
007CC:  DATA 20,64
007CE:  DATA 65,73
007D0:  DATA 69,67
007D2:  DATA 6E,0D
007D4:  DATA 0A,00
007D6:  DATA 53,4D
007D8:  DATA 46,20
007DA:  DATA 75,73
007DC:  DATA 65,20
007DE:  DATA 72,65
007E0:  DATA 71,75
007E2:  DATA 65,73
007E4:  DATA 74,20
007E6:  DATA 61,6C
007E8:  DATA 6C,6F
007EA:  DATA 77,65
007EC:  DATA 64,0D
007EE:  DATA 0A,00
007F0:  DATA 53,4D
007F2:  DATA 46,20
007F4:  DATA 75,73
007F6:  DATA 65,20
007F8:  DATA 72,65
007FA:  DATA 71,75
007FC:  DATA 65,73
007FE:  DATA 74,20
00800:  DATA 64,65
00802:  DATA 6E,79
00804:  DATA 65,64
00806:  DATA 0D,0A
00808:  DATA 00,00
0080A:  DATA 52,65
0080C:  DATA 74,72
0080E:  DATA 79,20
00810:  DATA 72,65
00812:  DATA 71,75
00814:  DATA 65,73
00816:  DATA 74,20
00818:  DATA 74,6F
0081A:  DATA 20,42
0081C:  DATA 4F,53
0081E:  DATA 53,20
00820:  DATA 50,49
00822:  DATA 43,0D
00824:  DATA 0A,00
00826:  DATA 45,72
00828:  DATA 72,6F
0082A:  DATA 72,21
0082C:  DATA 20,52
0082E:  DATA 65,63
00830:  DATA 65,69
00832:  DATA 76,69
00834:  DATA 6E,67
00836:  DATA 20,63
00838:  DATA 6F,6D
0083A:  DATA 6D,61
0083C:  DATA 6E,64
0083E:  DATA 20,69
00840:  DATA 6E,63
00842:  DATA 6F,6E
00844:  DATA 73,69
00846:  DATA 73,74
00848:  DATA 65,6E
0084A:  DATA 74,20
0084C:  DATA 77,69
0084E:  DATA 74,68
00850:  DATA 20,74
00852:  DATA 68,65
00854:  DATA 20,64
00856:  DATA 65,73
00858:  DATA 69,67
0085A:  DATA 6E,0D
0085C:  DATA 0A,00
0085E:  DATA 45,6E
00860:  DATA 64,20
00862:  DATA 53,4D
00864:  DATA 46,20
00866:  DATA 75,73
00868:  DATA 69,6E
0086A:  DATA 67,20
0086C:  DATA 72,65
0086E:  DATA 71,65
00870:  DATA 73,74
00872:  DATA 20,73
00874:  DATA 65,61
00876:  DATA 71,75
00878:  DATA 65,6E
0087A:  DATA 63,65
0087C:  DATA 0D,0A
0087E:  DATA 00,00
00880:  DATA 4D,49
00882:  DATA 53,53
00884:  DATA 49,4F
00886:  DATA 4E,20
00888:  DATA 46,4C
0088A:  DATA 41,53
0088C:  DATA 48,20
0088E:  DATA 49,6E
00890:  DATA 69,74
00892:  DATA 69,61
00894:  DATA 6C,69
00896:  DATA 7A,65
00898:  DATA 0D,0A
0089A:  DATA 00,00
0089C:  DATA 09,5B
0089E:  DATA 4D,49
008A0:  DATA 53,20
008A2:  DATA 46,4D
008A4:  DATA 5D,20
008A6:  DATA 63,6F
008A8:  DATA 6E,6E
008AA:  DATA 65,63
008AC:  DATA 74,20
008AE:  DATA 65,72
008B0:  DATA 72,6F
008B2:  DATA 72,21
008B4:  DATA 0D,0A
008B6:  DATA 00,00
008B8:  DATA 09,5B
008BA:  DATA 53,4D
008BC:  DATA 46,5D
008BE:  DATA 20,63
008C0:  DATA 6F,6E
008C2:  DATA 6E,65
008C4:  DATA 63,74
008C6:  DATA 20,65
008C8:  DATA 72,72
008CA:  DATA 6F,72
008CC:  DATA 21,0D
008CE:  DATA 0A,00
008D0:  DATA 09,7C
008D2:  DATA 20,53
008D4:  DATA 4D,46
008D6:  DATA 20,20
008D8:  DATA 7C,20
008DA:  DATA 50,49
008DC:  DATA 43,4C
008DE:  DATA 4F,47
008E0:  DATA 20,7C
008E2:  DATA 20,55
008E4:  DATA 73,65
008E6:  DATA 20,43
008E8:  DATA 6F,75
008EA:  DATA 6E,74
008EC:  DATA 65,72
008EE:  DATA 20,20
008F0:  DATA 20,20
008F2:  DATA 20,20
008F4:  DATA 3A,20
008F6:  DATA 30,78
008F8:  DATA 25,30
008FA:  DATA 38,4C
008FC:  DATA 58,0D
008FE:  DATA 0A,00
00900:  DATA 09,7C
00902:  DATA 20,53
00904:  DATA 4D,46
00906:  DATA 20,20
00908:  DATA 7C,20
0090A:  DATA 50,49
0090C:  DATA 43,4C
0090E:  DATA 4F,47
00910:  DATA 20,7C
00912:  DATA 20,4C
00914:  DATA 6F,6F
00916:  DATA 70,20
00918:  DATA 43,6F
0091A:  DATA 75,6E
0091C:  DATA 74,65
0091E:  DATA 72,20
00920:  DATA 20,20
00922:  DATA 20,20
00924:  DATA 3A,20
00926:  DATA 30,78
00928:  DATA 25,30
0092A:  DATA 32,58
0092C:  DATA 0D,0A
0092E:  DATA 00,00
00930:  DATA 09,7C
00932:  DATA 20,53
00934:  DATA 4D,46
00936:  DATA 20,20
00938:  DATA 7C,20
0093A:  DATA 4D,45
0093C:  DATA 41,53
0093E:  DATA 20,20
00940:  DATA 20,7C
00942:  DATA 20,55
00944:  DATA 73,65
00946:  DATA 20,43
00948:  DATA 6F,75
0094A:  DATA 6E,74
0094C:  DATA 65,72
0094E:  DATA 20,20
00950:  DATA 20,20
00952:  DATA 20,20
00954:  DATA 3A,20
00956:  DATA 30,78
00958:  DATA 25,30
0095A:  DATA 38,4C
0095C:  DATA 58,0D
0095E:  DATA 0A,00
00960:  DATA 09,7C
00962:  DATA 20,53
00964:  DATA 4D,46
00966:  DATA 20,20
00968:  DATA 7C,20
0096A:  DATA 4D,45
0096C:  DATA 41,53
0096E:  DATA 20,20
00970:  DATA 20,7C
00972:  DATA 20,4C
00974:  DATA 6F,6F
00976:  DATA 70,20
00978:  DATA 43,6F
0097A:  DATA 75,6E
0097C:  DATA 74,65
0097E:  DATA 72,20
00980:  DATA 20,20
00982:  DATA 20,20
00984:  DATA 3A,20
00986:  DATA 30,78
00988:  DATA 25,30
0098A:  DATA 32,58
0098C:  DATA 0D,0A
0098E:  DATA 00,00
00990:  DATA 09,7C
00992:  DATA 20,4D
00994:  DATA 49,53
00996:  DATA 46,20
00998:  DATA 7C,20
0099A:  DATA 50,49
0099C:  DATA 43,4C
0099E:  DATA 4F,47
009A0:  DATA 20,7C
009A2:  DATA 20,55
009A4:  DATA 73,65
009A6:  DATA 20,43
009A8:  DATA 6F,75
009AA:  DATA 6E,74
009AC:  DATA 65,72
009AE:  DATA 20,20
009B0:  DATA 20,20
009B2:  DATA 20,20
009B4:  DATA 3A,20
009B6:  DATA 30,78
009B8:  DATA 25,30
009BA:  DATA 38,4C
009BC:  DATA 58,0D
009BE:  DATA 0A,00
009C0:  DATA 09,7C
009C2:  DATA 20,4D
009C4:  DATA 49,53
009C6:  DATA 46,20
009C8:  DATA 7C,20
009CA:  DATA 50,49
009CC:  DATA 43,4C
009CE:  DATA 4F,47
009D0:  DATA 20,7C
009D2:  DATA 20,55
009D4:  DATA 6E,63
009D6:  DATA 6F,70
009D8:  DATA 79,65
009DA:  DATA 64,20
009DC:  DATA 43,6F
009DE:  DATA 75,6E
009E0:  DATA 74,65
009E2:  DATA 72,20
009E4:  DATA 3A,20
009E6:  DATA 30,78
009E8:  DATA 25,30
009EA:  DATA 38,4C
009EC:  DATA 58,0D
009EE:  DATA 0A,00
009F0:  DATA 09,7C
009F2:  DATA 20,4D
009F4:  DATA 49,53
009F6:  DATA 46,20
009F8:  DATA 7C,20
009FA:  DATA 50,49
009FC:  DATA 43,4C
009FE:  DATA 4F,47
00A00:  DATA 20,7C
00A02:  DATA 20,4C
00A04:  DATA 6F,6F
00A06:  DATA 70,20
00A08:  DATA 43,6F
00A0A:  DATA 75,6E
00A0C:  DATA 74,65
00A0E:  DATA 72,20
00A10:  DATA 20,20
00A12:  DATA 20,20
00A14:  DATA 3A,20
00A16:  DATA 30,78
00A18:  DATA 25,30
00A1A:  DATA 32,58
00A1C:  DATA 0D,0A
00A1E:  DATA 00,00
00A20:  DATA 09,7C
00A22:  DATA 20,4D
00A24:  DATA 49,53
00A26:  DATA 46,20
00A28:  DATA 7C,20
00A2A:  DATA 50,49
00A2C:  DATA 43,4C
00A2E:  DATA 4F,47
00A30:  DATA 20,7C
00A32:  DATA 20,57
00A34:  DATA 72,69
00A36:  DATA 74,65
00A38:  DATA 20,43
00A3A:  DATA 6F,75
00A3C:  DATA 6E,74
00A3E:  DATA 65,72
00A40:  DATA 20,20
00A42:  DATA 20,20
00A44:  DATA 3A,20
00A46:  DATA 30,78
00A48:  DATA 25,30
00A4A:  DATA 32,58
00A4C:  DATA 0D,0A
00A4E:  DATA 00,00
00A50:  DATA 09,7C
00A52:  DATA 20,4D
00A54:  DATA 49,53
00A56:  DATA 46,20
00A58:  DATA 7C,20
00A5A:  DATA 4D,45
00A5C:  DATA 41,53
00A5E:  DATA 20,20
00A60:  DATA 20,7C
00A62:  DATA 20,55
00A64:  DATA 73,65
00A66:  DATA 20,43
00A68:  DATA 6F,75
00A6A:  DATA 6E,74
00A6C:  DATA 65,72
00A6E:  DATA 20,20
00A70:  DATA 20,20
00A72:  DATA 20,20
00A74:  DATA 3A,20
00A76:  DATA 30,78
00A78:  DATA 25,30
00A7A:  DATA 38,4C
00A7C:  DATA 58,0D
00A7E:  DATA 0A,00
00A80:  DATA 09,7C
00A82:  DATA 20,4D
00A84:  DATA 49,53
00A86:  DATA 46,20
00A88:  DATA 7C,20
00A8A:  DATA 4D,45
00A8C:  DATA 41,53
00A8E:  DATA 20,20
00A90:  DATA 20,7C
00A92:  DATA 20,55
00A94:  DATA 6E,63
00A96:  DATA 6F,70
00A98:  DATA 79,65
00A9A:  DATA 64,20
00A9C:  DATA 43,6F
00A9E:  DATA 75,6E
00AA0:  DATA 74,65
00AA2:  DATA 72,20
00AA4:  DATA 3A,20
00AA6:  DATA 30,78
00AA8:  DATA 25,30
00AAA:  DATA 38,4C
00AAC:  DATA 58,0D
00AAE:  DATA 0A,00
00AB0:  DATA 09,7C
00AB2:  DATA 20,4D
00AB4:  DATA 49,53
00AB6:  DATA 46,20
00AB8:  DATA 7C,20
00ABA:  DATA 4D,45
00ABC:  DATA 41,53
00ABE:  DATA 20,20
00AC0:  DATA 20,7C
00AC2:  DATA 20,4C
00AC4:  DATA 6F,6F
00AC6:  DATA 70,20
00AC8:  DATA 43,6F
00ACA:  DATA 75,6E
00ACC:  DATA 74,65
00ACE:  DATA 72,20
00AD0:  DATA 20,20
00AD2:  DATA 20,20
00AD4:  DATA 3A,20
00AD6:  DATA 30,78
00AD8:  DATA 25,30
00ADA:  DATA 32,58
00ADC:  DATA 0D,0A
00ADE:  DATA 00,00
00AE0:  DATA 09,43
00AE2:  DATA 6F,6D
00AE4:  DATA 70,6C
00AE6:  DATA 65,74
00AE8:  DATA 65,0D
00AEA:  DATA 0A,00
00AEC:  DATA 4D,69
00AEE:  DATA 73,73
00AF0:  DATA 69,6F
00AF2:  DATA 6E,20
00AF4:  DATA 46,6C
00AF6:  DATA 61,73
00AF8:  DATA 68,20
00AFA:  DATA 69,73
00AFC:  DATA 20,6E
00AFE:  DATA 6F,74
00B00:  DATA 20,63
00B02:  DATA 6F,6E
00B04:  DATA 6E,65
00B06:  DATA 63,74
00B08:  DATA 65,64
00B0A:  DATA 0D,0A
00B0C:  DATA 00,00
00B0E:  DATA 57,72
00B10:  DATA 69,74
00B12:  DATA 65,20
00B14:  DATA 4D,49
00B16:  DATA 53,46
00B18:  DATA 20,41
00B1A:  DATA 64,64
00B1C:  DATA 72,65
00B1E:  DATA 73,73
00B20:  DATA 20,41
00B22:  DATA 72,65
00B24:  DATA 61,20
00B26:  DATA 43,6F
00B28:  DATA 6D,70
00B2A:  DATA 6C,65
00B2C:  DATA 74,65
00B2E:  DATA 0D,0A
00B30:  DATA 00,00
00B32:  DATA 41,44
00B34:  DATA 37,34
00B36:  DATA 39,30
00B38:  DATA 20,49
00B3A:  DATA 6E,69
00B3C:  DATA 74,69
00B3E:  DATA 61,6C
00B40:  DATA 69,7A
00B42:  DATA 65,0D
00B44:  DATA 0A,00
00B46:  DATA 09,5B
00B48:  DATA 41,44
00B4A:  DATA 43,5D
00B4C:  DATA 20,43
00B4E:  DATA 6F,6E
00B50:  DATA 6E,65
00B52:  DATA 63,74
00B54:  DATA 20,65
00B56:  DATA 72,72
00B58:  DATA 6F,72
00B5A:  DATA 21,0D
00B5C:  DATA 0A,00
00B5E:  DATA 09,5B
00B60:  DATA 41,44
00B62:  DATA 43,5D
00B64:  DATA 20,43
00B66:  DATA 6F,6E
00B68:  DATA 6E,65
00B6A:  DATA 63,74
00B6C:  DATA 20,73
00B6E:  DATA 75,63
00B70:  DATA 63,65
00B72:  DATA 73,73
00B74:  DATA 66,75
00B76:  DATA 6C,0D
00B78:  DATA 0A,00
00B7A:  DATA 09,43
00B7C:  DATA 6F,6D
00B7E:  DATA 70,6C
00B80:  DATA 65,74
00B82:  DATA 65,0D
00B84:  DATA 0A,00
00B86:  DATA 4D,43
00B88:  DATA 50,34
00B8A:  DATA 39,30
00B8C:  DATA 31,20
00B8E:  DATA 49,6E
00B90:  DATA 69,74
00B92:  DATA 69,61
00B94:  DATA 6C,69
00B96:  DATA 7A,65
00B98:  DATA 0D,0A
00B9A:  DATA 00,00
00B9C:  DATA 09,5B
00B9E:  DATA 44,41
00BA0:  DATA 43,20
00BA2:  DATA 50,6F
00BA4:  DATA 72,74
00BA6:  DATA 20,31
00BA8:  DATA 5D,20
00BAA:  DATA 43,6F
00BAC:  DATA 6E,6E
00BAE:  DATA 65,63
00BB0:  DATA 74,20
00BB2:  DATA 65,72
00BB4:  DATA 72,6F
00BB6:  DATA 72,21
00BB8:  DATA 0D,0A
00BBA:  DATA 00,00
00BBC:  DATA 09,5B
00BBE:  DATA 44,41
00BC0:  DATA 43,20
00BC2:  DATA 50,6F
00BC4:  DATA 72,74
00BC6:  DATA 20,31
00BC8:  DATA 5D,20
00BCA:  DATA 43,6F
00BCC:  DATA 6E,6E
00BCE:  DATA 65,63
00BD0:  DATA 74,20
00BD2:  DATA 73,75
00BD4:  DATA 63,63
00BD6:  DATA 65,73
00BD8:  DATA 73,66
00BDA:  DATA 75,6C
00BDC:  DATA 0D,0A
00BDE:  DATA 00,00
00BE0:  DATA 09,5B
00BE2:  DATA 44,41
00BE4:  DATA 43,20
00BE6:  DATA 50,6F
00BE8:  DATA 72,74
00BEA:  DATA 20,32
00BEC:  DATA 5D,20
00BEE:  DATA 43,6F
00BF0:  DATA 6E,6E
00BF2:  DATA 65,63
00BF4:  DATA 74,20
00BF6:  DATA 65,72
00BF8:  DATA 72,6F
00BFA:  DATA 72,21
00BFC:  DATA 0D,0A
00BFE:  DATA 00,00
00C00:  DATA 09,5B
00C02:  DATA 44,41
00C04:  DATA 43,20
00C06:  DATA 50,6F
00C08:  DATA 72,74
00C0A:  DATA 20,32
00C0C:  DATA 5D,20
00C0E:  DATA 43,6F
00C10:  DATA 6E,6E
00C12:  DATA 65,63
00C14:  DATA 74,20
00C16:  DATA 73,75
00C18:  DATA 63,63
00C1A:  DATA 65,73
00C1C:  DATA 73,66
00C1E:  DATA 75,6C
00C20:  DATA 0D,0A
00C22:  DATA 00,00
00C24:  DATA 09,43
00C26:  DATA 6F,6D
00C28:  DATA 70,6C
00C2A:  DATA 65,74
00C2C:  DATA 65,0D
00C2E:  DATA 0A,00
00C30:  DATA 49,4F
00C32:  DATA 20,49
00C34:  DATA 6E,69
00C36:  DATA 74,69
00C38:  DATA 61,6C
00C3A:  DATA 69,7A
00C3C:  DATA 65,0D
00C3E:  DATA 0A,00
00C40:  DATA 09,43
00C42:  DATA 6F,6D
00C44:  DATA 70,6C
00C46:  DATA 65,74
00C48:  DATA 65,0D
00C4A:  DATA 0A,00
00C4C:  DATA 41,44
00C4E:  DATA 43,20
00C50:  DATA 49,6E
00C52:  DATA 69,74
00C54:  DATA 69,61
00C56:  DATA 6C,69
00C58:  DATA 7A,65
00C5A:  DATA 0D,0A
00C5C:  DATA 00,00
00C5E:  DATA 09,43
00C60:  DATA 6F,6D
00C62:  DATA 70,6C
00C64:  DATA 65,74
00C66:  DATA 65,0D
00C68:  DATA 0A,00
00C6A:  DATA 53,74
00C6C:  DATA 61,72
00C6E:  DATA 74,20
00C70:  DATA 53,57
00C72:  DATA 45,45
00C74:  DATA 50,0D
00C76:  DATA 0A,00
00C78:  DATA 09,53
00C7A:  DATA 77,65
00C7C:  DATA 65,70
00C7E:  DATA 20,73
00C80:  DATA 74,65
00C82:  DATA 70,20
00C84:  DATA 3A,20
00C86:  DATA 25,75
00C88:  DATA 0D,0A
00C8A:  DATA 00,00
00C8C:  DATA 53,74
00C8E:  DATA 61,72
00C90:  DATA 74,20
00C92:  DATA 54,45
00C94:  DATA 53,54
00C96:  DATA 20,53
00C98:  DATA 57,45
00C9A:  DATA 45,50
00C9C:  DATA 0D,0A
00C9E:  DATA 00,00
00CA0:  DATA 73,74
00CA2:  DATA 65,70
00CA4:  DATA 2C,20
00CA6:  DATA 76,6F
00CA8:  DATA 6C,74
00CAA:  DATA 61,67
00CAC:  DATA 65,2C
00CAE:  DATA 20,63
00CB0:  DATA 75,72
00CB2:  DATA 72,65
00CB4:  DATA 6E,74
00CB6:  DATA 0D,0A
00CB8:  DATA 00,00
00CBA:  DATA 53,74
00CBC:  DATA 61,72
00CBE:  DATA 74,20
00CC0:  DATA 41,44
00CC2:  DATA 43,20
00CC4:  DATA 54,45
00CC6:  DATA 53,54
00CC8:  DATA 0D,0A
00CCA:  DATA 00,00
00CCC:  DATA 41,44
00CCE:  DATA 43,20
00CD0:  DATA 56,6F
00CD2:  DATA 6C,74
00CD4:  DATA 61,67
00CD6:  DATA 65,3A
00CD8:  DATA 20,25
00CDA:  DATA 30,34
00CDC:  DATA 4C,58
00CDE:  DATA 0D,0A
00CE0:  DATA 00,00
00CE2:  DATA 41,44
00CE4:  DATA 43,20
00CE6:  DATA 43,75
00CE8:  DATA 72,72
00CEA:  DATA 65,6E
00CEC:  DATA 74,3A
00CEE:  DATA 20,25
00CF0:  DATA 30,34
00CF2:  DATA 4C,58
00CF4:  DATA 0D,0A
00CF6:  DATA 00,00
00CF8:  DATA 41,44
00CFA:  DATA 43,20
00CFC:  DATA 43,49
00CFE:  DATA 47,53
00D00:  DATA 31,20
00D02:  DATA 41,6D
00D04:  DATA 70,3A
00D06:  DATA 20,25
00D08:  DATA 30,34
00D0A:  DATA 4C,58
00D0C:  DATA 0D,0A
00D0E:  DATA 00,00
00D10:  DATA 41,44
00D12:  DATA 43,20
00D14:  DATA 43,49
00D16:  DATA 47,53
00D18:  DATA 31,20
00D1A:  DATA 56,52
00D1C:  DATA 45,46
00D1E:  DATA 3A,20
00D20:  DATA 25,30
00D22:  DATA 34,4C
00D24:  DATA 58,0D
00D26:  DATA 0A,00
00D28:  DATA 53,74
00D2A:  DATA 61,72
00D2C:  DATA 74,20
00D2E:  DATA 53,57
00D30:  DATA 45,45
00D32:  DATA 50,20
00D34:  DATA 32,70
00D36:  DATA 6F,72
00D38:  DATA 74,73
00D3A:  DATA 0D,0A
00D3C:  DATA 00,00
00D3E:  DATA 09,53
00D40:  DATA 77,65
00D42:  DATA 65,70
00D44:  DATA 20,73
00D46:  DATA 74,65
00D48:  DATA 70,20
00D4A:  DATA 3A,20
00D4C:  DATA 25,75
00D4E:  DATA 0D,0A
00D50:  DATA 00,00
00D52:  DATA 45,4E
00D54:  DATA 44,20
00D56:  DATA 53,57
00D58:  DATA 45,45
00D5A:  DATA 50,20
00D5C:  DATA 32,70
00D5E:  DATA 6F,72
00D60:  DATA 74,0D
00D62:  DATA 0A,00
00D64:  DATA 53,74
00D66:  DATA 61,72
00D68:  DATA 74,20
00D6A:  DATA 43,49
00D6C:  DATA 47,53
00D6E:  DATA 20,64
00D70:  DATA 61,74
00D72:  DATA 61,20
00D74:  DATA 63,6F
00D76:  DATA 6E,76
00D78:  DATA 65,72
00D7A:  DATA 73,69
00D7C:  DATA 6F,6E
00D7E:  DATA 0D,0A
00D80:  DATA 00,00
00D82:  DATA 53,74
00D84:  DATA 61,72
00D86:  DATA 74,20
00D88:  DATA 53,57
00D8A:  DATA 45,45
00D8C:  DATA 50,20
00D8E:  DATA 50,4F
00D90:  DATA 52,54
00D92:  DATA 31,0D
00D94:  DATA 0A,00
00D96:  DATA 09,53
00D98:  DATA 77,65
00D9A:  DATA 65,70
00D9C:  DATA 20,73
00D9E:  DATA 74,65
00DA0:  DATA 70,20
00DA2:  DATA 3A,20
00DA4:  DATA 25,75
00DA6:  DATA 0D,0A
00DA8:  DATA 00,00
00DAA:  DATA 45,4E
00DAC:  DATA 44,20
00DAE:  DATA 53,57
00DB0:  DATA 45,45
00DB2:  DATA 50,20
00DB4:  DATA 50,4F
00DB6:  DATA 52,54
00DB8:  DATA 31,0D
00DBA:  DATA 0A,00
00DBC:  DATA 53,74
00DBE:  DATA 61,72
00DC0:  DATA 74,20
00DC2:  DATA 43,49
00DC4:  DATA 47,53
00DC6:  DATA 20,64
00DC8:  DATA 61,74
00DCA:  DATA 61,20
00DCC:  DATA 63,6F
00DCE:  DATA 6E,76
00DD0:  DATA 65,72
00DD2:  DATA 73,69
00DD4:  DATA 6F,6E
00DD6:  DATA 0D,0A
00DD8:  DATA 00,00
00DDA:  DATA 45,6E
00DDC:  DATA 64,20
00DDE:  DATA 43,49
00DE0:  DATA 47,53
00DE2:  DATA 20,64
00DE4:  DATA 61,74
00DE6:  DATA 61,20
00DE8:  DATA 63,6F
00DEA:  DATA 6E,76
00DEC:  DATA 65,72
00DEE:  DATA 73,69
00DF0:  DATA 6F,6E
00DF2:  DATA 0D,0A
00DF4:  DATA 00,00
00DF6:  DATA 53,74
00DF8:  DATA 61,72
00DFA:  DATA 74,20
00DFC:  DATA 53,57
00DFE:  DATA 45,45
00E00:  DATA 50,20
00E02:  DATA 50,4F
00E04:  DATA 52,54
00E06:  DATA 32,0D
00E08:  DATA 0A,00
00E0A:  DATA 09,53
00E0C:  DATA 77,65
00E0E:  DATA 65,70
00E10:  DATA 20,73
00E12:  DATA 74,65
00E14:  DATA 70,20
00E16:  DATA 3A,20
00E18:  DATA 25,75
00E1A:  DATA 0D,0A
00E1C:  DATA 00,00
00E1E:  DATA 45,4E
00E20:  DATA 44,20
00E22:  DATA 53,57
00E24:  DATA 45,45
00E26:  DATA 50,20
00E28:  DATA 50,4F
00E2A:  DATA 52,54
00E2C:  DATA 32,0D
00E2E:  DATA 0A,00
00E30:  DATA 53,74
00E32:  DATA 61,72
00E34:  DATA 74,20
00E36:  DATA 43,49
00E38:  DATA 47,53
00E3A:  DATA 20,64
00E3C:  DATA 61,74
00E3E:  DATA 61,20
00E40:  DATA 63,6F
00E42:  DATA 6E,76
00E44:  DATA 65,72
00E46:  DATA 73,69
00E48:  DATA 6F,6E
00E4A:  DATA 0D,0A
00E4C:  DATA 00,00
00E4E:  DATA 5B,50
00E50:  DATA 49,43
00E52:  DATA 4C,4F
00E54:  DATA 47,5D
00E56:  DATA 20,3A
00E58:  DATA 20,00
00E5A:  DATA 4D,69
00E5C:  DATA 73,73
00E5E:  DATA 69,6F
00E60:  DATA 6E,20
00E62:  DATA 46,6C
00E64:  DATA 61,73
00E66:  DATA 68,20
00E68:  DATA 69,73
00E6A:  DATA 20,6E
00E6C:  DATA 6F,74
00E6E:  DATA 20,63
00E70:  DATA 6F,6E
00E72:  DATA 6E,65
00E74:  DATA 63,74
00E76:  DATA 65,64
00E78:  DATA 0D,0A
00E7A:  DATA 00,00
00E7C:  DATA 53,74
00E7E:  DATA 61,72
00E80:  DATA 74,20
00E82:  DATA 46,6C
00E84:  DATA 61,73
00E86:  DATA 68,20
00E88:  DATA 45,72
00E8A:  DATA 61,73
00E8C:  DATA 65,20
00E8E:  DATA 41,6C
00E90:  DATA 6C,0D
00E92:  DATA 0A,00
00E94:  DATA 45,6E
00E96:  DATA 64,20
00E98:  DATA 46,6C
00E9A:  DATA 61,73
00E9C:  DATA 68,20
00E9E:  DATA 45,72
00EA0:  DATA 61,73
00EA2:  DATA 65,20
00EA4:  DATA 41,6C
00EA6:  DATA 6C,0D
00EA8:  DATA 0A,00
00EAA:  DATA 53,74
00EAC:  DATA 61,72
00EAE:  DATA 74,20
00EB0:  DATA 46,6C
00EB2:  DATA 61,73
00EB4:  DATA 68,20
00EB6:  DATA 45,72
00EB8:  DATA 61,73
00EBA:  DATA 65,20
00EBC:  DATA 31,20
00EBE:  DATA 53,65
00EC0:  DATA 63,74
00EC2:  DATA 6F,72
00EC4:  DATA 0D,0A
00EC6:  DATA 00,00
00EC8:  DATA 09,53
00ECA:  DATA 65,63
00ECC:  DATA 74,6F
00ECE:  DATA 72,20
00ED0:  DATA 41,64
00ED2:  DATA 64,72
00ED4:  DATA 65,73
00ED6:  DATA 73,3A
00ED8:  DATA 20,30
00EDA:  DATA 78,25
00EDC:  DATA 30,38
00EDE:  DATA 4C,58
00EE0:  DATA 0D,0A
00EE2:  DATA 00,00
00EE4:  DATA 45,6E
00EE6:  DATA 64,20
00EE8:  DATA 46,6C
00EEA:  DATA 61,73
00EEC:  DATA 68,20
00EEE:  DATA 45,72
00EF0:  DATA 61,73
00EF2:  DATA 65,20
00EF4:  DATA 31,20
00EF6:  DATA 53,65
00EF8:  DATA 63,74
00EFA:  DATA 6F,72
00EFC:  DATA 0D,0A
00EFE:  DATA 00,00
00F00:  DATA 53,74
00F02:  DATA 61,72
00F04:  DATA 74,20
00F06:  DATA 46,6C
00F08:  DATA 61,73
00F0A:  DATA 68,20
00F0C:  DATA 43,6F
00F0E:  DATA 70,79
00F10:  DATA 20,31
00F12:  DATA 20,53
00F14:  DATA 65,63
00F16:  DATA 74,6F
00F18:  DATA 72,0D
00F1A:  DATA 0A,00
00F1C:  DATA 09,53
00F1E:  DATA 75,62
00F20:  DATA 73,65
00F22:  DATA 63,74
00F24:  DATA 6F,72
00F26:  DATA 20,41
00F28:  DATA 64,64
00F2A:  DATA 72,65
00F2C:  DATA 73,73
00F2E:  DATA 3A,20
00F30:  DATA 30,78
00F32:  DATA 25,30
00F34:  DATA 38,4C
00F36:  DATA 58,0D
00F38:  DATA 0A,00
00F3A:  DATA 45,6E
00F3C:  DATA 64,20
00F3E:  DATA 46,6C
00F40:  DATA 61,73
00F42:  DATA 68,20
00F44:  DATA 43,6F
00F46:  DATA 70,79
00F48:  DATA 20,31
00F4A:  DATA 20,53
00F4C:  DATA 65,63
00F4E:  DATA 74,6F
00F50:  DATA 72,0D
00F52:  DATA 0A,00
00F54:  DATA 53,74
00F56:  DATA 61,72
00F58:  DATA 74,20
00F5A:  DATA 46,6C
00F5C:  DATA 61,73
00F5E:  DATA 68,20
00F60:  DATA 45,72
00F62:  DATA 61,73
00F64:  DATA 65,20
00F66:  DATA 36,34
00F68:  DATA 6B,42
00F6A:  DATA 79,74
00F6C:  DATA 65,20
00F6E:  DATA 53,75
00F70:  DATA 62,73
00F72:  DATA 65,63
00F74:  DATA 74,6F
00F76:  DATA 72,0D
00F78:  DATA 0A,00
00F7A:  DATA 09,53
00F7C:  DATA 75,62
00F7E:  DATA 73,65
00F80:  DATA 63,74
00F82:  DATA 6F,72
00F84:  DATA 20,41
00F86:  DATA 64,64
00F88:  DATA 72,65
00F8A:  DATA 73,73
00F8C:  DATA 3A,20
00F8E:  DATA 30,78
00F90:  DATA 25,30
00F92:  DATA 38,4C
00F94:  DATA 58,0D
00F96:  DATA 0A,00
00F98:  DATA 45,6E
00F9A:  DATA 64,20
00F9C:  DATA 46,6C
00F9E:  DATA 61,73
00FA0:  DATA 68,20
00FA2:  DATA 45,72
00FA4:  DATA 61,73
00FA6:  DATA 65,20
00FA8:  DATA 36,34
00FAA:  DATA 6B,42
00FAC:  DATA 79,74
00FAE:  DATA 65,20
00FB0:  DATA 53,75
00FB2:  DATA 62,73
00FB4:  DATA 65,63
00FB6:  DATA 74,6F
00FB8:  DATA 72,0D
00FBA:  DATA 0A,00
00FBC:  DATA 53,74
00FBE:  DATA 61,72
00FC0:  DATA 74,20
00FC2:  DATA 46,6C
00FC4:  DATA 61,73
00FC6:  DATA 68,20
00FC8:  DATA 57,72
00FCA:  DATA 69,74
00FCC:  DATA 65,20
00FCE:  DATA 44,65
00FD0:  DATA 6D,6F
00FD2:  DATA 0D,0A
00FD4:  DATA 00,00
00FD6:  DATA 09,4D
00FD8:  DATA 4F,44
00FDA:  DATA 45,20
00FDC:  DATA 20,20
00FDE:  DATA 20,20
00FE0:  DATA 3A,20
00FE2:  DATA 25,30
00FE4:  DATA 32,58
00FE6:  DATA 0D,0A
00FE8:  DATA 00,00
00FEA:  DATA 09,41
00FEC:  DATA 64,64
00FEE:  DATA 72,65
00FF0:  DATA 73,73
00FF2:  DATA 20,20
00FF4:  DATA 3A,20
00FF6:  DATA 30,78
00FF8:  DATA 25,30
00FFA:  DATA 38,4C
00FFC:  DATA 58,0D
00FFE:  DATA 0A,00
01000:  DATA 09,50
01002:  DATA 61,63
01004:  DATA 6B,65
01006:  DATA 74,4E
01008:  DATA 75,6D
0100A:  DATA 3A,20
0100C:  DATA 30,78
0100E:  DATA 25,30
01010:  DATA 34,4C
01012:  DATA 58,0D
01014:  DATA 0A,00
01016:  DATA 57,72
01018:  DATA 69,74
0101A:  DATA 65,20
0101C:  DATA 44,61
0101E:  DATA 74,61
01020:  DATA 0D,0A
01022:  DATA 00,00
01024:  DATA 45,6E
01026:  DATA 64,20
01028:  DATA 46,6C
0102A:  DATA 61,73
0102C:  DATA 68,20
0102E:  DATA 57,72
01030:  DATA 69,74
01032:  DATA 65,20
01034:  DATA 44,65
01036:  DATA 6D,6F
01038:  DATA 0D,0A
0103A:  DATA 00,00
0103C:  DATA 53,74
0103E:  DATA 61,72
01040:  DATA 74,20
01042:  DATA 46,6C
01044:  DATA 61,73
01046:  DATA 68,20
01048:  DATA 57,72
0104A:  DATA 69,74
0104C:  DATA 65,20
0104E:  DATA 34,6B
01050:  DATA 42,79
01052:  DATA 74,65
01054:  DATA 20,53
01056:  DATA 75,62
01058:  DATA 73,65
0105A:  DATA 63,74
0105C:  DATA 6F,72
0105E:  DATA 0D,0A
01060:  DATA 00,00
01062:  DATA 45,6E
01064:  DATA 64,20
01066:  DATA 46,6C
01068:  DATA 61,73
0106A:  DATA 68,20
0106C:  DATA 57,72
0106E:  DATA 69,74
01070:  DATA 65,20
01072:  DATA 34,6B
01074:  DATA 42,79
01076:  DATA 74,65
01078:  DATA 20,53
0107A:  DATA 75,62
0107C:  DATA 73,65
0107E:  DATA 63,74
01080:  DATA 6F,72
01082:  DATA 0D,0A
01084:  DATA 00,00
01086:  DATA 53,74
01088:  DATA 61,72
0108A:  DATA 74,20
0108C:  DATA 46,6C
0108E:  DATA 61,73
01090:  DATA 68,20
01092:  DATA 52,65
01094:  DATA 61,64
01096:  DATA 0D,0A
01098:  DATA 00,00
0109A:  DATA 09,4D
0109C:  DATA 4F,44
0109E:  DATA 45,20
010A0:  DATA 20,20
010A2:  DATA 20,20
010A4:  DATA 3A,20
010A6:  DATA 25,30
010A8:  DATA 32,58
010AA:  DATA 0D,0A
010AC:  DATA 00,00
010AE:  DATA 09,41
010B0:  DATA 64,64
010B2:  DATA 72,65
010B4:  DATA 73,73
010B6:  DATA 20,20
010B8:  DATA 3A,20
010BA:  DATA 30,78
010BC:  DATA 25,30
010BE:  DATA 38,4C
010C0:  DATA 58,0D
010C2:  DATA 0A,00
010C4:  DATA 09,50
010C6:  DATA 61,63
010C8:  DATA 6B,65
010CA:  DATA 74,4E
010CC:  DATA 75,6D
010CE:  DATA 3A,20
010D0:  DATA 30,78
010D2:  DATA 25,30
010D4:  DATA 34,4C
010D6:  DATA 58,0D
010D8:  DATA 0A,00
010DA:  DATA 52,45
010DC:  DATA 41,44
010DE:  DATA 20,44
010E0:  DATA 41,54
010E2:  DATA 41,0D
010E4:  DATA 0A,00
010E6:  DATA 4D,69
010E8:  DATA 73,73
010EA:  DATA 69,6F
010EC:  DATA 6E,20
010EE:  DATA 46,6C
010F0:  DATA 61,73
010F2:  DATA 68,20
010F4:  DATA 69,73
010F6:  DATA 20,6E
010F8:  DATA 6F,74
010FA:  DATA 20,63
010FC:  DATA 6F,6E
010FE:  DATA 6E,65
01100:  DATA 63,74
01102:  DATA 65,64
01104:  DATA 0D,0A
01106:  DATA 00,00
01108:  DATA 45,6E
0110A:  DATA 64,20
0110C:  DATA 46,6C
0110E:  DATA 61,73
01110:  DATA 68,20
01112:  DATA 52,65
01114:  DATA 61,64
01116:  DATA 0D,0A
01118:  DATA 00,00
0111A:  DATA 53,74
0111C:  DATA 61,72
0111E:  DATA 74,20
01120:  DATA 46,6C
01122:  DATA 61,73
01124:  DATA 68,20
01126:  DATA 52,65
01128:  DATA 61,64
0112A:  DATA 20,41
0112C:  DATA 64,64
0112E:  DATA 72,65
01130:  DATA 73,73
01132:  DATA 0D,0A
01134:  DATA 00,00
01136:  DATA 52,65
01138:  DATA 61,64
0113A:  DATA 20,44
0113C:  DATA 61,74
0113E:  DATA 61,3A
01140:  DATA 20,25
01142:  DATA 30,32
01144:  DATA 58,20
01146:  DATA 25,30
01148:  DATA 32,58
0114A:  DATA 20,25
0114C:  DATA 30,32
0114E:  DATA 58,20
01150:  DATA 25,30
01152:  DATA 32,58
01154:  DATA 0D,0A
01156:  DATA 00,00
01158:  DATA 45,6E
0115A:  DATA 64,20
0115C:  DATA 46,6C
0115E:  DATA 61,73
01160:  DATA 68,20
01162:  DATA 52,65
01164:  DATA 61,64
01166:  DATA 20,41
01168:  DATA 64,64
0116A:  DATA 72,65
0116C:  DATA 73,73
0116E:  DATA 0D,0A
01170:  DATA 00,00
01172:  DATA 53,74
01174:  DATA 61,72
01176:  DATA 74,20
01178:  DATA 46,6C
0117A:  DATA 61,73
0117C:  DATA 68,20
0117E:  DATA 45,72
01180:  DATA 61,73
01182:  DATA 65,20
01184:  DATA 61,6E
01186:  DATA 64,20
01188:  DATA 52,65
0118A:  DATA 73,65
0118C:  DATA 74,0D
0118E:  DATA 0A,00
01190:  DATA 45,6E
01192:  DATA 64,20
01194:  DATA 46,6C
01196:  DATA 61,73
01198:  DATA 68,20
0119A:  DATA 45,72
0119C:  DATA 61,73
0119E:  DATA 65,20
011A0:  DATA 61,6E
011A2:  DATA 64,20
011A4:  DATA 52,65
011A6:  DATA 73,65
011A8:  DATA 74,0D
011AA:  DATA 0A,00
011AC:  DATA 53,74
011AE:  DATA 61,72
011B0:  DATA 74,20
011B2:  DATA 46,6C
011B4:  DATA 61,73
011B6:  DATA 68,20
011B8:  DATA 41,64
011BA:  DATA 64,72
011BC:  DATA 65,73
011BE:  DATA 73,20
011C0:  DATA 52,65
011C2:  DATA 73,65
011C4:  DATA 74,0D
011C6:  DATA 0A,00
011C8:  DATA 45,6E
011CA:  DATA 64,20
011CC:  DATA 46,6C
011CE:  DATA 61,73
011D0:  DATA 68,20
011D2:  DATA 41,64
011D4:  DATA 64,72
011D6:  DATA 65,73
011D8:  DATA 73,20
011DA:  DATA 52,65
011DC:  DATA 73,65
011DE:  DATA 74,0D
011E0:  DATA 0A,00
011E2:  DATA 53,74
011E4:  DATA 61,72
011E6:  DATA 74,20
011E8:  DATA 46,6C
011EA:  DATA 61,73
011EC:  DATA 68,20
011EE:  DATA 53,4D
011F0:  DATA 46,20
011F2:  DATA 43,6F
011F4:  DATA 70,79
011F6:  DATA 0D,0A
011F8:  DATA 00,00
011FA:  DATA 45,6E
011FC:  DATA 64,20
011FE:  DATA 46,6C
01200:  DATA 61,73
01202:  DATA 68,20
01204:  DATA 53,4D
01206:  DATA 46,20
01208:  DATA 43,6F
0120A:  DATA 70,79
0120C:  DATA 0D,0A
0120E:  DATA 00,00
01210:  DATA 53,74
01212:  DATA 61,72
01214:  DATA 74,20
01216:  DATA 46,6C
01218:  DATA 61,73
0121A:  DATA 68,20
0121C:  DATA 53,4D
0121E:  DATA 46,20
01220:  DATA 52,65
01222:  DATA 61,64
01224:  DATA 0D,0A
01226:  DATA 00,00
01228:  DATA 52,65
0122A:  DATA 61,64
0122C:  DATA 20,44
0122E:  DATA 61,74
01230:  DATA 61,3A
01232:  DATA 20,00
01234:  DATA 0D,0A
01236:  DATA 45,6E
01238:  DATA 64,20
0123A:  DATA 46,6C
0123C:  DATA 61,73
0123E:  DATA 68,20
01240:  DATA 53,4D
01242:  DATA 46,20
01244:  DATA 52,65
01246:  DATA 61,64
01248:  DATA 0D,0A
0124A:  DATA 00,00
0124C:  DATA 53,74
0124E:  DATA 61,72
01250:  DATA 74,20
01252:  DATA 46,6C
01254:  DATA 61,73
01256:  DATA 68,20
01258:  DATA 53,4D
0125A:  DATA 46,20
0125C:  DATA 45,72
0125E:  DATA 61,73
01260:  DATA 65,0D
01262:  DATA 0A,00
01264:  DATA 45,6E
01266:  DATA 64,20
01268:  DATA 46,6C
0126A:  DATA 61,73
0126C:  DATA 68,20
0126E:  DATA 53,4D
01270:  DATA 46,20
01272:  DATA 45,72
01274:  DATA 61,73
01276:  DATA 65,0D
01278:  DATA 0A,00
0127A:  DATA 53,74
0127C:  DATA 61,72
0127E:  DATA 74,20
01280:  DATA 46,6C
01282:  DATA 61,73
01284:  DATA 68,20
01286:  DATA 41,64
01288:  DATA 64,72
0128A:  DATA 65,73
0128C:  DATA 73,20
0128E:  DATA 52,65
01290:  DATA 73,65
01292:  DATA 74,0D
01294:  DATA 0A,00
01296:  DATA 45,6E
01298:  DATA 64,20
0129A:  DATA 46,6C
0129C:  DATA 61,73
0129E:  DATA 68,20
012A0:  DATA 41,64
012A2:  DATA 64,72
012A4:  DATA 65,73
012A6:  DATA 73,20
012A8:  DATA 52,65
012AA:  DATA 73,65
012AC:  DATA 74,0D
012AE:  DATA 0A,00
012B0:  DATA 53,74
012B2:  DATA 61,72
012B4:  DATA 74,20
012B6:  DATA 4D,4F
012B8:  DATA 44,45
012BA:  DATA 20,44
012BC:  DATA 55,4D
012BE:  DATA 4D,59
012C0:  DATA 0D,0A
012C2:  DATA 00,00
012C4:  DATA 09,4D
012C6:  DATA 4F,44
012C8:  DATA 45,20
012CA:  DATA 20,20
012CC:  DATA 20,20
012CE:  DATA 3A,20
012D0:  DATA 25,30
012D2:  DATA 32,58
012D4:  DATA 0D,0A
012D6:  DATA 00,00
012D8:  DATA 09,50
012DA:  DATA 61,72
012DC:  DATA 61,6D
012DE:  DATA 31,20
012E0:  DATA 20,20
012E2:  DATA 3A,20
012E4:  DATA 30,78
012E6:  DATA 25,30
012E8:  DATA 38,4C
012EA:  DATA 58,0D
012EC:  DATA 0A,00
012EE:  DATA 09,50
012F0:  DATA 61,72
012F2:  DATA 61,6D
012F4:  DATA 32,20
012F6:  DATA 20,20
012F8:  DATA 3A,20
012FA:  DATA 30,78
012FC:  DATA 25,30
012FE:  DATA 34,4C
01300:  DATA 58,0D
01302:  DATA 0A,00
01304:  DATA 45,6E
01306:  DATA 64,20
01308:  DATA 4D,4F
0130A:  DATA 44,45
0130C:  DATA 20,44
0130E:  DATA 55,4D
01310:  DATA 4D,59
01312:  DATA 0D,0A
01314:  DATA 00,00
01316:  DATA 53,74
01318:  DATA 61,72
0131A:  DATA 74,20
0131C:  DATA 4D,4F
0131E:  DATA 44,45
01320:  DATA 20,54
01322:  DATA 45,53
01324:  DATA 54,20
01326:  DATA 49,56
01328:  DATA 0D,0A
0132A:  DATA 00,00
0132C:  DATA 09,53
0132E:  DATA 77,65
01330:  DATA 65,70
01332:  DATA 20,73
01334:  DATA 74,65
01336:  DATA 70,20
01338:  DATA 3A,20
0133A:  DATA 25,75
0133C:  DATA 0D,0A
0133E:  DATA 00,00
01340:  DATA 45,6E
01342:  DATA 64,20
01344:  DATA 4D,4F
01346:  DATA 44,45
01348:  DATA 20,54
0134A:  DATA 45,53
0134C:  DATA 54,20
0134E:  DATA 49,56
01350:  DATA 0D,0A
01352:  DATA 00,00
01354:  DATA 53,74
01356:  DATA 61,72
01358:  DATA 74,20
0135A:  DATA 4D,4F
0135C:  DATA 44,45
0135E:  DATA 20,4D
01360:  DATA 45,41
01362:  DATA 53,55
01364:  DATA 52,45
01366:  DATA 0D,0A
01368:  DATA 00,00
0136A:  DATA 53,74
0136C:  DATA 61,72
0136E:  DATA 74,20
01370:  DATA 53,57
01372:  DATA 45,45
01374:  DATA 50,0D
01376:  DATA 0A,00
01378:  DATA 09,53
0137A:  DATA 77,65
0137C:  DATA 65,70
0137E:  DATA 20,73
01380:  DATA 74,65
01382:  DATA 70,20
01384:  DATA 3A,20
01386:  DATA 25,75
01388:  DATA 0D,0A
0138A:  DATA 00,00
0138C:  DATA 45,4E
0138E:  DATA 44,20
01390:  DATA 53,57
01392:  DATA 45,45
01394:  DATA 50,0D
01396:  DATA 0A,00
01398:  DATA 0D,0A
0139A:  DATA 5F,5F
0139C:  DATA 5F,5F
0139E:  DATA 5F,5F
013A0:  DATA 5F,5F
013A2:  DATA 5F,5F
013A4:  DATA 5F,5F
013A6:  DATA 5F,5F
013A8:  DATA 5F,5F
013AA:  DATA 5F,5F
013AC:  DATA 5F,5F
013AE:  DATA 5F,5F
013B0:  DATA 5F,5F
013B2:  DATA 5F,5F
013B4:  DATA 5F,5F
013B6:  DATA 5F,5F
013B8:  DATA 0D,0A
013BA:  DATA 5F,5F
013BC:  DATA 5F,5F
013BE:  DATA 5F,53
013C0:  DATA 74,61
013C2:  DATA 72,74
013C4:  DATA 20,65
013C6:  DATA 78,65
013C8:  DATA 63,75
013CA:  DATA 74,65
013CC:  DATA 5F,6D
013CE:  DATA 69,73
013D0:  DATA 73,69
013D2:  DATA 6F,6E
013D4:  DATA 5F,5F
013D6:  DATA 5F,5F
013D8:  DATA 5F,0D
013DA:  DATA 0A,0D
013DC:  DATA 0A,00
013DE:  DATA 43,6F
013E0:  DATA 6D,6D
013E2:  DATA 61,6E
013E4:  DATA 64,20
013E6:  DATA 49,44
013E8:  DATA 3A,20
013EA:  DATA 25,58
013EC:  DATA 0D,0A
013EE:  DATA 0D,0A
013F0:  DATA 00,00
013F2:  DATA 09,09
013F4:  DATA 2D,3E
013F6:  DATA 20,49
013F8:  DATA 6E,76
013FA:  DATA 61,6C
013FC:  DATA 69,64
013FE:  DATA 20,43
01400:  DATA 4D,44
01402:  DATA 20,49
01404:  DATA 44,21
01406:  DATA 0D,0A
01408:  DATA 00,00
0140A:  DATA 0D,0A
0140C:  DATA 5F,5F
0140E:  DATA 5F,5F
01410:  DATA 5F,5F
01412:  DATA 45,6E
01414:  DATA 64,20
01416:  DATA 65,78
01418:  DATA 65,63
0141A:  DATA 75,74
0141C:  DATA 65,5F
0141E:  DATA 6D,69
01420:  DATA 73,73
01422:  DATA 69,6F
01424:  DATA 6E,5F
01426:  DATA 5F,5F
01428:  DATA 5F,5F
0142A:  DATA 5F,0D
0142C:  DATA 0A,5F
0142E:  DATA 5F,5F
01430:  DATA 5F,5F
01432:  DATA 5F,5F
01434:  DATA 5F,5F
01436:  DATA 5F,5F
01438:  DATA 5F,5F
0143A:  DATA 5F,5F
0143C:  DATA 5F,5F
0143E:  DATA 5F,5F
01440:  DATA 5F,5F
01442:  DATA 5F,5F
01444:  DATA 5F,5F
01446:  DATA 5F,5F
01448:  DATA 5F,5F
0144A:  DATA 5F,5F
0144C:  DATA 0D,0A
0144E:  DATA 00,00
01450:  DATA 53,74
01452:  DATA 61,72
01454:  DATA 74,20
01456:  DATA 65,78
01458:  DATA 65,63
0145A:  DATA 75,74
0145C:  DATA 65,5F
0145E:  DATA 63,6F
01460:  DATA 6D,6D
01462:  DATA 61,6E
01464:  DATA 64,0D
01466:  DATA 0A,00
01468:  DATA 09,2D
0146A:  DATA 3E,20
0146C:  DATA 55,70
0146E:  DATA 6C,69
01470:  DATA 6E,6B
01472:  DATA 20,63
01474:  DATA 6F,6D
01476:  DATA 6D,61
01478:  DATA 6E,64
0147A:  DATA 0D,0A
0147C:  DATA 00,00
0147E:  DATA 09,20
01480:  DATA 20,20
01482:  DATA 54,72
01484:  DATA 61,6E
01486:  DATA 73,6D
01488:  DATA 69,74
0148A:  DATA 20,41
0148C:  DATA 63,6B
0148E:  DATA 6E,6F
01490:  DATA 6C,65
01492:  DATA 67,64
01494:  DATA 65,0D
01496:  DATA 0A,00
01498:  DATA 09,2D
0149A:  DATA 3E,20
0149C:  DATA 53,74
0149E:  DATA 61,74
014A0:  DATA 75,73
014A2:  DATA 20,63
014A4:  DATA 68,65
014A6:  DATA 63,6B
014A8:  DATA 0D,0A
014AA:  DATA 00,00
014AC:  DATA 09,20
014AE:  DATA 20,20
014B0:  DATA 54,72
014B2:  DATA 61,6E
014B4:  DATA 73,6D
014B6:  DATA 69,74
014B8:  DATA 20,4D
014BA:  DATA 49,53
014BC:  DATA 20,4D
014BE:  DATA 43,55
014C0:  DATA 20,53
014C2:  DATA 74,61
014C4:  DATA 74,75
014C6:  DATA 73,0D
014C8:  DATA 0A,00
014CA:  DATA 66,69
014CC:  DATA 6E,69
014CE:  DATA 73,68
014D0:  DATA 65,64
014D2:  DATA 20,69
014D4:  DATA 6E,20
014D6:  DATA 73,74
014D8:  DATA 61,74
014DA:  DATA 75,73
014DC:  DATA 5F,63
014DE:  DATA 68,65
014E0:  DATA 63,6B
014E2:  DATA 0D,0A
014E4:  DATA 00,00
014E6:  DATA 09,2D
014E8:  DATA 3E,20
014EA:  DATA 53,4D
014EC:  DATA 46,20
014EE:  DATA 61,76
014F0:  DATA 61,69
014F2:  DATA 6C,61
014F4:  DATA 62,6C
014F6:  DATA 65,20
014F8:  DATA 63,68
014FA:  DATA 65,63
014FC:  DATA 6B,0D
014FE:  DATA 0A,00
01500:  DATA 09,20
01502:  DATA 20,20
01504:  DATA 54,72
01506:  DATA 61,6E
01508:  DATA 73,6D
0150A:  DATA 69,74
0150C:  DATA 20,41
0150E:  DATA 63,6B
01510:  DATA 6E,6F
01512:  DATA 6C,65
01514:  DATA 67,64
01516:  DATA 65,0D
01518:  DATA 0A,00
0151A:  DATA 09,09
0151C:  DATA 2D,3E
0151E:  DATA 20,61
01520:  DATA 6C,6C
01522:  DATA 6F,77
01524:  DATA 64,0D
01526:  DATA 0A,00
01528:  DATA 09,09
0152A:  DATA 2D,3E
0152C:  DATA 20,64
0152E:  DATA 65,6E
01530:  DATA 79,65
01532:  DATA 64,0D
01534:  DATA 0A,00
01536:  DATA 0D,0A
01538:  DATA 0D,0A
0153A:  DATA 0D,0A
0153C:  DATA 3D,3D
0153E:  DATA 3D,3D
01540:  DATA 3D,3D
01542:  DATA 3D,3D
01544:  DATA 3D,3D
01546:  DATA 3D,3D
01548:  DATA 3D,3D
0154A:  DATA 3D,3D
0154C:  DATA 3D,3D
0154E:  DATA 3D,3D
01550:  DATA 3D,3D
01552:  DATA 3D,3D
01554:  DATA 3D,3D
01556:  DATA 3D,3D
01558:  DATA 3D,3D
0155A:  DATA 3D,3D
0155C:  DATA 3D,3D
0155E:  DATA 3D,3D
01560:  DATA 3D,3D
01562:  DATA 3D,3D
01564:  DATA 3D,3D
01566:  DATA 3D,3D
01568:  DATA 3D,3D
0156A:  DATA 3D,3D
0156C:  DATA 3D,3D
0156E:  DATA 3D,3D
01570:  DATA 3D,3D
01572:  DATA 3D,3D
01574:  DATA 3D,3D
01576:  DATA 3D,3D
01578:  DATA 0D,0A
0157A:  DATA 00,00
0157C:  DATA 54,68
0157E:  DATA 69,73
01580:  DATA 20,69
01582:  DATA 73,20
01584:  DATA 4D,4F
01586:  DATA 4D,49
01588:  DATA 4A,49
0158A:  DATA 20,43
0158C:  DATA 49,47
0158E:  DATA 53,20
01590:  DATA 50,49
01592:  DATA 43,20
01594:  DATA 42,42
01596:  DATA 4D,20
01598:  DATA 66,6F
0159A:  DATA 72,20
0159C:  DATA 4D,49
0159E:  DATA 53,37
015A0:  DATA 5F,42
015A2:  DATA 42,4D
015A4:  DATA 33,2E
015A6:  DATA 0D,0A
015A8:  DATA 00,00
015AA:  DATA 4C,61
015AC:  DATA 73,74
015AE:  DATA 20,75
015B0:  DATA 70,64
015B2:  DATA 61,74
015B4:  DATA 65,64
015B6:  DATA 20,6F
015B8:  DATA 6E,20
015BA:  DATA 25,73
015BC:  DATA 20,25
015BE:  DATA 73,2C
015C0:  DATA 20,62
015C2:  DATA 79,20
015C4:  DATA 49,6E
015C6:  DATA 6F,75
015C8:  DATA 65,2E
015CA:  DATA 0D,0A
015CC:  DATA 0D,0A
015CE:  DATA 00,00
015D0:  DATA 32,31
015D2:  DATA 2D,4A
015D4:  DATA 75,6C
015D6:  DATA 2D,32
015D8:  DATA 35,00
015DA:  DATA 32,30
015DC:  DATA 3A,31
015DE:  DATA 35,3A
015E0:  DATA 33,37
015E2:  DATA 00,00
015E4:  DATA 5F,5F
015E6:  DATA 5F,5F
015E8:  DATA 43,49
015EA:  DATA 47,53
015EC:  DATA 20,50
015EE:  DATA 49,43
015F0:  DATA 20,53
015F2:  DATA 74,61
015F4:  DATA 72,74
015F6:  DATA 20,4F
015F8:  DATA 70,65
015FA:  DATA 72,61
015FC:  DATA 74,69
015FE:  DATA 6F,6E
01600:  DATA 5F,5F
01602:  DATA 5F,5F
01604:  DATA 5F,0D
01606:  DATA 0A,0D
01608:  DATA 0A,00
0160A:  DATA 77,61
0160C:  DATA 69,74
0160E:  DATA 69,6E
01610:  DATA 67,20
01612:  DATA 66,6F
01614:  DATA 72,20
01616:  DATA 42,4F
01618:  DATA 53,53
0161A:  DATA 20,50
0161C:  DATA 49,43
0161E:  DATA 20,63
01620:  DATA 6F,6D
01622:  DATA 6D,61
01624:  DATA 6E,64
01626:  DATA 00,00
01628:  DATA 0D,0A
0162A:  DATA 77,61
0162C:  DATA 69,74
0162E:  DATA 69,6E
01630:  DATA 67,20
01632:  DATA 66,6F
01634:  DATA 72,20
01636:  DATA 42,4F
01638:  DATA 53,53
0163A:  DATA 20,50
0163C:  DATA 49,43
0163E:  DATA 20,63
01640:  DATA 6F,6D
01642:  DATA 6D,61
01644:  DATA 6E,64
01646:  DATA 00,00
01648:  DATA 0D,0A
0164A:  DATA 0D,0A
0164C:  DATA 3D,3D
0164E:  DATA 3D,3D
01650:  DATA 3D,3D
01652:  DATA 0D,0A
01654:  DATA 0D,0A
01656:  DATA 46,69
01658:  DATA 6E,69
0165A:  DATA 73,68
0165C:  DATA 65,64
0165E:  DATA 20,70
01660:  DATA 72,6F
01662:  DATA 63,65
01664:  DATA 73,73
01666:  DATA 2E,0D
01668:  DATA 0A,57
0166A:  DATA 61,69
0166C:  DATA 74,20
0166E:  DATA 66,6F
01670:  DATA 72,20
01672:  DATA 42,4F
01674:  DATA 53,53
01676:  DATA 20,50
01678:  DATA 49,43
0167A:  DATA 20,74
0167C:  DATA 75,72
0167E:  DATA 6E,20
01680:  DATA 6F,66
01682:  DATA 66,20
01684:  DATA 6D,65
01686:  DATA 00,00
01688:  DATA 45,6E
0168A:  DATA 64,20
0168C:  DATA 6D,61
0168E:  DATA 69,6E
01690:  DATA 0D,0A
01692:  DATA 00,00
*
01714:  TBLRD*+
01716:  MOVF   FF5,F
01718:  BTFSC  FD8.2
0171A:  GOTO   1742
0171E:  MOVFF  FF6,846
01722:  MOVFF  FF7,847
01726:  MOVFF  FF8,848
0172A:  MOVFF  FF5,849
0172E:  CALL   16C2
01732:  MOVFF  846,FF6
01736:  MOVFF  847,FF7
0173A:  MOVFF  848,FF8
0173E:  GOTO   1714
01742:  RETURN 0
01744:  TBLRD*+
01746:  MOVFF  FF6,7ED
0174A:  MOVFF  FF7,7EE
0174E:  MOVFF  FF8,7EF
01752:  MOVFF  FF5,849
01756:  CALL   16C2
0175A:  MOVFF  7ED,FF6
0175E:  MOVFF  7EE,FF7
01762:  MOVFF  7EF,FF8
01766:  MOVLB  7
01768:  DECFSZ xEC,F
0176A:  BRA    1770
0176C:  BRA    1776
0176E:  MOVLB  0
01770:  MOVLB  0
01772:  GOTO   1744
01776:  MOVLB  0
01778:  RETURN 0
*
01CB4:  MOVLB  8
01CB6:  MOVF   x4A,W
01CB8:  ANDLW  07
01CBA:  MOVWF  00
01CBC:  RRCF   x4A,W
01CBE:  MOVWF  01
01CC0:  RRCF   01,F
01CC2:  RRCF   01,F
01CC4:  MOVLW  1F
01CC6:  ANDWF  01,F
01CC8:  MOVF   01,W
01CCA:  ADDWF  x4C,W
01CCC:  MOVWF  FE9
01CCE:  MOVLW  00
01CD0:  ADDWFC x4D,W
01CD2:  MOVWF  FEA
01CD4:  CLRF   01
01CD6:  INCF   01,F
01CD8:  INCF   00,F
01CDA:  MOVLB  0
01CDC:  GOTO   1CE2
01CE0:  RLCF   01,F
01CE2:  DECFSZ 00,F
01CE4:  GOTO   1CE0
01CE8:  MOVLB  8
01CEA:  MOVF   x4B,F
01CEC:  BTFSS  FD8.2
01CEE:  BRA    1CF6
01CF0:  MOVLB  0
01CF2:  GOTO   1D00
01CF6:  MOVF   01,W
01CF8:  IORWF  FEF,F
01CFA:  MOVLB  0
01CFC:  GOTO   1D06
01D00:  COMF   01,F
01D02:  MOVF   01,W
01D04:  ANDWF  FEF,F
01D06:  RETURN 0
*
01F34:  MOVLB  8
01F36:  BTFSS  x48.7
01F38:  BRA    1F40
01F3A:  MOVLB  0
01F3C:  GOTO   1F70
01F40:  MOVLW  0F
01F42:  MOVWF  00
01F44:  SWAPF  x47,W
01F46:  ANDWF  00,F
01F48:  MOVLW  0A
01F4A:  SUBWF  00,W
01F4C:  BTFSS  FD8.0
01F4E:  BRA    1F56
01F50:  MOVLB  0
01F52:  GOTO   1F60
01F56:  MOVLW  30
01F58:  ADDWF  00,F
01F5A:  MOVLB  0
01F5C:  GOTO   1F68
01F60:  MOVLB  8
01F62:  MOVF   x48,W
01F64:  ADDWF  00,F
01F66:  MOVLB  0
01F68:  MOVFF  00,849
01F6C:  CALL   16C2
01F70:  MOVLW  0F
01F72:  MOVLB  8
01F74:  ANDWF  x47,F
01F76:  MOVLW  0A
01F78:  SUBWF  x47,W
01F7A:  BTFSS  FD8.0
01F7C:  BRA    1F84
01F7E:  MOVLB  0
01F80:  GOTO   1F8C
01F84:  MOVLW  30
01F86:  MOVLB  0
01F88:  GOTO   1F94
01F8C:  MOVLB  8
01F8E:  BCF    x48.7
01F90:  MOVF   x48,W
01F92:  MOVLB  0
01F94:  MOVLB  8
01F96:  ADDWF  x47,F
01F98:  MOVFF  847,849
01F9C:  MOVLB  0
01F9E:  CALL   16C2
01FA2:  RETURN 0
*
03F56:  TSTFSZ 01
03F58:  GOTO   3F66
03F5C:  TSTFSZ 02
03F5E:  GOTO   3F68
03F62:  GOTO   3F78
03F66:  INCF   02,F
03F68:  MOVFF  00,FEE
03F6C:  DECFSZ 01,F
03F6E:  GOTO   3F68
03F72:  DECFSZ 02,F
03F74:  GOTO   3F68
03F78:  RETURN 0
*
04360:  MOVLB  7
04362:  MOVF   xEF,W
04364:  CLRF   01
04366:  SUBWF  xEE,W
04368:  BTFSS  FD8.0
0436A:  BRA    4372
0436C:  MOVLB  0
0436E:  GOTO   437C
04372:  MOVF   xEE,W
04374:  MOVWF  00
04376:  MOVLB  0
04378:  GOTO   43A6
0437C:  CLRF   00
0437E:  MOVLW  08
04380:  MOVLB  7
04382:  MOVWF  xF0
04384:  MOVLB  0
04386:  MOVLB  7
04388:  RLCF   xEE,F
0438A:  RLCF   00,F
0438C:  MOVF   xEF,W
0438E:  SUBWF  00,W
04390:  BTFSC  FD8.0
04392:  MOVWF  00
04394:  RLCF   01,F
04396:  DECFSZ xF0,F
04398:  BRA    439E
0439A:  BRA    43A4
0439C:  MOVLB  0
0439E:  MOVLB  0
043A0:  GOTO   4386
043A4:  MOVLB  0
043A6:  RETURN 0
043A8:  MOVF   01,W
043AA:  MOVFF  7EC,7EE
043AE:  MOVLW  64
043B0:  MOVLB  7
043B2:  MOVWF  xEF
043B4:  MOVLB  0
043B6:  CALL   4360
043BA:  MOVFF  00,7EC
043BE:  MOVF   01,W
043C0:  MOVLW  30
043C2:  BTFSS  FD8.2
043C4:  GOTO   43E8
043C8:  MOVLB  7
043CA:  BTFSC  xED.1
043CC:  BRA    43D4
043CE:  MOVLB  0
043D0:  GOTO   43FC
043D4:  BTFSS  xED.3
043D6:  BRA    43DE
043D8:  MOVLB  0
043DA:  GOTO   43FC
043DE:  BTFSC  xED.4
043E0:  MOVLW  20
043E2:  MOVLB  0
043E4:  GOTO   43F2
043E8:  MOVLB  7
043EA:  BCF    xED.3
043EC:  BCF    xED.4
043EE:  BSF    xED.0
043F0:  MOVLB  0
043F2:  ADDWF  01,F
043F4:  MOVFF  01,849
043F8:  CALL   16C2
043FC:  MOVFF  7EC,7EE
04400:  MOVLW  0A
04402:  MOVLB  7
04404:  MOVWF  xEF
04406:  MOVLB  0
04408:  CALL   4360
0440C:  MOVFF  00,7EC
04410:  MOVF   01,W
04412:  MOVLW  30
04414:  BTFSS  FD8.2
04416:  GOTO   4436
0441A:  MOVLB  7
0441C:  BTFSS  xED.3
0441E:  BRA    4426
04420:  MOVLB  0
04422:  GOTO   4440
04426:  BTFSC  xED.0
04428:  BRA    4430
0442A:  MOVLB  0
0442C:  GOTO   4440
04430:  BTFSC  xED.4
04432:  MOVLW  20
04434:  MOVLB  0
04436:  ADDWF  01,F
04438:  MOVFF  01,849
0443C:  CALL   16C2
04440:  MOVLW  30
04442:  MOVLB  7
04444:  ADDWF  xEC,F
04446:  MOVFF  7EC,849
0444A:  MOVLB  0
0444C:  CALL   16C2
04450:  RETURN 0
04452:  MOVFF  FEA,39E
04456:  MOVFF  FE9,39D
0445A:  MOVLB  3
0445C:  SWAPF  x97,W
0445E:  IORLW  F0
04460:  MOVWF  x99
04462:  ADDWF  x99,F
04464:  ADDLW  E2
04466:  MOVWF  x9A
04468:  ADDLW  32
0446A:  MOVWF  x9C
0446C:  MOVF   x97,W
0446E:  ANDLW  0F
04470:  ADDWF  x9A,F
04472:  ADDWF  x9A,F
04474:  ADDWF  x9C,F
04476:  ADDLW  E9
04478:  MOVWF  x9B
0447A:  ADDWF  x9B,F
0447C:  ADDWF  x9B,F
0447E:  SWAPF  x96,W
04480:  ANDLW  0F
04482:  ADDWF  x9B,F
04484:  ADDWF  x9C,F
04486:  RLCF   x9B,F
04488:  RLCF   x9C,F
0448A:  COMF   x9C,F
0448C:  RLCF   x9C,F
0448E:  MOVF   x96,W
04490:  ANDLW  0F
04492:  ADDWF  x9C,F
04494:  RLCF   x99,F
04496:  MOVLW  07
04498:  MOVWF  x98
0449A:  MOVLW  0A
0449C:  MOVLB  0
0449E:  MOVLB  3
044A0:  DECF   x9B,F
044A2:  ADDWF  x9C,F
044A4:  BTFSC  FD8.0
044A6:  BRA    44AE
044A8:  MOVLB  0
044AA:  GOTO   449E
044AE:  MOVLB  0
044B0:  MOVLB  3
044B2:  DECF   x9A,F
044B4:  ADDWF  x9B,F
044B6:  BTFSC  FD8.0
044B8:  BRA    44C0
044BA:  MOVLB  0
044BC:  GOTO   44B0
044C0:  MOVLB  0
044C2:  MOVLB  3
044C4:  DECF   x99,F
044C6:  ADDWF  x9A,F
044C8:  BTFSC  FD8.0
044CA:  BRA    44D2
044CC:  MOVLB  0
044CE:  GOTO   44C2
044D2:  MOVLB  0
044D4:  MOVLB  3
044D6:  DECF   x98,F
044D8:  ADDWF  x99,F
044DA:  BTFSC  FD8.0
044DC:  BRA    44E4
044DE:  MOVLB  0
044E0:  GOTO   44D4
044E4:  MOVLW  03
044E6:  MOVWF  FEA
044E8:  MOVLW  98
044EA:  MOVWF  FE9
044EC:  MOVLW  07
044EE:  ANDWF  x9D,W
044F0:  BCF    x9D.6
044F2:  MOVLB  0
044F4:  ADDWF  FE9,F
044F6:  MOVLW  00
044F8:  ADDWFC FEA,F
044FA:  MOVF   FE9,W
044FC:  SUBLW  9C
044FE:  BTFSS  FD8.2
04500:  GOTO   4514
04504:  MOVF   FEA,W
04506:  SUBLW  03
04508:  BTFSS  FD8.2
0450A:  GOTO   4514
0450E:  MOVLB  3
04510:  BSF    x9D.6
04512:  MOVLB  0
04514:  MOVF   FEF,W
04516:  MOVWF  00
04518:  BTFSS  FD8.2
0451A:  GOTO   4546
0451E:  MOVLB  3
04520:  BTFSS  x9D.6
04522:  BRA    452A
04524:  MOVLB  0
04526:  GOTO   4546
0452A:  BTFSS  x9D.4
0452C:  BRA    4534
0452E:  MOVLB  0
04530:  GOTO   456A
04534:  BTFSS  x9D.3
04536:  BRA    453E
04538:  MOVLB  0
0453A:  GOTO   4546
0453E:  MOVLW  20
04540:  MOVLB  0
04542:  GOTO   4550
04546:  MOVLB  3
04548:  BSF    x9D.3
0454A:  BCF    x9D.4
0454C:  MOVLW  30
0454E:  MOVLB  0
04550:  ADDWF  00,F
04552:  MOVFF  FEA,397
04556:  MOVFF  FE9,396
0455A:  MOVFF  00,849
0455E:  CALL   16C2
04562:  MOVFF  397,FEA
04566:  MOVFF  396,FE9
0456A:  MOVF   FEE,W
0456C:  MOVLB  3
0456E:  BTFSC  x9D.6
04570:  BRA    4578
04572:  MOVLB  0
04574:  GOTO   44FA
04578:  MOVLB  0
0457A:  RETURN 0
*
06B1A:  MOVLW  20
06B1C:  MOVLB  4
06B1E:  BTFSS  x1A.4
06B20:  MOVLW  30
06B22:  MOVWF  x1B
06B24:  MOVFF  419,00
06B28:  BTFSC  00.7
06B2A:  BRA    6B32
06B2C:  MOVLB  0
06B2E:  GOTO   6B44
06B32:  COMF   00,F
06B34:  INCF   00,F
06B36:  MOVFF  00,419
06B3A:  MOVLW  2D
06B3C:  MOVWF  x1B
06B3E:  BSF    x1A.7
06B40:  BSF    x1A.0
06B42:  MOVLB  0
06B44:  MOVF   01,W
06B46:  MOVFF  419,7EE
06B4A:  MOVLW  64
06B4C:  MOVLB  7
06B4E:  MOVWF  xEF
06B50:  MOVLB  0
06B52:  CALL   4360
06B56:  MOVFF  00,419
06B5A:  MOVLW  30
06B5C:  ADDWF  01,W
06B5E:  MOVLB  4
06B60:  MOVWF  x1C
06B62:  MOVFF  419,7EE
06B66:  MOVLW  0A
06B68:  MOVLB  7
06B6A:  MOVWF  xEF
06B6C:  MOVLB  0
06B6E:  CALL   4360
06B72:  MOVLW  30
06B74:  ADDWF  00,W
06B76:  MOVLB  4
06B78:  MOVWF  x1E
06B7A:  MOVLW  30
06B7C:  ADDWF  01,W
06B7E:  MOVWF  x1D
06B80:  MOVFF  41B,00
06B84:  MOVLB  0
06B86:  MOVLW  30
06B88:  MOVLB  4
06B8A:  SUBWF  x1C,W
06B8C:  BTFSS  FD8.2
06B8E:  BRA    6B96
06B90:  MOVLB  0
06B92:  GOTO   6BA2
06B96:  BSF    x1A.1
06B98:  BTFSC  x1A.7
06B9A:  BSF    x1A.2
06B9C:  MOVLB  0
06B9E:  GOTO   6BE2
06BA2:  MOVFF  41B,41C
06BA6:  MOVLW  20
06BA8:  MOVLB  4
06BAA:  MOVWF  x1B
06BAC:  MOVLW  30
06BAE:  SUBWF  x1D,W
06BB0:  BTFSS  FD8.2
06BB2:  BRA    6BBA
06BB4:  MOVLB  0
06BB6:  GOTO   6BC6
06BBA:  BSF    x1A.0
06BBC:  BTFSC  x1A.7
06BBE:  BSF    x1A.1
06BC0:  MOVLB  0
06BC2:  GOTO   6BE2
06BC6:  BTFSC  FD8.2
06BC8:  BRA    6BD0
06BCA:  MOVLB  4
06BCC:  BSF    x1A.0
06BCE:  MOVLB  0
06BD0:  BTFSS  FD8.2
06BD2:  GOTO   6BE2
06BD6:  MOVFF  41C,41D
06BDA:  MOVLW  20
06BDC:  MOVLB  4
06BDE:  MOVWF  x1C
06BE0:  MOVLB  0
06BE2:  MOVLB  4
06BE4:  BTFSS  x1A.2
06BE6:  BRA    6BEE
06BE8:  MOVLB  0
06BEA:  GOTO   6C08
06BEE:  BTFSS  x1A.1
06BF0:  BRA    6BF8
06BF2:  MOVLB  0
06BF4:  GOTO   6C10
06BF8:  BTFSS  x1A.0
06BFA:  BRA    6C02
06BFC:  MOVLB  0
06BFE:  GOTO   6C18
06C02:  MOVLB  0
06C04:  GOTO   6C20
06C08:  MOVFF  41B,849
06C0C:  CALL   16C2
06C10:  MOVFF  41C,849
06C14:  CALL   16C2
06C18:  MOVFF  41D,849
06C1C:  CALL   16C2
06C20:  MOVFF  41E,849
06C24:  CALL   16C2
06C28:  RETURN 0
*
06D22:  BTFSC  FD8.1
06D24:  GOTO   6D30
06D28:  MOVLW  04
06D2A:  MOVWF  FEA
06D2C:  MOVLW  29
06D2E:  MOVWF  FE9
06D30:  CLRF   00
06D32:  CLRF   01
06D34:  CLRF   02
06D36:  CLRF   03
06D38:  MOVLB  4
06D3A:  CLRF   x29
06D3C:  CLRF   x2A
06D3E:  CLRF   x2B
06D40:  CLRF   x2C
06D42:  MOVF   x28,W
06D44:  IORWF  x27,W
06D46:  IORWF  x26,W
06D48:  IORWF  x25,W
06D4A:  BTFSS  FD8.2
06D4C:  BRA    6D54
06D4E:  MOVLB  0
06D50:  GOTO   6DE4
06D54:  MOVLB  0
06D56:  MOVLW  20
06D58:  MOVLB  4
06D5A:  MOVWF  x2D
06D5C:  MOVLB  0
06D5E:  BCF    FD8.0
06D60:  MOVLB  4
06D62:  RLCF   x21,F
06D64:  RLCF   x22,F
06D66:  RLCF   x23,F
06D68:  RLCF   x24,F
06D6A:  RLCF   x29,F
06D6C:  RLCF   x2A,F
06D6E:  RLCF   x2B,F
06D70:  RLCF   x2C,F
06D72:  MOVF   x28,W
06D74:  SUBWF  x2C,W
06D76:  BTFSC  FD8.2
06D78:  BRA    6D80
06D7A:  MOVLB  0
06D7C:  GOTO   6DA2
06D80:  MOVF   x27,W
06D82:  SUBWF  x2B,W
06D84:  BTFSC  FD8.2
06D86:  BRA    6D8E
06D88:  MOVLB  0
06D8A:  GOTO   6DA2
06D8E:  MOVF   x26,W
06D90:  SUBWF  x2A,W
06D92:  BTFSC  FD8.2
06D94:  BRA    6D9C
06D96:  MOVLB  0
06D98:  GOTO   6DA2
06D9C:  MOVF   x25,W
06D9E:  SUBWF  x29,W
06DA0:  MOVLB  0
06DA2:  BTFSS  FD8.0
06DA4:  GOTO   6DCA
06DA8:  MOVLB  4
06DAA:  MOVF   x25,W
06DAC:  SUBWF  x29,F
06DAE:  MOVF   x26,W
06DB0:  BTFSS  FD8.0
06DB2:  INCFSZ x26,W
06DB4:  SUBWF  x2A,F
06DB6:  MOVF   x27,W
06DB8:  BTFSS  FD8.0
06DBA:  INCFSZ x27,W
06DBC:  SUBWF  x2B,F
06DBE:  MOVF   x28,W
06DC0:  BTFSS  FD8.0
06DC2:  INCFSZ x28,W
06DC4:  SUBWF  x2C,F
06DC6:  BSF    FD8.0
06DC8:  MOVLB  0
06DCA:  RLCF   00,F
06DCC:  RLCF   01,F
06DCE:  RLCF   02,F
06DD0:  RLCF   03,F
06DD2:  MOVLB  4
06DD4:  DECFSZ x2D,F
06DD6:  BRA    6DDC
06DD8:  BRA    6DE2
06DDA:  MOVLB  0
06DDC:  MOVLB  0
06DDE:  GOTO   6D5E
06DE2:  MOVLB  0
06DE4:  MOVFF  429,FEF
06DE8:  MOVFF  42A,FEC
06DEC:  MOVFF  42B,FEC
06DF0:  MOVFF  42C,FEC
06DF4:  MOVF   FED,F
06DF6:  MOVF   FED,F
06DF8:  MOVF   FED,F
06DFA:  RETURN 0
06DFC:  MOVF   FE9,W
06DFE:  MOVLB  4
06E00:  MOVWF  x19
06E02:  MOVLW  3B
06E04:  MOVWF  x20
06E06:  MOVLW  9A
06E08:  MOVWF  x1F
06E0A:  MOVLW  CA
06E0C:  MOVWF  x1E
06E0E:  CLRF   x1D
06E10:  MOVLW  0A
06E12:  MOVWF  x1B
06E14:  MOVLB  0
06E16:  BSF    FD8.1
06E18:  MOVLW  04
06E1A:  MOVWF  FEA
06E1C:  MOVLW  15
06E1E:  MOVWF  FE9
06E20:  MOVFF  418,424
06E24:  MOVFF  417,423
06E28:  MOVFF  416,422
06E2C:  MOVFF  415,421
06E30:  MOVFF  420,428
06E34:  MOVFF  41F,427
06E38:  MOVFF  41E,426
06E3C:  MOVFF  41D,425
06E40:  CALL   6D22
06E44:  MOVF   01,W
06E46:  MOVF   00,F
06E48:  BTFSS  FD8.2
06E4A:  GOTO   6EA2
06E4E:  MOVLB  4
06E50:  MOVF   x1B,W
06E52:  XORLW  01
06E54:  BTFSS  FD8.2
06E56:  BRA    6E5E
06E58:  MOVLB  0
06E5A:  GOTO   6EA2
06E5E:  MOVF   x19,W
06E60:  BTFSS  FD8.2
06E62:  BRA    6E6A
06E64:  MOVLB  0
06E66:  GOTO   6EA8
06E6A:  ANDLW  0F
06E6C:  SUBWF  x1B,W
06E6E:  BTFSS  FD8.2
06E70:  BRA    6E78
06E72:  MOVLB  0
06E74:  GOTO   6E84
06E78:  BTFSS  FD8.0
06E7A:  BRA    6E82
06E7C:  MOVLB  0
06E7E:  GOTO   6EB4
06E82:  MOVLB  0
06E84:  MOVLB  4
06E86:  BTFSS  x19.7
06E88:  BRA    6E90
06E8A:  MOVLB  0
06E8C:  GOTO   6EB4
06E90:  BTFSS  x19.6
06E92:  BRA    6E9A
06E94:  MOVLB  0
06E96:  GOTO   6EA8
06E9A:  MOVLW  20
06E9C:  MOVLB  0
06E9E:  GOTO   6EAA
06EA2:  MOVLB  4
06EA4:  CLRF   x19
06EA6:  MOVLB  0
06EA8:  MOVLW  30
06EAA:  ADDWF  00,F
06EAC:  MOVFF  00,849
06EB0:  CALL   16C2
06EB4:  BCF    FD8.1
06EB6:  MOVFF  420,424
06EBA:  MOVFF  41F,423
06EBE:  MOVFF  41E,422
06EC2:  MOVFF  41D,421
06EC6:  MOVLB  4
06EC8:  CLRF   x28
06ECA:  CLRF   x27
06ECC:  CLRF   x26
06ECE:  MOVLW  0A
06ED0:  MOVWF  x25
06ED2:  MOVLB  0
06ED4:  CALL   6D22
06ED8:  MOVFF  03,420
06EDC:  MOVFF  02,41F
06EE0:  MOVFF  01,41E
06EE4:  MOVFF  00,41D
06EE8:  MOVLB  4
06EEA:  DECFSZ x1B,F
06EEC:  BRA    6EF2
06EEE:  BRA    6EF8
06EF0:  MOVLB  0
06EF2:  MOVLB  0
06EF4:  GOTO   6E16
06EF8:  MOVLB  0
06EFA:  RETURN 0
*
07486:  MOVF   FE9,W
07488:  MOVLB  4
0748A:  MOVWF  x19
0748C:  BTFSC  x18.7
0748E:  BRA    7496
07490:  MOVLB  0
07492:  GOTO   74B2
07496:  DECF   x19,F
07498:  BSF    x19.5
0749A:  COMF   x15,F
0749C:  COMF   x16,F
0749E:  COMF   x17,F
074A0:  COMF   x18,F
074A2:  INCF   x15,F
074A4:  BTFSC  FD8.2
074A6:  INCF   x16,F
074A8:  BTFSC  FD8.2
074AA:  INCF   x17,F
074AC:  BTFSC  FD8.2
074AE:  INCF   x18,F
074B0:  MOVLB  0
074B2:  MOVLW  3B
074B4:  MOVLB  4
074B6:  MOVWF  x20
074B8:  MOVLW  9A
074BA:  MOVWF  x1F
074BC:  MOVLW  CA
074BE:  MOVWF  x1E
074C0:  CLRF   x1D
074C2:  MOVLW  0A
074C4:  MOVWF  x1B
074C6:  MOVLB  0
074C8:  BSF    FD8.1
074CA:  MOVLW  04
074CC:  MOVWF  FEA
074CE:  MOVLW  15
074D0:  MOVWF  FE9
074D2:  MOVFF  418,424
074D6:  MOVFF  417,423
074DA:  MOVFF  416,422
074DE:  MOVFF  415,421
074E2:  MOVFF  420,428
074E6:  MOVFF  41F,427
074EA:  MOVFF  41E,426
074EE:  MOVFF  41D,425
074F2:  CALL   6D22
074F6:  MOVF   01,W
074F8:  MOVF   00,F
074FA:  BTFSS  FD8.2
074FC:  GOTO   7554
07500:  MOVLB  4
07502:  MOVF   x1B,W
07504:  XORLW  01
07506:  BTFSS  FD8.2
07508:  BRA    7510
0750A:  MOVLB  0
0750C:  GOTO   7554
07510:  MOVF   x19,W
07512:  BTFSS  FD8.2
07514:  BRA    751C
07516:  MOVLB  0
07518:  GOTO   755C
0751C:  ANDLW  0F
0751E:  SUBWF  x1B,W
07520:  BTFSS  FD8.2
07522:  BRA    752A
07524:  MOVLB  0
07526:  GOTO   7536
0752A:  BTFSS  FD8.0
0752C:  BRA    7534
0752E:  MOVLB  0
07530:  GOTO   75BA
07534:  MOVLB  0
07536:  MOVLB  4
07538:  BTFSS  x19.7
0753A:  BRA    7542
0753C:  MOVLB  0
0753E:  GOTO   75BA
07542:  BTFSS  x19.6
07544:  BRA    754C
07546:  MOVLB  0
07548:  GOTO   755C
0754C:  MOVLW  20
0754E:  MOVLB  0
07550:  GOTO   75B0
07554:  MOVLW  20
07556:  MOVLB  4
07558:  ANDWF  x19,F
0755A:  MOVLB  0
0755C:  MOVLB  4
0755E:  BTFSC  x19.5
07560:  BRA    7568
07562:  MOVLB  0
07564:  GOTO   7584
07568:  BCF    x19.5
0756A:  MOVF   00,W
0756C:  MOVWF  x19
0756E:  MOVLW  2D
07570:  MOVLB  8
07572:  MOVWF  x49
07574:  MOVLB  0
07576:  CALL   16C2
0757A:  MOVLB  4
0757C:  MOVF   x19,W
0757E:  MOVWF  00
07580:  CLRF   x19
07582:  MOVLB  0
07584:  MOVLW  30
07586:  MOVLB  4
07588:  BTFSC  x19.5
0758A:  BRA    7592
0758C:  MOVLB  0
0758E:  GOTO   75B0
07592:  BCF    x19.5
07594:  MOVF   00,W
07596:  MOVWF  x19
07598:  MOVLW  2D
0759A:  MOVLB  8
0759C:  MOVWF  x49
0759E:  MOVLB  0
075A0:  CALL   16C2
075A4:  MOVLB  4
075A6:  MOVF   x19,W
075A8:  MOVWF  00
075AA:  CLRF   x19
075AC:  MOVLW  30
075AE:  MOVLB  0
075B0:  ADDWF  00,F
075B2:  MOVFF  00,849
075B6:  CALL   16C2
075BA:  BCF    FD8.1
075BC:  MOVFF  420,424
075C0:  MOVFF  41F,423
075C4:  MOVFF  41E,422
075C8:  MOVFF  41D,421
075CC:  MOVLB  4
075CE:  CLRF   x28
075D0:  CLRF   x27
075D2:  CLRF   x26
075D4:  MOVLW  0A
075D6:  MOVWF  x25
075D8:  MOVLB  0
075DA:  CALL   6D22
075DE:  MOVFF  03,420
075E2:  MOVFF  02,41F
075E6:  MOVFF  01,41E
075EA:  MOVFF  00,41D
075EE:  MOVLB  4
075F0:  DECFSZ x1B,F
075F2:  BRA    75F8
075F4:  BRA    75FE
075F6:  MOVLB  0
075F8:  MOVLB  0
075FA:  GOTO   74C8
075FE:  MOVLB  0
07600:  GOTO   82AA (RETURN)
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01694:  MOVLW  08
01696:  MOVWF  FEA
01698:  MOVLW  44
0169A:  MOVWF  FE9
0169C:  MOVF   FEF,W
0169E:  BTFSC  FD8.2
016A0:  GOTO   16C0
016A4:  MOVLW  05
016A6:  MOVWF  01
016A8:  CLRF   00
016AA:  DECFSZ 00,F
016AC:  BRA    16AA
016AE:  DECFSZ 01,F
016B0:  BRA    16A8
016B2:  MOVLW  2E
016B4:  MOVWF  00
016B6:  DECFSZ 00,F
016B8:  BRA    16B6
016BA:  BRA    16BC
016BC:  DECFSZ FEF,F
016BE:  BRA    16A4
016C0:  RETURN 0
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
005B4:  BTFSS  FA6.5
005B6:  GOTO   05B4
005BA:  MOVLB  F
005BC:  MOVF   x2F,W
005BE:  MOVWF  1B
005C0:  MOVLB  0
005C2:  MOVLB  F
005C4:  MOVF   x2A,W
005C6:  MOVWF  01
005C8:  BTFSC  1B.1
005CA:  BRA    05D2
005CC:  MOVLB  0
005CE:  GOTO   05D6
005D2:  BCF    x2F.4
005D4:  BSF    x2F.4
005D6:  MOVLB  0
005D8:  GOTO   0612 (RETURN)
*
03FB8:  BTFSS  FA6.4
03FBA:  GOTO   3FB8
03FBE:  MOVLB  F
03FC0:  MOVWF  x29
03FC2:  MOVLB  0
03FC4:  GOTO   3FFA (RETURN)
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
*
016C2:  BCF    F93.6
016C4:  BCF    F8A.6
016C6:  MOVLW  08
016C8:  MOVWF  01
016CA:  BRA    16CC
016CC:  NOP   
016CE:  BSF    01.7
016D0:  GOTO   16F8
016D4:  BCF    01.7
016D6:  MOVLB  8
016D8:  RRCF   x49,F
016DA:  MOVLB  0
016DC:  BTFSC  FD8.0
016DE:  BSF    F8A.6
016E0:  BTFSS  FD8.0
016E2:  BCF    F8A.6
016E4:  BSF    01.6
016E6:  GOTO   16F8
016EA:  BCF    01.6
016EC:  DECFSZ 01,F
016EE:  GOTO   16D6
016F2:  BRA    16F4
016F4:  NOP   
016F6:  BSF    F8A.6
016F8:  MOVLW  84
016FA:  MOVWF  FE9
016FC:  DECFSZ FE9,F
016FE:  GOTO   16FC
01702:  BRA    1704
01704:  NOP   
01706:  BTFSC  01.7
01708:  GOTO   16D4
0170C:  BTFSC  01.6
0170E:  GOTO   16EA
01712:  RETURN 0
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
01D08:  MOVF   FC9,W
01D0A:  MOVFF  866,FC9
01D0E:  RRCF   FC7,W
01D10:  BTFSS  FD8.0
01D12:  GOTO   1D0E
01D16:  MOVFF  FC9,00
01D1A:  RETURN 0
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
*
01858:  MOVLB  7
0185A:  MOVF   xF7,W
0185C:  SUBLW  10
0185E:  BTFSS  FD8.2
01860:  BRA    1868
01862:  MOVLB  0
01864:  GOTO   1882
01868:  MOVWF  xF9
0186A:  MOVLB  0
0186C:  MOVLB  7
0186E:  RLCF   xF5,F
01870:  RLCF   xF6,F
01872:  DECFSZ xF9,F
01874:  BRA    187A
01876:  BRA    1880
01878:  MOVLB  0
0187A:  MOVLB  0
0187C:  GOTO   186C
01880:  MOVLB  0
01882:  BSF    F93.4
01884:  BCF    F93.5
01886:  BCF    F93.2
01888:  BCF    F8A.2
0188A:  MOVFF  7F7,7F9
0188E:  MOVLB  7
01890:  BTFSS  xF6.7
01892:  BCF    F8A.5
01894:  BTFSC  xF6.7
01896:  BSF    F8A.5
01898:  RLCF   xF5,F
0189A:  RLCF   xF6,F
0189C:  BSF    F8A.2
0189E:  RLCF   01,F
018A0:  RLCF   02,F
018A2:  BTFSS  F81.4
018A4:  BCF    01.0
018A6:  BTFSC  F81.4
018A8:  BSF    01.0
018AA:  BCF    F8A.2
018AC:  DECFSZ xF9,F
018AE:  BRA    18B4
018B0:  BRA    18BA
018B2:  MOVLB  0
018B4:  MOVLB  0
018B6:  GOTO   188E
018BA:  MOVLB  0
018BC:  RETURN 0
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
*
07694:  MOVLW  00
07696:  BTFSC  FEF.0
07698:  MOVLW  01
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... 
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/smf_function.h"
.................... #ifndef SMF_FUNCTION_H
.................... #define SMF_FUNCTION_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... 
.................... 
.................... 
.................... void smf_write(void);
.................... 
.................... 
.................... void smf_read(void);
.................... 
.................... 
.................... void smf_erase(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // レベル3: デバイスドライバヘッダー（必要に応じて）
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル4: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル5: アプリケーションヘッダー
.................... #include "mmj_cigs_device.h"
.................... #ifndef MMJ_CIGS_DEVICE_H
.................... #define MMJ_CIGS_DEVICE_H
.................... 
.................... // Instances of device drivers
.................... // AD7490: ADC
.................... // MCP4901: DAC
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... #include "ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
017E8:  MOVLB  7
017EA:  BCF    xF6.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
017EC:  BCF    xF6.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
017EE:  BCF    xF6.2
....................     cmd.fields.reserved3 = 0;
017F0:  BCF    xF6.3
....................     cmd.fields.coding = 1; // Two's complement
017F2:  BSF    xF6.4
....................     cmd.fields.range = 1; // Normal mode
017F4:  BSF    xF6.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
017F6:  BCF    xF6.6
....................     cmd.fields.shadow = 0; // Direct access
017F8:  BCF    xF6.7
....................     cmd.fields.pm0 = AD7490_PM_AUTO_STANDBY & 0b00000001; // Power mode bits
017FA:  BSF    xF7.0
....................     cmd.fields.pm1 = (AD7490_PM_AUTO_STANDBY >> 1) & 0b00000001; // Power mode bits
017FC:  BSF    xF7.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
017FE:  MOVF   xF5,W
01800:  ANDLW  01
01802:  MOVWF  01
01804:  BCF    xF7.2
01806:  BTFSC  01.0
01808:  BSF    xF7.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
0180A:  BCF    FD8.0
0180C:  RRCF   xF5,W
0180E:  ANDLW  01
01810:  MOVWF  01
01812:  BCF    xF7.3
01814:  BTFSC  01.0
01816:  BSF    xF7.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
01818:  RRCF   xF5,W
0181A:  MOVWF  00
0181C:  RRCF   00,F
0181E:  MOVLW  3F
01820:  ANDWF  00,F
01822:  MOVF   00,W
01824:  ANDLW  01
01826:  MOVWF  01
01828:  BCF    xF7.4
0182A:  BTFSC  01.0
0182C:  BSF    xF7.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
0182E:  RRCF   xF5,W
01830:  MOVWF  00
01832:  RRCF   00,F
01834:  RRCF   00,F
01836:  MOVLW  1F
01838:  ANDWF  00,F
0183A:  MOVF   00,W
0183C:  ANDLW  01
0183E:  MOVWF  01
01840:  BCF    xF7.5
01842:  BTFSC  01.0
01844:  BSF    xF7.5
....................     cmd.fields.seq = 0; // Random mode
01846:  BCF    xF7.6
....................     cmd.fields.write = 1; // Read operation
01848:  BSF    xF7.7
.................... 
.................... 
....................     return cmd.value;
0184A:  MOVF   xF6,W
0184C:  MOVWF  01
0184E:  MOVF   xF7,W
01850:  MOVWF  02
01852:  MOVLB  0
01854:  GOTO   18C6 (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... #include "mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
019DA:  MOVLB  7
019DC:  BCF    xF3.7
....................    cmd.fields.buffer = 1; // Buffer used
019DE:  BSF    xF3.6
....................    cmd.fields.gain = 1; // Gain 1x
019E0:  BSF    xF3.5
....................    cmd.fields.shutdown = 1; // Normal operation
019E2:  BSF    xF3.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
019E4:  RRCF   xF1,W
019E6:  MOVWF  xF5
019E8:  RRCF   xF0,W
019EA:  MOVWF  xF4
019EC:  RRCF   xF5,F
019EE:  RRCF   xF4,F
019F0:  RRCF   xF5,F
019F2:  RRCF   xF4,F
019F4:  RRCF   xF5,F
019F6:  RRCF   xF4,F
019F8:  RRCF   xF5,F
019FA:  RRCF   xF4,F
019FC:  RRCF   xF5,F
019FE:  RRCF   xF4,F
01A00:  RRCF   xF5,F
01A02:  RRCF   xF4,F
01A04:  MOVLW  01
01A06:  ANDWF  xF5,F
01A08:  MOVF   xF4,W
01A0A:  ANDLW  01
01A0C:  MOVWF  00
01A0E:  CLRF   03
01A10:  MOVF   00,W
01A12:  MOVWF  01
01A14:  BCF    xF3.3
01A16:  BTFSC  01.0
01A18:  BSF    xF3.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
01A1A:  RRCF   xF1,W
01A1C:  MOVWF  xF5
01A1E:  RRCF   xF0,W
01A20:  MOVWF  xF4
01A22:  RRCF   xF5,F
01A24:  RRCF   xF4,F
01A26:  RRCF   xF5,F
01A28:  RRCF   xF4,F
01A2A:  RRCF   xF5,F
01A2C:  RRCF   xF4,F
01A2E:  RRCF   xF5,F
01A30:  RRCF   xF4,F
01A32:  RRCF   xF5,F
01A34:  RRCF   xF4,F
01A36:  MOVLW  03
01A38:  ANDWF  xF5,F
01A3A:  MOVF   xF4,W
01A3C:  ANDLW  01
01A3E:  MOVWF  00
01A40:  CLRF   03
01A42:  MOVF   00,W
01A44:  MOVWF  01
01A46:  BCF    xF3.2
01A48:  BTFSC  01.0
01A4A:  BSF    xF3.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
01A4C:  RRCF   xF1,W
01A4E:  MOVWF  xF5
01A50:  RRCF   xF0,W
01A52:  MOVWF  xF4
01A54:  RRCF   xF5,F
01A56:  RRCF   xF4,F
01A58:  RRCF   xF5,F
01A5A:  RRCF   xF4,F
01A5C:  RRCF   xF5,F
01A5E:  RRCF   xF4,F
01A60:  RRCF   xF5,F
01A62:  RRCF   xF4,F
01A64:  MOVLW  07
01A66:  ANDWF  xF5,F
01A68:  MOVF   xF4,W
01A6A:  ANDLW  01
01A6C:  MOVWF  00
01A6E:  CLRF   03
01A70:  MOVF   00,W
01A72:  MOVWF  01
01A74:  BCF    xF3.1
01A76:  BTFSC  01.0
01A78:  BSF    xF3.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
01A7A:  RRCF   xF1,W
01A7C:  MOVWF  xF5
01A7E:  RRCF   xF0,W
01A80:  MOVWF  xF4
01A82:  RRCF   xF5,F
01A84:  RRCF   xF4,F
01A86:  RRCF   xF5,F
01A88:  RRCF   xF4,F
01A8A:  RRCF   xF5,F
01A8C:  RRCF   xF4,F
01A8E:  MOVLW  0F
01A90:  ANDWF  xF5,F
01A92:  MOVF   xF4,W
01A94:  ANDLW  01
01A96:  MOVWF  00
01A98:  CLRF   03
01A9A:  MOVF   00,W
01A9C:  MOVWF  01
01A9E:  BCF    xF3.0
01AA0:  BTFSC  01.0
01AA2:  BSF    xF3.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
01AA4:  RRCF   xF1,W
01AA6:  MOVWF  xF5
01AA8:  RRCF   xF0,W
01AAA:  MOVWF  xF4
01AAC:  RRCF   xF5,F
01AAE:  RRCF   xF4,F
01AB0:  RRCF   xF5,F
01AB2:  RRCF   xF4,F
01AB4:  MOVLW  1F
01AB6:  ANDWF  xF5,F
01AB8:  MOVF   xF4,W
01ABA:  ANDLW  01
01ABC:  MOVWF  00
01ABE:  CLRF   03
01AC0:  MOVF   00,W
01AC2:  MOVWF  01
01AC4:  BCF    xF2.7
01AC6:  BTFSC  01.0
01AC8:  BSF    xF2.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
01ACA:  RRCF   xF1,W
01ACC:  MOVWF  xF5
01ACE:  RRCF   xF0,W
01AD0:  MOVWF  xF4
01AD2:  RRCF   xF5,F
01AD4:  RRCF   xF4,F
01AD6:  MOVLW  3F
01AD8:  ANDWF  xF5,F
01ADA:  MOVF   xF4,W
01ADC:  ANDLW  01
01ADE:  MOVWF  00
01AE0:  CLRF   03
01AE2:  MOVF   00,W
01AE4:  MOVWF  01
01AE6:  BCF    xF2.6
01AE8:  BTFSC  01.0
01AEA:  BSF    xF2.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
01AEC:  BCF    FD8.0
01AEE:  RRCF   xF1,W
01AF0:  MOVWF  xF5
01AF2:  RRCF   xF0,W
01AF4:  MOVWF  xF4
01AF6:  MOVF   xF4,W
01AF8:  ANDLW  01
01AFA:  MOVWF  00
01AFC:  CLRF   03
01AFE:  MOVF   00,W
01B00:  MOVWF  01
01B02:  BCF    xF2.5
01B04:  BTFSC  01.0
01B06:  BSF    xF2.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
01B08:  MOVF   xF0,W
01B0A:  ANDLW  01
01B0C:  MOVWF  00
01B0E:  CLRF   03
01B10:  MOVF   00,W
01B12:  MOVWF  01
01B14:  BCF    xF2.4
01B16:  BTFSC  01.0
01B18:  BSF    xF2.4
....................    cmd.fields.reserved = 0; // Reserved bits
01B1A:  BCF    xF2.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
01B1C:  BCF    xF2.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
01B1E:  BCF    xF2.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
01B20:  BCF    xF2.0
.................... 
....................    return cmd.value;
01B22:  MOVF   xF2,W
01B24:  MOVWF  01
01B26:  MOVF   xF3,W
01B28:  MOVWF  02
01B2A:  MOVLB  0
01B2C:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02BA0:  MOVLB  8
02BA2:  MOVF   x44,W
02BA4:  XORLW  00
02BA6:  MOVLB  0
02BA8:  BTFSC  FD8.2
02BAA:  GOTO   2BBA
02BAE:  XORLW  01
02BB0:  BTFSC  FD8.2
02BB2:  GOTO   2C1A
02BB6:  GOTO   2C7A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02BBA:  MOVLB  8
02BBC:  CLRF   x4D
02BBE:  CLRF   x4C
02BC0:  MOVLB  0
02BC2:  MOVLB  8
02BC4:  MOVF   x4D,W
02BC6:  SUBWF  x4B,W
02BC8:  BTFSC  FD8.0
02BCA:  BRA    2BD2
02BCC:  MOVLB  0
02BCE:  GOTO   2C16
02BD2:  MOVLB  0
02BD4:  BTFSS  FD8.2
02BD6:  GOTO   2BEC
02BDA:  MOVLB  8
02BDC:  MOVF   x4A,W
02BDE:  SUBWF  x4C,W
02BE0:  BTFSS  FD8.0
02BE2:  BRA    2BEA
02BE4:  MOVLB  0
02BE6:  GOTO   2C16
02BEA:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
02BEC:  MOVLB  8
02BEE:  MOVF   x48,W
02BF0:  ADDWF  x4C,W
02BF2:  MOVWF  FE9
02BF4:  MOVF   x49,W
02BF6:  ADDWFC x4D,W
02BF8:  MOVWF  FEA
02BFA:  MOVFF  FEF,850
02BFE:  MOVFF  850,866
02C02:  MOVLB  0
02C04:  CALL   1D08
02C08:  MOVLB  8
02C0A:  INCF   x4C,F
02C0C:  BTFSC  FD8.2
02C0E:  INCF   x4D,F
02C10:  MOVLB  0
02C12:  GOTO   2BC2
....................          break;
02C16:  GOTO   2C7E
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02C1A:  MOVLB  8
02C1C:  CLRF   x4F
02C1E:  CLRF   x4E
02C20:  MOVLB  0
02C22:  MOVLB  8
02C24:  MOVF   x4F,W
02C26:  SUBWF  x4B,W
02C28:  BTFSC  FD8.0
02C2A:  BRA    2C32
02C2C:  MOVLB  0
02C2E:  GOTO   2C76
02C32:  MOVLB  0
02C34:  BTFSS  FD8.2
02C36:  GOTO   2C4C
02C3A:  MOVLB  8
02C3C:  MOVF   x4A,W
02C3E:  SUBWF  x4E,W
02C40:  BTFSS  FD8.0
02C42:  BRA    2C4A
02C44:  MOVLB  0
02C46:  GOTO   2C76
02C4A:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
02C4C:  MOVLB  8
02C4E:  MOVF   x48,W
02C50:  ADDWF  x4E,W
02C52:  MOVWF  FE9
02C54:  MOVF   x49,W
02C56:  ADDWFC x4F,W
02C58:  MOVWF  FEA
02C5A:  MOVFF  FEF,850
02C5E:  MOVFF  850,866
02C62:  MOVLB  0
02C64:  CALL   1D08
02C68:  MOVLB  8
02C6A:  INCF   x4E,F
02C6C:  BTFSC  FD8.2
02C6E:  INCF   x4F,F
02C70:  MOVLB  0
02C72:  GOTO   2C22
....................          break;
02C76:  GOTO   2C7E
....................          
....................       default:
....................          break;
02C7A:  GOTO   2C7E
....................    }
....................    return;
02C7E:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
01D1C:  MOVLB  8
01D1E:  MOVF   x4A,W
01D20:  XORLW  00
01D22:  MOVLB  0
01D24:  BTFSC  FD8.2
01D26:  GOTO   1D36
01D2A:  XORLW  01
01D2C:  BTFSC  FD8.2
01D2E:  GOTO   1E32
01D32:  GOTO   1F2E
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01D36:  MOVLB  8
01D38:  CLRF   x59
01D3A:  CLRF   x58
01D3C:  MOVLB  0
01D3E:  MOVLB  8
01D40:  MOVF   x59,W
01D42:  SUBWF  x51,W
01D44:  BTFSC  FD8.0
01D46:  BRA    1D4E
01D48:  MOVLB  0
01D4A:  GOTO   1D92
01D4E:  MOVLB  0
01D50:  BTFSS  FD8.2
01D52:  GOTO   1D68
01D56:  MOVLB  8
01D58:  MOVF   x50,W
01D5A:  SUBWF  x58,W
01D5C:  BTFSS  FD8.0
01D5E:  BRA    1D66
01D60:  MOVLB  0
01D62:  GOTO   1D92
01D66:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
01D68:  MOVLB  8
01D6A:  MOVF   x4E,W
01D6C:  ADDWF  x58,W
01D6E:  MOVWF  FE9
01D70:  MOVF   x4F,W
01D72:  ADDWFC x59,W
01D74:  MOVWF  FEA
01D76:  MOVFF  FEF,864
01D7A:  MOVFF  864,866
01D7E:  MOVLB  0
01D80:  CALL   1D08
01D84:  MOVLB  8
01D86:  INCF   x58,F
01D88:  BTFSC  FD8.2
01D8A:  INCF   x59,F
01D8C:  MOVLB  0
01D8E:  GOTO   1D3E
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01D92:  MOVLB  8
01D94:  CLRF   x5D
01D96:  CLRF   x5C
01D98:  CLRF   x5B
01D9A:  CLRF   x5A
01D9C:  MOVLB  0
01D9E:  MOVLB  8
01DA0:  MOVF   x5D,W
01DA2:  SUBWF  x57,W
01DA4:  BTFSC  FD8.0
01DA6:  BRA    1DAE
01DA8:  MOVLB  0
01DAA:  GOTO   1E2E
01DAE:  MOVLB  0
01DB0:  BTFSS  FD8.2
01DB2:  GOTO   1DF8
01DB6:  MOVLB  8
01DB8:  MOVF   x5C,W
01DBA:  SUBWF  x56,W
01DBC:  BTFSC  FD8.0
01DBE:  BRA    1DC6
01DC0:  MOVLB  0
01DC2:  GOTO   1E2E
01DC6:  MOVLB  0
01DC8:  BTFSS  FD8.2
01DCA:  GOTO   1DF8
01DCE:  MOVLB  8
01DD0:  MOVF   x5B,W
01DD2:  SUBWF  x55,W
01DD4:  BTFSC  FD8.0
01DD6:  BRA    1DDE
01DD8:  MOVLB  0
01DDA:  GOTO   1E2E
01DDE:  MOVLB  0
01DE0:  BTFSS  FD8.2
01DE2:  GOTO   1DF8
01DE6:  MOVLB  8
01DE8:  MOVF   x54,W
01DEA:  SUBWF  x5A,W
01DEC:  BTFSS  FD8.0
01DEE:  BRA    1DF6
01DF0:  MOVLB  0
01DF2:  GOTO   1E2E
01DF6:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
01DF8:  MOVLB  8
01DFA:  MOVF   x52,W
01DFC:  ADDWF  x5A,W
01DFE:  MOVWF  FE9
01E00:  MOVF   x53,W
01E02:  ADDWFC x5B,W
01E04:  MOVWF  FEA
01E06:  MOVLW  01
01E08:  MOVWF  x66
01E0A:  MOVLB  0
01E0C:  CALL   1D08
01E10:  MOVF   01,W
01E12:  MOVFF  00,FEF
01E16:  MOVLW  01
01E18:  MOVLB  8
01E1A:  ADDWF  x5A,F
01E1C:  BTFSC  FD8.0
01E1E:  INCF   x5B,F
01E20:  BTFSC  FD8.2
01E22:  INCF   x5C,F
01E24:  BTFSC  FD8.2
01E26:  INCF   x5D,F
01E28:  MOVLB  0
01E2A:  GOTO   1D9E
....................          break;
01E2E:  GOTO   1F32
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
01E32:  MOVLB  8
01E34:  CLRF   x5F
01E36:  CLRF   x5E
01E38:  MOVLB  0
01E3A:  MOVLB  8
01E3C:  MOVF   x5F,W
01E3E:  SUBWF  x51,W
01E40:  BTFSC  FD8.0
01E42:  BRA    1E4A
01E44:  MOVLB  0
01E46:  GOTO   1E8E
01E4A:  MOVLB  0
01E4C:  BTFSS  FD8.2
01E4E:  GOTO   1E64
01E52:  MOVLB  8
01E54:  MOVF   x50,W
01E56:  SUBWF  x5E,W
01E58:  BTFSS  FD8.0
01E5A:  BRA    1E62
01E5C:  MOVLB  0
01E5E:  GOTO   1E8E
01E62:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
01E64:  MOVLB  8
01E66:  MOVF   x4E,W
01E68:  ADDWF  x5E,W
01E6A:  MOVWF  FE9
01E6C:  MOVF   x4F,W
01E6E:  ADDWFC x5F,W
01E70:  MOVWF  FEA
01E72:  MOVFF  FEF,864
01E76:  MOVFF  864,866
01E7A:  MOVLB  0
01E7C:  CALL   1D08
01E80:  MOVLB  8
01E82:  INCF   x5E,F
01E84:  BTFSC  FD8.2
01E86:  INCF   x5F,F
01E88:  MOVLB  0
01E8A:  GOTO   1E3A
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
01E8E:  MOVLB  8
01E90:  CLRF   x63
01E92:  CLRF   x62
01E94:  CLRF   x61
01E96:  CLRF   x60
01E98:  MOVLB  0
01E9A:  MOVLB  8
01E9C:  MOVF   x63,W
01E9E:  SUBWF  x57,W
01EA0:  BTFSC  FD8.0
01EA2:  BRA    1EAA
01EA4:  MOVLB  0
01EA6:  GOTO   1F2A
01EAA:  MOVLB  0
01EAC:  BTFSS  FD8.2
01EAE:  GOTO   1EF4
01EB2:  MOVLB  8
01EB4:  MOVF   x62,W
01EB6:  SUBWF  x56,W
01EB8:  BTFSC  FD8.0
01EBA:  BRA    1EC2
01EBC:  MOVLB  0
01EBE:  GOTO   1F2A
01EC2:  MOVLB  0
01EC4:  BTFSS  FD8.2
01EC6:  GOTO   1EF4
01ECA:  MOVLB  8
01ECC:  MOVF   x61,W
01ECE:  SUBWF  x55,W
01ED0:  BTFSC  FD8.0
01ED2:  BRA    1EDA
01ED4:  MOVLB  0
01ED6:  GOTO   1F2A
01EDA:  MOVLB  0
01EDC:  BTFSS  FD8.2
01EDE:  GOTO   1EF4
01EE2:  MOVLB  8
01EE4:  MOVF   x54,W
01EE6:  SUBWF  x60,W
01EE8:  BTFSS  FD8.0
01EEA:  BRA    1EF2
01EEC:  MOVLB  0
01EEE:  GOTO   1F2A
01EF2:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
01EF4:  MOVLB  8
01EF6:  MOVF   x52,W
01EF8:  ADDWF  x60,W
01EFA:  MOVWF  FE9
01EFC:  MOVF   x53,W
01EFE:  ADDWFC x61,W
01F00:  MOVWF  FEA
01F02:  MOVLW  01
01F04:  MOVWF  x66
01F06:  MOVLB  0
01F08:  CALL   1D08
01F0C:  MOVF   01,W
01F0E:  MOVFF  00,FEF
01F12:  MOVLW  01
01F14:  MOVLB  8
01F16:  ADDWF  x60,F
01F18:  BTFSC  FD8.0
01F1A:  INCF   x61,F
01F1C:  BTFSC  FD8.2
01F1E:  INCF   x62,F
01F20:  BTFSC  FD8.2
01F22:  INCF   x63,F
01F24:  MOVLB  0
01F26:  GOTO   1E9A
....................          break;
01F2A:  GOTO   1F32
....................    
....................          
....................       default:
....................          break;
01F2E:  GOTO   1F32
....................    }
....................    return;
01F32:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
02C80:  MOVLB  8
02C82:  MOVF   x44,W
02C84:  XORLW  00
02C86:  MOVLB  0
02C88:  BTFSC  FD8.2
02C8A:  GOTO   2C9A
02C8E:  XORLW  01
02C90:  BTFSC  FD8.2
02C92:  GOTO   2D38
02C96:  GOTO   2DD6
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02C9A:  MOVLB  8
02C9C:  CLRF   x4F
02C9E:  MOVLB  0
02CA0:  MOVLB  8
02CA2:  MOVF   x4A,W
02CA4:  SUBWF  x4F,W
02CA6:  BTFSS  FD8.0
02CA8:  BRA    2CB0
02CAA:  MOVLB  0
02CAC:  GOTO   2CD8
02CB0:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
02CB2:  MOVLB  8
02CB4:  MOVF   x4F,W
02CB6:  ADDWF  x48,W
02CB8:  MOVWF  FE9
02CBA:  MOVLW  00
02CBC:  ADDWFC x49,W
02CBE:  MOVWF  FEA
02CC0:  MOVFF  FEF,855
02CC4:  MOVFF  855,866
02CC8:  MOVLB  0
02CCA:  CALL   1D08
02CCE:  MOVLB  8
02CD0:  INCF   x4F,F
02CD2:  MOVLB  0
02CD4:  GOTO   2CA0
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02CD8:  MOVLB  8
02CDA:  CLRF   x51
02CDC:  CLRF   x50
02CDE:  MOVLB  0
02CE0:  MOVLB  8
02CE2:  MOVF   x51,W
02CE4:  SUBWF  x4E,W
02CE6:  BTFSC  FD8.0
02CE8:  BRA    2CF0
02CEA:  MOVLB  0
02CEC:  GOTO   2D34
02CF0:  MOVLB  0
02CF2:  BTFSS  FD8.2
02CF4:  GOTO   2D0A
02CF8:  MOVLB  8
02CFA:  MOVF   x4D,W
02CFC:  SUBWF  x50,W
02CFE:  BTFSS  FD8.0
02D00:  BRA    2D08
02D02:  MOVLB  0
02D04:  GOTO   2D34
02D08:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
02D0A:  MOVLB  8
02D0C:  MOVF   x4B,W
02D0E:  ADDWF  x50,W
02D10:  MOVWF  FE9
02D12:  MOVF   x4C,W
02D14:  ADDWFC x51,W
02D16:  MOVWF  FEA
02D18:  MOVFF  FEF,855
02D1C:  MOVFF  855,866
02D20:  MOVLB  0
02D22:  CALL   1D08
02D26:  MOVLB  8
02D28:  INCF   x50,F
02D2A:  BTFSC  FD8.2
02D2C:  INCF   x51,F
02D2E:  MOVLB  0
02D30:  GOTO   2CE0
....................          break;
02D34:  GOTO   2DDA
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
02D38:  MOVLB  8
02D3A:  CLRF   x52
02D3C:  MOVLB  0
02D3E:  MOVLB  8
02D40:  MOVF   x4A,W
02D42:  SUBWF  x52,W
02D44:  BTFSS  FD8.0
02D46:  BRA    2D4E
02D48:  MOVLB  0
02D4A:  GOTO   2D76
02D4E:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
02D50:  MOVLB  8
02D52:  MOVF   x52,W
02D54:  ADDWF  x48,W
02D56:  MOVWF  FE9
02D58:  MOVLW  00
02D5A:  ADDWFC x49,W
02D5C:  MOVWF  FEA
02D5E:  MOVFF  FEF,855
02D62:  MOVFF  855,866
02D66:  MOVLB  0
02D68:  CALL   1D08
02D6C:  MOVLB  8
02D6E:  INCF   x52,F
02D70:  MOVLB  0
02D72:  GOTO   2D3E
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
02D76:  MOVLB  8
02D78:  CLRF   x54
02D7A:  CLRF   x53
02D7C:  MOVLB  0
02D7E:  MOVLB  8
02D80:  MOVF   x54,W
02D82:  SUBWF  x4E,W
02D84:  BTFSC  FD8.0
02D86:  BRA    2D8E
02D88:  MOVLB  0
02D8A:  GOTO   2DD2
02D8E:  MOVLB  0
02D90:  BTFSS  FD8.2
02D92:  GOTO   2DA8
02D96:  MOVLB  8
02D98:  MOVF   x4D,W
02D9A:  SUBWF  x53,W
02D9C:  BTFSS  FD8.0
02D9E:  BRA    2DA6
02DA0:  MOVLB  0
02DA2:  GOTO   2DD2
02DA6:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02DA8:  MOVLB  8
02DAA:  MOVF   x4B,W
02DAC:  ADDWF  x53,W
02DAE:  MOVWF  FE9
02DB0:  MOVF   x4C,W
02DB2:  ADDWFC x54,W
02DB4:  MOVWF  FEA
02DB6:  MOVFF  FEF,855
02DBA:  MOVFF  855,866
02DBE:  MOVLB  0
02DC0:  CALL   1D08
02DC4:  MOVLB  8
02DC6:  INCF   x53,F
02DC8:  BTFSC  FD8.2
02DCA:  INCF   x54,F
02DCC:  MOVLB  0
02DCE:  GOTO   2D7E
....................          break;
02DD2:  GOTO   2DDA
....................          
....................       default:
....................          break;
02DD6:  GOTO   2DDA
....................    }
....................    return;
02DDA:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
05E4C:  MOVFF  493,84A
05E50:  MOVLW  01
05E52:  MOVLB  8
05E54:  MOVWF  x4B
05E56:  MOVLW  0F
05E58:  MOVWF  x4D
05E5A:  MOVLW  89
05E5C:  MOVWF  x4C
05E5E:  MOVLB  0
05E60:  CALL   1CB4
05E64:  MOVFF  493,84A
05E68:  MOVLB  8
05E6A:  CLRF   x4B
05E6C:  MOVLW  0F
05E6E:  MOVWF  x4D
05E70:  MOVLW  92
05E72:  MOVWF  x4C
05E74:  MOVLB  0
05E76:  CALL   1CB4
05E7A:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
02DDC:  MOVLW  05
02DDE:  MOVLB  8
02DE0:  MOVWF  x48
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
02DE2:  MOVFF  846,84A
02DE6:  CLRF   x4B
02DE8:  MOVLW  0F
02DEA:  MOVWF  x4D
02DEC:  MOVLW  89
02DEE:  MOVWF  x4C
02DF0:  MOVLB  0
02DF2:  CALL   1CB4
02DF6:  MOVFF  846,84A
02DFA:  MOVLB  8
02DFC:  CLRF   x4B
02DFE:  MOVLW  0F
02E00:  MOVWF  x4D
02E02:  MOVLW  92
02E04:  MOVWF  x4C
02E06:  MOVLB  0
02E08:  CALL   1CB4
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
02E0C:  MOVFF  847,84D
02E10:  MOVFF  846,84C
02E14:  MOVFF  845,84B
02E18:  MOVFF  844,84A
02E1C:  MOVLW  08
02E1E:  MOVLB  8
02E20:  MOVWF  x4F
02E22:  MOVLW  48
02E24:  MOVWF  x4E
02E26:  CLRF   x51
02E28:  MOVLW  01
02E2A:  MOVWF  x50
02E2C:  MOVLW  08
02E2E:  MOVWF  x53
02E30:  MOVLW  49
02E32:  MOVWF  x52
02E34:  CLRF   x57
02E36:  CLRF   x56
02E38:  CLRF   x55
02E3A:  MOVLW  01
02E3C:  MOVWF  x54
02E3E:  MOVLB  0
02E40:  CALL   1D1C
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
02E44:  MOVFF  846,84A
02E48:  MOVLW  01
02E4A:  MOVLB  8
02E4C:  MOVWF  x4B
02E4E:  MOVLW  0F
02E50:  MOVWF  x4D
02E52:  MOVLW  89
02E54:  MOVWF  x4C
02E56:  MOVLB  0
02E58:  CALL   1CB4
02E5C:  MOVFF  846,84A
02E60:  MOVLB  8
02E62:  CLRF   x4B
02E64:  MOVLW  0F
02E66:  MOVWF  x4D
02E68:  MOVLW  92
02E6A:  MOVWF  x4C
02E6C:  MOVLB  0
02E6E:  CALL   1CB4
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
02E72:  MOVLB  8
02E74:  MOVF   x49,W
02E76:  MOVWF  01
02E78:  MOVLB  0
02E7A:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
....................  
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
051B2:  MOVLB  3
051B4:  MOVF   x95,F
051B6:  BTFSC  FD8.2
051B8:  BRA    51C0
051BA:  MOVLB  0
051BC:  GOTO   5318
051C0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
051C2:  MOVLW  06
051C4:  MOVLB  3
051C6:  MOVWF  x9C
051C8:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
051CA:  MOVLW  D8
051CC:  MOVLB  3
051CE:  MOVWF  x9D
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
051D0:  MOVFF  39A,3A9
051D4:  MOVFF  39B,3AA
051D8:  CLRF   xAB
051DA:  CLRF   xAC
051DC:  MOVF   xA9,W
051DE:  MOVWF  00
051E0:  CLRF   01
051E2:  CLRF   02
051E4:  CLRF   03
051E6:  MOVFF  00,39E
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
051EA:  MOVFF  399,3A9
051EE:  MOVFF  39A,3AA
051F2:  MOVFF  39B,3AB
051F6:  CLRF   xAC
051F8:  MOVF   xA9,W
051FA:  MOVWF  00
051FC:  CLRF   01
051FE:  CLRF   02
05200:  CLRF   03
05202:  MOVFF  00,39F
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05206:  MOVF   x98,W
05208:  MOVWF  00
0520A:  CLRF   01
0520C:  CLRF   02
0520E:  CLRF   03
05210:  MOVFF  00,3A0
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05214:  MOVFF  396,84A
05218:  MOVLB  8
0521A:  CLRF   x4B
0521C:  MOVLW  0F
0521E:  MOVWF  x4D
05220:  MOVLW  89
05222:  MOVWF  x4C
05224:  MOVLB  0
05226:  CALL   1CB4
0522A:  MOVFF  396,84A
0522E:  MOVLB  8
05230:  CLRF   x4B
05232:  MOVLW  0F
05234:  MOVWF  x4D
05236:  MOVLW  92
05238:  MOVWF  x4C
0523A:  MOVLB  0
0523C:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
05240:  MOVFF  397,847
05244:  MOVFF  396,846
05248:  MOVFF  395,845
0524C:  MOVFF  394,844
05250:  MOVLW  03
05252:  MOVLB  8
05254:  MOVWF  x49
05256:  MOVLW  9C
05258:  MOVWF  x48
0525A:  CLRF   x4B
0525C:  MOVLW  01
0525E:  MOVWF  x4A
05260:  MOVLB  0
05262:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
05266:  MOVFF  396,84A
0526A:  MOVLW  01
0526C:  MOVLB  8
0526E:  MOVWF  x4B
05270:  MOVLW  0F
05272:  MOVWF  x4D
05274:  MOVLW  89
05276:  MOVWF  x4C
05278:  MOVLB  0
0527A:  CALL   1CB4
0527E:  MOVFF  396,84A
05282:  MOVLB  8
05284:  CLRF   x4B
05286:  MOVLW  0F
05288:  MOVWF  x4D
0528A:  MOVLW  92
0528C:  MOVWF  x4C
0528E:  MOVLB  0
05290:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05294:  MOVFF  396,84A
05298:  MOVLB  8
0529A:  CLRF   x4B
0529C:  MOVLW  0F
0529E:  MOVWF  x4D
052A0:  MOVLW  89
052A2:  MOVWF  x4C
052A4:  MOVLB  0
052A6:  CALL   1CB4
052AA:  MOVFF  396,84A
052AE:  MOVLB  8
052B0:  CLRF   x4B
052B2:  MOVLW  0F
052B4:  MOVWF  x4D
052B6:  MOVLW  92
052B8:  MOVWF  x4C
052BA:  MOVLB  0
052BC:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
052C0:  MOVFF  397,847
052C4:  MOVFF  396,846
052C8:  MOVFF  395,845
052CC:  MOVFF  394,844
052D0:  MOVLW  03
052D2:  MOVLB  8
052D4:  MOVWF  x49
052D6:  MOVLW  9D
052D8:  MOVWF  x48
052DA:  CLRF   x4B
052DC:  MOVLW  04
052DE:  MOVWF  x4A
052E0:  MOVLB  0
052E2:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
052E6:  MOVFF  396,84A
052EA:  MOVLW  01
052EC:  MOVLB  8
052EE:  MOVWF  x4B
052F0:  MOVLW  0F
052F2:  MOVWF  x4D
052F4:  MOVLW  89
052F6:  MOVWF  x4C
052F8:  MOVLB  0
052FA:  CALL   1CB4
052FE:  MOVFF  396,84A
05302:  MOVLB  8
05304:  CLRF   x4B
05306:  MOVLW  0F
05308:  MOVWF  x4D
0530A:  MOVLW  92
0530C:  MOVWF  x4C
0530E:  MOVLB  0
05310:  CALL   1CB4
....................    }
05314:  GOTO   5498
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05318:  MOVLB  3
0531A:  DECFSZ x95,W
0531C:  BRA    5322
0531E:  BRA    5328
05320:  MOVLB  0
05322:  MOVLB  0
05324:  GOTO   5498
05328:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0532A:  MOVLW  06
0532C:  MOVLB  3
0532E:  MOVWF  xA1
05330:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
05332:  MOVLW  DC
05334:  MOVLB  3
05336:  MOVWF  xA2
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05338:  MOVFF  39B,3A9
0533C:  CLRF   xAA
0533E:  CLRF   xAB
05340:  CLRF   xAC
05342:  MOVF   xA9,W
05344:  MOVWF  00
05346:  CLRF   01
05348:  CLRF   02
0534A:  CLRF   03
0534C:  MOVFF  00,3A3
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
05350:  MOVFF  39A,3A9
05354:  MOVFF  39B,3AA
05358:  CLRF   xAB
0535A:  CLRF   xAC
0535C:  MOVF   xA9,W
0535E:  MOVWF  00
05360:  CLRF   01
05362:  CLRF   02
05364:  CLRF   03
05366:  MOVFF  00,3A4
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0536A:  MOVFF  399,3A9
0536E:  MOVFF  39A,3AA
05372:  MOVFF  39B,3AB
05376:  CLRF   xAC
05378:  MOVF   xA9,W
0537A:  MOVWF  00
0537C:  CLRF   01
0537E:  CLRF   02
05380:  CLRF   03
05382:  MOVFF  00,3A5
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05386:  MOVF   x98,W
05388:  MOVWF  00
0538A:  CLRF   01
0538C:  CLRF   02
0538E:  CLRF   03
05390:  MOVFF  00,3A6
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05394:  MOVFF  396,84A
05398:  MOVLB  8
0539A:  CLRF   x4B
0539C:  MOVLW  0F
0539E:  MOVWF  x4D
053A0:  MOVLW  89
053A2:  MOVWF  x4C
053A4:  MOVLB  0
053A6:  CALL   1CB4
053AA:  MOVFF  396,84A
053AE:  MOVLB  8
053B0:  CLRF   x4B
053B2:  MOVLW  0F
053B4:  MOVWF  x4D
053B6:  MOVLW  92
053B8:  MOVWF  x4C
053BA:  MOVLB  0
053BC:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
053C0:  MOVFF  397,847
053C4:  MOVFF  396,846
053C8:  MOVFF  395,845
053CC:  MOVFF  394,844
053D0:  MOVLW  03
053D2:  MOVLB  8
053D4:  MOVWF  x49
053D6:  MOVLW  A1
053D8:  MOVWF  x48
053DA:  CLRF   x4B
053DC:  MOVLW  01
053DE:  MOVWF  x4A
053E0:  MOVLB  0
053E2:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
053E6:  MOVFF  396,84A
053EA:  MOVLW  01
053EC:  MOVLB  8
053EE:  MOVWF  x4B
053F0:  MOVLW  0F
053F2:  MOVWF  x4D
053F4:  MOVLW  89
053F6:  MOVWF  x4C
053F8:  MOVLB  0
053FA:  CALL   1CB4
053FE:  MOVFF  396,84A
05402:  MOVLB  8
05404:  CLRF   x4B
05406:  MOVLW  0F
05408:  MOVWF  x4D
0540A:  MOVLW  92
0540C:  MOVWF  x4C
0540E:  MOVLB  0
05410:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05414:  MOVFF  396,84A
05418:  MOVLB  8
0541A:  CLRF   x4B
0541C:  MOVLW  0F
0541E:  MOVWF  x4D
05420:  MOVLW  89
05422:  MOVWF  x4C
05424:  MOVLB  0
05426:  CALL   1CB4
0542A:  MOVFF  396,84A
0542E:  MOVLB  8
05430:  CLRF   x4B
05432:  MOVLW  0F
05434:  MOVWF  x4D
05436:  MOVLW  92
05438:  MOVWF  x4C
0543A:  MOVLB  0
0543C:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
05440:  MOVFF  397,847
05444:  MOVFF  396,846
05448:  MOVFF  395,845
0544C:  MOVFF  394,844
05450:  MOVLW  03
05452:  MOVLB  8
05454:  MOVWF  x49
05456:  MOVLW  A2
05458:  MOVWF  x48
0545A:  CLRF   x4B
0545C:  MOVLW  05
0545E:  MOVWF  x4A
05460:  MOVLB  0
05462:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05466:  MOVFF  396,84A
0546A:  MOVLW  01
0546C:  MOVLB  8
0546E:  MOVWF  x4B
05470:  MOVLW  0F
05472:  MOVWF  x4D
05474:  MOVLW  89
05476:  MOVWF  x4C
05478:  MOVLB  0
0547A:  CALL   1CB4
0547E:  MOVFF  396,84A
05482:  MOVLB  8
05484:  CLRF   x4B
05486:  MOVLW  0F
05488:  MOVWF  x4D
0548A:  MOVLW  92
0548C:  MOVWF  x4C
0548E:  MOVLB  0
05490:  CALL   1CB4
....................    }
05494:  GOTO   5498
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05498:  MOVLB  3
0549A:  CLRF   xA7
0549C:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
0549E:  MOVFF  397,847
054A2:  MOVFF  396,846
054A6:  MOVFF  395,845
054AA:  MOVFF  394,844
054AE:  CALL   2DDC
054B2:  MOVF   01,W
054B4:  ANDLW  01
054B6:  SUBLW  01
054B8:  BTFSS  FD8.2
054BA:  GOTO   550C
....................       if(timeout_counter > 10)
054BE:  MOVLB  3
054C0:  MOVF   xA7,W
054C2:  SUBLW  0A
054C4:  BTFSS  FD8.0
054C6:  BRA    54CE
054C8:  MOVLB  0
054CA:  GOTO   54E0
054CE:  MOVLB  0
....................          delay_ms(200);
054D0:  MOVLW  C8
054D2:  MOVLB  8
054D4:  MOVWF  x44
054D6:  MOVLB  0
054D8:  CALL   1694
054DC:  GOTO   54EC
....................       else
....................          delay_ms(10);   
054E0:  MOVLW  0A
054E2:  MOVLB  8
054E4:  MOVWF  x44
054E6:  MOVLB  0
054E8:  CALL   1694
....................       
....................       if(timeout_counter > 100){
054EC:  MOVLB  3
054EE:  MOVF   xA7,W
054F0:  SUBLW  64
054F2:  BTFSS  FD8.0
054F4:  BRA    54FC
054F6:  MOVLB  0
054F8:  GOTO   5502
054FC:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
054FE:  GOTO   550C
....................       }  
....................       timeout_counter++;
05502:  MOVLB  3
05504:  INCF   xA7,F
05506:  MOVLB  0
05508:  GOTO   549E
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
0550C:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03200:  MOVLB  8
03202:  MOVF   x2D,F
03204:  BTFSC  FD8.2
03206:  BRA    320E
03208:  MOVLB  0
0320A:  GOTO   3364
0320E:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03210:  MOVLW  06
03212:  MOVLB  8
03214:  MOVWF  x34
03216:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
03218:  MOVLW  20
0321A:  MOVLB  8
0321C:  MOVWF  x35
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0321E:  MOVFF  832,841
03222:  MOVFF  833,842
03226:  CLRF   x43
03228:  CLRF   x44
0322A:  MOVF   x41,W
0322C:  MOVWF  00
0322E:  CLRF   01
03230:  CLRF   02
03232:  CLRF   03
03234:  MOVFF  00,836
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03238:  MOVFF  831,841
0323C:  MOVFF  832,842
03240:  MOVFF  833,843
03244:  CLRF   x44
03246:  MOVF   x41,W
03248:  MOVWF  00
0324A:  CLRF   01
0324C:  CLRF   02
0324E:  CLRF   03
03250:  MOVFF  00,837
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
03254:  MOVF   x30,W
03256:  MOVWF  00
03258:  CLRF   01
0325A:  CLRF   02
0325C:  CLRF   03
0325E:  MOVFF  00,838
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03262:  MOVFF  82E,84A
03266:  CLRF   x4B
03268:  MOVLW  0F
0326A:  MOVWF  x4D
0326C:  MOVLW  89
0326E:  MOVWF  x4C
03270:  MOVLB  0
03272:  CALL   1CB4
03276:  MOVFF  82E,84A
0327A:  MOVLB  8
0327C:  CLRF   x4B
0327E:  MOVLW  0F
03280:  MOVWF  x4D
03282:  MOVLW  92
03284:  MOVWF  x4C
03286:  MOVLB  0
03288:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0328C:  MOVFF  82F,847
03290:  MOVFF  82E,846
03294:  MOVFF  82D,845
03298:  MOVFF  82C,844
0329C:  MOVLW  08
0329E:  MOVLB  8
032A0:  MOVWF  x49
032A2:  MOVLW  34
032A4:  MOVWF  x48
032A6:  CLRF   x4B
032A8:  MOVLW  01
032AA:  MOVWF  x4A
032AC:  MOVLB  0
032AE:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
032B2:  MOVFF  82E,84A
032B6:  MOVLW  01
032B8:  MOVLB  8
032BA:  MOVWF  x4B
032BC:  MOVLW  0F
032BE:  MOVWF  x4D
032C0:  MOVLW  89
032C2:  MOVWF  x4C
032C4:  MOVLB  0
032C6:  CALL   1CB4
032CA:  MOVFF  82E,84A
032CE:  MOVLB  8
032D0:  CLRF   x4B
032D2:  MOVLW  0F
032D4:  MOVWF  x4D
032D6:  MOVLW  92
032D8:  MOVWF  x4C
032DA:  MOVLB  0
032DC:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
032E0:  MOVFF  82E,84A
032E4:  MOVLB  8
032E6:  CLRF   x4B
032E8:  MOVLW  0F
032EA:  MOVWF  x4D
032EC:  MOVLW  89
032EE:  MOVWF  x4C
032F0:  MOVLB  0
032F2:  CALL   1CB4
032F6:  MOVFF  82E,84A
032FA:  MOVLB  8
032FC:  CLRF   x4B
032FE:  MOVLW  0F
03300:  MOVWF  x4D
03302:  MOVLW  92
03304:  MOVWF  x4C
03306:  MOVLB  0
03308:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
0330C:  MOVFF  82F,847
03310:  MOVFF  82E,846
03314:  MOVFF  82D,845
03318:  MOVFF  82C,844
0331C:  MOVLW  08
0331E:  MOVLB  8
03320:  MOVWF  x49
03322:  MOVLW  35
03324:  MOVWF  x48
03326:  CLRF   x4B
03328:  MOVLW  04
0332A:  MOVWF  x4A
0332C:  MOVLB  0
0332E:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03332:  MOVFF  82E,84A
03336:  MOVLW  01
03338:  MOVLB  8
0333A:  MOVWF  x4B
0333C:  MOVLW  0F
0333E:  MOVWF  x4D
03340:  MOVLW  89
03342:  MOVWF  x4C
03344:  MOVLB  0
03346:  CALL   1CB4
0334A:  MOVFF  82E,84A
0334E:  MOVLB  8
03350:  CLRF   x4B
03352:  MOVLW  0F
03354:  MOVWF  x4D
03356:  MOVLW  92
03358:  MOVWF  x4C
0335A:  MOVLB  0
0335C:  CALL   1CB4
....................    }
03360:  GOTO   34E2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03364:  MOVLB  8
03366:  DECFSZ x2D,W
03368:  BRA    336E
0336A:  BRA    3374
0336C:  MOVLB  0
0336E:  MOVLB  0
03370:  GOTO   34E2
03374:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03376:  MOVLW  06
03378:  MOVLB  8
0337A:  MOVWF  x39
0337C:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
0337E:  MOVLW  21
03380:  MOVLB  8
03382:  MOVWF  x3A
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
03384:  MOVFF  833,841
03388:  CLRF   x42
0338A:  CLRF   x43
0338C:  CLRF   x44
0338E:  MOVF   x41,W
03390:  MOVWF  00
03392:  CLRF   01
03394:  CLRF   02
03396:  CLRF   03
03398:  MOVFF  00,83B
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0339C:  MOVFF  832,841
033A0:  MOVFF  833,842
033A4:  CLRF   x43
033A6:  CLRF   x44
033A8:  MOVF   x41,W
033AA:  MOVWF  00
033AC:  CLRF   01
033AE:  CLRF   02
033B0:  CLRF   03
033B2:  MOVFF  00,83C
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
033B6:  MOVFF  831,841
033BA:  MOVFF  832,842
033BE:  MOVFF  833,843
033C2:  CLRF   x44
033C4:  MOVF   x41,W
033C6:  MOVWF  00
033C8:  CLRF   01
033CA:  CLRF   02
033CC:  CLRF   03
033CE:  MOVFF  00,83D
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
033D2:  MOVF   x30,W
033D4:  MOVWF  00
033D6:  CLRF   01
033D8:  CLRF   02
033DA:  CLRF   03
033DC:  MOVFF  00,83E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
033E0:  MOVFF  82E,84A
033E4:  CLRF   x4B
033E6:  MOVLW  0F
033E8:  MOVWF  x4D
033EA:  MOVLW  89
033EC:  MOVWF  x4C
033EE:  MOVLB  0
033F0:  CALL   1CB4
033F4:  MOVFF  82E,84A
033F8:  MOVLB  8
033FA:  CLRF   x4B
033FC:  MOVLW  0F
033FE:  MOVWF  x4D
03400:  MOVLW  92
03402:  MOVWF  x4C
03404:  MOVLB  0
03406:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0340A:  MOVFF  82F,847
0340E:  MOVFF  82E,846
03412:  MOVFF  82D,845
03416:  MOVFF  82C,844
0341A:  MOVLW  08
0341C:  MOVLB  8
0341E:  MOVWF  x49
03420:  MOVLW  39
03422:  MOVWF  x48
03424:  CLRF   x4B
03426:  MOVLW  01
03428:  MOVWF  x4A
0342A:  MOVLB  0
0342C:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
03430:  MOVFF  82E,84A
03434:  MOVLW  01
03436:  MOVLB  8
03438:  MOVWF  x4B
0343A:  MOVLW  0F
0343C:  MOVWF  x4D
0343E:  MOVLW  89
03440:  MOVWF  x4C
03442:  MOVLB  0
03444:  CALL   1CB4
03448:  MOVFF  82E,84A
0344C:  MOVLB  8
0344E:  CLRF   x4B
03450:  MOVLW  0F
03452:  MOVWF  x4D
03454:  MOVLW  92
03456:  MOVWF  x4C
03458:  MOVLB  0
0345A:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0345E:  MOVFF  82E,84A
03462:  MOVLB  8
03464:  CLRF   x4B
03466:  MOVLW  0F
03468:  MOVWF  x4D
0346A:  MOVLW  89
0346C:  MOVWF  x4C
0346E:  MOVLB  0
03470:  CALL   1CB4
03474:  MOVFF  82E,84A
03478:  MOVLB  8
0347A:  CLRF   x4B
0347C:  MOVLW  0F
0347E:  MOVWF  x4D
03480:  MOVLW  92
03482:  MOVWF  x4C
03484:  MOVLB  0
03486:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0348A:  MOVFF  82F,847
0348E:  MOVFF  82E,846
03492:  MOVFF  82D,845
03496:  MOVFF  82C,844
0349A:  MOVLW  08
0349C:  MOVLB  8
0349E:  MOVWF  x49
034A0:  MOVLW  3A
034A2:  MOVWF  x48
034A4:  CLRF   x4B
034A6:  MOVLW  05
034A8:  MOVWF  x4A
034AA:  MOVLB  0
034AC:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
034B0:  MOVFF  82E,84A
034B4:  MOVLW  01
034B6:  MOVLB  8
034B8:  MOVWF  x4B
034BA:  MOVLW  0F
034BC:  MOVWF  x4D
034BE:  MOVLW  89
034C0:  MOVWF  x4C
034C2:  MOVLB  0
034C4:  CALL   1CB4
034C8:  MOVFF  82E,84A
034CC:  MOVLB  8
034CE:  CLRF   x4B
034D0:  MOVLW  0F
034D2:  MOVWF  x4D
034D4:  MOVLW  92
034D6:  MOVWF  x4C
034D8:  MOVLB  0
034DA:  CALL   1CB4
....................    }
034DE:  GOTO   34E2
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
034E2:  MOVLB  8
034E4:  CLRF   x3F
034E6:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
034E8:  MOVFF  82F,847
034EC:  MOVFF  82E,846
034F0:  MOVFF  82D,845
034F4:  MOVFF  82C,844
034F8:  CALL   2DDC
034FC:  MOVF   01,W
034FE:  ANDLW  01
03500:  SUBLW  01
03502:  BTFSS  FD8.2
03504:  GOTO   3556
....................       if(timeout_counter > 10)
03508:  MOVLB  8
0350A:  MOVF   x3F,W
0350C:  SUBLW  0A
0350E:  BTFSS  FD8.0
03510:  BRA    3518
03512:  MOVLB  0
03514:  GOTO   352A
03518:  MOVLB  0
....................          delay_ms(200);
0351A:  MOVLW  C8
0351C:  MOVLB  8
0351E:  MOVWF  x44
03520:  MOVLB  0
03522:  CALL   1694
03526:  GOTO   3536
....................       else
....................          delay_ms(10);   
0352A:  MOVLW  0A
0352C:  MOVLB  8
0352E:  MOVWF  x44
03530:  MOVLB  0
03532:  CALL   1694
....................       
....................       if(timeout_counter > 100){
03536:  MOVLB  8
03538:  MOVF   x3F,W
0353A:  SUBLW  64
0353C:  BTFSS  FD8.0
0353E:  BRA    3546
03540:  MOVLB  0
03542:  GOTO   354C
03546:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
03548:  GOTO   3556
....................       }  
....................       timeout_counter++;
0354C:  MOVLB  8
0354E:  INCF   x3F,F
03550:  MOVLB  0
03552:  GOTO   34E8
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
03556:  RETURN 0
.................... }
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
06EFC:  MOVLB  4
06EFE:  MOVF   x21,F
06F00:  BTFSC  FD8.2
06F02:  BRA    6F0A
06F04:  MOVLB  0
06F06:  GOTO   6FF6
06F0A:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
06F0C:  MOVLW  03
06F0E:  MOVLB  4
06F10:  MOVWF  x29
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
06F12:  MOVFF  426,433
06F16:  MOVFF  427,434
06F1A:  CLRF   x35
06F1C:  CLRF   x36
06F1E:  MOVF   x33,W
06F20:  MOVWF  00
06F22:  CLRF   01
06F24:  CLRF   02
06F26:  CLRF   03
06F28:  MOVFF  00,42A
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
06F2C:  MOVFF  425,433
06F30:  MOVFF  426,434
06F34:  MOVFF  427,435
06F38:  CLRF   x36
06F3A:  MOVF   x33,W
06F3C:  MOVWF  00
06F3E:  CLRF   01
06F40:  CLRF   02
06F42:  CLRF   03
06F44:  MOVFF  00,42B
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
06F48:  MOVF   x24,W
06F4A:  MOVWF  00
06F4C:  CLRF   01
06F4E:  CLRF   02
06F50:  CLRF   03
06F52:  MOVFF  00,42C
....................             
....................       output_low(flash_stream.cs_pin);
06F56:  MOVFF  422,84A
06F5A:  MOVLB  8
06F5C:  CLRF   x4B
06F5E:  MOVLW  0F
06F60:  MOVWF  x4D
06F62:  MOVLW  89
06F64:  MOVWF  x4C
06F66:  MOVLB  0
06F68:  CALL   1CB4
06F6C:  MOVFF  422,84A
06F70:  MOVLB  8
06F72:  CLRF   x4B
06F74:  MOVLW  0F
06F76:  MOVWF  x4D
06F78:  MOVLW  92
06F7A:  MOVWF  x4C
06F7C:  MOVLB  0
06F7E:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
06F82:  MOVFF  423,84D
06F86:  MOVFF  422,84C
06F8A:  MOVFF  421,84B
06F8E:  MOVFF  420,84A
06F92:  MOVLW  04
06F94:  MOVLB  8
06F96:  MOVWF  x4F
06F98:  MOVLW  29
06F9A:  MOVWF  x4E
06F9C:  CLRF   x51
06F9E:  MOVLW  04
06FA0:  MOVWF  x50
06FA2:  MOVLW  04
06FA4:  MOVWF  x53
06FA6:  MOVLW  28
06FA8:  MOVWF  x52
06FAA:  CLRF   x57
06FAC:  CLRF   x56
06FAE:  CLRF   x55
06FB0:  MOVLW  01
06FB2:  MOVWF  x54
06FB4:  MOVLB  0
06FB6:  CALL   1D1C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
06FBA:  MOVLW  02
06FBC:  MOVWF  00
06FBE:  DECFSZ 00,F
06FC0:  BRA    6FBE
06FC2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
06FC4:  MOVFF  422,84A
06FC8:  MOVLW  01
06FCA:  MOVLB  8
06FCC:  MOVWF  x4B
06FCE:  MOVLW  0F
06FD0:  MOVWF  x4D
06FD2:  MOVLW  89
06FD4:  MOVWF  x4C
06FD6:  MOVLB  0
06FD8:  CALL   1CB4
06FDC:  MOVFF  422,84A
06FE0:  MOVLB  8
06FE2:  CLRF   x4B
06FE4:  MOVLW  0F
06FE6:  MOVWF  x4D
06FE8:  MOVLW  92
06FEA:  MOVWF  x4C
06FEC:  MOVLB  0
06FEE:  CALL   1CB4
....................    }
06FF2:  GOTO   7106
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
06FF6:  MOVLB  4
06FF8:  DECFSZ x21,W
06FFA:  BRA    7000
06FFC:  BRA    7006
06FFE:  MOVLB  0
07000:  MOVLB  0
07002:  GOTO   7106
07006:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
07008:  MOVLW  13
0700A:  MOVLB  4
0700C:  MOVWF  x2D
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
0700E:  MOVFF  427,433
07012:  CLRF   x34
07014:  CLRF   x35
07016:  CLRF   x36
07018:  MOVF   x33,W
0701A:  MOVWF  00
0701C:  CLRF   01
0701E:  CLRF   02
07020:  CLRF   03
07022:  MOVFF  00,42E
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07026:  MOVFF  426,433
0702A:  MOVFF  427,434
0702E:  CLRF   x35
07030:  CLRF   x36
07032:  MOVF   x33,W
07034:  MOVWF  00
07036:  CLRF   01
07038:  CLRF   02
0703A:  CLRF   03
0703C:  MOVFF  00,42F
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
07040:  MOVFF  425,433
07044:  MOVFF  426,434
07048:  MOVFF  427,435
0704C:  CLRF   x36
0704E:  MOVF   x33,W
07050:  MOVWF  00
07052:  CLRF   01
07054:  CLRF   02
07056:  CLRF   03
07058:  MOVFF  00,430
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
0705C:  MOVF   x24,W
0705E:  MOVWF  00
07060:  CLRF   01
07062:  CLRF   02
07064:  CLRF   03
07066:  MOVFF  00,431
....................    
....................       output_low(flash_stream.cs_pin);
0706A:  MOVFF  422,84A
0706E:  MOVLB  8
07070:  CLRF   x4B
07072:  MOVLW  0F
07074:  MOVWF  x4D
07076:  MOVLW  89
07078:  MOVWF  x4C
0707A:  MOVLB  0
0707C:  CALL   1CB4
07080:  MOVFF  422,84A
07084:  MOVLB  8
07086:  CLRF   x4B
07088:  MOVLW  0F
0708A:  MOVWF  x4D
0708C:  MOVLW  92
0708E:  MOVWF  x4C
07090:  MOVLB  0
07092:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
07096:  MOVFF  423,84D
0709A:  MOVFF  422,84C
0709E:  MOVFF  421,84B
070A2:  MOVFF  420,84A
070A6:  MOVLW  04
070A8:  MOVLB  8
070AA:  MOVWF  x4F
070AC:  MOVLW  2D
070AE:  MOVWF  x4E
070B0:  CLRF   x51
070B2:  MOVLW  05
070B4:  MOVWF  x50
070B6:  MOVLW  04
070B8:  MOVWF  x53
070BA:  MOVLW  28
070BC:  MOVWF  x52
070BE:  CLRF   x57
070C0:  CLRF   x56
070C2:  CLRF   x55
070C4:  MOVLW  01
070C6:  MOVWF  x54
070C8:  MOVLB  0
070CA:  CALL   1D1C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
070CE:  MOVLW  02
070D0:  MOVWF  00
070D2:  DECFSZ 00,F
070D4:  BRA    70D2
070D6:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
070D8:  MOVFF  422,84A
070DC:  MOVLW  01
070DE:  MOVLB  8
070E0:  MOVWF  x4B
070E2:  MOVLW  0F
070E4:  MOVWF  x4D
070E6:  MOVLW  89
070E8:  MOVWF  x4C
070EA:  MOVLB  0
070EC:  CALL   1CB4
070F0:  MOVFF  422,84A
070F4:  MOVLB  8
070F6:  CLRF   x4B
070F8:  MOVLW  0F
070FA:  MOVWF  x4D
070FC:  MOVLW  92
070FE:  MOVWF  x4C
07100:  MOVLB  0
07102:  CALL   1CB4
....................    }
....................    return read_data;
07106:  MOVLB  4
07108:  MOVF   x28,W
0710A:  MOVWF  01
0710C:  MOVLB  0
0710E:  GOTO   7A7E (RETURN)
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
020DC:  MOVLB  4
020DE:  MOVF   x16,F
020E0:  BTFSC  FD8.2
020E2:  BRA    20EA
020E4:  MOVLB  0
020E6:  GOTO   21DC
020EA:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
020EC:  MOVLW  03
020EE:  MOVLB  4
020F0:  MOVWF  x23
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
020F2:  MOVFF  41B,42D
020F6:  MOVFF  41C,42E
020FA:  CLRF   x2F
020FC:  CLRF   x30
020FE:  MOVF   x2D,W
02100:  MOVWF  00
02102:  CLRF   01
02104:  CLRF   02
02106:  CLRF   03
02108:  MOVFF  00,424
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0210C:  MOVFF  41A,42D
02110:  MOVFF  41B,42E
02114:  MOVFF  41C,42F
02118:  CLRF   x30
0211A:  MOVF   x2D,W
0211C:  MOVWF  00
0211E:  CLRF   01
02120:  CLRF   02
02122:  CLRF   03
02124:  MOVFF  00,425
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02128:  MOVF   x19,W
0212A:  MOVWF  00
0212C:  CLRF   01
0212E:  CLRF   02
02130:  CLRF   03
02132:  MOVFF  00,426
....................             
....................       output_low(flash_stream.cs_pin);
02136:  MOVFF  417,84A
0213A:  MOVLB  8
0213C:  CLRF   x4B
0213E:  MOVLW  0F
02140:  MOVWF  x4D
02142:  MOVLW  89
02144:  MOVWF  x4C
02146:  MOVLB  0
02148:  CALL   1CB4
0214C:  MOVFF  417,84A
02150:  MOVLB  8
02152:  CLRF   x4B
02154:  MOVLW  0F
02156:  MOVWF  x4D
02158:  MOVLW  92
0215A:  MOVWF  x4C
0215C:  MOVLB  0
0215E:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02162:  MOVFF  418,84D
02166:  MOVFF  417,84C
0216A:  MOVFF  416,84B
0216E:  MOVFF  415,84A
02172:  MOVLW  04
02174:  MOVLB  8
02176:  MOVWF  x4F
02178:  MOVLW  23
0217A:  MOVWF  x4E
0217C:  CLRF   x51
0217E:  MOVLW  04
02180:  MOVWF  x50
02182:  MOVFF  41E,853
02186:  MOVFF  41D,852
0218A:  MOVFF  422,857
0218E:  MOVFF  421,856
02192:  MOVFF  420,855
02196:  MOVFF  41F,854
0219A:  MOVLB  0
0219C:  CALL   1D1C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
021A0:  MOVLW  02
021A2:  MOVWF  00
021A4:  DECFSZ 00,F
021A6:  BRA    21A4
021A8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
021AA:  MOVFF  417,84A
021AE:  MOVLW  01
021B0:  MOVLB  8
021B2:  MOVWF  x4B
021B4:  MOVLW  0F
021B6:  MOVWF  x4D
021B8:  MOVLW  89
021BA:  MOVWF  x4C
021BC:  MOVLB  0
021BE:  CALL   1CB4
021C2:  MOVFF  417,84A
021C6:  MOVLB  8
021C8:  CLRF   x4B
021CA:  MOVLW  0F
021CC:  MOVWF  x4D
021CE:  MOVLW  92
021D0:  MOVWF  x4C
021D2:  MOVLB  0
021D4:  CALL   1CB4
....................    }
021D8:  GOTO   22F2
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
021DC:  MOVLB  4
021DE:  DECFSZ x16,W
021E0:  BRA    21E6
021E2:  BRA    21EC
021E4:  MOVLB  0
021E6:  MOVLB  0
021E8:  GOTO   22F2
021EC:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
021EE:  MOVLW  13
021F0:  MOVLB  4
021F2:  MOVWF  x27
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
021F4:  MOVFF  41C,42D
021F8:  CLRF   x2E
021FA:  CLRF   x2F
021FC:  CLRF   x30
021FE:  MOVF   x2D,W
02200:  MOVWF  00
02202:  CLRF   01
02204:  CLRF   02
02206:  CLRF   03
02208:  MOVFF  00,428
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0220C:  MOVFF  41B,42D
02210:  MOVFF  41C,42E
02214:  CLRF   x2F
02216:  CLRF   x30
02218:  MOVF   x2D,W
0221A:  MOVWF  00
0221C:  CLRF   01
0221E:  CLRF   02
02220:  CLRF   03
02222:  MOVFF  00,429
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02226:  MOVFF  41A,42D
0222A:  MOVFF  41B,42E
0222E:  MOVFF  41C,42F
02232:  CLRF   x30
02234:  MOVF   x2D,W
02236:  MOVWF  00
02238:  CLRF   01
0223A:  CLRF   02
0223C:  CLRF   03
0223E:  MOVFF  00,42A
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02242:  MOVF   x19,W
02244:  MOVWF  00
02246:  CLRF   01
02248:  CLRF   02
0224A:  CLRF   03
0224C:  MOVFF  00,42B
....................    
....................       output_low(flash_stream.cs_pin);
02250:  MOVFF  417,84A
02254:  MOVLB  8
02256:  CLRF   x4B
02258:  MOVLW  0F
0225A:  MOVWF  x4D
0225C:  MOVLW  89
0225E:  MOVWF  x4C
02260:  MOVLB  0
02262:  CALL   1CB4
02266:  MOVFF  417,84A
0226A:  MOVLB  8
0226C:  CLRF   x4B
0226E:  MOVLW  0F
02270:  MOVWF  x4D
02272:  MOVLW  92
02274:  MOVWF  x4C
02276:  MOVLB  0
02278:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0227C:  MOVFF  418,84D
02280:  MOVFF  417,84C
02284:  MOVFF  416,84B
02288:  MOVFF  415,84A
0228C:  MOVLW  04
0228E:  MOVLB  8
02290:  MOVWF  x4F
02292:  MOVLW  27
02294:  MOVWF  x4E
02296:  CLRF   x51
02298:  MOVLW  05
0229A:  MOVWF  x50
0229C:  MOVFF  41E,853
022A0:  MOVFF  41D,852
022A4:  MOVFF  422,857
022A8:  MOVFF  421,856
022AC:  MOVFF  420,855
022B0:  MOVFF  41F,854
022B4:  MOVLB  0
022B6:  CALL   1D1C
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
022BA:  MOVLW  02
022BC:  MOVWF  00
022BE:  DECFSZ 00,F
022C0:  BRA    22BE
022C2:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
022C4:  MOVFF  417,84A
022C8:  MOVLW  01
022CA:  MOVLB  8
022CC:  MOVWF  x4B
022CE:  MOVLW  0F
022D0:  MOVWF  x4D
022D2:  MOVLW  89
022D4:  MOVWF  x4C
022D6:  MOVLB  0
022D8:  CALL   1CB4
022DC:  MOVFF  417,84A
022E0:  MOVLB  8
022E2:  CLRF   x4B
022E4:  MOVLW  0F
022E6:  MOVWF  x4D
022E8:  MOVLW  92
022EA:  MOVWF  x4C
022EC:  MOVLB  0
022EE:  CALL   1CB4
....................    }
....................    return;
022F2:  RETURN 0
.................... }
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
07112:  MOVLB  4
07114:  MOVF   x1F,F
07116:  BTFSC  FD8.2
07118:  BRA    7120
0711A:  MOVLB  0
0711C:  GOTO   7286
07120:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
07122:  MOVLW  06
07124:  MOVLB  4
07126:  MOVWF  x27
07128:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0712A:  MOVLW  02
0712C:  MOVLB  4
0712E:  MOVWF  x28
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
07130:  MOVFF  424,436
07134:  MOVFF  425,437
07138:  CLRF   x38
0713A:  CLRF   x39
0713C:  MOVF   x36,W
0713E:  MOVWF  00
07140:  CLRF   01
07142:  CLRF   02
07144:  CLRF   03
07146:  MOVFF  00,429
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0714A:  MOVFF  423,436
0714E:  MOVFF  424,437
07152:  MOVFF  425,438
07156:  CLRF   x39
07158:  MOVF   x36,W
0715A:  MOVWF  00
0715C:  CLRF   01
0715E:  CLRF   02
07160:  CLRF   03
07162:  MOVFF  00,42A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
07166:  MOVF   x22,W
07168:  MOVWF  00
0716A:  CLRF   01
0716C:  CLRF   02
0716E:  CLRF   03
07170:  MOVFF  00,42B
....................       flash_cmd[4] = write_data;
07174:  MOVFF  426,42C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07178:  MOVFF  420,84A
0717C:  MOVLB  8
0717E:  CLRF   x4B
07180:  MOVLW  0F
07182:  MOVWF  x4D
07184:  MOVLW  89
07186:  MOVWF  x4C
07188:  MOVLB  0
0718A:  CALL   1CB4
0718E:  MOVFF  420,84A
07192:  MOVLB  8
07194:  CLRF   x4B
07196:  MOVLW  0F
07198:  MOVWF  x4D
0719A:  MOVLW  92
0719C:  MOVWF  x4C
0719E:  MOVLB  0
071A0:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
071A4:  MOVFF  421,847
071A8:  MOVFF  420,846
071AC:  MOVFF  41F,845
071B0:  MOVFF  41E,844
071B4:  MOVLW  04
071B6:  MOVLB  8
071B8:  MOVWF  x49
071BA:  MOVLW  27
071BC:  MOVWF  x48
071BE:  CLRF   x4B
071C0:  MOVLW  01
071C2:  MOVWF  x4A
071C4:  MOVLB  0
071C6:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
071CA:  MOVFF  420,84A
071CE:  MOVLW  01
071D0:  MOVLB  8
071D2:  MOVWF  x4B
071D4:  MOVLW  0F
071D6:  MOVWF  x4D
071D8:  MOVLW  89
071DA:  MOVWF  x4C
071DC:  MOVLB  0
071DE:  CALL   1CB4
071E2:  MOVFF  420,84A
071E6:  MOVLB  8
071E8:  CLRF   x4B
071EA:  MOVLW  0F
071EC:  MOVWF  x4D
071EE:  MOVLW  92
071F0:  MOVWF  x4C
071F2:  MOVLB  0
071F4:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
071F8:  MOVFF  420,84A
071FC:  MOVLB  8
071FE:  CLRF   x4B
07200:  MOVLW  0F
07202:  MOVWF  x4D
07204:  MOVLW  89
07206:  MOVWF  x4C
07208:  MOVLB  0
0720A:  CALL   1CB4
0720E:  MOVFF  420,84A
07212:  MOVLB  8
07214:  CLRF   x4B
07216:  MOVLW  0F
07218:  MOVWF  x4D
0721A:  MOVLW  92
0721C:  MOVWF  x4C
0721E:  MOVLB  0
07220:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
07224:  MOVFF  421,847
07228:  MOVFF  420,846
0722C:  MOVFF  41F,845
07230:  MOVFF  41E,844
07234:  MOVLW  04
07236:  MOVLB  8
07238:  MOVWF  x49
0723A:  MOVLW  28
0723C:  MOVWF  x48
0723E:  CLRF   x4B
07240:  MOVLW  05
07242:  MOVWF  x4A
07244:  MOVLB  0
07246:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0724A:  MOVLW  02
0724C:  MOVWF  00
0724E:  DECFSZ 00,F
07250:  BRA    724E
07252:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
07254:  MOVFF  420,84A
07258:  MOVLW  01
0725A:  MOVLB  8
0725C:  MOVWF  x4B
0725E:  MOVLW  0F
07260:  MOVWF  x4D
07262:  MOVLW  89
07264:  MOVWF  x4C
07266:  MOVLB  0
07268:  CALL   1CB4
0726C:  MOVFF  420,84A
07270:  MOVLB  8
07272:  CLRF   x4B
07274:  MOVLW  0F
07276:  MOVWF  x4D
07278:  MOVLW  92
0727A:  MOVWF  x4C
0727C:  MOVLB  0
0727E:  CALL   1CB4
....................    }
07282:  GOTO   7410
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
07286:  MOVLB  4
07288:  DECFSZ x1F,W
0728A:  BRA    7290
0728C:  BRA    7296
0728E:  MOVLB  0
07290:  MOVLB  0
07292:  GOTO   7410
07296:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
07298:  MOVLW  06
0729A:  MOVLB  4
0729C:  MOVWF  x2D
0729E:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
072A0:  MOVLW  12
072A2:  MOVLB  4
072A4:  MOVWF  x2E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
072A6:  MOVFF  425,436
072AA:  CLRF   x37
072AC:  CLRF   x38
072AE:  CLRF   x39
072B0:  MOVF   x36,W
072B2:  MOVWF  00
072B4:  CLRF   01
072B6:  CLRF   02
072B8:  CLRF   03
072BA:  MOVFF  00,42F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
072BE:  MOVFF  424,436
072C2:  MOVFF  425,437
072C6:  CLRF   x38
072C8:  CLRF   x39
072CA:  MOVF   x36,W
072CC:  MOVWF  00
072CE:  CLRF   01
072D0:  CLRF   02
072D2:  CLRF   03
072D4:  MOVFF  00,430
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
072D8:  MOVFF  423,436
072DC:  MOVFF  424,437
072E0:  MOVFF  425,438
072E4:  CLRF   x39
072E6:  MOVF   x36,W
072E8:  MOVWF  00
072EA:  CLRF   01
072EC:  CLRF   02
072EE:  CLRF   03
072F0:  MOVFF  00,431
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
072F4:  MOVF   x22,W
072F6:  MOVWF  00
072F8:  CLRF   01
072FA:  CLRF   02
072FC:  CLRF   03
072FE:  MOVFF  00,432
....................       flash_cmd[5] = write_data;
07302:  MOVFF  426,433
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
07306:  MOVFF  420,84A
0730A:  MOVLB  8
0730C:  CLRF   x4B
0730E:  MOVLW  0F
07310:  MOVWF  x4D
07312:  MOVLW  89
07314:  MOVWF  x4C
07316:  MOVLB  0
07318:  CALL   1CB4
0731C:  MOVFF  420,84A
07320:  MOVLB  8
07322:  CLRF   x4B
07324:  MOVLW  0F
07326:  MOVWF  x4D
07328:  MOVLW  92
0732A:  MOVWF  x4C
0732C:  MOVLB  0
0732E:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
07332:  MOVFF  421,847
07336:  MOVFF  420,846
0733A:  MOVFF  41F,845
0733E:  MOVFF  41E,844
07342:  MOVLW  04
07344:  MOVLB  8
07346:  MOVWF  x49
07348:  MOVLW  2D
0734A:  MOVWF  x48
0734C:  CLRF   x4B
0734E:  MOVLW  01
07350:  MOVWF  x4A
07352:  MOVLB  0
07354:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
07358:  MOVFF  420,84A
0735C:  MOVLW  01
0735E:  MOVLB  8
07360:  MOVWF  x4B
07362:  MOVLW  0F
07364:  MOVWF  x4D
07366:  MOVLW  89
07368:  MOVWF  x4C
0736A:  MOVLB  0
0736C:  CALL   1CB4
07370:  MOVFF  420,84A
07374:  MOVLB  8
07376:  CLRF   x4B
07378:  MOVLW  0F
0737A:  MOVWF  x4D
0737C:  MOVLW  92
0737E:  MOVWF  x4C
07380:  MOVLB  0
07382:  CALL   1CB4
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
07386:  MOVFF  420,84A
0738A:  MOVLB  8
0738C:  CLRF   x4B
0738E:  MOVLW  0F
07390:  MOVWF  x4D
07392:  MOVLW  89
07394:  MOVWF  x4C
07396:  MOVLB  0
07398:  CALL   1CB4
0739C:  MOVFF  420,84A
073A0:  MOVLB  8
073A2:  CLRF   x4B
073A4:  MOVLW  0F
073A6:  MOVWF  x4D
073A8:  MOVLW  92
073AA:  MOVWF  x4C
073AC:  MOVLB  0
073AE:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
073B2:  MOVFF  421,847
073B6:  MOVFF  420,846
073BA:  MOVFF  41F,845
073BE:  MOVFF  41E,844
073C2:  MOVLW  04
073C4:  MOVLB  8
073C6:  MOVWF  x49
073C8:  MOVLW  2E
073CA:  MOVWF  x48
073CC:  CLRF   x4B
073CE:  MOVLW  06
073D0:  MOVWF  x4A
073D2:  MOVLB  0
073D4:  CALL   2BA0
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
073D8:  MOVLW  02
073DA:  MOVWF  00
073DC:  DECFSZ 00,F
073DE:  BRA    73DC
073E0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
073E2:  MOVFF  420,84A
073E6:  MOVLW  01
073E8:  MOVLB  8
073EA:  MOVWF  x4B
073EC:  MOVLW  0F
073EE:  MOVWF  x4D
073F0:  MOVLW  89
073F2:  MOVWF  x4C
073F4:  MOVLB  0
073F6:  CALL   1CB4
073FA:  MOVFF  420,84A
073FE:  MOVLB  8
07400:  CLRF   x4B
07402:  MOVLW  0F
07404:  MOVWF  x4D
07406:  MOVLW  92
07408:  MOVWF  x4C
0740A:  MOVLB  0
0740C:  CALL   1CB4
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
07410:  MOVLB  4
07412:  CLRF   x34
07414:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
07416:  MOVFF  421,847
0741A:  MOVFF  420,846
0741E:  MOVFF  41F,845
07422:  MOVFF  41E,844
07426:  CALL   2DDC
0742A:  MOVF   01,W
0742C:  ANDLW  01
0742E:  SUBLW  01
07430:  BTFSS  FD8.2
07432:  GOTO   7484
....................       if(timeout_counter > 10)
07436:  MOVLB  4
07438:  MOVF   x34,W
0743A:  SUBLW  0A
0743C:  BTFSS  FD8.0
0743E:  BRA    7446
07440:  MOVLB  0
07442:  GOTO   7458
07446:  MOVLB  0
....................          delay_ms(200);
07448:  MOVLW  C8
0744A:  MOVLB  8
0744C:  MOVWF  x44
0744E:  MOVLB  0
07450:  CALL   1694
07454:  GOTO   7464
....................       else
....................          delay_ms(10);   
07458:  MOVLW  0A
0745A:  MOVLB  8
0745C:  MOVWF  x44
0745E:  MOVLB  0
07460:  CALL   1694
....................       
....................       if(timeout_counter > 100){
07464:  MOVLB  4
07466:  MOVF   x34,W
07468:  SUBLW  64
0746A:  BTFSS  FD8.0
0746C:  BRA    7474
0746E:  MOVLB  0
07470:  GOTO   747A
07474:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
07476:  GOTO   7484
....................       }  
....................       timeout_counter++;
0747A:  MOVLB  4
0747C:  INCF   x34,F
0747E:  MOVLB  0
07480:  GOTO   7416
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
07484:  RETURN 0
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02E7C:  MOVLB  8
02E7E:  MOVF   x2D,F
02E80:  BTFSC  FD8.2
02E82:  BRA    2E8A
02E84:  MOVLB  0
02E86:  GOTO   2FF8
02E8A:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
02E8C:  MOVLW  06
02E8E:  MOVLB  8
02E90:  MOVWF  x38
02E92:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
02E94:  MOVLW  02
02E96:  MOVLB  8
02E98:  MOVWF  x39
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02E9A:  MOVFF  832,845
02E9E:  MOVFF  833,846
02EA2:  CLRF   x47
02EA4:  CLRF   x48
02EA6:  MOVF   x45,W
02EA8:  MOVWF  00
02EAA:  CLRF   01
02EAC:  CLRF   02
02EAE:  CLRF   03
02EB0:  MOVFF  00,83A
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02EB4:  MOVFF  831,845
02EB8:  MOVFF  832,846
02EBC:  MOVFF  833,847
02EC0:  CLRF   x48
02EC2:  MOVF   x45,W
02EC4:  MOVWF  00
02EC6:  CLRF   01
02EC8:  CLRF   02
02ECA:  CLRF   03
02ECC:  MOVFF  00,83B
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
02ED0:  MOVF   x30,W
02ED2:  MOVWF  00
02ED4:  CLRF   01
02ED6:  CLRF   02
02ED8:  CLRF   03
02EDA:  MOVFF  00,83C
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
02EDE:  MOVFF  82E,84A
02EE2:  CLRF   x4B
02EE4:  MOVLW  0F
02EE6:  MOVWF  x4D
02EE8:  MOVLW  89
02EEA:  MOVWF  x4C
02EEC:  MOVLB  0
02EEE:  CALL   1CB4
02EF2:  MOVFF  82E,84A
02EF6:  MOVLB  8
02EF8:  CLRF   x4B
02EFA:  MOVLW  0F
02EFC:  MOVWF  x4D
02EFE:  MOVLW  92
02F00:  MOVWF  x4C
02F02:  MOVLB  0
02F04:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
02F08:  MOVFF  82F,847
02F0C:  MOVFF  82E,846
02F10:  MOVFF  82D,845
02F14:  MOVFF  82C,844
02F18:  MOVLW  08
02F1A:  MOVLB  8
02F1C:  MOVWF  x49
02F1E:  MOVLW  38
02F20:  MOVWF  x48
02F22:  CLRF   x4B
02F24:  MOVLW  01
02F26:  MOVWF  x4A
02F28:  MOVLB  0
02F2A:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
02F2E:  MOVFF  82E,84A
02F32:  MOVLW  01
02F34:  MOVLB  8
02F36:  MOVWF  x4B
02F38:  MOVLW  0F
02F3A:  MOVWF  x4D
02F3C:  MOVLW  89
02F3E:  MOVWF  x4C
02F40:  MOVLB  0
02F42:  CALL   1CB4
02F46:  MOVFF  82E,84A
02F4A:  MOVLB  8
02F4C:  CLRF   x4B
02F4E:  MOVLW  0F
02F50:  MOVWF  x4D
02F52:  MOVLW  92
02F54:  MOVWF  x4C
02F56:  MOVLB  0
02F58:  CALL   1CB4
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
02F5C:  MOVFF  82E,84A
02F60:  MOVLB  8
02F62:  CLRF   x4B
02F64:  MOVLW  0F
02F66:  MOVWF  x4D
02F68:  MOVLW  89
02F6A:  MOVWF  x4C
02F6C:  MOVLB  0
02F6E:  CALL   1CB4
02F72:  MOVFF  82E,84A
02F76:  MOVLB  8
02F78:  CLRF   x4B
02F7A:  MOVLW  0F
02F7C:  MOVWF  x4D
02F7E:  MOVLW  92
02F80:  MOVWF  x4C
02F82:  MOVLB  0
02F84:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
02F88:  MOVFF  82F,847
02F8C:  MOVFF  82E,846
02F90:  MOVFF  82D,845
02F94:  MOVFF  82C,844
02F98:  MOVLW  08
02F9A:  MOVLB  8
02F9C:  MOVWF  x49
02F9E:  MOVLW  39
02FA0:  MOVWF  x48
02FA2:  MOVLW  04
02FA4:  MOVWF  x4A
02FA6:  MOVFF  835,84C
02FAA:  MOVFF  834,84B
02FAE:  MOVFF  837,84E
02FB2:  MOVFF  836,84D
02FB6:  MOVLB  0
02FB8:  CALL   2C80
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02FBC:  MOVLW  02
02FBE:  MOVWF  00
02FC0:  DECFSZ 00,F
02FC2:  BRA    2FC0
02FC4:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02FC6:  MOVFF  82E,84A
02FCA:  MOVLW  01
02FCC:  MOVLB  8
02FCE:  MOVWF  x4B
02FD0:  MOVLW  0F
02FD2:  MOVWF  x4D
02FD4:  MOVLW  89
02FD6:  MOVWF  x4C
02FD8:  MOVLB  0
02FDA:  CALL   1CB4
02FDE:  MOVFF  82E,84A
02FE2:  MOVLB  8
02FE4:  CLRF   x4B
02FE6:  MOVLW  0F
02FE8:  MOVWF  x4D
02FEA:  MOVLW  92
02FEC:  MOVWF  x4C
02FEE:  MOVLB  0
02FF0:  CALL   1CB4
....................    }
02FF4:  GOTO   318A
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02FF8:  MOVLB  8
02FFA:  DECFSZ x2D,W
02FFC:  BRA    3002
02FFE:  BRA    3008
03000:  MOVLB  0
03002:  MOVLB  0
03004:  GOTO   318A
03008:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0300A:  MOVLW  06
0300C:  MOVLB  8
0300E:  MOVWF  x3D
03010:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03012:  MOVLW  12
03014:  MOVLB  8
03016:  MOVWF  x3E
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03018:  MOVFF  833,845
0301C:  CLRF   x46
0301E:  CLRF   x47
03020:  CLRF   x48
03022:  MOVF   x45,W
03024:  MOVWF  00
03026:  CLRF   01
03028:  CLRF   02
0302A:  CLRF   03
0302C:  MOVFF  00,83F
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03030:  MOVFF  832,845
03034:  MOVFF  833,846
03038:  CLRF   x47
0303A:  CLRF   x48
0303C:  MOVF   x45,W
0303E:  MOVWF  00
03040:  CLRF   01
03042:  CLRF   02
03044:  CLRF   03
03046:  MOVFF  00,840
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0304A:  MOVFF  831,845
0304E:  MOVFF  832,846
03052:  MOVFF  833,847
03056:  CLRF   x48
03058:  MOVF   x45,W
0305A:  MOVWF  00
0305C:  CLRF   01
0305E:  CLRF   02
03060:  CLRF   03
03062:  MOVFF  00,841
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03066:  MOVF   x30,W
03068:  MOVWF  00
0306A:  CLRF   01
0306C:  CLRF   02
0306E:  CLRF   03
03070:  MOVFF  00,842
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03074:  MOVFF  82E,84A
03078:  CLRF   x4B
0307A:  MOVLW  0F
0307C:  MOVWF  x4D
0307E:  MOVLW  89
03080:  MOVWF  x4C
03082:  MOVLB  0
03084:  CALL   1CB4
03088:  MOVFF  82E,84A
0308C:  MOVLB  8
0308E:  CLRF   x4B
03090:  MOVLW  0F
03092:  MOVWF  x4D
03094:  MOVLW  92
03096:  MOVWF  x4C
03098:  MOVLB  0
0309A:  CALL   1CB4
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0309E:  MOVFF  82F,847
030A2:  MOVFF  82E,846
030A6:  MOVFF  82D,845
030AA:  MOVFF  82C,844
030AE:  MOVLW  08
030B0:  MOVLB  8
030B2:  MOVWF  x49
030B4:  MOVLW  3D
030B6:  MOVWF  x48
030B8:  CLRF   x4B
030BA:  MOVLW  01
030BC:  MOVWF  x4A
030BE:  MOVLB  0
030C0:  CALL   2BA0
....................       output_high(flash_stream.cs_pin);
030C4:  MOVFF  82E,84A
030C8:  MOVLW  01
030CA:  MOVLB  8
030CC:  MOVWF  x4B
030CE:  MOVLW  0F
030D0:  MOVWF  x4D
030D2:  MOVLW  89
030D4:  MOVWF  x4C
030D6:  MOVLB  0
030D8:  CALL   1CB4
030DC:  MOVFF  82E,84A
030E0:  MOVLB  8
030E2:  CLRF   x4B
030E4:  MOVLW  0F
030E6:  MOVWF  x4D
030E8:  MOVLW  92
030EA:  MOVWF  x4C
030EC:  MOVLB  0
030EE:  CALL   1CB4
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
030F2:  MOVFF  82E,84A
030F6:  MOVLB  8
030F8:  CLRF   x4B
030FA:  MOVLW  0F
030FC:  MOVWF  x4D
030FE:  MOVLW  89
03100:  MOVWF  x4C
03102:  MOVLB  0
03104:  CALL   1CB4
03108:  MOVFF  82E,84A
0310C:  MOVLB  8
0310E:  CLRF   x4B
03110:  MOVLW  0F
03112:  MOVWF  x4D
03114:  MOVLW  92
03116:  MOVWF  x4C
03118:  MOVLB  0
0311A:  CALL   1CB4
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
0311E:  MOVFF  82F,847
03122:  MOVFF  82E,846
03126:  MOVFF  82D,845
0312A:  MOVFF  82C,844
0312E:  MOVLW  08
03130:  MOVLB  8
03132:  MOVWF  x49
03134:  MOVLW  3E
03136:  MOVWF  x48
03138:  MOVLW  05
0313A:  MOVWF  x4A
0313C:  MOVFF  835,84C
03140:  MOVFF  834,84B
03144:  MOVFF  837,84E
03148:  MOVFF  836,84D
0314C:  MOVLB  0
0314E:  CALL   2C80
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03152:  MOVLW  02
03154:  MOVWF  00
03156:  DECFSZ 00,F
03158:  BRA    3156
0315A:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0315C:  MOVFF  82E,84A
03160:  MOVLW  01
03162:  MOVLB  8
03164:  MOVWF  x4B
03166:  MOVLW  0F
03168:  MOVWF  x4D
0316A:  MOVLW  89
0316C:  MOVWF  x4C
0316E:  MOVLB  0
03170:  CALL   1CB4
03174:  MOVFF  82E,84A
03178:  MOVLB  8
0317A:  CLRF   x4B
0317C:  MOVLW  0F
0317E:  MOVWF  x4D
03180:  MOVLW  92
03182:  MOVWF  x4C
03184:  MOVLB  0
03186:  CALL   1CB4
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0318A:  MOVLB  8
0318C:  CLRF   x43
0318E:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03190:  MOVFF  82F,847
03194:  MOVFF  82E,846
03198:  MOVFF  82D,845
0319C:  MOVFF  82C,844
031A0:  CALL   2DDC
031A4:  MOVF   01,W
031A6:  ANDLW  01
031A8:  SUBLW  01
031AA:  BTFSS  FD8.2
031AC:  GOTO   31FE
....................       if(timeout_counter > 10)
031B0:  MOVLB  8
031B2:  MOVF   x43,W
031B4:  SUBLW  0A
031B6:  BTFSS  FD8.0
031B8:  BRA    31C0
031BA:  MOVLB  0
031BC:  GOTO   31D2
031C0:  MOVLB  0
....................          delay_ms(200);
031C2:  MOVLW  C8
031C4:  MOVLB  8
031C6:  MOVWF  x44
031C8:  MOVLB  0
031CA:  CALL   1694
031CE:  GOTO   31DE
....................       else
....................          delay_ms(10);   
031D2:  MOVLW  0A
031D4:  MOVLB  8
031D6:  MOVWF  x44
031D8:  MOVLB  0
031DA:  CALL   1694
....................       
....................       if(timeout_counter > 100){
031DE:  MOVLB  8
031E0:  MOVF   x43,W
031E2:  SUBLW  64
031E4:  BTFSS  FD8.0
031E6:  BRA    31EE
031E8:  MOVLB  0
031EA:  GOTO   31F4
031EE:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
031F0:  GOTO   31FE
....................       }  
....................       timeout_counter++;
031F4:  MOVLB  8
031F6:  INCF   x43,F
031F8:  MOVLB  0
031FA:  GOTO   3190
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
031FE:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
01FA4:  MOVLW  9F
01FA6:  MOVLB  8
01FA8:  MOVWF  x44
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_high(flash_stream.cs_pin);
01FAA:  MOVFF  82E,84A
01FAE:  MOVLW  01
01FB0:  MOVWF  x4B
01FB2:  MOVLW  0F
01FB4:  MOVWF  x4D
01FB6:  MOVLW  89
01FB8:  MOVWF  x4C
01FBA:  MOVLB  0
01FBC:  CALL   1CB4
01FC0:  MOVFF  82E,84A
01FC4:  MOVLB  8
01FC6:  CLRF   x4B
01FC8:  MOVLW  0F
01FCA:  MOVWF  x4D
01FCC:  MOVLW  92
01FCE:  MOVWF  x4C
01FD0:  MOVLB  0
01FD2:  CALL   1CB4
....................    //delay_us(10);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
01FD6:  MOVFF  82F,84D
01FDA:  MOVFF  82E,84C
01FDE:  MOVFF  82D,84B
01FE2:  MOVFF  82C,84A
01FE6:  MOVLW  08
01FE8:  MOVLB  8
01FEA:  MOVWF  x4F
01FEC:  MOVLW  44
01FEE:  MOVWF  x4E
01FF0:  CLRF   x51
01FF2:  MOVLW  01
01FF4:  MOVWF  x50
01FF6:  MOVLW  08
01FF8:  MOVWF  x53
01FFA:  MOVLW  30
01FFC:  MOVWF  x52
01FFE:  CLRF   x57
02000:  CLRF   x56
02002:  CLRF   x55
02004:  MOVLW  14
02006:  MOVWF  x54
02008:  MOVLB  0
0200A:  CALL   1D1C
....................    output_high(flash_stream.cs_pin);
0200E:  MOVFF  82E,84A
02012:  MOVLW  01
02014:  MOVLB  8
02016:  MOVWF  x4B
02018:  MOVLW  0F
0201A:  MOVWF  x4D
0201C:  MOVLW  89
0201E:  MOVWF  x4C
02020:  MOVLB  0
02022:  CALL   1CB4
02026:  MOVFF  82E,84A
0202A:  MOVLB  8
0202C:  CLRF   x4B
0202E:  MOVLW  0F
02030:  MOVWF  x4D
02032:  MOVLW  92
02034:  MOVWF  x4C
02036:  MOVLB  0
02038:  CALL   1CB4
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    
....................    fprintf(PC,"Read ID:");
0203C:  MOVLW  CA
0203E:  MOVWF  FF6
02040:  MOVLW  00
02042:  MOVWF  FF7
02044:  MOVLW  00
02046:  MOVWF  FF8
02048:  CALL   1714
....................    
....................    for (unsigned int8 i = 0; i < sizeof(read_id_data.bytes); i++) {
0204C:  MOVLB  8
0204E:  CLRF   x45
02050:  MOVLB  0
02052:  MOVLB  8
02054:  MOVF   x45,W
02056:  SUBLW  13
02058:  BTFSC  FD8.0
0205A:  BRA    2062
0205C:  MOVLB  0
0205E:  GOTO   209C
02062:  MOVLB  0
....................       fprintf(PC, "%02X ", read_id_data.bytes[i]);
02064:  CLRF   03
02066:  MOVLB  8
02068:  MOVF   x45,W
0206A:  ADDLW  30
0206C:  MOVWF  FE9
0206E:  MOVLW  08
02070:  ADDWFC 03,W
02072:  MOVWF  FEA
02074:  MOVFF  FEF,846
02078:  MOVFF  846,847
0207C:  MOVLW  37
0207E:  MOVWF  x48
02080:  MOVLB  0
02082:  CALL   1F34
02086:  MOVLW  20
02088:  MOVLB  8
0208A:  MOVWF  x49
0208C:  MOVLB  0
0208E:  CALL   16C2
02092:  MOVLB  8
02094:  INCF   x45,F
02096:  MOVLB  0
02098:  GOTO   2052
....................    }
....................    
....................    fprintf(PC,"\r\n");
0209C:  MOVLW  0D
0209E:  MOVLB  8
020A0:  MOVWF  x49
020A2:  MOVLB  0
020A4:  CALL   16C2
020A8:  MOVLW  0A
020AA:  MOVLB  8
020AC:  MOVWF  x49
020AE:  MOVLB  0
020B0:  CALL   16C2
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
020B4:  MOVLB  8
020B6:  MOVF   x30,W
020B8:  SUBLW  20
020BA:  BTFSC  FD8.2
020BC:  BRA    20C4
020BE:  MOVLB  0
020C0:  GOTO   20D2
020C4:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
020C6:  MOVLW  01
020C8:  MOVWF  01
020CA:  GOTO   20DA
....................    }
020CE:  GOTO   20DA
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
020D2:  MOVLW  00
020D4:  MOVWF  01
020D6:  GOTO   20DA
....................    }
020DA:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
*
000D4:  MOVLW  80
000D6:  MOVWF  FCF
000D8:  MOVLW  12
000DA:  MOVWF  FCE
000DC:  NOP   
....................    sec++;
000DE:  MOVLW  01
000E0:  ADDWF  25,F
000E2:  BTFSC  FD8.0
000E4:  INCF   26,F
000E6:  BTFSC  FD8.2
000E8:  INCF   27,F
000EA:  BTFSC  FD8.2
000EC:  INCF   28,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
000EE:  BCF    F9E.0
000F0:  GOTO   0074
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
....................    clear_interrupt(INT_TIMER1);
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
....................    set_timer1((2 ^ 16) - CLOCK_FREQUENCY); 
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
....................    enable_interrupts(GLOBAL);
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
02B8E:  MOVFF  25,00
02B92:  MOVFF  26,01
02B96:  MOVFF  27,02
02B9A:  MOVFF  28,03
02B9E:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
03B6C:  MOVLB  7
03B6E:  MOVF   xEC,W
03B70:  MOVWF  FE9
03B72:  MOVF   xED,W
03B74:  MOVWF  FEA
03B76:  MOVFF  FEF,7EF
03B7A:  MOVLW  01
03B7C:  MOVWF  xF0
03B7E:  MOVLB  0
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
03B80:  MOVLB  7
03B82:  MOVF   xEE,W
03B84:  SUBWF  xF0,W
03B86:  BTFSS  FD8.0
03B88:  BRA    3B90
03B8A:  MOVLB  0
03B8C:  GOTO   3BAC
03B90:  MOVLB  0
....................       crc ^= frame[i++];
03B92:  MOVLB  7
03B94:  MOVF   xF0,W
03B96:  INCF   xF0,F
03B98:  ADDWF  xEC,W
03B9A:  MOVWF  FE9
03B9C:  MOVLW  00
03B9E:  ADDWFC xED,W
03BA0:  MOVWF  FEA
03BA2:  MOVF   FEF,W
03BA4:  XORWF  xEF,F
03BA6:  MOVLB  0
03BA8:  GOTO   3B80
....................    return crc;
03BAC:  MOVLB  7
03BAE:  MOVF   xEF,W
03BB0:  MOVWF  01
03BB2:  MOVLB  0
03BB4:  RETURN 0
.................... }
.................... 
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4])
.................... {
....................     buf[0] = (int8)(value >> 24);   // MSB
....................     buf[1] = (int8)(value >> 16);
....................     buf[2] = (int8)(value >>  8);
....................     buf[3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... 
.................... int32 be_array_to_int32(int8 buf[4])
.................... {
....................     return ((int32)buf[0] << 24) |
....................            ((int32)buf[1] << 16) |
....................            ((int32)buf[2] <<  8) |
....................            ((int32)buf[3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... #include "../lib/tool/smf_function.c"
.................... #include "../device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... void data_copy()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start smf_write__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (!is_connect(mis_fm))
....................         {
....................             fprintf(PC, "Error: MIS FM is not connected\r\n");
....................         }
....................         if (!is_connect(smf))
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
....................             return;
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... 
.................... void smf_write()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
07604:  MOVLW  5A
07606:  MOVWF  FF6
07608:  MOVLW  03
0760A:  MOVWF  FF7
0760C:  MOVLW  00
0760E:  MOVWF  FF8
07610:  CALL   1714
....................     fprintf(PC, "___Start smf_write__\r\n");
07614:  MOVLW  74
07616:  MOVWF  FF6
07618:  MOVLW  03
0761A:  MOVWF  FF7
0761C:  MOVLW  00
0761E:  MOVWF  FF8
07620:  CALL   1714
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
07624:  MOVLB  3
07626:  CLRF   xC6
07628:  MOVLB  0
0762A:  CALL   6A2C
0762E:  MOVF   01,F
07630:  BTFSS  FD8.2
07632:  GOTO   830C
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
07636:  MOVLW  8C
07638:  MOVWF  FF6
0763A:  MOVLW  03
0763C:  MOVWF  FF7
0763E:  MOVLW  00
07640:  MOVWF  FF8
07642:  MOVLW  07
07644:  MOVLB  7
07646:  MOVWF  xEC
07648:  MOVLB  0
0764A:  CALL   1744
0764E:  MOVFF  3C6,419
07652:  MOVLW  18
07654:  MOVLB  4
07656:  MOVWF  x1A
07658:  MOVLB  0
0765A:  CALL   6B1A
0765E:  MOVLW  95
07660:  MOVWF  FF6
07662:  MOVLW  03
07664:  MOVWF  FF7
07666:  MOVLW  00
07668:  MOVWF  FF8
0766A:  MOVLW  12
0766C:  MOVLB  7
0766E:  MOVWF  xEC
07670:  MOVLB  0
07672:  CALL   1744
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
07676:  GOTO   6C2A
0767A:  MOVFF  02,3C8
0767E:  MOVFF  01,3C7
07682:  MOVLB  3
07684:  MOVF   xC7,W
07686:  MOVWF  01
07688:  MOVF   xC8,W
0768A:  MOVWF  03
0768C:  MOVF   01,W
0768E:  MOVWF  FE9
07690:  MOVFF  03,FEA
*
0769A:  MOVLB  4
0769C:  MOVWF  x15
0769E:  MOVFF  415,41C
076A2:  MOVLB  0
076A4:  GOTO   6C84
076A8:  MOVFF  02,03
076AC:  MOVF   01,W
076AE:  MOVWF  FE1
076B0:  MOVFF  03,FE2
076B4:  MOVLW  03
076B6:  MOVWF  FEA
076B8:  MOVLW  C9
076BA:  MOVWF  FE9
076BC:  MOVLW  09
076BE:  MOVWF  01
076C0:  MOVFF  FE6,FEE
076C4:  DECFSZ 01,F
076C6:  GOTO   76C0
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
076CA:  MOVLW  01
076CC:  MOVLB  3
076CE:  ADDWF  xC6,W
076D0:  CLRF   03
076D2:  ADDLW  1D
076D4:  MOVWF  FE9
076D6:  MOVLW  00
076D8:  ADDWFC 03,W
076DA:  MOVWF  FEA
076DC:  MOVFF  3D1,FEF
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
076E0:  MOVFF  3CC,3D5
076E4:  MOVFF  3CB,3D4
076E8:  MOVFF  3CA,3D3
076EC:  MOVFF  3C9,3D2
076F0:  MOVFF  3D0,3D9
076F4:  MOVFF  3CF,3D8
076F8:  MOVFF  3CE,3D7
076FC:  MOVFF  3CD,3D6
07700:  MOVLW  01
07702:  ADDWF  xC7,W
07704:  MOVWF  FE9
07706:  MOVLW  00
07708:  ADDWFC xC8,W
0770A:  MOVWF  FEA
0770C:  MOVFF  FEF,3DA
07710:  MOVFF  FEC,3DB
07714:  MOVFF  FEC,3DC
07718:  MOVFF  FEC,3DD
0771C:  MOVF   FED,F
0771E:  MOVF   FED,F
07720:  MOVF   FED,F
07722:  MOVLW  05
07724:  ADDWF  xC7,W
07726:  MOVWF  FE9
07728:  MOVLW  00
0772A:  ADDWFC xC8,W
0772C:  MOVWF  FEA
0772E:  MOVFF  FEF,3DE
07732:  MOVFF  FEC,3DF
07736:  MOVFF  FEC,3E0
0773A:  MOVFF  FEC,3E1
0773E:  MOVF   FED,F
07740:  MOVF   FED,F
07742:  MOVF   FED,F
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
07744:  MOVLW  A8
07746:  MOVWF  FF6
07748:  MOVLW  03
0774A:  MOVWF  FF7
0774C:  MOVLW  00
0774E:  MOVWF  FF8
07750:  MOVLW  25
07752:  MOVLB  7
07754:  MOVWF  xEC
07756:  MOVLB  0
07758:  CALL   1744
0775C:  MOVFF  3D5,847
07760:  MOVLW  37
07762:  MOVLB  8
07764:  MOVWF  x48
07766:  MOVLB  0
07768:  CALL   1F34
0776C:  MOVFF  3D4,847
07770:  MOVLW  37
07772:  MOVLB  8
07774:  MOVWF  x48
07776:  MOVLB  0
07778:  CALL   1F34
0777C:  MOVFF  3D3,847
07780:  MOVLW  37
07782:  MOVLB  8
07784:  MOVWF  x48
07786:  MOVLB  0
07788:  CALL   1F34
0778C:  MOVFF  3D2,847
07790:  MOVLW  37
07792:  MOVLB  8
07794:  MOVWF  x48
07796:  MOVLB  0
07798:  CALL   1F34
0779C:  MOVLW  0D
0779E:  MOVLB  8
077A0:  MOVWF  x49
077A2:  MOVLB  0
077A4:  CALL   16C2
077A8:  MOVLW  0A
077AA:  MOVLB  8
077AC:  MOVWF  x49
077AE:  MOVLB  0
077B0:  CALL   16C2
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
077B4:  MOVLW  D6
077B6:  MOVWF  FF6
077B8:  MOVLW  03
077BA:  MOVWF  FF7
077BC:  MOVLW  00
077BE:  MOVWF  FF8
077C0:  MOVLW  25
077C2:  MOVLB  7
077C4:  MOVWF  xEC
077C6:  MOVLB  0
077C8:  CALL   1744
077CC:  MOVFF  3D9,847
077D0:  MOVLW  37
077D2:  MOVLB  8
077D4:  MOVWF  x48
077D6:  MOVLB  0
077D8:  CALL   1F34
077DC:  MOVFF  3D8,847
077E0:  MOVLW  37
077E2:  MOVLB  8
077E4:  MOVWF  x48
077E6:  MOVLB  0
077E8:  CALL   1F34
077EC:  MOVFF  3D7,847
077F0:  MOVLW  37
077F2:  MOVLB  8
077F4:  MOVWF  x48
077F6:  MOVLB  0
077F8:  CALL   1F34
077FC:  MOVFF  3D6,847
07800:  MOVLW  37
07802:  MOVLB  8
07804:  MOVWF  x48
07806:  MOVLB  0
07808:  CALL   1F34
0780C:  MOVLW  0D
0780E:  MOVLB  8
07810:  MOVWF  x49
07812:  MOVLB  0
07814:  CALL   16C2
07818:  MOVLW  0A
0781A:  MOVLB  8
0781C:  MOVWF  x49
0781E:  MOVLB  0
07820:  CALL   16C2
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
07824:  MOVLW  04
07826:  MOVWF  FF6
07828:  MOVLW  04
0782A:  MOVWF  FF7
0782C:  MOVLW  00
0782E:  MOVWF  FF8
07830:  MOVLW  25
07832:  MOVLB  7
07834:  MOVWF  xEC
07836:  MOVLB  0
07838:  CALL   1744
0783C:  MOVFF  3DD,847
07840:  MOVLW  37
07842:  MOVLB  8
07844:  MOVWF  x48
07846:  MOVLB  0
07848:  CALL   1F34
0784C:  MOVFF  3DC,847
07850:  MOVLW  37
07852:  MOVLB  8
07854:  MOVWF  x48
07856:  MOVLB  0
07858:  CALL   1F34
0785C:  MOVFF  3DB,847
07860:  MOVLW  37
07862:  MOVLB  8
07864:  MOVWF  x48
07866:  MOVLB  0
07868:  CALL   1F34
0786C:  MOVFF  3DA,847
07870:  MOVLW  37
07872:  MOVLB  8
07874:  MOVWF  x48
07876:  MOVLB  0
07878:  CALL   1F34
0787C:  MOVLW  0D
0787E:  MOVLB  8
07880:  MOVWF  x49
07882:  MOVLB  0
07884:  CALL   16C2
07888:  MOVLW  0A
0788A:  MOVLB  8
0788C:  MOVWF  x49
0788E:  MOVLB  0
07890:  CALL   16C2
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
07894:  MOVLW  32
07896:  MOVWF  FF6
07898:  MOVLW  04
0789A:  MOVWF  FF7
0789C:  MOVLW  00
0789E:  MOVWF  FF8
078A0:  MOVLW  25
078A2:  MOVLB  7
078A4:  MOVWF  xEC
078A6:  MOVLB  0
078A8:  CALL   1744
078AC:  MOVLW  41
078AE:  MOVWF  FE9
078B0:  MOVFF  3E1,418
078B4:  MOVFF  3E0,417
078B8:  MOVFF  3DF,416
078BC:  MOVFF  3DE,415
078C0:  CALL   6DFC
078C4:  MOVLW  5A
078C6:  MOVWF  FF6
078C8:  MOVLW  04
078CA:  MOVWF  FF7
078CC:  MOVLW  00
078CE:  MOVWF  FF8
078D0:  MOVLW  04
078D2:  MOVLB  7
078D4:  MOVWF  xEC
078D6:  MOVLB  0
078D8:  CALL   1744
078DC:  MOVFF  3E1,847
078E0:  MOVLW  57
078E2:  MOVLB  8
078E4:  MOVWF  x48
078E6:  MOVLB  0
078E8:  CALL   1F34
078EC:  MOVFF  3E0,847
078F0:  MOVLW  57
078F2:  MOVLB  8
078F4:  MOVWF  x48
078F6:  MOVLB  0
078F8:  CALL   1F34
078FC:  MOVFF  3DF,847
07900:  MOVLW  57
07902:  MOVLB  8
07904:  MOVWF  x48
07906:  MOVLB  0
07908:  CALL   1F34
0790C:  MOVFF  3DE,847
07910:  MOVLW  57
07912:  MOVLB  8
07914:  MOVWF  x48
07916:  MOVLB  0
07918:  CALL   1F34
0791C:  MOVLW  61
0791E:  MOVWF  FF6
07920:  MOVLW  04
07922:  MOVWF  FF7
07924:  MOVLW  00
07926:  MOVWF  FF8
07928:  MOVLW  05
0792A:  MOVLB  7
0792C:  MOVWF  xEC
0792E:  MOVLB  0
07930:  CALL   1744
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
07934:  MOVFF  E5,82F
07938:  MOVFF  E4,82E
0793C:  MOVFF  E3,82D
07940:  MOVFF  E2,82C
07944:  CALL   1FA4
07948:  MOVF   01,F
0794A:  BTFSS  FD8.2
0794C:  GOTO   7964
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
07950:  MOVLW  68
07952:  MOVWF  FF6
07954:  MOVLW  04
07956:  MOVWF  FF7
07958:  MOVLW  00
0795A:  MOVWF  FF8
0795C:  CALL   1714
....................             return;
07960:  GOTO   832C
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
07964:  MOVFF  E5,418
07968:  MOVFF  E4,417
0796C:  MOVFF  E3,416
07970:  MOVFF  E2,415
07974:  MOVFF  3D5,41C
07978:  MOVFF  3D4,41B
0797C:  MOVFF  3D3,41A
07980:  MOVFF  3D2,419
07984:  MOVLW  03
07986:  MOVLB  4
07988:  MOVWF  x1E
0798A:  MOVLW  E2
0798C:  MOVWF  x1D
0798E:  CLRF   x22
07990:  CLRF   x21
07992:  CLRF   x20
07994:  MOVLW  04
07996:  MOVWF  x1F
07998:  MOVLB  0
0799A:  CALL   20DC
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
0799E:  MOVLB  4
079A0:  CLRF   x18
079A2:  CLRF   x17
079A4:  CLRF   x16
079A6:  MOVFF  3E5,415
079AA:  MOVFF  415,418
079AE:  CLRF   x15
079B0:  CLRF   x16
079B2:  CLRF   x17
079B4:  CLRF   x1D
079B6:  CLRF   x1C
079B8:  CLRF   x1B
079BA:  MOVFF  3E4,41A
079BE:  MOVFF  41B,03
079C2:  MOVFF  41A,02
079C6:  CLRF   00
079C8:  CLRF   01
079CA:  MOVF   00,W
079CC:  IORWF  x15,F
079CE:  MOVF   01,W
079D0:  IORWF  x16,F
079D2:  MOVF   02,W
079D4:  IORWF  x17,F
079D6:  MOVF   03,W
079D8:  IORWF  x18,F
079DA:  CLRF   x1D
079DC:  CLRF   x1C
079DE:  CLRF   x1B
079E0:  MOVFF  3E3,41A
079E4:  MOVFF  41C,03
079E8:  MOVFF  41B,02
079EC:  MOVFF  41A,01
079F0:  CLRF   00
079F2:  MOVF   00,W
079F4:  IORWF  x15,F
079F6:  MOVF   01,W
079F8:  IORWF  x16,F
079FA:  MOVF   02,W
079FC:  IORWF  x17,F
079FE:  MOVF   03,W
07A00:  IORWF  x18,F
07A02:  MOVFF  3E2,00
07A06:  CLRF   01
07A08:  CLRF   02
07A0A:  CLRF   03
07A0C:  MOVF   00,W
07A0E:  IORWF  x15,W
07A10:  MOVLB  3
07A12:  MOVWF  xE6
07A14:  MOVF   01,W
07A16:  MOVLB  4
07A18:  IORWF  x16,W
07A1A:  MOVLB  3
07A1C:  MOVWF  xE7
07A1E:  MOVF   02,W
07A20:  MOVLB  4
07A22:  IORWF  x17,W
07A24:  MOVLB  3
07A26:  MOVWF  xE8
07A28:  MOVF   03,W
07A2A:  MOVLB  4
07A2C:  IORWF  x18,W
07A2E:  MOVLB  3
07A30:  MOVWF  xE9
07A32:  MOVLW  04
07A34:  ADDWF  xD2,W
07A36:  MOVLB  4
07A38:  MOVWF  x15
07A3A:  MOVLW  00
07A3C:  MOVLB  3
07A3E:  ADDWFC xD3,W
07A40:  MOVLB  4
07A42:  MOVWF  x16
07A44:  MOVLW  00
07A46:  MOVLB  3
07A48:  ADDWFC xD4,W
07A4A:  MOVLB  4
07A4C:  MOVWF  x17
07A4E:  MOVLW  00
07A50:  MOVLB  3
07A52:  ADDWFC xD5,W
07A54:  MOVLB  4
07A56:  MOVWF  x18
07A58:  MOVFF  E5,423
07A5C:  MOVFF  E4,422
07A60:  MOVFF  E3,421
07A64:  MOVFF  E2,420
07A68:  MOVFF  418,427
07A6C:  MOVFF  417,426
07A70:  MOVFF  416,425
07A74:  MOVFF  415,424
07A78:  MOVLB  0
07A7A:  GOTO   6EFC
07A7E:  MOVFF  01,3EA
....................         fprintf(PC, "Size area read\r\n");
07A82:  MOVLW  86
07A84:  MOVWF  FF6
07A86:  MOVLW  04
07A88:  MOVWF  FF7
07A8A:  MOVLW  00
07A8C:  MOVWF  FF8
07A8E:  CALL   1714
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
07A92:  MOVLW  98
07A94:  MOVWF  FF6
07A96:  MOVLW  04
07A98:  MOVWF  FF7
07A9A:  MOVLW  00
07A9C:  MOVWF  FF8
07A9E:  MOVLW  0C
07AA0:  MOVLB  7
07AA2:  MOVWF  xEC
07AA4:  MOVLB  0
07AA6:  CALL   1744
07AAA:  MOVLW  41
07AAC:  MOVWF  FE9
07AAE:  MOVFF  3E9,418
07AB2:  MOVFF  3E8,417
07AB6:  MOVFF  3E7,416
07ABA:  MOVFF  3E6,415
07ABE:  CALL   6DFC
07AC2:  MOVLW  A7
07AC4:  MOVWF  FF6
07AC6:  MOVLW  04
07AC8:  MOVWF  FF7
07ACA:  MOVLW  00
07ACC:  MOVWF  FF8
07ACE:  MOVLW  08
07AD0:  MOVLB  7
07AD2:  MOVWF  xEC
07AD4:  MOVLB  0
07AD6:  CALL   1744
07ADA:  MOVFF  3D5,847
07ADE:  MOVLW  37
07AE0:  MOVLB  8
07AE2:  MOVWF  x48
07AE4:  MOVLB  0
07AE6:  CALL   1F34
07AEA:  MOVFF  3D4,847
07AEE:  MOVLW  37
07AF0:  MOVLB  8
07AF2:  MOVWF  x48
07AF4:  MOVLB  0
07AF6:  CALL   1F34
07AFA:  MOVFF  3D3,847
07AFE:  MOVLW  37
07B00:  MOVLB  8
07B02:  MOVWF  x48
07B04:  MOVLB  0
07B06:  CALL   1F34
07B0A:  MOVFF  3D2,847
07B0E:  MOVLW  37
07B10:  MOVLB  8
07B12:  MOVWF  x48
07B14:  MOVLB  0
07B16:  CALL   1F34
07B1A:  MOVLW  B4
07B1C:  MOVWF  FF6
07B1E:  MOVLW  04
07B20:  MOVWF  FF7
07B22:  MOVLW  00
07B24:  MOVWF  FF8
07B26:  MOVLW  03
07B28:  MOVLB  7
07B2A:  MOVWF  xEC
07B2C:  MOVLB  0
07B2E:  CALL   1744
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
07B32:  MOVLW  04
07B34:  MOVLB  3
07B36:  ADDWF  xD2,W
07B38:  MOVLB  4
07B3A:  MOVWF  x15
07B3C:  MOVLW  00
07B3E:  MOVLB  3
07B40:  ADDWFC xD3,W
07B42:  MOVLB  4
07B44:  MOVWF  x16
07B46:  MOVLW  00
07B48:  MOVLB  3
07B4A:  ADDWFC xD4,W
07B4C:  MOVLB  4
07B4E:  MOVWF  x17
07B50:  MOVLW  00
07B52:  MOVLB  3
07B54:  ADDWFC xD5,W
07B56:  MOVLB  4
07B58:  MOVWF  x18
07B5A:  MOVLW  B8
07B5C:  MOVWF  FF6
07B5E:  MOVLW  04
07B60:  MOVWF  FF7
07B62:  MOVLW  00
07B64:  MOVWF  FF8
07B66:  MOVLW  0C
07B68:  MOVLB  7
07B6A:  MOVWF  xEC
07B6C:  MOVLB  0
07B6E:  CALL   1744
07B72:  MOVFF  3EA,419
07B76:  MOVLW  18
07B78:  MOVLB  4
07B7A:  MOVWF  x1A
07B7C:  MOVLB  0
07B7E:  CALL   6B1A
07B82:  MOVLW  C6
07B84:  MOVWF  FF6
07B86:  MOVLW  04
07B88:  MOVWF  FF7
07B8A:  MOVLW  00
07B8C:  MOVWF  FF8
07B8E:  MOVLW  09
07B90:  MOVLB  7
07B92:  MOVWF  xEC
07B94:  MOVLB  0
07B96:  CALL   1744
07B9A:  MOVFF  418,847
07B9E:  MOVLW  37
07BA0:  MOVLB  8
07BA2:  MOVWF  x48
07BA4:  MOVLB  0
07BA6:  CALL   1F34
07BAA:  MOVFF  417,847
07BAE:  MOVLW  37
07BB0:  MOVLB  8
07BB2:  MOVWF  x48
07BB4:  MOVLB  0
07BB6:  CALL   1F34
07BBA:  MOVFF  416,847
07BBE:  MOVLW  37
07BC0:  MOVLB  8
07BC2:  MOVWF  x48
07BC4:  MOVLB  0
07BC6:  CALL   1F34
07BCA:  MOVFF  415,847
07BCE:  MOVLW  37
07BD0:  MOVLB  8
07BD2:  MOVWF  x48
07BD4:  MOVLB  0
07BD6:  CALL   1F34
07BDA:  MOVLW  D4
07BDC:  MOVWF  FF6
07BDE:  MOVLW  04
07BE0:  MOVWF  FF7
07BE2:  MOVLW  00
07BE4:  MOVWF  FF8
07BE6:  MOVLW  05
07BE8:  MOVLB  7
07BEA:  MOVWF  xEC
07BEC:  MOVLB  0
07BEE:  CALL   1744
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
07BF2:  MOVLB  3
07BF4:  MOVF   xD2,W
07BF6:  MOVWF  xEB
07BF8:  MOVLW  10
07BFA:  ADDWF  xD3,W
07BFC:  MOVWF  xEC
07BFE:  MOVLW  00
07C00:  ADDWFC xD4,W
07C02:  MOVWF  xED
07C04:  MOVLW  00
07C06:  ADDWFC xD5,W
07C08:  MOVWF  xEE
07C0A:  MOVFF  3D9,3F2
07C0E:  MOVFF  3D8,3F1
07C12:  MOVFF  3D7,3F0
07C16:  MOVFF  3D6,3EF
07C1A:  MOVF   xEB,W
07C1C:  SUBWF  xEF,W
07C1E:  MOVWF  xF3
07C20:  MOVF   xEC,W
07C22:  SUBWFB xF0,W
07C24:  MOVWF  xF4
07C26:  MOVF   xED,W
07C28:  SUBWFB xF1,W
07C2A:  MOVWF  xF5
07C2C:  MOVF   xEE,W
07C2E:  SUBWFB xF2,W
07C30:  MOVWF  xF6
07C32:  MOVF   xE6,W
07C34:  ADDWF  xEB,W
07C36:  MOVWF  xF7
07C38:  MOVF   xE7,W
07C3A:  ADDWFC xEC,W
07C3C:  MOVWF  xF8
07C3E:  MOVF   xE8,W
07C40:  ADDWFC xED,W
07C42:  MOVWF  xF9
07C44:  MOVF   xE9,W
07C46:  ADDWFC xEE,W
07C48:  MOVWF  xFA
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
07C4A:  MOVF   xDE,W
07C4C:  ADDWF  xE6,W
07C4E:  MOVLB  4
07C50:  MOVWF  x15
07C52:  MOVLB  3
07C54:  MOVF   xDF,W
07C56:  ADDWFC xE7,W
07C58:  MOVLB  4
07C5A:  MOVWF  x16
07C5C:  MOVLB  3
07C5E:  MOVF   xE0,W
07C60:  ADDWFC xE8,W
07C62:  MOVLB  4
07C64:  MOVWF  x17
07C66:  MOVLB  3
07C68:  MOVF   xE1,W
07C6A:  ADDWFC xE9,W
07C6C:  MOVLB  4
07C6E:  MOVWF  x18
07C70:  MOVLB  3
07C72:  MOVF   xF6,W
07C74:  MOVLB  4
07C76:  SUBWF  x18,W
07C78:  BTFSC  FD8.0
07C7A:  BRA    7C82
07C7C:  MOVLB  0
07C7E:  GOTO   7DA2
07C82:  MOVLB  0
07C84:  BTFSS  FD8.2
07C86:  GOTO   7CD2
07C8A:  MOVLB  3
07C8C:  MOVF   xF5,W
07C8E:  MOVLB  4
07C90:  SUBWF  x17,W
07C92:  BTFSC  FD8.0
07C94:  BRA    7C9C
07C96:  MOVLB  0
07C98:  GOTO   7DA2
07C9C:  MOVLB  0
07C9E:  BTFSS  FD8.2
07CA0:  GOTO   7CD2
07CA4:  MOVLB  3
07CA6:  MOVF   xF4,W
07CA8:  MOVLB  4
07CAA:  SUBWF  x16,W
07CAC:  BTFSC  FD8.0
07CAE:  BRA    7CB6
07CB0:  MOVLB  0
07CB2:  GOTO   7DA2
07CB6:  MOVLB  0
07CB8:  BTFSS  FD8.2
07CBA:  GOTO   7CD2
07CBE:  MOVLB  4
07CC0:  MOVF   x15,W
07CC2:  MOVLB  3
07CC4:  SUBWF  xF3,W
07CC6:  BTFSS  FD8.0
07CC8:  BRA    7CD0
07CCA:  MOVLB  0
07CCC:  GOTO   7DA2
07CD0:  MOVLB  0
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
07CD2:  MOVLW  DA
07CD4:  MOVWF  FF6
07CD6:  MOVLW  04
07CD8:  MOVWF  FF7
07CDA:  MOVLW  00
07CDC:  MOVWF  FF8
07CDE:  CALL   1714
....................             loop_count++;
07CE2:  MOVLB  3
07CE4:  INCF   xEA,F
....................             used_size = 0;
07CE6:  CLRF   xE9
07CE8:  CLRF   xE8
07CEA:  CLRF   xE7
07CEC:  CLRF   xE6
....................             data_write_addr = data_region_start;
07CEE:  MOVFF  3EE,3FA
07CF2:  MOVFF  3ED,3F9
07CF6:  MOVFF  3EC,3F8
07CFA:  MOVFF  3EB,3F7
....................             unsigned int32 erase_ptr = data_region_start;
07CFE:  MOVFF  3EE,3FE
07D02:  MOVFF  3ED,3FD
07D06:  MOVFF  3EC,3FC
07D0A:  MOVFF  3EB,3FB
07D0E:  MOVLB  0
....................             while (erase_ptr < data_region_end)
07D10:  MOVLB  3
07D12:  MOVF   xFE,W
07D14:  SUBWF  xF2,W
07D16:  BTFSC  FD8.0
07D18:  BRA    7D20
07D1A:  MOVLB  0
07D1C:  GOTO   7DA2
07D20:  MOVLB  0
07D22:  BTFSS  FD8.2
07D24:  GOTO   7D6A
07D28:  MOVLB  3
07D2A:  MOVF   xFD,W
07D2C:  SUBWF  xF1,W
07D2E:  BTFSC  FD8.0
07D30:  BRA    7D38
07D32:  MOVLB  0
07D34:  GOTO   7DA2
07D38:  MOVLB  0
07D3A:  BTFSS  FD8.2
07D3C:  GOTO   7D6A
07D40:  MOVLB  3
07D42:  MOVF   xFC,W
07D44:  SUBWF  xF0,W
07D46:  BTFSC  FD8.0
07D48:  BRA    7D50
07D4A:  MOVLB  0
07D4C:  GOTO   7DA2
07D50:  MOVLB  0
07D52:  BTFSS  FD8.2
07D54:  GOTO   7D6A
07D58:  MOVLB  3
07D5A:  MOVF   xEF,W
07D5C:  SUBWF  xFB,W
07D5E:  BTFSS  FD8.0
07D60:  BRA    7D68
07D62:  MOVLB  0
07D64:  GOTO   7DA2
07D68:  MOVLB  0
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
07D6A:  MOVFF  E5,82F
07D6E:  MOVFF  E4,82E
07D72:  MOVFF  E3,82D
07D76:  MOVFF  E2,82C
07D7A:  MOVFF  3FE,833
07D7E:  MOVFF  3FD,832
07D82:  MOVFF  3FC,831
07D86:  MOVFF  3FB,830
07D8A:  CALL   3200
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
07D8E:  MOVLW  10
07D90:  MOVLB  3
07D92:  ADDWF  xFC,F
07D94:  MOVLW  00
07D96:  ADDWFC xFD,F
07D98:  MOVLW  00
07D9A:  ADDWFC xFE,F
07D9C:  MOVLB  0
07D9E:  GOTO   7D10
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
07DA2:  MOVLB  3
07DA4:  CLRF   xFF
07DA6:  MOVF   xF8,W
07DA8:  ANDLW  F0
07DAA:  MOVLB  4
07DAC:  MOVWF  x00
07DAE:  CLRF   x01
07DB0:  CLRF   x02
07DB2:  MOVLB  3
07DB4:  MOVF   xDE,W
07DB6:  ADDWF  xF7,W
07DB8:  MOVLB  4
07DBA:  MOVWF  x15
07DBC:  MOVLB  3
07DBE:  MOVF   xDF,W
07DC0:  ADDWFC xF8,W
07DC2:  MOVLB  4
07DC4:  MOVWF  x16
07DC6:  MOVLB  3
07DC8:  MOVF   xE0,W
07DCA:  ADDWFC xF9,W
07DCC:  MOVLB  4
07DCE:  MOVWF  x17
07DD0:  MOVLB  3
07DD2:  MOVF   xE1,W
07DD4:  ADDWFC xFA,W
07DD6:  MOVLB  4
07DD8:  MOVWF  x18
07DDA:  MOVLW  FF
07DDC:  ADDWF  x15,F
07DDE:  MOVLW  0F
07DE0:  ADDWFC x16,F
07DE2:  MOVLW  00
07DE4:  ADDWFC x17,F
07DE6:  MOVLW  00
07DE8:  ADDWFC x18,F
07DEA:  CLRF   x03
07DEC:  MOVF   x16,W
07DEE:  ANDLW  F0
07DF0:  MOVWF  x04
07DF2:  CLRF   x05
07DF4:  CLRF   x06
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
07DF6:  MOVFF  402,40A
07DFA:  MOVFF  401,409
07DFE:  MOVFF  400,408
07E02:  MOVFF  3FF,407
07E06:  MOVLB  0
07E08:  MOVLB  4
07E0A:  MOVF   x0A,W
07E0C:  SUBWF  x06,W
07E0E:  BTFSC  FD8.0
07E10:  BRA    7E18
07E12:  MOVLB  0
07E14:  GOTO   7EFC
07E18:  MOVLB  0
07E1A:  BTFSS  FD8.2
07E1C:  GOTO   7E62
07E20:  MOVLB  4
07E22:  MOVF   x09,W
07E24:  SUBWF  x05,W
07E26:  BTFSC  FD8.0
07E28:  BRA    7E30
07E2A:  MOVLB  0
07E2C:  GOTO   7EFC
07E30:  MOVLB  0
07E32:  BTFSS  FD8.2
07E34:  GOTO   7E62
07E38:  MOVLB  4
07E3A:  MOVF   x08,W
07E3C:  SUBWF  x04,W
07E3E:  BTFSC  FD8.0
07E40:  BRA    7E48
07E42:  MOVLB  0
07E44:  GOTO   7EFC
07E48:  MOVLB  0
07E4A:  BTFSS  FD8.2
07E4C:  GOTO   7E62
07E50:  MOVLB  4
07E52:  MOVF   x03,W
07E54:  SUBWF  x07,W
07E56:  BTFSS  FD8.0
07E58:  BRA    7E60
07E5A:  MOVLB  0
07E5C:  GOTO   7EFC
07E60:  MOVLB  0
07E62:  MOVLB  4
07E64:  MOVF   x0A,W
07E66:  MOVLB  3
07E68:  SUBWF  xD9,W
07E6A:  BTFSC  FD8.0
07E6C:  BRA    7E74
07E6E:  MOVLB  0
07E70:  GOTO   7EFC
07E74:  MOVLB  0
07E76:  BTFSS  FD8.2
07E78:  GOTO   7EC4
07E7C:  MOVLB  4
07E7E:  MOVF   x09,W
07E80:  MOVLB  3
07E82:  SUBWF  xD8,W
07E84:  BTFSC  FD8.0
07E86:  BRA    7E8E
07E88:  MOVLB  0
07E8A:  GOTO   7EFC
07E8E:  MOVLB  0
07E90:  BTFSS  FD8.2
07E92:  GOTO   7EC4
07E96:  MOVLB  4
07E98:  MOVF   x08,W
07E9A:  MOVLB  3
07E9C:  SUBWF  xD7,W
07E9E:  BTFSC  FD8.0
07EA0:  BRA    7EA8
07EA2:  MOVLB  0
07EA4:  GOTO   7EFC
07EA8:  MOVLB  0
07EAA:  BTFSS  FD8.2
07EAC:  GOTO   7EC4
07EB0:  MOVLB  3
07EB2:  MOVF   xD6,W
07EB4:  MOVLB  4
07EB6:  SUBWF  x07,W
07EB8:  BTFSS  FD8.0
07EBA:  BRA    7EC2
07EBC:  MOVLB  0
07EBE:  GOTO   7EFC
07EC2:  MOVLB  0
....................             subsector_4kByte_erase(smf, addr);
07EC4:  MOVFF  E5,82F
07EC8:  MOVFF  E4,82E
07ECC:  MOVFF  E3,82D
07ED0:  MOVFF  E2,82C
07ED4:  MOVFF  40A,833
07ED8:  MOVFF  409,832
07EDC:  MOVFF  408,831
07EE0:  MOVFF  407,830
07EE4:  CALL   3200
07EE8:  MOVLW  10
07EEA:  MOVLB  4
07EEC:  ADDWF  x08,F
07EEE:  MOVLW  00
07EF0:  ADDWFC x09,F
07EF2:  MOVLW  00
07EF4:  ADDWFC x0A,F
07EF6:  MOVLB  0
07EF8:  GOTO   7E08
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
07EFC:  MOVFF  3E1,40E
07F00:  MOVFF  3E0,40D
07F04:  MOVFF  3DF,40C
07F08:  MOVFF  3DE,40B
07F0C:  MOVFF  3DD,412
07F10:  MOVFF  3DC,411
07F14:  MOVFF  3DB,410
07F18:  MOVFF  3DA,40F
....................         while (remaining > 0)
07F1C:  MOVLB  4
07F1E:  MOVF   x0B,F
07F20:  BTFSC  FD8.2
07F22:  BRA    7F2A
07F24:  MOVLB  0
07F26:  GOTO   7F5C
07F2A:  MOVLB  0
07F2C:  MOVLB  4
07F2E:  MOVF   x0C,F
07F30:  BTFSC  FD8.2
07F32:  BRA    7F3A
07F34:  MOVLB  0
07F36:  GOTO   7F5C
07F3A:  MOVLB  0
07F3C:  MOVLB  4
07F3E:  MOVF   x0D,F
07F40:  BTFSC  FD8.2
07F42:  BRA    7F4A
07F44:  MOVLB  0
07F46:  GOTO   7F5C
07F4A:  MOVLB  0
07F4C:  MOVLB  4
07F4E:  MOVF   x0E,F
07F50:  BTFSS  FD8.2
07F52:  BRA    7F5A
07F54:  MOVLB  0
07F56:  GOTO   8086
07F5A:  MOVLB  0
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
07F5C:  MOVLB  4
07F5E:  MOVF   x0E,F
07F60:  BTFSC  FD8.2
07F62:  BRA    7F6A
07F64:  MOVLB  0
07F66:  GOTO   7F9E
07F6A:  MOVLB  0
07F6C:  MOVLB  4
07F6E:  MOVF   x0D,F
07F70:  BTFSC  FD8.2
07F72:  BRA    7F7A
07F74:  MOVLB  0
07F76:  GOTO   7F9E
07F7A:  MOVLB  0
07F7C:  MOVLB  4
07F7E:  MOVF   x0C,F
07F80:  BTFSC  FD8.2
07F82:  BRA    7F8A
07F84:  MOVLB  0
07F86:  GOTO   7F9E
07F8A:  MOVLB  0
07F8C:  MOVLB  4
07F8E:  MOVF   x0B,W
07F90:  SUBLW  40
07F92:  BTFSS  FD8.0
07F94:  BRA    7F9C
07F96:  MOVLB  0
07F98:  GOTO   7FA6
07F9C:  MOVLB  0
07F9E:  CLRF   03
07FA0:  MOVLW  40
07FA2:  GOTO   7FB0
07FA6:  MOVFF  40C,03
07FAA:  MOVLB  4
07FAC:  MOVF   x0B,W
07FAE:  MOVLB  0
07FB0:  MOVLB  4
07FB2:  MOVWF  x13
07FB4:  MOVFF  03,414
07FB8:  MOVLB  0
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
07FBA:  MOVFF  E1,418
07FBE:  MOVFF  E0,417
07FC2:  MOVFF  DF,416
07FC6:  MOVFF  DE,415
07FCA:  MOVFF  412,41C
07FCE:  MOVFF  411,41B
07FD2:  MOVFF  410,41A
07FD6:  MOVFF  40F,419
07FDA:  MOVLW  03
07FDC:  MOVLB  4
07FDE:  MOVWF  x1E
07FE0:  MOVLW  86
07FE2:  MOVWF  x1D
07FE4:  CLRF   x22
07FE6:  CLRF   x21
07FE8:  MOVFF  414,420
07FEC:  MOVFF  413,41F
07FF0:  MOVLB  0
07FF2:  CALL   20DC
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
07FF6:  MOVFF  E5,82F
07FFA:  MOVFF  E4,82E
07FFE:  MOVFF  E3,82D
08002:  MOVFF  E2,82C
08006:  MOVFF  3FA,833
0800A:  MOVFF  3F9,832
0800E:  MOVFF  3F8,831
08012:  MOVFF  3F7,830
08016:  MOVLW  03
08018:  MOVLB  8
0801A:  MOVWF  x35
0801C:  MOVLW  86
0801E:  MOVWF  x34
08020:  MOVFF  414,837
08024:  MOVFF  413,836
08028:  MOVLB  0
0802A:  CALL   2E7C
.................... 
....................             src_addr += chunk;
0802E:  MOVLB  4
08030:  MOVF   x13,W
08032:  ADDWF  x0F,F
08034:  MOVF   x14,W
08036:  ADDWFC x10,F
08038:  MOVLW  00
0803A:  ADDWFC x11,F
0803C:  MOVLW  00
0803E:  ADDWFC x12,F
....................             data_write_addr += chunk;
08040:  MOVF   x13,W
08042:  MOVLB  3
08044:  ADDWF  xF7,F
08046:  MOVLB  4
08048:  MOVF   x14,W
0804A:  MOVLB  3
0804C:  ADDWFC xF8,F
0804E:  MOVLW  00
08050:  ADDWFC xF9,F
08052:  MOVLW  00
08054:  ADDWFC xFA,F
....................             used_size += chunk;
08056:  MOVLB  4
08058:  MOVF   x13,W
0805A:  MOVLB  3
0805C:  ADDWF  xE6,F
0805E:  MOVLB  4
08060:  MOVF   x14,W
08062:  MOVLB  3
08064:  ADDWFC xE7,F
08066:  MOVLW  00
08068:  ADDWFC xE8,F
0806A:  MOVLW  00
0806C:  ADDWFC xE9,F
....................             remaining -= chunk;
0806E:  MOVLB  4
08070:  MOVF   x13,W
08072:  SUBWF  x0B,F
08074:  MOVF   x14,W
08076:  SUBWFB x0C,F
08078:  MOVLW  00
0807A:  SUBWFB x0D,F
0807C:  MOVLW  00
0807E:  SUBWFB x0E,F
08080:  MOVLB  0
08082:  GOTO   7F1C
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
08086:  MOVLW  10
08088:  MOVWF  FF6
0808A:  MOVLW  05
0808C:  MOVWF  FF7
0808E:  MOVLW  00
08090:  MOVWF  FF8
08092:  CALL   1714
....................         subsector_4kByte_erase(smf, mis_start_address);
08096:  MOVFF  E5,82F
0809A:  MOVFF  E4,82E
0809E:  MOVFF  E3,82D
080A2:  MOVFF  E2,82C
080A6:  MOVFF  3D5,833
080AA:  MOVFF  3D4,832
080AE:  MOVFF  3D3,831
080B2:  MOVFF  3D2,830
080B6:  CALL   3200
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
080BA:  MOVFF  3E9,419
080BE:  MOVFF  3E8,418
080C2:  MOVFF  3E7,417
080C6:  MOVFF  3E6,416
080CA:  MOVLB  4
080CC:  CLRF   x17
080CE:  CLRF   x18
080D0:  CLRF   x19
080D2:  MOVFF  E5,421
080D6:  MOVFF  E4,420
080DA:  MOVFF  E3,41F
080DE:  MOVFF  E2,41E
080E2:  MOVFF  3D5,425
080E6:  MOVFF  3D4,424
080EA:  MOVFF  3D3,423
080EE:  MOVFF  3D2,422
080F2:  MOVFF  416,426
080F6:  MOVLB  0
080F8:  CALL   7112
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
080FC:  MOVLW  01
080FE:  MOVLB  3
08100:  ADDWF  xD2,W
08102:  MOVLB  4
08104:  MOVWF  x15
08106:  MOVLW  00
08108:  MOVLB  3
0810A:  ADDWFC xD3,W
0810C:  MOVLB  4
0810E:  MOVWF  x16
08110:  MOVLW  00
08112:  MOVLB  3
08114:  ADDWFC xD4,W
08116:  MOVLB  4
08118:  MOVWF  x17
0811A:  MOVLW  00
0811C:  MOVLB  3
0811E:  ADDWFC xD5,W
08120:  MOVLB  4
08122:  MOVWF  x18
08124:  MOVFF  3E7,41A
08128:  MOVFF  3E8,41B
0812C:  MOVFF  3E9,41C
08130:  CLRF   x1D
08132:  CLRF   x1B
08134:  CLRF   x1C
08136:  CLRF   x1D
08138:  MOVFF  E5,421
0813C:  MOVFF  E4,420
08140:  MOVFF  E3,41F
08144:  MOVFF  E2,41E
08148:  MOVFF  418,425
0814C:  MOVFF  417,424
08150:  MOVFF  416,423
08154:  MOVFF  415,422
08158:  MOVFF  41A,426
0815C:  MOVLB  0
0815E:  CALL   7112
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
08162:  MOVLW  02
08164:  MOVLB  3
08166:  ADDWF  xD2,W
08168:  MOVLB  4
0816A:  MOVWF  x15
0816C:  MOVLW  00
0816E:  MOVLB  3
08170:  ADDWFC xD3,W
08172:  MOVLB  4
08174:  MOVWF  x16
08176:  MOVLW  00
08178:  MOVLB  3
0817A:  ADDWFC xD4,W
0817C:  MOVLB  4
0817E:  MOVWF  x17
08180:  MOVLW  00
08182:  MOVLB  3
08184:  ADDWFC xD5,W
08186:  MOVLB  4
08188:  MOVWF  x18
0818A:  MOVFF  3E8,41A
0818E:  MOVFF  3E9,41B
08192:  CLRF   x1C
08194:  CLRF   x1D
08196:  CLRF   x1B
08198:  CLRF   x1C
0819A:  CLRF   x1D
0819C:  MOVFF  E5,421
081A0:  MOVFF  E4,420
081A4:  MOVFF  E3,41F
081A8:  MOVFF  E2,41E
081AC:  MOVFF  418,425
081B0:  MOVFF  417,424
081B4:  MOVFF  416,423
081B8:  MOVFF  415,422
081BC:  MOVFF  41A,426
081C0:  MOVLB  0
081C2:  CALL   7112
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
081C6:  MOVLW  03
081C8:  MOVLB  3
081CA:  ADDWF  xD2,W
081CC:  MOVLB  4
081CE:  MOVWF  x15
081D0:  MOVLW  00
081D2:  MOVLB  3
081D4:  ADDWFC xD3,W
081D6:  MOVLB  4
081D8:  MOVWF  x16
081DA:  MOVLW  00
081DC:  MOVLB  3
081DE:  ADDWFC xD4,W
081E0:  MOVLB  4
081E2:  MOVWF  x17
081E4:  MOVLW  00
081E6:  MOVLB  3
081E8:  ADDWFC xD5,W
081EA:  MOVLB  4
081EC:  MOVWF  x18
081EE:  MOVFF  3E9,41A
081F2:  CLRF   x1B
081F4:  CLRF   x1C
081F6:  CLRF   x1D
081F8:  CLRF   x1B
081FA:  CLRF   x1C
081FC:  CLRF   x1D
081FE:  MOVFF  E5,421
08202:  MOVFF  E4,420
08206:  MOVFF  E3,41F
0820A:  MOVFF  E2,41E
0820E:  MOVFF  418,425
08212:  MOVFF  417,424
08216:  MOVFF  416,423
0821A:  MOVFF  415,422
0821E:  MOVFF  41A,426
08222:  MOVLB  0
08224:  CALL   7112
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
08228:  MOVLW  04
0822A:  MOVLB  3
0822C:  ADDWF  xD2,W
0822E:  MOVLB  4
08230:  MOVWF  x15
08232:  MOVLW  00
08234:  MOVLB  3
08236:  ADDWFC xD3,W
08238:  MOVLB  4
0823A:  MOVWF  x16
0823C:  MOVLW  00
0823E:  MOVLB  3
08240:  ADDWFC xD4,W
08242:  MOVLB  4
08244:  MOVWF  x17
08246:  MOVLW  00
08248:  MOVLB  3
0824A:  ADDWFC xD5,W
0824C:  MOVLB  4
0824E:  MOVWF  x18
08250:  MOVFF  E5,421
08254:  MOVFF  E4,420
08258:  MOVFF  E3,41F
0825C:  MOVFF  E2,41E
08260:  MOVFF  418,425
08264:  MOVFF  417,424
08268:  MOVFF  416,423
0826C:  MOVFF  415,422
08270:  MOVFF  3EA,426
08274:  MOVLB  0
08276:  CALL   7112
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
0827A:  MOVLW  24
0827C:  MOVWF  FF6
0827E:  MOVLW  05
08280:  MOVWF  FF7
08282:  MOVLW  00
08284:  MOVWF  FF8
08286:  MOVLW  0C
08288:  MOVLB  7
0828A:  MOVWF  xEC
0828C:  MOVLB  0
0828E:  CALL   1744
08292:  MOVLW  41
08294:  MOVWF  FE9
08296:  MOVFF  3E9,418
0829A:  MOVFF  3E8,417
0829E:  MOVFF  3E7,416
082A2:  MOVFF  3E6,415
082A6:  GOTO   7486
082AA:  MOVLW  0D
082AC:  MOVLB  8
082AE:  MOVWF  x49
082B0:  MOVLB  0
082B2:  CALL   16C2
082B6:  MOVLW  0A
082B8:  MOVLB  8
082BA:  MOVWF  x49
082BC:  MOVLB  0
082BE:  CALL   16C2
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
082C2:  MOVLW  36
082C4:  MOVWF  FF6
082C6:  MOVLW  05
082C8:  MOVWF  FF7
082CA:  MOVLW  00
082CC:  MOVWF  FF8
082CE:  MOVLW  0D
082D0:  MOVLB  7
082D2:  MOVWF  xEC
082D4:  MOVLB  0
082D6:  CALL   1744
082DA:  MOVFF  3EA,7EC
082DE:  MOVLW  1B
082E0:  MOVLB  7
082E2:  MOVWF  xED
082E4:  MOVLB  0
082E6:  CALL   43A8
082EA:  MOVLW  45
082EC:  MOVWF  FF6
082EE:  MOVLW  05
082F0:  MOVWF  FF7
082F2:  MOVLW  00
082F4:  MOVWF  FF8
082F6:  MOVLW  04
082F8:  MOVLB  7
082FA:  MOVWF  xEC
082FC:  MOVLB  0
082FE:  CALL   1744
08302:  MOVLB  3
08304:  INCF   xC6,F
08306:  MOVLB  0
08308:  GOTO   762A
....................     }
.................... 
....................     fprintf(PC, "\r\n___End smf_write____\r\n");
0830C:  MOVLW  4A
0830E:  MOVWF  FF6
08310:  MOVLW  05
08312:  MOVWF  FF7
08314:  MOVLW  00
08316:  MOVWF  FF8
08318:  CALL   1714
....................     fprintf(PC, "____________________\r\n\r\n");
0831C:  MOVLW  64
0831E:  MOVWF  FF6
08320:  MOVLW  05
08322:  MOVWF  FF7
08324:  MOVLW  00
08326:  MOVWF  FF8
08328:  CALL   1714
0832C:  GOTO   838A (RETURN)
.................... }
.................... 
.................... 
.................... void smf_read(unsigned int32 address, unsigned int8 *data, unsigned int8 size)
.................... {
....................     
.................... }
.................... 
.................... 
.................... 
.................... void smf_erase(unsigned int32 address, unsigned int8 sector_size)
.................... {
.................... 
.................... }
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data)
*
04FC6:  MOVLW  01
04FC8:  ADDWF  xDD,W
04FCA:  ANDLW  0F
04FCC:  MOVLB  3
04FCE:  MOVWF  x98
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
04FD0:  MOVLB  0
04FD2:  MOVF   xDC,W
04FD4:  MOVLB  3
04FD6:  SUBWF  x98,W
04FD8:  BTFSC  FD8.2
04FDA:  BRA    4FE2
04FDC:  MOVLB  0
04FDE:  GOTO   4FF8
04FE2:  MOVLB  0
....................       fprintf(PC, "SMF data list is full!!!\r\n");
04FE4:  MOVLW  7E
04FE6:  MOVWF  FF6
04FE8:  MOVLW  05
04FEA:  MOVWF  FF7
04FEC:  MOVLW  00
04FEE:  MOVWF  FF8
04FF0:  CALL   1714
04FF4:  GOTO   514E
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
04FF8:  MOVF   xDD,W
04FFA:  MULLW  09
04FFC:  MOVF   FF3,W
04FFE:  MOVLB  3
05000:  CLRF   x9A
05002:  MOVWF  x99
05004:  MOVLW  4C
05006:  ADDWF  x99,W
05008:  MOVWF  01
0500A:  MOVLW  00
0500C:  ADDWFC x9A,W
0500E:  MOVWF  03
05010:  MOVF   01,W
05012:  MOVWF  x9B
05014:  MOVFF  03,39C
05018:  MOVF   x96,W
0501A:  MOVWF  01
0501C:  MOVF   x97,W
0501E:  MOVWF  03
05020:  MOVF   01,W
05022:  MOVWF  FE9
05024:  MOVFF  03,FEA
05028:  MOVLW  00
0502A:  BTFSC  FEF.0
0502C:  MOVLW  01
0502E:  MOVWF  01
05030:  BTFSS  01.0
05032:  BRA    503A
05034:  MOVLB  0
05036:  GOTO   504A
0503A:  MOVLB  0
0503C:  MOVFF  39C,FEA
05040:  MOVFF  39B,FE9
05044:  BCF    FEF.0
05046:  GOTO   5054
0504A:  MOVFF  39C,FEA
0504E:  MOVFF  39B,FE9
05052:  BSF    FEF.0
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
05054:  MOVF   xDD,W
05056:  MULLW  09
05058:  MOVF   FF3,W
0505A:  MOVLB  3
0505C:  CLRF   x9A
0505E:  MOVWF  x99
05060:  MOVLW  01
05062:  ADDWF  x99,W
05064:  MOVWF  01
05066:  MOVLW  00
05068:  ADDWFC x9A,W
0506A:  MOVWF  03
0506C:  MOVF   01,W
0506E:  ADDLW  4C
05070:  MOVWF  01
05072:  MOVLW  00
05074:  ADDWFC 03,F
05076:  MOVF   01,W
05078:  MOVWF  x99
0507A:  MOVFF  03,39A
0507E:  MOVLW  01
05080:  ADDWF  x96,W
05082:  MOVWF  FE9
05084:  MOVLW  00
05086:  ADDWFC x97,W
05088:  MOVWF  FEA
0508A:  MOVFF  FEF,00
0508E:  MOVFF  FEC,01
05092:  MOVFF  FEC,02
05096:  MOVFF  FEC,03
0509A:  MOVF   FED,F
0509C:  MOVF   FED,F
0509E:  MOVF   FED,F
050A0:  MOVFF  03,39E
050A4:  MOVFF  02,39D
050A8:  MOVFF  01,39C
050AC:  MOVFF  00,39B
050B0:  MOVFF  39A,FEA
050B4:  MOVFF  399,FE9
050B8:  MOVFF  39B,FEF
050BC:  MOVFF  39C,FEC
050C0:  MOVFF  39D,FEC
050C4:  MOVFF  39E,FEC
050C8:  MOVF   FED,F
050CA:  MOVF   FED,F
050CC:  MOVF   FED,F
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
050CE:  MOVLB  0
050D0:  MOVF   xDD,W
050D2:  MULLW  09
050D4:  MOVF   FF3,W
050D6:  MOVLB  3
050D8:  CLRF   x9A
050DA:  MOVWF  x99
050DC:  MOVLW  05
050DE:  ADDWF  x99,W
050E0:  MOVWF  01
050E2:  MOVLW  00
050E4:  ADDWFC x9A,W
050E6:  MOVWF  03
050E8:  MOVF   01,W
050EA:  ADDLW  4C
050EC:  MOVWF  01
050EE:  MOVLW  00
050F0:  ADDWFC 03,F
050F2:  MOVF   01,W
050F4:  MOVWF  x99
050F6:  MOVFF  03,39A
050FA:  MOVLW  05
050FC:  ADDWF  x96,W
050FE:  MOVWF  FE9
05100:  MOVLW  00
05102:  ADDWFC x97,W
05104:  MOVWF  FEA
05106:  MOVFF  FEF,00
0510A:  MOVFF  FEC,01
0510E:  MOVFF  FEC,02
05112:  MOVFF  FEC,03
05116:  MOVF   FED,F
05118:  MOVF   FED,F
0511A:  MOVF   FED,F
0511C:  MOVFF  03,39E
05120:  MOVFF  02,39D
05124:  MOVFF  01,39C
05128:  MOVFF  00,39B
0512C:  MOVFF  39A,FEA
05130:  MOVFF  399,FE9
05134:  MOVFF  39B,FEF
05138:  MOVFF  39C,FEC
0513C:  MOVFF  39D,FEC
05140:  MOVFF  39E,FEC
05144:  MOVF   FED,F
05146:  MOVF   FED,F
05148:  MOVF   FED,F
.................... 
....................       smf_queue.smf_data_tail = next_tail;
0514A:  MOVFF  398,DD
0514E:  MOVLB  0
....................    }
05150:  GOTO   51AE (RETURN)
.................... }
.................... 
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
06C2A:  MOVF   xDD,W
06C2C:  SUBWF  xDC,W
06C2E:  BTFSS  FD8.2
06C30:  GOTO   6C54
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
06C34:  MOVLW  9A
06C36:  MOVWF  FF6
06C38:  MOVLW  05
06C3A:  MOVWF  FF7
06C3C:  MOVLW  00
06C3E:  MOVWF  FF8
06C40:  CALL   1714
....................       return 0x00;
06C44:  MOVLW  00
06C46:  MOVWF  01
06C48:  MOVLW  00
06C4A:  MOVWF  02
06C4C:  GOTO   6C80
....................    }
06C50:  GOTO   6C80
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
06C54:  MOVFF  DC,415
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
06C58:  MOVLW  01
06C5A:  ADDWF  xDC,W
06C5C:  ANDLW  0F
06C5E:  MOVWF  xDC
....................       return &smf_queue.smf_data[current_head];
06C60:  MOVLB  4
06C62:  MOVF   x15,W
06C64:  MULLW  09
06C66:  MOVF   FF3,W
06C68:  CLRF   03
06C6A:  ADDLW  4C
06C6C:  MOVWF  01
06C6E:  MOVLW  00
06C70:  ADDWFC 03,F
06C72:  MOVF   01,W
06C74:  MOVWF  01
06C76:  MOVF   03,W
06C78:  MOVWF  02
06C7A:  MOVLB  0
06C7C:  GOTO   6C80
....................    }
06C80:  GOTO   767A (RETURN)
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
06A2C:  MOVF   xDD,W
06A2E:  SUBWF  xDC,W
06A30:  BTFSC  FD8.2
06A32:  GOTO   6A3C
06A36:  MOVLW  00
06A38:  GOTO   6A3E
06A3C:  MOVLW  01
06A3E:  MOVWF  01
06A40:  RETURN 0
.................... }
.................... 
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
06C84:  MOVLB  4
06C86:  CLRF   x1D
06C88:  CLRF   x1E
06C8A:  CLRF   x1F
06C8C:  CLRF   x20
06C8E:  CLRF   x21
06C90:  CLRF   x22
06C92:  CLRF   x23
06C94:  CLRF   x24
06C96:  CLRF   x25
....................    
....................    if (mis_type == MEAURE_DATA)
06C98:  MOVF   x1C,F
06C9A:  BTFSC  FD8.2
06C9C:  BRA    6CA4
06C9E:  MOVLB  0
06CA0:  GOTO   6CCA
06CA4:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
06CA6:  MOVLW  04
06CA8:  MOVLB  4
06CAA:  MOVWF  x20
06CAC:  MOVLW  EC
06CAE:  MOVWF  x1F
06CB0:  CLRF   x1E
06CB2:  CLRF   x1D
....................       mis_struct.end_address     = 0x056BFFFF;
06CB4:  MOVLW  05
06CB6:  MOVWF  x24
06CB8:  MOVLW  6B
06CBA:  MOVWF  x23
06CBC:  SETF   x22
06CBE:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000000;
06CC0:  MOVLW  80
06CC2:  MOVWF  x25
06CC4:  MOVLB  0
....................    }
06CC6:  GOTO   6D16
....................    else if (mis_type == PICLOG_DATA)
06CCA:  MOVLB  4
06CCC:  DECFSZ x1C,W
06CCE:  BRA    6CD4
06CD0:  BRA    6CDA
06CD2:  MOVLB  0
06CD4:  MOVLB  0
06CD6:  GOTO   6D00
06CDA:  MOVLB  0
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
06CDC:  MOVLW  04
06CDE:  MOVLB  4
06CE0:  MOVWF  x20
06CE2:  MOVLW  DC
06CE4:  MOVWF  x1F
06CE6:  CLRF   x1E
06CE8:  CLRF   x1D
....................       mis_struct.end_address     = 0x04EBFFFF;
06CEA:  MOVLW  04
06CEC:  MOVWF  x24
06CEE:  MOVLW  EB
06CF0:  MOVWF  x23
06CF2:  SETF   x22
06CF4:  SETF   x21
....................       mis_struct.mission_flag    = 0b10000001;  
06CF6:  MOVLW  81
06CF8:  MOVWF  x25
06CFA:  MOVLB  0
....................    }
06CFC:  GOTO   6D16
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
06D00:  MOVLB  4
06D02:  SETF   x20
06D04:  SETF   x1F
06D06:  SETF   x1E
06D08:  SETF   x1D
....................       mis_struct.end_address     = 0xFFFFFFFF;
06D0A:  SETF   x24
06D0C:  SETF   x23
06D0E:  SETF   x22
06D10:  SETF   x21
....................       mis_struct.mission_flag    = 0b11111111; 
06D12:  SETF   x25
06D14:  MOVLB  0
....................    }
....................    
....................    return mis_struct;
06D16:  MOVLW  1D
06D18:  MOVWF  01
06D1A:  MOVLW  04
06D1C:  MOVWF  02
06D1E:  GOTO   76A8 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/uart.c"
.................... #INT_RDA3
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
005DC:  GOTO   05E0
005E0:  GOTO   05EA
005E4:  BTFSS  1C.0
005E6:  GOTO   061E
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
005EA:  MOVF   4B,W
005EC:  SUBLW  1F
005EE:  BTFSS  FD8.0
005F0:  GOTO   061E
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
005F4:  MOVF   4B,W
005F6:  INCF   4B,F
005F8:  ANDLW  1F
005FA:  CLRF   03
005FC:  ADDLW  2B
005FE:  MOVWF  FE9
00600:  MOVLW  00
00602:  ADDWFC 03,W
00604:  MOVWF  FEA
00606:  MOVFF  FEA,86C
0060A:  MOVFF  FE9,86B
0060E:  GOTO   05B4
00612:  MOVFF  86C,FEA
00616:  MOVFF  86B,FE9
0061A:  MOVF   01,W
0061C:  MOVWF  FEF
.................... 
....................    //fprintf(PC, "RDA Interrupt: %d bytes received\r\n", boss_receive_buffer_size);
0061E:  BCF    FA6.5
00620:  GOTO   0074
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
017BE:  MOVLW  24
017C0:  MOVWF  FF6
017C2:  MOVLW  06
017C4:  MOVWF  FF7
017C6:  MOVLW  00
017C8:  MOVWF  FF8
017CA:  CALL   1714
....................    enable_interrupts(INT_RDA3);
017CE:  BSF    F61.5
....................    enable_interrupts(global);
017D0:  MOVLW  C0
017D2:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
017D4:  MOVLW  36
017D6:  MOVWF  FF6
017D8:  MOVLW  06
017DA:  MOVWF  FF7
017DC:  MOVLW  00
017DE:  MOVWF  FF8
017E0:  CALL   1714
017E4:  GOTO   8C0A (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
03F7A:  MOVFF  385,03
03F7E:  MOVLB  3
03F80:  MOVF   x84,W
03F82:  MOVWF  FE9
03F84:  MOVFF  03,FEA
03F88:  MOVFF  FEF,386
03F8C:  MOVFF  383,FEA
03F90:  MOVFF  382,FE9
03F94:  CLRF   00
03F96:  CLRF   02
03F98:  MOVFF  386,01
03F9C:  MOVLB  0
03F9E:  CALL   3F56
....................    *receive_signal_size = 0;
03FA2:  MOVFF  385,03
03FA6:  MOVLB  3
03FA8:  MOVF   x84,W
03FAA:  MOVWF  FE9
03FAC:  MOVFF  03,FEA
03FB0:  CLRF   FEF
03FB2:  MOVLB  0
03FB4:  GOTO   8CB4 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/communication.c"
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
.................... 
.................... int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... void int32_to_be_array(int32 value, int8 buf[4]);
.................... 
.................... int32 be_array_to_int32(int8 buf[4]);
.................... 
.................... #endif // CALC_TOOLS_H
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
03D5A:  MOVLB  3
03D5C:  CLRF   x8B
03D5E:  CLRF   x8C
03D60:  CLRF   x8D
03D62:  CLRF   x8E
03D64:  CLRF   x8F
03D66:  CLRF   x90
03D68:  CLRF   x91
03D6A:  CLRF   x92
03D6C:  CLRF   x93
03D6E:  CLRF   x94
03D70:  CLRF   x95
03D72:  CLRF   x96
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
03D74:  MOVLW  42
03D76:  MOVWF  FF6
03D78:  MOVLW  06
03D7A:  MOVWF  FF7
03D7C:  MOVLW  00
03D7E:  MOVWF  FF8
03D80:  MOVLB  0
03D82:  CALL   1714
....................    fprintf(PC, "\t[BOSS] >>> ");
03D86:  MOVLW  62
03D88:  MOVWF  FF6
03D8A:  MOVLW  06
03D8C:  MOVWF  FF7
03D8E:  MOVLW  00
03D90:  MOVWF  FF8
03D92:  CALL   1714
....................    for (int8 i = 0; i < receive_signal_size; i++)
03D96:  MOVLB  3
03D98:  CLRF   x97
03D9A:  MOVLB  0
03D9C:  MOVLB  3
03D9E:  MOVF   x8A,W
03DA0:  SUBWF  x97,W
03DA2:  BTFSS  FD8.0
03DA4:  BRA    3DAC
03DA6:  MOVLB  0
03DA8:  GOTO   3DE6
03DAC:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
03DAE:  MOVLB  3
03DB0:  MOVF   x97,W
03DB2:  ADDWF  x88,W
03DB4:  MOVWF  FE9
03DB6:  MOVLW  00
03DB8:  ADDWFC x89,W
03DBA:  MOVWF  FEA
03DBC:  MOVFF  FEF,39E
03DC0:  MOVFF  39E,847
03DC4:  MOVLW  37
03DC6:  MOVLB  8
03DC8:  MOVWF  x48
03DCA:  MOVLB  0
03DCC:  CALL   1F34
03DD0:  MOVLW  20
03DD2:  MOVLB  8
03DD4:  MOVWF  x49
03DD6:  MOVLB  0
03DD8:  CALL   16C2
03DDC:  MOVLB  3
03DDE:  INCF   x97,F
03DE0:  MOVLB  0
03DE2:  GOTO   3D9C
....................    fprintf(PC, "\r\n");
03DE6:  MOVLW  0D
03DE8:  MOVLB  8
03DEA:  MOVWF  x49
03DEC:  MOVLB  0
03DEE:  CALL   16C2
03DF2:  MOVLW  0A
03DF4:  MOVLB  8
03DF6:  MOVWF  x49
03DF8:  MOVLB  0
03DFA:  CALL   16C2
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
03DFE:  MOVFF  389,39F
03E02:  MOVFF  388,39E
03E06:  MOVFF  38A,3A0
03E0A:  GOTO   3A08
03E0E:  MOVFF  01,398
....................    if (frame_start_position == -1)
03E12:  MOVLB  3
03E14:  MOVF   x98,W
03E16:  SUBLW  FF
03E18:  BTFSC  FD8.2
03E1A:  BRA    3E22
03E1C:  MOVLB  0
03E1E:  GOTO   3E30
03E22:  MOVLB  0
....................       return command;
03E24:  MOVLW  8B
03E26:  MOVWF  01
03E28:  MOVLW  03
03E2A:  MOVWF  02
03E2C:  GOTO   3F52
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
03E30:  MOVLB  3
03E32:  MOVF   x98,W
03E34:  ADDWF  x88,W
03E36:  MOVWF  01
03E38:  MOVLW  00
03E3A:  ADDWFC x89,W
03E3C:  MOVWF  03
03E3E:  MOVF   01,W
03E40:  MOVWF  x99
03E42:  MOVFF  03,39A
03E46:  MOVF   x99,W
03E48:  MOVWF  FE9
03E4A:  MOVF   x9A,W
03E4C:  MOVWF  FEA
03E4E:  MOVF   FEF,W
03E50:  ANDLW  0F
03E52:  MOVWF  x9B
03E54:  MOVFF  39B,39E
03E58:  MOVLB  0
03E5A:  GOTO   3AB0
03E5E:  MOVFF  01,39C
....................    if (content_size == -1)
03E62:  MOVLB  3
03E64:  MOVF   x9C,W
03E66:  SUBLW  FF
03E68:  BTFSC  FD8.2
03E6A:  BRA    3E72
03E6C:  MOVLB  0
03E6E:  GOTO   3E80
03E72:  MOVLB  0
....................       return command;
03E74:  MOVLW  8B
03E76:  MOVWF  01
03E78:  MOVLW  03
03E7A:  MOVWF  02
03E7C:  GOTO   3F52
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
03E80:  MOVLB  3
03E82:  MOVF   x98,W
03E84:  SUBWF  x8A,W
03E86:  MOVWF  x9D
....................    
....................    if (!check_crc(frame, receive_frame_size))
03E88:  MOVFF  39A,39F
03E8C:  MOVFF  399,39E
03E90:  MOVFF  39D,3A0
03E94:  MOVLB  0
03E96:  GOTO   3BB6
03E9A:  MOVF   01,F
03E9C:  BTFSS  FD8.2
03E9E:  GOTO   3EAE
....................       return command;
03EA2:  MOVLW  8B
03EA4:  MOVWF  01
03EA6:  MOVLW  03
03EA8:  MOVWF  02
03EAA:  GOTO   3F52
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
03EAE:  MOVLB  3
03EB0:  MOVF   x99,W
03EB2:  MOVWF  FE9
03EB4:  MOVF   x9A,W
03EB6:  MOVWF  FEA
03EB8:  MOVF   FEF,W
03EBA:  ANDLW  F0
03EBC:  MOVWF  00
03EBE:  SWAPF  00,W
03EC0:  MOVWF  x9E
03EC2:  MOVLW  0F
03EC4:  ANDWF  x9E,F
03EC6:  MOVFF  39E,39F
03ECA:  MOVLB  0
03ECC:  GOTO   3CA0
03ED0:  MOVF   01,F
03ED2:  BTFSS  FD8.2
03ED4:  GOTO   3EE4
....................       return command;
03ED8:  MOVLW  8B
03EDA:  MOVWF  01
03EDC:  MOVLW  03
03EDE:  MOVWF  02
03EE0:  GOTO   3F52
.................... 
....................    command.frame_id = frame_id;
03EE4:  MOVFF  39B,38B
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
03EE8:  MOVLW  01
03EEA:  MOVLB  3
03EEC:  ADDWF  x99,W
03EEE:  MOVWF  01
03EF0:  MOVLW  00
03EF2:  ADDWFC x9A,W
03EF4:  MOVWF  03
03EF6:  MOVF   01,W
03EF8:  MOVWF  x9E
03EFA:  MOVFF  03,39F
03EFE:  MOVLW  02
03F00:  SUBWF  x9D,W
03F02:  MOVWF  xA0
03F04:  MOVLW  03
03F06:  MOVWF  FEA
03F08:  MOVLW  8E
03F0A:  MOVWF  FE9
03F0C:  MOVFF  39F,FE2
03F10:  MOVFF  39E,FE1
03F14:  MOVF   xA0,W
03F16:  MOVWF  01
03F18:  BTFSS  FD8.2
03F1A:  BRA    3F22
03F1C:  MOVLB  0
03F1E:  GOTO   3F2E
03F22:  MOVLB  0
03F24:  MOVFF  FE6,FEE
03F28:  DECFSZ 01,F
03F2A:  GOTO   3F24
....................    command.size = receive_frame_size-2;
03F2E:  MOVLW  02
03F30:  MOVLB  3
03F32:  SUBWF  x9D,W
03F34:  MOVWF  x8C
....................    command.is_exist = TRUE;
03F36:  BSF    x8D.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
03F38:  MOVLW  70
03F3A:  MOVWF  FF6
03F3C:  MOVLW  06
03F3E:  MOVWF  FF7
03F40:  MOVLW  00
03F42:  MOVWF  FF8
03F44:  MOVLB  0
03F46:  CALL   1714
....................    return command;
03F4A:  MOVLW  8B
03F4C:  MOVWF  01
03F4E:  MOVLW  03
03F50:  MOVWF  02
03F52:  GOTO   8C7E (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
03A08:  MOVLB  3
03A0A:  CLRF   xA1
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
03A0C:  CLRF   xA1
03A0E:  MOVLB  0
03A10:  MOVLW  01
03A12:  MOVLB  3
03A14:  SUBWF  xA0,W
03A16:  SUBWF  xA1,W
03A18:  BTFSS  FD8.0
03A1A:  BRA    3A22
03A1C:  MOVLB  0
03A1E:  GOTO   3A5A
03A22:  MOVLB  0
....................       if(receive_signal[i] == SFD)
03A24:  MOVLB  3
03A26:  MOVF   xA1,W
03A28:  ADDWF  x9E,W
03A2A:  MOVWF  FE9
03A2C:  MOVLW  00
03A2E:  ADDWFC x9F,W
03A30:  MOVWF  FEA
03A32:  MOVF   FEF,W
03A34:  SUBLW  AA
03A36:  BTFSC  FD8.2
03A38:  BRA    3A40
03A3A:  MOVLB  0
03A3C:  GOTO   3A50
03A40:  MOVLB  0
....................          return i+1;
03A42:  MOVLW  01
03A44:  MOVLB  3
03A46:  ADDWF  xA1,W
03A48:  MOVWF  01
03A4A:  MOVLB  0
03A4C:  GOTO   3AAC
03A50:  MOVLB  3
03A52:  INCF   xA1,F
03A54:  MOVLB  0
03A56:  GOTO   3A10
....................    if (receive_signal[i] == SFD)
03A5A:  MOVLB  3
03A5C:  MOVF   xA1,W
03A5E:  ADDWF  x9E,W
03A60:  MOVWF  FE9
03A62:  MOVLW  00
03A64:  ADDWFC x9F,W
03A66:  MOVWF  FEA
03A68:  MOVF   FEF,W
03A6A:  SUBLW  AA
03A6C:  BTFSC  FD8.2
03A6E:  BRA    3A76
03A70:  MOVLB  0
03A72:  GOTO   3A94
03A76:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
03A78:  MOVLW  8C
03A7A:  MOVWF  FF6
03A7C:  MOVLW  06
03A7E:  MOVWF  FF7
03A80:  MOVLW  00
03A82:  MOVWF  FF8
03A84:  CALL   1714
....................       return -1;
03A88:  MOVLW  FF
03A8A:  MOVWF  01
03A8C:  GOTO   3AAC
....................    }
03A90:  GOTO   3AAC
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
03A94:  MOVLW  A2
03A96:  MOVWF  FF6
03A98:  MOVLW  06
03A9A:  MOVWF  FF7
03A9C:  MOVLW  00
03A9E:  MOVWF  FF8
03AA0:  CALL   1714
....................       return -1;
03AA4:  MOVLW  FF
03AA6:  MOVWF  01
03AA8:  GOTO   3AAC
....................    }
03AAC:  GOTO   3E0E (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
03AB0:  MOVLB  3
03AB2:  CLRF   x9F
03AB4:  MOVLB  0
03AB6:  MOVLB  3
03AB8:  MOVF   x9F,W
03ABA:  SUBLW  02
03ABC:  BTFSC  FD8.0
03ABE:  BRA    3AC6
03AC0:  MOVLB  0
03AC2:  GOTO   3B24
03AC6:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
03AC8:  BCF    FD8.0
03ACA:  MOVLB  3
03ACC:  RLCF   x9F,W
03ACE:  CLRF   xA1
03AD0:  MOVWF  xA0
03AD2:  MOVLW  E6
03AD4:  ADDWF  xA0,W
03AD6:  MOVWF  FE9
03AD8:  MOVLW  00
03ADA:  ADDWFC xA1,W
03ADC:  MOVWF  FEA
03ADE:  MOVF   FEF,W
03AE0:  SUBWF  x9E,W
03AE2:  BTFSC  FD8.2
03AE4:  BRA    3AEC
03AE6:  MOVLB  0
03AE8:  GOTO   3B1A
03AEC:  MOVLB  0
....................          return frame_ids[i].length;
03AEE:  BCF    FD8.0
03AF0:  MOVLB  3
03AF2:  RLCF   x9F,W
03AF4:  CLRF   xA1
03AF6:  MOVWF  xA0
03AF8:  MOVLW  01
03AFA:  ADDWF  xA0,W
03AFC:  MOVWF  01
03AFE:  MOVLW  00
03B00:  ADDWFC xA1,W
03B02:  MOVWF  03
03B04:  MOVF   01,W
03B06:  ADDLW  E6
03B08:  MOVWF  FE9
03B0A:  MOVLW  00
03B0C:  ADDWFC 03,W
03B0E:  MOVWF  FEA
03B10:  MOVF   FEF,W
03B12:  MOVWF  01
03B14:  MOVLB  0
03B16:  GOTO   3B68
03B1A:  MOVLB  3
03B1C:  INCF   x9F,F
03B1E:  MOVLB  0
03B20:  GOTO   3AB6
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
03B24:  MOVLW  B4
03B26:  MOVWF  FF6
03B28:  MOVLW  06
03B2A:  MOVWF  FF7
03B2C:  MOVLW  00
03B2E:  MOVWF  FF8
03B30:  MOVLW  1F
03B32:  MOVLB  7
03B34:  MOVWF  xEC
03B36:  MOVLB  0
03B38:  CALL   1744
03B3C:  MOVFF  39E,847
03B40:  MOVLW  37
03B42:  MOVLB  8
03B44:  MOVWF  x48
03B46:  MOVLB  0
03B48:  CALL   1F34
03B4C:  MOVLW  0D
03B4E:  MOVLB  8
03B50:  MOVWF  x49
03B52:  MOVLB  0
03B54:  CALL   16C2
03B58:  MOVLW  0A
03B5A:  MOVLB  8
03B5C:  MOVWF  x49
03B5E:  MOVLB  0
03B60:  CALL   16C2
....................    return -1;
03B64:  MOVLW  FF
03B66:  MOVWF  01
03B68:  GOTO   3E5E (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
03BB6:  MOVLW  01
03BB8:  MOVLB  3
03BBA:  SUBWF  xA0,W
03BBC:  ADDWF  x9E,W
03BBE:  MOVWF  FE9
03BC0:  MOVLW  00
03BC2:  ADDWFC x9F,W
03BC4:  MOVWF  FEA
03BC6:  MOVFF  FEF,3A1
03BCA:  MOVLW  01
03BCC:  SUBWF  xA0,W
03BCE:  MOVWF  xA3
03BD0:  MOVFF  39F,7ED
03BD4:  MOVFF  39E,7EC
03BD8:  MOVFF  3A3,7EE
03BDC:  MOVLB  0
03BDE:  CALL   3B6C
03BE2:  MOVFF  01,3A2
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
03BE6:  MOVLB  3
03BE8:  MOVF   xA2,W
03BEA:  SUBWF  xA1,W
03BEC:  BTFSC  FD8.2
03BEE:  BRA    3BF6
03BF0:  MOVLB  0
03BF2:  GOTO   3C04
03BF6:  MOVLB  0
....................       return TRUE;
03BF8:  MOVLW  01
03BFA:  MOVWF  01
03BFC:  GOTO   3C9C
03C00:  GOTO   3C9C
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
03C04:  MOVLW  D8
03C06:  MOVWF  FF6
03C08:  MOVLW  06
03C0A:  MOVWF  FF7
03C0C:  MOVLW  00
03C0E:  MOVWF  FF8
03C10:  CALL   1714
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
03C14:  MOVLW  EA
03C16:  MOVWF  FF6
03C18:  MOVLW  06
03C1A:  MOVWF  FF7
03C1C:  MOVLW  00
03C1E:  MOVWF  FF8
03C20:  MOVLW  13
03C22:  MOVLB  7
03C24:  MOVWF  xEC
03C26:  MOVLB  0
03C28:  CALL   1744
03C2C:  MOVFF  3A1,847
03C30:  MOVLW  37
03C32:  MOVLB  8
03C34:  MOVWF  x48
03C36:  MOVLB  0
03C38:  CALL   1F34
03C3C:  MOVLW  0D
03C3E:  MOVLB  8
03C40:  MOVWF  x49
03C42:  MOVLB  0
03C44:  CALL   16C2
03C48:  MOVLW  0A
03C4A:  MOVLB  8
03C4C:  MOVWF  x49
03C4E:  MOVLB  0
03C50:  CALL   16C2
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
03C54:  MOVLW  02
03C56:  MOVWF  FF6
03C58:  MOVLW  07
03C5A:  MOVWF  FF7
03C5C:  MOVLW  00
03C5E:  MOVWF  FF8
03C60:  MOVLW  13
03C62:  MOVLB  7
03C64:  MOVWF  xEC
03C66:  MOVLB  0
03C68:  CALL   1744
03C6C:  MOVFF  3A2,847
03C70:  MOVLW  37
03C72:  MOVLB  8
03C74:  MOVWF  x48
03C76:  MOVLB  0
03C78:  CALL   1F34
03C7C:  MOVLW  0D
03C7E:  MOVLB  8
03C80:  MOVWF  x49
03C82:  MOVLB  0
03C84:  CALL   16C2
03C88:  MOVLW  0A
03C8A:  MOVLB  8
03C8C:  MOVWF  x49
03C8E:  MOVLB  0
03C90:  CALL   16C2
....................       return FALSE;
03C94:  MOVLW  00
03C96:  MOVWF  01
03C98:  GOTO   3C9C
....................    }
03C9C:  GOTO   3E9A (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
03CA0:  MOVLB  3
03CA2:  MOVF   x9F,W
03CA4:  SUBLW  0C
03CA6:  BTFSC  FD8.2
03CA8:  BRA    3CB0
03CAA:  MOVLB  0
03CAC:  GOTO   3CBE
03CB0:  MOVLB  0
....................       return TRUE;
03CB2:  MOVLW  01
03CB4:  MOVWF  01
03CB6:  GOTO   3D56
03CBA:  GOTO   3D56
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
03CBE:  MOVLW  1A
03CC0:  MOVWF  FF6
03CC2:  MOVLW  07
03CC4:  MOVWF  FF7
03CC6:  MOVLW  00
03CC8:  MOVWF  FF8
03CCA:  CALL   1714
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
03CCE:  MOVLW  3C
03CD0:  MOVWF  FF6
03CD2:  MOVLW  07
03CD4:  MOVWF  FF7
03CD6:  MOVLW  00
03CD8:  MOVWF  FF8
03CDA:  MOVLW  13
03CDC:  MOVLB  7
03CDE:  MOVWF  xEC
03CE0:  MOVLB  0
03CE2:  CALL   1744
03CE6:  MOVFF  39F,847
03CEA:  MOVLW  37
03CEC:  MOVLB  8
03CEE:  MOVWF  x48
03CF0:  MOVLB  0
03CF2:  CALL   1F34
03CF6:  MOVLW  0D
03CF8:  MOVLB  8
03CFA:  MOVWF  x49
03CFC:  MOVLB  0
03CFE:  CALL   16C2
03D02:  MOVLW  0A
03D04:  MOVLB  8
03D06:  MOVWF  x49
03D08:  MOVLB  0
03D0A:  CALL   16C2
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
03D0E:  MOVLW  54
03D10:  MOVWF  FF6
03D12:  MOVLW  07
03D14:  MOVWF  FF7
03D16:  MOVLW  00
03D18:  MOVWF  FF8
03D1A:  MOVLW  13
03D1C:  MOVLB  7
03D1E:  MOVWF  xEC
03D20:  MOVLB  0
03D22:  CALL   1744
03D26:  MOVLW  0C
03D28:  MOVLB  8
03D2A:  MOVWF  x47
03D2C:  MOVLW  37
03D2E:  MOVWF  x48
03D30:  MOVLB  0
03D32:  CALL   1F34
03D36:  MOVLW  0D
03D38:  MOVLB  8
03D3A:  MOVWF  x49
03D3C:  MOVLB  0
03D3E:  CALL   16C2
03D42:  MOVLW  0A
03D44:  MOVLB  8
03D46:  MOVWF  x49
03D48:  MOVLB  0
03D4A:  CALL   16C2
....................       return FALSE;  
03D4E:  MOVLW  00
03D50:  MOVWF  01
03D52:  GOTO   3D56
....................    }
03D56:  GOTO   3ED0 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
04080:  MOVLW  AA
04082:  MOVLB  3
04084:  MOVWF  x8A
....................    data[1] = (BOSS_PIC << 4) | frame_id;
04086:  MOVF   x86,W
04088:  IORLW  50
0408A:  MOVWF  x8B
....................    memcpy(&data[2], content, size);
0408C:  MOVLW  03
0408E:  MOVWF  FEA
04090:  MOVLW  8C
04092:  MOVWF  FE9
04094:  MOVFF  388,FE2
04098:  MOVFF  387,FE1
0409C:  MOVF   x89,W
0409E:  MOVWF  01
040A0:  BTFSS  FD8.2
040A2:  BRA    40AA
040A4:  MOVLB  0
040A6:  GOTO   40B6
040AA:  MOVLB  0
040AC:  MOVFF  FE6,FEE
040B0:  DECFSZ 01,F
040B2:  GOTO   40AC
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
040B6:  MOVLW  02
040B8:  MOVLB  3
040BA:  ADDWF  x89,W
040BC:  MOVWF  x9A
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
040BE:  CLRF   03
040C0:  MOVF   x9A,W
040C2:  ADDLW  8A
040C4:  MOVWF  01
040C6:  MOVLW  03
040C8:  ADDWFC 03,F
040CA:  MOVF   01,W
040CC:  MOVWF  x9C
040CE:  MOVFF  03,39D
040D2:  MOVLW  01
040D4:  SUBWF  x9A,W
040D6:  MOVWF  x9E
040D8:  MOVLW  03
040DA:  MOVLB  7
040DC:  MOVWF  xED
040DE:  MOVLW  8B
040E0:  MOVWF  xEC
040E2:  MOVFF  39E,7EE
040E6:  MOVLB  0
040E8:  CALL   3B6C
040EC:  MOVFF  39D,FEA
040F0:  MOVFF  39C,FE9
040F4:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
040F8:  MOVLW  01
040FA:  MOVLB  3
040FC:  ADDWF  x9A,W
040FE:  MOVWF  x9B
....................    
....................    transmit(data, data_size);
04100:  MOVLW  03
04102:  MOVWF  x9D
04104:  MOVLW  8A
04106:  MOVWF  x9C
04108:  MOVFF  39B,39E
0410C:  MOVLB  0
0410E:  GOTO   3FC8
04112:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
03FC8:  MOVLB  3
03FCA:  CLRF   x9F
03FCC:  MOVLB  0
03FCE:  MOVLB  3
03FD0:  MOVF   x9E,W
03FD2:  SUBWF  x9F,W
03FD4:  BTFSS  FD8.0
03FD6:  BRA    3FDE
03FD8:  MOVLB  0
03FDA:  GOTO   4004
03FDE:  MOVLB  0
....................       fputc(data[i], BOSS);
03FE0:  MOVLB  3
03FE2:  MOVF   x9F,W
03FE4:  ADDWF  x9C,W
03FE6:  MOVWF  FE9
03FE8:  MOVLW  00
03FEA:  ADDWFC x9D,W
03FEC:  MOVWF  FEA
03FEE:  MOVFF  FEF,3A1
03FF2:  MOVF   xA1,W
03FF4:  MOVLB  0
03FF6:  GOTO   3FB8
03FFA:  MOVLB  3
03FFC:  INCF   x9F,F
03FFE:  MOVLB  0
04000:  GOTO   3FCE
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
04004:  MOVLW  6C
04006:  MOVWF  FF6
04008:  MOVLW  07
0400A:  MOVWF  FF7
0400C:  MOVLW  00
0400E:  MOVWF  FF8
04010:  CALL   1714
....................    for(int i = 0; i < data_size; i++)
04014:  MOVLB  3
04016:  CLRF   xA0
04018:  MOVLB  0
0401A:  MOVLB  3
0401C:  MOVF   x9E,W
0401E:  SUBWF  xA0,W
04020:  BTFSS  FD8.0
04022:  BRA    402A
04024:  MOVLB  0
04026:  GOTO   4064
0402A:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0402C:  MOVLB  3
0402E:  MOVF   xA0,W
04030:  ADDWF  x9C,W
04032:  MOVWF  FE9
04034:  MOVLW  00
04036:  ADDWFC x9D,W
04038:  MOVWF  FEA
0403A:  MOVFF  FEF,3A1
0403E:  MOVFF  3A1,847
04042:  MOVLW  37
04044:  MOVLB  8
04046:  MOVWF  x48
04048:  MOVLB  0
0404A:  CALL   1F34
0404E:  MOVLW  20
04050:  MOVLB  8
04052:  MOVWF  x49
04054:  MOVLB  0
04056:  CALL   16C2
0405A:  MOVLB  3
0405C:  INCF   xA0,F
0405E:  MOVLB  0
04060:  GOTO   401A
....................    fprintf(PC, "\r\n");
04064:  MOVLW  0D
04066:  MOVLB  8
04068:  MOVWF  x49
0406A:  MOVLB  0
0406C:  CALL   16C2
04070:  MOVLW  0A
04072:  MOVLB  8
04074:  MOVWF  x49
04076:  MOVLB  0
04078:  CALL   16C2
0407C:  GOTO   4112 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
04114:  MOVLW  0F
04116:  MOVLB  3
04118:  MOVWF  x86
0411A:  CLRF   x88
0411C:  CLRF   x87
0411E:  CLRF   x89
04120:  MOVLB  0
04122:  CALL   4080
04126:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
06AAA:  MOVLW  03
06AAC:  MOVLB  3
06AAE:  MOVWF  x86
06AB0:  CLRF   x88
06AB2:  MOVLW  1D
06AB4:  MOVWF  x87
06AB6:  MOVLW  04
06AB8:  MOVWF  x89
06ABA:  MOVLB  0
06ABC:  CALL   4080
06AC0:  GOTO   6AE8 (RETURN)
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
022F4:  MOVLW  80
022F6:  MOVWF  FF6
022F8:  MOVLW  08
022FA:  MOVWF  FF7
022FC:  MOVLW  00
022FE:  MOVWF  FF8
02300:  CALL   1714
....................     //output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
....................     //output_high(SMF_CS); // Set CS pin high to deselect the SMF
....................     
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
02304:  BCF    F92.5
02306:  BSF    F89.5
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
02308:  BCF    F92.2
0230A:  BSF    F89.2
.................... 
....................     if (!is_connect(mis_fm)) {
0230C:  MOVFF  E1,82F
02310:  MOVFF  E0,82E
02314:  MOVFF  DF,82D
02318:  MOVFF  DE,82C
0231C:  CALL   1FA4
02320:  MOVF   01,F
02322:  BTFSS  FD8.2
02324:  GOTO   233C
....................         fprintf(PC, "\t[MIS FM] connect error!\r\n");
02328:  MOVLW  9C
0232A:  MOVWF  FF6
0232C:  MOVLW  08
0232E:  MOVWF  FF7
02330:  MOVLW  00
02332:  MOVWF  FF8
02334:  CALL   1714
....................         // return;
....................     }else {
02338:  GOTO   233C
....................         //fprintf(PC, "\t[MIS FM] is connected\r\n");
....................     }
....................     if (!is_connect(smf)) {
0233C:  MOVFF  E5,82F
02340:  MOVFF  E4,82E
02344:  MOVFF  E3,82D
02348:  MOVFF  E2,82C
0234C:  CALL   1FA4
02350:  MOVF   01,F
02352:  BTFSS  FD8.2
02354:  GOTO   236C
....................         fprintf(PC, "\t[SMF] connect error!\r\n");
02358:  MOVLW  B8
0235A:  MOVWF  FF6
0235C:  MOVLW  08
0235E:  MOVWF  FF7
02360:  MOVLW  00
02362:  MOVWF  FF8
02364:  CALL   1714
....................     }else {
02368:  GOTO   236C
....................         //fprintf(PC, "\t[SMF] is connected\r\n");
....................     }
.................... 
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
0236C:  MOVFF  E1,418
02370:  MOVFF  E0,417
02374:  MOVFF  DF,416
02378:  MOVFF  DE,415
0237C:  MOVLB  4
0237E:  CLRF   x1C
02380:  CLRF   x1B
02382:  CLRF   x1A
02384:  CLRF   x19
02386:  MOVLW  03
02388:  MOVWF  x1E
0238A:  MOVLW  CF
0238C:  MOVWF  x1D
0238E:  CLRF   x22
02390:  CLRF   x21
02392:  CLRF   x20
02394:  MOVLW  40
02396:  MOVWF  x1F
02398:  MOVLB  0
0239A:  CALL   20DC
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
0239E:  MOVLB  4
023A0:  CLRF   x12
023A2:  CLRF   x11
023A4:  CLRF   x10
023A6:  MOVFF  3CF,40F
023AA:  MOVFF  40F,412
023AE:  CLRF   x0F
023B0:  CLRF   x10
023B2:  CLRF   x11
023B4:  CLRF   x17
023B6:  CLRF   x16
023B8:  CLRF   x15
023BA:  MOVFF  3D0,414
023BE:  MOVFF  415,03
023C2:  MOVFF  414,02
023C6:  CLRF   00
023C8:  CLRF   01
023CA:  MOVF   00,W
023CC:  IORWF  x0F,F
023CE:  MOVF   01,W
023D0:  IORWF  x10,F
023D2:  MOVF   02,W
023D4:  IORWF  x11,F
023D6:  MOVF   03,W
023D8:  IORWF  x12,F
023DA:  CLRF   x17
023DC:  CLRF   x16
023DE:  CLRF   x15
023E0:  MOVFF  3D1,414
023E4:  MOVFF  416,03
023E8:  MOVFF  415,02
023EC:  MOVFF  414,01
023F0:  CLRF   00
023F2:  MOVF   00,W
023F4:  IORWF  x0F,F
023F6:  MOVF   01,W
023F8:  IORWF  x10,F
023FA:  MOVF   02,W
023FC:  IORWF  x11,F
023FE:  MOVF   03,W
02400:  IORWF  x12,F
02402:  MOVFF  3D2,00
02406:  CLRF   01
02408:  CLRF   02
0240A:  CLRF   03
0240C:  MOVF   00,W
0240E:  IORWF  x0F,W
02410:  MOVLB  3
02412:  MOVWF  x56
02414:  MOVF   01,W
02416:  MOVLB  4
02418:  IORWF  x10,W
0241A:  MOVLB  3
0241C:  MOVWF  x57
0241E:  MOVF   02,W
02420:  MOVLB  4
02422:  IORWF  x11,W
02424:  MOVLB  3
02426:  MOVWF  x58
02428:  MOVF   03,W
0242A:  MOVLB  4
0242C:  IORWF  x12,W
0242E:  MOVLB  3
02430:  MOVWF  x59
....................     smf_piclog_loop_counter = readdata[4];
02432:  MOVFF  3D3,35A
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
02436:  MOVLB  4
02438:  CLRF   x12
0243A:  CLRF   x11
0243C:  CLRF   x10
0243E:  MOVFF  3D4,40F
02442:  MOVFF  40F,412
02446:  CLRF   x0F
02448:  CLRF   x10
0244A:  CLRF   x11
0244C:  CLRF   x17
0244E:  CLRF   x16
02450:  CLRF   x15
02452:  MOVFF  3D5,414
02456:  MOVFF  415,03
0245A:  MOVFF  414,02
0245E:  CLRF   00
02460:  CLRF   01
02462:  MOVF   00,W
02464:  IORWF  x0F,F
02466:  MOVF   01,W
02468:  IORWF  x10,F
0246A:  MOVF   02,W
0246C:  IORWF  x11,F
0246E:  MOVF   03,W
02470:  IORWF  x12,F
02472:  CLRF   x17
02474:  CLRF   x16
02476:  CLRF   x15
02478:  MOVFF  3D6,414
0247C:  MOVFF  416,03
02480:  MOVFF  415,02
02484:  MOVFF  414,01
02488:  CLRF   00
0248A:  MOVF   00,W
0248C:  IORWF  x0F,F
0248E:  MOVF   01,W
02490:  IORWF  x10,F
02492:  MOVF   02,W
02494:  IORWF  x11,F
02496:  MOVF   03,W
02498:  IORWF  x12,F
0249A:  MOVFF  3D7,00
0249E:  CLRF   01
024A0:  CLRF   02
024A2:  CLRF   03
024A4:  MOVF   00,W
024A6:  IORWF  x0F,W
024A8:  MOVLB  3
024AA:  MOVWF  x5B
024AC:  MOVF   01,W
024AE:  MOVLB  4
024B0:  IORWF  x10,W
024B2:  MOVLB  3
024B4:  MOVWF  x5C
024B6:  MOVF   02,W
024B8:  MOVLB  4
024BA:  IORWF  x11,W
024BC:  MOVLB  3
024BE:  MOVWF  x5D
024C0:  MOVF   03,W
024C2:  MOVLB  4
024C4:  IORWF  x12,W
024C6:  MOVLB  3
024C8:  MOVWF  x5E
....................     smf_meas_loop_counter = readdata[9];
024CA:  MOVFF  3D8,35F
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
024CE:  MOVLB  4
024D0:  CLRF   x12
024D2:  CLRF   x11
024D4:  CLRF   x10
024D6:  MOVFF  3D9,40F
024DA:  MOVFF  40F,412
024DE:  CLRF   x0F
024E0:  CLRF   x10
024E2:  CLRF   x11
024E4:  CLRF   x17
024E6:  CLRF   x16
024E8:  CLRF   x15
024EA:  MOVFF  3DA,414
024EE:  MOVFF  415,03
024F2:  MOVFF  414,02
024F6:  CLRF   00
024F8:  CLRF   01
024FA:  MOVF   00,W
024FC:  IORWF  x0F,F
024FE:  MOVF   01,W
02500:  IORWF  x10,F
02502:  MOVF   02,W
02504:  IORWF  x11,F
02506:  MOVF   03,W
02508:  IORWF  x12,F
0250A:  CLRF   x17
0250C:  CLRF   x16
0250E:  CLRF   x15
02510:  MOVFF  3DB,414
02514:  MOVFF  416,03
02518:  MOVFF  415,02
0251C:  MOVFF  414,01
02520:  CLRF   00
02522:  MOVF   00,W
02524:  IORWF  x0F,F
02526:  MOVF   01,W
02528:  IORWF  x10,F
0252A:  MOVF   02,W
0252C:  IORWF  x11,F
0252E:  MOVF   03,W
02530:  IORWF  x12,F
02532:  MOVFF  3DC,00
02536:  CLRF   01
02538:  CLRF   02
0253A:  CLRF   03
0253C:  MOVF   00,W
0253E:  IORWF  x0F,W
02540:  MOVLB  3
02542:  MOVWF  x60
02544:  MOVF   01,W
02546:  MOVLB  4
02548:  IORWF  x10,W
0254A:  MOVLB  3
0254C:  MOVWF  x61
0254E:  MOVF   02,W
02550:  MOVLB  4
02552:  IORWF  x11,W
02554:  MOVLB  3
02556:  MOVWF  x62
02558:  MOVF   03,W
0255A:  MOVLB  4
0255C:  IORWF  x12,W
0255E:  MOVLB  3
02560:  MOVWF  x63
....................     misf_piclog_loop_counter = readdata[14];
02562:  MOVFF  3DD,364
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
02566:  MOVLB  4
02568:  CLRF   x12
0256A:  CLRF   x11
0256C:  CLRF   x10
0256E:  MOVFF  3DE,40F
02572:  MOVFF  40F,412
02576:  CLRF   x0F
02578:  CLRF   x10
0257A:  CLRF   x11
0257C:  CLRF   x17
0257E:  CLRF   x16
02580:  CLRF   x15
02582:  MOVFF  3DF,414
02586:  MOVFF  415,03
0258A:  MOVFF  414,02
0258E:  CLRF   00
02590:  CLRF   01
02592:  MOVF   00,W
02594:  IORWF  x0F,F
02596:  MOVF   01,W
02598:  IORWF  x10,F
0259A:  MOVF   02,W
0259C:  IORWF  x11,F
0259E:  MOVF   03,W
025A0:  IORWF  x12,F
025A2:  CLRF   x17
025A4:  CLRF   x16
025A6:  CLRF   x15
025A8:  MOVFF  3E0,414
025AC:  MOVFF  416,03
025B0:  MOVFF  415,02
025B4:  MOVFF  414,01
025B8:  CLRF   00
025BA:  MOVF   00,W
025BC:  IORWF  x0F,F
025BE:  MOVF   01,W
025C0:  IORWF  x10,F
025C2:  MOVF   02,W
025C4:  IORWF  x11,F
025C6:  MOVF   03,W
025C8:  IORWF  x12,F
025CA:  MOVFF  3E1,00
025CE:  CLRF   01
025D0:  CLRF   02
025D2:  CLRF   03
025D4:  MOVF   00,W
025D6:  IORWF  x0F,W
025D8:  MOVLB  3
025DA:  MOVWF  x65
025DC:  MOVF   01,W
025DE:  MOVLB  4
025E0:  IORWF  x10,W
025E2:  MOVLB  3
025E4:  MOVWF  x66
025E6:  MOVF   02,W
025E8:  MOVLB  4
025EA:  IORWF  x11,W
025EC:  MOVLB  3
025EE:  MOVWF  x67
025F0:  MOVF   03,W
025F2:  MOVLB  4
025F4:  IORWF  x12,W
025F6:  MOVLB  3
025F8:  MOVWF  x68
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
025FA:  MOVLB  4
025FC:  CLRF   x12
025FE:  CLRF   x11
02600:  CLRF   x10
02602:  MOVFF  3E2,40F
02606:  MOVFF  40F,412
0260A:  CLRF   x0F
0260C:  CLRF   x10
0260E:  CLRF   x11
02610:  CLRF   x17
02612:  CLRF   x16
02614:  CLRF   x15
02616:  MOVFF  3E3,414
0261A:  MOVFF  415,03
0261E:  MOVFF  414,02
02622:  CLRF   00
02624:  CLRF   01
02626:  MOVF   00,W
02628:  IORWF  x0F,F
0262A:  MOVF   01,W
0262C:  IORWF  x10,F
0262E:  MOVF   02,W
02630:  IORWF  x11,F
02632:  MOVF   03,W
02634:  IORWF  x12,F
02636:  CLRF   x17
02638:  CLRF   x16
0263A:  CLRF   x15
0263C:  MOVFF  3E4,414
02640:  MOVFF  416,03
02644:  MOVFF  415,02
02648:  MOVFF  414,01
0264C:  CLRF   00
0264E:  MOVF   00,W
02650:  IORWF  x0F,F
02652:  MOVF   01,W
02654:  IORWF  x10,F
02656:  MOVF   02,W
02658:  IORWF  x11,F
0265A:  MOVF   03,W
0265C:  IORWF  x12,F
0265E:  MOVFF  3E5,00
02662:  CLRF   01
02664:  CLRF   02
02666:  CLRF   03
02668:  MOVF   00,W
0266A:  IORWF  x0F,W
0266C:  MOVLB  3
0266E:  MOVWF  x69
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
02670:  MOVLB  4
02672:  CLRF   x12
02674:  CLRF   x11
02676:  CLRF   x10
02678:  MOVFF  3E6,40F
0267C:  MOVFF  40F,412
02680:  CLRF   x0F
02682:  CLRF   x10
02684:  CLRF   x11
02686:  CLRF   x17
02688:  CLRF   x16
0268A:  CLRF   x15
0268C:  MOVFF  3E7,414
02690:  MOVFF  415,03
02694:  MOVFF  414,02
02698:  CLRF   00
0269A:  CLRF   01
0269C:  MOVF   00,W
0269E:  IORWF  x0F,F
026A0:  MOVF   01,W
026A2:  IORWF  x10,F
026A4:  MOVF   02,W
026A6:  IORWF  x11,F
026A8:  MOVF   03,W
026AA:  IORWF  x12,F
026AC:  CLRF   x17
026AE:  CLRF   x16
026B0:  CLRF   x15
026B2:  MOVFF  3E8,414
026B6:  MOVFF  416,03
026BA:  MOVFF  415,02
026BE:  MOVFF  414,01
026C2:  CLRF   00
026C4:  MOVF   00,W
026C6:  IORWF  x0F,F
026C8:  MOVF   01,W
026CA:  IORWF  x10,F
026CC:  MOVF   02,W
026CE:  IORWF  x11,F
026D0:  MOVF   03,W
026D2:  IORWF  x12,F
026D4:  MOVFF  3E9,00
026D8:  CLRF   01
026DA:  CLRF   02
026DC:  CLRF   03
026DE:  MOVF   00,W
026E0:  IORWF  x0F,W
026E2:  MOVLB  3
026E4:  MOVWF  x6A
026E6:  MOVF   01,W
026E8:  MOVLB  4
026EA:  IORWF  x10,W
026EC:  MOVLB  3
026EE:  MOVWF  x6B
026F0:  MOVF   02,W
026F2:  MOVLB  4
026F4:  IORWF  x11,W
026F6:  MOVLB  3
026F8:  MOVWF  x6C
026FA:  MOVF   03,W
026FC:  MOVLB  4
026FE:  IORWF  x12,W
02700:  MOVLB  3
02702:  MOVWF  x6D
....................     misf_meas_loop_counter = readdata[27];
02704:  MOVFF  3EA,36E
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
02708:  MOVLB  4
0270A:  CLRF   x12
0270C:  CLRF   x11
0270E:  CLRF   x10
02710:  MOVFF  3EB,40F
02714:  MOVFF  40F,412
02718:  CLRF   x0F
0271A:  CLRF   x10
0271C:  CLRF   x11
0271E:  CLRF   x17
02720:  CLRF   x16
02722:  CLRF   x15
02724:  MOVFF  3EC,414
02728:  MOVFF  415,03
0272C:  MOVFF  414,02
02730:  CLRF   00
02732:  CLRF   01
02734:  MOVF   00,W
02736:  IORWF  x0F,F
02738:  MOVF   01,W
0273A:  IORWF  x10,F
0273C:  MOVF   02,W
0273E:  IORWF  x11,F
02740:  MOVF   03,W
02742:  IORWF  x12,F
02744:  CLRF   x17
02746:  CLRF   x16
02748:  CLRF   x15
0274A:  MOVFF  3ED,414
0274E:  MOVFF  416,03
02752:  MOVFF  415,02
02756:  MOVFF  414,01
0275A:  CLRF   00
0275C:  MOVF   00,W
0275E:  IORWF  x0F,F
02760:  MOVF   01,W
02762:  IORWF  x10,F
02764:  MOVF   02,W
02766:  IORWF  x11,F
02768:  MOVF   03,W
0276A:  IORWF  x12,F
0276C:  MOVFF  3EE,00
02770:  CLRF   01
02772:  CLRF   02
02774:  CLRF   03
02776:  MOVF   00,W
02778:  IORWF  x0F,W
0277A:  MOVLB  3
0277C:  MOVWF  x6F
0277E:  MOVF   01,W
02780:  MOVLB  4
02782:  IORWF  x10,W
02784:  MOVLB  3
02786:  MOVWF  x70
02788:  MOVF   02,W
0278A:  MOVLB  4
0278C:  IORWF  x11,W
0278E:  MOVLB  3
02790:  MOVWF  x71
02792:  MOVF   03,W
02794:  MOVLB  4
02796:  IORWF  x12,W
02798:  MOVLB  3
0279A:  MOVWF  x72
.................... 
....................     fprintf(PC, "\t| SMF  | PICLOG | Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
0279C:  MOVLW  D0
0279E:  MOVWF  FF6
027A0:  MOVLW  08
027A2:  MOVWF  FF7
027A4:  MOVLW  00
027A6:  MOVWF  FF8
027A8:  MOVLW  28
027AA:  MOVLB  7
027AC:  MOVWF  xEC
027AE:  MOVLB  0
027B0:  CALL   1744
027B4:  MOVFF  359,847
027B8:  MOVLW  37
027BA:  MOVLB  8
027BC:  MOVWF  x48
027BE:  MOVLB  0
027C0:  CALL   1F34
027C4:  MOVFF  358,847
027C8:  MOVLW  37
027CA:  MOVLB  8
027CC:  MOVWF  x48
027CE:  MOVLB  0
027D0:  CALL   1F34
027D4:  MOVFF  357,847
027D8:  MOVLW  37
027DA:  MOVLB  8
027DC:  MOVWF  x48
027DE:  MOVLB  0
027E0:  CALL   1F34
027E4:  MOVFF  356,847
027E8:  MOVLW  37
027EA:  MOVLB  8
027EC:  MOVWF  x48
027EE:  MOVLB  0
027F0:  CALL   1F34
027F4:  MOVLW  0D
027F6:  MOVLB  8
027F8:  MOVWF  x49
027FA:  MOVLB  0
027FC:  CALL   16C2
02800:  MOVLW  0A
02802:  MOVLB  8
02804:  MOVWF  x49
02806:  MOVLB  0
02808:  CALL   16C2
....................     fprintf(PC, "\t| SMF  | PICLOG | Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
0280C:  MOVLW  00
0280E:  MOVWF  FF6
02810:  MOVLW  09
02812:  MOVWF  FF7
02814:  MOVLW  00
02816:  MOVWF  FF8
02818:  MOVLW  28
0281A:  MOVLB  7
0281C:  MOVWF  xEC
0281E:  MOVLB  0
02820:  CALL   1744
02824:  MOVFF  35A,847
02828:  MOVLW  37
0282A:  MOVLB  8
0282C:  MOVWF  x48
0282E:  MOVLB  0
02830:  CALL   1F34
02834:  MOVLW  0D
02836:  MOVLB  8
02838:  MOVWF  x49
0283A:  MOVLB  0
0283C:  CALL   16C2
02840:  MOVLW  0A
02842:  MOVLB  8
02844:  MOVWF  x49
02846:  MOVLB  0
02848:  CALL   16C2
....................     fprintf(PC, "\t| SMF  | MEAS   | Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
0284C:  MOVLW  30
0284E:  MOVWF  FF6
02850:  MOVLW  09
02852:  MOVWF  FF7
02854:  MOVLW  00
02856:  MOVWF  FF8
02858:  MOVLW  28
0285A:  MOVLB  7
0285C:  MOVWF  xEC
0285E:  MOVLB  0
02860:  CALL   1744
02864:  MOVFF  35E,847
02868:  MOVLW  37
0286A:  MOVLB  8
0286C:  MOVWF  x48
0286E:  MOVLB  0
02870:  CALL   1F34
02874:  MOVFF  35D,847
02878:  MOVLW  37
0287A:  MOVLB  8
0287C:  MOVWF  x48
0287E:  MOVLB  0
02880:  CALL   1F34
02884:  MOVFF  35C,847
02888:  MOVLW  37
0288A:  MOVLB  8
0288C:  MOVWF  x48
0288E:  MOVLB  0
02890:  CALL   1F34
02894:  MOVFF  35B,847
02898:  MOVLW  37
0289A:  MOVLB  8
0289C:  MOVWF  x48
0289E:  MOVLB  0
028A0:  CALL   1F34
028A4:  MOVLW  0D
028A6:  MOVLB  8
028A8:  MOVWF  x49
028AA:  MOVLB  0
028AC:  CALL   16C2
028B0:  MOVLW  0A
028B2:  MOVLB  8
028B4:  MOVWF  x49
028B6:  MOVLB  0
028B8:  CALL   16C2
....................     fprintf(PC, "\t| SMF  | MEAS   | Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
028BC:  MOVLW  60
028BE:  MOVWF  FF6
028C0:  MOVLW  09
028C2:  MOVWF  FF7
028C4:  MOVLW  00
028C6:  MOVWF  FF8
028C8:  MOVLW  28
028CA:  MOVLB  7
028CC:  MOVWF  xEC
028CE:  MOVLB  0
028D0:  CALL   1744
028D4:  MOVFF  35F,847
028D8:  MOVLW  37
028DA:  MOVLB  8
028DC:  MOVWF  x48
028DE:  MOVLB  0
028E0:  CALL   1F34
028E4:  MOVLW  0D
028E6:  MOVLB  8
028E8:  MOVWF  x49
028EA:  MOVLB  0
028EC:  CALL   16C2
028F0:  MOVLW  0A
028F2:  MOVLB  8
028F4:  MOVWF  x49
028F6:  MOVLB  0
028F8:  CALL   16C2
....................     fprintf(PC, "\t| MISF | PICLOG | Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
028FC:  MOVLW  90
028FE:  MOVWF  FF6
02900:  MOVLW  09
02902:  MOVWF  FF7
02904:  MOVLW  00
02906:  MOVWF  FF8
02908:  MOVLW  28
0290A:  MOVLB  7
0290C:  MOVWF  xEC
0290E:  MOVLB  0
02910:  CALL   1744
02914:  MOVFF  363,847
02918:  MOVLW  37
0291A:  MOVLB  8
0291C:  MOVWF  x48
0291E:  MOVLB  0
02920:  CALL   1F34
02924:  MOVFF  362,847
02928:  MOVLW  37
0292A:  MOVLB  8
0292C:  MOVWF  x48
0292E:  MOVLB  0
02930:  CALL   1F34
02934:  MOVFF  361,847
02938:  MOVLW  37
0293A:  MOVLB  8
0293C:  MOVWF  x48
0293E:  MOVLB  0
02940:  CALL   1F34
02944:  MOVFF  360,847
02948:  MOVLW  37
0294A:  MOVLB  8
0294C:  MOVWF  x48
0294E:  MOVLB  0
02950:  CALL   1F34
02954:  MOVLW  0D
02956:  MOVLB  8
02958:  MOVWF  x49
0295A:  MOVLB  0
0295C:  CALL   16C2
02960:  MOVLW  0A
02962:  MOVLB  8
02964:  MOVWF  x49
02966:  MOVLB  0
02968:  CALL   16C2
....................     fprintf(PC, "\t| MISF | PICLOG | Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
0296C:  MOVLW  C0
0296E:  MOVWF  FF6
02970:  MOVLW  09
02972:  MOVWF  FF7
02974:  MOVLW  00
02976:  MOVWF  FF8
02978:  MOVLW  28
0297A:  MOVLB  7
0297C:  MOVWF  xEC
0297E:  MOVLB  0
02980:  CALL   1744
02984:  MOVFF  368,847
02988:  MOVLW  37
0298A:  MOVLB  8
0298C:  MOVWF  x48
0298E:  MOVLB  0
02990:  CALL   1F34
02994:  MOVFF  367,847
02998:  MOVLW  37
0299A:  MOVLB  8
0299C:  MOVWF  x48
0299E:  MOVLB  0
029A0:  CALL   1F34
029A4:  MOVFF  366,847
029A8:  MOVLW  37
029AA:  MOVLB  8
029AC:  MOVWF  x48
029AE:  MOVLB  0
029B0:  CALL   1F34
029B4:  MOVFF  365,847
029B8:  MOVLW  37
029BA:  MOVLB  8
029BC:  MOVWF  x48
029BE:  MOVLB  0
029C0:  CALL   1F34
029C4:  MOVLW  0D
029C6:  MOVLB  8
029C8:  MOVWF  x49
029CA:  MOVLB  0
029CC:  CALL   16C2
029D0:  MOVLW  0A
029D2:  MOVLB  8
029D4:  MOVWF  x49
029D6:  MOVLB  0
029D8:  CALL   16C2
....................     fprintf(PC, "\t| MISF | PICLOG | Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
029DC:  MOVLW  F0
029DE:  MOVWF  FF6
029E0:  MOVLW  09
029E2:  MOVWF  FF7
029E4:  MOVLW  00
029E6:  MOVWF  FF8
029E8:  MOVLW  28
029EA:  MOVLB  7
029EC:  MOVWF  xEC
029EE:  MOVLB  0
029F0:  CALL   1744
029F4:  MOVFF  364,847
029F8:  MOVLW  37
029FA:  MOVLB  8
029FC:  MOVWF  x48
029FE:  MOVLB  0
02A00:  CALL   1F34
02A04:  MOVLW  0D
02A06:  MOVLB  8
02A08:  MOVWF  x49
02A0A:  MOVLB  0
02A0C:  CALL   16C2
02A10:  MOVLW  0A
02A12:  MOVLB  8
02A14:  MOVWF  x49
02A16:  MOVLB  0
02A18:  CALL   16C2
....................     fprintf(PC, "\t| MISF | PICLOG | Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
02A1C:  MOVLW  20
02A1E:  MOVWF  FF6
02A20:  MOVLW  0A
02A22:  MOVWF  FF7
02A24:  MOVLW  00
02A26:  MOVWF  FF8
02A28:  MOVLW  28
02A2A:  MOVLB  7
02A2C:  MOVWF  xEC
02A2E:  MOVLB  0
02A30:  CALL   1744
02A34:  MOVFF  369,847
02A38:  MOVLW  37
02A3A:  MOVLB  8
02A3C:  MOVWF  x48
02A3E:  MOVLB  0
02A40:  CALL   1F34
02A44:  MOVLW  0D
02A46:  MOVLB  8
02A48:  MOVWF  x49
02A4A:  MOVLB  0
02A4C:  CALL   16C2
02A50:  MOVLW  0A
02A52:  MOVLB  8
02A54:  MOVWF  x49
02A56:  MOVLB  0
02A58:  CALL   16C2
....................     fprintf(PC, "\t| MISF | MEAS   | Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
02A5C:  MOVLW  50
02A5E:  MOVWF  FF6
02A60:  MOVLW  0A
02A62:  MOVWF  FF7
02A64:  MOVLW  00
02A66:  MOVWF  FF8
02A68:  MOVLW  28
02A6A:  MOVLB  7
02A6C:  MOVWF  xEC
02A6E:  MOVLB  0
02A70:  CALL   1744
02A74:  MOVFF  36D,847
02A78:  MOVLW  37
02A7A:  MOVLB  8
02A7C:  MOVWF  x48
02A7E:  MOVLB  0
02A80:  CALL   1F34
02A84:  MOVFF  36C,847
02A88:  MOVLW  37
02A8A:  MOVLB  8
02A8C:  MOVWF  x48
02A8E:  MOVLB  0
02A90:  CALL   1F34
02A94:  MOVFF  36B,847
02A98:  MOVLW  37
02A9A:  MOVLB  8
02A9C:  MOVWF  x48
02A9E:  MOVLB  0
02AA0:  CALL   1F34
02AA4:  MOVFF  36A,847
02AA8:  MOVLW  37
02AAA:  MOVLB  8
02AAC:  MOVWF  x48
02AAE:  MOVLB  0
02AB0:  CALL   1F34
02AB4:  MOVLW  0D
02AB6:  MOVLB  8
02AB8:  MOVWF  x49
02ABA:  MOVLB  0
02ABC:  CALL   16C2
02AC0:  MOVLW  0A
02AC2:  MOVLB  8
02AC4:  MOVWF  x49
02AC6:  MOVLB  0
02AC8:  CALL   16C2
....................     fprintf(PC, "\t| MISF | MEAS   | Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
02ACC:  MOVLW  80
02ACE:  MOVWF  FF6
02AD0:  MOVLW  0A
02AD2:  MOVWF  FF7
02AD4:  MOVLW  00
02AD6:  MOVWF  FF8
02AD8:  MOVLW  28
02ADA:  MOVLB  7
02ADC:  MOVWF  xEC
02ADE:  MOVLB  0
02AE0:  CALL   1744
02AE4:  MOVFF  372,847
02AE8:  MOVLW  37
02AEA:  MOVLB  8
02AEC:  MOVWF  x48
02AEE:  MOVLB  0
02AF0:  CALL   1F34
02AF4:  MOVFF  371,847
02AF8:  MOVLW  37
02AFA:  MOVLB  8
02AFC:  MOVWF  x48
02AFE:  MOVLB  0
02B00:  CALL   1F34
02B04:  MOVFF  370,847
02B08:  MOVLW  37
02B0A:  MOVLB  8
02B0C:  MOVWF  x48
02B0E:  MOVLB  0
02B10:  CALL   1F34
02B14:  MOVFF  36F,847
02B18:  MOVLW  37
02B1A:  MOVLB  8
02B1C:  MOVWF  x48
02B1E:  MOVLB  0
02B20:  CALL   1F34
02B24:  MOVLW  0D
02B26:  MOVLB  8
02B28:  MOVWF  x49
02B2A:  MOVLB  0
02B2C:  CALL   16C2
02B30:  MOVLW  0A
02B32:  MOVLB  8
02B34:  MOVWF  x49
02B36:  MOVLB  0
02B38:  CALL   16C2
....................     fprintf(PC, "\t| MISF | MEAS   | Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);
02B3C:  MOVLW  B0
02B3E:  MOVWF  FF6
02B40:  MOVLW  0A
02B42:  MOVWF  FF7
02B44:  MOVLW  00
02B46:  MOVWF  FF8
02B48:  MOVLW  28
02B4A:  MOVLB  7
02B4C:  MOVWF  xEC
02B4E:  MOVLB  0
02B50:  CALL   1744
02B54:  MOVFF  36E,847
02B58:  MOVLW  37
02B5A:  MOVLB  8
02B5C:  MOVWF  x48
02B5E:  MOVLB  0
02B60:  CALL   1F34
02B64:  MOVLW  0D
02B66:  MOVLB  8
02B68:  MOVWF  x49
02B6A:  MOVLB  0
02B6C:  CALL   16C2
02B70:  MOVLW  0A
02B72:  MOVLB  8
02B74:  MOVWF  x49
02B76:  MOVLB  0
02B78:  CALL   16C2
....................     fprintf(PC, "\tComplete\r\n");
02B7C:  MOVLW  E0
02B7E:  MOVWF  FF6
02B80:  MOVLW  0A
02B82:  MOVWF  FF7
02B84:  MOVLW  00
02B86:  MOVWF  FF8
02B88:  CALL   1714
02B8C:  RETURN 0
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
03558:  MOVLB  7
0355A:  CLRF   xEC
0355C:  CLRF   xED
0355E:  CLRF   xEE
03560:  CLRF   xEF
03562:  CLRF   xF0
03564:  CLRF   xF1
03566:  CLRF   xF2
03568:  CLRF   xF3
0356A:  CLRF   xF4
0356C:  CLRF   xF5
0356E:  CLRF   xF6
03570:  CLRF   xF7
03572:  CLRF   xF8
03574:  CLRF   xF9
03576:  CLRF   xFA
03578:  CLRF   xFB
0357A:  CLRF   xFC
0357C:  CLRF   xFD
0357E:  CLRF   xFE
03580:  CLRF   xFF
03582:  MOVLB  8
03584:  CLRF   x00
03586:  CLRF   x01
03588:  CLRF   x02
0358A:  CLRF   x03
0358C:  CLRF   x04
0358E:  CLRF   x05
03590:  CLRF   x06
03592:  CLRF   x07
03594:  CLRF   x08
03596:  CLRF   x09
03598:  CLRF   x0A
0359A:  CLRF   x0B
0359C:  CLRF   x0C
0359E:  CLRF   x0D
035A0:  CLRF   x0E
035A2:  CLRF   x0F
035A4:  CLRF   x10
035A6:  CLRF   x11
035A8:  CLRF   x12
035AA:  CLRF   x13
035AC:  CLRF   x14
035AE:  CLRF   x15
035B0:  CLRF   x16
035B2:  CLRF   x17
035B4:  CLRF   x18
035B6:  CLRF   x19
035B8:  CLRF   x1A
035BA:  CLRF   x1B
035BC:  CLRF   x1C
035BE:  CLRF   x1D
035C0:  CLRF   x1E
035C2:  CLRF   x1F
035C4:  CLRF   x20
035C6:  CLRF   x21
035C8:  CLRF   x22
035CA:  CLRF   x23
035CC:  CLRF   x24
035CE:  CLRF   x25
035D0:  CLRF   x26
035D2:  CLRF   x27
035D4:  CLRF   x28
035D6:  CLRF   x29
035D8:  CLRF   x2A
035DA:  CLRF   x2B
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
035DC:  MOVFF  359,82D
035E0:  CLRF   x2E
035E2:  CLRF   x2F
035E4:  CLRF   x30
035E6:  MOVF   x2D,W
035E8:  MOVLB  7
035EA:  MOVWF  xEC
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
035EC:  MOVFF  358,82D
035F0:  MOVFF  359,82E
035F4:  MOVLB  8
035F6:  CLRF   x2F
035F8:  CLRF   x30
035FA:  MOVF   x2D,W
035FC:  MOVLB  7
035FE:  MOVWF  xED
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
03600:  MOVFF  357,82D
03604:  MOVFF  358,82E
03608:  MOVFF  359,82F
0360C:  MOVLB  8
0360E:  CLRF   x30
03610:  MOVF   x2D,W
03612:  MOVLB  7
03614:  MOVWF  xEE
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
03616:  MOVLB  3
03618:  MOVF   x56,W
0361A:  MOVLB  7
0361C:  MOVWF  xEF
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
0361E:  MOVFF  35A,7F0
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
03622:  MOVFF  35E,82D
03626:  MOVLB  8
03628:  CLRF   x2E
0362A:  CLRF   x2F
0362C:  CLRF   x30
0362E:  MOVF   x2D,W
03630:  MOVLB  7
03632:  MOVWF  xF1
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
03634:  MOVFF  35D,82D
03638:  MOVFF  35E,82E
0363C:  MOVLB  8
0363E:  CLRF   x2F
03640:  CLRF   x30
03642:  MOVF   x2D,W
03644:  MOVLB  7
03646:  MOVWF  xF2
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
03648:  MOVFF  35C,82D
0364C:  MOVFF  35D,82E
03650:  MOVFF  35E,82F
03654:  MOVLB  8
03656:  CLRF   x30
03658:  MOVF   x2D,W
0365A:  MOVLB  7
0365C:  MOVWF  xF3
....................     writedata[8] = smf_meas_use_counter & 0xFF;
0365E:  MOVLB  3
03660:  MOVF   x5B,W
03662:  MOVLB  7
03664:  MOVWF  xF4
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
03666:  MOVFF  35F,7F5
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
0366A:  MOVFF  363,82D
0366E:  MOVLB  8
03670:  CLRF   x2E
03672:  CLRF   x2F
03674:  CLRF   x30
03676:  MOVF   x2D,W
03678:  MOVLB  7
0367A:  MOVWF  xF6
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
0367C:  MOVFF  362,82D
03680:  MOVFF  363,82E
03684:  MOVLB  8
03686:  CLRF   x2F
03688:  CLRF   x30
0368A:  MOVF   x2D,W
0368C:  MOVLB  7
0368E:  MOVWF  xF7
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
03690:  MOVFF  361,82D
03694:  MOVFF  362,82E
03698:  MOVFF  363,82F
0369C:  MOVLB  8
0369E:  CLRF   x30
036A0:  MOVF   x2D,W
036A2:  MOVLB  7
036A4:  MOVWF  xF8
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
036A6:  MOVLB  3
036A8:  MOVF   x60,W
036AA:  MOVLB  7
036AC:  MOVWF  xF9
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
036AE:  MOVFF  364,7FA
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
036B2:  MOVFF  368,82D
036B6:  MOVLB  8
036B8:  CLRF   x2E
036BA:  CLRF   x2F
036BC:  CLRF   x30
036BE:  MOVF   x2D,W
036C0:  MOVLB  7
036C2:  MOVWF  xFB
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
036C4:  MOVFF  367,82D
036C8:  MOVFF  368,82E
036CC:  MOVLB  8
036CE:  CLRF   x2F
036D0:  CLRF   x30
036D2:  MOVF   x2D,W
036D4:  MOVLB  7
036D6:  MOVWF  xFC
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
036D8:  MOVFF  366,82D
036DC:  MOVFF  367,82E
036E0:  MOVFF  368,82F
036E4:  MOVLB  8
036E6:  CLRF   x30
036E8:  MOVF   x2D,W
036EA:  MOVLB  7
036EC:  MOVWF  xFD
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
036EE:  MOVLB  3
036F0:  MOVF   x65,W
036F2:  MOVLB  7
036F4:  MOVWF  xFE
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
036F6:  MOVLW  00
036F8:  MOVWF  xFF
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
036FA:  MOVLW  00
036FC:  MOVLB  8
036FE:  MOVWF  x00
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
03700:  MOVLW  00
03702:  MOVWF  x01
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
03704:  MOVLB  3
03706:  MOVF   x69,W
03708:  MOVLB  8
0370A:  MOVWF  x02
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
0370C:  MOVFF  36D,82D
03710:  CLRF   x2E
03712:  CLRF   x2F
03714:  CLRF   x30
03716:  MOVF   x2D,W
03718:  MOVWF  x03
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
0371A:  MOVFF  36C,82D
0371E:  MOVFF  36D,82E
03722:  CLRF   x2F
03724:  CLRF   x30
03726:  MOVF   x2D,W
03728:  MOVWF  x04
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
0372A:  MOVFF  36B,82D
0372E:  MOVFF  36C,82E
03732:  MOVFF  36D,82F
03736:  CLRF   x30
03738:  MOVF   x2D,W
0373A:  MOVWF  x05
....................     writedata[26] = misf_meas_use_counter & 0xFF;
0373C:  MOVLB  3
0373E:  MOVF   x6A,W
03740:  MOVLB  8
03742:  MOVWF  x06
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
03744:  MOVFF  36E,807
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
03748:  MOVFF  372,82D
0374C:  CLRF   x2E
0374E:  CLRF   x2F
03750:  CLRF   x30
03752:  MOVF   x2D,W
03754:  MOVWF  x08
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
03756:  MOVFF  371,82D
0375A:  MOVFF  372,82E
0375E:  CLRF   x2F
03760:  CLRF   x30
03762:  MOVF   x2D,W
03764:  MOVWF  x09
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
03766:  MOVFF  370,82D
0376A:  MOVFF  371,82E
0376E:  MOVFF  372,82F
03772:  CLRF   x30
03774:  MOVF   x2D,W
03776:  MOVWF  x0A
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
03778:  MOVLB  3
0377A:  MOVF   x6F,W
0377C:  MOVLB  8
0377E:  MOVWF  x0B
.................... 
....................     if (!is_connect(mis_fm)) {
03780:  MOVFF  E1,82F
03784:  MOVFF  E0,82E
03788:  MOVFF  DF,82D
0378C:  MOVFF  DE,82C
03790:  MOVLB  0
03792:  CALL   1FA4
03796:  MOVF   01,F
03798:  BTFSS  FD8.2
0379A:  GOTO   37B2
....................         fprintf(PC, "Mission Flash is not connected\r\n");
0379E:  MOVLW  EC
037A0:  MOVWF  FF6
037A2:  MOVLW  0A
037A4:  MOVWF  FF7
037A6:  MOVLW  00
037A8:  MOVWF  FF8
037AA:  CALL   1714
....................         return;
037AE:  GOTO   3810
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
037B2:  MOVFF  E1,82F
037B6:  MOVFF  E0,82E
037BA:  MOVFF  DF,82D
037BE:  MOVFF  DE,82C
037C2:  MOVLB  8
037C4:  CLRF   x33
037C6:  CLRF   x32
037C8:  CLRF   x31
037CA:  CLRF   x30
037CC:  MOVLB  0
037CE:  CALL   3200
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
037D2:  MOVFF  E1,82F
037D6:  MOVFF  E0,82E
037DA:  MOVFF  DF,82D
037DE:  MOVFF  DE,82C
037E2:  MOVLB  8
037E4:  CLRF   x33
037E6:  CLRF   x32
037E8:  CLRF   x31
037EA:  CLRF   x30
037EC:  MOVLW  07
037EE:  MOVWF  x35
037F0:  MOVLW  EC
037F2:  MOVWF  x34
037F4:  CLRF   x37
037F6:  MOVLW  40
037F8:  MOVWF  x36
037FA:  MOVLB  0
037FC:  CALL   2E7C
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
03800:  MOVLW  0E
03802:  MOVWF  FF6
03804:  MOVLW  0B
03806:  MOVWF  FF7
03808:  MOVLW  00
0380A:  MOVWF  FF8
0380C:  CALL   1714
03810:  RETURN 0
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_device.c"
.................... #include "../mmj_cigs_device.h"
.................... #ifndef MMJ_CIGS_DEVICE_H
.................... #define MMJ_CIGS_DEVICE_H
.................... 
.................... // Instances of device drivers
.................... // AD7490: ADC
.................... // MCP4901: DAC
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
0194A:  MOVLW  32
0194C:  MOVWF  FF6
0194E:  MOVLW  0B
01950:  MOVWF  FF7
01952:  MOVLW  00
01954:  MOVWF  FF8
01956:  CALL   1714
....................     output_high(ADC_CS); // Set CS pin high to deselect the ADC
0195A:  BCF    F93.1
0195C:  BSF    F8A.1
....................     delay_ms(10); // Wait for the ADC to stabilize
0195E:  MOVLW  0A
01960:  MOVLB  8
01962:  MOVWF  x44
01964:  MOVLB  0
01966:  CALL   1694
....................     unsigned int16 readdata = ad7490_read(ADC_TEMP_PY_TOP); // Read a dummy value to initialize the ADC
0196A:  MOVLW  0D
0196C:  MOVLB  7
0196E:  MOVWF  xEE
01970:  MOVLB  0
01972:  CALL   18BE
01976:  MOVFF  02,383
0197A:  MOVFF  01,382
....................     if (readdata == 0xFFFF) {
0197E:  MOVLB  3
01980:  INCFSZ x82,W
01982:  BRA    1988
01984:  BRA    198E
01986:  MOVLB  0
01988:  MOVLB  0
0198A:  GOTO   19B6
0198E:  MOVLB  0
01990:  MOVLB  3
01992:  INCFSZ x83,W
01994:  BRA    199A
01996:  BRA    19A0
01998:  MOVLB  0
0199A:  MOVLB  0
0199C:  GOTO   19B6
019A0:  MOVLB  0
....................         fprintf(PC, "\t[ADC] Connect error!\r\n");
019A2:  MOVLW  46
019A4:  MOVWF  FF6
019A6:  MOVLW  0B
019A8:  MOVWF  FF7
019AA:  MOVLW  00
019AC:  MOVWF  FF8
019AE:  CALL   1714
....................     } else {
019B2:  GOTO   19C6
....................         fprintf(PC, "\t[ADC] Connect successful\r\n");
019B6:  MOVLW  5E
019B8:  MOVWF  FF6
019BA:  MOVLW  0B
019BC:  MOVWF  FF7
019BE:  MOVLW  00
019C0:  MOVWF  FF8
019C2:  CALL   1714
....................     }
....................     fprintf(PC, "\tComplete\r\n");
019C6:  MOVLW  7A
019C8:  MOVWF  FF6
019CA:  MOVLW  0B
019CC:  MOVWF  FF7
019CE:  MOVLW  00
019D0:  MOVWF  FF8
019D2:  CALL   1714
019D6:  GOTO   8C0E (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
018BE:  MOVFF  7EE,7F5
018C2:  GOTO   17E8
018C6:  MOVFF  02,7F0
018CA:  MOVFF  01,7EF
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     
....................     // Send the command to the ADC
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
018CE:  BCF    F93.1
018D0:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
018D2:  MOVLW  0D
018D4:  MOVWF  00
018D6:  DECFSZ 00,F
018D8:  BRA    18D6
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
018DA:  MOVFF  7F0,7F6
018DE:  MOVFF  7EF,7F5
018E2:  MOVLW  10
018E4:  MOVLB  7
018E6:  MOVWF  xF7
018E8:  MOVLW  01
018EA:  MOVWF  xF8
018EC:  MOVLB  0
018EE:  CALL   1858
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     delay_us(10); // Wait for the ADC to process the command
018F2:  MOVLW  0D
018F4:  MOVWF  00
018F6:  DECFSZ 00,F
018F8:  BRA    18F6
....................     output_high(ADC_CS); // Set CS pin high to end communication
018FA:  BCF    F93.1
018FC:  BSF    F8A.1
....................     delay_us(10); // Wait for the ADC to process the command
018FE:  MOVLW  0D
01900:  MOVWF  00
01902:  DECFSZ 00,F
01904:  BRA    1902
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
01906:  BCF    F93.1
01908:  BCF    F8A.1
....................     delay_us(10); // Wait for the ADC to stabilize
0190A:  MOVLW  0D
0190C:  MOVWF  00
0190E:  DECFSZ 00,F
01910:  BRA    190E
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000); // Read data from ADC
01912:  MOVLB  7
01914:  CLRF   xF6
01916:  CLRF   xF5
01918:  MOVLW  10
0191A:  MOVWF  xF7
0191C:  MOVLW  01
0191E:  MOVWF  xF8
01920:  MOVLB  0
01922:  CALL   1858
01926:  MOVFF  02,7F2
0192A:  MOVFF  01,7F1
....................     output_high(ADC_CS); 
0192E:  BCF    F93.1
01930:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
01932:  MOVLB  7
01934:  MOVF   xF1,W
01936:  MOVWF  xF3
01938:  MOVF   xF2,W
0193A:  ANDLW  0F
0193C:  MOVWF  xF4
....................     
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
0193E:  MOVF   xF3,W
01940:  MOVWF  01
01942:  MOVF   xF4,W
01944:  MOVWF  02
01946:  MOVLB  0
01948:  RETURN 0
.................... }
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
01BAC:  MOVLW  86
01BAE:  MOVWF  FF6
01BB0:  MOVLW  0B
01BB2:  MOVWF  FF7
01BB4:  MOVLW  00
01BB6:  MOVWF  FF8
01BB8:  CALL   1714
....................     output_high(DAC1_CS); // Set CS pin high to deselect the DAC
01BBC:  BCF    F93.3
01BBE:  BSF    F8A.3
....................     output_high(DAC2_CS); // Set CS pin high to deselect the second DAC
01BC0:  BCF    F93.0
01BC2:  BSF    F8A.0
....................     delay_ms(10); // Wait for the DAC to stabilize
01BC4:  MOVLW  0A
01BC6:  MOVLB  8
01BC8:  MOVWF  x44
01BCA:  MOVLB  0
01BCC:  CALL   1694
....................     mcp4901_1_write(0); // Initialize DAC 1 to 0
01BD0:  MOVLB  7
01BD2:  CLRF   xED
01BD4:  CLRF   xEC
01BD6:  MOVLB  0
01BD8:  CALL   1B2E
....................     mcp4901_2_write(0); // Initialize DAC 2 to 0
01BDC:  MOVLB  3
01BDE:  CLRF   x85
01BE0:  CLRF   x84
01BE2:  MOVLB  0
01BE4:  GOTO   1B6C
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_CIGS1_DAC); // Read a dummy value to initialize the DAC
01BE8:  MOVLW  08
01BEA:  MOVLB  7
01BEC:  MOVWF  xEE
01BEE:  MOVLB  0
01BF0:  CALL   18BE
01BF4:  MOVFF  02,383
01BF8:  MOVFF  01,382
....................     if (readdata == 0xFFFF) {
01BFC:  MOVLB  3
01BFE:  INCFSZ x82,W
01C00:  BRA    1C06
01C02:  BRA    1C0C
01C04:  MOVLB  0
01C06:  MOVLB  0
01C08:  GOTO   1C34
01C0C:  MOVLB  0
01C0E:  MOVLB  3
01C10:  INCFSZ x83,W
01C12:  BRA    1C18
01C14:  BRA    1C1E
01C16:  MOVLB  0
01C18:  MOVLB  0
01C1A:  GOTO   1C34
01C1E:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
01C20:  MOVLW  9C
01C22:  MOVWF  FF6
01C24:  MOVLW  0B
01C26:  MOVWF  FF7
01C28:  MOVLW  00
01C2A:  MOVWF  FF8
01C2C:  CALL   1714
....................     } else {
01C30:  GOTO   1C44
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
01C34:  MOVLW  BC
01C36:  MOVWF  FF6
01C38:  MOVLW  0B
01C3A:  MOVWF  FF7
01C3C:  MOVLW  00
01C3E:  MOVWF  FF8
01C40:  CALL   1714
....................     }
....................     readdata = ad7490_read(ADC_CIGS2_DAC); // Read a dummy value to initialize the second DAC
01C44:  MOVLW  09
01C46:  MOVLB  7
01C48:  MOVWF  xEE
01C4A:  MOVLB  0
01C4C:  CALL   18BE
01C50:  MOVFF  02,383
01C54:  MOVFF  01,382
....................     if (readdata == 0xFFFF) {
01C58:  MOVLB  3
01C5A:  INCFSZ x82,W
01C5C:  BRA    1C62
01C5E:  BRA    1C68
01C60:  MOVLB  0
01C62:  MOVLB  0
01C64:  GOTO   1C90
01C68:  MOVLB  0
01C6A:  MOVLB  3
01C6C:  INCFSZ x83,W
01C6E:  BRA    1C74
01C70:  BRA    1C7A
01C72:  MOVLB  0
01C74:  MOVLB  0
01C76:  GOTO   1C90
01C7A:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
01C7C:  MOVLW  E0
01C7E:  MOVWF  FF6
01C80:  MOVLW  0B
01C82:  MOVWF  FF7
01C84:  MOVLW  00
01C86:  MOVWF  FF8
01C88:  CALL   1714
....................     } else {
01C8C:  GOTO   1CA0
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
01C90:  MOVLW  00
01C92:  MOVWF  FF6
01C94:  MOVLW  0C
01C96:  MOVWF  FF7
01C98:  MOVLW  00
01C9A:  MOVWF  FF8
01C9C:  CALL   1714
....................     }
....................     fprintf(PC, "\tComplete\r\n");
01CA0:  MOVLW  24
01CA2:  MOVWF  FF6
01CA4:  MOVLW  0C
01CA6:  MOVWF  FF7
01CA8:  MOVLW  00
01CAA:  MOVWF  FF8
01CAC:  CALL   1714
01CB0:  GOTO   8C12 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
01B2E:  MOVFF  7ED,7F1
01B32:  MOVFF  7EC,7F0
01B36:  CALL   19DA
01B3A:  MOVFF  02,7EF
01B3E:  MOVFF  01,7EE
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC1_CS); // Select MCP4901
01B42:  BCF    F93.3
01B44:  BCF    F8A.3
....................    delay_us(100); // Ensure CS is stable before sending data
01B46:  MOVLW  85
01B48:  MOVWF  00
01B4A:  DECFSZ 00,F
01B4C:  BRA    1B4A
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
01B4E:  MOVFF  7EF,7F6
01B52:  MOVFF  7EE,7F5
01B56:  MOVLW  10
01B58:  MOVLB  7
01B5A:  MOVWF  xF7
01B5C:  MOVLW  01
01B5E:  MOVWF  xF8
01B60:  MOVLB  0
01B62:  CALL   1858
....................    output_high(DAC1_CS); // Deselect MCP4901
01B66:  BCF    F93.3
01B68:  BSF    F8A.3
01B6A:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
01B6C:  MOVFF  385,7F1
01B70:  MOVFF  384,7F0
01B74:  CALL   19DA
01B78:  MOVFF  02,387
01B7C:  MOVFF  01,386
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); // Select MCP4901
01B80:  BCF    F93.0
01B82:  BCF    F8A.0
....................    delay_us(100); // Ensure CS is stable before sending data
01B84:  MOVLW  85
01B86:  MOVWF  00
01B88:  DECFSZ 00,F
01B8A:  BRA    1B88
....................    spi_xfer(ADCDAC_STREAM, cmd); // Send first byte
01B8C:  MOVFF  387,7F6
01B90:  MOVFF  386,7F5
01B94:  MOVLW  10
01B96:  MOVLB  7
01B98:  MOVWF  xF7
01B9A:  MOVLW  01
01B9C:  MOVWF  xF8
01B9E:  MOVLB  0
01BA0:  CALL   1858
....................    output_high(DAC2_CS); // Deselect MCP4901
01BA4:  BCF    F93.0
01BA6:  BSF    F8A.0
01BA8:  GOTO   1BE8 (RETURN)
.................... }
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS
.................... 
.................... 
.................... 
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     #pin_select TX3=PIN_E3                                                           //TX PIN EXT +/- 6v
....................     #pin_select RX3=PIN_F2                                                           //RX PIN EXT +/- 6V
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     //#use rs232(baud=9600,parity=N, xmit=PIN_E4,bits=8,stream=PC)
....................     #use rs232(baud=9600,parity=N, xmit=PIN_B6, bits=8, stream=PC)
.................... 
....................     // -------------SPI--------------------
....................     #define SMF_CS PIN_A2
....................     #define MIS_FM_CS  PIN_A5
....................     #pin_select SCK1=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     #define SMF_STREAM MIS_FM_STREAM
....................     //#define MIS_FM_STREAM FLASH_STREAM
....................     #use spi (MASTER, SPI1, BAUD=1000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
....................     //#use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     
.................... 
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5,  BAUD=1000000, MODE=0, BITS=16, STREAM=ADCDAC_STREAM)
....................     #define ADC_CS PIN_B1
....................     #define ADC_STREAM ADCDAC_STREAM
....................     #define DAC1_CS PIN_B3
....................     #define DAC1_STREAM ADCDAC_STREAM
....................     #define DAC2_CS PIN_B0
....................     #define DAC2_STREAM ADCDAC_STREAM
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C0
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR PIN_C7
.................... 
.................... #endif
.................... //-------------I/O port--------------------
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_VIN0
.................... #define ADC_CIGS1_CURR      AD7490_VIN1
.................... #define ADC_CIGS1_AMP       AD7490_VIN2
.................... #define ADC_CIGS1_VREF      AD7490_VIN3
.................... #define ADC_CIGS2_VOLT      AD7490_VIN4
.................... #define ADC_CIGS2_CURR      AD7490_VIN5
.................... #define ADC_CIGS2_AMP       AD7490_VIN6
.................... #define ADC_CIGS2_VREF      AD7490_VIN7
.................... #define ADC_CIGS1_DAC       AD7490_VIN8
.................... #define ADC_CIGS2_DAC       AD7490_VIN9
.................... #define ADC_TEMP_MIS7       AD7490_VIN12
.................... #define ADC_TEMP_PY_TOP     AD7490_VIN13
.................... #define ADC_TEMP_PY_BOT     AD7490_VIN14
.................... #define ADC_PD              AD7490_VIN15
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_device.h"
.................... #ifndef MMJ_CIGS_DEVICE_H
.................... #define MMJ_CIGS_DEVICE_H
.................... 
.................... // Instances of device drivers
.................... // AD7490: ADC
.................... // MCP4901: DAC
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0177A:  MOVLW  30
0177C:  MOVWF  FF6
0177E:  MOVLW  0C
01780:  MOVWF  FF7
01782:  MOVLW  00
01784:  MOVWF  FF8
01786:  CALL   1714
....................     output_high(ADC_CS); // ADC Chip Select
0178A:  BCF    F93.1
0178C:  BSF    F8A.1
....................     output_high(MIS_FM_CS); // DAC Chip Select
0178E:  BCF    F92.5
01790:  BSF    F89.5
....................     output_high(SMF_CS); // SMF Chip Select
01792:  BCF    F92.2
01794:  BSF    F89.2
....................     output_low(CONNECT_CIGS1);
01796:  BCF    F94.0
01798:  BCF    F8B.0
....................     output_high(EN_NPWR);
0179A:  BCF    F94.7
0179C:  BSF    F8B.7
....................     delay_ms(1);
0179E:  MOVLW  01
017A0:  MOVLB  8
017A2:  MOVWF  x44
017A4:  MOVLB  0
017A6:  CALL   1694
....................     fprintf(PC, "\tComplete\r\n");
017AA:  MOVLW  40
017AC:  MOVWF  FF6
017AE:  MOVLW  0C
017B0:  MOVWF  FF7
017B2:  MOVLW  00
017B4:  MOVWF  FF8
017B6:  CALL   1714
017BA:  GOTO   8C06 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
....................     //setup ADC
....................    /*
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
....................    dac_write(0);                                                               
....................    */
....................    fprintf(PC, "\tComplete\r\n");
.................... }
.................... 
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS1);
....................     delay_us(100); // wait for the CIGS to stabilize
....................       /*
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
....................         
....................         // monitoring
....................         fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata_index++; 
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
....................         packetdata_index++; 
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             packetdata_index = 0; // Reset packet byte counter
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................     }
....................         
....................     write_misf_address_area();
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
....................     */
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... void test_sweep(unsigned int8 sweep_step)
.................... {
....................     fprintf(PC, "Start TEST SWEEP\r\n");
*
0457C:  MOVLW  8C
0457E:  MOVWF  FF6
04580:  MOVLW  0C
04582:  MOVWF  FF7
04584:  MOVLW  00
04586:  MOVWF  FF8
04588:  CALL   1714
....................     output_high(CONNECT_CIGS1);
0458C:  BCF    F94.0
0458E:  BSF    F8B.0
....................     output_low(EN_NPWR); // Enable power to CIGS
04590:  BCF    F94.7
04592:  BCF    F8B.7
....................     delay_us(100); // wait for the CIGS to stabilize
04594:  MOVLW  85
04596:  MOVWF  00
04598:  DECFSZ 00,F
0459A:  BRA    4598
....................     fprintf(PC, "step, voltage, current\r\n");
0459C:  MOVLW  A0
0459E:  MOVWF  FF6
045A0:  MOVLW  0C
045A2:  MOVWF  FF7
045A4:  MOVLW  00
045A6:  MOVWF  FF8
045A8:  CALL   1714
....................     mcp4901_1_write(0); // Initialize DAC to 0
045AC:  MOVLB  7
045AE:  CLRF   xED
045B0:  CLRF   xEC
045B2:  MOVLB  0
045B4:  CALL   1B2E
....................     delay_ms(100); // wait for the DAC to stabilize
045B8:  MOVLW  64
045BA:  MOVLB  8
045BC:  MOVWF  x44
045BE:  MOVLB  0
045C0:  CALL   1694
.................... 
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     for (unsigned int8 count = 0; count < sweep_step; count++)
045C4:  MOVLB  3
045C6:  CLRF   x95
045C8:  MOVLB  0
045CA:  MOVLB  3
045CC:  MOVF   x90,W
045CE:  SUBWF  x95,W
045D0:  BTFSS  FD8.0
045D2:  BRA    45DA
045D4:  MOVLB  0
045D6:  GOTO   46A0
045DA:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
045DC:  MOVLB  7
045DE:  CLRF   xED
045E0:  MOVFF  395,7EC
045E4:  MOVLB  0
045E6:  CALL   1B2E
.................... 
....................         volt = ad7490_read(ADC_CIGS1_AMP); // read CIGS voltage
045EA:  MOVLW  02
045EC:  MOVLB  7
045EE:  MOVWF  xEE
045F0:  MOVLB  0
045F2:  CALL   18BE
045F6:  MOVFF  02,392
045FA:  MOVFF  01,391
....................         curr = ad7490_read(ADC_CIGS1_CURR); // read CIGS current
045FE:  MOVLW  01
04600:  MOVLB  7
04602:  MOVWF  xEE
04604:  MOVLB  0
04606:  CALL   18BE
0460A:  MOVFF  02,394
0460E:  MOVFF  01,393
....................         
....................         fprintf(PC, "%u, %lu, %lu\r\n", count, volt, curr);
04612:  MOVFF  395,7EC
04616:  MOVLW  1B
04618:  MOVLB  7
0461A:  MOVWF  xED
0461C:  MOVLB  0
0461E:  CALL   43A8
04622:  MOVLW  2C
04624:  MOVLB  8
04626:  MOVWF  x49
04628:  MOVLB  0
0462A:  CALL   16C2
0462E:  MOVLW  20
04630:  MOVLB  8
04632:  MOVWF  x49
04634:  MOVLB  0
04636:  CALL   16C2
0463A:  MOVLW  10
0463C:  MOVWF  FE9
0463E:  MOVFF  392,397
04642:  MOVFF  391,396
04646:  CALL   4452
0464A:  MOVLW  2C
0464C:  MOVLB  8
0464E:  MOVWF  x49
04650:  MOVLB  0
04652:  CALL   16C2
04656:  MOVLW  20
04658:  MOVLB  8
0465A:  MOVWF  x49
0465C:  MOVLB  0
0465E:  CALL   16C2
04662:  MOVLW  10
04664:  MOVWF  FE9
04666:  MOVFF  394,397
0466A:  MOVFF  393,396
0466E:  CALL   4452
04672:  MOVLW  0D
04674:  MOVLB  8
04676:  MOVWF  x49
04678:  MOVLB  0
0467A:  CALL   16C2
0467E:  MOVLW  0A
04680:  MOVLB  8
04682:  MOVWF  x49
04684:  MOVLB  0
04686:  CALL   16C2
....................         delay_ms(1); // wait for the ADC to stabilize
0468A:  MOVLW  01
0468C:  MOVLB  8
0468E:  MOVWF  x44
04690:  MOVLB  0
04692:  CALL   1694
04696:  MOVLB  3
04698:  INCF   x95,F
0469A:  MOVLB  0
0469C:  GOTO   45CA
....................     }
046A0:  GOTO   4718 (RETURN)
.................... }
.................... 
.................... void test_adc()
.................... {
....................     unsigned int16 ans;
....................     mcp4901_1_write(0); // Initialize DAC to 0
*
04734:  MOVLB  7
04736:  CLRF   xED
04738:  CLRF   xEC
0473A:  MOVLB  0
0473C:  CALL   1B2E
....................     fprintf(PC, "Start ADC TEST\r\n");
04740:  MOVLW  BA
04742:  MOVWF  FF6
04744:  MOVLW  0C
04746:  MOVWF  FF7
04748:  MOVLW  00
0474A:  MOVWF  FF8
0474C:  CALL   1714
....................     ans = ad7490_read(ADC_CIGS1_VOLT);
04750:  MOVLB  7
04752:  CLRF   xEE
04754:  MOVLB  0
04756:  CALL   18BE
0475A:  MOVFF  02,38C
0475E:  MOVFF  01,38B
....................     fprintf(PC, "ADC Voltage: %04LX\r\n", ans);
04762:  MOVLW  CC
04764:  MOVWF  FF6
04766:  MOVLW  0C
04768:  MOVWF  FF7
0476A:  MOVLW  00
0476C:  MOVWF  FF8
0476E:  MOVLW  0D
04770:  MOVLB  7
04772:  MOVWF  xEC
04774:  MOVLB  0
04776:  CALL   1744
0477A:  MOVFF  38C,847
0477E:  MOVLW  37
04780:  MOVLB  8
04782:  MOVWF  x48
04784:  MOVLB  0
04786:  CALL   1F34
0478A:  MOVFF  38B,847
0478E:  MOVLW  37
04790:  MOVLB  8
04792:  MOVWF  x48
04794:  MOVLB  0
04796:  CALL   1F34
0479A:  MOVLW  0D
0479C:  MOVLB  8
0479E:  MOVWF  x49
047A0:  MOVLB  0
047A2:  CALL   16C2
047A6:  MOVLW  0A
047A8:  MOVLB  8
047AA:  MOVWF  x49
047AC:  MOVLB  0
047AE:  CALL   16C2
....................     ans = ad7490_read(ADC_CIGS1_CURR);
047B2:  MOVLW  01
047B4:  MOVLB  7
047B6:  MOVWF  xEE
047B8:  MOVLB  0
047BA:  CALL   18BE
047BE:  MOVFF  02,38C
047C2:  MOVFF  01,38B
....................     fprintf(PC, "ADC Current: %04LX\r\n", ans);
047C6:  MOVLW  E2
047C8:  MOVWF  FF6
047CA:  MOVLW  0C
047CC:  MOVWF  FF7
047CE:  MOVLW  00
047D0:  MOVWF  FF8
047D2:  MOVLW  0D
047D4:  MOVLB  7
047D6:  MOVWF  xEC
047D8:  MOVLB  0
047DA:  CALL   1744
047DE:  MOVFF  38C,847
047E2:  MOVLW  37
047E4:  MOVLB  8
047E6:  MOVWF  x48
047E8:  MOVLB  0
047EA:  CALL   1F34
047EE:  MOVFF  38B,847
047F2:  MOVLW  37
047F4:  MOVLB  8
047F6:  MOVWF  x48
047F8:  MOVLB  0
047FA:  CALL   1F34
047FE:  MOVLW  0D
04800:  MOVLB  8
04802:  MOVWF  x49
04804:  MOVLB  0
04806:  CALL   16C2
0480A:  MOVLW  0A
0480C:  MOVLB  8
0480E:  MOVWF  x49
04810:  MOVLB  0
04812:  CALL   16C2
....................     ans = ad7490_read(ADC_CIGS1_AMP);
04816:  MOVLW  02
04818:  MOVLB  7
0481A:  MOVWF  xEE
0481C:  MOVLB  0
0481E:  CALL   18BE
04822:  MOVFF  02,38C
04826:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 Amp: %04LX\r\n", ans);
0482A:  MOVLW  F8
0482C:  MOVWF  FF6
0482E:  MOVLW  0C
04830:  MOVWF  FF7
04832:  MOVLW  00
04834:  MOVWF  FF8
04836:  MOVLW  0F
04838:  MOVLB  7
0483A:  MOVWF  xEC
0483C:  MOVLB  0
0483E:  CALL   1744
04842:  MOVFF  38C,847
04846:  MOVLW  37
04848:  MOVLB  8
0484A:  MOVWF  x48
0484C:  MOVLB  0
0484E:  CALL   1F34
04852:  MOVFF  38B,847
04856:  MOVLW  37
04858:  MOVLB  8
0485A:  MOVWF  x48
0485C:  MOVLB  0
0485E:  CALL   1F34
04862:  MOVLW  0D
04864:  MOVLB  8
04866:  MOVWF  x49
04868:  MOVLB  0
0486A:  CALL   16C2
0486E:  MOVLW  0A
04870:  MOVLB  8
04872:  MOVWF  x49
04874:  MOVLB  0
04876:  CALL   16C2
....................     ans = ad7490_read(ADC_CIGS1_VREF);
0487A:  MOVLW  03
0487C:  MOVLB  7
0487E:  MOVWF  xEE
04880:  MOVLB  0
04882:  CALL   18BE
04886:  MOVFF  02,38C
0488A:  MOVFF  01,38B
....................     fprintf(PC, "ADC CIGS1 VREF: %04LX\r\n", ans);
0488E:  MOVLW  10
04890:  MOVWF  FF6
04892:  MOVLW  0D
04894:  MOVWF  FF7
04896:  MOVLW  00
04898:  MOVWF  FF8
0489A:  MOVLW  10
0489C:  MOVLB  7
0489E:  MOVWF  xEC
048A0:  MOVLB  0
048A2:  CALL   1744
048A6:  MOVFF  38C,847
048AA:  MOVLW  37
048AC:  MOVLB  8
048AE:  MOVWF  x48
048B0:  MOVLB  0
048B2:  CALL   1F34
048B6:  MOVFF  38B,847
048BA:  MOVLW  37
048BC:  MOVLB  8
048BE:  MOVWF  x48
048C0:  MOVLB  0
048C2:  CALL   1F34
048C6:  MOVLW  0D
048C8:  MOVLB  8
048CA:  MOVWF  x49
048CC:  MOVLB  0
048CE:  CALL   16C2
048D2:  MOVLW  0A
048D4:  MOVLB  8
048D6:  MOVWF  x49
048D8:  MOVLB  0
048DA:  CALL   16C2
048DE:  GOTO   6944 (RETURN)
.................... }
.................... 
.................... void sweep_2ports(unsigned int8 measurement_step)
.................... { 
....................     fprintf(PC, "Start SWEEP 2ports\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS1 and CIGS2
....................     output_high(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
....................     unsigned int16 cigs2_buffer[2][0xFF];
.................... 
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_VOLT);
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS1);
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP 2port\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... void sweep_port1(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT1\r\n");
*
04A7E:  MOVLW  82
04A80:  MOVWF  FF6
04A82:  MOVLW  0D
04A84:  MOVWF  FF7
04A86:  MOVLW  00
04A88:  MOVWF  FF8
04A8A:  CALL   1714
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
04A8E:  MOVLW  96
04A90:  MOVWF  FF6
04A92:  MOVLW  0D
04A94:  MOVWF  FF7
04A96:  MOVLW  00
04A98:  MOVWF  FF8
04A9A:  MOVLW  0E
04A9C:  MOVLB  7
04A9E:  MOVWF  xEC
04AA0:  MOVLB  0
04AA2:  CALL   1744
04AA6:  MOVFF  396,7EC
04AAA:  MOVLW  1B
04AAC:  MOVLB  7
04AAE:  MOVWF  xED
04AB0:  MOVLB  0
04AB2:  CALL   43A8
04AB6:  MOVLW  0D
04AB8:  MOVLB  8
04ABA:  MOVWF  x49
04ABC:  MOVLB  0
04ABE:  CALL   16C2
04AC2:  MOVLW  0A
04AC4:  MOVLB  8
04AC6:  MOVWF  x49
04AC8:  MOVLB  0
04ACA:  CALL   16C2
....................     
....................     // Set CIGS1
....................     output_high(CONNECT_CIGS1);
04ACE:  BCF    F94.0
04AD0:  BSF    F8B.0
....................     output_low(CONNECT_CIGS2);
04AD2:  BCF    F94.5
04AD4:  BCF    F8B.5
....................     output_low(EN_NPWR); 
04AD6:  BCF    F94.7
04AD8:  BCF    F8B.7
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
04ADA:  CALL   2B8E
04ADE:  MOVFF  03,39A
04AE2:  MOVFF  02,399
04AE6:  MOVFF  01,398
04AEA:  MOVFF  00,397
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
04AEE:  MOVLW  0D
04AF0:  MOVLB  7
04AF2:  MOVWF  xEE
04AF4:  MOVLB  0
04AF6:  CALL   18BE
04AFA:  MOVFF  02,39C
04AFE:  MOVFF  01,39B
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
04B02:  MOVLW  0E
04B04:  MOVLB  7
04B06:  MOVWF  xEE
04B08:  MOVLB  0
04B0A:  CALL   18BE
04B0E:  MOVFF  02,39E
04B12:  MOVFF  01,39D
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
04B16:  MOVLW  0C
04B18:  MOVLB  7
04B1A:  MOVWF  xEE
04B1C:  MOVLB  0
04B1E:  CALL   18BE
04B22:  MOVFF  02,3A0
04B26:  MOVFF  01,39F
....................     measured_data.pd = ad7490_read(ADC_PD); 
04B2A:  MOVLW  0F
04B2C:  MOVLB  7
04B2E:  MOVWF  xEE
04B30:  MOVLB  0
04B32:  CALL   18BE
04B36:  MOVFF  02,3A2
04B3A:  MOVFF  01,3A1
.................... 
....................     unsigned int16 cigs1_buffer[2][0xFF]; // Buffer for CIGS1 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
04B3E:  MOVLB  7
04B40:  CLRF   x9F
04B42:  MOVLB  0
04B44:  MOVLB  3
04B46:  MOVF   x96,W
04B48:  MOVLB  7
04B4A:  SUBWF  x9F,W
04B4C:  BTFSS  FD8.0
04B4E:  BRA    4B56
04B50:  MOVLB  0
04B52:  GOTO   4BF4
04B56:  MOVLB  0
....................     {    
....................         // set DAC value
....................         mcp4901_1_write(count);
04B58:  MOVLB  7
04B5A:  CLRF   xED
04B5C:  MOVFF  79F,7EC
04B60:  MOVLB  0
04B62:  CALL   1B2E
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(10);
04B66:  MOVLW  0A
04B68:  MOVLB  8
04B6A:  MOVWF  x44
04B6C:  MOVLB  0
04B6E:  CALL   1694
....................         cigs1_buffer[0][count] = ad7490_read(ADC_CIGS1_AMP);
04B72:  CLRF   03
04B74:  MOVLB  7
04B76:  MOVF   x9F,W
04B78:  MOVWF  02
04B7A:  BCF    FD8.0
04B7C:  RLCF   02,F
04B7E:  RLCF   03,F
04B80:  MOVF   02,W
04B82:  ADDLW  A3
04B84:  MOVWF  01
04B86:  MOVLW  03
04B88:  ADDWFC 03,F
04B8A:  MOVF   01,W
04B8C:  MOVWF  xEC
04B8E:  MOVFF  03,7ED
04B92:  MOVLW  02
04B94:  MOVWF  xEE
04B96:  MOVLB  0
04B98:  CALL   18BE
04B9C:  MOVFF  7ED,FEA
04BA0:  MOVFF  7EC,FE9
04BA4:  MOVFF  02,FEC
04BA8:  MOVF   FED,F
04BAA:  MOVFF  01,FEF
....................         cigs1_buffer[1][count] = ad7490_read(ADC_CIGS1_CURR);
04BAE:  CLRF   03
04BB0:  MOVLB  7
04BB2:  MOVF   x9F,W
04BB4:  MOVWF  02
04BB6:  BCF    FD8.0
04BB8:  RLCF   02,F
04BBA:  RLCF   03,F
04BBC:  MOVF   02,W
04BBE:  ADDLW  A1
04BC0:  MOVWF  01
04BC2:  MOVLW  05
04BC4:  ADDWFC 03,F
04BC6:  MOVF   01,W
04BC8:  MOVWF  xEC
04BCA:  MOVFF  03,7ED
04BCE:  MOVLW  01
04BD0:  MOVWF  xEE
04BD2:  MOVLB  0
04BD4:  CALL   18BE
04BD8:  MOVFF  7ED,FEA
04BDC:  MOVFF  7EC,FE9
04BE0:  MOVFF  02,FEC
04BE4:  MOVF   FED,F
04BE6:  MOVFF  01,FEF
04BEA:  MOVLB  7
04BEC:  INCF   x9F,F
04BEE:  MOVLB  0
04BF0:  GOTO   4B44
....................     }
....................     
.................... 
.................... 
.................... 
....................     output_low(CONNECT_CIGS1);
04BF4:  BCF    F94.0
04BF6:  BCF    F8B.0
....................     output_high(EN_NPWR);
04BF8:  BCF    F94.7
04BFA:  BSF    F8B.7
.................... 
....................     fprintf(PC, "END SWEEP PORT1\r\n");
04BFC:  MOVLW  AA
04BFE:  MOVWF  FF6
04C00:  MOVLW  0D
04C02:  MOVWF  FF7
04C04:  MOVLW  00
04C06:  MOVWF  FF8
04C08:  CALL   1714
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
04C0C:  MOVLW  BC
04C0E:  MOVWF  FF6
04C10:  MOVLW  0D
04C12:  MOVWF  FF7
04C14:  MOVLW  00
04C16:  MOVWF  FF8
04C18:  CALL   1714
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
04C1C:  MOVLB  7
04C1E:  CLRF   xA0
04C20:  CLRF   xA1
04C22:  CLRF   xA2
04C24:  CLRF   xA3
04C26:  CLRF   xA4
04C28:  CLRF   xA5
04C2A:  CLRF   xA6
04C2C:  CLRF   xA7
04C2E:  CLRF   xA8
04C30:  CLRF   xA9
04C32:  CLRF   xAA
04C34:  CLRF   xAB
04C36:  CLRF   xAC
04C38:  CLRF   xAD
04C3A:  CLRF   xAE
04C3C:  CLRF   xAF
04C3E:  CLRF   xB0
04C40:  CLRF   xB1
04C42:  CLRF   xB2
04C44:  CLRF   xB3
04C46:  CLRF   xB4
04C48:  CLRF   xB5
04C4A:  CLRF   xB6
04C4C:  CLRF   xB7
04C4E:  CLRF   xB8
04C50:  CLRF   xB9
04C52:  CLRF   xBA
04C54:  CLRF   xBB
04C56:  CLRF   xBC
04C58:  CLRF   xBD
04C5A:  CLRF   xBE
04C5C:  CLRF   xBF
04C5E:  CLRF   xC0
04C60:  CLRF   xC1
04C62:  CLRF   xC2
04C64:  CLRF   xC3
04C66:  CLRF   xC4
04C68:  CLRF   xC5
04C6A:  CLRF   xC6
04C6C:  CLRF   xC7
04C6E:  CLRF   xC8
04C70:  CLRF   xC9
04C72:  CLRF   xCA
04C74:  CLRF   xCB
04C76:  CLRF   xCC
04C78:  CLRF   xCD
04C7A:  CLRF   xCE
04C7C:  CLRF   xCF
04C7E:  CLRF   xD0
04C80:  CLRF   xD1
04C82:  CLRF   xD2
04C84:  CLRF   xD3
04C86:  CLRF   xD4
04C88:  CLRF   xD5
04C8A:  CLRF   xD6
04C8C:  CLRF   xD7
04C8E:  CLRF   xD8
04C90:  CLRF   xD9
04C92:  CLRF   xDA
04C94:  CLRF   xDB
04C96:  CLRF   xDC
04C98:  CLRF   xDD
04C9A:  CLRF   xDE
04C9C:  CLRF   xDF
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
04C9E:  CLRF   xE0
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
04CA0:  CLRF   xE2
04CA2:  CLRF   xE1
04CA4:  MOVLB  0
04CA6:  MOVLB  7
04CA8:  MOVF   xE2,F
04CAA:  BTFSC  FD8.2
04CAC:  BRA    4CB4
04CAE:  MOVLB  0
04CB0:  GOTO   4EEA
04CB4:  MOVLB  0
04CB6:  MOVLB  3
04CB8:  MOVF   x96,W
04CBA:  MOVLB  7
04CBC:  SUBWF  xE1,W
04CBE:  BTFSS  FD8.0
04CC0:  BRA    4CC8
04CC2:  MOVLB  0
04CC4:  GOTO   4EEA
04CC8:  MOVLB  0
....................     {        
....................         packetdata[packetdata_index]      = (cigs1_buffer[0][i] >> 4) & 0xFF;
04CCA:  CLRF   03
04CCC:  MOVLB  7
04CCE:  MOVF   xE0,W
04CD0:  ADDLW  A0
04CD2:  MOVWF  01
04CD4:  MOVLW  07
04CD6:  ADDWFC 03,F
04CD8:  MOVF   01,W
04CDA:  MOVWF  xEC
04CDC:  MOVFF  03,7ED
04CE0:  BCF    FD8.0
04CE2:  RLCF   xE1,W
04CE4:  MOVWF  02
04CE6:  RLCF   xE2,W
04CE8:  MOVWF  03
04CEA:  MOVF   02,W
04CEC:  ADDLW  A3
04CEE:  MOVWF  FE9
04CF0:  MOVLW  03
04CF2:  ADDWFC 03,W
04CF4:  MOVWF  FEA
04CF6:  MOVFF  FEC,7EF
04CFA:  MOVF   FED,F
04CFC:  MOVFF  FEF,7EE
04D00:  RRCF   xEF,F
04D02:  RRCF   xEE,F
04D04:  RRCF   xEF,F
04D06:  RRCF   xEE,F
04D08:  RRCF   xEF,F
04D0A:  RRCF   xEE,F
04D0C:  RRCF   xEF,F
04D0E:  RRCF   xEE,F
04D10:  MOVLW  0F
04D12:  ANDWF  xEF,F
04D14:  MOVF   xEE,W
04D16:  MOVWF  00
04D18:  CLRF   03
04D1A:  MOVF   00,W
04D1C:  MOVWF  xEE
04D1E:  MOVFF  03,7EF
04D22:  MOVFF  7ED,FEA
04D26:  MOVFF  7EC,FE9
04D2A:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04D2E:  INCF   xE0,F
....................         packetdata[packetdata_index]    = (cigs1_buffer[0][i] & 0x0F) << 4 | (cigs1_buffer[1][i] >>8 )& 0x0F;
04D30:  CLRF   03
04D32:  MOVF   xE0,W
04D34:  ADDLW  A0
04D36:  MOVWF  01
04D38:  MOVLW  07
04D3A:  ADDWFC 03,F
04D3C:  MOVF   01,W
04D3E:  MOVWF  xEC
04D40:  MOVFF  03,7ED
04D44:  BCF    FD8.0
04D46:  RLCF   xE1,W
04D48:  MOVWF  02
04D4A:  RLCF   xE2,W
04D4C:  MOVWF  03
04D4E:  MOVF   02,W
04D50:  ADDLW  A3
04D52:  MOVWF  FE9
04D54:  MOVLW  03
04D56:  ADDWFC 03,W
04D58:  MOVWF  FEA
04D5A:  MOVFF  FEC,7EF
04D5E:  MOVF   FED,F
04D60:  MOVFF  FEF,7EE
04D64:  MOVLW  0F
04D66:  ANDWF  xEE,F
04D68:  CLRF   xEF
04D6A:  RLCF   xEE,F
04D6C:  RLCF   xEF,F
04D6E:  RLCF   xEE,F
04D70:  RLCF   xEF,F
04D72:  RLCF   xEE,F
04D74:  RLCF   xEF,F
04D76:  RLCF   xEE,F
04D78:  RLCF   xEF,F
04D7A:  MOVLW  F0
04D7C:  ANDWF  xEE,F
04D7E:  BCF    FD8.0
04D80:  RLCF   xE1,W
04D82:  MOVWF  02
04D84:  RLCF   xE2,W
04D86:  MOVWF  03
04D88:  MOVF   02,W
04D8A:  ADDLW  A1
04D8C:  MOVWF  FE9
04D8E:  MOVLW  05
04D90:  ADDWFC 03,W
04D92:  MOVWF  FEA
04D94:  MOVFF  FEC,7F1
04D98:  MOVF   FED,F
04D9A:  MOVFF  FEF,7F0
04D9E:  MOVFF  7F1,7F0
04DA2:  CLRF   xF1
04DA4:  MOVF   xF0,W
04DA6:  ANDLW  0F
04DA8:  MOVWF  00
04DAA:  CLRF   03
04DAC:  MOVF   00,W
04DAE:  IORWF  xEE,W
04DB0:  MOVWF  00
04DB2:  MOVF   03,W
04DB4:  IORWF  xEF,W
04DB6:  MOVWF  03
04DB8:  MOVF   00,W
04DBA:  MOVWF  xEE
04DBC:  MOVFF  03,7EF
04DC0:  MOVFF  7ED,FEA
04DC4:  MOVFF  7EC,FE9
04DC8:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04DCC:  INCF   xE0,F
....................         packetdata[packetdata_index]    = cigs1_buffer[1][i] & 0xFF;
04DCE:  CLRF   03
04DD0:  MOVF   xE0,W
04DD2:  ADDLW  A0
04DD4:  MOVWF  01
04DD6:  MOVLW  07
04DD8:  ADDWFC 03,F
04DDA:  MOVF   01,W
04DDC:  MOVWF  xEC
04DDE:  MOVFF  03,7ED
04DE2:  BCF    FD8.0
04DE4:  RLCF   xE1,W
04DE6:  MOVWF  02
04DE8:  RLCF   xE2,W
04DEA:  MOVWF  03
04DEC:  MOVF   02,W
04DEE:  ADDLW  A1
04DF0:  MOVWF  FE9
04DF2:  MOVLW  05
04DF4:  ADDWFC 03,W
04DF6:  MOVWF  FEA
04DF8:  MOVFF  FEC,7EF
04DFC:  MOVF   FED,F
04DFE:  MOVFF  FEF,7EE
04E02:  MOVF   xEE,W
04E04:  MOVWF  00
04E06:  CLRF   03
04E08:  MOVF   00,W
04E0A:  MOVWF  xEE
04E0C:  MOVFF  03,7EF
04E10:  MOVFF  7ED,FEA
04E14:  MOVFF  7EC,FE9
04E18:  MOVFF  7EE,FEF
....................         packetdata_index++; 
04E1C:  INCF   xE0,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
04E1E:  MOVF   xE0,W
04E20:  SUBLW  3F
04E22:  BTFSC  FD8.2
04E24:  BRA    4E2C
04E26:  MOVLB  0
04E28:  GOTO   4EDC
04E2C:  MOVLB  0
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
04E2E:  MOVLW  07
04E30:  MOVLB  7
04E32:  MOVWF  xED
04E34:  MOVLW  A0
04E36:  MOVWF  xEC
04E38:  MOVLW  3F
04E3A:  MOVWF  xEE
04E3C:  MOVLB  0
04E3E:  CALL   3B6C
04E42:  MOVFF  01,7DF
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04E46:  MOVLB  3
04E48:  MOVF   x6A,W
04E4A:  MOVLB  7
04E4C:  MOVWF  xE3
04E4E:  MOVLB  3
04E50:  MOVF   x6B,W
04E52:  MOVLB  7
04E54:  MOVWF  xE4
04E56:  MOVLW  16
04E58:  MOVLB  3
04E5A:  ADDWF  x6C,W
04E5C:  MOVLB  7
04E5E:  MOVWF  xE5
04E60:  MOVLW  00
04E62:  MOVLB  3
04E64:  ADDWFC x6D,W
04E66:  MOVLB  7
04E68:  MOVWF  xE6
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04E6A:  MOVFF  E1,82F
04E6E:  MOVFF  E0,82E
04E72:  MOVFF  DF,82D
04E76:  MOVFF  DE,82C
04E7A:  MOVFF  7E6,833
04E7E:  MOVFF  7E5,832
04E82:  MOVFF  7E4,831
04E86:  MOVFF  7E3,830
04E8A:  MOVLW  07
04E8C:  MOVLB  8
04E8E:  MOVWF  x35
04E90:  MOVLW  A0
04E92:  MOVWF  x34
04E94:  CLRF   x37
04E96:  MOVLW  40
04E98:  MOVWF  x36
04E9A:  MOVLB  0
04E9C:  CALL   2E7C
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
04EA0:  MOVLW  40
04EA2:  MOVLB  3
04EA4:  ADDWF  x6A,F
04EA6:  MOVLW  00
04EA8:  ADDWFC x6B,F
04EAA:  MOVLW  00
04EAC:  ADDWFC x6C,F
04EAE:  MOVLW  00
04EB0:  ADDWFC x6D,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
04EB2:  MOVLW  40
04EB4:  ADDWF  x6F,F
04EB6:  MOVLW  00
04EB8:  ADDWFC x70,F
04EBA:  MOVLW  00
04EBC:  ADDWFC x71,F
04EBE:  MOVLW  00
04EC0:  ADDWFC x72,F
....................             packetdata_index = 0; // Reset packet byte counter
04EC2:  MOVLB  7
04EC4:  CLRF   xE0
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
04EC6:  MOVLW  07
04EC8:  MOVWF  FEA
04ECA:  MOVLW  A0
04ECC:  MOVWF  FE9
04ECE:  CLRF   00
04ED0:  CLRF   02
04ED2:  MOVLW  40
04ED4:  MOVWF  01
04ED6:  MOVLB  0
04ED8:  CALL   3F56
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
04EDC:  MOVLB  7
04EDE:  INCF   xE1,F
04EE0:  BTFSC  FD8.2
04EE2:  INCF   xE2,F
04EE4:  MOVLB  0
04EE6:  GOTO   4CA6
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
04EEA:  MOVLB  7
04EEC:  MOVF   xE0,W
04EEE:  SUBLW  3E
04EF0:  BTFSC  FD8.0
04EF2:  BRA    4EFA
04EF4:  MOVLB  0
04EF6:  GOTO   4FAE
04EFA:  MOVLB  0
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
04EFC:  MOVFF  7E0,7E7
04F00:  MOVLB  7
04F02:  MOVF   xE7,W
04F04:  SUBLW  3E
04F06:  BTFSC  FD8.0
04F08:  BRA    4F10
04F0A:  MOVLB  0
04F0C:  GOTO   4F30
04F10:  MOVLB  0
....................             packetdata[j] = 0x00;
04F12:  CLRF   03
04F14:  MOVLB  7
04F16:  MOVF   xE7,W
04F18:  ADDLW  A0
04F1A:  MOVWF  FE9
04F1C:  MOVLW  07
04F1E:  ADDWFC 03,W
04F20:  MOVWF  FEA
04F22:  CLRF   FEF
04F24:  MOVLB  0
04F26:  MOVLB  7
04F28:  INCF   xE7,F
04F2A:  MOVLB  0
04F2C:  GOTO   4F00
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
04F30:  MOVLB  3
04F32:  MOVF   x6A,W
04F34:  MOVLB  7
04F36:  MOVWF  xE8
04F38:  MOVLB  3
04F3A:  MOVF   x6B,W
04F3C:  MOVLB  7
04F3E:  MOVWF  xE9
04F40:  MOVLW  16
04F42:  MOVLB  3
04F44:  ADDWF  x6C,W
04F46:  MOVLB  7
04F48:  MOVWF  xEA
04F4A:  MOVLW  00
04F4C:  MOVLB  3
04F4E:  ADDWFC x6D,W
04F50:  MOVLB  7
04F52:  MOVWF  xEB
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
04F54:  MOVFF  E1,82F
04F58:  MOVFF  E0,82E
04F5C:  MOVFF  DF,82D
04F60:  MOVFF  DE,82C
04F64:  MOVFF  7EB,833
04F68:  MOVFF  7EA,832
04F6C:  MOVFF  7E9,831
04F70:  MOVFF  7E8,830
04F74:  MOVLW  07
04F76:  MOVLB  8
04F78:  MOVWF  x35
04F7A:  MOVLW  A0
04F7C:  MOVWF  x34
04F7E:  CLRF   x37
04F80:  MOVLW  40
04F82:  MOVWF  x36
04F84:  MOVLB  0
04F86:  CALL   2E7C
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
04F8A:  MOVLW  40
04F8C:  MOVLB  3
04F8E:  ADDWF  x6A,F
04F90:  MOVLW  00
04F92:  ADDWFC x6B,F
04F94:  MOVLW  00
04F96:  ADDWFC x6C,F
04F98:  MOVLW  00
04F9A:  ADDWFC x6D,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
04F9C:  MOVLW  40
04F9E:  ADDWF  x6F,F
04FA0:  MOVLW  00
04FA2:  ADDWFC x70,F
04FA4:  MOVLW  00
04FA6:  ADDWFC x71,F
04FA8:  MOVLW  00
04FAA:  ADDWFC x72,F
04FAC:  MOVLB  0
....................     }
....................         
....................     write_misf_address_area();
04FAE:  CALL   3558
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
04FB2:  MOVLW  DA
04FB4:  MOVWF  FF6
04FB6:  MOVLW  0D
04FB8:  MOVWF  FF7
04FBA:  MOVLW  00
04FBC:  MOVWF  FF8
04FBE:  CALL   1714
04FC2:  GOTO   5160 (RETURN)
....................     
.................... }
.................... 
.................... void sweep_port2(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Start SWEEP PORT2\r\n");
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     
....................     // Set CIGS2
....................     output_low(CONNECT_CIGS1);
....................     output_high(CONNECT_CIGS2);
....................     output_low(EN_NPWR); 
.................... 
....................     MEASUREMENT_DATA measured_data;
.................... 
....................     measured_data.time = get_current_sec(); 
....................     measured_data.temp_py_top = ad7490_read(ADC_TEMP_PY_TOP);
....................     measured_data.temp_py_bot = ad7490_read(ADC_TEMP_PY_BOT);
....................     measured_data.temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................     measured_data.pd = ad7490_read(ADC_PD); 
.................... 
....................     unsigned int16 cigs2_buffer[2][0xFF]; // Buffer for CIGS2 data
.................... 
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         mcp4901_2_write(count);
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1);
....................         cigs2_buffer[0][count] = ad7490_read(ADC_CIGS2_VOLT);
....................         cigs2_buffer[1][count] = ad7490_read(ADC_CIGS2_CURR);
....................     }
.................... 
....................     output_low(CONNECT_CIGS2);
....................     output_high(EN_NPWR);
.................... 
....................     fprintf(PC, "END SWEEP PORT2\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");  
.................... }
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
03812:  CALL   2B8E
03816:  MOVFF  03,49D
0381A:  MOVFF  02,49C
0381E:  MOVFF  01,49B
03822:  MOVFF  00,49A
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
03826:  MOVFF  49D,4A4
0382A:  MOVLB  4
0382C:  CLRF   xA5
0382E:  CLRF   xA6
03830:  CLRF   xA7
03832:  MOVF   xA4,W
03834:  MOVWF  x94
....................     piclog[1] = (time >> 16) & 0xFF;
03836:  MOVFF  49C,4A4
0383A:  MOVFF  49D,4A5
0383E:  CLRF   xA6
03840:  CLRF   xA7
03842:  MOVF   xA4,W
03844:  MOVWF  x95
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
03846:  MOVFF  49B,4A4
0384A:  MOVFF  49C,4A5
0384E:  MOVFF  49D,4A6
03852:  CLRF   xA7
03854:  MOVF   xA4,W
03856:  MOVWF  x96
....................     piclog[3] = time & 0xFF;         // Time low byte
03858:  MOVF   x9A,W
0385A:  MOVWF  x97
....................     piclog[4] = function;            // Function code
0385C:  MOVFF  492,498
....................     piclog[5] = parameter;           // Parameter code
03860:  MOVFF  493,499
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
03864:  MOVLW  4E
03866:  MOVWF  FF6
03868:  MOVLW  0E
0386A:  MOVWF  FF7
0386C:  MOVLW  00
0386E:  MOVWF  FF8
03870:  MOVLB  0
03872:  CALL   1714
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
03876:  MOVLB  4
03878:  CLRF   x9E
0387A:  MOVLB  0
0387C:  MOVLB  4
0387E:  MOVF   x9E,W
03880:  SUBLW  05
03882:  BTFSC  FD8.0
03884:  BRA    388C
03886:  MOVLB  0
03888:  GOTO   38C8
0388C:  MOVLB  0
....................             fprintf(PC, "%02X ", piclog[i]);
0388E:  CLRF   03
03890:  MOVLB  4
03892:  MOVF   x9E,W
03894:  ADDLW  94
03896:  MOVWF  FE9
03898:  MOVLW  04
0389A:  ADDWFC 03,W
0389C:  MOVWF  FEA
0389E:  MOVFF  FEF,4A3
038A2:  MOVFF  4A3,847
038A6:  MOVLW  37
038A8:  MOVLB  8
038AA:  MOVWF  x48
038AC:  MOVLB  0
038AE:  CALL   1F34
038B2:  MOVLW  20
038B4:  MOVLB  8
038B6:  MOVWF  x49
038B8:  MOVLB  0
038BA:  CALL   16C2
038BE:  MOVLB  4
038C0:  INCF   x9E,F
038C2:  MOVLB  0
038C4:  GOTO   387C
....................         }
....................         fprintf(PC, "\r\n");
038C8:  MOVLW  0D
038CA:  MOVLB  8
038CC:  MOVWF  x49
038CE:  MOVLB  0
038D0:  CALL   16C2
038D4:  MOVLW  0A
038D6:  MOVLB  8
038D8:  MOVWF  x49
038DA:  MOVLB  0
038DC:  CALL   16C2
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
038E0:  MOVLB  3
038E2:  MOVF   x60,W
038E4:  MOVLB  4
038E6:  MOVWF  x9F
038E8:  MOVLB  3
038EA:  MOVF   x61,W
038EC:  MOVLB  4
038EE:  MOVWF  xA0
038F0:  MOVLW  02
038F2:  MOVLB  3
038F4:  ADDWF  x62,W
038F6:  MOVLB  4
038F8:  MOVWF  xA1
038FA:  MOVLW  00
038FC:  MOVLB  3
038FE:  ADDWFC x63,W
03900:  MOVLB  4
03902:  MOVWF  xA2
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
03904:  MOVFF  E1,82F
03908:  MOVFF  E0,82E
0390C:  MOVFF  DF,82D
03910:  MOVFF  DE,82C
03914:  MOVLB  0
03916:  CALL   1FA4
0391A:  MOVF   01,F
0391C:  BTFSS  FD8.2
0391E:  GOTO   3936
....................         fprintf(PC, "Mission Flash is not connected\r\n");
03922:  MOVLW  5A
03924:  MOVWF  FF6
03926:  MOVLW  0E
03928:  MOVWF  FF7
0392A:  MOVLW  00
0392C:  MOVWF  FF8
0392E:  CALL   1714
....................         return;
03932:  GOTO   3A06
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
03936:  MOVFF  E1,82F
0393A:  MOVFF  E0,82E
0393E:  MOVFF  DF,82D
03942:  MOVFF  DE,82C
03946:  MOVFF  4A2,833
0394A:  MOVFF  4A1,832
0394E:  MOVFF  4A0,831
03952:  MOVFF  49F,830
03956:  MOVLW  04
03958:  MOVLB  8
0395A:  MOVWF  x35
0395C:  MOVLW  94
0395E:  MOVWF  x34
03960:  CLRF   x37
03962:  MOVLW  06
03964:  MOVWF  x36
03966:  MOVLB  0
03968:  CALL   2E7C
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
0396C:  MOVLW  06
0396E:  MOVLB  3
03970:  ADDWF  x60,F
03972:  MOVLW  00
03974:  ADDWFC x61,F
03976:  MOVLW  00
03978:  ADDWFC x62,F
0397A:  MOVLW  00
0397C:  ADDWFC x63,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
0397E:  MOVLW  06
03980:  ADDWF  x65,F
03982:  MOVLW  00
03984:  ADDWFC x66,F
03986:  MOVLW  00
03988:  ADDWFC x67,F
0398A:  MOVLW  00
0398C:  ADDWFC x68,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
0398E:  MOVLW  06
03990:  ADDWF  x69,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
03992:  MOVLW  06
03994:  ADDWF  x69,W
03996:  SUBLW  3F
03998:  BTFSS  FD8.0
0399A:  BRA    39A2
0399C:  MOVLB  0
0399E:  GOTO   3A02
039A2:  MOVLB  0
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
039A4:  MOVLB  3
039A6:  MOVF   x60,W
039A8:  MOVLB  4
039AA:  MOVWF  x9F
039AC:  MOVLB  3
039AE:  MOVF   x61,W
039B0:  MOVLB  4
039B2:  MOVWF  xA0
039B4:  MOVLW  02
039B6:  MOVLB  3
039B8:  ADDWF  x62,W
039BA:  MOVLB  4
039BC:  MOVWF  xA1
039BE:  MOVLW  00
039C0:  MOVLB  3
039C2:  ADDWFC x63,W
039C4:  MOVLB  4
039C6:  MOVWF  xA2
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
039C8:  MOVFF  E1,82F
039CC:  MOVFF  E0,82E
039D0:  MOVFF  DF,82D
039D4:  MOVFF  DE,82C
039D8:  MOVFF  4A2,833
039DC:  MOVFF  4A1,832
039E0:  MOVFF  4A0,831
039E4:  MOVFF  49F,830
039E8:  MOVLB  8
039EA:  CLRF   x35
039EC:  MOVLW  EE
039EE:  MOVWF  x34
039F0:  CLRF   x37
039F2:  MOVLW  06
039F4:  MOVWF  x36
039F6:  MOVLB  0
039F8:  CALL   2E7C
....................         misf_piclog_write_counter = 0;
039FC:  MOVLB  3
039FE:  CLRF   x69
03A00:  MOVLB  0
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
03A02:  CALL   3558
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
03A06:  RETURN 0
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_flash.c"
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
0550E:  MOVLW  7C
05510:  MOVWF  FF6
05512:  MOVLW  0E
05514:  MOVWF  FF7
05516:  MOVLW  00
05518:  MOVWF  FF8
0551A:  CALL   1714
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
0551E:  MOVLB  3
05520:  MOVF   x8D,W
05522:  MOVWF  FE9
05524:  MOVF   x8E,W
05526:  MOVWF  FEA
05528:  MOVFF  FEF,38F
....................    piclog_make(cmd, 0x00); // Log the command execution
0552C:  MOVFF  38F,492
05530:  MOVLB  4
05532:  CLRF   x93
05534:  MOVLB  0
05536:  CALL   3812
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
0553A:  MOVLB  3
0553C:  CLRF   x93
0553E:  CLRF   x92
05540:  CLRF   x91
05542:  CLRF   x90
05544:  MOVLB  0
05546:  MOVLB  3
05548:  MOVF   x93,F
0554A:  BTFSC  FD8.2
0554C:  BRA    5554
0554E:  MOVLB  0
05550:  GOTO   55B4
05554:  MOVLB  0
05556:  MOVLB  3
05558:  MOVF   x92,W
0555A:  SUBLW  F4
0555C:  BTFSC  FD8.0
0555E:  BRA    5566
05560:  MOVLB  0
05562:  GOTO   55B4
05566:  MOVLB  0
05568:  BTFSS  FD8.2
0556A:  GOTO   5580
0556E:  MOVLB  3
05570:  MOVF   x91,W
05572:  SUBLW  23
05574:  BTFSC  FD8.0
05576:  BRA    557E
05578:  MOVLB  0
0557A:  GOTO   55B4
0557E:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05580:  MOVFF  E1,397
05584:  MOVFF  E0,396
05588:  MOVFF  DF,395
0558C:  MOVFF  DE,394
05590:  MOVFF  393,39B
05594:  MOVFF  392,39A
05598:  MOVFF  391,399
0559C:  MOVFF  390,398
055A0:  CALL   51B2
055A4:  MOVLW  01
055A6:  MOVLB  3
055A8:  ADDWF  x92,F
055AA:  MOVLW  00
055AC:  ADDWFC x93,F
055AE:  MOVLB  0
055B0:  GOTO   5546
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
055B4:  MOVFF  38F,492
055B8:  MOVLW  02
055BA:  MOVLB  4
055BC:  MOVWF  x93
055BE:  MOVLB  0
055C0:  CALL   3812
....................    fprintf(PC, "End Flash Erase All\r\n");
055C4:  MOVLW  94
055C6:  MOVWF  FF6
055C8:  MOVLW  0E
055CA:  MOVWF  FF7
055CC:  MOVLW  00
055CE:  MOVWF  FF8
055D0:  CALL   1714
055D4:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
055D6:  MOVLW  AA
055D8:  MOVWF  FF6
055DA:  MOVLW  0E
055DC:  MOVWF  FF7
055DE:  MOVLW  00
055E0:  MOVWF  FF8
055E2:  CALL   1714
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
055E6:  MOVLB  3
055E8:  MOVF   x8B,W
055EA:  MOVWF  FE9
055EC:  MOVF   x8C,W
055EE:  MOVWF  FEA
055F0:  MOVFF  FEF,38D
055F4:  MOVLW  01
055F6:  ADDWF  x8B,W
055F8:  MOVWF  FE9
055FA:  MOVLW  00
055FC:  ADDWFC x8C,W
055FE:  MOVWF  FEA
05600:  MOVF   FEF,W
05602:  CLRF   x95
05604:  CLRF   x94
05606:  CLRF   x93
05608:  MOVWF  x92
0560A:  MOVFF  392,395
0560E:  CLRF   x92
05610:  CLRF   x93
05612:  CLRF   x94
05614:  MOVLW  02
05616:  ADDWF  x8B,W
05618:  MOVWF  FE9
0561A:  MOVLW  00
0561C:  ADDWFC x8C,W
0561E:  MOVWF  FEA
05620:  MOVF   FEF,W
05622:  CLRF   x9A
05624:  CLRF   x99
05626:  CLRF   x98
05628:  MOVWF  x97
0562A:  MOVFF  398,03
0562E:  MOVFF  397,02
05632:  CLRF   00
05634:  CLRF   01
05636:  MOVF   00,W
05638:  IORWF  x92,F
0563A:  MOVF   01,W
0563C:  IORWF  x93,F
0563E:  MOVF   02,W
05640:  IORWF  x94,F
05642:  MOVF   03,W
05644:  IORWF  x95,F
05646:  MOVLW  03
05648:  ADDWF  x8B,W
0564A:  MOVWF  FE9
0564C:  MOVLW  00
0564E:  ADDWFC x8C,W
05650:  MOVWF  FEA
05652:  MOVF   FEF,W
05654:  CLRF   x9A
05656:  CLRF   x99
05658:  CLRF   x98
0565A:  MOVWF  x97
0565C:  MOVFF  399,03
05660:  MOVFF  398,02
05664:  MOVFF  397,01
05668:  CLRF   00
0566A:  MOVF   00,W
0566C:  IORWF  x92,F
0566E:  MOVF   01,W
05670:  IORWF  x93,F
05672:  MOVF   02,W
05674:  IORWF  x94,F
05676:  MOVF   03,W
05678:  IORWF  x95,F
0567A:  MOVLW  04
0567C:  ADDWF  x8B,W
0567E:  MOVWF  FE9
05680:  MOVLW  00
05682:  ADDWFC x8C,W
05684:  MOVWF  FEA
05686:  MOVF   FEF,W
05688:  MOVWF  00
0568A:  CLRF   01
0568C:  CLRF   02
0568E:  CLRF   03
05690:  MOVF   00,W
05692:  IORWF  x92,W
05694:  MOVWF  x8E
05696:  MOVF   01,W
05698:  IORWF  x93,W
0569A:  MOVWF  x8F
0569C:  MOVF   02,W
0569E:  IORWF  x94,W
056A0:  MOVWF  x90
056A2:  MOVF   03,W
056A4:  IORWF  x95,W
056A6:  MOVWF  x91
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
056A8:  MOVLW  C8
056AA:  MOVWF  FF6
056AC:  MOVLW  0E
056AE:  MOVWF  FF7
056B0:  MOVLW  00
056B2:  MOVWF  FF8
056B4:  MOVLW  13
056B6:  MOVLB  7
056B8:  MOVWF  xEC
056BA:  MOVLB  0
056BC:  CALL   1744
056C0:  MOVFF  391,847
056C4:  MOVLW  37
056C6:  MOVLB  8
056C8:  MOVWF  x48
056CA:  MOVLB  0
056CC:  CALL   1F34
056D0:  MOVFF  390,847
056D4:  MOVLW  37
056D6:  MOVLB  8
056D8:  MOVWF  x48
056DA:  MOVLB  0
056DC:  CALL   1F34
056E0:  MOVFF  38F,847
056E4:  MOVLW  37
056E6:  MOVLB  8
056E8:  MOVWF  x48
056EA:  MOVLB  0
056EC:  CALL   1F34
056F0:  MOVFF  38E,847
056F4:  MOVLW  37
056F6:  MOVLB  8
056F8:  MOVWF  x48
056FA:  MOVLB  0
056FC:  CALL   1F34
05700:  MOVLW  0D
05702:  MOVLB  8
05704:  MOVWF  x49
05706:  MOVLB  0
05708:  CALL   16C2
0570C:  MOVLW  0A
0570E:  MOVLB  8
05710:  MOVWF  x49
05712:  MOVLB  0
05714:  CALL   16C2
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05718:  MOVFF  38D,492
0571C:  MOVLW  01
0571E:  MOVLB  4
05720:  MOVWF  x93
05722:  MOVLB  0
05724:  CALL   3812
....................    
....................    sector_erase(mis_fm, sector_address);
05728:  MOVFF  E1,397
0572C:  MOVFF  E0,396
05730:  MOVFF  DF,395
05734:  MOVFF  DE,394
05738:  MOVFF  391,39B
0573C:  MOVFF  390,39A
05740:  MOVFF  38F,399
05744:  MOVFF  38E,398
05748:  CALL   51B2
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
0574C:  MOVFF  38D,492
05750:  MOVLW  02
05752:  MOVLB  4
05754:  MOVWF  x93
05756:  MOVLB  0
05758:  CALL   3812
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
0575C:  MOVLW  E4
0575E:  MOVWF  FF6
05760:  MOVLW  0E
05762:  MOVWF  FF7
05764:  MOVLW  00
05766:  MOVWF  FF8
05768:  CALL   1714
0576C:  GOTO   6994 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
05770:  MOVLW  00
05772:  MOVWF  FF6
05774:  MOVLW  0F
05776:  MOVWF  FF7
05778:  MOVLW  00
0577A:  MOVWF  FF8
0577C:  CALL   1714
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05780:  MOVLB  3
05782:  MOVF   x8B,W
05784:  MOVWF  FE9
05786:  MOVF   x8C,W
05788:  MOVWF  FEA
0578A:  MOVFF  FEF,38D
0578E:  MOVLW  01
05790:  ADDWF  x8B,W
05792:  MOVWF  FE9
05794:  MOVLW  00
05796:  ADDWFC x8C,W
05798:  MOVWF  FEA
0579A:  MOVF   FEF,W
0579C:  CLRF   x95
0579E:  CLRF   x94
057A0:  CLRF   x93
057A2:  MOVWF  x92
057A4:  MOVFF  392,395
057A8:  CLRF   x92
057AA:  CLRF   x93
057AC:  CLRF   x94
057AE:  MOVLW  02
057B0:  ADDWF  x8B,W
057B2:  MOVWF  FE9
057B4:  MOVLW  00
057B6:  ADDWFC x8C,W
057B8:  MOVWF  FEA
057BA:  MOVF   FEF,W
057BC:  CLRF   x9A
057BE:  CLRF   x99
057C0:  CLRF   x98
057C2:  MOVWF  x97
057C4:  MOVFF  398,03
057C8:  MOVFF  397,02
057CC:  CLRF   00
057CE:  CLRF   01
057D0:  MOVF   00,W
057D2:  IORWF  x92,F
057D4:  MOVF   01,W
057D6:  IORWF  x93,F
057D8:  MOVF   02,W
057DA:  IORWF  x94,F
057DC:  MOVF   03,W
057DE:  IORWF  x95,F
057E0:  MOVLW  03
057E2:  ADDWF  x8B,W
057E4:  MOVWF  FE9
057E6:  MOVLW  00
057E8:  ADDWFC x8C,W
057EA:  MOVWF  FEA
057EC:  MOVF   FEF,W
057EE:  CLRF   x9A
057F0:  CLRF   x99
057F2:  CLRF   x98
057F4:  MOVWF  x97
057F6:  MOVFF  399,03
057FA:  MOVFF  398,02
057FE:  MOVFF  397,01
05802:  CLRF   00
05804:  MOVF   00,W
05806:  IORWF  x92,F
05808:  MOVF   01,W
0580A:  IORWF  x93,F
0580C:  MOVF   02,W
0580E:  IORWF  x94,F
05810:  MOVF   03,W
05812:  IORWF  x95,F
05814:  MOVLW  04
05816:  ADDWF  x8B,W
05818:  MOVWF  FE9
0581A:  MOVLW  00
0581C:  ADDWFC x8C,W
0581E:  MOVWF  FEA
05820:  MOVF   FEF,W
05822:  MOVWF  00
05824:  CLRF   01
05826:  CLRF   02
05828:  CLRF   03
0582A:  MOVF   00,W
0582C:  IORWF  x92,W
0582E:  MOVWF  x8E
05830:  MOVF   01,W
05832:  IORWF  x93,W
05834:  MOVWF  x8F
05836:  MOVF   02,W
05838:  IORWF  x94,W
0583A:  MOVWF  x90
0583C:  MOVF   03,W
0583E:  IORWF  x95,W
05840:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05842:  MOVLW  1C
05844:  MOVWF  FF6
05846:  MOVLW  0F
05848:  MOVWF  FF7
0584A:  MOVLW  00
0584C:  MOVWF  FF8
0584E:  MOVLW  16
05850:  MOVLB  7
05852:  MOVWF  xEC
05854:  MOVLB  0
05856:  CALL   1744
0585A:  MOVFF  391,847
0585E:  MOVLW  37
05860:  MOVLB  8
05862:  MOVWF  x48
05864:  MOVLB  0
05866:  CALL   1F34
0586A:  MOVFF  390,847
0586E:  MOVLW  37
05870:  MOVLB  8
05872:  MOVWF  x48
05874:  MOVLB  0
05876:  CALL   1F34
0587A:  MOVFF  38F,847
0587E:  MOVLW  37
05880:  MOVLB  8
05882:  MOVWF  x48
05884:  MOVLB  0
05886:  CALL   1F34
0588A:  MOVFF  38E,847
0588E:  MOVLW  37
05890:  MOVLB  8
05892:  MOVWF  x48
05894:  MOVLB  0
05896:  CALL   1F34
0589A:  MOVLW  0D
0589C:  MOVLB  8
0589E:  MOVWF  x49
058A0:  MOVLB  0
058A2:  CALL   16C2
058A6:  MOVLW  0A
058A8:  MOVLB  8
058AA:  MOVWF  x49
058AC:  MOVLB  0
058AE:  CALL   16C2
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
058B2:  MOVFF  38D,492
058B6:  MOVLW  01
058B8:  MOVLB  4
058BA:  MOVWF  x93
058BC:  MOVLB  0
058BE:  CALL   3812
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
058C2:  MOVFF  E1,82F
058C6:  MOVFF  E0,82E
058CA:  MOVFF  DF,82D
058CE:  MOVFF  DE,82C
058D2:  MOVLB  8
058D4:  CLRF   x33
058D6:  CLRF   x32
058D8:  CLRF   x31
058DA:  CLRF   x30
058DC:  MOVLB  0
058DE:  CALL   3200
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
058E2:  MOVFF  38D,492
058E6:  MOVLW  02
058E8:  MOVLB  4
058EA:  MOVWF  x93
058EC:  MOVLB  0
058EE:  CALL   3812
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
058F2:  MOVLW  3A
058F4:  MOVWF  FF6
058F6:  MOVLW  0F
058F8:  MOVWF  FF7
058FA:  MOVLW  00
058FC:  MOVWF  FF8
058FE:  CALL   1714
05902:  GOTO   69A4 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05906:  MOVLW  54
05908:  MOVWF  FF6
0590A:  MOVLW  0F
0590C:  MOVWF  FF7
0590E:  MOVLW  00
05910:  MOVWF  FF8
05912:  CALL   1714
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05916:  MOVLB  3
05918:  MOVF   x8B,W
0591A:  MOVWF  FE9
0591C:  MOVF   x8C,W
0591E:  MOVWF  FEA
05920:  MOVFF  FEF,38D
05924:  MOVLW  01
05926:  ADDWF  x8B,W
05928:  MOVWF  FE9
0592A:  MOVLW  00
0592C:  ADDWFC x8C,W
0592E:  MOVWF  FEA
05930:  MOVF   FEF,W
05932:  CLRF   x95
05934:  CLRF   x94
05936:  CLRF   x93
05938:  MOVWF  x92
0593A:  MOVFF  392,395
0593E:  CLRF   x92
05940:  CLRF   x93
05942:  CLRF   x94
05944:  MOVLW  02
05946:  ADDWF  x8B,W
05948:  MOVWF  FE9
0594A:  MOVLW  00
0594C:  ADDWFC x8C,W
0594E:  MOVWF  FEA
05950:  MOVF   FEF,W
05952:  CLRF   x9A
05954:  CLRF   x99
05956:  CLRF   x98
05958:  MOVWF  x97
0595A:  MOVFF  398,03
0595E:  MOVFF  397,02
05962:  CLRF   00
05964:  CLRF   01
05966:  MOVF   00,W
05968:  IORWF  x92,F
0596A:  MOVF   01,W
0596C:  IORWF  x93,F
0596E:  MOVF   02,W
05970:  IORWF  x94,F
05972:  MOVF   03,W
05974:  IORWF  x95,F
05976:  MOVLW  03
05978:  ADDWF  x8B,W
0597A:  MOVWF  FE9
0597C:  MOVLW  00
0597E:  ADDWFC x8C,W
05980:  MOVWF  FEA
05982:  MOVF   FEF,W
05984:  CLRF   x9A
05986:  CLRF   x99
05988:  CLRF   x98
0598A:  MOVWF  x97
0598C:  MOVFF  399,03
05990:  MOVFF  398,02
05994:  MOVFF  397,01
05998:  CLRF   00
0599A:  MOVF   00,W
0599C:  IORWF  x92,F
0599E:  MOVF   01,W
059A0:  IORWF  x93,F
059A2:  MOVF   02,W
059A4:  IORWF  x94,F
059A6:  MOVF   03,W
059A8:  IORWF  x95,F
059AA:  MOVLW  04
059AC:  ADDWF  x8B,W
059AE:  MOVWF  FE9
059B0:  MOVLW  00
059B2:  ADDWFC x8C,W
059B4:  MOVWF  FEA
059B6:  MOVF   FEF,W
059B8:  MOVWF  00
059BA:  CLRF   01
059BC:  CLRF   02
059BE:  CLRF   03
059C0:  MOVF   00,W
059C2:  IORWF  x92,W
059C4:  MOVWF  x8E
059C6:  MOVF   01,W
059C8:  IORWF  x93,W
059CA:  MOVWF  x8F
059CC:  MOVF   02,W
059CE:  IORWF  x94,W
059D0:  MOVWF  x90
059D2:  MOVF   03,W
059D4:  IORWF  x95,W
059D6:  MOVWF  x91
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
059D8:  MOVLW  7A
059DA:  MOVWF  FF6
059DC:  MOVLW  0F
059DE:  MOVWF  FF7
059E0:  MOVLW  00
059E2:  MOVWF  FF8
059E4:  MOVLW  16
059E6:  MOVLB  7
059E8:  MOVWF  xEC
059EA:  MOVLB  0
059EC:  CALL   1744
059F0:  MOVFF  391,847
059F4:  MOVLW  37
059F6:  MOVLB  8
059F8:  MOVWF  x48
059FA:  MOVLB  0
059FC:  CALL   1F34
05A00:  MOVFF  390,847
05A04:  MOVLW  37
05A06:  MOVLB  8
05A08:  MOVWF  x48
05A0A:  MOVLB  0
05A0C:  CALL   1F34
05A10:  MOVFF  38F,847
05A14:  MOVLW  37
05A16:  MOVLB  8
05A18:  MOVWF  x48
05A1A:  MOVLB  0
05A1C:  CALL   1F34
05A20:  MOVFF  38E,847
05A24:  MOVLW  37
05A26:  MOVLB  8
05A28:  MOVWF  x48
05A2A:  MOVLB  0
05A2C:  CALL   1F34
05A30:  MOVLW  0D
05A32:  MOVLB  8
05A34:  MOVWF  x49
05A36:  MOVLB  0
05A38:  CALL   16C2
05A3C:  MOVLW  0A
05A3E:  MOVLB  8
05A40:  MOVWF  x49
05A42:  MOVLB  0
05A44:  CALL   16C2
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05A48:  MOVFF  38D,492
05A4C:  MOVLW  01
05A4E:  MOVLB  4
05A50:  MOVWF  x93
05A52:  MOVLB  0
05A54:  CALL   3812
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05A58:  MOVFF  38D,492
05A5C:  MOVLW  02
05A5E:  MOVLB  4
05A60:  MOVWF  x93
05A62:  MOVLB  0
05A64:  CALL   3812
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05A68:  MOVLW  98
05A6A:  MOVWF  FF6
05A6C:  MOVLW  0F
05A6E:  MOVWF  FF7
05A70:  MOVLW  00
05A72:  MOVWF  FF8
05A74:  CALL   1714
05A78:  GOTO   69B4 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
05A7C:  MOVLW  BC
05A7E:  MOVWF  FF6
05A80:  MOVLW  0F
05A82:  MOVWF  FF7
05A84:  MOVLW  00
05A86:  MOVWF  FF8
05A88:  CALL   1714
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05A8C:  MOVLB  3
05A8E:  MOVF   x8B,W
05A90:  MOVWF  FE9
05A92:  MOVF   x8C,W
05A94:  MOVWF  FEA
05A96:  MOVFF  FEF,3DD
05A9A:  MOVFF  3DD,492
05A9E:  MOVLW  01
05AA0:  MOVLB  4
05AA2:  MOVWF  x93
05AA4:  MOVLB  0
05AA6:  CALL   3812
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
05AAA:  MOVLB  3
05AAC:  CLRF   x8D
05AAE:  CLRF   x8E
05AB0:  CLRF   x8F
05AB2:  CLRF   x90
05AB4:  CLRF   x91
05AB6:  CLRF   x92
05AB8:  CLRF   x93
....................    
....................    flash_write_param.id = parameter[0];
05ABA:  MOVF   x8B,W
05ABC:  MOVWF  FE9
05ABE:  MOVF   x8C,W
05AC0:  MOVWF  FEA
05AC2:  MOVFF  FEF,38D
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
05AC6:  MOVLW  01
05AC8:  ADDWF  x8B,W
05ACA:  MOVWF  FE9
05ACC:  MOVLW  00
05ACE:  ADDWFC x8C,W
05AD0:  MOVWF  FEA
05AD2:  MOVF   FEF,W
05AD4:  CLRF   xE0
05AD6:  CLRF   xDF
05AD8:  CLRF   xDE
05ADA:  MOVWF  xDD
05ADC:  MOVFF  3DD,3E0
05AE0:  CLRF   xDD
05AE2:  CLRF   xDE
05AE4:  CLRF   xDF
05AE6:  MOVLW  02
05AE8:  ADDWF  x8B,W
05AEA:  MOVWF  FE9
05AEC:  MOVLW  00
05AEE:  ADDWFC x8C,W
05AF0:  MOVWF  FEA
05AF2:  MOVF   FEF,W
05AF4:  CLRF   xE5
05AF6:  CLRF   xE4
05AF8:  CLRF   xE3
05AFA:  MOVWF  xE2
05AFC:  MOVFF  3E3,03
05B00:  MOVFF  3E2,02
05B04:  CLRF   00
05B06:  CLRF   01
05B08:  MOVF   00,W
05B0A:  IORWF  xDD,F
05B0C:  MOVF   01,W
05B0E:  IORWF  xDE,F
05B10:  MOVF   02,W
05B12:  IORWF  xDF,F
05B14:  MOVF   03,W
05B16:  IORWF  xE0,F
05B18:  MOVLW  03
05B1A:  ADDWF  x8B,W
05B1C:  MOVWF  FE9
05B1E:  MOVLW  00
05B20:  ADDWFC x8C,W
05B22:  MOVWF  FEA
05B24:  MOVF   FEF,W
05B26:  CLRF   xE5
05B28:  CLRF   xE4
05B2A:  CLRF   xE3
05B2C:  MOVWF  xE2
05B2E:  MOVFF  3E4,03
05B32:  MOVFF  3E3,02
05B36:  MOVFF  3E2,01
05B3A:  CLRF   00
05B3C:  MOVF   00,W
05B3E:  IORWF  xDD,F
05B40:  MOVF   01,W
05B42:  IORWF  xDE,F
05B44:  MOVF   02,W
05B46:  IORWF  xDF,F
05B48:  MOVF   03,W
05B4A:  IORWF  xE0,F
05B4C:  MOVLW  04
05B4E:  ADDWF  x8B,W
05B50:  MOVWF  FE9
05B52:  MOVLW  00
05B54:  ADDWFC x8C,W
05B56:  MOVWF  FEA
05B58:  MOVF   FEF,W
05B5A:  MOVWF  00
05B5C:  CLRF   01
05B5E:  CLRF   02
05B60:  CLRF   03
05B62:  MOVF   00,W
05B64:  IORWF  xDD,W
05B66:  MOVWF  x8E
05B68:  MOVF   01,W
05B6A:  IORWF  xDE,W
05B6C:  MOVWF  x8F
05B6E:  MOVF   02,W
05B70:  IORWF  xDF,W
05B72:  MOVWF  x90
05B74:  MOVF   03,W
05B76:  IORWF  xE0,W
05B78:  MOVWF  x91
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
05B7A:  MOVLW  07
05B7C:  ADDWF  x8B,W
05B7E:  MOVWF  FE9
05B80:  MOVLW  00
05B82:  ADDWFC x8C,W
05B84:  MOVWF  FEA
05B86:  MOVF   FEF,W
05B88:  CLRF   xDE
05B8A:  MOVWF  xDD
05B8C:  MOVFF  3DD,3DE
05B90:  CLRF   xDD
05B92:  MOVLW  08
05B94:  ADDWF  x8B,W
05B96:  MOVWF  FE9
05B98:  MOVLW  00
05B9A:  ADDWFC x8C,W
05B9C:  MOVWF  FEA
05B9E:  MOVF   FEF,W
05BA0:  CLRF   03
05BA2:  IORWF  xDD,W
05BA4:  MOVWF  x92
05BA6:  MOVF   03,W
05BA8:  IORWF  xDE,W
05BAA:  MOVWF  x93
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
05BAC:  MOVLW  D6
05BAE:  MOVWF  FF6
05BB0:  MOVLW  0F
05BB2:  MOVWF  FF7
05BB4:  MOVLW  00
05BB6:  MOVWF  FF8
05BB8:  MOVLW  0C
05BBA:  MOVLB  7
05BBC:  MOVWF  xEC
05BBE:  MOVLB  0
05BC0:  CALL   1744
05BC4:  MOVFF  38D,847
05BC8:  MOVLW  37
05BCA:  MOVLB  8
05BCC:  MOVWF  x48
05BCE:  MOVLB  0
05BD0:  CALL   1F34
05BD4:  MOVLW  0D
05BD6:  MOVLB  8
05BD8:  MOVWF  x49
05BDA:  MOVLB  0
05BDC:  CALL   16C2
05BE0:  MOVLW  0A
05BE2:  MOVLB  8
05BE4:  MOVWF  x49
05BE6:  MOVLB  0
05BE8:  CALL   16C2
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
05BEC:  MOVLW  EA
05BEE:  MOVWF  FF6
05BF0:  MOVLW  0F
05BF2:  MOVWF  FF7
05BF4:  MOVLW  00
05BF6:  MOVWF  FF8
05BF8:  MOVLW  0E
05BFA:  MOVLB  7
05BFC:  MOVWF  xEC
05BFE:  MOVLB  0
05C00:  CALL   1744
05C04:  MOVFF  391,847
05C08:  MOVLW  37
05C0A:  MOVLB  8
05C0C:  MOVWF  x48
05C0E:  MOVLB  0
05C10:  CALL   1F34
05C14:  MOVFF  390,847
05C18:  MOVLW  37
05C1A:  MOVLB  8
05C1C:  MOVWF  x48
05C1E:  MOVLB  0
05C20:  CALL   1F34
05C24:  MOVFF  38F,847
05C28:  MOVLW  37
05C2A:  MOVLB  8
05C2C:  MOVWF  x48
05C2E:  MOVLB  0
05C30:  CALL   1F34
05C34:  MOVFF  38E,847
05C38:  MOVLW  37
05C3A:  MOVLB  8
05C3C:  MOVWF  x48
05C3E:  MOVLB  0
05C40:  CALL   1F34
05C44:  MOVLW  0D
05C46:  MOVLB  8
05C48:  MOVWF  x49
05C4A:  MOVLB  0
05C4C:  CALL   16C2
05C50:  MOVLW  0A
05C52:  MOVLB  8
05C54:  MOVWF  x49
05C56:  MOVLB  0
05C58:  CALL   16C2
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
05C5C:  MOVLW  00
05C5E:  MOVWF  FF6
05C60:  MOVLW  10
05C62:  MOVWF  FF7
05C64:  MOVLW  00
05C66:  MOVWF  FF8
05C68:  MOVLW  0E
05C6A:  MOVLB  7
05C6C:  MOVWF  xEC
05C6E:  MOVLB  0
05C70:  CALL   1744
05C74:  MOVFF  393,847
05C78:  MOVLW  37
05C7A:  MOVLB  8
05C7C:  MOVWF  x48
05C7E:  MOVLB  0
05C80:  CALL   1F34
05C84:  MOVFF  392,847
05C88:  MOVLW  37
05C8A:  MOVLB  8
05C8C:  MOVWF  x48
05C8E:  MOVLB  0
05C90:  CALL   1F34
05C94:  MOVLW  0D
05C96:  MOVLB  8
05C98:  MOVWF  x49
05C9A:  MOVLB  0
05C9C:  CALL   16C2
05CA0:  MOVLW  0A
05CA2:  MOVLB  8
05CA4:  MOVWF  x49
05CA6:  MOVLB  0
05CA8:  CALL   16C2
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
05CAC:  MOVFF  38D,492
05CB0:  MOVLB  4
05CB2:  CLRF   x93
05CB4:  MOVLB  0
05CB6:  CALL   3812
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
05CBA:  MOVLW  16
05CBC:  MOVWF  FF6
05CBE:  MOVLW  10
05CC0:  MOVWF  FF7
05CC2:  MOVLW  00
05CC4:  MOVWF  FF8
05CC6:  CALL   1714
....................    for (p = 0; p < flash_write_param.packetnum; p++)
05CCA:  MOVLB  3
05CCC:  CLRF   xD5
05CCE:  CLRF   xD4
05CD0:  MOVLB  0
05CD2:  MOVLB  3
05CD4:  MOVF   xD5,W
05CD6:  SUBWF  x93,W
05CD8:  BTFSC  FD8.0
05CDA:  BRA    5CE2
05CDC:  MOVLB  0
05CDE:  GOTO   5E10
05CE2:  MOVLB  0
05CE4:  BTFSS  FD8.2
05CE6:  GOTO   5CFC
05CEA:  MOVLB  3
05CEC:  MOVF   x92,W
05CEE:  SUBWF  xD4,W
05CF0:  BTFSS  FD8.0
05CF2:  BRA    5CFA
05CF4:  MOVLB  0
05CF6:  GOTO   5E10
05CFA:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
05CFC:  MOVLB  3
05CFE:  RLCF   xD4,W
05D00:  MOVWF  xD6
05D02:  RLCF   xD5,W
05D04:  MOVWF  xD7
05D06:  RLCF   xD6,F
05D08:  RLCF   xD7,F
05D0A:  RLCF   xD6,F
05D0C:  RLCF   xD7,F
05D0E:  RLCF   xD6,F
05D10:  RLCF   xD7,F
05D12:  RLCF   xD6,F
05D14:  RLCF   xD7,F
05D16:  RLCF   xD6,F
05D18:  RLCF   xD7,F
05D1A:  MOVLW  C0
05D1C:  ANDWF  xD6,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
05D1E:  CLRF   xD8
05D20:  MOVLB  0
05D22:  MOVLB  3
05D24:  MOVF   xD8,W
05D26:  SUBLW  3F
05D28:  BTFSC  FD8.0
05D2A:  BRA    5D32
05D2C:  MOVLB  0
05D2E:  GOTO   5D92
05D32:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
05D34:  CLRF   03
05D36:  MOVLB  3
05D38:  MOVF   xD8,W
05D3A:  ADDLW  94
05D3C:  MOVWF  FE9
05D3E:  MOVLW  03
05D40:  ADDWFC 03,W
05D42:  MOVWF  FEA
05D44:  MOVF   xD8,W
05D46:  ADDWF  xD6,W
05D48:  MOVWF  xDF
05D4A:  MOVLW  00
05D4C:  ADDWFC xD7,W
05D4E:  MOVWF  xE0
05D50:  MOVF   xDF,W
05D52:  MOVWF  00
05D54:  CLRF   03
05D56:  MOVF   00,W
05D58:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
05D5A:  CLRF   03
05D5C:  MOVF   xD8,W
05D5E:  ADDLW  94
05D60:  MOVWF  FE9
05D62:  MOVLW  03
05D64:  ADDWFC 03,W
05D66:  MOVWF  FEA
05D68:  MOVFF  FEF,3DD
05D6C:  MOVFF  3DD,847
05D70:  MOVLW  37
05D72:  MOVLB  8
05D74:  MOVWF  x48
05D76:  MOVLB  0
05D78:  CALL   1F34
05D7C:  MOVLW  20
05D7E:  MOVLB  8
05D80:  MOVWF  x49
05D82:  MOVLB  0
05D84:  CALL   16C2
05D88:  MOVLB  3
05D8A:  INCF   xD8,F
05D8C:  MOVLB  0
05D8E:  GOTO   5D22
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
05D92:  MOVLB  3
05D94:  RLCF   xD4,W
05D96:  MOVWF  02
05D98:  RLCF   xD5,W
05D9A:  MOVWF  03
05D9C:  RLCF   02,F
05D9E:  RLCF   03,F
05DA0:  RLCF   02,F
05DA2:  RLCF   03,F
05DA4:  RLCF   02,F
05DA6:  RLCF   03,F
05DA8:  RLCF   02,F
05DAA:  RLCF   03,F
05DAC:  RLCF   02,F
05DAE:  RLCF   03,F
05DB0:  MOVLW  C0
05DB2:  ANDWF  02,F
05DB4:  MOVF   02,W
05DB6:  ADDWF  x8E,W
05DB8:  MOVWF  xD9
05DBA:  MOVF   03,W
05DBC:  ADDWFC x8F,W
05DBE:  MOVWF  xDA
05DC0:  MOVLW  00
05DC2:  ADDWFC x90,W
05DC4:  MOVWF  xDB
05DC6:  MOVLW  00
05DC8:  ADDWFC x91,W
05DCA:  MOVWF  xDC
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
05DCC:  MOVFF  E1,82F
05DD0:  MOVFF  E0,82E
05DD4:  MOVFF  DF,82D
05DD8:  MOVFF  DE,82C
05DDC:  MOVFF  3DC,833
05DE0:  MOVFF  3DB,832
05DE4:  MOVFF  3DA,831
05DE8:  MOVFF  3D9,830
05DEC:  MOVLW  03
05DEE:  MOVLB  8
05DF0:  MOVWF  x35
05DF2:  MOVLW  94
05DF4:  MOVWF  x34
05DF6:  CLRF   x37
05DF8:  MOVLW  40
05DFA:  MOVWF  x36
05DFC:  MOVLB  0
05DFE:  CALL   2E7C
05E02:  MOVLB  3
05E04:  INCF   xD4,F
05E06:  BTFSC  FD8.2
05E08:  INCF   xD5,F
05E0A:  MOVLB  0
05E0C:  GOTO   5CD2
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
05E10:  MOVFF  38D,492
05E14:  MOVLW  02
05E16:  MOVLB  4
05E18:  MOVWF  x93
05E1A:  MOVLB  0
05E1C:  CALL   3812
....................    fprintf(PC, "\r\n");
05E20:  MOVLW  0D
05E22:  MOVLB  8
05E24:  MOVWF  x49
05E26:  MOVLB  0
05E28:  CALL   16C2
05E2C:  MOVLW  0A
05E2E:  MOVLB  8
05E30:  MOVWF  x49
05E32:  MOVLB  0
05E34:  CALL   16C2
....................    fprintf(PC, "End Flash Write Demo\r\n");
05E38:  MOVLW  24
05E3A:  MOVWF  FF6
05E3C:  MOVLW  10
05E3E:  MOVWF  FF7
05E40:  MOVLW  00
05E42:  MOVWF  FF8
05E44:  CALL   1714
05E48:  GOTO   69C4 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
05E7C:  MOVLW  3C
05E7E:  MOVWF  FF6
05E80:  MOVLW  10
05E82:  MOVWF  FF7
05E84:  MOVLW  00
05E86:  MOVWF  FF8
05E88:  CALL   1714
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
05E8C:  MOVLB  3
05E8E:  MOVF   x8B,W
05E90:  MOVWF  FE9
05E92:  MOVF   x8C,W
05E94:  MOVWF  FEA
05E96:  MOVFF  FEF,491
05E9A:  MOVFF  491,492
05E9E:  MOVLW  01
05EA0:  MOVLB  4
05EA2:  MOVWF  x93
05EA4:  MOVLB  0
05EA6:  CALL   3812
....................    flash_setting(mis_fm);
05EAA:  MOVFF  E1,494
05EAE:  MOVFF  E0,493
05EB2:  MOVFF  DF,492
05EB6:  MOVFF  DE,491
05EBA:  CALL   5E4C
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
05EBE:  MOVLB  3
05EC0:  CLRF   x90
05EC2:  CLRF   x8F
05EC4:  CLRF   x8E
05EC6:  CLRF   x8D
05EC8:  MOVLW  01
05ECA:  MOVWF  x91
05ECC:  MOVLW  02
05ECE:  MOVWF  x92
05ED0:  MOVLW  03
05ED2:  MOVWF  x93
05ED4:  MOVLW  04
05ED6:  MOVWF  x94
05ED8:  CLRF   x95
05EDA:  CLRF   x96
05EDC:  CLRF   x97
05EDE:  CLRF   x98
05EE0:  CLRF   x99
05EE2:  CLRF   x9A
05EE4:  CLRF   x9B
05EE6:  CLRF   x9C
05EE8:  CLRF   x9D
05EEA:  CLRF   x9E
05EEC:  CLRF   x9F
05EEE:  CLRF   xA0
05EF0:  CLRF   xA1
05EF2:  CLRF   xA2
05EF4:  CLRF   xA3
05EF6:  CLRF   xA4
05EF8:  CLRF   xA5
05EFA:  CLRF   xA6
05EFC:  CLRF   xA7
05EFE:  CLRF   xA8
05F00:  CLRF   xA9
05F02:  CLRF   xAA
05F04:  CLRF   xAB
05F06:  CLRF   xAC
05F08:  CLRF   xAD
05F0A:  CLRF   xAE
05F0C:  CLRF   xAF
05F0E:  CLRF   xB0
05F10:  CLRF   xB1
05F12:  CLRF   xB2
05F14:  CLRF   xB3
05F16:  CLRF   xB4
05F18:  CLRF   xB5
05F1A:  CLRF   xB6
05F1C:  CLRF   xB7
05F1E:  CLRF   xB8
05F20:  CLRF   xB9
05F22:  CLRF   xBA
05F24:  CLRF   xBB
05F26:  CLRF   xBC
05F28:  CLRF   xBD
05F2A:  CLRF   xBE
05F2C:  CLRF   xBF
05F2E:  CLRF   xC0
05F30:  CLRF   xC1
05F32:  CLRF   xC2
05F34:  CLRF   xC3
05F36:  CLRF   xC4
05F38:  CLRF   xC5
05F3A:  CLRF   xC6
05F3C:  CLRF   xC7
05F3E:  CLRF   xC8
05F40:  CLRF   xC9
05F42:  CLRF   xCA
05F44:  CLRF   xCB
05F46:  CLRF   xCC
05F48:  CLRF   xCD
05F4A:  CLRF   xCE
05F4C:  CLRF   xCF
05F4E:  CLRF   xD0
05F50:  CLRF   xD1
05F52:  CLRF   xD2
05F54:  CLRF   xD3
05F56:  CLRF   xD4
05F58:  CLRF   xD5
05F5A:  CLRF   xD6
05F5C:  CLRF   xD7
05F5E:  CLRF   xD8
05F60:  CLRF   xD9
05F62:  CLRF   xDA
05F64:  CLRF   xDB
05F66:  CLRF   xDC
05F68:  CLRF   xDD
05F6A:  CLRF   xDE
05F6C:  CLRF   xDF
05F6E:  CLRF   xE0
05F70:  CLRF   xE1
05F72:  CLRF   xE2
05F74:  CLRF   xE3
05F76:  CLRF   xE4
05F78:  CLRF   xE5
05F7A:  CLRF   xE6
05F7C:  CLRF   xE7
05F7E:  CLRF   xE8
05F80:  CLRF   xE9
05F82:  CLRF   xEA
05F84:  CLRF   xEB
05F86:  CLRF   xEC
05F88:  CLRF   xED
05F8A:  CLRF   xEE
05F8C:  CLRF   xEF
05F8E:  CLRF   xF0
05F90:  CLRF   xF1
05F92:  CLRF   xF2
05F94:  CLRF   xF3
05F96:  CLRF   xF4
05F98:  CLRF   xF5
05F9A:  CLRF   xF6
05F9C:  CLRF   xF7
05F9E:  CLRF   xF8
05FA0:  CLRF   xF9
05FA2:  CLRF   xFA
05FA4:  CLRF   xFB
05FA6:  CLRF   xFC
05FA8:  CLRF   xFD
05FAA:  CLRF   xFE
05FAC:  CLRF   xFF
05FAE:  MOVLB  4
05FB0:  CLRF   x00
05FB2:  CLRF   x01
05FB4:  CLRF   x02
05FB6:  CLRF   x03
05FB8:  CLRF   x04
05FBA:  CLRF   x05
05FBC:  CLRF   x06
05FBE:  CLRF   x07
05FC0:  CLRF   x08
05FC2:  CLRF   x09
05FC4:  CLRF   x0A
05FC6:  CLRF   x0B
05FC8:  CLRF   x0C
05FCA:  CLRF   x0D
05FCC:  CLRF   x0E
05FCE:  CLRF   x0F
05FD0:  CLRF   x10
05FD2:  CLRF   x11
05FD4:  CLRF   x12
05FD6:  CLRF   x13
05FD8:  CLRF   x14
05FDA:  CLRF   x15
05FDC:  CLRF   x16
05FDE:  CLRF   x17
05FE0:  CLRF   x18
05FE2:  CLRF   x19
05FE4:  CLRF   x1A
05FE6:  CLRF   x1B
05FE8:  CLRF   x1C
05FEA:  CLRF   x1D
05FEC:  CLRF   x1E
05FEE:  CLRF   x1F
05FF0:  CLRF   x20
05FF2:  CLRF   x21
05FF4:  CLRF   x22
05FF6:  CLRF   x23
05FF8:  CLRF   x24
05FFA:  CLRF   x25
05FFC:  CLRF   x26
05FFE:  CLRF   x27
06000:  CLRF   x28
06002:  CLRF   x29
06004:  CLRF   x2A
06006:  CLRF   x2B
06008:  CLRF   x2C
0600A:  CLRF   x2D
0600C:  CLRF   x2E
0600E:  CLRF   x2F
06010:  CLRF   x30
06012:  CLRF   x31
06014:  CLRF   x32
06016:  CLRF   x33
06018:  CLRF   x34
0601A:  CLRF   x35
0601C:  CLRF   x36
0601E:  CLRF   x37
06020:  CLRF   x38
06022:  CLRF   x39
06024:  CLRF   x3A
06026:  CLRF   x3B
06028:  CLRF   x3C
0602A:  CLRF   x3D
0602C:  CLRF   x3E
0602E:  CLRF   x3F
06030:  CLRF   x40
06032:  CLRF   x41
06034:  CLRF   x42
06036:  CLRF   x43
06038:  CLRF   x44
0603A:  CLRF   x45
0603C:  CLRF   x46
0603E:  CLRF   x47
06040:  CLRF   x48
06042:  CLRF   x49
06044:  CLRF   x4A
06046:  CLRF   x4B
06048:  CLRF   x4C
0604A:  CLRF   x4D
0604C:  CLRF   x4E
0604E:  CLRF   x4F
06050:  CLRF   x50
06052:  CLRF   x51
06054:  CLRF   x52
06056:  CLRF   x53
06058:  CLRF   x54
0605A:  CLRF   x55
0605C:  CLRF   x56
0605E:  CLRF   x57
06060:  CLRF   x58
06062:  CLRF   x59
06064:  CLRF   x5A
06066:  CLRF   x5B
06068:  CLRF   x5C
0606A:  CLRF   x5D
0606C:  CLRF   x5E
0606E:  CLRF   x5F
06070:  CLRF   x60
06072:  CLRF   x61
06074:  CLRF   x62
06076:  CLRF   x63
06078:  CLRF   x64
0607A:  CLRF   x65
0607C:  CLRF   x66
0607E:  CLRF   x67
06080:  CLRF   x68
06082:  CLRF   x69
06084:  CLRF   x6A
06086:  CLRF   x6B
06088:  CLRF   x6C
0608A:  CLRF   x6D
0608C:  CLRF   x6E
0608E:  CLRF   x6F
06090:  CLRF   x70
06092:  CLRF   x71
06094:  CLRF   x72
06096:  CLRF   x73
06098:  CLRF   x74
0609A:  CLRF   x75
0609C:  CLRF   x76
0609E:  CLRF   x77
060A0:  CLRF   x78
060A2:  CLRF   x79
060A4:  CLRF   x7A
060A6:  CLRF   x7B
060A8:  CLRF   x7C
060AA:  CLRF   x7D
060AC:  CLRF   x7E
060AE:  CLRF   x7F
060B0:  CLRF   x80
060B2:  CLRF   x81
060B4:  CLRF   x82
060B6:  CLRF   x83
060B8:  CLRF   x84
060BA:  CLRF   x85
060BC:  CLRF   x86
060BE:  CLRF   x87
060C0:  CLRF   x88
060C2:  CLRF   x89
060C4:  CLRF   x8A
060C6:  CLRF   x8B
060C8:  CLRF   x8C
060CA:  CLRF   x8D
060CC:  CLRF   x8E
060CE:  CLRF   x8F
060D0:  CLRF   x90
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
060D2:  MOVFF  E1,82F
060D6:  MOVFF  E0,82E
060DA:  MOVFF  DF,82D
060DE:  MOVFF  DE,82C
060E2:  MOVFF  390,833
060E6:  MOVFF  38F,832
060EA:  MOVFF  38E,831
060EE:  MOVFF  38D,830
060F2:  MOVLW  03
060F4:  MOVLB  8
060F6:  MOVWF  x35
060F8:  MOVLW  91
060FA:  MOVWF  x34
060FC:  MOVLW  01
060FE:  MOVWF  x37
06100:  CLRF   x36
06102:  MOVLB  0
06104:  CALL   2E7C
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06108:  MOVLB  3
0610A:  MOVF   x8B,W
0610C:  MOVWF  FE9
0610E:  MOVF   x8C,W
06110:  MOVWF  FEA
06112:  MOVFF  FEF,491
06116:  MOVFF  491,492
0611A:  MOVLW  02
0611C:  MOVLB  4
0611E:  MOVWF  x93
06120:  MOVLB  0
06122:  CALL   3812
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06126:  MOVLW  62
06128:  MOVWF  FF6
0612A:  MOVLW  10
0612C:  MOVWF  FF7
0612E:  MOVLW  00
06130:  MOVWF  FF8
06132:  CALL   1714
06136:  GOTO   69D4 (RETURN)
.................... }
.................... 
.................... void mode_misf_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
0613A:  MOVLW  86
0613C:  MOVWF  FF6
0613E:  MOVLW  10
06140:  MOVWF  FF7
06142:  MOVLW  00
06144:  MOVWF  FF8
06146:  CALL   1714
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
0614A:  MOVLB  3
0614C:  MOVF   x8B,W
0614E:  MOVWF  FE9
06150:  MOVF   x8C,W
06152:  MOVWF  FEA
06154:  MOVFF  FEF,3DD
06158:  MOVFF  3DD,492
0615C:  MOVLW  01
0615E:  MOVLB  4
06160:  MOVWF  x93
06162:  MOVLB  0
06164:  CALL   3812
....................    FLASH_PARAM flash_param = {0};
06168:  MOVLB  3
0616A:  CLRF   x8D
0616C:  CLRF   x8E
0616E:  CLRF   x8F
06170:  CLRF   x90
06172:  CLRF   x91
06174:  CLRF   x92
06176:  CLRF   x93
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
06178:  MOVF   x8B,W
0617A:  MOVWF  FE9
0617C:  MOVF   x8C,W
0617E:  MOVWF  FEA
06180:  MOVFF  FEF,38D
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
06184:  MOVLW  01
06186:  ADDWF  x8B,W
06188:  MOVWF  FE9
0618A:  MOVLW  00
0618C:  ADDWFC x8C,W
0618E:  MOVWF  FEA
06190:  MOVF   FEF,W
06192:  CLRF   xE0
06194:  CLRF   xDF
06196:  CLRF   xDE
06198:  MOVWF  xDD
0619A:  MOVFF  3DD,3E0
0619E:  CLRF   xDD
061A0:  CLRF   xDE
061A2:  CLRF   xDF
061A4:  MOVLW  02
061A6:  ADDWF  x8B,W
061A8:  MOVWF  FE9
061AA:  MOVLW  00
061AC:  ADDWFC x8C,W
061AE:  MOVWF  FEA
061B0:  MOVF   FEF,W
061B2:  CLRF   xE5
061B4:  CLRF   xE4
061B6:  CLRF   xE3
061B8:  MOVWF  xE2
061BA:  MOVFF  3E3,03
061BE:  MOVFF  3E2,02
061C2:  CLRF   00
061C4:  CLRF   01
061C6:  MOVF   00,W
061C8:  IORWF  xDD,F
061CA:  MOVF   01,W
061CC:  IORWF  xDE,F
061CE:  MOVF   02,W
061D0:  IORWF  xDF,F
061D2:  MOVF   03,W
061D4:  IORWF  xE0,F
061D6:  MOVLW  03
061D8:  ADDWF  x8B,W
061DA:  MOVWF  FE9
061DC:  MOVLW  00
061DE:  ADDWFC x8C,W
061E0:  MOVWF  FEA
061E2:  MOVF   FEF,W
061E4:  CLRF   xE5
061E6:  CLRF   xE4
061E8:  CLRF   xE3
061EA:  MOVWF  xE2
061EC:  MOVFF  3E4,03
061F0:  MOVFF  3E3,02
061F4:  MOVFF  3E2,01
061F8:  CLRF   00
061FA:  MOVF   00,W
061FC:  IORWF  xDD,F
061FE:  MOVF   01,W
06200:  IORWF  xDE,F
06202:  MOVF   02,W
06204:  IORWF  xDF,F
06206:  MOVF   03,W
06208:  IORWF  xE0,F
0620A:  MOVLW  04
0620C:  ADDWF  x8B,W
0620E:  MOVWF  FE9
06210:  MOVLW  00
06212:  ADDWFC x8C,W
06214:  MOVWF  FEA
06216:  MOVF   FEF,W
06218:  MOVWF  00
0621A:  CLRF   01
0621C:  CLRF   02
0621E:  CLRF   03
06220:  MOVF   00,W
06222:  IORWF  xDD,W
06224:  MOVWF  x90
06226:  MOVF   01,W
06228:  IORWF  xDE,W
0622A:  MOVWF  x91
0622C:  MOVF   02,W
0622E:  IORWF  xDF,W
06230:  MOVWF  x92
06232:  MOVF   03,W
06234:  IORWF  xE0,W
06236:  MOVWF  x93
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
06238:  MOVLW  07
0623A:  ADDWF  x8B,W
0623C:  MOVWF  FE9
0623E:  MOVLW  00
06240:  ADDWFC x8C,W
06242:  MOVWF  FEA
06244:  MOVF   FEF,W
06246:  CLRF   xDE
06248:  MOVWF  xDD
0624A:  MOVFF  3DD,3DE
0624E:  CLRF   xDD
06250:  MOVLW  08
06252:  ADDWF  x8B,W
06254:  MOVWF  FE9
06256:  MOVLW  00
06258:  ADDWFC x8C,W
0625A:  MOVWF  FEA
0625C:  MOVF   FEF,W
0625E:  CLRF   03
06260:  IORWF  xDD,W
06262:  MOVWF  x8E
06264:  MOVF   03,W
06266:  IORWF  xDE,W
06268:  MOVWF  x8F
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
0626A:  MOVLW  9A
0626C:  MOVWF  FF6
0626E:  MOVLW  10
06270:  MOVWF  FF7
06272:  MOVLW  00
06274:  MOVWF  FF8
06276:  MOVLW  0C
06278:  MOVLB  7
0627A:  MOVWF  xEC
0627C:  MOVLB  0
0627E:  CALL   1744
06282:  MOVFF  38D,847
06286:  MOVLW  37
06288:  MOVLB  8
0628A:  MOVWF  x48
0628C:  MOVLB  0
0628E:  CALL   1F34
06292:  MOVLW  0D
06294:  MOVLB  8
06296:  MOVWF  x49
06298:  MOVLB  0
0629A:  CALL   16C2
0629E:  MOVLW  0A
062A0:  MOVLB  8
062A2:  MOVWF  x49
062A4:  MOVLB  0
062A6:  CALL   16C2
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
062AA:  MOVLW  AE
062AC:  MOVWF  FF6
062AE:  MOVLW  10
062B0:  MOVWF  FF7
062B2:  MOVLW  00
062B4:  MOVWF  FF8
062B6:  MOVLW  0E
062B8:  MOVLB  7
062BA:  MOVWF  xEC
062BC:  MOVLB  0
062BE:  CALL   1744
062C2:  MOVFF  393,847
062C6:  MOVLW  37
062C8:  MOVLB  8
062CA:  MOVWF  x48
062CC:  MOVLB  0
062CE:  CALL   1F34
062D2:  MOVFF  392,847
062D6:  MOVLW  37
062D8:  MOVLB  8
062DA:  MOVWF  x48
062DC:  MOVLB  0
062DE:  CALL   1F34
062E2:  MOVFF  391,847
062E6:  MOVLW  37
062E8:  MOVLB  8
062EA:  MOVWF  x48
062EC:  MOVLB  0
062EE:  CALL   1F34
062F2:  MOVFF  390,847
062F6:  MOVLW  37
062F8:  MOVLB  8
062FA:  MOVWF  x48
062FC:  MOVLB  0
062FE:  CALL   1F34
06302:  MOVLW  0D
06304:  MOVLB  8
06306:  MOVWF  x49
06308:  MOVLB  0
0630A:  CALL   16C2
0630E:  MOVLW  0A
06310:  MOVLB  8
06312:  MOVWF  x49
06314:  MOVLB  0
06316:  CALL   16C2
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
0631A:  MOVLW  C4
0631C:  MOVWF  FF6
0631E:  MOVLW  10
06320:  MOVWF  FF7
06322:  MOVLW  00
06324:  MOVWF  FF8
06326:  MOVLW  0E
06328:  MOVLB  7
0632A:  MOVWF  xEC
0632C:  MOVLB  0
0632E:  CALL   1744
06332:  MOVFF  38F,847
06336:  MOVLW  37
06338:  MOVLB  8
0633A:  MOVWF  x48
0633C:  MOVLB  0
0633E:  CALL   1F34
06342:  MOVFF  38E,847
06346:  MOVLW  37
06348:  MOVLB  8
0634A:  MOVWF  x48
0634C:  MOVLB  0
0634E:  CALL   1F34
06352:  MOVLW  0D
06354:  MOVLB  8
06356:  MOVWF  x49
06358:  MOVLB  0
0635A:  CALL   16C2
0635E:  MOVLW  0A
06360:  MOVLB  8
06362:  MOVWF  x49
06364:  MOVLB  0
06366:  CALL   16C2
....................    
....................    piclog_make(flash_param.id, 0x00);
0636A:  MOVFF  38D,492
0636E:  MOVLB  4
06370:  CLRF   x93
06372:  MOVLB  0
06374:  CALL   3812
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06378:  MOVLB  3
0637A:  CLRF   x94
0637C:  CLRF   x95
0637E:  CLRF   x96
06380:  CLRF   x97
06382:  CLRF   x98
06384:  CLRF   x99
06386:  CLRF   x9A
06388:  CLRF   x9B
0638A:  CLRF   x9C
0638C:  CLRF   x9D
0638E:  CLRF   x9E
06390:  CLRF   x9F
06392:  CLRF   xA0
06394:  CLRF   xA1
06396:  CLRF   xA2
06398:  CLRF   xA3
0639A:  CLRF   xA4
0639C:  CLRF   xA5
0639E:  CLRF   xA6
063A0:  CLRF   xA7
063A2:  CLRF   xA8
063A4:  CLRF   xA9
063A6:  CLRF   xAA
063A8:  CLRF   xAB
063AA:  CLRF   xAC
063AC:  CLRF   xAD
063AE:  CLRF   xAE
063B0:  CLRF   xAF
063B2:  CLRF   xB0
063B4:  CLRF   xB1
063B6:  CLRF   xB2
063B8:  CLRF   xB3
063BA:  CLRF   xB4
063BC:  CLRF   xB5
063BE:  CLRF   xB6
063C0:  CLRF   xB7
063C2:  CLRF   xB8
063C4:  CLRF   xB9
063C6:  CLRF   xBA
063C8:  CLRF   xBB
063CA:  CLRF   xBC
063CC:  CLRF   xBD
063CE:  CLRF   xBE
063D0:  CLRF   xBF
063D2:  CLRF   xC0
063D4:  CLRF   xC1
063D6:  CLRF   xC2
063D8:  CLRF   xC3
063DA:  CLRF   xC4
063DC:  CLRF   xC5
063DE:  CLRF   xC6
063E0:  CLRF   xC7
063E2:  CLRF   xC8
063E4:  CLRF   xC9
063E6:  CLRF   xCA
063E8:  CLRF   xCB
063EA:  CLRF   xCC
063EC:  CLRF   xCD
063EE:  CLRF   xCE
063F0:  CLRF   xCF
063F2:  CLRF   xD0
063F4:  CLRF   xD1
063F6:  CLRF   xD2
063F8:  CLRF   xD3
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
063FA:  MOVLW  DA
063FC:  MOVWF  FF6
063FE:  MOVLW  10
06400:  MOVWF  FF7
06402:  MOVLW  00
06404:  MOVWF  FF8
06406:  MOVLB  0
06408:  CALL   1714
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
0640C:  MOVFF  E1,82F
06410:  MOVFF  E0,82E
06414:  MOVFF  DF,82D
06418:  MOVFF  DE,82C
0641C:  CALL   1FA4
06420:  MOVF   01,F
06422:  BTFSS  FD8.2
06424:  GOTO   643C
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06428:  MOVLW  E6
0642A:  MOVWF  FF6
0642C:  MOVLW  10
0642E:  MOVWF  FF7
06430:  MOVLW  00
06432:  MOVWF  FF8
06434:  CALL   1714
....................       return;
06438:  GOTO   65C4
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
0643C:  MOVLB  3
0643E:  CLRF   xDB
06440:  CLRF   xDA
06442:  CLRF   xD9
06444:  CLRF   xD8
06446:  MOVLB  0
06448:  MOVLB  3
0644A:  MOVF   xDB,F
0644C:  BTFSC  FD8.2
0644E:  BRA    6456
06450:  MOVLB  0
06452:  GOTO   65A4
06456:  MOVLB  0
06458:  MOVLB  3
0645A:  MOVF   xDA,F
0645C:  BTFSC  FD8.2
0645E:  BRA    6466
06460:  MOVLB  0
06462:  GOTO   65A4
06466:  MOVLB  0
06468:  MOVLB  3
0646A:  MOVF   xD9,W
0646C:  SUBWF  x8F,W
0646E:  BTFSC  FD8.0
06470:  BRA    6478
06472:  MOVLB  0
06474:  GOTO   65A4
06478:  MOVLB  0
0647A:  BTFSS  FD8.2
0647C:  GOTO   6492
06480:  MOVLB  3
06482:  MOVF   x8E,W
06484:  SUBWF  xD8,W
06486:  BTFSS  FD8.0
06488:  BRA    6490
0648A:  MOVLB  0
0648C:  GOTO   65A4
06490:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06492:  MOVLB  3
06494:  RLCF   xD8,W
06496:  MOVWF  00
06498:  RLCF   xD9,W
0649A:  MOVWF  01
0649C:  RLCF   xDA,W
0649E:  MOVWF  02
064A0:  RLCF   xDB,W
064A2:  MOVWF  03
064A4:  RLCF   00,F
064A6:  RLCF   01,F
064A8:  RLCF   02,F
064AA:  RLCF   03,F
064AC:  RLCF   00,F
064AE:  RLCF   01,F
064B0:  RLCF   02,F
064B2:  RLCF   03,F
064B4:  RLCF   00,F
064B6:  RLCF   01,F
064B8:  RLCF   02,F
064BA:  RLCF   03,F
064BC:  RLCF   00,F
064BE:  RLCF   01,F
064C0:  RLCF   02,F
064C2:  RLCF   03,F
064C4:  RLCF   00,F
064C6:  RLCF   01,F
064C8:  RLCF   02,F
064CA:  RLCF   03,F
064CC:  MOVLW  C0
064CE:  ANDWF  00,F
064D0:  MOVF   00,W
064D2:  ADDWF  x90,W
064D4:  MOVWF  xD4
064D6:  MOVF   01,W
064D8:  ADDWFC x91,W
064DA:  MOVWF  xD5
064DC:  MOVF   02,W
064DE:  ADDWFC x92,W
064E0:  MOVWF  xD6
064E2:  MOVF   03,W
064E4:  ADDWFC x93,W
064E6:  MOVWF  xD7
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
064E8:  MOVFF  E1,418
064EC:  MOVFF  E0,417
064F0:  MOVFF  DF,416
064F4:  MOVFF  DE,415
064F8:  MOVFF  3D7,41C
064FC:  MOVFF  3D6,41B
06500:  MOVFF  3D5,41A
06504:  MOVFF  3D4,419
06508:  MOVLW  03
0650A:  MOVLB  4
0650C:  MOVWF  x1E
0650E:  MOVLW  94
06510:  MOVWF  x1D
06512:  CLRF   x22
06514:  CLRF   x21
06516:  CLRF   x20
06518:  MOVLW  40
0651A:  MOVWF  x1F
0651C:  MOVLB  0
0651E:  CALL   20DC
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06522:  MOVLB  3
06524:  CLRF   xDC
06526:  MOVLB  0
06528:  MOVLB  3
0652A:  MOVF   xDC,W
0652C:  SUBLW  3F
0652E:  BTFSC  FD8.0
06530:  BRA    6538
06532:  MOVLB  0
06534:  GOTO   6574
06538:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
0653A:  CLRF   03
0653C:  MOVLB  3
0653E:  MOVF   xDC,W
06540:  ADDLW  94
06542:  MOVWF  FE9
06544:  MOVLW  03
06546:  ADDWFC 03,W
06548:  MOVWF  FEA
0654A:  MOVFF  FEF,3DD
0654E:  MOVFF  3DD,847
06552:  MOVLW  37
06554:  MOVLB  8
06556:  MOVWF  x48
06558:  MOVLB  0
0655A:  CALL   1F34
0655E:  MOVLW  20
06560:  MOVLB  8
06562:  MOVWF  x49
06564:  MOVLB  0
06566:  CALL   16C2
0656A:  MOVLB  3
0656C:  INCF   xDC,F
0656E:  MOVLB  0
06570:  GOTO   6528
....................       }
....................       fprintf(PC,"\r\n");
06574:  MOVLW  0D
06576:  MOVLB  8
06578:  MOVWF  x49
0657A:  MOVLB  0
0657C:  CALL   16C2
06580:  MOVLW  0A
06582:  MOVLB  8
06584:  MOVWF  x49
06586:  MOVLB  0
06588:  CALL   16C2
0658C:  MOVLW  01
0658E:  MOVLB  3
06590:  ADDWF  xD8,F
06592:  BTFSC  FD8.0
06594:  INCF   xD9,F
06596:  BTFSC  FD8.2
06598:  INCF   xDA,F
0659A:  BTFSC  FD8.2
0659C:  INCF   xDB,F
0659E:  MOVLB  0
065A0:  GOTO   6448
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
065A4:  MOVFF  38D,492
065A8:  MOVLW  02
065AA:  MOVLB  4
065AC:  MOVWF  x93
065AE:  MOVLB  0
065B0:  CALL   3812
....................    fprintf(PC, "End Flash Read\r\n");
065B4:  MOVLW  08
065B6:  MOVWF  FF6
065B8:  MOVLW  11
065BA:  MOVWF  FF7
065BC:  MOVLW  00
065BE:  MOVWF  FF8
065C0:  CALL   1714
065C4:  GOTO   69E4 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
065C8:  MOVLW  1A
065CA:  MOVWF  FF6
065CC:  MOVLW  11
065CE:  MOVWF  FF7
065D0:  MOVLW  00
065D2:  MOVWF  FF8
065D4:  CALL   1714
....................    flash_setting(mis_fm);
065D8:  MOVFF  E1,494
065DC:  MOVFF  E0,493
065E0:  MOVFF  DF,492
065E4:  MOVFF  DE,491
065E8:  CALL   5E4C
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
065EC:  MOVLB  3
065EE:  CLRF   x90
065F0:  CLRF   x8F
065F2:  CLRF   x8E
065F4:  CLRF   x8D
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
065F6:  MOVFF  E1,418
065FA:  MOVFF  E0,417
065FE:  MOVFF  DF,416
06602:  MOVFF  DE,415
06606:  MOVFF  390,41C
0660A:  MOVFF  38F,41B
0660E:  MOVFF  38E,41A
06612:  MOVFF  38D,419
06616:  MOVLW  03
06618:  MOVLB  4
0661A:  MOVWF  x1E
0661C:  MOVLW  91
0661E:  MOVWF  x1D
06620:  CLRF   x22
06622:  CLRF   x21
06624:  CLRF   x20
06626:  MOVLW  04
06628:  MOVWF  x1F
0662A:  MOVLB  0
0662C:  CALL   20DC
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
06630:  MOVLW  36
06632:  MOVWF  FF6
06634:  MOVLW  11
06636:  MOVWF  FF7
06638:  MOVLW  00
0663A:  MOVWF  FF8
0663C:  MOVLW  0B
0663E:  MOVLB  7
06640:  MOVWF  xEC
06642:  MOVLB  0
06644:  CALL   1744
06648:  MOVFF  391,847
0664C:  MOVLW  37
0664E:  MOVLB  8
06650:  MOVWF  x48
06652:  MOVLB  0
06654:  CALL   1F34
06658:  MOVLW  20
0665A:  MOVLB  8
0665C:  MOVWF  x49
0665E:  MOVLB  0
06660:  CALL   16C2
06664:  MOVFF  392,847
06668:  MOVLW  37
0666A:  MOVLB  8
0666C:  MOVWF  x48
0666E:  MOVLB  0
06670:  CALL   1F34
06674:  MOVLW  20
06676:  MOVLB  8
06678:  MOVWF  x49
0667A:  MOVLB  0
0667C:  CALL   16C2
06680:  MOVFF  393,847
06684:  MOVLW  37
06686:  MOVLB  8
06688:  MOVWF  x48
0668A:  MOVLB  0
0668C:  CALL   1F34
06690:  MOVLW  20
06692:  MOVLB  8
06694:  MOVWF  x49
06696:  MOVLB  0
06698:  CALL   16C2
0669C:  MOVFF  394,847
066A0:  MOVLW  37
066A2:  MOVLB  8
066A4:  MOVWF  x48
066A6:  MOVLB  0
066A8:  CALL   1F34
066AC:  MOVLW  0D
066AE:  MOVLB  8
066B0:  MOVWF  x49
066B2:  MOVLB  0
066B4:  CALL   16C2
066B8:  MOVLW  0A
066BA:  MOVLB  8
066BC:  MOVWF  x49
066BE:  MOVLB  0
066C0:  CALL   16C2
....................    fprintf(PC, "End Flash Read Address\r\n");
066C4:  MOVLW  58
066C6:  MOVWF  FF6
066C8:  MOVLW  11
066CA:  MOVWF  FF7
066CC:  MOVLW  00
066CE:  MOVWF  FF8
066D0:  CALL   1714
066D4:  GOTO   69F4 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
067EC:  MOVLW  72
067EE:  MOVWF  FF6
067F0:  MOVLW  11
067F2:  MOVWF  FF7
067F4:  MOVLW  00
067F6:  MOVWF  FF8
067F8:  CALL   1714
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
067FC:  MOVLB  3
067FE:  MOVF   x8B,W
06800:  MOVWF  FE9
06802:  MOVF   x8C,W
06804:  MOVWF  FEA
06806:  MOVFF  FEF,38D
0680A:  MOVFF  38D,492
0680E:  MOVLW  01
06810:  MOVLB  4
06812:  MOVWF  x93
06814:  MOVLB  0
06816:  CALL   3812
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
0681A:  MOVFF  38C,38E
0681E:  MOVFF  38B,38D
06822:  CALL   550E
....................    mode_misf_address_reset(parameter); // Reset the address area
06826:  MOVFF  38C,38E
0682A:  MOVFF  38B,38D
0682E:  GOTO   66D8
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
06832:  MOVLW  90
06834:  MOVWF  FF6
06836:  MOVLW  11
06838:  MOVWF  FF7
0683A:  MOVLW  00
0683C:  MOVWF  FF8
0683E:  CALL   1714
06842:  GOTO   6A04 (RETURN)
.................... }
.................... 
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
....................    misf_init(); // Update the address area after writing
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Address Reset\r\n");
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
....................    flash_setting(mis_fm);
....................    flash_setting(smf);
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
....................    write_data_bytes(smf, dest_address, read_data, 256);
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
....................    flash_setting(smf);
....................    unsigned int32 erase_address = 0x00000000; // Example address
....................    sector_erase(smf, erase_address); // Erase the sector
....................    fprintf(PC, "End Flash SMF Erase\r\n");
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
066D8:  MOVLW  7A
066DA:  MOVWF  FF6
066DC:  MOVLW  12
066DE:  MOVWF  FF7
066E0:  MOVLW  00
066E2:  MOVWF  FF8
066E4:  CALL   1714
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
066E8:  MOVLB  3
066EA:  MOVF   x8D,W
066EC:  MOVWF  FE9
066EE:  MOVF   x8E,W
066F0:  MOVWF  FEA
066F2:  MOVFF  FEF,3CF
066F6:  MOVFF  3CF,492
066FA:  MOVLW  01
066FC:  MOVLB  4
066FE:  MOVWF  x93
06700:  MOVLB  0
06702:  CALL   3812
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
06706:  MOVLB  3
06708:  CLRF   x8F
0670A:  CLRF   x90
0670C:  CLRF   x91
0670E:  CLRF   x92
06710:  CLRF   x93
06712:  CLRF   x94
06714:  CLRF   x95
06716:  CLRF   x96
06718:  CLRF   x97
0671A:  CLRF   x98
0671C:  CLRF   x99
0671E:  CLRF   x9A
06720:  CLRF   x9B
06722:  CLRF   x9C
06724:  CLRF   x9D
06726:  CLRF   x9E
06728:  CLRF   x9F
0672A:  CLRF   xA0
0672C:  CLRF   xA1
0672E:  CLRF   xA2
06730:  CLRF   xA3
06732:  CLRF   xA4
06734:  CLRF   xA5
06736:  CLRF   xA6
06738:  CLRF   xA7
0673A:  CLRF   xA8
0673C:  CLRF   xA9
0673E:  CLRF   xAA
06740:  CLRF   xAB
06742:  CLRF   xAC
06744:  CLRF   xAD
06746:  CLRF   xAE
06748:  CLRF   xAF
0674A:  CLRF   xB0
0674C:  CLRF   xB1
0674E:  CLRF   xB2
06750:  CLRF   xB3
06752:  CLRF   xB4
06754:  CLRF   xB5
06756:  CLRF   xB6
06758:  CLRF   xB7
0675A:  CLRF   xB8
0675C:  CLRF   xB9
0675E:  CLRF   xBA
06760:  CLRF   xBB
06762:  CLRF   xBC
06764:  CLRF   xBD
06766:  CLRF   xBE
06768:  CLRF   xBF
0676A:  CLRF   xC0
0676C:  CLRF   xC1
0676E:  CLRF   xC2
06770:  CLRF   xC3
06772:  CLRF   xC4
06774:  CLRF   xC5
06776:  CLRF   xC6
06778:  CLRF   xC7
0677A:  CLRF   xC8
0677C:  CLRF   xC9
0677E:  CLRF   xCA
06780:  CLRF   xCB
06782:  CLRF   xCC
06784:  CLRF   xCD
06786:  CLRF   xCE
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
06788:  MOVFF  E1,82F
0678C:  MOVFF  E0,82E
06790:  MOVFF  DF,82D
06794:  MOVFF  DE,82C
06798:  MOVLB  8
0679A:  CLRF   x33
0679C:  CLRF   x32
0679E:  CLRF   x31
067A0:  CLRF   x30
067A2:  MOVLW  03
067A4:  MOVWF  x35
067A6:  MOVLW  8F
067A8:  MOVWF  x34
067AA:  CLRF   x37
067AC:  MOVLW  40
067AE:  MOVWF  x36
067B0:  MOVLB  0
067B2:  CALL   2E7C
....................    misf_init(); // Update the address area after writing
067B6:  CALL   22F4
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
067BA:  MOVLB  3
067BC:  MOVF   x8D,W
067BE:  MOVWF  FE9
067C0:  MOVF   x8E,W
067C2:  MOVWF  FEA
067C4:  MOVFF  FEF,3CF
067C8:  MOVFF  3CF,492
067CC:  MOVLW  02
067CE:  MOVLB  4
067D0:  MOVWF  x93
067D2:  MOVLB  0
067D4:  CALL   3812
....................    fprintf(PC, "End Flash Address Reset\r\n");
067D8:  MOVLW  96
067DA:  MOVWF  FF6
067DC:  MOVLW  12
067DE:  MOVWF  FF7
067E0:  MOVLW  00
067E2:  MOVWF  FF8
067E4:  CALL   1714
067E8:  GOTO   6832 (RETURN)
.................... }
.................... 
.................... #include "src/mmj_cigs_mode_mission.c"
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
....................  
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
....................  
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
04128:  MOVLW  B0
0412A:  MOVWF  FF6
0412C:  MOVLW  12
0412E:  MOVWF  FF7
04130:  MOVLW  00
04132:  MOVWF  FF8
04134:  CALL   1714
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
04138:  MOVLB  3
0413A:  MOVF   x8B,W
0413C:  MOVWF  FE9
0413E:  MOVF   x8C,W
04140:  MOVWF  FEA
04142:  MOVFF  FEF,38D
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
04146:  MOVLW  01
04148:  ADDWF  x8B,W
0414A:  MOVWF  FE9
0414C:  MOVLW  00
0414E:  ADDWFC x8C,W
04150:  MOVWF  FEA
04152:  MOVF   FEF,W
04154:  CLRF   x97
04156:  CLRF   x96
04158:  CLRF   x95
0415A:  MOVWF  x94
0415C:  MOVFF  394,397
04160:  CLRF   x94
04162:  CLRF   x95
04164:  CLRF   x96
04166:  MOVLW  02
04168:  ADDWF  x8B,W
0416A:  MOVWF  FE9
0416C:  MOVLW  00
0416E:  ADDWFC x8C,W
04170:  MOVWF  FEA
04172:  MOVF   FEF,W
04174:  CLRF   x9C
04176:  CLRF   x9B
04178:  CLRF   x9A
0417A:  MOVWF  x99
0417C:  MOVFF  39A,03
04180:  MOVFF  399,02
04184:  CLRF   00
04186:  CLRF   01
04188:  MOVF   00,W
0418A:  IORWF  x94,F
0418C:  MOVF   01,W
0418E:  IORWF  x95,F
04190:  MOVF   02,W
04192:  IORWF  x96,F
04194:  MOVF   03,W
04196:  IORWF  x97,F
04198:  MOVLW  03
0419A:  ADDWF  x8B,W
0419C:  MOVWF  FE9
0419E:  MOVLW  00
041A0:  ADDWFC x8C,W
041A2:  MOVWF  FEA
041A4:  MOVF   FEF,W
041A6:  CLRF   x9C
041A8:  CLRF   x9B
041AA:  CLRF   x9A
041AC:  MOVWF  x99
041AE:  MOVFF  39B,03
041B2:  MOVFF  39A,02
041B6:  MOVFF  399,01
041BA:  CLRF   00
041BC:  MOVF   00,W
041BE:  IORWF  x94,F
041C0:  MOVF   01,W
041C2:  IORWF  x95,F
041C4:  MOVF   02,W
041C6:  IORWF  x96,F
041C8:  MOVF   03,W
041CA:  IORWF  x97,F
041CC:  MOVLW  04
041CE:  ADDWF  x8B,W
041D0:  MOVWF  FE9
041D2:  MOVLW  00
041D4:  ADDWFC x8C,W
041D6:  MOVWF  FEA
041D8:  MOVF   FEF,W
041DA:  MOVWF  00
041DC:  CLRF   01
041DE:  CLRF   02
041E0:  CLRF   03
041E2:  MOVF   00,W
041E4:  IORWF  x94,W
041E6:  MOVWF  x8E
041E8:  MOVF   01,W
041EA:  IORWF  x95,W
041EC:  MOVWF  x8F
041EE:  MOVF   02,W
041F0:  IORWF  x96,W
041F2:  MOVWF  x90
041F4:  MOVF   03,W
041F6:  IORWF  x97,W
041F8:  MOVWF  x91
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
041FA:  MOVLW  05
041FC:  ADDWF  x8B,W
041FE:  MOVWF  FE9
04200:  MOVLW  00
04202:  ADDWFC x8C,W
04204:  MOVWF  FEA
04206:  MOVF   FEF,W
04208:  CLRF   x95
0420A:  MOVWF  x94
0420C:  MOVFF  394,395
04210:  CLRF   x94
04212:  MOVLW  06
04214:  ADDWF  x8B,W
04216:  MOVWF  FE9
04218:  MOVLW  00
0421A:  ADDWFC x8C,W
0421C:  MOVWF  FEA
0421E:  MOVF   FEF,W
04220:  CLRF   03
04222:  IORWF  x94,W
04224:  MOVWF  x92
04226:  MOVF   03,W
04228:  IORWF  x95,W
0422A:  MOVWF  x93
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
0422C:  MOVLW  C4
0422E:  MOVWF  FF6
04230:  MOVLW  12
04232:  MOVWF  FF7
04234:  MOVLW  00
04236:  MOVWF  FF8
04238:  MOVLW  0C
0423A:  MOVLB  7
0423C:  MOVWF  xEC
0423E:  MOVLB  0
04240:  CALL   1744
04244:  MOVFF  38D,847
04248:  MOVLW  37
0424A:  MOVLB  8
0424C:  MOVWF  x48
0424E:  MOVLB  0
04250:  CALL   1F34
04254:  MOVLW  0D
04256:  MOVLB  8
04258:  MOVWF  x49
0425A:  MOVLB  0
0425C:  CALL   16C2
04260:  MOVLW  0A
04262:  MOVLB  8
04264:  MOVWF  x49
04266:  MOVLB  0
04268:  CALL   16C2
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
0426C:  MOVLW  D8
0426E:  MOVWF  FF6
04270:  MOVLW  12
04272:  MOVWF  FF7
04274:  MOVLW  00
04276:  MOVWF  FF8
04278:  MOVLW  0E
0427A:  MOVLB  7
0427C:  MOVWF  xEC
0427E:  MOVLB  0
04280:  CALL   1744
04284:  MOVFF  391,847
04288:  MOVLW  37
0428A:  MOVLB  8
0428C:  MOVWF  x48
0428E:  MOVLB  0
04290:  CALL   1F34
04294:  MOVFF  390,847
04298:  MOVLW  37
0429A:  MOVLB  8
0429C:  MOVWF  x48
0429E:  MOVLB  0
042A0:  CALL   1F34
042A4:  MOVFF  38F,847
042A8:  MOVLW  37
042AA:  MOVLB  8
042AC:  MOVWF  x48
042AE:  MOVLB  0
042B0:  CALL   1F34
042B4:  MOVFF  38E,847
042B8:  MOVLW  37
042BA:  MOVLB  8
042BC:  MOVWF  x48
042BE:  MOVLB  0
042C0:  CALL   1F34
042C4:  MOVLW  0D
042C6:  MOVLB  8
042C8:  MOVWF  x49
042CA:  MOVLB  0
042CC:  CALL   16C2
042D0:  MOVLW  0A
042D2:  MOVLB  8
042D4:  MOVWF  x49
042D6:  MOVLB  0
042D8:  CALL   16C2
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
042DC:  MOVLW  EE
042DE:  MOVWF  FF6
042E0:  MOVLW  12
042E2:  MOVWF  FF7
042E4:  MOVLW  00
042E6:  MOVWF  FF8
042E8:  MOVLW  0E
042EA:  MOVLB  7
042EC:  MOVWF  xEC
042EE:  MOVLB  0
042F0:  CALL   1744
042F4:  MOVFF  393,847
042F8:  MOVLW  37
042FA:  MOVLB  8
042FC:  MOVWF  x48
042FE:  MOVLB  0
04300:  CALL   1F34
04304:  MOVFF  392,847
04308:  MOVLW  37
0430A:  MOVLB  8
0430C:  MOVWF  x48
0430E:  MOVLB  0
04310:  CALL   1F34
04314:  MOVLW  0D
04316:  MOVLB  8
04318:  MOVWF  x49
0431A:  MOVLB  0
0431C:  CALL   16C2
04320:  MOVLW  0A
04322:  MOVLB  8
04324:  MOVWF  x49
04326:  MOVLB  0
04328:  CALL   16C2
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
0432C:  MOVFF  38D,492
04330:  MOVLW  01
04332:  MOVLB  4
04334:  MOVWF  x93
04336:  MOVLB  0
04338:  CALL   3812
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0433C:  MOVFF  38D,492
04340:  MOVLW  02
04342:  MOVLB  4
04344:  MOVWF  x93
04346:  MOVLB  0
04348:  CALL   3812
....................    fprintf(PC, "End MODE DUMMY\r\n");
0434C:  MOVLW  04
0434E:  MOVWF  FF6
04350:  MOVLW  13
04352:  MOVWF  FF7
04354:  MOVLW  00
04356:  MOVWF  FF8
04358:  CALL   1714
0435C:  GOTO   692C (RETURN)
.................... }
.................... 
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
046A4:  MOVLW  01
046A6:  MOVLB  3
046A8:  ADDWF  x8B,W
046AA:  MOVWF  FE9
046AC:  MOVLW  00
046AE:  ADDWFC x8C,W
046B0:  MOVWF  FEA
046B2:  MOVFF  FEF,38D
.................... {
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
046B6:  MOVLW  16
046B8:  MOVWF  FF6
046BA:  MOVLW  13
046BC:  MOVWF  FF7
046BE:  MOVLW  00
046C0:  MOVWF  FF8
046C2:  MOVLB  0
046C4:  CALL   1714
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
046C8:  MOVLW  2C
046CA:  MOVWF  FF6
046CC:  MOVLW  13
046CE:  MOVWF  FF7
046D0:  MOVLW  00
046D2:  MOVWF  FF8
046D4:  MOVLW  0E
046D6:  MOVLB  7
046D8:  MOVWF  xEC
046DA:  MOVLB  0
046DC:  CALL   1744
046E0:  MOVFF  38D,7EC
046E4:  MOVLW  1B
046E6:  MOVLB  7
046E8:  MOVWF  xED
046EA:  MOVLB  0
046EC:  CALL   43A8
046F0:  MOVLW  0D
046F2:  MOVLB  8
046F4:  MOVWF  x49
046F6:  MOVLB  0
046F8:  CALL   16C2
046FC:  MOVLW  0A
046FE:  MOVLB  8
04700:  MOVWF  x49
04702:  MOVLB  0
04704:  CALL   16C2
....................    output_high(CONNECT_CIGS1);
04708:  BCF    F94.0
0470A:  BSF    F8B.0
....................    output_low(EN_NPWR); // Enable NPWR
0470C:  BCF    F94.7
0470E:  BCF    F8B.7
....................    unsigned int16 readdata;
.................... 
....................    test_sweep(uplinkcmd); // Call the sweep function with the measurement step
04710:  MOVFF  38B,390
04714:  GOTO   457C
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
04718:  MOVLW  40
0471A:  MOVWF  FF6
0471C:  MOVLW  13
0471E:  MOVWF  FF7
04720:  MOVLW  00
04722:  MOVWF  FF8
04724:  CALL   1714
....................    output_low(CONNECT_CIGS1);
04728:  BCF    F94.0
0472A:  BCF    F8B.0
....................    output_high(EN_NPWR); // Disable NPWR
0472C:  BCF    F94.7
0472E:  BSF    F8B.7
04730:  GOTO   693C (RETURN)
.................... }
.................... 
.................... // _________________ Oparation Mode ______________________
.................... 
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
048E2:  MOVLW  54
048E4:  MOVWF  FF6
048E6:  MOVLW  13
048E8:  MOVWF  FF7
048EA:  MOVLW  00
048EC:  MOVWF  FF8
048EE:  CALL   1714
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
048F2:  MOVLB  3
048F4:  MOVF   x8B,W
048F6:  MOVWF  FE9
048F8:  MOVF   x8C,W
048FA:  MOVWF  FEA
048FC:  MOVFF  FEF,38D
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
04900:  MOVF   x8B,W
04902:  MOVWF  FE9
04904:  MOVF   x8C,W
04906:  MOVWF  FEA
04908:  MOVFF  FEF,38F
0490C:  MOVFF  38F,492
04910:  MOVLW  01
04912:  MOVLB  4
04914:  MOVWF  x93
04916:  MOVLB  0
04918:  CALL   3812
....................    //adc_init();
....................    for (unsigned int8 count = 0; count < 40; count++)
0491C:  MOVLB  3
0491E:  CLRF   x8E
04920:  MOVLB  0
04922:  MOVLB  3
04924:  MOVF   x8E,W
04926:  SUBLW  27
04928:  BTFSC  FD8.0
0492A:  BRA    4932
0492C:  MOVLB  0
0492E:  GOTO   4A7A
04932:  MOVLB  0
....................    {
....................       // set DAC value
....................       //dac_write(count);
....................       delay_ms(100); // wait for the DAC to stabilize
04934:  MOVLW  64
04936:  MOVLB  8
04938:  MOVWF  x44
0493A:  MOVLB  0
0493C:  CALL   1694
.................... 
....................       // read CIGS voltage and current
....................       data_buffer[count*2] = ad7490_read(AD7490_VIN0); // read voltage at adc pin
04940:  BCF    FD8.0
04942:  MOVLB  3
04944:  RLCF   x8E,W
04946:  CLRF   03
04948:  MOVWF  02
0494A:  BCF    FD8.0
0494C:  RLCF   02,F
0494E:  RLCF   03,F
04950:  MOVF   02,W
04952:  ADDLW  F2
04954:  MOVWF  01
04956:  MOVLW  00
04958:  ADDWFC 03,F
0495A:  MOVF   01,W
0495C:  MOVWF  x8F
0495E:  MOVFF  03,390
04962:  MOVLB  7
04964:  CLRF   xEE
04966:  MOVLB  0
04968:  CALL   18BE
0496C:  MOVFF  390,FEA
04970:  MOVFF  38F,FE9
04974:  MOVFF  02,FEC
04978:  MOVF   FED,F
0497A:  MOVFF  01,FEF
....................       data_buffer[count*2+1] = ad7490_read(AD7490_VIN1); // read current at adc pin
0497E:  BCF    FD8.0
04980:  MOVLB  3
04982:  RLCF   x8E,W
04984:  ADDLW  01
04986:  CLRF   03
04988:  MOVWF  02
0498A:  BCF    FD8.0
0498C:  RLCF   02,F
0498E:  RLCF   03,F
04990:  MOVF   02,W
04992:  ADDLW  F2
04994:  MOVWF  01
04996:  MOVLW  00
04998:  ADDWFC 03,F
0499A:  MOVF   01,W
0499C:  MOVWF  x8F
0499E:  MOVFF  03,390
049A2:  MOVLW  01
049A4:  MOVLB  7
049A6:  MOVWF  xEE
049A8:  MOVLB  0
049AA:  CALL   18BE
049AE:  MOVFF  390,FEA
049B2:  MOVFF  38F,FE9
049B6:  MOVFF  02,FEC
049BA:  MOVF   FED,F
049BC:  MOVFF  01,FEF
.................... 
....................       // monitoring
....................       fprintf(PC, "%04LX,%04LX\r\n", data_buffer[count*2], data_buffer[count*2+1]);
049C0:  BCF    FD8.0
049C2:  MOVLB  3
049C4:  RLCF   x8E,W
049C6:  CLRF   03
049C8:  MOVWF  02
049CA:  BCF    FD8.0
049CC:  RLCF   02,F
049CE:  RLCF   03,F
049D0:  MOVF   02,W
049D2:  ADDLW  F2
049D4:  MOVWF  FE9
049D6:  MOVLW  00
049D8:  ADDWFC 03,W
049DA:  MOVWF  FEA
049DC:  MOVFF  FEC,390
049E0:  MOVF   FED,F
049E2:  MOVFF  FEF,38F
049E6:  BCF    FD8.0
049E8:  RLCF   x8E,W
049EA:  ADDLW  01
049EC:  CLRF   03
049EE:  MOVWF  02
049F0:  BCF    FD8.0
049F2:  RLCF   02,F
049F4:  RLCF   03,F
049F6:  MOVF   02,W
049F8:  ADDLW  F2
049FA:  MOVWF  FE9
049FC:  MOVLW  00
049FE:  ADDWFC 03,W
04A00:  MOVWF  FEA
04A02:  MOVFF  FEC,392
04A06:  MOVF   FED,F
04A08:  MOVFF  FEF,391
04A0C:  MOVFF  390,847
04A10:  MOVLW  37
04A12:  MOVLB  8
04A14:  MOVWF  x48
04A16:  MOVLB  0
04A18:  CALL   1F34
04A1C:  MOVFF  38F,847
04A20:  MOVLW  37
04A22:  MOVLB  8
04A24:  MOVWF  x48
04A26:  MOVLB  0
04A28:  CALL   1F34
04A2C:  MOVLW  2C
04A2E:  MOVLB  8
04A30:  MOVWF  x49
04A32:  MOVLB  0
04A34:  CALL   16C2
04A38:  MOVFF  392,847
04A3C:  MOVLW  37
04A3E:  MOVLB  8
04A40:  MOVWF  x48
04A42:  MOVLB  0
04A44:  CALL   1F34
04A48:  MOVFF  391,847
04A4C:  MOVLW  37
04A4E:  MOVLB  8
04A50:  MOVWF  x48
04A52:  MOVLB  0
04A54:  CALL   1F34
04A58:  MOVLW  0D
04A5A:  MOVLB  8
04A5C:  MOVWF  x49
04A5E:  MOVLB  0
04A60:  CALL   16C2
04A64:  MOVLW  0A
04A66:  MOVLB  8
04A68:  MOVWF  x49
04A6A:  MOVLB  0
04A6C:  CALL   16C2
04A70:  MOVLB  3
04A72:  INCF   x8E,F
04A74:  MOVLB  0
04A76:  GOTO   4922
....................    }
04A7A:  GOTO   6954 (RETURN)
....................    
....................    
.................... }
.................... 
.................... 
.................... 
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................    output_high(CONNECT_CIGS1);
.................... 
....................    // read temperature
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    delay_us(10); // wait for the ADC to stabilize
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
....................    unsigned int32 current;   
....................     // read PD value
.................... 
....................     delay_us(10); // wait for the ADC to stabilize
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
....................    {    
....................       // set DAC value
....................       //dac_write(count);
....................       delay_us(100); // wait for the DAC to stabilize
.................... 
....................       // read CIGS voltage and current
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
....................       
....................       current = 0; // reset current value
....................       for(int k=0; k<10; k++)
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + ad7490_read(AD7490_VIN0); 
....................       }    
....................       
....................       current = current / 10; // average the current value
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
....................    // read PD value
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS1);
.................... }
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd)
.................... {
....................    sweep_port1(80);
*
05154:  MOVLW  50
05156:  MOVLB  3
05158:  MOVWF  x96
0515A:  MOVLB  0
0515C:  GOTO   4A7E
....................    SmfDataStruct data;
....................    data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
05160:  MOVLB  3
05162:  BCF    x8D.0
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
05164:  MOVF   x6A,W
05166:  MOVWF  x96
05168:  MOVF   x6B,W
0516A:  MOVWF  x97
0516C:  MOVLW  16
0516E:  ADDWF  x6C,W
05170:  MOVWF  x98
05172:  MOVLW  00
05174:  ADDWFC x6D,W
05176:  MOVWF  x99
05178:  MOVF   x6F,W
0517A:  SUBWF  x96,W
0517C:  MOVWF  x8E
0517E:  MOVF   x70,W
05180:  SUBWFB x97,W
05182:  MOVWF  x8F
05184:  MOVF   x71,W
05186:  SUBWFB x98,W
05188:  MOVWF  x90
0518A:  MOVF   x72,W
0518C:  SUBWFB x99,W
0518E:  MOVWF  x91
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
05190:  MOVFF  372,395
05194:  MOVFF  371,394
05198:  MOVFF  370,393
0519C:  MOVFF  36F,392
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
051A0:  MOVLW  03
051A2:  MOVWF  x97
051A4:  MOVLW  8D
051A6:  MOVWF  x96
051A8:  MOVLB  0
051AA:  GOTO   4FC6
051AE:  GOTO   6974 (RETURN)
.................... }
.................... 
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... 
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // IV command
.................... 
.................... void mode_iv_measure();
.................... 
.................... void mode_iv_measure_voltage();
.................... 
.................... void mode_iv_meas_adc();
.................... 
.................... void mode_test_iv(unsigned int8 *uplinkcmd[]);
.................... 
.................... // Development command
.................... 
.................... void mode_dev_vol();
.................... 
.................... void mode_dev_cur();
.................... 
.................... void mode_dev_temp();   
.................... 
.................... void mode_dev_pd();
.................... 
.................... void mode_dev_cigs();
.................... 
.................... void mode_dev_time();
.................... 
.................... void mode_dev_sweep();
.................... 
.................... 
.................... void mode_sweep_port1(unsigned int8 uplinkcmd);
.................... 
.................... // ______________CMD ID________________
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 parameter[]);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... // CMD Parameter
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 readaddress;
....................     unsigned int16 readpacketnum;
.................... } FLASH_READ_PARAM;
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
....................     unsigned int16 pd;
.................... } MEASUREMENT_DATA;
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(unsigned int8 *content)
*
06846:  MOVLB  3
06848:  MOVF   x88,W
0684A:  MOVWF  FE9
0684C:  MOVF   x89,W
0684E:  MOVWF  FEA
06850:  MOVFF  FEF,38A
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
06854:  MOVLW  98
06856:  MOVWF  FF6
06858:  MOVLW  13
0685A:  MOVWF  FF7
0685C:  MOVLW  00
0685E:  MOVWF  FF8
06860:  MOVLB  0
06862:  CALL   1714
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
06866:  MOVLW  DE
06868:  MOVWF  FF6
0686A:  MOVLW  13
0686C:  MOVWF  FF7
0686E:  MOVLW  00
06870:  MOVWF  FF8
06872:  MOVLW  0C
06874:  MOVLB  7
06876:  MOVWF  xEC
06878:  MOVLB  0
0687A:  CALL   1744
0687E:  MOVFF  38A,847
06882:  MOVLW  37
06884:  MOVLB  8
06886:  MOVWF  x48
06888:  MOVLB  0
0688A:  CALL   1F34
0688E:  MOVLW  EC
06890:  MOVWF  FF6
06892:  MOVLW  13
06894:  MOVWF  FF7
06896:  MOVLW  00
06898:  MOVWF  FF8
0689A:  MOVLW  04
0689C:  MOVLB  7
0689E:  MOVWF  xEC
068A0:  MOVLB  0
068A2:  CALL   1744
....................    switch(command_id)
068A6:  MOVLB  3
068A8:  MOVF   x8A,W
068AA:  XORLW  10
068AC:  MOVLB  0
068AE:  BTFSC  FD8.2
068B0:  GOTO   6920
068B4:  XORLW  01
068B6:  BTFSC  FD8.2
068B8:  GOTO   6930
068BC:  XORLW  03
068BE:  BTFSC  FD8.2
068C0:  GOTO   6940
068C4:  XORLW  13
068C6:  BTFSC  FD8.2
068C8:  GOTO   6948
068CC:  XORLW  12
068CE:  BTFSC  FD8.2
068D0:  GOTO   6958
068D4:  XORLW  93
068D6:  BTFSC  FD8.2
068D8:  GOTO   6978
068DC:  XORLW  01
068DE:  BTFSC  FD8.2
068E0:  GOTO   6988
068E4:  XORLW  03
068E6:  BTFSC  FD8.2
068E8:  GOTO   6998
068EC:  XORLW  01
068EE:  BTFSC  FD8.2
068F0:  GOTO   69A8
068F4:  XORLW  07
068F6:  BTFSC  FD8.2
068F8:  GOTO   69B8
068FC:  XORLW  01
068FE:  BTFSC  FD8.2
06900:  GOTO   69C8
06904:  XORLW  03
06906:  BTFSC  FD8.2
06908:  GOTO   69D8
0690C:  XORLW  01
0690E:  BTFSC  FD8.2
06910:  GOTO   69E8
06914:  XORLW  0F
06916:  BTFSC  FD8.2
06918:  GOTO   69F8
0691C:  GOTO   6A08
....................    {
....................       case 0x10: // example command
....................          mode_dummy(content);
06920:  MOVFF  389,38C
06924:  MOVFF  388,38B
06928:  GOTO   4128
....................          //mode_iv_meas_adc();
....................          break;
0692C:  GOTO   6A18
....................       case 0x11:
....................          mode_test_iv(content);
06930:  MOVFF  389,38C
06934:  MOVFF  388,38B
06938:  GOTO   46A4
....................          break;
0693C:  GOTO   6A18
....................       case 0x12:
....................          test_adc();
06940:  GOTO   4734
....................          break;
06944:  GOTO   6A18
....................       case 0x01:
....................          mode_measure(content); // check if the flash is connected
06948:  MOVFF  389,38C
0694C:  MOVFF  388,38B
06950:  GOTO   48E2
....................          break;
06954:  GOTO   6A18
....................       case 0x13:
....................          mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
06958:  MOVLW  01
0695A:  MOVLB  3
0695C:  ADDWF  x88,W
0695E:  MOVWF  FE9
06960:  MOVLW  00
06962:  ADDWFC x89,W
06964:  MOVWF  FEA
06966:  MOVFF  FEF,38B
0696A:  MOVFF  38B,38C
0696E:  MOVLB  0
06970:  GOTO   5154
....................          break;
06974:  GOTO   6A18
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(content);
06978:  MOVFF  389,38E
0697C:  MOVFF  388,38D
06980:  CALL   550E
....................          break;
06984:  GOTO   6A18
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(content);
06988:  MOVFF  389,38C
0698C:  MOVFF  388,38B
06990:  GOTO   55D6
....................          break;
06994:  GOTO   6A18
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(content);
06998:  MOVFF  389,38C
0699C:  MOVFF  388,38B
069A0:  GOTO   5770
....................          break;
069A4:  GOTO   6A18
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(content);
069A8:  MOVFF  389,38C
069AC:  MOVFF  388,38B
069B0:  GOTO   5906
....................          break;
069B4:  GOTO   6A18
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(content);
069B8:  MOVFF  389,38C
069BC:  MOVFF  388,38B
069C0:  GOTO   5A7C
....................          break;
069C4:  GOTO   6A18
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(content);
069C8:  MOVFF  389,38C
069CC:  MOVFF  388,38B
069D0:  GOTO   5E7C
....................          break;
069D4:  GOTO   6A18
....................       case ID_MISF_READ:
....................          mode_misf_read(content);
069D8:  MOVFF  389,38C
069DC:  MOVFF  388,38B
069E0:  GOTO   613A
....................          break;
069E4:  GOTO   6A18
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(content);
069E8:  MOVFF  389,38C
069EC:  MOVFF  388,38B
069F0:  GOTO   65C8
....................          break;
069F4:  GOTO   6A18
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(content);
069F8:  MOVFF  389,38C
069FC:  MOVFF  388,38B
06A00:  GOTO   67EC
....................          break;
06A04:  GOTO   6A18
.................... 
....................       // ___________________ SMF Commands ______________________
....................       /*
....................       case ID_SMF_COPY:
....................          mode_misf_smf_copy(content);
....................          break;
....................       case ID_SMF_READ:
....................          mode_flash_smf_read(content);
....................          break;
....................       case ID_SMF_ERASE:
....................          mode_flash_smf_erase(content);
....................          break;
....................       case ID_SMF_COPY_FORCE:
....................          mode_flash_address_reset(content);
....................          break;
....................       case ID_SMF_READ_FORCE:
....................          mode_flash_smf_read_force(content);
....................          break;
....................       case ID_SMF_ERASE_FORCE:
....................          mode_flash_smf_erase_force(content);
....................          break;
....................       */   
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
06A08:  MOVLW  F2
06A0A:  MOVWF  FF6
06A0C:  MOVLW  13
06A0E:  MOVWF  FF7
06A10:  MOVLW  00
06A12:  MOVWF  FF8
06A14:  CALL   1714
....................          
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
06A18:  MOVLW  0A
06A1A:  MOVWF  FF6
06A1C:  MOVLW  14
06A1E:  MOVWF  FF7
06A20:  MOVLW  00
06A22:  MOVWF  FF8
06A24:  CALL   1714
06A28:  GOTO   6A8E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
083A6:  MOVLW  50
083A8:  MOVWF  FF6
083AA:  MOVLW  14
083AC:  MOVWF  FF7
083AE:  MOVLW  00
083B0:  MOVWF  FF8
083B2:  CALL   1714
....................    
....................    switch(command->frame_id)
083B6:  MOVLB  3
083B8:  MOVF   x82,W
083BA:  MOVWF  FE9
083BC:  MOVF   x83,W
083BE:  MOVWF  FEA
083C0:  MOVF   FEF,W
083C2:  XORLW  00
083C4:  MOVLB  0
083C6:  BTFSC  FD8.2
083C8:  GOTO   83E0
083CC:  XORLW  01
083CE:  BTFSC  FD8.2
083D0:  GOTO   83F0
083D4:  XORLW  03
083D6:  BTFSC  FD8.2
083D8:  GOTO   8410
083DC:  GOTO   8420
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
083E0:  MOVFF  383,385
083E4:  MOVFF  382,384
083E8:  GOTO   6A42
....................          break;
083EC:  GOTO   8420
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
083F0:  MOVFF  383,385
083F4:  MOVFF  382,384
083F8:  GOTO   6AC4
083FC:  MOVF   01,F
083FE:  BTFSC  FD8.2
08400:  GOTO   840C
....................             return TRUE; // if status is finished, return TRUE
08404:  MOVLW  01
08406:  MOVWF  01
08408:  GOTO   8424
....................          }        
....................          break;
0840C:  GOTO   8420
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
08410:  MOVFF  383,385
08414:  MOVFF  382,384
08418:  GOTO   8330
....................          break;
0841C:  GOTO   8420
....................    }
....................    return FALSE;
08420:  MOVLW  00
08422:  MOVWF  01
08424:  GOTO   8CD2 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
06A42:  MOVLW  68
06A44:  MOVWF  FF6
06A46:  MOVLW  14
06A48:  MOVWF  FF7
06A4A:  MOVLW  00
06A4C:  MOVWF  FF8
06A4E:  CALL   1714
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
06A52:  MOVLW  7E
06A54:  MOVWF  FF6
06A56:  MOVLW  14
06A58:  MOVWF  FF7
06A5A:  MOVLW  00
06A5C:  MOVWF  FF8
06A5E:  CALL   1714
....................    transmit_ack();
06A62:  CALL   4114
.................... 
....................    status[0] = EXECUTING_MISSION;
06A66:  MOVLW  02
06A68:  MOVWF  1D
....................    execute_mission(command->content);
06A6A:  MOVLW  03
06A6C:  MOVLB  3
06A6E:  ADDWF  x84,W
06A70:  MOVWF  01
06A72:  MOVLW  00
06A74:  ADDWFC x85,W
06A76:  MOVWF  03
06A78:  MOVF   01,W
06A7A:  MOVWF  x86
06A7C:  MOVFF  03,387
06A80:  MOVFF  387,389
06A84:  MOVFF  386,388
06A88:  MOVLB  0
06A8A:  GOTO   6846
....................    if (is_empty_smf_data())
06A8E:  CALL   6A2C
06A92:  MOVF   01,F
06A94:  BTFSC  FD8.2
06A96:  GOTO   6AA2
....................       status[0] = FINISHED;
06A9A:  MOVLW  06
06A9C:  MOVWF  1D
06A9E:  GOTO   6AA6
....................    else
....................       status[0] = SMF_USE_REQ;
06AA2:  MOVLW  04
06AA4:  MOVWF  1D
06AA6:  GOTO   83EC (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
*
06AC4:  MOVLW  98
06AC6:  MOVWF  FF6
06AC8:  MOVLW  14
06ACA:  MOVWF  FF7
06ACC:  MOVLW  00
06ACE:  MOVWF  FF8
06AD0:  CALL   1714
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
06AD4:  MOVLW  AC
06AD6:  MOVWF  FF6
06AD8:  MOVLW  14
06ADA:  MOVWF  FF7
06ADC:  MOVLW  00
06ADE:  MOVWF  FF8
06AE0:  CALL   1714
....................    transmit_status();
06AE4:  GOTO   6AAA
....................    if (status[0] == FINISHED)
06AE8:  MOVF   1D,W
06AEA:  SUBLW  06
06AEC:  BTFSS  FD8.2
06AEE:  GOTO   6B0E
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
06AF2:  MOVLW  CA
06AF4:  MOVWF  FF6
06AF6:  MOVLW  14
06AF8:  MOVWF  FF7
06AFA:  MOVLW  00
06AFC:  MOVWF  FF8
06AFE:  CALL   1714
....................       return TRUE;
06B02:  MOVLW  01
06B04:  MOVWF  01
06B06:  GOTO   6B16
....................    }
06B0A:  GOTO   6B16
....................    else{
....................       return FALSE;
06B0E:  MOVLW  00
06B10:  MOVWF  01
06B12:  GOTO   6B16
....................    }
06B16:  GOTO   83FC (RETURN)
.................... 
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
08330:  MOVLW  E6
08332:  MOVWF  FF6
08334:  MOVLW  14
08336:  MOVWF  FF7
08338:  MOVLW  00
0833A:  MOVWF  FF8
0833C:  CALL   1714
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
08340:  MOVLW  00
08342:  MOVWF  FF6
08344:  MOVLW  15
08346:  MOVWF  FF7
08348:  MOVLW  00
0834A:  MOVWF  FF8
0834C:  CALL   1714
....................     transmit_ack();
08350:  CALL   4114
....................     
....................     if (command->content[0] == ALLOW) {
08354:  MOVLW  03
08356:  MOVLB  3
08358:  ADDWF  x84,W
0835A:  MOVWF  FE9
0835C:  MOVLW  00
0835E:  ADDWFC x85,W
08360:  MOVWF  FEA
08362:  DECFSZ FEF,W
08364:  BRA    836A
08366:  BRA    8370
08368:  MOVLB  0
0836A:  MOVLB  0
0836C:  GOTO   8392
08370:  MOVLB  0
....................         fprintf(PC, "\t\t-> allowd\r\n");
08372:  MOVLW  1A
08374:  MOVWF  FF6
08376:  MOVLW  15
08378:  MOVWF  FF7
0837A:  MOVLW  00
0837C:  MOVWF  FF8
0837E:  CALL   1714
....................         status[0] = COPYING;
08382:  MOVLW  05
08384:  MOVWF  1D
....................         smf_write();
08386:  GOTO   7604
....................         status[0] = FINISHED;
0838A:  MOVLW  06
0838C:  MOVWF  1D
....................     } else {
0838E:  GOTO   83A2
....................         fprintf(PC, "\t\t-> denyed\r\n");
08392:  MOVLW  28
08394:  MOVWF  FF6
08396:  MOVLW  15
08398:  MOVWF  FF7
0839A:  MOVLW  00
0839C:  MOVWF  FF8
0839E:  CALL   1714
....................     }
083A2:  GOTO   841C (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
08428:  CLRF   FF8
0842A:  BCF    FD0.7
0842C:  BSF    07.7
0842E:  MOVLB  E
08430:  MOVLW  55
08432:  MOVWF  F7E
08434:  MOVLW  AA
08436:  MOVWF  F7E
08438:  BCF    F66.6
0843A:  MOVLW  F9
0843C:  MOVWF  x2C
0843E:  MOVLW  00
08440:  MOVWF  x2E
08442:  MOVLW  40
08444:  MOVWF  x12
08446:  MOVLW  30
08448:  MOVWF  x13
0844A:  MOVLW  20
0844C:  MOVWF  x22
0844E:  MOVLW  55
08450:  MOVWF  F7E
08452:  MOVLW  AA
08454:  MOVWF  F7E
08456:  BSF    F66.6
08458:  CLRF   F9B
0845A:  CLRF   F64
0845C:  CLRF   F65
0845E:  CLRF   F66
08460:  MOVLW  02
08462:  MOVWF  FD3
08464:  CLRF   1B
08466:  MOVLB  F
08468:  BSF    x2D.3
0846A:  MOVLW  A0
0846C:  MOVWF  x2B
0846E:  MOVLW  01
08470:  MOVWF  x2C
08472:  MOVLW  A6
08474:  MOVWF  x2E
08476:  MOVLW  90
08478:  MOVWF  x2F
0847A:  BCF    F93.6
0847C:  BSF    F8A.6
0847E:  BCF    FC6.5
08480:  MOVLW  40
08482:  MOVWF  FC7
08484:  MOVLW  03
08486:  MOVWF  FC8
08488:  MOVLW  2A
0848A:  MOVWF  FC6
0848C:  BCF    F92.1
0848E:  BSF    F92.0
08490:  BCF    F92.3
08492:  BSF    F93.4
08494:  BCF    F93.5
08496:  BCF    F93.2
08498:  BCF    F8A.2
0849A:  BCF    1C.0
0849C:  CLRF   24
0849E:  CLRF   23
084A0:  CLRF   22
084A2:  CLRF   21
084A4:  CLRF   28
084A6:  CLRF   27
084A8:  CLRF   26
084AA:  CLRF   25
084AC:  CLRF   2A
084AE:  CLRF   29
084B0:  CLRF   4B
084B2:  MOVLW  1E
084B4:  MOVLB  0
084B6:  MOVWF  xEC
084B8:  CLRF   xED
084BA:  MOVLB  3
084BC:  CLRF   x4D
084BE:  CLRF   x4C
084C0:  CLRF   x4B
084C2:  CLRF   x4A
084C4:  CLRF   x4F
084C6:  CLRF   x4E
084C8:  CLRF   x51
084CA:  CLRF   x50
084CC:  CLRF   x53
084CE:  CLRF   x52
084D0:  CLRF   x55
084D2:  CLRF   x54
084D4:  CLRF   x74
084D6:  CLRF   x73
084D8:  MOVLB  E
084DA:  CLRF   xD9
084DC:  CLRF   xDA
084DE:  CLRF   xCE
084E0:  CLRF   xCF
084E2:  CLRF   xD0
084E4:  CLRF   xD1
084E6:  CLRF   xD2
084E8:  CLRF   xD3
084EA:  CLRF   xD4
084EC:  CLRF   xD5
084EE:  CLRF   x45
084F0:  CLRF   x46
084F2:  CLRF   x47
084F4:  BCF    x8D.7
084F6:  BCF    x8D.6
084F8:  BCF    x8D.5
084FA:  MOVLB  F
084FC:  CLRF   x53
084FE:  CLRF   x38
08500:  CLRF   x37
08502:  MOVLB  0
08504:  MOVLW  03
08506:  MOVWF  1D
08508:  CLRF   1E
0850A:  CLRF   1F
0850C:  CLRF   20
0850E:  CLRF   2B
08510:  CLRF   2C
08512:  CLRF   2D
08514:  CLRF   2E
08516:  CLRF   2F
08518:  CLRF   30
0851A:  CLRF   31
0851C:  CLRF   32
0851E:  CLRF   33
08520:  CLRF   34
08522:  CLRF   35
08524:  CLRF   36
08526:  CLRF   37
08528:  CLRF   38
0852A:  CLRF   39
0852C:  CLRF   3A
0852E:  CLRF   3B
08530:  CLRF   3C
08532:  CLRF   3D
08534:  CLRF   3E
08536:  CLRF   3F
08538:  CLRF   40
0853A:  CLRF   41
0853C:  CLRF   42
0853E:  CLRF   43
08540:  CLRF   44
08542:  CLRF   45
08544:  CLRF   46
08546:  CLRF   47
08548:  CLRF   48
0854A:  CLRF   49
0854C:  CLRF   4A
0854E:  CLRF   4C
08550:  CLRF   4D
08552:  CLRF   4E
08554:  CLRF   4F
08556:  CLRF   50
08558:  CLRF   51
0855A:  CLRF   52
0855C:  CLRF   53
0855E:  CLRF   54
08560:  CLRF   55
08562:  CLRF   56
08564:  CLRF   57
08566:  CLRF   58
08568:  CLRF   59
0856A:  CLRF   5A
0856C:  CLRF   5B
0856E:  CLRF   5C
08570:  CLRF   5D
08572:  CLRF   5E
08574:  CLRF   5F
08576:  CLRF   x60
08578:  CLRF   x61
0857A:  CLRF   x62
0857C:  CLRF   x63
0857E:  CLRF   x64
08580:  CLRF   x65
08582:  CLRF   x66
08584:  CLRF   x67
08586:  CLRF   x68
08588:  CLRF   x69
0858A:  CLRF   x6A
0858C:  CLRF   x6B
0858E:  CLRF   x6C
08590:  CLRF   x6D
08592:  CLRF   x6E
08594:  CLRF   x6F
08596:  CLRF   x70
08598:  CLRF   x71
0859A:  CLRF   x72
0859C:  CLRF   x73
0859E:  CLRF   x74
085A0:  CLRF   x75
085A2:  CLRF   x76
085A4:  CLRF   x77
085A6:  CLRF   x78
085A8:  CLRF   x79
085AA:  CLRF   x7A
085AC:  CLRF   x7B
085AE:  CLRF   x7C
085B0:  CLRF   x7D
085B2:  CLRF   x7E
085B4:  CLRF   x7F
085B6:  CLRF   x80
085B8:  CLRF   x81
085BA:  CLRF   x82
085BC:  CLRF   x83
085BE:  CLRF   x84
085C0:  CLRF   x85
085C2:  CLRF   x86
085C4:  CLRF   x87
085C6:  CLRF   x88
085C8:  CLRF   x89
085CA:  CLRF   x8A
085CC:  CLRF   x8B
085CE:  CLRF   x8C
085D0:  CLRF   x8D
085D2:  CLRF   x8E
085D4:  CLRF   x8F
085D6:  CLRF   x90
085D8:  CLRF   x91
085DA:  CLRF   x92
085DC:  CLRF   x93
085DE:  CLRF   x94
085E0:  CLRF   x95
085E2:  CLRF   x96
085E4:  CLRF   x97
085E6:  CLRF   x98
085E8:  CLRF   x99
085EA:  CLRF   x9A
085EC:  CLRF   x9B
085EE:  CLRF   x9C
085F0:  CLRF   x9D
085F2:  CLRF   x9E
085F4:  CLRF   x9F
085F6:  CLRF   xA0
085F8:  CLRF   xA1
085FA:  CLRF   xA2
085FC:  CLRF   xA3
085FE:  CLRF   xA4
08600:  CLRF   xA5
08602:  CLRF   xA6
08604:  CLRF   xA7
08606:  CLRF   xA8
08608:  CLRF   xA9
0860A:  CLRF   xAA
0860C:  CLRF   xAB
0860E:  CLRF   xAC
08610:  CLRF   xAD
08612:  CLRF   xAE
08614:  CLRF   xAF
08616:  CLRF   xB0
08618:  CLRF   xB1
0861A:  CLRF   xB2
0861C:  CLRF   xB3
0861E:  CLRF   xB4
08620:  CLRF   xB5
08622:  CLRF   xB6
08624:  CLRF   xB7
08626:  CLRF   xB8
08628:  CLRF   xB9
0862A:  CLRF   xBA
0862C:  CLRF   xBB
0862E:  CLRF   xBC
08630:  CLRF   xBD
08632:  CLRF   xBE
08634:  CLRF   xBF
08636:  CLRF   xC0
08638:  CLRF   xC1
0863A:  CLRF   xC2
0863C:  CLRF   xC3
0863E:  CLRF   xC4
08640:  CLRF   xC5
08642:  CLRF   xC6
08644:  CLRF   xC7
08646:  CLRF   xC8
08648:  CLRF   xC9
0864A:  CLRF   xCA
0864C:  CLRF   xCB
0864E:  CLRF   xCC
08650:  CLRF   xCD
08652:  CLRF   xCE
08654:  CLRF   xCF
08656:  CLRF   xD0
08658:  CLRF   xD1
0865A:  CLRF   xD2
0865C:  CLRF   xD3
0865E:  CLRF   xD4
08660:  CLRF   xD5
08662:  CLRF   xD6
08664:  CLRF   xD7
08666:  CLRF   xD8
08668:  CLRF   xD9
0866A:  CLRF   xDA
0866C:  CLRF   xDB
0866E:  CLRF   xDC
08670:  CLRF   xDD
08672:  CLRF   xDE
08674:  CLRF   xDF
08676:  MOVLW  05
08678:  MOVWF  xE0
0867A:  MOVLW  7C
0867C:  MOVWF  xE1
0867E:  MOVLW  01
08680:  MOVWF  xE2
08682:  MOVLW  01
08684:  MOVWF  xE3
08686:  MOVLW  02
08688:  MOVWF  xE4
0868A:  MOVLW  7C
0868C:  MOVWF  xE5
0868E:  CLRF   xE6
08690:  MOVLW  09
08692:  MOVWF  xE7
08694:  MOVLW  01
08696:  MOVWF  xE8
08698:  CLRF   xE9
0869A:  MOVLW  02
0869C:  MOVWF  xEA
0869E:  MOVLW  01
086A0:  MOVWF  xEB
086A2:  CLRF   xEE
086A4:  CLRF   xEF
086A6:  CLRF   xF0
086A8:  CLRF   xF1
086AA:  CLRF   xF2
086AC:  CLRF   xF3
086AE:  CLRF   xF4
086B0:  CLRF   xF5
086B2:  CLRF   xF6
086B4:  CLRF   xF7
086B6:  CLRF   xF8
086B8:  CLRF   xF9
086BA:  CLRF   xFA
086BC:  CLRF   xFB
086BE:  CLRF   xFC
086C0:  CLRF   xFD
086C2:  CLRF   xFE
086C4:  CLRF   xFF
086C6:  MOVLB  1
086C8:  CLRF   x00
086CA:  CLRF   x01
086CC:  CLRF   x02
086CE:  CLRF   x03
086D0:  CLRF   x04
086D2:  CLRF   x05
086D4:  CLRF   x06
086D6:  CLRF   x07
086D8:  CLRF   x08
086DA:  CLRF   x09
086DC:  CLRF   x0A
086DE:  CLRF   x0B
086E0:  CLRF   x0C
086E2:  CLRF   x0D
086E4:  CLRF   x0E
086E6:  CLRF   x0F
086E8:  CLRF   x10
086EA:  CLRF   x11
086EC:  CLRF   x12
086EE:  CLRF   x13
086F0:  CLRF   x14
086F2:  CLRF   x15
086F4:  CLRF   x16
086F6:  CLRF   x17
086F8:  CLRF   x18
086FA:  CLRF   x19
086FC:  CLRF   x1A
086FE:  CLRF   x1B
08700:  CLRF   x1C
08702:  CLRF   x1D
08704:  CLRF   x1E
08706:  CLRF   x1F
08708:  CLRF   x20
0870A:  CLRF   x21
0870C:  CLRF   x22
0870E:  CLRF   x23
08710:  CLRF   x24
08712:  CLRF   x25
08714:  CLRF   x26
08716:  CLRF   x27
08718:  CLRF   x28
0871A:  CLRF   x29
0871C:  CLRF   x2A
0871E:  CLRF   x2B
08720:  CLRF   x2C
08722:  CLRF   x2D
08724:  CLRF   x2E
08726:  CLRF   x2F
08728:  CLRF   x30
0872A:  CLRF   x31
0872C:  CLRF   x32
0872E:  CLRF   x33
08730:  CLRF   x34
08732:  CLRF   x35
08734:  CLRF   x36
08736:  CLRF   x37
08738:  CLRF   x38
0873A:  CLRF   x39
0873C:  CLRF   x3A
0873E:  CLRF   x3B
08740:  CLRF   x3C
08742:  CLRF   x3D
08744:  CLRF   x3E
08746:  CLRF   x3F
08748:  CLRF   x40
0874A:  CLRF   x41
0874C:  CLRF   x42
0874E:  CLRF   x43
08750:  CLRF   x44
08752:  CLRF   x45
08754:  CLRF   x46
08756:  CLRF   x47
08758:  CLRF   x48
0875A:  CLRF   x49
0875C:  CLRF   x4A
0875E:  CLRF   x4B
08760:  CLRF   x4C
08762:  CLRF   x4D
08764:  CLRF   x4E
08766:  CLRF   x4F
08768:  CLRF   x50
0876A:  CLRF   x51
0876C:  CLRF   x52
0876E:  CLRF   x53
08770:  CLRF   x54
08772:  CLRF   x55
08774:  CLRF   x56
08776:  CLRF   x57
08778:  CLRF   x58
0877A:  CLRF   x59
0877C:  CLRF   x5A
0877E:  CLRF   x5B
08780:  CLRF   x5C
08782:  CLRF   x5D
08784:  CLRF   x5E
08786:  CLRF   x5F
08788:  CLRF   x60
0878A:  CLRF   x61
0878C:  CLRF   x62
0878E:  CLRF   x63
08790:  CLRF   x64
08792:  CLRF   x65
08794:  CLRF   x66
08796:  CLRF   x67
08798:  CLRF   x68
0879A:  CLRF   x69
0879C:  CLRF   x6A
0879E:  CLRF   x6B
087A0:  CLRF   x6C
087A2:  CLRF   x6D
087A4:  CLRF   x6E
087A6:  CLRF   x6F
087A8:  CLRF   x70
087AA:  CLRF   x71
087AC:  CLRF   x72
087AE:  CLRF   x73
087B0:  CLRF   x74
087B2:  CLRF   x75
087B4:  CLRF   x76
087B6:  CLRF   x77
087B8:  CLRF   x78
087BA:  CLRF   x79
087BC:  CLRF   x7A
087BE:  CLRF   x7B
087C0:  CLRF   x7C
087C2:  CLRF   x7D
087C4:  CLRF   x7E
087C6:  CLRF   x7F
087C8:  CLRF   x80
087CA:  CLRF   x81
087CC:  CLRF   x82
087CE:  CLRF   x83
087D0:  CLRF   x84
087D2:  CLRF   x85
087D4:  CLRF   x86
087D6:  CLRF   x87
087D8:  CLRF   x88
087DA:  CLRF   x89
087DC:  CLRF   x8A
087DE:  CLRF   x8B
087E0:  CLRF   x8C
087E2:  CLRF   x8D
087E4:  CLRF   x8E
087E6:  CLRF   x8F
087E8:  CLRF   x90
087EA:  CLRF   x91
087EC:  CLRF   x92
087EE:  CLRF   x93
087F0:  CLRF   x94
087F2:  CLRF   x95
087F4:  CLRF   x96
087F6:  CLRF   x97
087F8:  CLRF   x98
087FA:  CLRF   x99
087FC:  CLRF   x9A
087FE:  CLRF   x9B
08800:  CLRF   x9C
08802:  CLRF   x9D
08804:  CLRF   x9E
08806:  CLRF   x9F
08808:  CLRF   xA0
0880A:  CLRF   xA1
0880C:  CLRF   xA2
0880E:  CLRF   xA3
08810:  CLRF   xA4
08812:  CLRF   xA5
08814:  CLRF   xA6
08816:  CLRF   xA7
08818:  CLRF   xA8
0881A:  CLRF   xA9
0881C:  CLRF   xAA
0881E:  CLRF   xAB
08820:  CLRF   xAC
08822:  CLRF   xAD
08824:  CLRF   xAE
08826:  CLRF   xAF
08828:  CLRF   xB0
0882A:  CLRF   xB1
0882C:  CLRF   xB2
0882E:  CLRF   xB3
08830:  CLRF   xB4
08832:  CLRF   xB5
08834:  CLRF   xB6
08836:  CLRF   xB7
08838:  CLRF   xB8
0883A:  CLRF   xB9
0883C:  CLRF   xBA
0883E:  CLRF   xBB
08840:  CLRF   xBC
08842:  CLRF   xBD
08844:  CLRF   xBE
08846:  CLRF   xBF
08848:  CLRF   xC0
0884A:  CLRF   xC1
0884C:  CLRF   xC2
0884E:  CLRF   xC3
08850:  CLRF   xC4
08852:  CLRF   xC5
08854:  CLRF   xC6
08856:  CLRF   xC7
08858:  CLRF   xC8
0885A:  CLRF   xC9
0885C:  CLRF   xCA
0885E:  CLRF   xCB
08860:  CLRF   xCC
08862:  CLRF   xCD
08864:  CLRF   xCE
08866:  CLRF   xCF
08868:  CLRF   xD0
0886A:  CLRF   xD1
0886C:  CLRF   xD2
0886E:  CLRF   xD3
08870:  CLRF   xD4
08872:  CLRF   xD5
08874:  CLRF   xD6
08876:  CLRF   xD7
08878:  CLRF   xD8
0887A:  CLRF   xD9
0887C:  CLRF   xDA
0887E:  CLRF   xDB
08880:  CLRF   xDC
08882:  CLRF   xDD
08884:  CLRF   xDE
08886:  CLRF   xDF
08888:  CLRF   xE0
0888A:  CLRF   xE1
0888C:  CLRF   xE2
0888E:  CLRF   xE3
08890:  CLRF   xE4
08892:  CLRF   xE5
08894:  CLRF   xE6
08896:  CLRF   xE7
08898:  CLRF   xE8
0889A:  CLRF   xE9
0889C:  CLRF   xEA
0889E:  CLRF   xEB
088A0:  CLRF   xEC
088A2:  CLRF   xED
088A4:  CLRF   xEE
088A6:  CLRF   xEF
088A8:  CLRF   xF0
088AA:  CLRF   xF1
088AC:  CLRF   xF2
088AE:  CLRF   xF3
088B0:  CLRF   xF4
088B2:  CLRF   xF5
088B4:  CLRF   xF6
088B6:  CLRF   xF7
088B8:  CLRF   xF8
088BA:  CLRF   xF9
088BC:  CLRF   xFA
088BE:  CLRF   xFB
088C0:  CLRF   xFC
088C2:  CLRF   xFD
088C4:  CLRF   xFE
088C6:  CLRF   xFF
088C8:  MOVLB  2
088CA:  CLRF   x00
088CC:  CLRF   x01
088CE:  CLRF   x02
088D0:  CLRF   x03
088D2:  CLRF   x04
088D4:  CLRF   x05
088D6:  CLRF   x06
088D8:  CLRF   x07
088DA:  CLRF   x08
088DC:  CLRF   x09
088DE:  CLRF   x0A
088E0:  CLRF   x0B
088E2:  CLRF   x0C
088E4:  CLRF   x0D
088E6:  CLRF   x0E
088E8:  CLRF   x0F
088EA:  CLRF   x10
088EC:  CLRF   x11
088EE:  CLRF   x12
088F0:  CLRF   x13
088F2:  CLRF   x14
088F4:  CLRF   x15
088F6:  CLRF   x16
088F8:  CLRF   x17
088FA:  CLRF   x18
088FC:  CLRF   x19
088FE:  CLRF   x1A
08900:  CLRF   x1B
08902:  CLRF   x1C
08904:  CLRF   x1D
08906:  CLRF   x1E
08908:  CLRF   x1F
0890A:  CLRF   x20
0890C:  CLRF   x21
0890E:  CLRF   x22
08910:  CLRF   x23
08912:  CLRF   x24
08914:  CLRF   x25
08916:  CLRF   x26
08918:  CLRF   x27
0891A:  CLRF   x28
0891C:  CLRF   x29
0891E:  CLRF   x2A
08920:  CLRF   x2B
08922:  CLRF   x2C
08924:  CLRF   x2D
08926:  CLRF   x2E
08928:  CLRF   x2F
0892A:  CLRF   x30
0892C:  CLRF   x31
0892E:  CLRF   x32
08930:  CLRF   x33
08932:  CLRF   x34
08934:  CLRF   x35
08936:  CLRF   x36
08938:  CLRF   x37
0893A:  CLRF   x38
0893C:  CLRF   x39
0893E:  CLRF   x3A
08940:  CLRF   x3B
08942:  CLRF   x3C
08944:  CLRF   x3D
08946:  CLRF   x3E
08948:  CLRF   x3F
0894A:  CLRF   x40
0894C:  CLRF   x41
0894E:  CLRF   x42
08950:  CLRF   x43
08952:  CLRF   x44
08954:  CLRF   x45
08956:  CLRF   x46
08958:  CLRF   x47
0895A:  CLRF   x48
0895C:  CLRF   x49
0895E:  CLRF   x4A
08960:  CLRF   x4B
08962:  CLRF   x4C
08964:  CLRF   x4D
08966:  CLRF   x4E
08968:  CLRF   x4F
0896A:  CLRF   x50
0896C:  CLRF   x51
0896E:  CLRF   x52
08970:  CLRF   x53
08972:  CLRF   x54
08974:  CLRF   x55
08976:  CLRF   x56
08978:  CLRF   x57
0897A:  CLRF   x58
0897C:  CLRF   x59
0897E:  CLRF   x5A
08980:  CLRF   x5B
08982:  CLRF   x5C
08984:  CLRF   x5D
08986:  CLRF   x5E
08988:  CLRF   x5F
0898A:  CLRF   x60
0898C:  CLRF   x61
0898E:  CLRF   x62
08990:  CLRF   x63
08992:  CLRF   x64
08994:  CLRF   x65
08996:  CLRF   x66
08998:  CLRF   x67
0899A:  CLRF   x68
0899C:  CLRF   x69
0899E:  CLRF   x6A
089A0:  CLRF   x6B
089A2:  CLRF   x6C
089A4:  CLRF   x6D
089A6:  CLRF   x6E
089A8:  CLRF   x6F
089AA:  CLRF   x70
089AC:  CLRF   x71
089AE:  CLRF   x72
089B0:  CLRF   x73
089B2:  CLRF   x74
089B4:  CLRF   x75
089B6:  CLRF   x76
089B8:  CLRF   x77
089BA:  CLRF   x78
089BC:  CLRF   x79
089BE:  CLRF   x7A
089C0:  CLRF   x7B
089C2:  CLRF   x7C
089C4:  CLRF   x7D
089C6:  CLRF   x7E
089C8:  CLRF   x7F
089CA:  CLRF   x80
089CC:  CLRF   x81
089CE:  CLRF   x82
089D0:  CLRF   x83
089D2:  CLRF   x84
089D4:  CLRF   x85
089D6:  CLRF   x86
089D8:  CLRF   x87
089DA:  CLRF   x88
089DC:  CLRF   x89
089DE:  CLRF   x8A
089E0:  CLRF   x8B
089E2:  CLRF   x8C
089E4:  CLRF   x8D
089E6:  CLRF   x8E
089E8:  CLRF   x8F
089EA:  CLRF   x90
089EC:  CLRF   x91
089EE:  CLRF   x92
089F0:  CLRF   x93
089F2:  CLRF   x94
089F4:  CLRF   x95
089F6:  CLRF   x96
089F8:  CLRF   x97
089FA:  CLRF   x98
089FC:  CLRF   x99
089FE:  CLRF   x9A
08A00:  CLRF   x9B
08A02:  CLRF   x9C
08A04:  CLRF   x9D
08A06:  CLRF   x9E
08A08:  CLRF   x9F
08A0A:  CLRF   xA0
08A0C:  CLRF   xA1
08A0E:  CLRF   xA2
08A10:  CLRF   xA3
08A12:  CLRF   xA4
08A14:  CLRF   xA5
08A16:  CLRF   xA6
08A18:  CLRF   xA7
08A1A:  CLRF   xA8
08A1C:  CLRF   xA9
08A1E:  CLRF   xAA
08A20:  CLRF   xAB
08A22:  CLRF   xAC
08A24:  CLRF   xAD
08A26:  CLRF   xAE
08A28:  CLRF   xAF
08A2A:  CLRF   xB0
08A2C:  CLRF   xB1
08A2E:  CLRF   xB2
08A30:  CLRF   xB3
08A32:  CLRF   xB4
08A34:  CLRF   xB5
08A36:  CLRF   xB6
08A38:  CLRF   xB7
08A3A:  CLRF   xB8
08A3C:  CLRF   xB9
08A3E:  CLRF   xBA
08A40:  CLRF   xBB
08A42:  CLRF   xBC
08A44:  CLRF   xBD
08A46:  CLRF   xBE
08A48:  CLRF   xBF
08A4A:  CLRF   xC0
08A4C:  CLRF   xC1
08A4E:  CLRF   xC2
08A50:  CLRF   xC3
08A52:  CLRF   xC4
08A54:  CLRF   xC5
08A56:  CLRF   xC6
08A58:  CLRF   xC7
08A5A:  CLRF   xC8
08A5C:  CLRF   xC9
08A5E:  CLRF   xCA
08A60:  CLRF   xCB
08A62:  CLRF   xCC
08A64:  CLRF   xCD
08A66:  CLRF   xCE
08A68:  CLRF   xCF
08A6A:  CLRF   xD0
08A6C:  CLRF   xD1
08A6E:  CLRF   xD2
08A70:  CLRF   xD3
08A72:  CLRF   xD4
08A74:  CLRF   xD5
08A76:  CLRF   xD6
08A78:  CLRF   xD7
08A7A:  CLRF   xD8
08A7C:  CLRF   xD9
08A7E:  CLRF   xDA
08A80:  CLRF   xDB
08A82:  CLRF   xDC
08A84:  CLRF   xDD
08A86:  CLRF   xDE
08A88:  CLRF   xDF
08A8A:  CLRF   xE0
08A8C:  CLRF   xE1
08A8E:  CLRF   xE2
08A90:  CLRF   xE3
08A92:  CLRF   xE4
08A94:  CLRF   xE5
08A96:  CLRF   xE6
08A98:  CLRF   xE7
08A9A:  CLRF   xE8
08A9C:  CLRF   xE9
08A9E:  CLRF   xEA
08AA0:  CLRF   xEB
08AA2:  CLRF   xEC
08AA4:  CLRF   xED
08AA6:  CLRF   xEE
08AA8:  CLRF   xEF
08AAA:  CLRF   xF0
08AAC:  CLRF   xF1
08AAE:  CLRF   xF2
08AB0:  CLRF   xF3
08AB2:  CLRF   xF4
08AB4:  CLRF   xF5
08AB6:  CLRF   xF6
08AB8:  CLRF   xF7
08ABA:  CLRF   xF8
08ABC:  CLRF   xF9
08ABE:  CLRF   xFA
08AC0:  CLRF   xFB
08AC2:  CLRF   xFC
08AC4:  CLRF   xFD
08AC6:  CLRF   xFE
08AC8:  CLRF   xFF
08ACA:  MOVLB  3
08ACC:  CLRF   x00
08ACE:  CLRF   x01
08AD0:  CLRF   x02
08AD2:  CLRF   x03
08AD4:  CLRF   x04
08AD6:  CLRF   x05
08AD8:  CLRF   x06
08ADA:  CLRF   x07
08ADC:  CLRF   x08
08ADE:  CLRF   x09
08AE0:  CLRF   x0A
08AE2:  CLRF   x0B
08AE4:  CLRF   x0C
08AE6:  CLRF   x0D
08AE8:  CLRF   x0E
08AEA:  CLRF   x0F
08AEC:  CLRF   x10
08AEE:  CLRF   x11
08AF0:  CLRF   x12
08AF2:  CLRF   x13
08AF4:  CLRF   x14
08AF6:  CLRF   x15
08AF8:  CLRF   x16
08AFA:  CLRF   x17
08AFC:  CLRF   x18
08AFE:  CLRF   x19
08B00:  CLRF   x1A
08B02:  CLRF   x1B
08B04:  CLRF   x1C
08B06:  CLRF   x1D
08B08:  CLRF   x1E
08B0A:  CLRF   x1F
08B0C:  CLRF   x20
08B0E:  CLRF   x21
08B10:  CLRF   x22
08B12:  CLRF   x23
08B14:  CLRF   x24
08B16:  CLRF   x25
08B18:  CLRF   x26
08B1A:  CLRF   x27
08B1C:  CLRF   x28
08B1E:  CLRF   x29
08B20:  CLRF   x2A
08B22:  CLRF   x2B
08B24:  CLRF   x2C
08B26:  CLRF   x2D
08B28:  CLRF   x2E
08B2A:  CLRF   x2F
08B2C:  CLRF   x30
08B2E:  CLRF   x31
08B30:  CLRF   x32
08B32:  CLRF   x33
08B34:  CLRF   x34
08B36:  CLRF   x35
08B38:  CLRF   x36
08B3A:  CLRF   x37
08B3C:  CLRF   x38
08B3E:  CLRF   x39
08B40:  CLRF   x3A
08B42:  CLRF   x3B
08B44:  CLRF   x3C
08B46:  CLRF   x3D
08B48:  CLRF   x3E
08B4A:  CLRF   x3F
08B4C:  CLRF   x40
08B4E:  CLRF   x41
08B50:  CLRF   x42
08B52:  CLRF   x43
08B54:  CLRF   x44
08B56:  CLRF   x45
08B58:  CLRF   x46
08B5A:  CLRF   x47
08B5C:  CLRF   x48
08B5E:  CLRF   x49
08B60:  MOVLB  0
.................... { 
....................    delay_ms(500); // wait for power stable
08B62:  MOVLW  02
08B64:  MOVLB  3
08B66:  MOVWF  x82
08B68:  MOVLB  0
08B6A:  MOVLW  FA
08B6C:  MOVLB  8
08B6E:  MOVWF  x44
08B70:  MOVLB  0
08B72:  CALL   1694
08B76:  MOVLB  3
08B78:  DECFSZ x82,F
08B7A:  BRA    8B80
08B7C:  BRA    8B84
08B7E:  MOVLB  0
08B80:  MOVLB  0
08B82:  BRA    8B6A
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
08B84:  MOVLW  36
08B86:  MOVWF  FF6
08B88:  MOVLW  15
08B8A:  MOVWF  FF7
08B8C:  MOVLW  00
08B8E:  MOVWF  FF8
08B90:  MOVLB  0
08B92:  CALL   1714
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
08B96:  MOVLW  7C
08B98:  MOVWF  FF6
08B9A:  MOVLW  15
08B9C:  MOVWF  FF7
08B9E:  MOVLW  00
08BA0:  MOVWF  FF8
08BA2:  CALL   1714
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
08BA6:  MOVLW  AA
08BA8:  MOVWF  FF6
08BAA:  MOVLW  15
08BAC:  MOVWF  FF7
08BAE:  MOVLW  00
08BB0:  MOVWF  FF8
08BB2:  MOVLW  10
08BB4:  MOVLB  7
08BB6:  MOVWF  xEC
08BB8:  MOVLB  0
08BBA:  CALL   1744
08BBE:  MOVLW  D0
08BC0:  MOVWF  FF6
08BC2:  MOVLW  15
08BC4:  MOVWF  FF7
08BC6:  MOVLW  00
08BC8:  MOVWF  FF8
08BCA:  CALL   1714
08BCE:  MOVLW  20
08BD0:  MOVLB  8
08BD2:  MOVWF  x49
08BD4:  MOVLB  0
08BD6:  CALL   16C2
08BDA:  MOVLW  DA
08BDC:  MOVWF  FF6
08BDE:  MOVLW  15
08BE0:  MOVWF  FF7
08BE2:  MOVLW  00
08BE4:  MOVWF  FF8
08BE6:  CALL   1714
08BEA:  MOVLW  BF
08BEC:  MOVWF  FF6
08BEE:  MOVLW  15
08BF0:  MOVWF  FF7
08BF2:  MOVLW  00
08BF4:  MOVWF  FF8
08BF6:  MOVLW  0F
08BF8:  MOVLB  7
08BFA:  MOVWF  xEC
08BFC:  MOVLB  0
08BFE:  CALL   1744
....................    
....................    io_init();
08C02:  GOTO   177A
....................    //adc_init();
....................    setup_uart_to_boss();
08C06:  GOTO   17BE
....................    //setup_timer();
....................    ad7490_init();
08C0A:  GOTO   194A
....................    mcp4901_init();
08C0E:  GOTO   1BAC
....................    misf_init();
08C12:  CALL   22F4
....................    mcp4901_1_write(0);
08C16:  MOVLB  7
08C18:  CLRF   xED
08C1A:  CLRF   xEC
08C1C:  MOVLB  0
08C1E:  CALL   1B2E
....................    piclog_make(PICLOG_STARTUP,0x00);
08C22:  MOVFF  ED,492
08C26:  MOVLB  4
08C28:  CLRF   x93
08C2A:  MOVLB  0
08C2C:  CALL   3812
.................... 
....................    int1 is_finished = FALSE;
08C30:  MOVLB  3
08C32:  BCF    x75.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
08C34:  MOVLW  E4
08C36:  MOVWF  FF6
08C38:  MOVLW  15
08C3A:  MOVWF  FF7
08C3C:  MOVLW  00
08C3E:  MOVWF  FF8
08C40:  MOVLB  0
08C42:  CALL   1714
....................    
....................    //dac_cell.write_spi = spi_cell_write;
....................    //dac_cell.cs_pin = PIN_C0;
.................... 
....................    //mcp4911_init(&dac_cell);
.................... 
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
08C46:  MOVLW  0A
08C48:  MOVWF  FF6
08C4A:  MOVLW  16
08C4C:  MOVWF  FF7
08C4E:  MOVLW  00
08C50:  MOVWF  FF8
08C52:  CALL   1714
....................    
....................    //Start loop
....................    while(!is_finished)
08C56:  MOVLB  3
08C58:  BTFSS  x75.0
08C5A:  BRA    8C62
08C5C:  MOVLB  0
08C5E:  GOTO   8D30
08C62:  MOVLB  0
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
08C64:  MOVF   4B,F
08C66:  BTFSC  FD8.2
08C68:  GOTO   8CEC
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
08C6C:  MOVLB  3
08C6E:  CLRF   x89
08C70:  MOVLW  2B
08C72:  MOVWF  x88
08C74:  MOVFF  4B,38A
08C78:  MOVLB  0
08C7A:  GOTO   3D5A
08C7E:  MOVFF  02,03
08C82:  MOVF   01,W
08C84:  MOVWF  FE1
08C86:  MOVFF  03,FE2
08C8A:  MOVLW  03
08C8C:  MOVWF  FEA
08C8E:  MOVLW  76
08C90:  MOVWF  FE9
08C92:  MOVLW  0C
08C94:  MOVWF  01
08C96:  MOVFF  FE6,FEE
08C9A:  DECFSZ 01,F
08C9C:  GOTO   8C96
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
08CA0:  MOVLB  3
08CA2:  CLRF   x83
08CA4:  MOVLW  2B
08CA6:  MOVWF  x82
08CA8:  CLRF   x85
08CAA:  MOVLW  4B
08CAC:  MOVWF  x84
08CAE:  MOVLB  0
08CB0:  GOTO   3F7A
....................          
....................          if(recieve_cmd.is_exist)
08CB4:  MOVLB  3
08CB6:  BTFSC  x78.0
08CB8:  BRA    8CC0
08CBA:  MOVLB  0
08CBC:  GOTO   8CDC
08CC0:  MOVLB  0
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
08CC2:  MOVLW  03
08CC4:  MOVLB  3
08CC6:  MOVWF  x83
08CC8:  MOVLW  76
08CCA:  MOVWF  x82
08CCC:  MOVLB  0
08CCE:  GOTO   83A6
08CD2:  MOVLB  3
08CD4:  BCF    x75.1
08CD6:  BTFSC  01.0
08CD8:  BSF    x75.1
08CDA:  MOVLB  0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
08CDC:  MOVLW  28
08CDE:  MOVWF  FF6
08CE0:  MOVLW  16
08CE2:  MOVWF  FF7
08CE4:  MOVLW  00
08CE6:  MOVWF  FF8
08CE8:  CALL   1714
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
08CEC:  MOVLB  3
08CEE:  BTFSC  x75.0
08CF0:  BRA    8CF8
08CF2:  MOVLB  0
08CF4:  GOTO   8CFE
08CF8:  MOVLB  0
....................          break;
08CFA:  GOTO   8D30
....................          
....................       delay_ms(400);
08CFE:  MOVLW  02
08D00:  MOVLB  3
08D02:  MOVWF  x82
08D04:  MOVLB  0
08D06:  MOVLW  C8
08D08:  MOVLB  8
08D0A:  MOVWF  x44
08D0C:  MOVLB  0
08D0E:  CALL   1694
08D12:  MOVLB  3
08D14:  DECFSZ x82,F
08D16:  BRA    8D1C
08D18:  BRA    8D20
08D1A:  MOVLB  0
08D1C:  MOVLB  0
08D1E:  BRA    8D06
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
08D20:  MOVLW  2E
08D22:  MOVLB  8
08D24:  MOVWF  x49
08D26:  MOVLB  0
08D28:  CALL   16C2
08D2C:  GOTO   8C56
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
08D30:  MOVLW  48
08D32:  MOVWF  FF6
08D34:  MOVLW  16
08D36:  MOVWF  FF7
08D38:  MOVLW  00
08D3A:  MOVWF  FF8
08D3C:  CALL   1714
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
08D40:  MOVLW  2E
08D42:  MOVLB  8
08D44:  MOVWF  x49
08D46:  MOVLB  0
08D48:  CALL   16C2
....................       delay_ms(1000);
08D4C:  MOVLW  04
08D4E:  MOVLB  3
08D50:  MOVWF  x82
08D52:  MOVLB  0
08D54:  MOVLW  FA
08D56:  MOVLB  8
08D58:  MOVWF  x44
08D5A:  MOVLB  0
08D5C:  CALL   1694
08D60:  MOVLB  3
08D62:  DECFSZ x82,F
08D64:  BRA    8D6A
08D66:  BRA    8D6E
08D68:  MOVLB  0
08D6A:  MOVLB  0
08D6C:  BRA    8D54
08D6E:  MOVLB  0
08D70:  GOTO   8D40
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
08D74:  MOVLW  88
08D76:  MOVWF  FF6
08D78:  MOVLW  16
08D7A:  MOVWF  FF7
08D7C:  MOVLW  00
08D7E:  MOVWF  FF8
08D80:  CALL   1714
....................    
.................... }
.................... 
08D84:  SLEEP 
.................... // Enf of files

Configuration Fuses:
   Word  1: F7A0   STVREN NOXINST NODEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
