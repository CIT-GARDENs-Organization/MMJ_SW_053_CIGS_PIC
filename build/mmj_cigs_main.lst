CCS PCM C Compiler, Version 5.104, 57077               20-6-25 10:27

               Filename:   build\mmj_cigs_main.lst

               ROM used:   15060 words (92%)
                           Largest free fragment is 574
               RAM used:   1268 (62%) at main() level
                           1611 (79%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  38
0001:  GOTO   000
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06A
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005A:  DATA D4,34
005B:  DATA ED,32
005C:  DATA 72,10
005D:  DATA 49,37
005E:  DATA 69,3A
005F:  DATA E9,30
0060:  DATA EC,34
0061:  DATA FA,32
0062:  DATA 0D,05
0063:  DATA 00,00
0064:  DATA 89,21
0065:  DATA EF,36
0066:  DATA 70,36
0067:  DATA 65,3A
0068:  DATA E5,06
0069:  DATA 0A,00
*
0084:  DATA D5,20
0085:  DATA 52,2A
0086:  DATA A0,24
0087:  DATA EE,34
0088:  DATA F4,34
0089:  DATA 61,36
008A:  DATA 69,3D
008B:  DATA E5,06
008C:  DATA 0A,00
008D:  DATA 89,21
008E:  DATA EF,36
008F:  DATA 70,36
0090:  DATA 65,3A
0091:  DATA E5,06
0092:  DATA 0A,00
0093:  DATA CD,24
0094:  DATA D3,29
0095:  DATA C9,27
0096:  DATA 4E,10
0097:  DATA 46,26
0098:  DATA C1,29
0099:  DATA 48,10
009A:  DATA 49,37
009B:  DATA 69,3A
009C:  DATA E9,30
009D:  DATA EC,34
009E:  DATA FA,32
009F:  DATA 0D,05
00A0:  DATA 00,01
00A1:  DATA 09,23
00A2:  DATA EC,30
00A3:  DATA 73,34
00A4:  DATA A0,34
00A5:  DATA 73,10
00A6:  DATA EE,37
00A7:  DATA 74,10
00A8:  DATA E3,37
00A9:  DATA 6E,37
00AA:  DATA E5,31
00AB:  DATA F4,32
00AC:  DATA E4,06
00AD:  DATA 0A,00
00AE:  DATA 09,23
00AF:  DATA EC,30
00B0:  DATA 73,34
00B1:  DATA A0,34
00B2:  DATA 73,10
00B3:  DATA E3,37
00B4:  DATA 6E,37
00B5:  DATA E5,31
00B6:  DATA F4,32
00B7:  DATA E4,06
00B8:  DATA 0A,00
00B9:  DATA 89,36
00BA:  DATA E9,39
00BB:  DATA E6,2F
00BC:  DATA F0,34
00BD:  DATA 63,36
00BE:  DATA EF,33
00BF:  DATA DF,3A
00C0:  DATA F3,32
00C1:  DATA DF,31
00C2:  DATA EF,3A
00C3:  DATA 6E,3A
00C4:  DATA 65,39
00C5:  DATA 20,10
00C6:  DATA 20,10
00C7:  DATA 20,10
00C8:  DATA 20,10
00C9:  DATA 20,1D
00CA:  DATA A0,12
00CB:  DATA EC,3A
00CC:  DATA 0D,05
00CD:  DATA 00,00
00CE:  DATA 89,36
00CF:  DATA E9,39
00D0:  DATA E6,2F
00D1:  DATA F0,34
00D2:  DATA 63,36
00D3:  DATA EF,33
00D4:  DATA DF,3A
00D5:  DATA EE,31
00D6:  DATA 6F,38
00D7:  DATA F9,32
00D8:  DATA E4,2F
00D9:  DATA E3,37
00DA:  DATA 75,37
00DB:  DATA F4,32
00DC:  DATA 72,10
00DD:  DATA 20,10
00DE:  DATA 20,1D
00DF:  DATA A0,12
00E0:  DATA EC,3A
00E1:  DATA 0D,05
00E2:  DATA 00,01
00E3:  DATA 89,36
00E4:  DATA E9,39
00E5:  DATA E6,2F
00E6:  DATA F0,34
00E7:  DATA 63,36
00E8:  DATA EF,33
00E9:  DATA 5F,36
00EA:  DATA EF,37
00EB:  DATA F0,2F
00EC:  DATA E3,37
00ED:  DATA 75,37
00EE:  DATA F4,32
00EF:  DATA 72,10
00F0:  DATA 20,10
00F1:  DATA 20,10
00F2:  DATA 20,10
00F3:  DATA 20,1D
00F4:  DATA A0,12
00F5:  DATA F5,06
00F6:  DATA 0A,00
00F7:  DATA 89,21
00F8:  DATA EF,36
00F9:  DATA 70,36
00FA:  DATA 65,3A
00FB:  DATA E5,06
00FC:  DATA 0A,00
00FD:  DATA 55,38
00FE:  DATA E4,30
00FF:  DATA F4,32
0100:  DATA A0,26
0101:  DATA C9,29
0102:  DATA D3,24
0103:  DATA 4F,27
0104:  DATA 20,23
0105:  DATA CC,20
0106:  DATA 53,24
0107:  DATA A0,20
0108:  DATA 64,32
0109:  DATA F2,32
010A:  DATA F3,39
010B:  DATA A0,20
010C:  DATA F2,32
010D:  DATA E1,06
010E:  DATA 0A,00
010F:  DATA 5B,28
0110:  DATA C9,21
0111:  DATA CC,27
0112:  DATA C7,2E
0113:  DATA 20,1D
0114:  DATA 20,00
0115:  DATA CD,34
0116:  DATA F3,39
0117:  DATA E9,37
0118:  DATA 6E,10
0119:  DATA 46,36
011A:  DATA E1,39
011B:  DATA 68,10
011C:  DATA E9,39
011D:  DATA 20,37
011E:  DATA 6F,3A
011F:  DATA A0,31
0120:  DATA 6F,37
0121:  DATA EE,32
0122:  DATA 63,3A
0123:  DATA 65,32
0124:  DATA 0D,05
0125:  DATA 00,00
0126:  DATA C9,27
0127:  DATA A0,24
0128:  DATA EE,34
0129:  DATA F4,34
012A:  DATA 61,36
012B:  DATA 69,3D
012C:  DATA E5,06
012D:  DATA 0A,00
012E:  DATA 89,21
012F:  DATA EF,36
0130:  DATA 70,36
0131:  DATA 65,3A
0132:  DATA E5,06
0133:  DATA 0A,00
0134:  DATA 41,22
0135:  DATA 43,10
0136:  DATA 49,37
0137:  DATA 69,3A
0138:  DATA E9,30
0139:  DATA EC,34
013A:  DATA FA,32
013B:  DATA 0D,05
013C:  DATA 00,01
013D:  DATA 89,21
013E:  DATA EF,36
013F:  DATA 70,36
0140:  DATA 65,3A
0141:  DATA E5,06
0142:  DATA 0A,00
0143:  DATA 53,3A
0144:  DATA 61,39
0145:  DATA 74,10
0146:  DATA D3,2B
0147:  DATA C5,22
0148:  DATA D0,06
0149:  DATA 0A,00
014A:  DATA 89,29
014B:  DATA F7,32
014C:  DATA 65,38
014D:  DATA A0,39
014E:  DATA F4,32
014F:  DATA 70,10
0150:  DATA 3A,10
0151:  DATA A5,3A
0152:  DATA 0D,05
0153:  DATA 00,01
0154:  DATA 45,27
0155:  DATA 44,10
0156:  DATA D3,2B
0157:  DATA C5,22
0158:  DATA D0,06
0159:  DATA 0A,00
015A:  DATA CC,37
015B:  DATA E7,33
015C:  DATA 65,32
015D:  DATA A0,21
015E:  DATA C9,23
015F:  DATA 53,10
0160:  DATA E4,30
0161:  DATA F4,30
0162:  DATA 0D,05
0163:  DATA 80,00
0164:  DATA D3,26
0165:  DATA 46,10
0166:  DATA E4,30
0167:  DATA F4,30
0168:  DATA 20,36
0169:  DATA E9,39
016A:  DATA 74,10
016B:  DATA E9,39
016C:  DATA 20,33
016D:  DATA 75,36
016E:  DATA EC,10
016F:  DATA A1,10
0170:  DATA 0D,05
0171:  DATA 00,00
0172:  DATA D3,26
0173:  DATA 46,10
0174:  DATA E4,30
0175:  DATA F4,30
0176:  DATA 20,36
0177:  DATA E9,39
0178:  DATA 74,10
0179:  DATA E9,39
017A:  DATA A0,32
017B:  DATA 6D,38
017C:  DATA F4,3C
017D:  DATA 0D,05
017E:  DATA 00,00
017F:  DATA 0D,05
0180:  DATA 53,3A
0181:  DATA 61,39
0182:  DATA 74,10
0183:  DATA ED,30
0184:  DATA EB,32
0185:  DATA 5F,39
0186:  DATA E5,31
0187:  DATA E5,34
0188:  DATA F6,32
0189:  DATA DF,31
018A:  DATA EF,36
018B:  DATA ED,30
018C:  DATA 6E,32
018D:  DATA 0D,05
018E:  DATA 00,01
018F:  DATA 89,2D
0190:  DATA C2,27
0191:  DATA D3,29
0192:  DATA 5D,10
0193:  DATA 3E,1F
0194:  DATA 3E,10
0195:  DATA 00,01
0196:  DATA 45,37
0197:  DATA 64,10
0198:  DATA ED,30
0199:  DATA EB,32
019A:  DATA 5F,39
019B:  DATA E5,31
019C:  DATA 69,3B
019D:  DATA E5,2F
019E:  DATA E3,37
019F:  DATA ED,36
01A0:  DATA 61,37
01A1:  DATA E4,06
01A2:  DATA 8A,06
01A3:  DATA 0A,00
01A4:  DATA F3,34
01A5:  DATA 67,37
01A6:  DATA 61,36
01A7:  DATA A0,32
01A8:  DATA 6E,32
01A9:  DATA A0,3B
01AA:  DATA 69,3A
01AB:  DATA 68,10
01AC:  DATA 53,23
01AD:  DATA C4,06
01AE:  DATA 0A,00
01AF:  DATA E4,37
01B0:  DATA EE,13
01B1:  DATA 74,10
01B2:  DATA E6,34
01B3:  DATA 6E,32
01B4:  DATA A0,29
01B5:  DATA 46,22
01B6:  DATA 0D,05
01B7:  DATA 00,00
01B8:  DATA 89,16
01B9:  DATA 3E,10
01BA:  DATA 49,37
01BB:  DATA F6,30
01BC:  DATA EC,34
01BD:  DATA 64,10
01BE:  DATA 46,39
01BF:  DATA E1,36
01C0:  DATA 65,10
01C1:  DATA 49,22
01C2:  DATA 20,39
01C3:  DATA E5,31
01C4:  DATA E5,34
01C5:  DATA F6,32
01C6:  DATA 64,1D
01C7:  DATA A0,12
01C8:  DATA D8,06
01C9:  DATA 0A,00
01CA:  DATA 89,16
01CB:  DATA 3E,10
01CC:  DATA 43,29
01CD:  DATA 43,10
01CE:  DATA 65,39
01CF:  DATA F2,37
01D0:  DATA F2,10
01D1:  DATA 0D,05
01D2:  DATA 00,01
01D3:  DATA 89,04
01D4:  DATA 2D,1F
01D5:  DATA 20,39
01D6:  DATA E5,31
01D7:  DATA E5,34
01D8:  DATA F6,32
01D9:  DATA 64,10
01DA:  DATA 43,29
01DB:  DATA 43,1D
01DC:  DATA A0,12
01DD:  DATA D8,06
01DE:  DATA 0A,00
01DF:  DATA 89,04
01E0:  DATA 20,10
01E1:  DATA A0,31
01E2:  DATA 6F,36
01E3:  DATA EC,32
01E4:  DATA 63,3A
01E5:  DATA A0,21
01E6:  DATA D2,21
01E7:  DATA 20,1D
01E8:  DATA A0,12
01E9:  DATA D8,06
01EA:  DATA 0A,00
01EB:  DATA 89,16
01EC:  DATA 3E,10
01ED:  DATA 49,37
01EE:  DATA F6,30
01EF:  DATA EC,34
01F0:  DATA 64,10
01F1:  DATA E4,32
01F2:  DATA F6,34
01F3:  DATA E3,32
01F4:  DATA A0,24
01F5:  DATA 44,10
01F6:  DATA F2,32
01F7:  DATA E3,32
01F8:  DATA 69,3B
01F9:  DATA 65,32
01FA:  DATA 0D,05
01FB:  DATA 00,01
01FC:  DATA 89,04
01FD:  DATA 2D,1F
01FE:  DATA 20,39
01FF:  DATA E5,31
0200:  DATA E5,34
0201:  DATA F6,32
0202:  DATA 64,1D
0203:  DATA 20,10
0204:  DATA 20,10
0205:  DATA A0,12
0206:  DATA D8,06
0207:  DATA 0A,00
0208:  DATA 89,04
0209:  DATA 20,10
020A:  DATA A0,26
020B:  DATA 79,10
020C:  DATA E4,32
020D:  DATA F6,34
020E:  DATA E3,32
020F:  DATA A0,24
0210:  DATA 44,1D
0211:  DATA A0,12
0212:  DATA D8,06
0213:  DATA 0A,00
0214:  DATA 89,2D
0215:  DATA C2,27
0216:  DATA D3,29
0217:  DATA 5D,10
0218:  DATA 3C,1E
0219:  DATA 3C,10
021A:  DATA 00,01
021B:  DATA 89,16
021C:  DATA 3E,10
021D:  DATA 46,39
021E:  DATA E1,36
021F:  DATA 65,10
0220:  DATA 49,22
0221:  DATA 3A,10
0222:  DATA 25,2C
0223:  DATA 0D,05
0224:  DATA 00,01
0225:  DATA 89,16
0226:  DATA 3E,10
0227:  DATA C3,37
0228:  DATA 6E,3A
0229:  DATA 65,37
022A:  DATA 74,10
022B:  DATA F3,34
022C:  DATA FA,32
022D:  DATA 3A,10
022E:  DATA 25,32
022F:  DATA 0D,05
0230:  DATA 00,10
0231:  DATA 53,3A
0232:  DATA 61,39
0233:  DATA 74,10
0234:  DATA D3,26
0235:  DATA 46,10
0236:  DATA F5,39
0237:  DATA 69,37
0238:  DATA 67,10
0239:  DATA F2,32
023A:  DATA F1,32
023B:  DATA 73,3A
023C:  DATA A0,39
023D:  DATA E5,30
023E:  DATA F1,3A
023F:  DATA 65,37
0240:  DATA E3,32
0241:  DATA 0D,05
0242:  DATA 00,01
0243:  DATA 45,39
0244:  DATA F2,37
0245:  DATA F2,10
0246:  DATA 20,29
0247:  DATA E5,31
0248:  DATA E5,34
0249:  DATA F6,34
024A:  DATA EE,33
024B:  DATA A0,31
024C:  DATA EF,36
024D:  DATA ED,30
024E:  DATA 6E,32
024F:  DATA A0,34
0250:  DATA EE,31
0251:  DATA 6F,37
0252:  DATA F3,34
0253:  DATA 73,3A
0254:  DATA 65,37
0255:  DATA 74,10
0256:  DATA F7,34
0257:  DATA 74,34
0258:  DATA 20,3A
0259:  DATA E8,32
025A:  DATA 20,32
025B:  DATA E5,39
025C:  DATA E9,33
025D:  DATA EE,06
025E:  DATA 0A,00
025F:  DATA D3,26
0260:  DATA 46,10
0261:  DATA F5,39
0262:  DATA 65,10
0263:  DATA F2,32
0264:  DATA F1,3A
0265:  DATA E5,39
0266:  DATA 74,10
0267:  DATA 61,36
0268:  DATA EC,37
0269:  DATA F7,32
026A:  DATA E4,06
026B:  DATA 0A,00
026C:  DATA D3,26
026D:  DATA 46,10
026E:  DATA F5,39
026F:  DATA 65,10
0270:  DATA F2,32
0271:  DATA F1,3A
0272:  DATA E5,39
0273:  DATA 74,10
0274:  DATA E4,32
0275:  DATA EE,3C
0276:  DATA 65,32
0277:  DATA 0D,05
0278:  DATA 00,01
0279:  DATA D2,32
027A:  DATA 74,39
027B:  DATA 79,10
027C:  DATA F2,32
027D:  DATA F1,3A
027E:  DATA E5,39
027F:  DATA 74,10
0280:  DATA F4,37
0281:  DATA 20,21
0282:  DATA CF,29
0283:  DATA 53,10
0284:  DATA D0,24
0285:  DATA C3,06
0286:  DATA 0A,00
0287:  DATA 45,39
0288:  DATA F2,37
0289:  DATA F2,10
028A:  DATA 20,29
028B:  DATA E5,31
028C:  DATA E5,34
028D:  DATA F6,34
028E:  DATA EE,33
028F:  DATA A0,31
0290:  DATA EF,36
0291:  DATA ED,30
0292:  DATA 6E,32
0293:  DATA A0,34
0294:  DATA EE,31
0295:  DATA 6F,37
0296:  DATA F3,34
0297:  DATA 73,3A
0298:  DATA 65,37
0299:  DATA 74,10
029A:  DATA F7,34
029B:  DATA 74,34
029C:  DATA 20,3A
029D:  DATA E8,32
029E:  DATA 20,32
029F:  DATA E5,39
02A0:  DATA E9,33
02A1:  DATA EE,06
02A2:  DATA 0A,00
02A3:  DATA 45,37
02A4:  DATA 64,10
02A5:  DATA D3,26
02A6:  DATA 46,10
02A7:  DATA F5,39
02A8:  DATA 69,37
02A9:  DATA 67,10
02AA:  DATA F2,32
02AB:  DATA F1,32
02AC:  DATA 73,3A
02AD:  DATA A0,39
02AE:  DATA E5,30
02AF:  DATA F1,3A
02B0:  DATA 65,37
02B1:  DATA E3,32
02B2:  DATA 0D,05
02B3:  DATA 00,00
02B4:  DATA 53,3A
02B5:  DATA 61,39
02B6:  DATA 74,10
02B7:  DATA CD,27
02B8:  DATA C4,22
02B9:  DATA A0,26
02BA:  DATA C5,20
02BB:  DATA D3,2A
02BC:  DATA D2,22
02BD:  DATA 0D,05
02BE:  DATA 00,00
02BF:  DATA 53,3A
02C0:  DATA 61,39
02C1:  DATA 74,10
02C2:  DATA CD,27
02C3:  DATA C4,22
02C4:  DATA A0,26
02C5:  DATA C5,20
02C6:  DATA D3,2A
02C7:  DATA D2,22
02C8:  DATA 20,2B
02C9:  DATA 6F,36
02CA:  DATA F4,30
02CB:  DATA E7,32
02CC:  DATA 0D,05
02CD:  DATA 00,00
02CE:  DATA 53,3A
02CF:  DATA 61,39
02D0:  DATA 74,10
02D1:  DATA D3,2B
02D2:  DATA C5,22
02D3:  DATA D0,06
02D4:  DATA 0A,00
02D5:  DATA 89,29
02D6:  DATA F7,32
02D7:  DATA 65,38
02D8:  DATA A0,39
02D9:  DATA F4,32
02DA:  DATA 70,10
02DB:  DATA 3A,10
02DC:  DATA A5,3A
02DD:  DATA 0D,05
02DE:  DATA 00,01
02DF:  DATA 45,27
02E0:  DATA 44,10
02E1:  DATA D3,2B
02E2:  DATA C5,22
02E3:  DATA D0,06
02E4:  DATA 0A,00
02E5:  DATA F4,32
02E6:  DATA 6D,38
02E7:  DATA 5F,3A
02E8:  DATA 6F,38
02E9:  DATA 3A,10
02EA:  DATA 25,2C
02EB:  DATA 0D,05
02EC:  DATA 00,01
02ED:  DATA F4,32
02EE:  DATA 6D,38
02EF:  DATA 5F,31
02F0:  DATA 6F,3A
02F1:  DATA 3A,10
02F2:  DATA 25,2C
02F3:  DATA 0D,05
02F4:  DATA 00,00
02F5:  DATA 70,32
02F6:  DATA 5F,3B
02F7:  DATA 61,36
02F8:  DATA F5,32
02F9:  DATA 3A,10
02FA:  DATA 25,2C
02FB:  DATA 0D,05
02FC:  DATA 00,00
02FD:  DATA E3,34
02FE:  DATA E7,39
02FF:  DATA 5F,3B
0300:  DATA 61,36
0301:  DATA F5,32
0302:  DATA 3A,10
0303:  DATA 25,2C
0304:  DATA 0D,05
0305:  DATA 00,00
0306:  DATA E3,3A
0307:  DATA 72,39
0308:  DATA 65,37
0309:  DATA F4,2F
030A:  DATA F6,30
030B:  DATA EC,3A
030C:  DATA 65,1D
030D:  DATA A0,12
030E:  DATA D8,06
030F:  DATA 0A,00
0310:  DATA F6,37
0311:  DATA 6C,3A
0312:  DATA E1,33
0313:  DATA E5,2F
0314:  DATA F6,30
0315:  DATA EC,3A
0316:  DATA 65,1D
0317:  DATA A0,12
0318:  DATA D8,06
0319:  DATA 0A,00
031A:  DATA 53,3A
031B:  DATA 61,39
031C:  DATA 74,10
031D:  DATA 46,36
031E:  DATA E1,39
031F:  DATA 68,10
0320:  DATA 45,39
0321:  DATA E1,39
0322:  DATA 65,10
0323:  DATA 41,36
0324:  DATA EC,06
0325:  DATA 0A,00
0326:  DATA 45,37
0327:  DATA 64,10
0328:  DATA 46,36
0329:  DATA E1,39
032A:  DATA 68,10
032B:  DATA 45,39
032C:  DATA E1,39
032D:  DATA 65,10
032E:  DATA 41,36
032F:  DATA EC,06
0330:  DATA 0A,00
0331:  DATA 53,3A
0332:  DATA 61,39
0333:  DATA 74,10
0334:  DATA 46,36
0335:  DATA E1,39
0336:  DATA 68,10
0337:  DATA 45,39
0338:  DATA E1,39
0339:  DATA 65,10
033A:  DATA 31,10
033B:  DATA D3,32
033C:  DATA 63,3A
033D:  DATA 6F,39
033E:  DATA 0D,05
033F:  DATA 00,01
0340:  DATA 45,37
0341:  DATA 64,10
0342:  DATA 46,36
0343:  DATA E1,39
0344:  DATA 68,10
0345:  DATA 45,39
0346:  DATA E1,39
0347:  DATA 65,10
0348:  DATA 31,10
0349:  DATA D3,32
034A:  DATA 63,3A
034B:  DATA 6F,39
034C:  DATA 0D,05
034D:  DATA 00,00
034E:  DATA 53,3A
034F:  DATA 61,39
0350:  DATA 74,10
0351:  DATA 46,36
0352:  DATA E1,39
0353:  DATA 68,10
0354:  DATA C3,37
0355:  DATA F0,3C
0356:  DATA A0,18
0357:  DATA A0,29
0358:  DATA E5,31
0359:  DATA F4,37
035A:  DATA F2,06
035B:  DATA 0A,00
035C:  DATA 45,37
035D:  DATA 64,10
035E:  DATA 46,36
035F:  DATA E1,39
0360:  DATA 68,10
0361:  DATA C3,37
0362:  DATA F0,3C
0363:  DATA A0,18
0364:  DATA A0,29
0365:  DATA E5,31
0366:  DATA F4,37
0367:  DATA F2,06
0368:  DATA 0A,00
0369:  DATA 53,3A
036A:  DATA 61,39
036B:  DATA 74,10
036C:  DATA 46,36
036D:  DATA E1,39
036E:  DATA 68,10
036F:  DATA 57,39
0370:  DATA 69,3A
0371:  DATA 65,10
0372:  DATA C4,32
0373:  DATA ED,37
0374:  DATA 0D,05
0375:  DATA 00,01
0376:  DATA 45,37
0377:  DATA 64,10
0378:  DATA 46,36
0379:  DATA E1,39
037A:  DATA 68,10
037B:  DATA 57,39
037C:  DATA 69,3A
037D:  DATA 65,10
037E:  DATA C4,32
037F:  DATA ED,37
0380:  DATA 0D,05
0381:  DATA 00,01
0382:  DATA D2,32
0383:  DATA 61,32
0384:  DATA 20,22
0385:  DATA 61,3A
0386:  DATA 61,1D
0387:  DATA A0,12
0388:  DATA 30,19
0389:  DATA 58,10
038A:  DATA 25,18
038B:  DATA 32,2C
038C:  DATA A0,12
038D:  DATA 30,19
038E:  DATA 58,10
038F:  DATA 25,18
0390:  DATA 32,2C
0391:  DATA 0D,05
0392:  DATA 00,01
0393:  DATA D2,32
0394:  DATA 61,32
0395:  DATA 20,22
0396:  DATA 61,3A
0397:  DATA 61,1D
0398:  DATA A0,12
0399:  DATA 30,19
039A:  DATA 58,10
039B:  DATA 25,18
039C:  DATA 32,2C
039D:  DATA A0,12
039E:  DATA 30,19
039F:  DATA 58,10
03A0:  DATA 25,18
03A1:  DATA 32,2C
03A2:  DATA 0D,05
03A3:  DATA 00,01
03A4:  DATA 45,37
03A5:  DATA 64,10
03A6:  DATA 46,36
03A7:  DATA E1,39
03A8:  DATA 68,10
03A9:  DATA 57,39
03AA:  DATA 69,3A
03AB:  DATA 65,10
03AC:  DATA C4,32
03AD:  DATA ED,37
03AE:  DATA 0D,05
03AF:  DATA 00,00
03B0:  DATA 53,3A
03B1:  DATA 61,39
03B2:  DATA 74,10
03B3:  DATA 46,36
03B4:  DATA E1,39
03B5:  DATA 68,10
03B6:  DATA 57,39
03B7:  DATA 69,3A
03B8:  DATA 65,10
03B9:  DATA B4,35
03BA:  DATA C2,3C
03BB:  DATA F4,32
03BC:  DATA A0,29
03BD:  DATA 75,31
03BE:  DATA F3,32
03BF:  DATA 63,3A
03C0:  DATA 6F,39
03C1:  DATA 0D,05
03C2:  DATA 00,01
03C3:  DATA 45,37
03C4:  DATA 64,10
03C5:  DATA 46,36
03C6:  DATA E1,39
03C7:  DATA 68,10
03C8:  DATA 57,39
03C9:  DATA 69,3A
03CA:  DATA 65,10
03CB:  DATA B4,35
03CC:  DATA C2,3C
03CD:  DATA F4,32
03CE:  DATA A0,29
03CF:  DATA 75,31
03D0:  DATA F3,32
03D1:  DATA 63,3A
03D2:  DATA 6F,39
03D3:  DATA 0D,05
03D4:  DATA 00,00
03D5:  DATA 53,3A
03D6:  DATA 61,39
03D7:  DATA 74,10
03D8:  DATA 46,36
03D9:  DATA E1,39
03DA:  DATA 68,10
03DB:  DATA D2,32
03DC:  DATA 61,32
03DD:  DATA 0D,05
03DE:  DATA 00,01
03DF:  DATA 89,26
03E0:  DATA 4F,22
03E1:  DATA 45,10
03E2:  DATA 20,10
03E3:  DATA 20,10
03E4:  DATA 3A,10
03E5:  DATA 25,18
03E6:  DATA 32,2C
03E7:  DATA 0D,05
03E8:  DATA 00,01
03E9:  DATA 89,20
03EA:  DATA 64,32
03EB:  DATA F2,32
03EC:  DATA F3,39
03ED:  DATA 20,10
03EE:  DATA 3A,10
03EF:  DATA 30,3C
03F0:  DATA 25,18
03F1:  DATA 38,26
03F2:  DATA D8,06
03F3:  DATA 0A,00
03F4:  DATA 09,28
03F5:  DATA E1,31
03F6:  DATA EB,32
03F7:  DATA 74,27
03F8:  DATA F5,36
03F9:  DATA 3A,10
03FA:  DATA 30,3C
03FB:  DATA 25,18
03FC:  DATA 34,26
03FD:  DATA D8,06
03FE:  DATA 0A,00
03FF:  DATA D2,22
0400:  DATA 41,22
0401:  DATA 20,22
0402:  DATA 41,2A
0403:  DATA C1,06
0404:  DATA 0A,00
0405:  DATA 45,37
0406:  DATA 64,10
0407:  DATA 46,36
0408:  DATA E1,39
0409:  DATA 68,10
040A:  DATA D2,32
040B:  DATA 61,32
040C:  DATA 0D,05
040D:  DATA 00,00
040E:  DATA 53,3A
040F:  DATA 61,39
0410:  DATA 74,10
0411:  DATA 46,36
0412:  DATA E1,39
0413:  DATA 68,10
0414:  DATA D2,32
0415:  DATA 61,32
0416:  DATA A0,20
0417:  DATA 64,32
0418:  DATA F2,32
0419:  DATA F3,39
041A:  DATA 0D,05
041B:  DATA 00,01
041C:  DATA D2,32
041D:  DATA 61,32
041E:  DATA 20,22
041F:  DATA 61,3A
0420:  DATA 61,1D
0421:  DATA A0,12
0422:  DATA 30,19
0423:  DATA 58,10
0424:  DATA 25,18
0425:  DATA 32,2C
0426:  DATA A0,12
0427:  DATA 30,19
0428:  DATA 58,10
0429:  DATA 25,18
042A:  DATA 32,2C
042B:  DATA 0D,05
042C:  DATA 00,01
042D:  DATA 45,37
042E:  DATA 64,10
042F:  DATA 46,36
0430:  DATA E1,39
0431:  DATA 68,10
0432:  DATA D2,32
0433:  DATA 61,32
0434:  DATA A0,20
0435:  DATA 64,32
0436:  DATA F2,32
0437:  DATA F3,39
0438:  DATA 0D,05
0439:  DATA 00,00
043A:  DATA 53,3A
043B:  DATA 61,39
043C:  DATA 74,10
043D:  DATA 46,36
043E:  DATA E1,39
043F:  DATA 68,10
0440:  DATA D3,26
0441:  DATA 46,10
0442:  DATA C3,37
0443:  DATA F0,3C
0444:  DATA 0D,05
0445:  DATA 00,01
0446:  DATA 45,37
0447:  DATA 64,10
0448:  DATA 46,36
0449:  DATA E1,39
044A:  DATA 68,10
044B:  DATA D3,26
044C:  DATA 46,10
044D:  DATA C3,37
044E:  DATA F0,3C
044F:  DATA 0D,05
0450:  DATA 00,00
0451:  DATA 53,3A
0452:  DATA 61,39
0453:  DATA 74,10
0454:  DATA 46,36
0455:  DATA E1,39
0456:  DATA 68,10
0457:  DATA D3,26
0458:  DATA 46,10
0459:  DATA D2,32
045A:  DATA 61,32
045B:  DATA 0D,05
045C:  DATA 00,01
045D:  DATA D2,32
045E:  DATA 61,32
045F:  DATA 20,22
0460:  DATA 61,3A
0461:  DATA 61,1D
0462:  DATA 20,00
0463:  DATA 0D,05
0464:  DATA 45,37
0465:  DATA 64,10
0466:  DATA 46,36
0467:  DATA E1,39
0468:  DATA 68,10
0469:  DATA D3,26
046A:  DATA 46,10
046B:  DATA D2,32
046C:  DATA 61,32
046D:  DATA 0D,05
046E:  DATA 00,00
046F:  DATA 53,3A
0470:  DATA 61,39
0471:  DATA 74,10
0472:  DATA 46,36
0473:  DATA E1,39
0474:  DATA 68,10
0475:  DATA D3,26
0476:  DATA 46,10
0477:  DATA 57,39
0478:  DATA 69,3A
0479:  DATA E5,06
047A:  DATA 0A,00
047B:  DATA 45,37
047C:  DATA 64,10
047D:  DATA 46,36
047E:  DATA E1,39
047F:  DATA 68,10
0480:  DATA D3,26
0481:  DATA 46,10
0482:  DATA 57,39
0483:  DATA 69,3A
0484:  DATA E5,06
0485:  DATA 0A,00
0486:  DATA 53,3A
0487:  DATA 61,39
0488:  DATA 74,10
0489:  DATA 46,36
048A:  DATA E1,39
048B:  DATA 68,10
048C:  DATA 41,32
048D:  DATA 64,39
048E:  DATA E5,39
048F:  DATA 73,10
0490:  DATA D2,32
0491:  DATA F3,32
0492:  DATA F4,06
0493:  DATA 0A,00
0494:  DATA 45,37
0495:  DATA 64,10
0496:  DATA 46,36
0497:  DATA E1,39
0498:  DATA 68,10
0499:  DATA 41,32
049A:  DATA 64,39
049B:  DATA E5,39
049C:  DATA 73,10
049D:  DATA D2,32
049E:  DATA F3,32
049F:  DATA F4,06
04A0:  DATA 0A,00
04A1:  DATA 0D,05
04A2:  DATA DF,2F
04A3:  DATA DF,2F
04A4:  DATA DF,2F
04A5:  DATA DF,2F
04A6:  DATA DF,2F
04A7:  DATA DF,2F
04A8:  DATA DF,2F
04A9:  DATA DF,2F
04AA:  DATA DF,2F
04AB:  DATA DF,2F
04AC:  DATA 0D,05
04AD:  DATA 00,01
04AE:  DATA DF,2F
04AF:  DATA DF,29
04B0:  DATA F4,30
04B1:  DATA 72,3A
04B2:  DATA A0,31
04B3:  DATA 6F,38
04B4:  DATA F9,2F
04B5:  DATA E4,30
04B6:  DATA F4,30
04B7:  DATA DF,2F
04B8:  DATA 0D,05
04B9:  DATA 00,01
04BA:  DATA 53,3A
04BB:  DATA 61,39
04BC:  DATA 74,10
04BD:  DATA DB,12
04BE:  DATA 64,10
04BF:  DATA 74,34
04C0:  DATA 5D,10
04C1:  DATA E4,30
04C2:  DATA F4,30
04C3:  DATA A0,31
04C4:  DATA 6F,38
04C5:  DATA F9,06
04C6:  DATA 8A,06
04C7:  DATA 0A,00
04C8:  DATA 0D,05
04C9:  DATA DF,2F
04CA:  DATA DF,22
04CB:  DATA 6E,32
04CC:  DATA A0,31
04CD:  DATA 6F,38
04CE:  DATA F9,2F
04CF:  DATA E4,30
04D0:  DATA F4,30
04D1:  DATA DF,2F
04D2:  DATA DF,2F
04D3:  DATA 0D,05
04D4:  DATA 00,01
04D5:  DATA DF,2F
04D6:  DATA DF,2F
04D7:  DATA DF,2F
04D8:  DATA DF,2F
04D9:  DATA DF,2F
04DA:  DATA DF,2F
04DB:  DATA DF,2F
04DC:  DATA DF,2F
04DD:  DATA DF,2F
04DE:  DATA DF,2F
04DF:  DATA 0D,05
04E0:  DATA 0D,05
04E1:  DATA 00,00
04E2:  DATA 49,37
04E3:  DATA A0,39
04E4:  DATA 6D,33
04E5:  DATA A0,36
04E6:  DATA E9,39
04E7:  DATA F3,34
04E8:  DATA 6F,37
04E9:  DATA 20,32
04EA:  DATA 61,3A
04EB:  DATA 61,10
04EC:  DATA 73,3A
04ED:  DATA 61,39
04EE:  DATA 74,10
04EF:  DATA 20,10
04F0:  DATA 61,32
04F1:  DATA 64,39
04F2:  DATA E5,39
04F3:  DATA 73,1D
04F4:  DATA A0,12
04F5:  DATA 4C,2C
04F6:  DATA 0D,05
04F7:  DATA 00,01
04F8:  DATA 49,37
04F9:  DATA A0,39
04FA:  DATA 6D,33
04FB:  DATA A0,36
04FC:  DATA E9,39
04FD:  DATA F3,34
04FE:  DATA 6F,37
04FF:  DATA 20,32
0500:  DATA 61,3A
0501:  DATA 61,10
0502:  DATA 65,37
0503:  DATA 64,10
0504:  DATA 20,10
0505:  DATA 20,10
0506:  DATA 61,32
0507:  DATA 64,39
0508:  DATA E5,39
0509:  DATA 73,1D
050A:  DATA A0,12
050B:  DATA 4C,2C
050C:  DATA 0D,05
050D:  DATA 00,01
050E:  DATA 49,37
050F:  DATA A0,26
0510:  DATA C9,29
0511:  DATA 20,23
0512:  DATA 4D,10
0513:  DATA 57,39
0514:  DATA 69,3A
0515:  DATA 65,10
0516:  DATA F3,37
0517:  DATA 75,39
0518:  DATA E3,32
0519:  DATA 20,32
051A:  DATA 61,3A
051B:  DATA 61,10
051C:  DATA 61,32
051D:  DATA 64,39
051E:  DATA E5,39
051F:  DATA 73,1D
0520:  DATA A0,12
0521:  DATA 4C,2C
0522:  DATA 0D,05
0523:  DATA 00,01
0524:  DATA 49,37
0525:  DATA A0,26
0526:  DATA C9,29
0527:  DATA 20,23
0528:  DATA 4D,10
0529:  DATA 57,39
052A:  DATA 69,3A
052B:  DATA 65,10
052C:  DATA E4,30
052D:  DATA F4,30
052E:  DATA A0,39
052F:  DATA 69,3D
0530:  DATA 65,10
0531:  DATA 20,10
0532:  DATA 20,10
0533:  DATA 20,10
0534:  DATA 20,10
0535:  DATA 20,1D
0536:  DATA A0,12
0537:  DATA EC,3A
0538:  DATA 0D,05
0539:  DATA 0D,05
053A:  DATA 00,01
053B:  DATA D3,34
053C:  DATA FA,32
053D:  DATA A0,30
053E:  DATA F2,32
053F:  DATA 61,10
0540:  DATA F2,32
0541:  DATA 61,32
0542:  DATA 0D,05
0543:  DATA 00,01
0544:  DATA F5,39
0545:  DATA 65,32
0546:  DATA DF,39
0547:  DATA 69,3D
0548:  DATA 65,10
0549:  DATA 3D,10
054A:  DATA 25,36
054B:  DATA 75,10
054C:  DATA A8,39
054D:  DATA F2,31
054E:  DATA 20,18
054F:  DATA F8,12
0550:  DATA 30,1C
0551:  DATA 4C,2C
0552:  DATA A9,06
0553:  DATA 0A,00
0554:  DATA EC,37
0555:  DATA 6F,38
0556:  DATA A0,31
0557:  DATA EF,3A
0558:  DATA 6E,3A
0559:  DATA 3D,10
055A:  DATA 25,32
055B:  DATA 20,10
055C:  DATA A8,39
055D:  DATA F2,31
055E:  DATA 20,18
055F:  DATA F8,12
0560:  DATA 30,1C
0561:  DATA 4C,2C
0562:  DATA A9,06
0563:  DATA 8A,06
0564:  DATA 0A,00
0565:  DATA 57,39
0566:  DATA 61,38
0567:  DATA 20,3A
0568:  DATA F2,34
0569:  DATA E7,33
056A:  DATA 65,39
056B:  DATA 65,32
056C:  DATA 3A,10
056D:  DATA D2,32
056E:  DATA F3,32
056F:  DATA 74,3A
0570:  DATA 69,37
0571:  DATA 67,10
0572:  DATA E4,30
0573:  DATA F4,30
0574:  DATA DF,3B
0575:  DATA F2,34
0576:  DATA F4,32
0577:  DATA DF,30
0578:  DATA 64,32
0579:  DATA 72,10
057A:  DATA F4,37
057B:  DATA A0,39
057C:  DATA F4,30
057D:  DATA 72,3A
057E:  DATA 0D,05
057F:  DATA 00,00
0580:  DATA 55,38
0581:  DATA E4,30
0582:  DATA F4,32
0583:  DATA A0,39
0584:  DATA 69,3D
0585:  DATA 65,10
0586:  DATA 61,39
0587:  DATA E5,30
0588:  DATA 0D,05
0589:  DATA 00,01
058A:  DATA F5,39
058B:  DATA 65,32
058C:  DATA DF,39
058D:  DATA 69,3D
058E:  DATA 65,10
058F:  DATA 3D,10
0590:  DATA 25,36
0591:  DATA E4,06
0592:  DATA 0A,00
0593:  DATA EC,37
0594:  DATA 6F,38
0595:  DATA DF,31
0596:  DATA EF,3A
0597:  DATA 6E,3A
0598:  DATA A0,1E
0599:  DATA A0,12
059A:  DATA F5,06
059B:  DATA 8A,06
059C:  DATA 0A,00
059D:  DATA 0D,05
059E:  DATA DF,2F
059F:  DATA DF,2F
05A0:  DATA DF,2F
05A1:  DATA DF,2F
05A2:  DATA DF,2F
05A3:  DATA DF,2F
05A4:  DATA DF,2F
05A5:  DATA DF,2F
05A6:  DATA DF,2F
05A7:  DATA DF,2F
05A8:  DATA DF,2F
05A9:  DATA DF,2F
05AA:  DATA DF,2F
05AB:  DATA DF,2F
05AC:  DATA DF,2F
05AD:  DATA 0D,05
05AE:  DATA DF,2F
05AF:  DATA DF,2F
05B0:  DATA DF,29
05B1:  DATA F4,30
05B2:  DATA 72,3A
05B3:  DATA A0,32
05B4:  DATA F8,32
05B5:  DATA E3,3A
05B6:  DATA F4,32
05B7:  DATA DF,36
05B8:  DATA E9,39
05B9:  DATA F3,34
05BA:  DATA 6F,37
05BB:  DATA DF,2F
05BC:  DATA DF,2F
05BD:  DATA DF,06
05BE:  DATA 8A,06
05BF:  DATA 0A,00
05C0:  DATA C3,37
05C1:  DATA ED,36
05C2:  DATA 61,37
05C3:  DATA 64,10
05C4:  DATA 49,22
05C5:  DATA 3A,10
05C6:  DATA 25,2C
05C7:  DATA 0D,05
05C8:  DATA 0D,05
05C9:  DATA 00,01
05CA:  DATA 89,16
05CB:  DATA 3E,10
05CC:  DATA 45,3C
05CD:  DATA E1,36
05CE:  DATA 70,36
05CF:  DATA 65,10
05D0:  DATA E3,37
05D1:  DATA ED,36
05D2:  DATA 61,37
05D3:  DATA 64,10
05D4:  DATA 30,3C
05D5:  DATA 30,18
05D6:  DATA 0D,05
05D7:  DATA 00,01
05D8:  DATA 89,04
05D9:  DATA 2D,1F
05DA:  DATA A0,24
05DB:  DATA 6E,3B
05DC:  DATA 61,36
05DD:  DATA 69,32
05DE:  DATA A0,21
05DF:  DATA 4D,22
05E0:  DATA A0,24
05E1:  DATA C4,10
05E2:  DATA 0D,05
05E3:  DATA 00,01
05E4:  DATA 0D,05
05E5:  DATA DF,2F
05E6:  DATA DF,2F
05E7:  DATA DF,2F
05E8:  DATA 45,37
05E9:  DATA 64,10
05EA:  DATA 65,3C
05EB:  DATA E5,31
05EC:  DATA 75,3A
05ED:  DATA E5,2F
05EE:  DATA ED,34
05EF:  DATA F3,39
05F0:  DATA E9,37
05F1:  DATA EE,2F
05F2:  DATA DF,2F
05F3:  DATA DF,2F
05F4:  DATA DF,06
05F5:  DATA 8A,2F
05F6:  DATA DF,2F
05F7:  DATA DF,2F
05F8:  DATA DF,2F
05F9:  DATA DF,2F
05FA:  DATA DF,2F
05FB:  DATA DF,2F
05FC:  DATA DF,2F
05FD:  DATA DF,2F
05FE:  DATA DF,2F
05FF:  DATA DF,2F
0600:  DATA DF,2F
0601:  DATA DF,2F
0602:  DATA DF,2F
0603:  DATA DF,2F
0604:  DATA DF,2F
0605:  DATA 0D,05
0606:  DATA 00,00
0607:  DATA 53,3A
0608:  DATA 61,39
0609:  DATA 74,10
060A:  DATA 65,3C
060B:  DATA E5,31
060C:  DATA 75,3A
060D:  DATA E5,2F
060E:  DATA E3,37
060F:  DATA ED,36
0610:  DATA 61,37
0611:  DATA E4,06
0612:  DATA 0A,00
0613:  DATA 89,16
0614:  DATA 3E,10
0615:  DATA 55,38
0616:  DATA EC,34
0617:  DATA EE,35
0618:  DATA A0,31
0619:  DATA EF,36
061A:  DATA ED,30
061B:  DATA 6E,32
061C:  DATA 0D,05
061D:  DATA 00,01
061E:  DATA 09,10
061F:  DATA 20,10
0620:  DATA 54,39
0621:  DATA 61,37
0622:  DATA F3,36
0623:  DATA 69,3A
0624:  DATA A0,20
0625:  DATA E3,35
0626:  DATA EE,37
0627:  DATA EC,32
0628:  DATA 67,32
0629:  DATA E5,06
062A:  DATA 0A,00
062B:  DATA 89,16
062C:  DATA 3E,10
062D:  DATA 53,3A
062E:  DATA 61,3A
062F:  DATA F5,39
0630:  DATA A0,31
0631:  DATA E8,32
0632:  DATA E3,35
0633:  DATA 0D,05
0634:  DATA 00,01
0635:  DATA 09,10
0636:  DATA 20,10
0637:  DATA 54,39
0638:  DATA 61,37
0639:  DATA F3,36
063A:  DATA 69,3A
063B:  DATA A0,26
063C:  DATA C9,29
063D:  DATA A0,26
063E:  DATA C3,2A
063F:  DATA A0,29
0640:  DATA F4,30
0641:  DATA F4,3A
0642:  DATA F3,06
0643:  DATA 0A,00
0644:  DATA E6,34
0645:  DATA EE,34
0646:  DATA 73,34
0647:  DATA 65,32
0648:  DATA A0,34
0649:  DATA 6E,10
064A:  DATA 73,3A
064B:  DATA 61,3A
064C:  DATA F5,39
064D:  DATA DF,31
064E:  DATA E8,32
064F:  DATA E3,35
0650:  DATA 0D,05
0651:  DATA 00,00
0652:  DATA 89,16
0653:  DATA 3E,10
0654:  DATA D3,26
0655:  DATA 46,10
0656:  DATA 61,3B
0657:  DATA E1,34
0658:  DATA EC,30
0659:  DATA 62,36
065A:  DATA 65,10
065B:  DATA 63,34
065C:  DATA E5,31
065D:  DATA EB,06
065E:  DATA 0A,00
065F:  DATA 09,10
0660:  DATA 20,10
0661:  DATA 54,39
0662:  DATA 61,37
0663:  DATA F3,36
0664:  DATA 69,3A
0665:  DATA A0,20
0666:  DATA E3,35
0667:  DATA EE,37
0668:  DATA EC,32
0669:  DATA 67,32
066A:  DATA E5,06
066B:  DATA 0A,00
066C:  DATA 89,04
066D:  DATA 2D,1F
066E:  DATA A0,30
066F:  DATA 6C,36
0670:  DATA EF,3B
0671:  DATA E4,06
0672:  DATA 0A,00
0673:  DATA 89,04
0674:  DATA 2D,1F
0675:  DATA 20,32
0676:  DATA 65,37
0677:  DATA F9,32
0678:  DATA E4,06
0679:  DATA 0A,00
067A:  DATA 0D,05
067B:  DATA 0D,05
067C:  DATA 0D,05
067D:  DATA BD,1E
067E:  DATA BD,1E
067F:  DATA BD,1E
0680:  DATA BD,1E
0681:  DATA BD,1E
0682:  DATA BD,1E
0683:  DATA BD,1E
0684:  DATA BD,1E
0685:  DATA BD,1E
0686:  DATA BD,1E
0687:  DATA BD,1E
0688:  DATA BD,1E
0689:  DATA BD,1E
068A:  DATA BD,1E
068B:  DATA BD,1E
068C:  DATA BD,1E
068D:  DATA BD,1E
068E:  DATA BD,1E
068F:  DATA BD,1E
0690:  DATA BD,1E
0691:  DATA BD,1E
0692:  DATA BD,1E
0693:  DATA BD,1E
0694:  DATA BD,1E
0695:  DATA BD,1E
0696:  DATA BD,1E
0697:  DATA BD,1E
0698:  DATA BD,1E
0699:  DATA BD,1E
069A:  DATA BD,1E
069B:  DATA 0D,05
069C:  DATA 00,01
069D:  DATA 54,34
069E:  DATA E9,39
069F:  DATA A0,34
06A0:  DATA 73,10
06A1:  DATA CD,27
06A2:  DATA CD,24
06A3:  DATA CA,24
06A4:  DATA A0,21
06A5:  DATA C9,23
06A6:  DATA 53,10
06A7:  DATA D0,24
06A8:  DATA 43,10
06A9:  DATA 42,21
06AA:  DATA 4D,10
06AB:  DATA E6,37
06AC:  DATA 72,10
06AD:  DATA CD,24
06AE:  DATA D3,1B
06AF:  DATA 5F,21
06B0:  DATA C2,26
06B1:  DATA 31,17
06B2:  DATA 0D,05
06B3:  DATA 00,01
06B4:  DATA CC,30
06B5:  DATA 73,3A
06B6:  DATA A0,3A
06B7:  DATA 70,32
06B8:  DATA 61,3A
06B9:  DATA 65,32
06BA:  DATA A0,37
06BB:  DATA 6E,10
06BC:  DATA 32,18
06BD:  DATA B2,1A
06BE:  DATA 2F,18
06BF:  DATA B6,17
06C0:  DATA B1,1A
06C1:  DATA 2C,10
06C2:  DATA E2,3C
06C3:  DATA A0,24
06C4:  DATA EE,37
06C5:  DATA F5,32
06C6:  DATA AE,06
06C7:  DATA 8A,06
06C8:  DATA 0A,00
06C9:  DATA DF,2F
06CA:  DATA DF,2F
06CB:  DATA C3,24
06CC:  DATA C7,29
06CD:  DATA 20,28
06CE:  DATA C9,21
06CF:  DATA A0,29
06D0:  DATA F4,30
06D1:  DATA 72,3A
06D2:  DATA A0,27
06D3:  DATA F0,32
06D4:  DATA F2,30
06D5:  DATA F4,34
06D6:  DATA 6F,37
06D7:  DATA DF,2F
06D8:  DATA DF,2F
06D9:  DATA DF,06
06DA:  DATA 8A,06
06DB:  DATA 0A,00
06DC:  DATA F7,30
06DD:  DATA 69,3A
06DE:  DATA 69,37
06DF:  DATA 67,10
06E0:  DATA E6,37
06E1:  DATA 72,10
06E2:  DATA C2,27
06E3:  DATA D3,29
06E4:  DATA 20,28
06E5:  DATA C9,21
06E6:  DATA A0,31
06E7:  DATA EF,36
06E8:  DATA ED,30
06E9:  DATA 6E,32
06EA:  DATA 00,01
06EB:  DATA 0D,05
06EC:  DATA F7,30
06ED:  DATA 69,3A
06EE:  DATA 69,37
06EF:  DATA 67,10
06F0:  DATA E6,37
06F1:  DATA 72,10
06F2:  DATA C2,27
06F3:  DATA D3,29
06F4:  DATA 20,28
06F5:  DATA C9,21
06F6:  DATA A0,31
06F7:  DATA EF,36
06F8:  DATA ED,30
06F9:  DATA 6E,32
06FA:  DATA 00,01
06FB:  DATA 0D,05
06FC:  DATA 0D,05
06FD:  DATA BD,1E
06FE:  DATA BD,1E
06FF:  DATA BD,1E
0700:  DATA 0D,05
0701:  DATA 0D,05
0702:  DATA C6,34
0703:  DATA EE,34
0704:  DATA 73,34
0705:  DATA 65,32
0706:  DATA 20,38
0707:  DATA F2,37
0708:  DATA E3,32
0709:  DATA F3,39
070A:  DATA AE,06
070B:  DATA 8A,2B
070C:  DATA E1,34
070D:  DATA 74,10
070E:  DATA E6,37
070F:  DATA 72,10
0710:  DATA C2,27
0711:  DATA D3,29
0712:  DATA 20,28
0713:  DATA C9,21
0714:  DATA 20,3A
0715:  DATA 75,39
0716:  DATA 6E,10
0717:  DATA 6F,33
0718:  DATA 66,10
0719:  DATA ED,32
071A:  DATA 00,01
071B:  DATA 45,37
071C:  DATA 64,10
071D:  DATA ED,30
071E:  DATA 69,37
071F:  DATA 0D,05
0720:  DATA 00,00
*
0749:  MOVF   0B,W
074A:  BCF    0B.7
074B:  MOVLB  03
074C:  BSF    15.7
074D:  BSF    15.0
074E:  NOP
074F:  NOP
0750:  BTFSC  09.7
0751:  BSF    0B.7
0752:  MOVF   13,W
0753:  ANDLW  7F
0754:  BTFSS  03.2
0755:  GOTO   758
0756:  MOVLB  00
0757:  GOTO   798
0758:  MOVLB  13
0759:  MOVWF  2B
075A:  MOVLB  03
075B:  MOVF   11,W
075C:  MOVLB  13
075D:  MOVWF  2C
075E:  MOVLB  03
075F:  MOVF   12,W
0760:  MOVLB  13
0761:  MOVWF  2D
0762:  MOVF   2B,W
0763:  MOVWF  2E
0764:  MOVLB  00
0765:  CALL   721
0766:  MOVLB  13
0767:  MOVF   2C,W
0768:  MOVLB  03
0769:  MOVWF  11
076A:  MOVLB  13
076B:  MOVF   2D,W
076C:  MOVLB  03
076D:  MOVWF  12
076E:  MOVF   0B,W
076F:  BCF    0B.7
0770:  BSF    15.7
0771:  BSF    15.0
0772:  NOP
0773:  NOP
0774:  BTFSC  09.7
0775:  BSF    0B.7
0776:  RLF    13,W
0777:  RLF    14,W
0778:  ANDLW  7F
0779:  BTFSS  03.2
077A:  GOTO   77D
077B:  MOVLB  00
077C:  GOTO   798
077D:  MOVLB  13
077E:  MOVWF  2B
077F:  MOVLB  03
0780:  MOVF   11,W
0781:  MOVLB  13
0782:  MOVWF  2C
0783:  MOVLB  03
0784:  MOVF   12,W
0785:  MOVLB  13
0786:  MOVWF  2D
0787:  MOVF   2B,W
0788:  MOVWF  2E
0789:  MOVLB  00
078A:  CALL   721
078B:  MOVLB  13
078C:  MOVF   2C,W
078D:  MOVLB  03
078E:  MOVWF  11
078F:  MOVLB  13
0790:  MOVF   2D,W
0791:  MOVLB  03
0792:  MOVWF  12
0793:  INCF   11,F
0794:  BTFSC  03.2
0795:  INCF   12,F
0796:  MOVLB  00
0797:  GOTO   749
0798:  RETURN
*
0821:  MOVLB  13
0822:  MOVF   49,W
0823:  ANDLW  07
0824:  MOVWF  77
0825:  RRF    49,W
0826:  MOVWF  78
0827:  RRF    78,F
0828:  RRF    78,F
0829:  MOVLW  1F
082A:  ANDWF  78,F
082B:  MOVF   78,W
082C:  ADDWF  4B,W
082D:  MOVWF  04
082E:  MOVLW  00
082F:  ADDWFC 4C,W
0830:  MOVWF  05
0831:  CLRF   78
0832:  INCF   78,F
0833:  INCF   77,F
0834:  MOVLB  00
0835:  GOTO   037
0836:  RLF    78,F
0837:  DECFSZ 77,F
0838:  GOTO   036
0839:  MOVLB  13
083A:  MOVF   4A,F
083B:  BTFSS  03.2
083C:  GOTO   03F
083D:  MOVLB  00
083E:  GOTO   043
083F:  MOVF   78,W
0840:  IORWF  00,F
0841:  MOVLB  00
0842:  GOTO   046
0843:  COMF   78,F
0844:  MOVF   78,W
0845:  ANDWF  00,F
0846:  RETURN
*
0AC9:  MOVF   0B,W
0ACA:  BCF    0B.7
0ACB:  MOVLB  03
0ACC:  BSF    15.7
0ACD:  BSF    15.0
0ACE:  NOP
0ACF:  NOP
0AD0:  BTFSC  09.7
0AD1:  BSF    0B.7
0AD2:  BTFSS  03.0
0AD3:  GOTO   2D6
0AD4:  MOVLB  00
0AD5:  GOTO   302
0AD6:  MOVF   13,W
0AD7:  ANDLW  7F
0AD8:  MOVLB  11
0AD9:  MOVWF  52
0ADA:  MOVLB  03
0ADB:  MOVF   11,W
0ADC:  MOVLB  11
0ADD:  MOVWF  53
0ADE:  MOVLB  03
0ADF:  MOVF   12,W
0AE0:  MOVLB  11
0AE1:  MOVWF  54
0AE2:  MOVF   52,W
0AE3:  MOVLB  13
0AE4:  MOVWF  2E
0AE5:  MOVLP  00
0AE6:  MOVLB  00
0AE7:  CALL   721
0AE8:  MOVLP  08
0AE9:  MOVLB  11
0AEA:  MOVF   53,W
0AEB:  MOVLB  03
0AEC:  MOVWF  11
0AED:  MOVLB  11
0AEE:  MOVF   54,W
0AEF:  MOVLB  03
0AF0:  MOVWF  12
0AF1:  MOVF   0B,W
0AF2:  BCF    0B.7
0AF3:  BSF    15.7
0AF4:  BSF    15.0
0AF5:  NOP
0AF6:  NOP
0AF7:  BTFSC  09.7
0AF8:  BSF    0B.7
0AF9:  MOVLB  11
0AFA:  DECFSZ 51,F
0AFB:  GOTO   2FE
0AFC:  GOTO   300
0AFD:  MOVLB  00
0AFE:  MOVLB  00
0AFF:  GOTO   302
0B00:  MOVLB  00
0B01:  GOTO   32A
0B02:  MOVLB  03
0B03:  RLF    13,W
0B04:  RLF    14,W
0B05:  ANDLW  7F
0B06:  MOVLB  11
0B07:  MOVWF  52
0B08:  MOVLB  03
0B09:  MOVF   11,W
0B0A:  MOVLB  11
0B0B:  MOVWF  53
0B0C:  MOVLB  03
0B0D:  MOVF   12,W
0B0E:  MOVLB  11
0B0F:  MOVWF  54
0B10:  MOVF   52,W
0B11:  MOVLB  13
0B12:  MOVWF  2E
0B13:  MOVLP  00
0B14:  MOVLB  00
0B15:  CALL   721
0B16:  MOVLP  08
0B17:  MOVLB  11
0B18:  MOVF   53,W
0B19:  MOVLB  03
0B1A:  MOVWF  11
0B1B:  MOVLB  11
0B1C:  MOVF   54,W
0B1D:  MOVLB  03
0B1E:  MOVWF  12
0B1F:  INCF   11,F
0B20:  BTFSC  03.2
0B21:  INCF   12,F
0B22:  BCF    03.0
0B23:  MOVLB  11
0B24:  DECFSZ 51,F
0B25:  GOTO   328
0B26:  GOTO   32A
0B27:  MOVLB  00
0B28:  MOVLB  00
0B29:  GOTO   2C9
0B2A:  MOVLB  00
0B2B:  RETURN
0B2C:  BTFSC  03.1
0B2D:  GOTO   332
0B2E:  MOVLW  25
0B2F:  MOVWF  05
0B30:  MOVLW  9B
0B31:  MOVWF  04
0B32:  CLRF   77
0B33:  CLRF   78
0B34:  CLRF   79
0B35:  CLRF   7A
0B36:  MOVLB  11
0B37:  CLRF   6B
0B38:  CLRF   6C
0B39:  CLRF   6D
0B3A:  CLRF   6E
0B3B:  MOVF   67,W
0B3C:  IORWF  66,W
0B3D:  IORWF  65,W
0B3E:  IORWF  64,W
0B3F:  BTFSS  03.2
0B40:  GOTO   343
0B41:  MOVLB  00
0B42:  GOTO   386
0B43:  MOVLB  00
0B44:  MOVLW  20
0B45:  MOVLB  11
0B46:  MOVWF  6F
0B47:  MOVLB  00
0B48:  BCF    03.0
0B49:  MOVLB  11
0B4A:  RLF    60,F
0B4B:  RLF    61,F
0B4C:  RLF    62,F
0B4D:  RLF    63,F
0B4E:  RLF    6B,F
0B4F:  RLF    6C,F
0B50:  RLF    6D,F
0B51:  RLF    6E,F
0B52:  MOVF   67,W
0B53:  SUBWF  6E,W
0B54:  BTFSC  03.2
0B55:  GOTO   358
0B56:  MOVLB  00
0B57:  GOTO   367
0B58:  MOVF   66,W
0B59:  SUBWF  6D,W
0B5A:  BTFSC  03.2
0B5B:  GOTO   35E
0B5C:  MOVLB  00
0B5D:  GOTO   367
0B5E:  MOVF   65,W
0B5F:  SUBWF  6C,W
0B60:  BTFSC  03.2
0B61:  GOTO   364
0B62:  MOVLB  00
0B63:  GOTO   367
0B64:  MOVF   64,W
0B65:  SUBWF  6B,W
0B66:  MOVLB  00
0B67:  BTFSS  03.0
0B68:  GOTO   37A
0B69:  MOVLB  11
0B6A:  MOVF   64,W
0B6B:  SUBWF  6B,F
0B6C:  MOVF   65,W
0B6D:  BTFSS  03.0
0B6E:  INCFSZ 65,W
0B6F:  SUBWF  6C,F
0B70:  MOVF   66,W
0B71:  BTFSS  03.0
0B72:  INCFSZ 66,W
0B73:  SUBWF  6D,F
0B74:  MOVF   67,W
0B75:  BTFSS  03.0
0B76:  INCFSZ 67,W
0B77:  SUBWF  6E,F
0B78:  BSF    03.0
0B79:  MOVLB  00
0B7A:  RLF    77,F
0B7B:  RLF    78,F
0B7C:  RLF    79,F
0B7D:  RLF    7A,F
0B7E:  MOVLB  11
0B7F:  DECFSZ 6F,F
0B80:  GOTO   383
0B81:  GOTO   385
0B82:  MOVLB  00
0B83:  MOVLB  00
0B84:  GOTO   348
0B85:  MOVLB  00
0B86:  MOVLB  11
0B87:  MOVF   6B,W
0B88:  MOVWF  00
0B89:  ADDFSR 01,FSR0
0B8A:  MOVF   6C,W
0B8B:  MOVWF  00
0B8C:  ADDFSR 01,FSR0
0B8D:  MOVF   6D,W
0B8E:  MOVWF  00
0B8F:  ADDFSR 01,FSR0
0B90:  MOVF   6E,W
0B91:  MOVWF  00
0B92:  ADDFSR 3D,FSR0
0B93:  MOVLB  00
0B94:  RETURN
0B95:  MOVF   04,W
0B96:  MOVLB  11
0B97:  MOVWF  58
0B98:  MOVLW  3B
0B99:  MOVWF  5F
0B9A:  MOVLW  9A
0B9B:  MOVWF  5E
0B9C:  MOVLW  CA
0B9D:  MOVWF  5D
0B9E:  CLRF   5C
0B9F:  MOVLW  0A
0BA0:  MOVWF  5A
0BA1:  MOVLB  00
0BA2:  BSF    03.1
0BA3:  MOVLW  25
0BA4:  MOVWF  05
0BA5:  MOVLW  81
0BA6:  MOVWF  04
0BA7:  MOVLB  11
0BA8:  MOVF   54,W
0BA9:  MOVWF  63
0BAA:  MOVF   53,W
0BAB:  MOVWF  62
0BAC:  MOVF   52,W
0BAD:  MOVWF  61
0BAE:  MOVF   51,W
0BAF:  MOVWF  60
0BB0:  MOVF   5F,W
0BB1:  MOVWF  67
0BB2:  MOVF   5E,W
0BB3:  MOVWF  66
0BB4:  MOVF   5D,W
0BB5:  MOVWF  65
0BB6:  MOVF   5C,W
0BB7:  MOVWF  64
0BB8:  MOVLB  00
0BB9:  CALL   32C
0BBA:  MOVF   78,W
0BBB:  MOVF   77,F
0BBC:  BTFSS  03.2
0BBD:  GOTO   3E1
0BBE:  MOVLB  11
0BBF:  MOVF   5A,W
0BC0:  XORLW  01
0BC1:  BTFSS  03.2
0BC2:  GOTO   3C5
0BC3:  MOVLB  00
0BC4:  GOTO   3E1
0BC5:  MOVF   58,W
0BC6:  BTFSS  03.2
0BC7:  GOTO   3CA
0BC8:  MOVLB  00
0BC9:  GOTO   3E4
0BCA:  ANDLW  0F
0BCB:  SUBWF  5A,W
0BCC:  BTFSS  03.2
0BCD:  GOTO   3D0
0BCE:  MOVLB  00
0BCF:  GOTO   3D5
0BD0:  BTFSS  03.0
0BD1:  GOTO   3D4
0BD2:  MOVLB  00
0BD3:  GOTO   3ED
0BD4:  MOVLB  00
0BD5:  MOVLB  11
0BD6:  BTFSS  58.7
0BD7:  GOTO   3DA
0BD8:  MOVLB  00
0BD9:  GOTO   3ED
0BDA:  BTFSS  58.6
0BDB:  GOTO   3DE
0BDC:  MOVLB  00
0BDD:  GOTO   3E4
0BDE:  MOVLW  20
0BDF:  MOVLB  00
0BE0:  GOTO   3E5
0BE1:  MOVLB  11
0BE2:  CLRF   58
0BE3:  MOVLB  00
0BE4:  MOVLW  30
0BE5:  ADDWF  77,F
0BE6:  MOVF   77,W
0BE7:  MOVLB  13
0BE8:  MOVWF  2E
0BE9:  MOVLP  00
0BEA:  MOVLB  00
0BEB:  CALL   721
0BEC:  MOVLP  08
0BED:  BCF    03.1
0BEE:  MOVLB  11
0BEF:  MOVF   5F,W
0BF0:  MOVWF  63
0BF1:  MOVF   5E,W
0BF2:  MOVWF  62
0BF3:  MOVF   5D,W
0BF4:  MOVWF  61
0BF5:  MOVF   5C,W
0BF6:  MOVWF  60
0BF7:  CLRF   67
0BF8:  CLRF   66
0BF9:  CLRF   65
0BFA:  MOVLW  0A
0BFB:  MOVWF  64
0BFC:  MOVLB  00
0BFD:  CALL   32C
0BFE:  MOVF   7A,W
0BFF:  MOVLB  11
0C00:  MOVWF  5F
0C01:  MOVF   79,W
0C02:  MOVWF  5E
0C03:  MOVF   78,W
0C04:  MOVWF  5D
0C05:  MOVF   77,W
0C06:  MOVWF  5C
0C07:  DECFSZ 5A,F
0C08:  GOTO   40B
0C09:  GOTO   40D
0C0A:  MOVLB  00
0C0B:  MOVLB  00
0C0C:  GOTO   3A2
0C0D:  MOVLB  00
0C0E:  RETURN
0C0F:  MOVLB  11
0C10:  MOVF   55,W
0C11:  CLRF   78
0C12:  SUBWF  54,W
0C13:  BTFSS  03.0
0C14:  GOTO   417
0C15:  MOVLB  00
0C16:  GOTO   41B
0C17:  MOVF   54,W
0C18:  MOVWF  77
0C19:  MOVLB  00
0C1A:  GOTO   42E
0C1B:  CLRF   77
0C1C:  MOVLW  08
0C1D:  MOVLB  11
0C1E:  MOVWF  56
0C1F:  MOVLB  00
0C20:  MOVLB  11
0C21:  RLF    54,F
0C22:  RLF    77,F
0C23:  MOVF   55,W
0C24:  SUBWF  77,W
0C25:  BTFSC  03.0
0C26:  MOVWF  77
0C27:  RLF    78,F
0C28:  DECFSZ 56,F
0C29:  GOTO   42C
0C2A:  GOTO   42E
0C2B:  MOVLB  00
0C2C:  MOVLB  00
0C2D:  GOTO   420
0C2E:  MOVLB  00
0C2F:  RETURN
0C30:  MOVF   78,W
0C31:  MOVLB  11
0C32:  MOVF   3A,W
0C33:  MOVWF  54
0C34:  MOVLW  64
0C35:  MOVWF  55
0C36:  MOVLB  00
0C37:  CALL   40F
0C38:  MOVF   77,W
0C39:  MOVLB  11
0C3A:  MOVWF  3A
0C3B:  MOVF   78,W
0C3C:  MOVLW  30
0C3D:  BTFSC  03.2
0C3E:  GOTO   441
0C3F:  MOVLB  00
0C40:  GOTO   44D
0C41:  BTFSC  3B.1
0C42:  GOTO   445
0C43:  MOVLB  00
0C44:  GOTO   45A
0C45:  BTFSS  3B.3
0C46:  GOTO   449
0C47:  MOVLB  00
0C48:  GOTO   45A
0C49:  BTFSC  3B.4
0C4A:  MOVLW  20
0C4B:  MOVLB  00
0C4C:  GOTO   452
0C4D:  MOVLB  11
0C4E:  BCF    3B.3
0C4F:  BCF    3B.4
0C50:  BSF    3B.0
0C51:  MOVLB  00
0C52:  ADDWF  78,F
0C53:  MOVF   78,W
0C54:  MOVLB  13
0C55:  MOVWF  2E
0C56:  MOVLP  00
0C57:  MOVLB  00
0C58:  CALL   721
0C59:  MOVLP  08
0C5A:  MOVLB  11
0C5B:  MOVF   3A,W
0C5C:  MOVWF  54
0C5D:  MOVLW  0A
0C5E:  MOVWF  55
0C5F:  MOVLB  00
0C60:  CALL   40F
0C61:  MOVF   77,W
0C62:  MOVLB  11
0C63:  MOVWF  3A
0C64:  MOVF   78,W
0C65:  MOVLW  30
0C66:  BTFSC  03.2
0C67:  GOTO   46A
0C68:  MOVLB  00
0C69:  GOTO   475
0C6A:  BTFSS  3B.3
0C6B:  GOTO   46E
0C6C:  MOVLB  00
0C6D:  GOTO   47D
0C6E:  BTFSC  3B.0
0C6F:  GOTO   472
0C70:  MOVLB  00
0C71:  GOTO   47D
0C72:  BTFSC  3B.4
0C73:  MOVLW  20
0C74:  MOVLB  00
0C75:  ADDWF  78,F
0C76:  MOVF   78,W
0C77:  MOVLB  13
0C78:  MOVWF  2E
0C79:  MOVLP  00
0C7A:  MOVLB  00
0C7B:  CALL   721
0C7C:  MOVLP  08
0C7D:  MOVLW  30
0C7E:  MOVLB  11
0C7F:  ADDWF  3A,F
0C80:  MOVF   3A,W
0C81:  MOVLB  13
0C82:  MOVWF  2E
0C83:  MOVLP  00
0C84:  MOVLB  00
0C85:  CALL   721
0C86:  MOVLP  08
0C87:  RETURN
*
0D92:  MOVLB  11
0D93:  BTFSS  52.7
0D94:  GOTO   597
0D95:  MOVLB  00
0D96:  GOTO   5B0
0D97:  MOVLW  0F
0D98:  MOVWF  77
0D99:  SWAPF  51,W
0D9A:  ANDWF  77,F
0D9B:  MOVLW  0A
0D9C:  SUBWF  77,W
0D9D:  BTFSS  03.0
0D9E:  GOTO   5A1
0D9F:  MOVLB  00
0DA0:  GOTO   5A5
0DA1:  MOVLW  30
0DA2:  ADDWF  77,F
0DA3:  MOVLB  00
0DA4:  GOTO   5A9
0DA5:  MOVLB  11
0DA6:  MOVF   52,W
0DA7:  ADDWF  77,F
0DA8:  MOVLB  00
0DA9:  MOVF   77,W
0DAA:  MOVLB  13
0DAB:  MOVWF  2E
0DAC:  MOVLP  00
0DAD:  MOVLB  00
0DAE:  CALL   721
0DAF:  MOVLP  08
0DB0:  MOVLW  0F
0DB1:  MOVLB  11
0DB2:  ANDWF  51,F
0DB3:  MOVLW  0A
0DB4:  SUBWF  51,W
0DB5:  BTFSS  03.0
0DB6:  GOTO   5B9
0DB7:  MOVLB  00
0DB8:  GOTO   5BC
0DB9:  MOVLW  30
0DBA:  MOVLB  00
0DBB:  GOTO   5C0
0DBC:  MOVLB  11
0DBD:  BCF    52.7
0DBE:  MOVF   52,W
0DBF:  MOVLB  00
0DC0:  MOVLB  11
0DC1:  ADDWF  51,F
0DC2:  MOVF   51,W
0DC3:  MOVLB  13
0DC4:  MOVWF  2E
0DC5:  MOVLP  00
0DC6:  MOVLB  00
0DC7:  CALL   721
0DC8:  MOVLP  08
0DC9:  RETURN
*
0F8A:  MOVF   78,W
0F8B:  BTFSC  03.2
0F8C:  GOTO   791
0F8D:  MOVF   77,W
0F8E:  MOVWI  W,[FSR0++]
0F8F:  DECFSZ 78,F
0F90:  GOTO   78D
*
1F9E:  CLRF   77
1F9F:  CLRF   78
1FA0:  MOVLB  11
1FA1:  MOVF   2D,W
1FA2:  BCF    03.0
1FA3:  BTFSC  2E.0
1FA4:  ADDWF  77,F
1FA5:  RRF    77,F
1FA6:  RRF    78,F
1FA7:  BTFSC  2E.1
1FA8:  ADDWF  77,F
1FA9:  RRF    77,F
1FAA:  RRF    78,F
1FAB:  BTFSC  2E.2
1FAC:  ADDWF  77,F
1FAD:  RRF    77,F
1FAE:  RRF    78,F
1FAF:  BTFSC  2E.3
1FB0:  ADDWF  77,F
1FB1:  RRF    77,F
1FB2:  RRF    78,F
1FB3:  BTFSC  2E.4
1FB4:  ADDWF  77,F
1FB5:  RRF    77,F
1FB6:  RRF    78,F
1FB7:  BTFSC  2E.5
1FB8:  ADDWF  77,F
1FB9:  RRF    77,F
1FBA:  RRF    78,F
1FBB:  BTFSC  2E.6
1FBC:  ADDWF  77,F
1FBD:  RRF    77,F
1FBE:  RRF    78,F
1FBF:  BTFSC  2E.7
1FC0:  ADDWF  77,F
1FC1:  RRF    77,F
1FC2:  RRF    78,F
1FC3:  MOVLB  00
1FC4:  RETURN
*
244D:  MOVLW  20
244E:  MOVLB  11
244F:  BTFSS  4F.4
2450:  MOVLW  30
2451:  MOVWF  50
2452:  MOVF   4E,W
2453:  MOVWF  77
2454:  BTFSC  77.7
2455:  GOTO   458
2456:  MOVLB  00
2457:  GOTO   461
2458:  COMF   77,F
2459:  INCF   77,F
245A:  MOVF   77,W
245B:  MOVWF  4E
245C:  MOVLW  2D
245D:  MOVWF  50
245E:  BSF    4F.7
245F:  BSF    4F.0
2460:  MOVLB  00
2461:  MOVF   78,W
2462:  MOVLB  11
2463:  MOVF   4E,W
2464:  MOVWF  54
2465:  MOVLW  64
2466:  MOVWF  55
2467:  MOVLP  08
2468:  MOVLB  00
2469:  CALL   40F
246A:  MOVLP  20
246B:  MOVF   77,W
246C:  MOVLB  11
246D:  MOVWF  4E
246E:  MOVLW  30
246F:  ADDWF  78,W
2470:  MOVWF  51
2471:  MOVF   4E,W
2472:  MOVWF  54
2473:  MOVLW  0A
2474:  MOVWF  55
2475:  MOVLP  08
2476:  MOVLB  00
2477:  CALL   40F
2478:  MOVLP  20
2479:  MOVLW  30
247A:  ADDWF  77,W
247B:  MOVLB  11
247C:  MOVWF  53
247D:  MOVLW  30
247E:  ADDWF  78,W
247F:  MOVWF  52
2480:  MOVF   50,W
2481:  MOVWF  77
2482:  MOVLB  00
2483:  MOVLW  30
2484:  MOVLB  11
2485:  SUBWF  51,W
2486:  BTFSS  03.2
2487:  GOTO   48A
2488:  MOVLB  00
2489:  GOTO   48F
248A:  BSF    4F.1
248B:  BTFSC  4F.7
248C:  BSF    4F.2
248D:  MOVLB  00
248E:  GOTO   4AC
248F:  MOVLB  11
2490:  MOVF   50,W
2491:  MOVWF  51
2492:  MOVLW  20
2493:  MOVWF  50
2494:  MOVLW  30
2495:  SUBWF  52,W
2496:  BTFSS  03.2
2497:  GOTO   49A
2498:  MOVLB  00
2499:  GOTO   49F
249A:  BSF    4F.0
249B:  BTFSC  4F.7
249C:  BSF    4F.1
249D:  MOVLB  00
249E:  GOTO   4AC
249F:  BTFSC  03.2
24A0:  GOTO   4A4
24A1:  MOVLB  11
24A2:  BSF    4F.0
24A3:  MOVLB  00
24A4:  BTFSS  03.2
24A5:  GOTO   4AC
24A6:  MOVLB  11
24A7:  MOVF   51,W
24A8:  MOVWF  52
24A9:  MOVLW  20
24AA:  MOVWF  51
24AB:  MOVLB  00
24AC:  MOVLB  11
24AD:  BTFSS  4F.2
24AE:  GOTO   4B1
24AF:  MOVLB  00
24B0:  GOTO   4BB
24B1:  BTFSS  4F.1
24B2:  GOTO   4B5
24B3:  MOVLB  00
24B4:  GOTO   4C3
24B5:  BTFSS  4F.0
24B6:  GOTO   4B9
24B7:  MOVLB  00
24B8:  GOTO   4CB
24B9:  MOVLB  00
24BA:  GOTO   4D3
24BB:  MOVLB  11
24BC:  MOVF   50,W
24BD:  MOVLB  13
24BE:  MOVWF  2E
24BF:  MOVLP  00
24C0:  MOVLB  00
24C1:  CALL   721
24C2:  MOVLP  20
24C3:  MOVLB  11
24C4:  MOVF   51,W
24C5:  MOVLB  13
24C6:  MOVWF  2E
24C7:  MOVLP  00
24C8:  MOVLB  00
24C9:  CALL   721
24CA:  MOVLP  20
24CB:  MOVLB  11
24CC:  MOVF   52,W
24CD:  MOVLB  13
24CE:  MOVWF  2E
24CF:  MOVLP  00
24D0:  MOVLB  00
24D1:  CALL   721
24D2:  MOVLP  20
24D3:  MOVLB  11
24D4:  MOVF   53,W
24D5:  MOVLB  13
24D6:  MOVWF  2E
24D7:  MOVLP  00
24D8:  MOVLB  00
24D9:  CALL   721
24DA:  MOVLP  20
24DB:  RETURN
*
3310:  MOVF   04,W
3311:  MOVLB  11
3312:  MOVWF  40
3313:  BTFSC  3D.7
3314:  GOTO   317
3315:  MOVLB  00
3316:  GOTO   325
3317:  DECF   40,F
3318:  BSF    40.5
3319:  COMF   3A,F
331A:  COMF   3B,F
331B:  COMF   3C,F
331C:  COMF   3D,F
331D:  INCF   3A,F
331E:  BTFSC  03.2
331F:  INCF   3B,F
3320:  BTFSC  03.2
3321:  INCF   3C,F
3322:  BTFSC  03.2
3323:  INCF   3D,F
3324:  MOVLB  00
3325:  MOVLW  3B
3326:  MOVLB  11
3327:  MOVWF  47
3328:  MOVLW  9A
3329:  MOVWF  46
332A:  MOVLW  CA
332B:  MOVWF  45
332C:  CLRF   44
332D:  MOVLW  0A
332E:  MOVWF  42
332F:  MOVLB  00
3330:  BSF    03.1
3331:  MOVLW  25
3332:  MOVWF  05
3333:  MOVLW  6A
3334:  MOVWF  04
3335:  MOVLB  11
3336:  MOVF   3D,W
3337:  MOVWF  63
3338:  MOVF   3C,W
3339:  MOVWF  62
333A:  MOVF   3B,W
333B:  MOVWF  61
333C:  MOVF   3A,W
333D:  MOVWF  60
333E:  MOVF   47,W
333F:  MOVWF  67
3340:  MOVF   46,W
3341:  MOVWF  66
3342:  MOVF   45,W
3343:  MOVWF  65
3344:  MOVF   44,W
3345:  MOVWF  64
3346:  MOVLP  08
3347:  MOVLB  00
3348:  CALL   32C
3349:  MOVLP  30
334A:  MOVF   78,W
334B:  MOVF   77,F
334C:  BTFSS  03.2
334D:  GOTO   371
334E:  MOVLB  11
334F:  MOVF   42,W
3350:  XORLW  01
3351:  BTFSS  03.2
3352:  GOTO   355
3353:  MOVLB  00
3354:  GOTO   371
3355:  MOVF   40,W
3356:  BTFSS  03.2
3357:  GOTO   35A
3358:  MOVLB  00
3359:  GOTO   375
335A:  ANDLW  0F
335B:  SUBWF  42,W
335C:  BTFSS  03.2
335D:  GOTO   360
335E:  MOVLB  00
335F:  GOTO   365
3360:  BTFSS  03.0
3361:  GOTO   364
3362:  MOVLB  00
3363:  GOTO   3A7
3364:  MOVLB  00
3365:  MOVLB  11
3366:  BTFSS  40.7
3367:  GOTO   36A
3368:  MOVLB  00
3369:  GOTO   3A7
336A:  BTFSS  40.6
336B:  GOTO   36E
336C:  MOVLB  00
336D:  GOTO   375
336E:  MOVLW  20
336F:  MOVLB  00
3370:  GOTO   39F
3371:  MOVLW  20
3372:  MOVLB  11
3373:  ANDWF  40,F
3374:  MOVLB  00
3375:  MOVLB  11
3376:  BTFSC  40.5
3377:  GOTO   37A
3378:  MOVLB  00
3379:  GOTO   389
337A:  BCF    40.5
337B:  MOVF   77,W
337C:  MOVWF  40
337D:  MOVLW  2D
337E:  MOVLB  13
337F:  MOVWF  2E
3380:  MOVLP  00
3381:  MOVLB  00
3382:  CALL   721
3383:  MOVLP  30
3384:  MOVLB  11
3385:  MOVF   40,W
3386:  MOVWF  77
3387:  CLRF   40
3388:  MOVLB  00
3389:  MOVLW  30
338A:  MOVLB  11
338B:  BTFSC  40.5
338C:  GOTO   38F
338D:  MOVLB  00
338E:  GOTO   39F
338F:  BCF    40.5
3390:  MOVF   77,W
3391:  MOVWF  40
3392:  MOVLW  2D
3393:  MOVLB  13
3394:  MOVWF  2E
3395:  MOVLP  00
3396:  MOVLB  00
3397:  CALL   721
3398:  MOVLP  30
3399:  MOVLB  11
339A:  MOVF   40,W
339B:  MOVWF  77
339C:  CLRF   40
339D:  MOVLW  30
339E:  MOVLB  00
339F:  ADDWF  77,F
33A0:  MOVF   77,W
33A1:  MOVLB  13
33A2:  MOVWF  2E
33A3:  MOVLP  00
33A4:  MOVLB  00
33A5:  CALL   721
33A6:  MOVLP  30
33A7:  BCF    03.1
33A8:  MOVLB  11
33A9:  MOVF   47,W
33AA:  MOVWF  63
33AB:  MOVF   46,W
33AC:  MOVWF  62
33AD:  MOVF   45,W
33AE:  MOVWF  61
33AF:  MOVF   44,W
33B0:  MOVWF  60
33B1:  CLRF   67
33B2:  CLRF   66
33B3:  CLRF   65
33B4:  MOVLW  0A
33B5:  MOVWF  64
33B6:  MOVLP  08
33B7:  MOVLB  00
33B8:  CALL   32C
33B9:  MOVLP  30
33BA:  MOVF   7A,W
33BB:  MOVLB  11
33BC:  MOVWF  47
33BD:  MOVF   79,W
33BE:  MOVWF  46
33BF:  MOVF   78,W
33C0:  MOVWF  45
33C1:  MOVF   77,W
33C2:  MOVWF  44
33C3:  DECFSZ 42,F
33C4:  GOTO   3C7
33C5:  GOTO   3C9
33C6:  MOVLB  00
33C7:  MOVLB  00
33C8:  GOTO   330
33C9:  MOVLB  00
.................... 
.................... #list
.................... 
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
*
0F3F:  MOVLW  26
0F40:  MOVWF  05
0F41:  MOVLW  13
0F42:  MOVWF  04
0F43:  MOVF   00,W
0F44:  BTFSC  03.2
0F45:  GOTO   754
0F46:  MOVLW  05
0F47:  MOVWF  78
0F48:  CLRF   77
0F49:  DECFSZ 77,F
0F4A:  GOTO   749
0F4B:  DECFSZ 78,F
0F4C:  GOTO   748
0F4D:  MOVLW  2E
0F4E:  MOVWF  77
0F4F:  DECFSZ 77,F
0F50:  GOTO   74F
0F51:  GOTO   752
0F52:  DECFSZ 00,F
0F53:  GOTO   746
0F54:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
15D3:  BTFSS  11.4
15D4:  GOTO   5D3
15D5:  MOVLB  03
15D6:  MOVWF  1A
15D7:  MOVLB  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
0721:  MOVLB  01
0722:  BCF    0D.4
0723:  MOVLB  02
0724:  BCF    0D.4
0725:  MOVLW  08
0726:  MOVWF  78
0727:  MOVLB  00
0728:  GOTO   729
0729:  NOP
072A:  BSF    78.7
072B:  GOTO   73F
072C:  BCF    78.7
072D:  MOVLB  13
072E:  RRF    2E,F
072F:  MOVLB  02
0730:  BTFSC  03.0
0731:  BSF    0D.4
0732:  BTFSS  03.0
0733:  BCF    0D.4
0734:  MOVLB  00
0735:  BSF    78.6
0736:  GOTO   73F
0737:  BCF    78.6
0738:  DECFSZ 78,F
0739:  GOTO   72D
073A:  GOTO   73B
073B:  NOP
073C:  MOVLB  02
073D:  BSF    0D.4
073E:  MOVLB  00
073F:  MOVLW  84
0740:  MOVWF  04
0741:  DECFSZ 04,F
0742:  GOTO   741
0743:  NOP
0744:  BTFSC  78.7
0745:  GOTO   72C
0746:  BTFSC  78.6
0747:  GOTO   737
0748:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
0847:  MOVLB  04
0848:  MOVF   11,W
0849:  MOVLB  13
084A:  MOVF   66,W
084B:  MOVLB  04
084C:  MOVWF  11
084D:  MOVLB  00
084E:  MOVLB  04
084F:  RRF    14,W
0850:  BTFSC  03.0
0851:  GOTO   054
0852:  MOVLB  00
0853:  GOTO   04E
0854:  MOVF   11,W
0855:  MOVWF  77
0856:  MOVLB  00
0857:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
0858:  MOVLB  04
0859:  MOVF   11,W
085A:  MOVLB  13
085B:  MOVF   66,W
085C:  MOVLB  04
085D:  MOVWF  11
085E:  MOVLB  00
085F:  MOVLB  04
0860:  RRF    14,W
0861:  BTFSC  03.0
0862:  GOTO   065
0863:  MOVLB  00
0864:  GOTO   05F
0865:  MOVF   11,W
0866:  MOVWF  77
0867:  MOVLB  00
0868:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // DI/O RTC
.................... #define RTC_PIN PIN_C1
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(CLOCK_FREQUENCY); //3.2767秒後に割り込みを発生させる
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  CLRF   16
004E:  NOP
....................    sec++;
004F:  MOVLW  01
0050:  ADDWF  31,F
0051:  BTFSC  03.0
0052:  INCF   32,F
0053:  BTFSC  03.2
0054:  INCF   33,F
0055:  BTFSC  03.2
0056:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0057:  BCF    11.0
0058:  MOVLP  00
0059:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0800:  MOVLW  5A
0801:  MOVLB  03
0802:  MOVWF  11
0803:  MOVLW  00
0804:  MOVWF  12
0805:  MOVLP  00
0806:  MOVLB  00
0807:  CALL   749
0808:  MOVLP  08
....................    clear_interrupt(INT_TIMER1);
0809:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1|T1_ENABLE_SOSC);
080A:  MOVLW  8F
080B:  MOVWF  18
080C:  CLRF   19
....................    set_timer1(CLOCK_FREQUENCY); 
080D:  CLRF   16
080E:  MOVLW  80
080F:  MOVWF  17
0810:  CLRF   16
0811:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
0812:  MOVLB  01
0813:  BSF    11.0
....................    enable_interrupts(GLOBAL);
0814:  MOVLW  C0
0815:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
0816:  MOVLW  64
0817:  MOVLB  03
0818:  MOVWF  11
0819:  MOVLW  00
081A:  MOVWF  12
081B:  MOVLP  00
081C:  MOVLB  00
081D:  CALL   749
081E:  MOVLP  08
081F:  MOVLP  38
0820:  GOTO   51E (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... 
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
0D89:  MOVF   31,W
0D8A:  MOVWF  77
0D8B:  MOVF   32,W
0D8C:  MOVWF  78
0D8D:  MOVF   33,W
0D8E:  MOVWF  79
0D8F:  MOVF   34,W
0D90:  MOVWF  7A
0D91:  RETURN
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006A:  GOTO   06B
006B:  GOTO   06E
006C:  BTFSS  28.0
006D:  GOTO   081
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006E:  MOVF   59,W
006F:  SUBLW  1F
0070:  BTFSS  03.0
0071:  GOTO   081
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0072:  MOVF   59,W
0073:  INCF   59,F
0074:  ANDLW  1F
0075:  ADDLW  19
0076:  MOVWF  04
0077:  MOVLW  20
0078:  MOVWF  05
0079:  BTFSC  03.0
007A:  INCF   05,F
007B:  BTFSS  11.5
007C:  GOTO   07B
007D:  MOVLB  03
007E:  MOVF   19,W
007F:  MOVWF  00
0080:  MOVLB  00
0081:  BCF    11.5
0082:  MOVLP  00
0083:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
07DB:  MOVLW  84
07DC:  MOVLB  03
07DD:  MOVWF  11
07DE:  MOVLW  00
07DF:  MOVWF  12
07E0:  MOVLB  00
07E1:  CALL   749
....................    enable_interrupts(INT_RDA);
07E2:  MOVLB  01
07E3:  BSF    11.5
....................    enable_interrupts(global);
07E4:  MOVLW  C0
07E5:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
07E6:  MOVLW  8D
07E7:  MOVLB  03
07E8:  MOVWF  11
07E9:  MOVLW  00
07EA:  MOVWF  12
07EB:  MOVLB  00
07EC:  CALL   749
07ED:  MOVLP  38
07EE:  GOTO   51B (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0F79:  MOVLB  0F
0F7A:  MOVF   57,W
0F7B:  MOVWF  7A
0F7C:  MOVF   56,W
0F7D:  MOVWF  04
0F7E:  MOVF   7A,W
0F7F:  MOVWF  05
0F80:  MOVF   00,W
0F81:  MOVWF  58
0F82:  MOVF   55,W
0F83:  MOVWF  05
0F84:  MOVF   54,W
0F85:  MOVWF  04
0F86:  CLRF   77
0F87:  MOVF   58,W
0F88:  MOVWF  78
0F89:  MOVLB  00
....................    *receive_signal_size = 0;
*
0F91:  MOVLB  0F
0F92:  MOVF   57,W
0F93:  MOVWF  7A
0F94:  MOVF   56,W
0F95:  MOVWF  04
0F96:  MOVF   7A,W
0F97:  MOVWF  05
0F98:  CLRF   00
0F99:  MOVLB  00
0F9A:  MOVLP  38
0F9B:  GOTO   573 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // DI/O RTC
.................... #define RTC_PIN PIN_C1
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32  smf_piclog_use_counter;
....................         unsigned int8   smf_piclog_loop_counter;
....................         unsigned int32  smf_meas_use_counter;
....................         unsigned int8   smf_meas_loop_counter;
.................... 
....................         unsigned int32  misf_piclog_use_counter;
....................         unsigned int8   misf_piclog_loop_counter;
....................         unsigned int32  misf_piclog_uncopyed_counter;
....................         unsigned int8   misf_piclog_write_counter;
....................         unsigned int32  misf_meas_use_counter;
....................         unsigned int8   misf_meas_loop_counter;
....................         unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................         unsigned int8   reserve[34];
....................         unsigned int8   crc;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[PACKET_SIZE]; 
.................... } FLASH_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // DI/O RTC
.................... #define RTC_PIN PIN_C1
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32  smf_piclog_use_counter;
....................         unsigned int8   smf_piclog_loop_counter;
....................         unsigned int32  smf_meas_use_counter;
....................         unsigned int8   smf_meas_loop_counter;
.................... 
....................         unsigned int32  misf_piclog_use_counter;
....................         unsigned int8   misf_piclog_loop_counter;
....................         unsigned int32  misf_piclog_uncopyed_counter;
....................         unsigned int8   misf_piclog_write_counter;
....................         unsigned int32  misf_meas_use_counter;
....................         unsigned int8   misf_meas_loop_counter;
....................         unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................         unsigned int8   reserve[34];
....................         unsigned int8   crc;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[PACKET_SIZE]; 
.................... } FLASH_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0DCA:  MOVLB  13
0DCB:  MOVF   43,W
0DCC:  XORLW  00
0DCD:  MOVLB  00
0DCE:  BTFSC  03.2
0DCF:  GOTO   5D4
0DD0:  XORLW  01
0DD1:  BTFSC  03.2
0DD2:  GOTO   607
0DD3:  GOTO   63A
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0DD4:  MOVLB  13
0DD5:  CLRF   4C
0DD6:  CLRF   4B
0DD7:  MOVLB  00
0DD8:  MOVLB  13
0DD9:  MOVF   4C,W
0DDA:  SUBWF  4A,W
0DDB:  BTFSC  03.0
0DDC:  GOTO   5DF
0DDD:  MOVLB  00
0DDE:  GOTO   606
0DDF:  MOVLB  00
0DE0:  BTFSS  03.2
0DE1:  GOTO   5EA
0DE2:  MOVLB  13
0DE3:  MOVF   49,W
0DE4:  SUBWF  4B,W
0DE5:  BTFSS  03.0
0DE6:  GOTO   5E9
0DE7:  MOVLB  00
0DE8:  GOTO   606
0DE9:  MOVLB  00
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0DEA:  MOVLB  13
0DEB:  MOVF   47,W
0DEC:  ADDWF  4B,W
0DED:  MOVWF  04
0DEE:  MOVF   48,W
0DEF:  ADDWFC 4C,W
0DF0:  MOVWF  05
0DF1:  MOVF   00,W
0DF2:  MOVWF  4F
0DF3:  MOVLB  04
0DF4:  BCF    15.5
0DF5:  MOVLW  40
0DF6:  MOVWF  14
0DF7:  MOVLW  09
0DF8:  MOVWF  12
0DF9:  MOVLW  2A
0DFA:  MOVWF  15
0DFB:  MOVLB  13
0DFC:  MOVF   4F,W
0DFD:  MOVWF  66
0DFE:  MOVLB  00
0DFF:  CALL   047
0E00:  MOVLB  13
0E01:  INCF   4B,F
0E02:  BTFSC  03.2
0E03:  INCF   4C,F
0E04:  MOVLB  00
0E05:  GOTO   5D8
....................          break;
0E06:  GOTO   63B
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E07:  MOVLB  13
0E08:  CLRF   4E
0E09:  CLRF   4D
0E0A:  MOVLB  00
0E0B:  MOVLB  13
0E0C:  MOVF   4E,W
0E0D:  SUBWF  4A,W
0E0E:  BTFSC  03.0
0E0F:  GOTO   612
0E10:  MOVLB  00
0E11:  GOTO   639
0E12:  MOVLB  00
0E13:  BTFSS  03.2
0E14:  GOTO   61D
0E15:  MOVLB  13
0E16:  MOVF   49,W
0E17:  SUBWF  4D,W
0E18:  BTFSS  03.0
0E19:  GOTO   61C
0E1A:  MOVLB  00
0E1B:  GOTO   639
0E1C:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0E1D:  MOVLB  13
0E1E:  MOVF   47,W
0E1F:  ADDWF  4D,W
0E20:  MOVWF  04
0E21:  MOVF   48,W
0E22:  ADDWFC 4E,W
0E23:  MOVWF  05
0E24:  MOVF   00,W
0E25:  MOVWF  4F
0E26:  MOVLB  04
0E27:  BCF    15.5
0E28:  MOVLW  40
0E29:  MOVWF  14
0E2A:  MOVLW  09
0E2B:  MOVWF  12
0E2C:  MOVLW  2A
0E2D:  MOVWF  15
0E2E:  MOVLB  13
0E2F:  MOVF   4F,W
0E30:  MOVWF  66
0E31:  MOVLB  00
0E32:  CALL   058
0E33:  MOVLB  13
0E34:  INCF   4D,F
0E35:  BTFSC  03.2
0E36:  INCF   4E,F
0E37:  MOVLB  00
0E38:  GOTO   60B
....................          break;
0E39:  GOTO   63B
....................          
....................       default:
....................          break;
0E3A:  GOTO   63B
....................    }
....................    return;
0E3B:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0869:  MOVLB  13
086A:  MOVF   49,W
086B:  XORLW  00
086C:  MOVLB  00
086D:  BTFSC  03.2
086E:  GOTO   073
086F:  XORLW  01
0870:  BTFSC  03.2
0871:  GOTO   0F4
0872:  GOTO   175
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0873:  MOVLB  13
0874:  CLRF   58
0875:  CLRF   57
0876:  MOVLB  00
0877:  MOVLB  13
0878:  MOVF   58,W
0879:  SUBWF  50,W
087A:  BTFSC  03.0
087B:  GOTO   07E
087C:  MOVLB  00
087D:  GOTO   0A5
087E:  MOVLB  00
087F:  BTFSS  03.2
0880:  GOTO   089
0881:  MOVLB  13
0882:  MOVF   4F,W
0883:  SUBWF  57,W
0884:  BTFSS  03.0
0885:  GOTO   088
0886:  MOVLB  00
0887:  GOTO   0A5
0888:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0889:  MOVLB  13
088A:  MOVF   4D,W
088B:  ADDWF  57,W
088C:  MOVWF  04
088D:  MOVF   4E,W
088E:  ADDWFC 58,W
088F:  MOVWF  05
0890:  MOVF   00,W
0891:  MOVWF  64
0892:  MOVLB  04
0893:  BCF    15.5
0894:  MOVLW  40
0895:  MOVWF  14
0896:  MOVLW  09
0897:  MOVWF  12
0898:  MOVLW  2A
0899:  MOVWF  15
089A:  MOVLB  13
089B:  MOVF   64,W
089C:  MOVWF  66
089D:  MOVLB  00
089E:  CALL   047
089F:  MOVLB  13
08A0:  INCF   57,F
08A1:  BTFSC  03.2
08A2:  INCF   58,F
08A3:  MOVLB  00
08A4:  GOTO   077
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
08A5:  MOVLB  13
08A6:  CLRF   5C
08A7:  CLRF   5B
08A8:  CLRF   5A
08A9:  CLRF   59
08AA:  MOVLB  00
08AB:  MOVLB  13
08AC:  MOVF   5C,W
08AD:  SUBWF  56,W
08AE:  BTFSC  03.0
08AF:  GOTO   0B2
08B0:  MOVLB  00
08B1:  GOTO   0F3
08B2:  MOVLB  00
08B3:  BTFSS  03.2
08B4:  GOTO   0D1
08B5:  MOVLB  13
08B6:  MOVF   5B,W
08B7:  SUBWF  55,W
08B8:  BTFSC  03.0
08B9:  GOTO   0BC
08BA:  MOVLB  00
08BB:  GOTO   0F3
08BC:  MOVLB  00
08BD:  BTFSS  03.2
08BE:  GOTO   0D1
08BF:  MOVLB  13
08C0:  MOVF   5A,W
08C1:  SUBWF  54,W
08C2:  BTFSC  03.0
08C3:  GOTO   0C6
08C4:  MOVLB  00
08C5:  GOTO   0F3
08C6:  MOVLB  00
08C7:  BTFSS  03.2
08C8:  GOTO   0D1
08C9:  MOVLB  13
08CA:  MOVF   53,W
08CB:  SUBWF  59,W
08CC:  BTFSS  03.0
08CD:  GOTO   0D0
08CE:  MOVLB  00
08CF:  GOTO   0F3
08D0:  MOVLB  00
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
08D1:  MOVLB  13
08D2:  MOVF   51,W
08D3:  ADDWF  59,W
08D4:  MOVWF  04
08D5:  MOVF   52,W
08D6:  ADDWFC 5A,W
08D7:  MOVWF  05
08D8:  MOVLB  04
08D9:  BCF    15.5
08DA:  MOVLW  40
08DB:  MOVWF  14
08DC:  MOVLW  09
08DD:  MOVWF  12
08DE:  MOVLW  2A
08DF:  MOVWF  15
08E0:  MOVLW  01
08E1:  MOVLB  13
08E2:  MOVWF  66
08E3:  MOVLB  00
08E4:  CALL   047
08E5:  MOVF   78,W
08E6:  MOVF   77,W
08E7:  MOVWF  00
08E8:  MOVLW  01
08E9:  MOVLB  13
08EA:  ADDWF  59,F
08EB:  BTFSC  03.0
08EC:  INCF   5A,F
08ED:  BTFSC  03.2
08EE:  INCF   5B,F
08EF:  BTFSC  03.2
08F0:  INCF   5C,F
08F1:  MOVLB  00
08F2:  GOTO   0AB
....................          break;
08F3:  GOTO   176
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
08F4:  MOVLB  13
08F5:  CLRF   5E
08F6:  CLRF   5D
08F7:  MOVLB  00
08F8:  MOVLB  13
08F9:  MOVF   5E,W
08FA:  SUBWF  50,W
08FB:  BTFSC  03.0
08FC:  GOTO   0FF
08FD:  MOVLB  00
08FE:  GOTO   126
08FF:  MOVLB  00
0900:  BTFSS  03.2
0901:  GOTO   10A
0902:  MOVLB  13
0903:  MOVF   4F,W
0904:  SUBWF  5D,W
0905:  BTFSS  03.0
0906:  GOTO   109
0907:  MOVLB  00
0908:  GOTO   126
0909:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
090A:  MOVLB  13
090B:  MOVF   4D,W
090C:  ADDWF  5D,W
090D:  MOVWF  04
090E:  MOVF   4E,W
090F:  ADDWFC 5E,W
0910:  MOVWF  05
0911:  MOVF   00,W
0912:  MOVWF  64
0913:  MOVLB  04
0914:  BCF    15.5
0915:  MOVLW  40
0916:  MOVWF  14
0917:  MOVLW  09
0918:  MOVWF  12
0919:  MOVLW  2A
091A:  MOVWF  15
091B:  MOVLB  13
091C:  MOVF   64,W
091D:  MOVWF  66
091E:  MOVLB  00
091F:  CALL   058
0920:  MOVLB  13
0921:  INCF   5D,F
0922:  BTFSC  03.2
0923:  INCF   5E,F
0924:  MOVLB  00
0925:  GOTO   0F8
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0926:  MOVLB  13
0927:  CLRF   62
0928:  CLRF   61
0929:  CLRF   60
092A:  CLRF   5F
092B:  MOVLB  00
092C:  MOVLB  13
092D:  MOVF   62,W
092E:  SUBWF  56,W
092F:  BTFSC  03.0
0930:  GOTO   133
0931:  MOVLB  00
0932:  GOTO   174
0933:  MOVLB  00
0934:  BTFSS  03.2
0935:  GOTO   152
0936:  MOVLB  13
0937:  MOVF   61,W
0938:  SUBWF  55,W
0939:  BTFSC  03.0
093A:  GOTO   13D
093B:  MOVLB  00
093C:  GOTO   174
093D:  MOVLB  00
093E:  BTFSS  03.2
093F:  GOTO   152
0940:  MOVLB  13
0941:  MOVF   60,W
0942:  SUBWF  54,W
0943:  BTFSC  03.0
0944:  GOTO   147
0945:  MOVLB  00
0946:  GOTO   174
0947:  MOVLB  00
0948:  BTFSS  03.2
0949:  GOTO   152
094A:  MOVLB  13
094B:  MOVF   53,W
094C:  SUBWF  5F,W
094D:  BTFSS  03.0
094E:  GOTO   151
094F:  MOVLB  00
0950:  GOTO   174
0951:  MOVLB  00
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0952:  MOVLB  13
0953:  MOVF   51,W
0954:  ADDWF  5F,W
0955:  MOVWF  04
0956:  MOVF   52,W
0957:  ADDWFC 60,W
0958:  MOVWF  05
0959:  MOVLB  04
095A:  BCF    15.5
095B:  MOVLW  40
095C:  MOVWF  14
095D:  MOVLW  09
095E:  MOVWF  12
095F:  MOVLW  2A
0960:  MOVWF  15
0961:  MOVLW  02
0962:  MOVLB  13
0963:  MOVWF  66
0964:  MOVLB  00
0965:  CALL   058
0966:  MOVF   78,W
0967:  MOVF   77,W
0968:  MOVWF  00
0969:  MOVLW  01
096A:  MOVLB  13
096B:  ADDWF  5F,F
096C:  BTFSC  03.0
096D:  INCF   60,F
096E:  BTFSC  03.2
096F:  INCF   61,F
0970:  BTFSC  03.2
0971:  INCF   62,F
0972:  MOVLB  00
0973:  GOTO   12C
....................          break;
0974:  GOTO   176
....................    
....................          
....................       default:
....................          break;
0975:  GOTO   176
....................    }
....................    return;
0976:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0E3C:  MOVLB  13
0E3D:  MOVF   43,W
0E3E:  XORLW  00
0E3F:  MOVLB  00
0E40:  BTFSC  03.2
0E41:  GOTO   646
0E42:  XORLW  01
0E43:  BTFSC  03.2
0E44:  GOTO   69E
0E45:  GOTO   6F6
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0E46:  MOVLB  13
0E47:  CLRF   4E
0E48:  MOVLB  00
0E49:  MOVLB  13
0E4A:  MOVF   49,W
0E4B:  SUBWF  4E,W
0E4C:  BTFSS  03.0
0E4D:  GOTO   650
0E4E:  MOVLB  00
0E4F:  GOTO   66B
0E50:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0E51:  MOVLB  13
0E52:  MOVF   4E,W
0E53:  ADDWF  47,W
0E54:  MOVWF  04
0E55:  MOVLW  00
0E56:  ADDWFC 48,W
0E57:  MOVWF  05
0E58:  MOVF   00,W
0E59:  MOVWF  54
0E5A:  MOVLB  04
0E5B:  BCF    15.5
0E5C:  MOVLW  40
0E5D:  MOVWF  14
0E5E:  MOVLW  09
0E5F:  MOVWF  12
0E60:  MOVLW  2A
0E61:  MOVWF  15
0E62:  MOVLB  13
0E63:  MOVF   54,W
0E64:  MOVWF  66
0E65:  MOVLB  00
0E66:  CALL   047
0E67:  MOVLB  13
0E68:  INCF   4E,F
0E69:  MOVLB  00
0E6A:  GOTO   649
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E6B:  MOVLB  13
0E6C:  CLRF   50
0E6D:  CLRF   4F
0E6E:  MOVLB  00
0E6F:  MOVLB  13
0E70:  MOVF   50,W
0E71:  SUBWF  4D,W
0E72:  BTFSC  03.0
0E73:  GOTO   676
0E74:  MOVLB  00
0E75:  GOTO   69D
0E76:  MOVLB  00
0E77:  BTFSS  03.2
0E78:  GOTO   681
0E79:  MOVLB  13
0E7A:  MOVF   4C,W
0E7B:  SUBWF  4F,W
0E7C:  BTFSS  03.0
0E7D:  GOTO   680
0E7E:  MOVLB  00
0E7F:  GOTO   69D
0E80:  MOVLB  00
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0E81:  MOVLB  13
0E82:  MOVF   4A,W
0E83:  ADDWF  4F,W
0E84:  MOVWF  04
0E85:  MOVF   4B,W
0E86:  ADDWFC 50,W
0E87:  MOVWF  05
0E88:  MOVF   00,W
0E89:  MOVWF  54
0E8A:  MOVLB  04
0E8B:  BCF    15.5
0E8C:  MOVLW  40
0E8D:  MOVWF  14
0E8E:  MOVLW  09
0E8F:  MOVWF  12
0E90:  MOVLW  2A
0E91:  MOVWF  15
0E92:  MOVLB  13
0E93:  MOVF   54,W
0E94:  MOVWF  66
0E95:  MOVLB  00
0E96:  CALL   047
0E97:  MOVLB  13
0E98:  INCF   4F,F
0E99:  BTFSC  03.2
0E9A:  INCF   50,F
0E9B:  MOVLB  00
0E9C:  GOTO   66F
....................          break;
0E9D:  GOTO   6F7
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0E9E:  MOVLB  13
0E9F:  CLRF   51
0EA0:  MOVLB  00
0EA1:  MOVLB  13
0EA2:  MOVF   49,W
0EA3:  SUBWF  51,W
0EA4:  BTFSS  03.0
0EA5:  GOTO   6A8
0EA6:  MOVLB  00
0EA7:  GOTO   6C3
0EA8:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0EA9:  MOVLB  13
0EAA:  MOVF   51,W
0EAB:  ADDWF  47,W
0EAC:  MOVWF  04
0EAD:  MOVLW  00
0EAE:  ADDWFC 48,W
0EAF:  MOVWF  05
0EB0:  MOVF   00,W
0EB1:  MOVWF  54
0EB2:  MOVLB  04
0EB3:  BCF    15.5
0EB4:  MOVLW  40
0EB5:  MOVWF  14
0EB6:  MOVLW  09
0EB7:  MOVWF  12
0EB8:  MOVLW  2A
0EB9:  MOVWF  15
0EBA:  MOVLB  13
0EBB:  MOVF   54,W
0EBC:  MOVWF  66
0EBD:  MOVLB  00
0EBE:  CALL   058
0EBF:  MOVLB  13
0EC0:  INCF   51,F
0EC1:  MOVLB  00
0EC2:  GOTO   6A1
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0EC3:  MOVLB  13
0EC4:  CLRF   53
0EC5:  CLRF   52
0EC6:  MOVLB  00
0EC7:  MOVLB  13
0EC8:  MOVF   53,W
0EC9:  SUBWF  4D,W
0ECA:  BTFSC  03.0
0ECB:  GOTO   6CE
0ECC:  MOVLB  00
0ECD:  GOTO   6F5
0ECE:  MOVLB  00
0ECF:  BTFSS  03.2
0ED0:  GOTO   6D9
0ED1:  MOVLB  13
0ED2:  MOVF   4C,W
0ED3:  SUBWF  52,W
0ED4:  BTFSS  03.0
0ED5:  GOTO   6D8
0ED6:  MOVLB  00
0ED7:  GOTO   6F5
0ED8:  MOVLB  00
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0ED9:  MOVLB  13
0EDA:  MOVF   4A,W
0EDB:  ADDWF  52,W
0EDC:  MOVWF  04
0EDD:  MOVF   4B,W
0EDE:  ADDWFC 53,W
0EDF:  MOVWF  05
0EE0:  MOVF   00,W
0EE1:  MOVWF  54
0EE2:  MOVLB  04
0EE3:  BCF    15.5
0EE4:  MOVLW  40
0EE5:  MOVWF  14
0EE6:  MOVLW  09
0EE7:  MOVWF  12
0EE8:  MOVLW  2A
0EE9:  MOVWF  15
0EEA:  MOVLB  13
0EEB:  MOVF   54,W
0EEC:  MOVWF  66
0EED:  MOVLB  00
0EEE:  CALL   058
0EEF:  MOVLB  13
0EF0:  INCF   52,F
0EF1:  BTFSC  03.2
0EF2:  INCF   53,F
0EF3:  MOVLB  00
0EF4:  GOTO   6C7
....................          break;
0EF5:  GOTO   6F7
....................          
....................       default:
....................          break;
0EF6:  GOTO   6F7
....................    }
....................    return;
0EF7:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0FA7:  MOVLB  13
0FA8:  MOVF   2B,W
0FA9:  MOVWF  49
0FAA:  MOVLW  01
0FAB:  MOVWF  4A
0FAC:  MOVLW  01
0FAD:  MOVWF  4C
0FAE:  CLRF   4B
0FAF:  MOVLB  00
0FB0:  CALL   021
0FB1:  MOVLB  13
0FB2:  MOVF   2B,W
0FB3:  MOVWF  49
0FB4:  CLRF   4A
0FB5:  CLRF   4C
0FB6:  MOVLW  80
0FB7:  MOVWF  4B
0FB8:  MOVLB  00
0FB9:  CALL   021
0FBA:  RETURN
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
0EF8:  MOVLW  05
0EF9:  MOVLB  13
0EFA:  MOVWF  47
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0EFB:  MOVF   45,W
0EFC:  MOVWF  49
0EFD:  CLRF   4A
0EFE:  MOVLW  01
0EFF:  MOVWF  4C
0F00:  CLRF   4B
0F01:  MOVLB  00
0F02:  CALL   021
0F03:  MOVLB  13
0F04:  MOVF   45,W
0F05:  MOVWF  49
0F06:  CLRF   4A
0F07:  CLRF   4C
0F08:  MOVLW  80
0F09:  MOVWF  4B
0F0A:  MOVLB  00
0F0B:  CALL   021
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0F0C:  MOVLB  13
0F0D:  MOVF   46,W
0F0E:  MOVWF  4C
0F0F:  MOVF   45,W
0F10:  MOVWF  4B
0F11:  MOVF   44,W
0F12:  MOVWF  4A
0F13:  MOVF   43,W
0F14:  MOVWF  49
0F15:  MOVLW  26
0F16:  MOVWF  4E
0F17:  MOVLW  17
0F18:  MOVWF  4D
0F19:  CLRF   50
0F1A:  MOVLW  01
0F1B:  MOVWF  4F
0F1C:  MOVLW  26
0F1D:  MOVWF  52
0F1E:  MOVLW  18
0F1F:  MOVWF  51
0F20:  CLRF   56
0F21:  CLRF   55
0F22:  CLRF   54
0F23:  MOVLW  01
0F24:  MOVWF  53
0F25:  MOVLB  00
0F26:  CALL   069
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
0F27:  MOVLB  13
0F28:  MOVF   45,W
0F29:  MOVWF  49
0F2A:  MOVLW  01
0F2B:  MOVWF  4A
0F2C:  MOVLW  01
0F2D:  MOVWF  4C
0F2E:  CLRF   4B
0F2F:  MOVLB  00
0F30:  CALL   021
0F31:  MOVLB  13
0F32:  MOVF   45,W
0F33:  MOVWF  49
0F34:  CLRF   4A
0F35:  CLRF   4C
0F36:  MOVLW  80
0F37:  MOVWF  4B
0F38:  MOVLB  00
0F39:  CALL   021
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
0F3A:  MOVLB  13
0F3B:  MOVF   48,W
0F3C:  MOVWF  78
0F3D:  MOVLB  00
0F3E:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
161C:  MOVLB  10
161D:  MOVF   21,F
161E:  BTFSC  03.2
161F:  GOTO   622
1620:  MOVLB  00
1621:  GOTO   6E4
1622:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1623:  MOVLW  06
1624:  MOVLB  10
1625:  MOVWF  28
1626:  MOVLB  00
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
1627:  MOVLW  D8
1628:  MOVLB  10
1629:  MOVWF  29
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
162A:  MOVF   26,W
162B:  MOVWF  35
162C:  MOVF   27,W
162D:  MOVWF  36
162E:  CLRF   37
162F:  CLRF   38
1630:  MOVF   35,W
1631:  MOVWF  77
1632:  CLRF   78
1633:  CLRF   79
1634:  CLRF   7A
1635:  MOVF   77,W
1636:  MOVWF  2A
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1637:  MOVF   25,W
1638:  MOVWF  35
1639:  MOVF   26,W
163A:  MOVWF  36
163B:  MOVF   27,W
163C:  MOVWF  37
163D:  CLRF   38
163E:  MOVF   35,W
163F:  MOVWF  77
1640:  CLRF   78
1641:  CLRF   79
1642:  CLRF   7A
1643:  MOVF   77,W
1644:  MOVWF  2B
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1645:  MOVF   24,W
1646:  MOVWF  77
1647:  CLRF   78
1648:  CLRF   79
1649:  CLRF   7A
164A:  MOVF   77,W
164B:  MOVWF  2C
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
164C:  MOVF   22,W
164D:  MOVLB  13
164E:  MOVWF  49
164F:  CLRF   4A
1650:  MOVLW  01
1651:  MOVWF  4C
1652:  CLRF   4B
1653:  MOVLP  08
1654:  MOVLB  00
1655:  CALL   021
1656:  MOVLP  10
1657:  MOVLB  10
1658:  MOVF   22,W
1659:  MOVLB  13
165A:  MOVWF  49
165B:  CLRF   4A
165C:  CLRF   4C
165D:  MOVLW  80
165E:  MOVWF  4B
165F:  MOVLP  08
1660:  MOVLB  00
1661:  CALL   021
1662:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1663:  MOVLB  10
1664:  MOVF   23,W
1665:  MOVLB  13
1666:  MOVWF  46
1667:  MOVLB  10
1668:  MOVF   22,W
1669:  MOVLB  13
166A:  MOVWF  45
166B:  MOVLB  10
166C:  MOVF   21,W
166D:  MOVLB  13
166E:  MOVWF  44
166F:  MOVLB  10
1670:  MOVF   20,W
1671:  MOVLB  13
1672:  MOVWF  43
1673:  MOVLW  25
1674:  MOVWF  48
1675:  MOVLW  08
1676:  MOVWF  47
1677:  CLRF   4A
1678:  MOVLW  01
1679:  MOVWF  49
167A:  MOVLP  08
167B:  MOVLB  00
167C:  CALL   5CA
167D:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
167E:  MOVLB  10
167F:  MOVF   22,W
1680:  MOVLB  13
1681:  MOVWF  49
1682:  MOVLW  01
1683:  MOVWF  4A
1684:  MOVLW  01
1685:  MOVWF  4C
1686:  CLRF   4B
1687:  MOVLP  08
1688:  MOVLB  00
1689:  CALL   021
168A:  MOVLP  10
168B:  MOVLB  10
168C:  MOVF   22,W
168D:  MOVLB  13
168E:  MOVWF  49
168F:  CLRF   4A
1690:  CLRF   4C
1691:  MOVLW  80
1692:  MOVWF  4B
1693:  MOVLP  08
1694:  MOVLB  00
1695:  CALL   021
1696:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1697:  MOVLB  10
1698:  MOVF   22,W
1699:  MOVLB  13
169A:  MOVWF  49
169B:  CLRF   4A
169C:  MOVLW  01
169D:  MOVWF  4C
169E:  CLRF   4B
169F:  MOVLP  08
16A0:  MOVLB  00
16A1:  CALL   021
16A2:  MOVLP  10
16A3:  MOVLB  10
16A4:  MOVF   22,W
16A5:  MOVLB  13
16A6:  MOVWF  49
16A7:  CLRF   4A
16A8:  CLRF   4C
16A9:  MOVLW  80
16AA:  MOVWF  4B
16AB:  MOVLP  08
16AC:  MOVLB  00
16AD:  CALL   021
16AE:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
16AF:  MOVLB  10
16B0:  MOVF   23,W
16B1:  MOVLB  13
16B2:  MOVWF  46
16B3:  MOVLB  10
16B4:  MOVF   22,W
16B5:  MOVLB  13
16B6:  MOVWF  45
16B7:  MOVLB  10
16B8:  MOVF   21,W
16B9:  MOVLB  13
16BA:  MOVWF  44
16BB:  MOVLB  10
16BC:  MOVF   20,W
16BD:  MOVLB  13
16BE:  MOVWF  43
16BF:  MOVLW  25
16C0:  MOVWF  48
16C1:  MOVLW  09
16C2:  MOVWF  47
16C3:  CLRF   4A
16C4:  MOVLW  04
16C5:  MOVWF  49
16C6:  MOVLP  08
16C7:  MOVLB  00
16C8:  CALL   5CA
16C9:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
16CA:  MOVLB  10
16CB:  MOVF   22,W
16CC:  MOVLB  13
16CD:  MOVWF  49
16CE:  MOVLW  01
16CF:  MOVWF  4A
16D0:  MOVLW  01
16D1:  MOVWF  4C
16D2:  CLRF   4B
16D3:  MOVLP  08
16D4:  MOVLB  00
16D5:  CALL   021
16D6:  MOVLP  10
16D7:  MOVLB  10
16D8:  MOVF   22,W
16D9:  MOVLB  13
16DA:  MOVWF  49
16DB:  CLRF   4A
16DC:  CLRF   4C
16DD:  MOVLW  80
16DE:  MOVWF  4B
16DF:  MOVLP  08
16E0:  MOVLB  00
16E1:  CALL   021
16E2:  MOVLP  10
....................    }
16E3:  GOTO   7B9
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
16E4:  MOVLB  10
16E5:  DECFSZ 21,W
16E6:  GOTO   6E9
16E7:  GOTO   6EB
16E8:  MOVLB  00
16E9:  MOVLB  00
16EA:  GOTO   7B9
16EB:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
16EC:  MOVLW  06
16ED:  MOVLB  10
16EE:  MOVWF  2D
16EF:  MOVLB  00
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
16F0:  MOVLW  DC
16F1:  MOVLB  10
16F2:  MOVWF  2E
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
16F3:  MOVF   27,W
16F4:  MOVWF  35
16F5:  CLRF   36
16F6:  CLRF   37
16F7:  CLRF   38
16F8:  MOVF   35,W
16F9:  MOVWF  77
16FA:  CLRF   78
16FB:  CLRF   79
16FC:  CLRF   7A
16FD:  MOVF   77,W
16FE:  MOVWF  2F
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
16FF:  MOVF   26,W
1700:  MOVWF  35
1701:  MOVF   27,W
1702:  MOVWF  36
1703:  CLRF   37
1704:  CLRF   38
1705:  MOVF   35,W
1706:  MOVWF  77
1707:  CLRF   78
1708:  CLRF   79
1709:  CLRF   7A
170A:  MOVF   77,W
170B:  MOVWF  30
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
170C:  MOVF   25,W
170D:  MOVWF  35
170E:  MOVF   26,W
170F:  MOVWF  36
1710:  MOVF   27,W
1711:  MOVWF  37
1712:  CLRF   38
1713:  MOVF   35,W
1714:  MOVWF  77
1715:  CLRF   78
1716:  CLRF   79
1717:  CLRF   7A
1718:  MOVF   77,W
1719:  MOVWF  31
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
171A:  MOVF   24,W
171B:  MOVWF  77
171C:  CLRF   78
171D:  CLRF   79
171E:  CLRF   7A
171F:  MOVF   77,W
1720:  MOVWF  32
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1721:  MOVF   22,W
1722:  MOVLB  13
1723:  MOVWF  49
1724:  CLRF   4A
1725:  MOVLW  01
1726:  MOVWF  4C
1727:  CLRF   4B
1728:  MOVLP  08
1729:  MOVLB  00
172A:  CALL   021
172B:  MOVLP  10
172C:  MOVLB  10
172D:  MOVF   22,W
172E:  MOVLB  13
172F:  MOVWF  49
1730:  CLRF   4A
1731:  CLRF   4C
1732:  MOVLW  80
1733:  MOVWF  4B
1734:  MOVLP  08
1735:  MOVLB  00
1736:  CALL   021
1737:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1738:  MOVLB  10
1739:  MOVF   23,W
173A:  MOVLB  13
173B:  MOVWF  46
173C:  MOVLB  10
173D:  MOVF   22,W
173E:  MOVLB  13
173F:  MOVWF  45
1740:  MOVLB  10
1741:  MOVF   21,W
1742:  MOVLB  13
1743:  MOVWF  44
1744:  MOVLB  10
1745:  MOVF   20,W
1746:  MOVLB  13
1747:  MOVWF  43
1748:  MOVLW  25
1749:  MOVWF  48
174A:  MOVLW  0D
174B:  MOVWF  47
174C:  CLRF   4A
174D:  MOVLW  01
174E:  MOVWF  49
174F:  MOVLP  08
1750:  MOVLB  00
1751:  CALL   5CA
1752:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1753:  MOVLB  10
1754:  MOVF   22,W
1755:  MOVLB  13
1756:  MOVWF  49
1757:  MOVLW  01
1758:  MOVWF  4A
1759:  MOVLW  01
175A:  MOVWF  4C
175B:  CLRF   4B
175C:  MOVLP  08
175D:  MOVLB  00
175E:  CALL   021
175F:  MOVLP  10
1760:  MOVLB  10
1761:  MOVF   22,W
1762:  MOVLB  13
1763:  MOVWF  49
1764:  CLRF   4A
1765:  CLRF   4C
1766:  MOVLW  80
1767:  MOVWF  4B
1768:  MOVLP  08
1769:  MOVLB  00
176A:  CALL   021
176B:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
176C:  MOVLB  10
176D:  MOVF   22,W
176E:  MOVLB  13
176F:  MOVWF  49
1770:  CLRF   4A
1771:  MOVLW  01
1772:  MOVWF  4C
1773:  CLRF   4B
1774:  MOVLP  08
1775:  MOVLB  00
1776:  CALL   021
1777:  MOVLP  10
1778:  MOVLB  10
1779:  MOVF   22,W
177A:  MOVLB  13
177B:  MOVWF  49
177C:  CLRF   4A
177D:  CLRF   4C
177E:  MOVLW  80
177F:  MOVWF  4B
1780:  MOVLP  08
1781:  MOVLB  00
1782:  CALL   021
1783:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1784:  MOVLB  10
1785:  MOVF   23,W
1786:  MOVLB  13
1787:  MOVWF  46
1788:  MOVLB  10
1789:  MOVF   22,W
178A:  MOVLB  13
178B:  MOVWF  45
178C:  MOVLB  10
178D:  MOVF   21,W
178E:  MOVLB  13
178F:  MOVWF  44
1790:  MOVLB  10
1791:  MOVF   20,W
1792:  MOVLB  13
1793:  MOVWF  43
1794:  MOVLW  25
1795:  MOVWF  48
1796:  MOVLW  0E
1797:  MOVWF  47
1798:  CLRF   4A
1799:  MOVLW  05
179A:  MOVWF  49
179B:  MOVLP  08
179C:  MOVLB  00
179D:  CALL   5CA
179E:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
179F:  MOVLB  10
17A0:  MOVF   22,W
17A1:  MOVLB  13
17A2:  MOVWF  49
17A3:  MOVLW  01
17A4:  MOVWF  4A
17A5:  MOVLW  01
17A6:  MOVWF  4C
17A7:  CLRF   4B
17A8:  MOVLP  08
17A9:  MOVLB  00
17AA:  CALL   021
17AB:  MOVLP  10
17AC:  MOVLB  10
17AD:  MOVF   22,W
17AE:  MOVLB  13
17AF:  MOVWF  49
17B0:  CLRF   4A
17B1:  CLRF   4C
17B2:  MOVLW  80
17B3:  MOVWF  4B
17B4:  MOVLP  08
17B5:  MOVLB  00
17B6:  CALL   021
17B7:  MOVLP  10
....................    }
17B8:  GOTO   7B9
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
17B9:  MOVLB  10
17BA:  CLRF   33
17BB:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
17BC:  MOVLB  10
17BD:  MOVF   23,W
17BE:  MOVLB  13
17BF:  MOVWF  46
17C0:  MOVLB  10
17C1:  MOVF   22,W
17C2:  MOVLB  13
17C3:  MOVWF  45
17C4:  MOVLB  10
17C5:  MOVF   21,W
17C6:  MOVLB  13
17C7:  MOVWF  44
17C8:  MOVLB  10
17C9:  MOVF   20,W
17CA:  MOVLB  13
17CB:  MOVWF  43
17CC:  MOVLP  08
17CD:  MOVLB  00
17CE:  CALL   6F8
17CF:  MOVLP  10
17D0:  MOVF   78,W
17D1:  ANDLW  01
17D2:  SUBLW  01
17D3:  BTFSS  03.2
17D4:  GOTO   7F9
....................       if(timeout_counter > 10)
17D5:  MOVLB  10
17D6:  MOVF   33,W
17D7:  SUBLW  0A
17D8:  BTFSS  03.0
17D9:  GOTO   7DC
17DA:  MOVLB  00
17DB:  GOTO   7E5
17DC:  MOVLB  00
....................          delay_ms(200);
17DD:  MOVLW  C8
17DE:  MOVLB  13
17DF:  MOVWF  43
17E0:  MOVLP  08
17E1:  MOVLB  00
17E2:  CALL   73F
17E3:  MOVLP  10
17E4:  GOTO   7EC
....................       else
....................          delay_ms(10);   
17E5:  MOVLW  0A
17E6:  MOVLB  13
17E7:  MOVWF  43
17E8:  MOVLP  08
17E9:  MOVLB  00
17EA:  CALL   73F
17EB:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
17EC:  MOVLB  10
17ED:  MOVF   33,W
17EE:  SUBLW  64
17EF:  BTFSS  03.0
17F0:  GOTO   7F3
17F1:  MOVLB  00
17F2:  GOTO   7F5
17F3:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
17F4:  GOTO   7F9
....................       }  
....................       timeout_counter++;
17F5:  MOVLB  10
17F6:  INCF   33,F
17F7:  MOVLB  00
17F8:  GOTO   7BC
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
17F9:  RETURN
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2BF5:  MOVLB  11
2BF6:  MOVF   45,F
2BF7:  BTFSC  03.2
2BF8:  GOTO   3FB
2BF9:  MOVLB  00
2BFA:  GOTO   4BD
2BFB:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
2BFC:  MOVLW  06
2BFD:  MOVLB  11
2BFE:  MOVWF  4C
2BFF:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
2C00:  MOVLW  20
2C01:  MOVLB  11
2C02:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2C03:  MOVF   4A,W
2C04:  MOVWF  5D
2C05:  MOVF   4B,W
2C06:  MOVWF  5E
2C07:  CLRF   5F
2C08:  CLRF   60
2C09:  MOVF   5D,W
2C0A:  MOVWF  77
2C0B:  CLRF   78
2C0C:  CLRF   79
2C0D:  CLRF   7A
2C0E:  MOVF   77,W
2C0F:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2C10:  MOVF   49,W
2C11:  MOVWF  5D
2C12:  MOVF   4A,W
2C13:  MOVWF  5E
2C14:  MOVF   4B,W
2C15:  MOVWF  5F
2C16:  CLRF   60
2C17:  MOVF   5D,W
2C18:  MOVWF  77
2C19:  CLRF   78
2C1A:  CLRF   79
2C1B:  CLRF   7A
2C1C:  MOVF   77,W
2C1D:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
2C1E:  MOVF   48,W
2C1F:  MOVWF  77
2C20:  CLRF   78
2C21:  CLRF   79
2C22:  CLRF   7A
2C23:  MOVF   77,W
2C24:  MOVWF  50
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
2C25:  MOVF   46,W
2C26:  MOVLB  13
2C27:  MOVWF  49
2C28:  CLRF   4A
2C29:  MOVLW  01
2C2A:  MOVWF  4C
2C2B:  CLRF   4B
2C2C:  MOVLP  08
2C2D:  MOVLB  00
2C2E:  CALL   021
2C2F:  MOVLP  28
2C30:  MOVLB  11
2C31:  MOVF   46,W
2C32:  MOVLB  13
2C33:  MOVWF  49
2C34:  CLRF   4A
2C35:  CLRF   4C
2C36:  MOVLW  80
2C37:  MOVWF  4B
2C38:  MOVLP  08
2C39:  MOVLB  00
2C3A:  CALL   021
2C3B:  MOVLP  28
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
2C3C:  MOVLB  11
2C3D:  MOVF   47,W
2C3E:  MOVLB  13
2C3F:  MOVWF  46
2C40:  MOVLB  11
2C41:  MOVF   46,W
2C42:  MOVLB  13
2C43:  MOVWF  45
2C44:  MOVLB  11
2C45:  MOVF   45,W
2C46:  MOVLB  13
2C47:  MOVWF  44
2C48:  MOVLB  11
2C49:  MOVF   44,W
2C4A:  MOVLB  13
2C4B:  MOVWF  43
2C4C:  MOVLW  25
2C4D:  MOVWF  48
2C4E:  MOVLW  7C
2C4F:  MOVWF  47
2C50:  CLRF   4A
2C51:  MOVLW  01
2C52:  MOVWF  49
2C53:  MOVLP  08
2C54:  MOVLB  00
2C55:  CALL   5CA
2C56:  MOVLP  28
....................       output_high(flash_stream.cs_pin);
2C57:  MOVLB  11
2C58:  MOVF   46,W
2C59:  MOVLB  13
2C5A:  MOVWF  49
2C5B:  MOVLW  01
2C5C:  MOVWF  4A
2C5D:  MOVLW  01
2C5E:  MOVWF  4C
2C5F:  CLRF   4B
2C60:  MOVLP  08
2C61:  MOVLB  00
2C62:  CALL   021
2C63:  MOVLP  28
2C64:  MOVLB  11
2C65:  MOVF   46,W
2C66:  MOVLB  13
2C67:  MOVWF  49
2C68:  CLRF   4A
2C69:  CLRF   4C
2C6A:  MOVLW  80
2C6B:  MOVWF  4B
2C6C:  MOVLP  08
2C6D:  MOVLB  00
2C6E:  CALL   021
2C6F:  MOVLP  28
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
2C70:  MOVLB  11
2C71:  MOVF   46,W
2C72:  MOVLB  13
2C73:  MOVWF  49
2C74:  CLRF   4A
2C75:  MOVLW  01
2C76:  MOVWF  4C
2C77:  CLRF   4B
2C78:  MOVLP  08
2C79:  MOVLB  00
2C7A:  CALL   021
2C7B:  MOVLP  28
2C7C:  MOVLB  11
2C7D:  MOVF   46,W
2C7E:  MOVLB  13
2C7F:  MOVWF  49
2C80:  CLRF   4A
2C81:  CLRF   4C
2C82:  MOVLW  80
2C83:  MOVWF  4B
2C84:  MOVLP  08
2C85:  MOVLB  00
2C86:  CALL   021
2C87:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
2C88:  MOVLB  11
2C89:  MOVF   47,W
2C8A:  MOVLB  13
2C8B:  MOVWF  46
2C8C:  MOVLB  11
2C8D:  MOVF   46,W
2C8E:  MOVLB  13
2C8F:  MOVWF  45
2C90:  MOVLB  11
2C91:  MOVF   45,W
2C92:  MOVLB  13
2C93:  MOVWF  44
2C94:  MOVLB  11
2C95:  MOVF   44,W
2C96:  MOVLB  13
2C97:  MOVWF  43
2C98:  MOVLW  25
2C99:  MOVWF  48
2C9A:  MOVLW  7D
2C9B:  MOVWF  47
2C9C:  CLRF   4A
2C9D:  MOVLW  04
2C9E:  MOVWF  49
2C9F:  MOVLP  08
2CA0:  MOVLB  00
2CA1:  CALL   5CA
2CA2:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2CA3:  MOVLB  11
2CA4:  MOVF   46,W
2CA5:  MOVLB  13
2CA6:  MOVWF  49
2CA7:  MOVLW  01
2CA8:  MOVWF  4A
2CA9:  MOVLW  01
2CAA:  MOVWF  4C
2CAB:  CLRF   4B
2CAC:  MOVLP  08
2CAD:  MOVLB  00
2CAE:  CALL   021
2CAF:  MOVLP  28
2CB0:  MOVLB  11
2CB1:  MOVF   46,W
2CB2:  MOVLB  13
2CB3:  MOVWF  49
2CB4:  CLRF   4A
2CB5:  CLRF   4C
2CB6:  MOVLW  80
2CB7:  MOVWF  4B
2CB8:  MOVLP  08
2CB9:  MOVLB  00
2CBA:  CALL   021
2CBB:  MOVLP  28
....................    }
2CBC:  GOTO   592
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
2CBD:  MOVLB  11
2CBE:  DECFSZ 45,W
2CBF:  GOTO   4C2
2CC0:  GOTO   4C4
2CC1:  MOVLB  00
2CC2:  MOVLB  00
2CC3:  GOTO   592
2CC4:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
2CC5:  MOVLW  06
2CC6:  MOVLB  11
2CC7:  MOVWF  51
2CC8:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
2CC9:  MOVLW  21
2CCA:  MOVLB  11
2CCB:  MOVWF  52
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
2CCC:  MOVF   4B,W
2CCD:  MOVWF  5D
2CCE:  CLRF   5E
2CCF:  CLRF   5F
2CD0:  CLRF   60
2CD1:  MOVF   5D,W
2CD2:  MOVWF  77
2CD3:  CLRF   78
2CD4:  CLRF   79
2CD5:  CLRF   7A
2CD6:  MOVF   77,W
2CD7:  MOVWF  53
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2CD8:  MOVF   4A,W
2CD9:  MOVWF  5D
2CDA:  MOVF   4B,W
2CDB:  MOVWF  5E
2CDC:  CLRF   5F
2CDD:  CLRF   60
2CDE:  MOVF   5D,W
2CDF:  MOVWF  77
2CE0:  CLRF   78
2CE1:  CLRF   79
2CE2:  CLRF   7A
2CE3:  MOVF   77,W
2CE4:  MOVWF  54
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2CE5:  MOVF   49,W
2CE6:  MOVWF  5D
2CE7:  MOVF   4A,W
2CE8:  MOVWF  5E
2CE9:  MOVF   4B,W
2CEA:  MOVWF  5F
2CEB:  CLRF   60
2CEC:  MOVF   5D,W
2CED:  MOVWF  77
2CEE:  CLRF   78
2CEF:  CLRF   79
2CF0:  CLRF   7A
2CF1:  MOVF   77,W
2CF2:  MOVWF  55
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
2CF3:  MOVF   48,W
2CF4:  MOVWF  77
2CF5:  CLRF   78
2CF6:  CLRF   79
2CF7:  CLRF   7A
2CF8:  MOVF   77,W
2CF9:  MOVWF  56
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
2CFA:  MOVF   46,W
2CFB:  MOVLB  13
2CFC:  MOVWF  49
2CFD:  CLRF   4A
2CFE:  MOVLW  01
2CFF:  MOVWF  4C
2D00:  CLRF   4B
2D01:  MOVLP  08
2D02:  MOVLB  00
2D03:  CALL   021
2D04:  MOVLP  28
2D05:  MOVLB  11
2D06:  MOVF   46,W
2D07:  MOVLB  13
2D08:  MOVWF  49
2D09:  CLRF   4A
2D0A:  CLRF   4C
2D0B:  MOVLW  80
2D0C:  MOVWF  4B
2D0D:  MOVLP  08
2D0E:  MOVLB  00
2D0F:  CALL   021
2D10:  MOVLP  28
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
2D11:  MOVLB  11
2D12:  MOVF   47,W
2D13:  MOVLB  13
2D14:  MOVWF  46
2D15:  MOVLB  11
2D16:  MOVF   46,W
2D17:  MOVLB  13
2D18:  MOVWF  45
2D19:  MOVLB  11
2D1A:  MOVF   45,W
2D1B:  MOVLB  13
2D1C:  MOVWF  44
2D1D:  MOVLB  11
2D1E:  MOVF   44,W
2D1F:  MOVLB  13
2D20:  MOVWF  43
2D21:  MOVLW  25
2D22:  MOVWF  48
2D23:  MOVLW  81
2D24:  MOVWF  47
2D25:  CLRF   4A
2D26:  MOVLW  01
2D27:  MOVWF  49
2D28:  MOVLP  08
2D29:  MOVLB  00
2D2A:  CALL   5CA
2D2B:  MOVLP  28
....................       output_high(flash_stream.cs_pin);
2D2C:  MOVLB  11
2D2D:  MOVF   46,W
2D2E:  MOVLB  13
2D2F:  MOVWF  49
2D30:  MOVLW  01
2D31:  MOVWF  4A
2D32:  MOVLW  01
2D33:  MOVWF  4C
2D34:  CLRF   4B
2D35:  MOVLP  08
2D36:  MOVLB  00
2D37:  CALL   021
2D38:  MOVLP  28
2D39:  MOVLB  11
2D3A:  MOVF   46,W
2D3B:  MOVLB  13
2D3C:  MOVWF  49
2D3D:  CLRF   4A
2D3E:  CLRF   4C
2D3F:  MOVLW  80
2D40:  MOVWF  4B
2D41:  MOVLP  08
2D42:  MOVLB  00
2D43:  CALL   021
2D44:  MOVLP  28
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
2D45:  MOVLB  11
2D46:  MOVF   46,W
2D47:  MOVLB  13
2D48:  MOVWF  49
2D49:  CLRF   4A
2D4A:  MOVLW  01
2D4B:  MOVWF  4C
2D4C:  CLRF   4B
2D4D:  MOVLP  08
2D4E:  MOVLB  00
2D4F:  CALL   021
2D50:  MOVLP  28
2D51:  MOVLB  11
2D52:  MOVF   46,W
2D53:  MOVLB  13
2D54:  MOVWF  49
2D55:  CLRF   4A
2D56:  CLRF   4C
2D57:  MOVLW  80
2D58:  MOVWF  4B
2D59:  MOVLP  08
2D5A:  MOVLB  00
2D5B:  CALL   021
2D5C:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
2D5D:  MOVLB  11
2D5E:  MOVF   47,W
2D5F:  MOVLB  13
2D60:  MOVWF  46
2D61:  MOVLB  11
2D62:  MOVF   46,W
2D63:  MOVLB  13
2D64:  MOVWF  45
2D65:  MOVLB  11
2D66:  MOVF   45,W
2D67:  MOVLB  13
2D68:  MOVWF  44
2D69:  MOVLB  11
2D6A:  MOVF   44,W
2D6B:  MOVLB  13
2D6C:  MOVWF  43
2D6D:  MOVLW  25
2D6E:  MOVWF  48
2D6F:  MOVLW  82
2D70:  MOVWF  47
2D71:  CLRF   4A
2D72:  MOVLW  05
2D73:  MOVWF  49
2D74:  MOVLP  08
2D75:  MOVLB  00
2D76:  CALL   5CA
2D77:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2D78:  MOVLB  11
2D79:  MOVF   46,W
2D7A:  MOVLB  13
2D7B:  MOVWF  49
2D7C:  MOVLW  01
2D7D:  MOVWF  4A
2D7E:  MOVLW  01
2D7F:  MOVWF  4C
2D80:  CLRF   4B
2D81:  MOVLP  08
2D82:  MOVLB  00
2D83:  CALL   021
2D84:  MOVLP  28
2D85:  MOVLB  11
2D86:  MOVF   46,W
2D87:  MOVLB  13
2D88:  MOVWF  49
2D89:  CLRF   4A
2D8A:  CLRF   4C
2D8B:  MOVLW  80
2D8C:  MOVWF  4B
2D8D:  MOVLP  08
2D8E:  MOVLB  00
2D8F:  CALL   021
2D90:  MOVLP  28
....................    }
2D91:  GOTO   592
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
2D92:  MOVLB  11
2D93:  CLRF   57
2D94:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
2D95:  MOVLB  11
2D96:  MOVF   47,W
2D97:  MOVLB  13
2D98:  MOVWF  46
2D99:  MOVLB  11
2D9A:  MOVF   46,W
2D9B:  MOVLB  13
2D9C:  MOVWF  45
2D9D:  MOVLB  11
2D9E:  MOVF   45,W
2D9F:  MOVLB  13
2DA0:  MOVWF  44
2DA1:  MOVLB  11
2DA2:  MOVF   44,W
2DA3:  MOVLB  13
2DA4:  MOVWF  43
2DA5:  MOVLP  08
2DA6:  MOVLB  00
2DA7:  CALL   6F8
2DA8:  MOVLP  28
2DA9:  MOVF   78,W
2DAA:  ANDLW  01
2DAB:  SUBLW  01
2DAC:  BTFSS  03.2
2DAD:  GOTO   5D2
....................       if(timeout_counter > 10)
2DAE:  MOVLB  11
2DAF:  MOVF   57,W
2DB0:  SUBLW  0A
2DB1:  BTFSS  03.0
2DB2:  GOTO   5B5
2DB3:  MOVLB  00
2DB4:  GOTO   5BE
2DB5:  MOVLB  00
....................          delay_ms(200);
2DB6:  MOVLW  C8
2DB7:  MOVLB  13
2DB8:  MOVWF  43
2DB9:  MOVLP  08
2DBA:  MOVLB  00
2DBB:  CALL   73F
2DBC:  MOVLP  28
2DBD:  GOTO   5C5
....................       else
....................          delay_ms(10);   
2DBE:  MOVLW  0A
2DBF:  MOVLB  13
2DC0:  MOVWF  43
2DC1:  MOVLP  08
2DC2:  MOVLB  00
2DC3:  CALL   73F
2DC4:  MOVLP  28
....................       
....................       if(timeout_counter > 100){
2DC5:  MOVLB  11
2DC6:  MOVF   57,W
2DC7:  SUBLW  64
2DC8:  BTFSS  03.0
2DC9:  GOTO   5CC
2DCA:  MOVLB  00
2DCB:  GOTO   5CE
2DCC:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
2DCD:  GOTO   5D2
....................       }  
....................       timeout_counter++;
2DCE:  MOVLB  11
2DCF:  INCF   57,F
2DD0:  MOVLB  00
2DD1:  GOTO   595
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
2DD2:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
25A5:  MOVLB  11
25A6:  MOVF   50,F
25A7:  BTFSC  03.2
25A8:  GOTO   5AB
25A9:  MOVLB  00
25AA:  GOTO   62B
25AB:  MOVLB  00
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
25AC:  MOVLW  03
25AD:  MOVLB  11
25AE:  MOVWF  58
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
25AF:  MOVF   55,W
25B0:  MOVWF  62
25B1:  MOVF   56,W
25B2:  MOVWF  63
25B3:  CLRF   64
25B4:  CLRF   65
25B5:  MOVF   62,W
25B6:  MOVWF  77
25B7:  CLRF   78
25B8:  CLRF   79
25B9:  CLRF   7A
25BA:  MOVF   77,W
25BB:  MOVWF  59
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
25BC:  MOVF   54,W
25BD:  MOVWF  62
25BE:  MOVF   55,W
25BF:  MOVWF  63
25C0:  MOVF   56,W
25C1:  MOVWF  64
25C2:  CLRF   65
25C3:  MOVF   62,W
25C4:  MOVWF  77
25C5:  CLRF   78
25C6:  CLRF   79
25C7:  CLRF   7A
25C8:  MOVF   77,W
25C9:  MOVWF  5A
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
25CA:  MOVF   53,W
25CB:  MOVWF  77
25CC:  CLRF   78
25CD:  CLRF   79
25CE:  CLRF   7A
25CF:  MOVF   77,W
25D0:  MOVWF  5B
....................             
....................       output_low(flash_stream.cs_pin);
25D1:  MOVF   51,W
25D2:  MOVLB  13
25D3:  MOVWF  49
25D4:  CLRF   4A
25D5:  MOVLW  01
25D6:  MOVWF  4C
25D7:  CLRF   4B
25D8:  MOVLP  08
25D9:  MOVLB  00
25DA:  CALL   021
25DB:  MOVLP  20
25DC:  MOVLB  11
25DD:  MOVF   51,W
25DE:  MOVLB  13
25DF:  MOVWF  49
25E0:  CLRF   4A
25E1:  CLRF   4C
25E2:  MOVLW  80
25E3:  MOVWF  4B
25E4:  MOVLP  08
25E5:  MOVLB  00
25E6:  CALL   021
25E7:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
25E8:  MOVLB  11
25E9:  MOVF   52,W
25EA:  MOVLB  13
25EB:  MOVWF  4C
25EC:  MOVLB  11
25ED:  MOVF   51,W
25EE:  MOVLB  13
25EF:  MOVWF  4B
25F0:  MOVLB  11
25F1:  MOVF   50,W
25F2:  MOVLB  13
25F3:  MOVWF  4A
25F4:  MOVLB  11
25F5:  MOVF   4F,W
25F6:  MOVLB  13
25F7:  MOVWF  49
25F8:  MOVLW  25
25F9:  MOVWF  4E
25FA:  MOVLW  88
25FB:  MOVWF  4D
25FC:  CLRF   50
25FD:  MOVLW  04
25FE:  MOVWF  4F
25FF:  MOVLW  25
2600:  MOVWF  52
2601:  MOVLW  87
2602:  MOVWF  51
2603:  CLRF   56
2604:  CLRF   55
2605:  CLRF   54
2606:  MOVLW  01
2607:  MOVWF  53
2608:  MOVLP  08
2609:  MOVLB  00
260A:  CALL   069
260B:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
260C:  MOVLW  02
260D:  MOVWF  77
260E:  DECFSZ 77,F
260F:  GOTO   60E
2610:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2611:  MOVLB  11
2612:  MOVF   51,W
2613:  MOVLB  13
2614:  MOVWF  49
2615:  MOVLW  01
2616:  MOVWF  4A
2617:  MOVLW  01
2618:  MOVWF  4C
2619:  CLRF   4B
261A:  MOVLP  08
261B:  MOVLB  00
261C:  CALL   021
261D:  MOVLP  20
261E:  MOVLB  11
261F:  MOVF   51,W
2620:  MOVLB  13
2621:  MOVWF  49
2622:  CLRF   4A
2623:  CLRF   4C
2624:  MOVLW  80
2625:  MOVWF  4B
2626:  MOVLP  08
2627:  MOVLB  00
2628:  CALL   021
2629:  MOVLP  20
....................    }
262A:  GOTO   6BD
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
262B:  MOVLB  11
262C:  DECFSZ 50,W
262D:  GOTO   630
262E:  GOTO   632
262F:  MOVLB  00
2630:  MOVLB  00
2631:  GOTO   6BD
2632:  MOVLB  00
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
2633:  MOVLW  13
2634:  MOVLB  11
2635:  MOVWF  5C
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
2636:  MOVF   56,W
2637:  MOVWF  62
2638:  CLRF   63
2639:  CLRF   64
263A:  CLRF   65
263B:  MOVF   62,W
263C:  MOVWF  77
263D:  CLRF   78
263E:  CLRF   79
263F:  CLRF   7A
2640:  MOVF   77,W
2641:  MOVWF  5D
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2642:  MOVF   55,W
2643:  MOVWF  62
2644:  MOVF   56,W
2645:  MOVWF  63
2646:  CLRF   64
2647:  CLRF   65
2648:  MOVF   62,W
2649:  MOVWF  77
264A:  CLRF   78
264B:  CLRF   79
264C:  CLRF   7A
264D:  MOVF   77,W
264E:  MOVWF  5E
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
264F:  MOVF   54,W
2650:  MOVWF  62
2651:  MOVF   55,W
2652:  MOVWF  63
2653:  MOVF   56,W
2654:  MOVWF  64
2655:  CLRF   65
2656:  MOVF   62,W
2657:  MOVWF  77
2658:  CLRF   78
2659:  CLRF   79
265A:  CLRF   7A
265B:  MOVF   77,W
265C:  MOVWF  5F
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
265D:  MOVF   53,W
265E:  MOVWF  77
265F:  CLRF   78
2660:  CLRF   79
2661:  CLRF   7A
2662:  MOVF   77,W
2663:  MOVWF  60
....................    
....................       output_low(flash_stream.cs_pin);
2664:  MOVF   51,W
2665:  MOVLB  13
2666:  MOVWF  49
2667:  CLRF   4A
2668:  MOVLW  01
2669:  MOVWF  4C
266A:  CLRF   4B
266B:  MOVLP  08
266C:  MOVLB  00
266D:  CALL   021
266E:  MOVLP  20
266F:  MOVLB  11
2670:  MOVF   51,W
2671:  MOVLB  13
2672:  MOVWF  49
2673:  CLRF   4A
2674:  CLRF   4C
2675:  MOVLW  80
2676:  MOVWF  4B
2677:  MOVLP  08
2678:  MOVLB  00
2679:  CALL   021
267A:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
267B:  MOVLB  11
267C:  MOVF   52,W
267D:  MOVLB  13
267E:  MOVWF  4C
267F:  MOVLB  11
2680:  MOVF   51,W
2681:  MOVLB  13
2682:  MOVWF  4B
2683:  MOVLB  11
2684:  MOVF   50,W
2685:  MOVLB  13
2686:  MOVWF  4A
2687:  MOVLB  11
2688:  MOVF   4F,W
2689:  MOVLB  13
268A:  MOVWF  49
268B:  MOVLW  25
268C:  MOVWF  4E
268D:  MOVLW  8C
268E:  MOVWF  4D
268F:  CLRF   50
2690:  MOVLW  05
2691:  MOVWF  4F
2692:  MOVLW  25
2693:  MOVWF  52
2694:  MOVLW  87
2695:  MOVWF  51
2696:  CLRF   56
2697:  CLRF   55
2698:  CLRF   54
2699:  MOVLW  01
269A:  MOVWF  53
269B:  MOVLP  08
269C:  MOVLB  00
269D:  CALL   069
269E:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
269F:  MOVLW  02
26A0:  MOVWF  77
26A1:  DECFSZ 77,F
26A2:  GOTO   6A1
26A3:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
26A4:  MOVLB  11
26A5:  MOVF   51,W
26A6:  MOVLB  13
26A7:  MOVWF  49
26A8:  MOVLW  01
26A9:  MOVWF  4A
26AA:  MOVLW  01
26AB:  MOVWF  4C
26AC:  CLRF   4B
26AD:  MOVLP  08
26AE:  MOVLB  00
26AF:  CALL   021
26B0:  MOVLP  20
26B1:  MOVLB  11
26B2:  MOVF   51,W
26B3:  MOVLB  13
26B4:  MOVWF  49
26B5:  CLRF   4A
26B6:  CLRF   4C
26B7:  MOVLW  80
26B8:  MOVWF  4B
26B9:  MOVLP  08
26BA:  MOVLB  00
26BB:  CALL   021
26BC:  MOVLP  20
....................    }
....................    return read_data;
26BD:  MOVLB  11
26BE:  MOVF   57,W
26BF:  MOVWF  78
26C0:  MOVLB  00
26C1:  MOVLP  28
26C2:  GOTO   2E4 (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
09D4:  MOVLB  13
09D5:  MOVF   2A,F
09D6:  BTFSC  03.2
09D7:  GOTO   1DA
09D8:  MOVLB  00
09D9:  GOTO   248
09DA:  MOVLB  00
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
09DB:  MOVLW  03
09DC:  MOVLB  13
09DD:  MOVWF  37
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
09DE:  MOVF   2F,W
09DF:  MOVWF  44
09E0:  MOVF   30,W
09E1:  MOVWF  45
09E2:  CLRF   46
09E3:  CLRF   47
09E4:  MOVF   44,W
09E5:  MOVWF  77
09E6:  CLRF   78
09E7:  CLRF   79
09E8:  CLRF   7A
09E9:  MOVF   77,W
09EA:  MOVWF  38
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
09EB:  MOVF   2E,W
09EC:  MOVWF  44
09ED:  MOVF   2F,W
09EE:  MOVWF  45
09EF:  MOVF   30,W
09F0:  MOVWF  46
09F1:  CLRF   47
09F2:  MOVF   44,W
09F3:  MOVWF  77
09F4:  CLRF   78
09F5:  CLRF   79
09F6:  CLRF   7A
09F7:  MOVF   77,W
09F8:  MOVWF  39
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
09F9:  MOVF   2D,W
09FA:  MOVWF  77
09FB:  CLRF   78
09FC:  CLRF   79
09FD:  CLRF   7A
09FE:  MOVF   77,W
09FF:  MOVWF  3A
....................             
....................       output_low(flash_stream.cs_pin);
0A00:  MOVF   2B,W
0A01:  MOVWF  49
0A02:  CLRF   4A
0A03:  MOVLW  01
0A04:  MOVWF  4C
0A05:  CLRF   4B
0A06:  MOVLB  00
0A07:  CALL   021
0A08:  MOVLB  13
0A09:  MOVF   2B,W
0A0A:  MOVWF  49
0A0B:  CLRF   4A
0A0C:  CLRF   4C
0A0D:  MOVLW  80
0A0E:  MOVWF  4B
0A0F:  MOVLB  00
0A10:  CALL   021
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0A11:  MOVLB  13
0A12:  MOVF   2C,W
0A13:  MOVWF  4C
0A14:  MOVF   2B,W
0A15:  MOVWF  4B
0A16:  MOVF   2A,W
0A17:  MOVWF  4A
0A18:  MOVF   29,W
0A19:  MOVWF  49
0A1A:  MOVLW  26
0A1B:  MOVWF  4E
0A1C:  MOVLW  07
0A1D:  MOVWF  4D
0A1E:  CLRF   50
0A1F:  MOVLW  04
0A20:  MOVWF  4F
0A21:  MOVF   32,W
0A22:  MOVWF  52
0A23:  MOVF   31,W
0A24:  MOVWF  51
0A25:  MOVF   36,W
0A26:  MOVWF  56
0A27:  MOVF   35,W
0A28:  MOVWF  55
0A29:  MOVF   34,W
0A2A:  MOVWF  54
0A2B:  MOVF   33,W
0A2C:  MOVWF  53
0A2D:  MOVLB  00
0A2E:  CALL   069
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0A2F:  MOVLW  02
0A30:  MOVWF  77
0A31:  DECFSZ 77,F
0A32:  GOTO   231
0A33:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0A34:  MOVLB  13
0A35:  MOVF   2B,W
0A36:  MOVWF  49
0A37:  MOVLW  01
0A38:  MOVWF  4A
0A39:  MOVLW  01
0A3A:  MOVWF  4C
0A3B:  CLRF   4B
0A3C:  MOVLB  00
0A3D:  CALL   021
0A3E:  MOVLB  13
0A3F:  MOVF   2B,W
0A40:  MOVWF  49
0A41:  CLRF   4A
0A42:  CLRF   4C
0A43:  MOVLW  80
0A44:  MOVWF  4B
0A45:  MOVLB  00
0A46:  CALL   021
....................    }
0A47:  GOTO   2C8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0A48:  MOVLB  13
0A49:  DECFSZ 2A,W
0A4A:  GOTO   24D
0A4B:  GOTO   24F
0A4C:  MOVLB  00
0A4D:  MOVLB  00
0A4E:  GOTO   2C8
0A4F:  MOVLB  00
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0A50:  MOVLW  13
0A51:  MOVLB  13
0A52:  MOVWF  3B
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0A53:  MOVF   30,W
0A54:  MOVWF  44
0A55:  CLRF   45
0A56:  CLRF   46
0A57:  CLRF   47
0A58:  MOVF   44,W
0A59:  MOVWF  77
0A5A:  CLRF   78
0A5B:  CLRF   79
0A5C:  CLRF   7A
0A5D:  MOVF   77,W
0A5E:  MOVWF  3C
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A5F:  MOVF   2F,W
0A60:  MOVWF  44
0A61:  MOVF   30,W
0A62:  MOVWF  45
0A63:  CLRF   46
0A64:  CLRF   47
0A65:  MOVF   44,W
0A66:  MOVWF  77
0A67:  CLRF   78
0A68:  CLRF   79
0A69:  CLRF   7A
0A6A:  MOVF   77,W
0A6B:  MOVWF  3D
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A6C:  MOVF   2E,W
0A6D:  MOVWF  44
0A6E:  MOVF   2F,W
0A6F:  MOVWF  45
0A70:  MOVF   30,W
0A71:  MOVWF  46
0A72:  CLRF   47
0A73:  MOVF   44,W
0A74:  MOVWF  77
0A75:  CLRF   78
0A76:  CLRF   79
0A77:  CLRF   7A
0A78:  MOVF   77,W
0A79:  MOVWF  3E
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0A7A:  MOVF   2D,W
0A7B:  MOVWF  77
0A7C:  CLRF   78
0A7D:  CLRF   79
0A7E:  CLRF   7A
0A7F:  MOVF   77,W
0A80:  MOVWF  3F
....................    
....................       output_low(flash_stream.cs_pin);
0A81:  MOVF   2B,W
0A82:  MOVWF  49
0A83:  CLRF   4A
0A84:  MOVLW  01
0A85:  MOVWF  4C
0A86:  CLRF   4B
0A87:  MOVLB  00
0A88:  CALL   021
0A89:  MOVLB  13
0A8A:  MOVF   2B,W
0A8B:  MOVWF  49
0A8C:  CLRF   4A
0A8D:  CLRF   4C
0A8E:  MOVLW  80
0A8F:  MOVWF  4B
0A90:  MOVLB  00
0A91:  CALL   021
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0A92:  MOVLB  13
0A93:  MOVF   2C,W
0A94:  MOVWF  4C
0A95:  MOVF   2B,W
0A96:  MOVWF  4B
0A97:  MOVF   2A,W
0A98:  MOVWF  4A
0A99:  MOVF   29,W
0A9A:  MOVWF  49
0A9B:  MOVLW  26
0A9C:  MOVWF  4E
0A9D:  MOVLW  0B
0A9E:  MOVWF  4D
0A9F:  CLRF   50
0AA0:  MOVLW  05
0AA1:  MOVWF  4F
0AA2:  MOVF   32,W
0AA3:  MOVWF  52
0AA4:  MOVF   31,W
0AA5:  MOVWF  51
0AA6:  MOVF   36,W
0AA7:  MOVWF  56
0AA8:  MOVF   35,W
0AA9:  MOVWF  55
0AAA:  MOVF   34,W
0AAB:  MOVWF  54
0AAC:  MOVF   33,W
0AAD:  MOVWF  53
0AAE:  MOVLB  00
0AAF:  CALL   069
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0AB0:  MOVLW  02
0AB1:  MOVWF  77
0AB2:  DECFSZ 77,F
0AB3:  GOTO   2B2
0AB4:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0AB5:  MOVLB  13
0AB6:  MOVF   2B,W
0AB7:  MOVWF  49
0AB8:  MOVLW  01
0AB9:  MOVWF  4A
0ABA:  MOVLW  01
0ABB:  MOVWF  4C
0ABC:  CLRF   4B
0ABD:  MOVLB  00
0ABE:  CALL   021
0ABF:  MOVLB  13
0AC0:  MOVF   2B,W
0AC1:  MOVWF  49
0AC2:  CLRF   4A
0AC3:  CLRF   4C
0AC4:  MOVLW  80
0AC5:  MOVWF  4B
0AC6:  MOVLB  00
0AC7:  CALL   021
....................    }
....................    return;
0AC8:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
3000:  MOVLB  11
3001:  MOVF   44,F
3002:  BTFSC  03.2
3003:  GOTO   006
3004:  MOVLB  00
3005:  GOTO   0CF
3006:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
3007:  MOVLW  06
3008:  MOVLB  11
3009:  MOVWF  4C
300A:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
300B:  MOVLW  02
300C:  MOVLB  11
300D:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
300E:  MOVF   49,W
300F:  MOVWF  5D
3010:  MOVF   4A,W
3011:  MOVWF  5E
3012:  CLRF   5F
3013:  CLRF   60
3014:  MOVF   5D,W
3015:  MOVWF  77
3016:  CLRF   78
3017:  CLRF   79
3018:  CLRF   7A
3019:  MOVF   77,W
301A:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
301B:  MOVF   48,W
301C:  MOVWF  5D
301D:  MOVF   49,W
301E:  MOVWF  5E
301F:  MOVF   4A,W
3020:  MOVWF  5F
3021:  CLRF   60
3022:  MOVF   5D,W
3023:  MOVWF  77
3024:  CLRF   78
3025:  CLRF   79
3026:  CLRF   7A
3027:  MOVF   77,W
3028:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
3029:  MOVF   47,W
302A:  MOVWF  77
302B:  CLRF   78
302C:  CLRF   79
302D:  CLRF   7A
302E:  MOVF   77,W
302F:  MOVWF  50
....................       flash_cmd[4] = write_data;
3030:  MOVF   4B,W
3031:  MOVWF  51
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3032:  MOVF   45,W
3033:  MOVLB  13
3034:  MOVWF  49
3035:  CLRF   4A
3036:  MOVLW  01
3037:  MOVWF  4C
3038:  CLRF   4B
3039:  MOVLP  08
303A:  MOVLB  00
303B:  CALL   021
303C:  MOVLP  30
303D:  MOVLB  11
303E:  MOVF   45,W
303F:  MOVLB  13
3040:  MOVWF  49
3041:  CLRF   4A
3042:  CLRF   4C
3043:  MOVLW  80
3044:  MOVWF  4B
3045:  MOVLP  08
3046:  MOVLB  00
3047:  CALL   021
3048:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
3049:  MOVLB  11
304A:  MOVF   46,W
304B:  MOVLB  13
304C:  MOVWF  46
304D:  MOVLB  11
304E:  MOVF   45,W
304F:  MOVLB  13
3050:  MOVWF  45
3051:  MOVLB  11
3052:  MOVF   44,W
3053:  MOVLB  13
3054:  MOVWF  44
3055:  MOVLB  11
3056:  MOVF   43,W
3057:  MOVLB  13
3058:  MOVWF  43
3059:  MOVLW  25
305A:  MOVWF  48
305B:  MOVLW  7C
305C:  MOVWF  47
305D:  CLRF   4A
305E:  MOVLW  01
305F:  MOVWF  49
3060:  MOVLP  08
3061:  MOVLB  00
3062:  CALL   5CA
3063:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3064:  MOVLB  11
3065:  MOVF   45,W
3066:  MOVLB  13
3067:  MOVWF  49
3068:  MOVLW  01
3069:  MOVWF  4A
306A:  MOVLW  01
306B:  MOVWF  4C
306C:  CLRF   4B
306D:  MOVLP  08
306E:  MOVLB  00
306F:  CALL   021
3070:  MOVLP  30
3071:  MOVLB  11
3072:  MOVF   45,W
3073:  MOVLB  13
3074:  MOVWF  49
3075:  CLRF   4A
3076:  CLRF   4C
3077:  MOVLW  80
3078:  MOVWF  4B
3079:  MOVLP  08
307A:  MOVLB  00
307B:  CALL   021
307C:  MOVLP  30
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
307D:  MOVLB  11
307E:  MOVF   45,W
307F:  MOVLB  13
3080:  MOVWF  49
3081:  CLRF   4A
3082:  MOVLW  01
3083:  MOVWF  4C
3084:  CLRF   4B
3085:  MOVLP  08
3086:  MOVLB  00
3087:  CALL   021
3088:  MOVLP  30
3089:  MOVLB  11
308A:  MOVF   45,W
308B:  MOVLB  13
308C:  MOVWF  49
308D:  CLRF   4A
308E:  CLRF   4C
308F:  MOVLW  80
3090:  MOVWF  4B
3091:  MOVLP  08
3092:  MOVLB  00
3093:  CALL   021
3094:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
3095:  MOVLB  11
3096:  MOVF   46,W
3097:  MOVLB  13
3098:  MOVWF  46
3099:  MOVLB  11
309A:  MOVF   45,W
309B:  MOVLB  13
309C:  MOVWF  45
309D:  MOVLB  11
309E:  MOVF   44,W
309F:  MOVLB  13
30A0:  MOVWF  44
30A1:  MOVLB  11
30A2:  MOVF   43,W
30A3:  MOVLB  13
30A4:  MOVWF  43
30A5:  MOVLW  25
30A6:  MOVWF  48
30A7:  MOVLW  7D
30A8:  MOVWF  47
30A9:  CLRF   4A
30AA:  MOVLW  05
30AB:  MOVWF  49
30AC:  MOVLP  08
30AD:  MOVLB  00
30AE:  CALL   5CA
30AF:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
30B0:  MOVLW  02
30B1:  MOVWF  77
30B2:  DECFSZ 77,F
30B3:  GOTO   0B2
30B4:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
30B5:  MOVLB  11
30B6:  MOVF   45,W
30B7:  MOVLB  13
30B8:  MOVWF  49
30B9:  MOVLW  01
30BA:  MOVWF  4A
30BB:  MOVLW  01
30BC:  MOVWF  4C
30BD:  CLRF   4B
30BE:  MOVLP  08
30BF:  MOVLB  00
30C0:  CALL   021
30C1:  MOVLP  30
30C2:  MOVLB  11
30C3:  MOVF   45,W
30C4:  MOVLB  13
30C5:  MOVWF  49
30C6:  CLRF   4A
30C7:  CLRF   4C
30C8:  MOVLW  80
30C9:  MOVWF  4B
30CA:  MOVLP  08
30CB:  MOVLB  00
30CC:  CALL   021
30CD:  MOVLP  30
....................    }
30CE:  GOTO   1AA
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
30CF:  MOVLB  11
30D0:  DECFSZ 44,W
30D1:  GOTO   0D4
30D2:  GOTO   0D6
30D3:  MOVLB  00
30D4:  MOVLB  00
30D5:  GOTO   1AA
30D6:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
30D7:  MOVLW  06
30D8:  MOVLB  11
30D9:  MOVWF  52
30DA:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
30DB:  MOVLW  12
30DC:  MOVLB  11
30DD:  MOVWF  53
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
30DE:  MOVF   4A,W
30DF:  MOVWF  5D
30E0:  CLRF   5E
30E1:  CLRF   5F
30E2:  CLRF   60
30E3:  MOVF   5D,W
30E4:  MOVWF  77
30E5:  CLRF   78
30E6:  CLRF   79
30E7:  CLRF   7A
30E8:  MOVF   77,W
30E9:  MOVWF  54
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
30EA:  MOVF   49,W
30EB:  MOVWF  5D
30EC:  MOVF   4A,W
30ED:  MOVWF  5E
30EE:  CLRF   5F
30EF:  CLRF   60
30F0:  MOVF   5D,W
30F1:  MOVWF  77
30F2:  CLRF   78
30F3:  CLRF   79
30F4:  CLRF   7A
30F5:  MOVF   77,W
30F6:  MOVWF  55
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
30F7:  MOVF   48,W
30F8:  MOVWF  5D
30F9:  MOVF   49,W
30FA:  MOVWF  5E
30FB:  MOVF   4A,W
30FC:  MOVWF  5F
30FD:  CLRF   60
30FE:  MOVF   5D,W
30FF:  MOVWF  77
3100:  CLRF   78
3101:  CLRF   79
3102:  CLRF   7A
3103:  MOVF   77,W
3104:  MOVWF  56
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
3105:  MOVF   47,W
3106:  MOVWF  77
3107:  CLRF   78
3108:  CLRF   79
3109:  CLRF   7A
310A:  MOVF   77,W
310B:  MOVWF  57
....................       flash_cmd[5] = write_data;
310C:  MOVF   4B,W
310D:  MOVWF  58
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
310E:  MOVF   45,W
310F:  MOVLB  13
3110:  MOVWF  49
3111:  CLRF   4A
3112:  MOVLW  01
3113:  MOVWF  4C
3114:  CLRF   4B
3115:  MOVLP  08
3116:  MOVLB  00
3117:  CALL   021
3118:  MOVLP  30
3119:  MOVLB  11
311A:  MOVF   45,W
311B:  MOVLB  13
311C:  MOVWF  49
311D:  CLRF   4A
311E:  CLRF   4C
311F:  MOVLW  80
3120:  MOVWF  4B
3121:  MOVLP  08
3122:  MOVLB  00
3123:  CALL   021
3124:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
3125:  MOVLB  11
3126:  MOVF   46,W
3127:  MOVLB  13
3128:  MOVWF  46
3129:  MOVLB  11
312A:  MOVF   45,W
312B:  MOVLB  13
312C:  MOVWF  45
312D:  MOVLB  11
312E:  MOVF   44,W
312F:  MOVLB  13
3130:  MOVWF  44
3131:  MOVLB  11
3132:  MOVF   43,W
3133:  MOVLB  13
3134:  MOVWF  43
3135:  MOVLW  25
3136:  MOVWF  48
3137:  MOVLW  82
3138:  MOVWF  47
3139:  CLRF   4A
313A:  MOVLW  01
313B:  MOVWF  49
313C:  MOVLP  08
313D:  MOVLB  00
313E:  CALL   5CA
313F:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3140:  MOVLB  11
3141:  MOVF   45,W
3142:  MOVLB  13
3143:  MOVWF  49
3144:  MOVLW  01
3145:  MOVWF  4A
3146:  MOVLW  01
3147:  MOVWF  4C
3148:  CLRF   4B
3149:  MOVLP  08
314A:  MOVLB  00
314B:  CALL   021
314C:  MOVLP  30
314D:  MOVLB  11
314E:  MOVF   45,W
314F:  MOVLB  13
3150:  MOVWF  49
3151:  CLRF   4A
3152:  CLRF   4C
3153:  MOVLW  80
3154:  MOVWF  4B
3155:  MOVLP  08
3156:  MOVLB  00
3157:  CALL   021
3158:  MOVLP  30
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
3159:  MOVLB  11
315A:  MOVF   45,W
315B:  MOVLB  13
315C:  MOVWF  49
315D:  CLRF   4A
315E:  MOVLW  01
315F:  MOVWF  4C
3160:  CLRF   4B
3161:  MOVLP  08
3162:  MOVLB  00
3163:  CALL   021
3164:  MOVLP  30
3165:  MOVLB  11
3166:  MOVF   45,W
3167:  MOVLB  13
3168:  MOVWF  49
3169:  CLRF   4A
316A:  CLRF   4C
316B:  MOVLW  80
316C:  MOVWF  4B
316D:  MOVLP  08
316E:  MOVLB  00
316F:  CALL   021
3170:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
3171:  MOVLB  11
3172:  MOVF   46,W
3173:  MOVLB  13
3174:  MOVWF  46
3175:  MOVLB  11
3176:  MOVF   45,W
3177:  MOVLB  13
3178:  MOVWF  45
3179:  MOVLB  11
317A:  MOVF   44,W
317B:  MOVLB  13
317C:  MOVWF  44
317D:  MOVLB  11
317E:  MOVF   43,W
317F:  MOVLB  13
3180:  MOVWF  43
3181:  MOVLW  25
3182:  MOVWF  48
3183:  MOVLW  83
3184:  MOVWF  47
3185:  CLRF   4A
3186:  MOVLW  06
3187:  MOVWF  49
3188:  MOVLP  08
3189:  MOVLB  00
318A:  CALL   5CA
318B:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
318C:  MOVLW  02
318D:  MOVWF  77
318E:  DECFSZ 77,F
318F:  GOTO   18E
3190:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
3191:  MOVLB  11
3192:  MOVF   45,W
3193:  MOVLB  13
3194:  MOVWF  49
3195:  MOVLW  01
3196:  MOVWF  4A
3197:  MOVLW  01
3198:  MOVWF  4C
3199:  CLRF   4B
319A:  MOVLP  08
319B:  MOVLB  00
319C:  CALL   021
319D:  MOVLP  30
319E:  MOVLB  11
319F:  MOVF   45,W
31A0:  MOVLB  13
31A1:  MOVWF  49
31A2:  CLRF   4A
31A3:  CLRF   4C
31A4:  MOVLW  80
31A5:  MOVWF  4B
31A6:  MOVLP  08
31A7:  MOVLB  00
31A8:  CALL   021
31A9:  MOVLP  30
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
31AA:  MOVLB  11
31AB:  CLRF   59
31AC:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
31AD:  MOVLB  11
31AE:  MOVF   46,W
31AF:  MOVLB  13
31B0:  MOVWF  46
31B1:  MOVLB  11
31B2:  MOVF   45,W
31B3:  MOVLB  13
31B4:  MOVWF  45
31B5:  MOVLB  11
31B6:  MOVF   44,W
31B7:  MOVLB  13
31B8:  MOVWF  44
31B9:  MOVLB  11
31BA:  MOVF   43,W
31BB:  MOVLB  13
31BC:  MOVWF  43
31BD:  MOVLP  08
31BE:  MOVLB  00
31BF:  CALL   6F8
31C0:  MOVLP  30
31C1:  MOVF   78,W
31C2:  ANDLW  01
31C3:  SUBLW  01
31C4:  BTFSS  03.2
31C5:  GOTO   1EA
....................       if(timeout_counter > 10)
31C6:  MOVLB  11
31C7:  MOVF   59,W
31C8:  SUBLW  0A
31C9:  BTFSS  03.0
31CA:  GOTO   1CD
31CB:  MOVLB  00
31CC:  GOTO   1D6
31CD:  MOVLB  00
....................          delay_ms(200);
31CE:  MOVLW  C8
31CF:  MOVLB  13
31D0:  MOVWF  43
31D1:  MOVLP  08
31D2:  MOVLB  00
31D3:  CALL   73F
31D4:  MOVLP  30
31D5:  GOTO   1DD
....................       else
....................          delay_ms(10);   
31D6:  MOVLW  0A
31D7:  MOVLB  13
31D8:  MOVWF  43
31D9:  MOVLP  08
31DA:  MOVLB  00
31DB:  CALL   73F
31DC:  MOVLP  30
....................       
....................       if(timeout_counter > 100){
31DD:  MOVLB  11
31DE:  MOVF   59,W
31DF:  SUBLW  64
31E0:  BTFSS  03.0
31E1:  GOTO   1E4
31E2:  MOVLB  00
31E3:  GOTO   1E6
31E4:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
31E5:  GOTO   1EA
....................       }  
....................       timeout_counter++;
31E6:  MOVLB  11
31E7:  INCF   59,F
31E8:  MOVLB  00
31E9:  GOTO   1AD
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
31EA:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1000:  MOVLB  13
1001:  MOVF   2A,F
1002:  BTFSC  03.2
1003:  GOTO   006
1004:  MOVLB  00
1005:  GOTO   0BE
1006:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1007:  MOVLW  06
1008:  MOVLB  13
1009:  MOVWF  35
100A:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
100B:  MOVLW  02
100C:  MOVLB  13
100D:  MOVWF  36
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
100E:  MOVF   2F,W
100F:  MOVWF  44
1010:  MOVF   30,W
1011:  MOVWF  45
1012:  CLRF   46
1013:  CLRF   47
1014:  MOVF   44,W
1015:  MOVWF  77
1016:  CLRF   78
1017:  CLRF   79
1018:  CLRF   7A
1019:  MOVF   77,W
101A:  MOVWF  37
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
101B:  MOVF   2E,W
101C:  MOVWF  44
101D:  MOVF   2F,W
101E:  MOVWF  45
101F:  MOVF   30,W
1020:  MOVWF  46
1021:  CLRF   47
1022:  MOVF   44,W
1023:  MOVWF  77
1024:  CLRF   78
1025:  CLRF   79
1026:  CLRF   7A
1027:  MOVF   77,W
1028:  MOVWF  38
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
1029:  MOVF   2D,W
102A:  MOVWF  77
102B:  CLRF   78
102C:  CLRF   79
102D:  CLRF   7A
102E:  MOVF   77,W
102F:  MOVWF  39
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1030:  MOVF   2B,W
1031:  MOVWF  49
1032:  CLRF   4A
1033:  MOVLW  01
1034:  MOVWF  4C
1035:  CLRF   4B
1036:  MOVLP  08
1037:  MOVLB  00
1038:  CALL   021
1039:  MOVLP  10
103A:  MOVLB  13
103B:  MOVF   2B,W
103C:  MOVWF  49
103D:  CLRF   4A
103E:  CLRF   4C
103F:  MOVLW  80
1040:  MOVWF  4B
1041:  MOVLP  08
1042:  MOVLB  00
1043:  CALL   021
1044:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1045:  MOVLB  13
1046:  MOVF   2C,W
1047:  MOVWF  46
1048:  MOVF   2B,W
1049:  MOVWF  45
104A:  MOVF   2A,W
104B:  MOVWF  44
104C:  MOVF   29,W
104D:  MOVWF  43
104E:  MOVLW  26
104F:  MOVWF  48
1050:  MOVLW  05
1051:  MOVWF  47
1052:  CLRF   4A
1053:  MOVLW  01
1054:  MOVWF  49
1055:  MOVLP  08
1056:  MOVLB  00
1057:  CALL   5CA
1058:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1059:  MOVLB  13
105A:  MOVF   2B,W
105B:  MOVWF  49
105C:  MOVLW  01
105D:  MOVWF  4A
105E:  MOVLW  01
105F:  MOVWF  4C
1060:  CLRF   4B
1061:  MOVLP  08
1062:  MOVLB  00
1063:  CALL   021
1064:  MOVLP  10
1065:  MOVLB  13
1066:  MOVF   2B,W
1067:  MOVWF  49
1068:  CLRF   4A
1069:  CLRF   4C
106A:  MOVLW  80
106B:  MOVWF  4B
106C:  MOVLP  08
106D:  MOVLB  00
106E:  CALL   021
106F:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1070:  MOVLB  13
1071:  MOVF   2B,W
1072:  MOVWF  49
1073:  CLRF   4A
1074:  MOVLW  01
1075:  MOVWF  4C
1076:  CLRF   4B
1077:  MOVLP  08
1078:  MOVLB  00
1079:  CALL   021
107A:  MOVLP  10
107B:  MOVLB  13
107C:  MOVF   2B,W
107D:  MOVWF  49
107E:  CLRF   4A
107F:  CLRF   4C
1080:  MOVLW  80
1081:  MOVWF  4B
1082:  MOVLP  08
1083:  MOVLB  00
1084:  CALL   021
1085:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
1086:  MOVLB  13
1087:  MOVF   2C,W
1088:  MOVWF  46
1089:  MOVF   2B,W
108A:  MOVWF  45
108B:  MOVF   2A,W
108C:  MOVWF  44
108D:  MOVF   29,W
108E:  MOVWF  43
108F:  MOVLW  26
1090:  MOVWF  48
1091:  MOVLW  06
1092:  MOVWF  47
1093:  MOVLW  04
1094:  MOVWF  49
1095:  MOVF   32,W
1096:  MOVWF  4B
1097:  MOVF   31,W
1098:  MOVWF  4A
1099:  MOVF   34,W
109A:  MOVWF  4D
109B:  MOVF   33,W
109C:  MOVWF  4C
109D:  MOVLP  08
109E:  MOVLB  00
109F:  CALL   63C
10A0:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
10A1:  MOVLW  02
10A2:  MOVWF  77
10A3:  DECFSZ 77,F
10A4:  GOTO   0A3
10A5:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
10A6:  MOVLB  13
10A7:  MOVF   2B,W
10A8:  MOVWF  49
10A9:  MOVLW  01
10AA:  MOVWF  4A
10AB:  MOVLW  01
10AC:  MOVWF  4C
10AD:  CLRF   4B
10AE:  MOVLP  08
10AF:  MOVLB  00
10B0:  CALL   021
10B1:  MOVLP  10
10B2:  MOVLB  13
10B3:  MOVF   2B,W
10B4:  MOVWF  49
10B5:  CLRF   4A
10B6:  CLRF   4C
10B7:  MOVLW  80
10B8:  MOVWF  4B
10B9:  MOVLP  08
10BA:  MOVLB  00
10BB:  CALL   021
10BC:  MOVLP  10
....................    }
10BD:  GOTO   188
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
10BE:  MOVLB  13
10BF:  DECFSZ 2A,W
10C0:  GOTO   0C3
10C1:  GOTO   0C5
10C2:  MOVLB  00
10C3:  MOVLB  00
10C4:  GOTO   188
10C5:  MOVLB  00
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10C6:  MOVLW  06
10C7:  MOVLB  13
10C8:  MOVWF  3A
10C9:  MOVLB  00
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
10CA:  MOVLW  12
10CB:  MOVLB  13
10CC:  MOVWF  3B
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
10CD:  MOVF   30,W
10CE:  MOVWF  44
10CF:  CLRF   45
10D0:  CLRF   46
10D1:  CLRF   47
10D2:  MOVF   44,W
10D3:  MOVWF  77
10D4:  CLRF   78
10D5:  CLRF   79
10D6:  CLRF   7A
10D7:  MOVF   77,W
10D8:  MOVWF  3C
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10D9:  MOVF   2F,W
10DA:  MOVWF  44
10DB:  MOVF   30,W
10DC:  MOVWF  45
10DD:  CLRF   46
10DE:  CLRF   47
10DF:  MOVF   44,W
10E0:  MOVWF  77
10E1:  CLRF   78
10E2:  CLRF   79
10E3:  CLRF   7A
10E4:  MOVF   77,W
10E5:  MOVWF  3D
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10E6:  MOVF   2E,W
10E7:  MOVWF  44
10E8:  MOVF   2F,W
10E9:  MOVWF  45
10EA:  MOVF   30,W
10EB:  MOVWF  46
10EC:  CLRF   47
10ED:  MOVF   44,W
10EE:  MOVWF  77
10EF:  CLRF   78
10F0:  CLRF   79
10F1:  CLRF   7A
10F2:  MOVF   77,W
10F3:  MOVWF  3E
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
10F4:  MOVF   2D,W
10F5:  MOVWF  77
10F6:  CLRF   78
10F7:  CLRF   79
10F8:  CLRF   7A
10F9:  MOVF   77,W
10FA:  MOVWF  3F
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10FB:  MOVF   2B,W
10FC:  MOVWF  49
10FD:  CLRF   4A
10FE:  MOVLW  01
10FF:  MOVWF  4C
1100:  CLRF   4B
1101:  MOVLP  08
1102:  MOVLB  00
1103:  CALL   021
1104:  MOVLP  10
1105:  MOVLB  13
1106:  MOVF   2B,W
1107:  MOVWF  49
1108:  CLRF   4A
1109:  CLRF   4C
110A:  MOVLW  80
110B:  MOVWF  4B
110C:  MOVLP  08
110D:  MOVLB  00
110E:  CALL   021
110F:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1110:  MOVLB  13
1111:  MOVF   2C,W
1112:  MOVWF  46
1113:  MOVF   2B,W
1114:  MOVWF  45
1115:  MOVF   2A,W
1116:  MOVWF  44
1117:  MOVF   29,W
1118:  MOVWF  43
1119:  MOVLW  26
111A:  MOVWF  48
111B:  MOVLW  0A
111C:  MOVWF  47
111D:  CLRF   4A
111E:  MOVLW  01
111F:  MOVWF  49
1120:  MOVLP  08
1121:  MOVLB  00
1122:  CALL   5CA
1123:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1124:  MOVLB  13
1125:  MOVF   2B,W
1126:  MOVWF  49
1127:  MOVLW  01
1128:  MOVWF  4A
1129:  MOVLW  01
112A:  MOVWF  4C
112B:  CLRF   4B
112C:  MOVLP  08
112D:  MOVLB  00
112E:  CALL   021
112F:  MOVLP  10
1130:  MOVLB  13
1131:  MOVF   2B,W
1132:  MOVWF  49
1133:  CLRF   4A
1134:  CLRF   4C
1135:  MOVLW  80
1136:  MOVWF  4B
1137:  MOVLP  08
1138:  MOVLB  00
1139:  CALL   021
113A:  MOVLP  10
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
113B:  MOVLB  13
113C:  MOVF   2B,W
113D:  MOVWF  49
113E:  CLRF   4A
113F:  MOVLW  01
1140:  MOVWF  4C
1141:  CLRF   4B
1142:  MOVLP  08
1143:  MOVLB  00
1144:  CALL   021
1145:  MOVLP  10
1146:  MOVLB  13
1147:  MOVF   2B,W
1148:  MOVWF  49
1149:  CLRF   4A
114A:  CLRF   4C
114B:  MOVLW  80
114C:  MOVWF  4B
114D:  MOVLP  08
114E:  MOVLB  00
114F:  CALL   021
1150:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
1151:  MOVLB  13
1152:  MOVF   2C,W
1153:  MOVWF  46
1154:  MOVF   2B,W
1155:  MOVWF  45
1156:  MOVF   2A,W
1157:  MOVWF  44
1158:  MOVF   29,W
1159:  MOVWF  43
115A:  MOVLW  26
115B:  MOVWF  48
115C:  MOVLW  0B
115D:  MOVWF  47
115E:  MOVLW  05
115F:  MOVWF  49
1160:  MOVF   32,W
1161:  MOVWF  4B
1162:  MOVF   31,W
1163:  MOVWF  4A
1164:  MOVF   34,W
1165:  MOVWF  4D
1166:  MOVF   33,W
1167:  MOVWF  4C
1168:  MOVLP  08
1169:  MOVLB  00
116A:  CALL   63C
116B:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
116C:  MOVLW  02
116D:  MOVWF  77
116E:  DECFSZ 77,F
116F:  GOTO   16E
1170:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1171:  MOVLB  13
1172:  MOVF   2B,W
1173:  MOVWF  49
1174:  MOVLW  01
1175:  MOVWF  4A
1176:  MOVLW  01
1177:  MOVWF  4C
1178:  CLRF   4B
1179:  MOVLP  08
117A:  MOVLB  00
117B:  CALL   021
117C:  MOVLP  10
117D:  MOVLB  13
117E:  MOVF   2B,W
117F:  MOVWF  49
1180:  CLRF   4A
1181:  CLRF   4C
1182:  MOVLW  80
1183:  MOVWF  4B
1184:  MOVLP  08
1185:  MOVLB  00
1186:  CALL   021
1187:  MOVLP  10
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1188:  MOVLB  13
1189:  CLRF   40
118A:  MOVLB  00
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
118B:  MOVLB  13
118C:  MOVF   2C,W
118D:  MOVWF  46
118E:  MOVF   2B,W
118F:  MOVWF  45
1190:  MOVF   2A,W
1191:  MOVWF  44
1192:  MOVF   29,W
1193:  MOVWF  43
1194:  MOVLP  08
1195:  MOVLB  00
1196:  CALL   6F8
1197:  MOVLP  10
1198:  MOVF   78,W
1199:  ANDLW  01
119A:  SUBLW  01
119B:  BTFSS  03.2
119C:  GOTO   1C1
....................       if(timeout_counter > 10)
119D:  MOVLB  13
119E:  MOVF   40,W
119F:  SUBLW  0A
11A0:  BTFSS  03.0
11A1:  GOTO   1A4
11A2:  MOVLB  00
11A3:  GOTO   1AD
11A4:  MOVLB  00
....................          delay_ms(200);
11A5:  MOVLW  C8
11A6:  MOVLB  13
11A7:  MOVWF  43
11A8:  MOVLP  08
11A9:  MOVLB  00
11AA:  CALL   73F
11AB:  MOVLP  10
11AC:  GOTO   1B4
....................       else
....................          delay_ms(10);   
11AD:  MOVLW  0A
11AE:  MOVLB  13
11AF:  MOVWF  43
11B0:  MOVLP  08
11B1:  MOVLB  00
11B2:  CALL   73F
11B3:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
11B4:  MOVLB  13
11B5:  MOVF   40,W
11B6:  SUBLW  64
11B7:  BTFSS  03.0
11B8:  GOTO   1BB
11B9:  MOVLB  00
11BA:  GOTO   1BD
11BB:  MOVLB  00
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
11BC:  GOTO   1C1
....................       }  
....................       timeout_counter++;
11BD:  MOVLB  13
11BE:  INCF   40,F
11BF:  MOVLB  00
11C0:  GOTO   18B
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
11C1:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0977:  MOVLW  9F
0978:  MOVLB  10
0979:  MOVWF  6F
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
097A:  MOVF   6D,W
097B:  MOVLB  13
097C:  MOVWF  49
097D:  CLRF   4A
097E:  MOVLW  01
097F:  MOVWF  4C
0980:  CLRF   4B
0981:  MOVLB  00
0982:  CALL   021
0983:  MOVLB  10
0984:  MOVF   6D,W
0985:  MOVLB  13
0986:  MOVWF  49
0987:  CLRF   4A
0988:  CLRF   4C
0989:  MOVLW  80
098A:  MOVWF  4B
098B:  MOVLB  00
098C:  CALL   021
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
098D:  MOVLB  10
098E:  MOVF   6E,W
098F:  MOVLB  13
0990:  MOVWF  4C
0991:  MOVLB  10
0992:  MOVF   6D,W
0993:  MOVLB  13
0994:  MOVWF  4B
0995:  MOVLB  10
0996:  MOVF   6C,W
0997:  MOVLB  13
0998:  MOVWF  4A
0999:  MOVLB  10
099A:  MOVF   6B,W
099B:  MOVLB  13
099C:  MOVWF  49
099D:  MOVLW  25
099E:  MOVWF  4E
099F:  MOVLW  4F
09A0:  MOVWF  4D
09A1:  CLRF   50
09A2:  MOVLW  01
09A3:  MOVWF  4F
09A4:  MOVLW  25
09A5:  MOVWF  52
09A6:  MOVLW  50
09A7:  MOVWF  51
09A8:  CLRF   56
09A9:  CLRF   55
09AA:  CLRF   54
09AB:  MOVLW  04
09AC:  MOVWF  53
09AD:  MOVLB  00
09AE:  CALL   069
....................    output_high(flash_stream.cs_pin);
09AF:  MOVLB  10
09B0:  MOVF   6D,W
09B1:  MOVLB  13
09B2:  MOVWF  49
09B3:  MOVLW  01
09B4:  MOVWF  4A
09B5:  MOVLW  01
09B6:  MOVWF  4C
09B7:  CLRF   4B
09B8:  MOVLB  00
09B9:  CALL   021
09BA:  MOVLB  10
09BB:  MOVF   6D,W
09BC:  MOVLB  13
09BD:  MOVWF  49
09BE:  CLRF   4A
09BF:  CLRF   4C
09C0:  MOVLW  80
09C1:  MOVWF  4B
09C2:  MOVLB  00
09C3:  CALL   021
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
09C4:  MOVLB  11
09C5:  MOVF   20,W
09C6:  SUBLW  20
09C7:  BTFSC  03.2
09C8:  GOTO   1CB
09C9:  MOVLB  00
09CA:  GOTO   1D0
09CB:  MOVLB  00
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
09CC:  MOVLW  01
09CD:  MOVWF  78
09CE:  GOTO   1D3
....................    }
09CF:  GOTO   1D3
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
09D0:  MOVLW  00
09D1:  MOVWF  78
09D2:  GOTO   1D3
....................    }
09D3:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0C88:  MOVLW  93
0C89:  MOVLB  03
0C8A:  MOVWF  11
0C8B:  MOVLW  00
0C8C:  MOVWF  12
0C8D:  MOVLP  00
0C8E:  MOVLB  00
0C8F:  CALL   749
0C90:  MOVLP  08
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0C91:  MOVLB  01
0C92:  BCF    0F.1
0C93:  MOVLB  02
0C94:  BSF    0F.1
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0C95:  MOVLB  01
0C96:  BCF    0F.2
0C97:  MOVLB  02
0C98:  BSF    0F.2
....................     FLASH_DATA_HEADER flash_data_header;
.................... 
....................     if (!is_connect(mis_fm)) {
0C99:  MOVLB  0D
0C9A:  MOVF   45,W
0C9B:  MOVLB  10
0C9C:  MOVWF  6E
0C9D:  MOVLB  0D
0C9E:  MOVF   44,W
0C9F:  MOVLB  10
0CA0:  MOVWF  6D
0CA1:  MOVLB  0D
0CA2:  MOVF   43,W
0CA3:  MOVLB  10
0CA4:  MOVWF  6C
0CA5:  MOVLB  0D
0CA6:  MOVF   42,W
0CA7:  MOVLB  10
0CA8:  MOVWF  6B
0CA9:  MOVLB  00
0CAA:  CALL   177
0CAB:  MOVF   78,F
0CAC:  BTFSS  03.2
0CAD:  GOTO   4B9
....................         fprintf(PC, "\tFlash is not connected\r\n");
0CAE:  MOVLW  A1
0CAF:  MOVLB  03
0CB0:  MOVWF  11
0CB1:  MOVLW  00
0CB2:  MOVWF  12
0CB3:  MOVLP  00
0CB4:  MOVLB  00
0CB5:  CALL   749
0CB6:  MOVLP  08
....................         return;
0CB7:  GOTO   587
....................     }else {
0CB8:  GOTO   4C2
....................         fprintf(PC, "\tFlash is connected\r\n");
0CB9:  MOVLW  AE
0CBA:  MOVLB  03
0CBB:  MOVWF  11
0CBC:  MOVLW  00
0CBD:  MOVWF  12
0CBE:  MOVLP  00
0CBF:  MOVLB  00
0CC0:  CALL   749
0CC1:  MOVLP  08
....................     }
....................     
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, flash_data_header.bytes, PACKET_SIZE); // Read the PICLOG data header
0CC2:  MOVLB  0D
0CC3:  MOVF   45,W
0CC4:  MOVLB  13
0CC5:  MOVWF  2C
0CC6:  MOVLB  0D
0CC7:  MOVF   44,W
0CC8:  MOVLB  13
0CC9:  MOVWF  2B
0CCA:  MOVLB  0D
0CCB:  MOVF   43,W
0CCC:  MOVLB  13
0CCD:  MOVWF  2A
0CCE:  MOVLB  0D
0CCF:  MOVF   42,W
0CD0:  MOVLB  13
0CD1:  MOVWF  29
0CD2:  CLRF   30
0CD3:  CLRF   2F
0CD4:  CLRF   2E
0CD5:  CLRF   2D
0CD6:  MOVLW  24
0CD7:  MOVWF  32
0CD8:  MOVLW  E4
0CD9:  MOVWF  31
0CDA:  CLRF   36
0CDB:  CLRF   35
0CDC:  CLRF   34
0CDD:  MOVLW  40
0CDE:  MOVWF  33
0CDF:  MOVLB  00
0CE0:  CALL   1D4
....................     fprintf(PC, "\tmisf_piclog_use_counter         : %lu\r\n", flash_data_header.fields.misf_piclog_use_counter);
0CE1:  MOVLW  B9
0CE2:  MOVLB  03
0CE3:  MOVWF  11
0CE4:  MOVLW  00
0CE5:  MOVWF  12
0CE6:  BCF    03.0
0CE7:  MOVLW  23
0CE8:  MOVLB  11
0CE9:  MOVWF  51
0CEA:  MOVLB  00
0CEB:  CALL   2C9
0CEC:  MOVLW  41
0CED:  MOVWF  04
0CEE:  MOVLB  0F
0CEF:  MOVF   61,W
0CF0:  MOVLB  11
0CF1:  MOVWF  54
0CF2:  MOVLB  0F
0CF3:  MOVF   60,W
0CF4:  MOVLB  11
0CF5:  MOVWF  53
0CF6:  MOVLB  0F
0CF7:  MOVF   5F,W
0CF8:  MOVLB  11
0CF9:  MOVWF  52
0CFA:  MOVLB  0F
0CFB:  MOVF   5E,W
0CFC:  MOVLB  11
0CFD:  MOVWF  51
0CFE:  MOVLB  00
0CFF:  CALL   395
0D00:  MOVLW  0D
0D01:  MOVLB  13
0D02:  MOVWF  2E
0D03:  MOVLP  00
0D04:  MOVLB  00
0D05:  CALL   721
0D06:  MOVLP  08
0D07:  MOVLW  0A
0D08:  MOVLB  13
0D09:  MOVWF  2E
0D0A:  MOVLP  00
0D0B:  MOVLB  00
0D0C:  CALL   721
0D0D:  MOVLP  08
....................     fprintf(PC, "\tmisf_piclog_uncopyed_counter    : %lu\r\n", flash_data_header.fields.misf_piclog_uncopyed_counter);
0D0E:  MOVLW  CE
0D0F:  MOVLB  03
0D10:  MOVWF  11
0D11:  MOVLW  00
0D12:  MOVWF  12
0D13:  BCF    03.0
0D14:  MOVLW  23
0D15:  MOVLB  11
0D16:  MOVWF  51
0D17:  MOVLB  00
0D18:  CALL   2C9
0D19:  MOVLW  41
0D1A:  MOVWF  04
0D1B:  MOVLB  0F
0D1C:  MOVF   66,W
0D1D:  MOVLB  11
0D1E:  MOVWF  54
0D1F:  MOVLB  0F
0D20:  MOVF   65,W
0D21:  MOVLB  11
0D22:  MOVWF  53
0D23:  MOVLB  0F
0D24:  MOVF   64,W
0D25:  MOVLB  11
0D26:  MOVWF  52
0D27:  MOVLB  0F
0D28:  MOVF   63,W
0D29:  MOVLB  11
0D2A:  MOVWF  51
0D2B:  MOVLB  00
0D2C:  CALL   395
0D2D:  MOVLW  0D
0D2E:  MOVLB  13
0D2F:  MOVWF  2E
0D30:  MOVLP  00
0D31:  MOVLB  00
0D32:  CALL   721
0D33:  MOVLP  08
0D34:  MOVLW  0A
0D35:  MOVLB  13
0D36:  MOVWF  2E
0D37:  MOVLP  00
0D38:  MOVLB  00
0D39:  CALL   721
0D3A:  MOVLP  08
....................     fprintf(PC, "\tmisf_piclog_loop_counter        : %u\r\n", flash_data_header.fields.misf_piclog_loop_counter);   
0D3B:  MOVLW  E3
0D3C:  MOVLB  03
0D3D:  MOVWF  11
0D3E:  MOVLW  00
0D3F:  MOVWF  12
0D40:  BCF    03.0
0D41:  MOVLW  23
0D42:  MOVLB  11
0D43:  MOVWF  51
0D44:  MOVLB  00
0D45:  CALL   2C9
0D46:  MOVLB  0F
0D47:  MOVF   62,W
0D48:  MOVLB  11
0D49:  MOVWF  3A
0D4A:  MOVLW  1B
0D4B:  MOVWF  3B
0D4C:  MOVLB  00
0D4D:  CALL   430
0D4E:  MOVLW  0D
0D4F:  MOVLB  13
0D50:  MOVWF  2E
0D51:  MOVLP  00
0D52:  MOVLB  00
0D53:  CALL   721
0D54:  MOVLP  08
0D55:  MOVLW  0A
0D56:  MOVLB  13
0D57:  MOVWF  2E
0D58:  MOVLP  00
0D59:  MOVLB  00
0D5A:  CALL   721
0D5B:  MOVLP  08
.................... 
....................     misf_piclog_use_counter = flash_data_header.fields.misf_meas_use_counter;
0D5C:  MOVLB  0F
0D5D:  MOVF   6B,W
0D5E:  MOVLB  0D
0D5F:  MOVWF  35
0D60:  MOVLB  0F
0D61:  MOVF   6A,W
0D62:  MOVLB  0D
0D63:  MOVWF  34
0D64:  MOVLB  0F
0D65:  MOVF   69,W
0D66:  MOVLB  0D
0D67:  MOVWF  33
0D68:  MOVLB  0F
0D69:  MOVF   68,W
0D6A:  MOVLB  0D
0D6B:  MOVWF  32
....................     misf_piclog_loop_counter = flash_data_header.fields.misf_piclog_loop_counter;
0D6C:  MOVLB  0F
0D6D:  MOVF   62,W
0D6E:  MOVWF  73
....................     misf_piclog_uncopyed_counter = flash_data_header.fields.misf_piclog_uncopyed_counter;
0D6F:  MOVF   66,W
0D70:  MOVLB  0D
0D71:  MOVWF  39
0D72:  MOVLB  0F
0D73:  MOVF   65,W
0D74:  MOVLB  0D
0D75:  MOVWF  38
0D76:  MOVLB  0F
0D77:  MOVF   64,W
0D78:  MOVLB  0D
0D79:  MOVWF  37
0D7A:  MOVLB  0F
0D7B:  MOVF   63,W
0D7C:  MOVLB  0D
0D7D:  MOVWF  36
....................     
....................     fprintf(PC, "\tComplete\r\n");
0D7E:  MOVLW  F7
0D7F:  MOVLB  03
0D80:  MOVWF  11
0D81:  MOVLW  00
0D82:  MOVWF  12
0D83:  MOVLP  00
0D84:  MOVLB  00
0D85:  CALL   749
0D86:  MOVLP  08
0D87:  MOVLP  38
0D88:  GOTO   524 (RETURN)
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void update_misf_address_area()
.................... {
....................     FLASH_DATA_HEADER flash_data_header;
....................     flash_data_header.fields.misf_piclog_use_counter = misf_piclog_use_counter;
....................     flash_data_header.fields.misf_piclog_loop_counter = misf_piclog_loop_counter;
....................     flash_data_header.fields.misf_piclog_uncopyed_counter = misf_piclog_uncopyed_counter;
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, *flash_data_header.bytes, PACKET_SIZE);
....................     fprintf(PC, "Update MISSION FLASH Address Area\r\n");
.................... 
.................... 
.................... 
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
11C2:  MOVLP  08
11C3:  CALL   589
11C4:  MOVLP  10
11C5:  MOVF   7A,W
11C6:  MOVLB  10
11C7:  MOVWF  65
11C8:  MOVF   79,W
11C9:  MOVWF  64
11CA:  MOVF   78,W
11CB:  MOVWF  63
11CC:  MOVF   77,W
11CD:  MOVWF  62
.................... {
....................     int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
11CE:  MOVF   65,W
11CF:  MOVWF  6C
11D0:  CLRF   6D
11D1:  CLRF   6E
11D2:  CLRF   6F
11D3:  MOVF   6C,W
11D4:  MOVWF  5C
....................     piclog[1] = (time >> 16) & 0xFF;
11D5:  MOVF   64,W
11D6:  MOVWF  6C
11D7:  MOVF   65,W
11D8:  MOVWF  6D
11D9:  CLRF   6E
11DA:  CLRF   6F
11DB:  MOVF   6C,W
11DC:  MOVWF  5D
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
11DD:  MOVF   63,W
11DE:  MOVWF  6C
11DF:  MOVF   64,W
11E0:  MOVWF  6D
11E1:  MOVF   65,W
11E2:  MOVWF  6E
11E3:  CLRF   6F
11E4:  MOVF   6C,W
11E5:  MOVWF  5E
....................     piclog[3] = time & 0xFF;         // Time low byte
11E6:  MOVF   62,W
11E7:  MOVWF  5F
....................     piclog[4] = function;            // Function code
11E8:  MOVF   5A,W
11E9:  MOVWF  60
....................     piclog[5] = parameter;           // Parameter code
11EA:  MOVF   5B,W
11EB:  MOVWF  61
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
11EC:  MOVLW  0F
11ED:  MOVLB  03
11EE:  MOVWF  11
11EF:  MOVLW  01
11F0:  MOVWF  12
11F1:  MOVLP  00
11F2:  MOVLB  00
11F3:  CALL   749
11F4:  MOVLP  10
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
11F5:  MOVLB  10
11F6:  CLRF   66
11F7:  MOVLB  00
11F8:  MOVLB  10
11F9:  MOVF   66,W
11FA:  SUBLW  05
11FB:  BTFSC  03.0
11FC:  GOTO   1FF
11FD:  MOVLB  00
11FE:  GOTO   21E
11FF:  MOVLB  00
....................             fprintf(PC, "%02X ", piclog[i]);
1200:  MOVLW  3C
1201:  MOVLB  10
1202:  ADDWF  66,W
1203:  MOVWF  04
1204:  MOVLW  25
1205:  MOVWF  05
1206:  BTFSC  03.0
1207:  INCF   05,F
1208:  MOVF   00,W
1209:  MOVWF  6B
120A:  MOVF   6B,W
120B:  MOVLB  11
120C:  MOVWF  51
120D:  MOVLW  37
120E:  MOVWF  52
120F:  MOVLP  08
1210:  MOVLB  00
1211:  CALL   592
1212:  MOVLP  10
1213:  MOVLW  20
1214:  MOVLB  13
1215:  MOVWF  2E
1216:  MOVLP  00
1217:  MOVLB  00
1218:  CALL   721
1219:  MOVLP  10
121A:  MOVLB  10
121B:  INCF   66,F
121C:  MOVLB  00
121D:  GOTO   1F8
....................         }
....................         fprintf(PC, "\r\n");
121E:  MOVLW  0D
121F:  MOVLB  13
1220:  MOVWF  2E
1221:  MOVLP  00
1222:  MOVLB  00
1223:  CALL   721
1224:  MOVLP  10
1225:  MOVLW  0A
1226:  MOVLB  13
1227:  MOVWF  2E
1228:  MOVLP  00
1229:  MOVLB  00
122A:  CALL   721
122B:  MOVLP  10
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
122C:  MOVLB  0D
122D:  MOVF   32,W
122E:  MOVLB  10
122F:  MOVWF  67
1230:  MOVLW  02
1231:  MOVLB  0D
1232:  ADDWF  33,W
1233:  MOVLB  10
1234:  MOVWF  68
1235:  MOVLW  00
1236:  MOVLB  0D
1237:  ADDWFC 34,W
1238:  MOVLB  10
1239:  MOVWF  69
123A:  MOVLW  00
123B:  MOVLB  0D
123C:  ADDWFC 35,W
123D:  MOVLB  10
123E:  MOVWF  6A
....................     if(is_connect(mis_fm) == FALSE) {
123F:  MOVLB  0D
1240:  MOVF   45,W
1241:  MOVLB  10
1242:  MOVWF  6E
1243:  MOVLB  0D
1244:  MOVF   44,W
1245:  MOVLB  10
1246:  MOVWF  6D
1247:  MOVLB  0D
1248:  MOVF   43,W
1249:  MOVLB  10
124A:  MOVWF  6C
124B:  MOVLB  0D
124C:  MOVF   42,W
124D:  MOVLB  10
124E:  MOVWF  6B
124F:  MOVLP  08
1250:  MOVLB  00
1251:  CALL   177
1252:  MOVLP  10
1253:  MOVF   78,F
1254:  BTFSS  03.2
1255:  GOTO   260
....................         fprintf(PC, "Mission Flash is not connected\r\n");
1256:  MOVLW  15
1257:  MOVLB  03
1258:  MOVWF  11
1259:  MOVLW  01
125A:  MOVWF  12
125B:  MOVLP  00
125C:  MOVLB  00
125D:  CALL   749
125E:  MOVLP  10
....................         return;
125F:  GOTO   2F9
....................     }
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
1260:  MOVLB  0D
1261:  MOVF   45,W
1262:  MOVLB  13
1263:  MOVWF  2C
1264:  MOVLB  0D
1265:  MOVF   44,W
1266:  MOVLB  13
1267:  MOVWF  2B
1268:  MOVLB  0D
1269:  MOVF   43,W
126A:  MOVLB  13
126B:  MOVWF  2A
126C:  MOVLB  0D
126D:  MOVF   42,W
126E:  MOVLB  13
126F:  MOVWF  29
1270:  MOVLB  10
1271:  MOVF   6A,W
1272:  MOVLB  13
1273:  MOVWF  30
1274:  MOVLB  10
1275:  MOVF   69,W
1276:  MOVLB  13
1277:  MOVWF  2F
1278:  MOVLB  10
1279:  MOVF   68,W
127A:  MOVLB  13
127B:  MOVWF  2E
127C:  MOVLB  10
127D:  MOVF   67,W
127E:  MOVLB  13
127F:  MOVWF  2D
1280:  MOVLW  25
1281:  MOVWF  32
1282:  MOVLW  3C
1283:  MOVWF  31
1284:  CLRF   34
1285:  MOVLW  06
1286:  MOVWF  33
1287:  MOVLB  00
1288:  CALL   000
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
1289:  MOVLW  06
128A:  MOVLB  0D
128B:  ADDWF  32,F
128C:  MOVLW  00
128D:  ADDWFC 33,F
128E:  MOVLW  00
128F:  ADDWFC 34,F
1290:  MOVLW  00
1291:  ADDWFC 35,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_use_counter + PICLOG_PACKET_SIZE >= MISF_PICLOG_MAX_COUNT) {
1292:  MOVLW  06
1293:  ADDWF  32,W
1294:  MOVLB  10
1295:  MOVWF  6B
1296:  MOVLW  00
1297:  MOVLB  0D
1298:  ADDWFC 33,W
1299:  MOVLB  10
129A:  MOVWF  6C
129B:  MOVLW  00
129C:  MOVLB  0D
129D:  ADDWFC 34,W
129E:  MOVLB  10
129F:  MOVWF  6D
12A0:  MOVLW  00
12A1:  MOVLB  0D
12A2:  ADDWFC 35,W
12A3:  MOVLB  10
12A4:  MOVWF  6E
12A5:  MOVF   6E,F
12A6:  BTFSC  03.2
12A7:  GOTO   2AA
12A8:  MOVLB  00
12A9:  GOTO   2C1
12AA:  MOVLB  00
12AB:  MOVLB  10
12AC:  MOVF   6D,F
12AD:  BTFSC  03.2
12AE:  GOTO   2B1
12AF:  MOVLB  00
12B0:  GOTO   2C1
12B1:  MOVLB  00
12B2:  MOVLB  10
12B3:  MOVF   6C,F
12B4:  BTFSC  03.2
12B5:  GOTO   2B8
12B6:  MOVLB  00
12B7:  GOTO   2C1
12B8:  MOVLB  00
12B9:  MOVLB  10
12BA:  MOVF   6B,W
12BB:  SUBLW  3B
12BC:  BTFSS  03.0
12BD:  GOTO   2C0
12BE:  MOVLB  00
12BF:  GOTO   2F9
12C0:  MOVLB  00
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
12C1:  MOVLW  24
12C2:  MOVWF  7A
12C3:  MOVLW  16
12C4:  MOVWF  04
12C5:  MOVF   7A,W
12C6:  MOVWF  05
12C7:  MOVF   00,W
12C8:  MOVLB  10
12C9:  MOVWF  6B
12CA:  MOVLB  0D
12CB:  MOVF   45,W
12CC:  MOVLB  13
12CD:  MOVWF  2C
12CE:  MOVLB  0D
12CF:  MOVF   44,W
12D0:  MOVLB  13
12D1:  MOVWF  2B
12D2:  MOVLB  0D
12D3:  MOVF   43,W
12D4:  MOVLB  13
12D5:  MOVWF  2A
12D6:  MOVLB  0D
12D7:  MOVF   42,W
12D8:  MOVLB  13
12D9:  MOVWF  29
12DA:  MOVLB  10
12DB:  MOVF   6A,W
12DC:  MOVLB  13
12DD:  MOVWF  30
12DE:  MOVLB  10
12DF:  MOVF   69,W
12E0:  MOVLB  13
12E1:  MOVWF  2F
12E2:  MOVLB  10
12E3:  MOVF   68,W
12E4:  MOVLB  13
12E5:  MOVWF  2E
12E6:  MOVLB  10
12E7:  MOVF   67,W
12E8:  MOVLB  13
12E9:  MOVWF  2D
12EA:  CLRF   32
12EB:  MOVLB  10
12EC:  MOVF   6B,W
12ED:  MOVLB  13
12EE:  MOVWF  31
12EF:  CLRF   34
12F0:  MOVLW  06
12F1:  MOVWF  33
12F2:  MOVLB  00
12F3:  CALL   000
....................         misf_piclog_use_counter = 0; // Reset if max count reached
12F4:  MOVLB  0D
12F5:  CLRF   35
12F6:  CLRF   34
12F7:  CLRF   33
12F8:  CLRF   32
12F9:  MOVLB  00
....................     }
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
12FA:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0799:  MOVLW  26
079A:  MOVLB  03
079B:  MOVWF  11
079C:  MOVLW  01
079D:  MOVWF  12
079E:  MOVLB  00
079F:  CALL   749
....................     output_low(CONNECT_CIGS);
07A0:  MOVLB  01
07A1:  BCF    0E.0
07A2:  MOVLB  02
07A3:  BCF    0E.0
....................     output_low(EN_NPWR);
07A4:  MOVLB  01
07A5:  BCF    0E.3
07A6:  MOVLB  02
07A7:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
07A8:  MOVLW  2E
07A9:  MOVLB  03
07AA:  MOVWF  11
07AB:  MOVLW  01
07AC:  MOVWF  12
07AD:  MOVLB  00
07AE:  CALL   749
07AF:  MOVLP  38
07B0:  GOTO   515 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
07B1:  MOVLW  34
07B2:  MOVLB  03
07B3:  MOVWF  11
07B4:  MOVLW  01
07B5:  MOVWF  12
07B6:  MOVLB  00
07B7:  CALL   749
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
07B8:  MOVLW  78
07B9:  MOVLB  01
07BA:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
07BB:  BCF    1E.0
07BC:  BCF    1E.1
07BD:  BCF    1E.2
07BE:  MOVLW  00
07BF:  MOVLB  03
07C0:  MOVWF  0C
07C1:  MOVLW  00
07C2:  MOVWF  10
07C3:  MOVLW  00
07C4:  MOVWF  0D
07C5:  MOVLW  EB
07C6:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
07C7:  MOVLB  01
07C8:  BCF    1E.4
07C9:  BSF    1E.5
07CA:  BSF    1E.6
07CB:  BCF    1E.7
07CC:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_FVR);                                        //DAC output at pin DAC output1 from 0-VDD volts  
07CD:  MOVLW  98
07CE:  MOVLB  02
07CF:  MOVWF  18
....................    dac_write(50);                                                               
07D0:  MOVLW  32
07D1:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
07D2:  MOVLW  3D
07D3:  MOVLB  03
07D4:  MOVWF  11
07D5:  MOVLW  01
07D6:  MOVWF  12
07D7:  MOVLB  00
07D8:  CALL   749
07D9:  MOVLP  38
07DA:  GOTO   518 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
.................... 
....................     set_adc_channel(TEMP_TOP);
....................     delay_us(10); 
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     set_adc_channel(TEMP_BOT);
....................     delay_us(10); 
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
....................     delay_us(10); // wait for the ADC to stabilize
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
....................    unsigned int32 current;
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_us(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
....................         
....................         set_adc_channel(CIGS_CURR);
....................         current = 0; // reset current value
....................         for(int k=0; k<10; k++)
....................         {
....................                                             //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
....................             current = current + read_adc(ADC_START_AND_READ);
....................         }    
....................         
....................         current = current / 10; // average the current value
.................... 
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2+1] = current; // store the current value in the buffer
....................         //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
....................     // read PD value
....................     set_adc_channel(PD);
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................     convert_cigs_data(measurement_step);
....................     //convert_header_data();    
....................     output_low(CONNECT_CIGS);
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
2187:  MOVLW  5A
2188:  MOVLB  03
2189:  MOVWF  11
218A:  MOVLW  01
218B:  MOVWF  12
218C:  MOVLP  00
218D:  MOVLB  00
218E:  CALL   749
218F:  MOVLP  20
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
2190:  MOVLB  0F
2191:  CLRF   69
2192:  MOVLB  00
2193:  MOVLB  0F
2194:  MOVF   68,W
2195:  SUBWF  69,W
2196:  BTFSS  03.0
2197:  GOTO   19A
2198:  MOVLB  00
2199:  GOTO   2E4
219A:  MOVLB  00
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
219B:  MOVLB  0F
219C:  MOVF   69,W
219D:  MOVLB  11
219E:  MOVWF  2D
219F:  MOVLW  03
21A0:  MOVWF  2E
21A1:  MOVLP  18
21A2:  MOVLB  00
21A3:  CALL   79E
21A4:  MOVLP  20
21A5:  MOVLW  92
21A6:  ADDWF  78,W
21A7:  MOVWF  78
21A8:  MOVLW  22
21A9:  MOVWF  7A
21AA:  BTFSC  03.0
21AB:  INCF   7A,F
21AC:  MOVF   78,W
21AD:  MOVLB  0F
21AE:  MOVWF  6A
21AF:  MOVF   7A,W
21B0:  MOVWF  6B
21B1:  BCF    03.0
21B2:  RLF    69,W
21B3:  CLRF   7A
21B4:  MOVWF  79
21B5:  BCF    03.0
21B6:  RLF    79,F
21B7:  RLF    7A,F
21B8:  MOVF   79,W
21B9:  ADDLW  3A
21BA:  MOVWF  04
21BB:  MOVLW  20
21BC:  ADDWFC 7A,W
21BD:  MOVWF  05
21BE:  MOVF   00,W
21BF:  MOVWF  6C
21C0:  ADDFSR 01,FSR0
21C1:  MOVF   00,W
21C2:  MOVWF  6D
21C3:  ADDFSR 3F,FSR0
21C4:  RRF    6D,F
21C5:  RRF    6C,F
21C6:  RRF    6D,F
21C7:  RRF    6C,F
21C8:  RRF    6D,F
21C9:  RRF    6C,F
21CA:  RRF    6D,F
21CB:  RRF    6C,F
21CC:  MOVLW  0F
21CD:  ANDWF  6D,F
21CE:  MOVF   6C,W
21CF:  MOVWF  77
21D0:  CLRF   7A
21D1:  MOVF   77,W
21D2:  MOVWF  6C
21D3:  MOVF   7A,W
21D4:  MOVWF  6D
21D5:  MOVF   6B,W
21D6:  MOVWF  05
21D7:  MOVF   6A,W
21D8:  MOVWF  04
21D9:  MOVF   6C,W
21DA:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
21DB:  MOVF   69,W
21DC:  MOVLB  11
21DD:  MOVWF  2D
21DE:  MOVLW  03
21DF:  MOVWF  2E
21E0:  MOVLP  18
21E1:  MOVLB  00
21E2:  CALL   79E
21E3:  MOVLP  20
21E4:  MOVLW  92
21E5:  ADDWF  78,W
21E6:  MOVWF  04
21E7:  MOVLW  22
21E8:  MOVWF  05
21E9:  BTFSC  03.0
21EA:  INCF   05,F
21EB:  MOVF   00,W
21EC:  MOVLB  0F
21ED:  MOVWF  6A
21EE:  MOVF   6A,W
21EF:  MOVLB  11
21F0:  MOVWF  51
21F1:  MOVLW  37
21F2:  MOVWF  52
21F3:  MOVLP  08
21F4:  MOVLB  00
21F5:  CALL   592
21F6:  MOVLP  20
21F7:  MOVLW  20
21F8:  MOVLB  13
21F9:  MOVWF  2E
21FA:  MOVLP  00
21FB:  MOVLB  00
21FC:  CALL   721
21FD:  MOVLP  20
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
21FE:  MOVLB  0F
21FF:  MOVF   69,W
2200:  MOVLB  11
2201:  MOVWF  2D
2202:  MOVLW  03
2203:  MOVWF  2E
2204:  MOVLP  18
2205:  MOVLB  00
2206:  CALL   79E
2207:  MOVLP  20
2208:  MOVLW  01
2209:  ADDWF  78,W
220A:  ADDLW  92
220B:  MOVWF  78
220C:  MOVLW  22
220D:  MOVWF  7A
220E:  BTFSC  03.0
220F:  INCF   7A,F
2210:  MOVF   78,W
2211:  MOVLB  0F
2212:  MOVWF  6A
2213:  MOVF   7A,W
2214:  MOVWF  6B
2215:  BCF    03.0
2216:  RLF    69,W
2217:  CLRF   7A
2218:  MOVWF  79
2219:  BCF    03.0
221A:  RLF    79,F
221B:  RLF    7A,F
221C:  MOVF   79,W
221D:  ADDLW  3A
221E:  MOVWF  04
221F:  MOVLW  20
2220:  ADDWFC 7A,W
2221:  MOVWF  05
2222:  MOVF   00,W
2223:  MOVWF  6C
2224:  ADDFSR 01,FSR0
2225:  MOVF   00,W
2226:  MOVWF  6D
2227:  ADDFSR 3F,FSR0
2228:  MOVLW  0F
2229:  ANDWF  6C,F
222A:  CLRF   6D
222B:  RLF    6C,F
222C:  RLF    6D,F
222D:  RLF    6C,F
222E:  RLF    6D,F
222F:  RLF    6C,F
2230:  RLF    6D,F
2231:  RLF    6C,F
2232:  RLF    6D,F
2233:  MOVLW  F0
2234:  ANDWF  6C,F
2235:  BCF    03.0
2236:  RLF    69,W
2237:  ADDLW  01
2238:  CLRF   7A
2239:  MOVWF  79
223A:  BCF    03.0
223B:  RLF    79,F
223C:  RLF    7A,F
223D:  MOVF   79,W
223E:  ADDLW  3A
223F:  MOVWF  04
2240:  MOVLW  20
2241:  ADDWFC 7A,W
2242:  MOVWF  05
2243:  MOVF   00,W
2244:  MOVWF  6E
2245:  ADDFSR 01,FSR0
2246:  MOVF   00,W
2247:  MOVWF  6F
2248:  ADDFSR 3F,FSR0
2249:  MOVF   6F,W
224A:  MOVWF  6E
224B:  CLRF   6F
224C:  MOVF   6E,W
224D:  ANDLW  0F
224E:  MOVWF  77
224F:  CLRF   7A
2250:  MOVF   77,W
2251:  IORWF  6C,W
2252:  MOVWF  77
2253:  MOVF   7A,W
2254:  IORWF  6D,W
2255:  MOVWF  7A
2256:  MOVF   77,W
2257:  MOVWF  6C
2258:  MOVF   7A,W
2259:  MOVWF  6D
225A:  MOVF   6B,W
225B:  MOVWF  05
225C:  MOVF   6A,W
225D:  MOVWF  04
225E:  MOVF   6C,W
225F:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
2260:  MOVF   69,W
2261:  MOVLB  11
2262:  MOVWF  2D
2263:  MOVLW  03
2264:  MOVWF  2E
2265:  MOVLP  18
2266:  MOVLB  00
2267:  CALL   79E
2268:  MOVLP  20
2269:  MOVLW  01
226A:  ADDWF  78,W
226B:  ADDLW  92
226C:  MOVWF  04
226D:  MOVLW  22
226E:  MOVWF  05
226F:  BTFSC  03.0
2270:  INCF   05,F
2271:  MOVF   00,W
2272:  MOVLB  0F
2273:  MOVWF  6A
2274:  MOVF   6A,W
2275:  MOVLB  11
2276:  MOVWF  51
2277:  MOVLW  37
2278:  MOVWF  52
2279:  MOVLP  08
227A:  MOVLB  00
227B:  CALL   592
227C:  MOVLP  20
227D:  MOVLW  20
227E:  MOVLB  13
227F:  MOVWF  2E
2280:  MOVLP  00
2281:  MOVLB  00
2282:  CALL   721
2283:  MOVLP  20
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
2284:  MOVLB  0F
2285:  MOVF   69,W
2286:  MOVLB  11
2287:  MOVWF  2D
2288:  MOVLW  03
2289:  MOVWF  2E
228A:  MOVLP  18
228B:  MOVLB  00
228C:  CALL   79E
228D:  MOVLP  20
228E:  MOVLW  02
228F:  ADDWF  78,W
2290:  ADDLW  92
2291:  MOVWF  78
2292:  MOVLW  22
2293:  MOVWF  7A
2294:  BTFSC  03.0
2295:  INCF   7A,F
2296:  MOVF   78,W
2297:  MOVLB  0F
2298:  MOVWF  6A
2299:  MOVF   7A,W
229A:  MOVWF  6B
229B:  BCF    03.0
229C:  RLF    69,W
229D:  ADDLW  01
229E:  CLRF   7A
229F:  MOVWF  79
22A0:  BCF    03.0
22A1:  RLF    79,F
22A2:  RLF    7A,F
22A3:  MOVF   79,W
22A4:  ADDLW  3A
22A5:  MOVWF  04
22A6:  MOVLW  20
22A7:  ADDWFC 7A,W
22A8:  MOVWF  05
22A9:  MOVF   00,W
22AA:  MOVWF  6C
22AB:  ADDFSR 01,FSR0
22AC:  MOVF   00,W
22AD:  MOVWF  6D
22AE:  ADDFSR 3F,FSR0
22AF:  MOVF   6C,W
22B0:  MOVWF  77
22B1:  CLRF   7A
22B2:  MOVF   77,W
22B3:  MOVWF  6C
22B4:  MOVF   7A,W
22B5:  MOVWF  6D
22B6:  MOVF   6B,W
22B7:  MOVWF  05
22B8:  MOVF   6A,W
22B9:  MOVWF  04
22BA:  MOVF   6C,W
22BB:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
22BC:  MOVF   69,W
22BD:  MOVLB  11
22BE:  MOVWF  2D
22BF:  MOVLW  03
22C0:  MOVWF  2E
22C1:  MOVLP  18
22C2:  MOVLB  00
22C3:  CALL   79E
22C4:  MOVLP  20
22C5:  MOVLW  02
22C6:  ADDWF  78,W
22C7:  ADDLW  92
22C8:  MOVWF  04
22C9:  MOVLW  22
22CA:  MOVWF  05
22CB:  BTFSC  03.0
22CC:  INCF   05,F
22CD:  MOVF   00,W
22CE:  MOVLB  0F
22CF:  MOVWF  6A
22D0:  MOVF   6A,W
22D1:  MOVLB  11
22D2:  MOVWF  51
22D3:  MOVLW  37
22D4:  MOVWF  52
22D5:  MOVLP  08
22D6:  MOVLB  00
22D7:  CALL   592
22D8:  MOVLP  20
22D9:  MOVLW  20
22DA:  MOVLB  13
22DB:  MOVWF  2E
22DC:  MOVLP  00
22DD:  MOVLB  00
22DE:  CALL   721
22DF:  MOVLP  20
22E0:  MOVLB  0F
22E1:  INCF   69,F
22E2:  MOVLB  00
22E3:  GOTO   193
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
22E4:  MOVLW  0D
22E5:  MOVLB  13
22E6:  MOVWF  2E
22E7:  MOVLP  00
22E8:  MOVLB  00
22E9:  CALL   721
22EA:  MOVLP  20
22EB:  MOVLW  0A
22EC:  MOVLB  13
22ED:  MOVWF  2E
22EE:  MOVLP  00
22EF:  MOVLB  00
22F0:  CALL   721
22F1:  MOVLP  20
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
24DC:  MOVLB  0F
24DD:  MOVF   3B,W
24DE:  SUBWF  3A,W
24DF:  BTFSC  03.2
24E0:  GOTO   4E3
24E1:  MOVLB  00
24E2:  GOTO   4F3
24E3:  MOVLB  00
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
24E4:  MOVLW  72
24E5:  MOVLB  03
24E6:  MOVWF  11
24E7:  MOVLW  01
24E8:  MOVWF  12
24E9:  MOVLP  00
24EA:  MOVLB  00
24EB:  CALL   749
24EC:  MOVLP  20
....................       return 0x00;
24ED:  MOVLW  00
24EE:  MOVWF  78
24EF:  MOVLW  00
24F0:  MOVWF  79
24F1:  GOTO   512
....................    }
24F2:  GOTO   512
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
24F3:  MOVLB  0F
24F4:  MOVF   3A,W
24F5:  MOVLB  11
24F6:  MOVWF  2C
24F7:  MOVLB  00
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
24F8:  MOVLW  01
24F9:  MOVLB  0F
24FA:  ADDWF  3A,W
24FB:  ANDLW  0F
24FC:  MOVWF  3A
....................       return &smf_queue.smf_data[current_head];
24FD:  MOVLB  11
24FE:  MOVF   2C,W
24FF:  MOVWF  2D
2500:  MOVLW  09
2501:  MOVWF  2E
2502:  MOVLP  18
2503:  MOVLB  00
2504:  CALL   79E
2505:  MOVLP  20
2506:  MOVF   78,W
2507:  ADDLW  3A
2508:  MOVWF  78
2509:  MOVLW  24
250A:  MOVWF  7A
250B:  BTFSC  03.0
250C:  INCF   7A,F
250D:  MOVF   78,W
250E:  MOVWF  78
250F:  MOVF   7A,W
2510:  MOVWF  79
2511:  GOTO   512
....................    }
2512:  MOVLP  30
2513:  GOTO   43E (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
1FC5:  MOVLB  0F
1FC6:  MOVF   3B,W
1FC7:  SUBWF  3A,W
1FC8:  BTFSS  03.2
1FC9:  GOTO   7CC
1FCA:  MOVLB  00
1FCB:  GOTO   7CF
1FCC:  MOVLB  00
1FCD:  MOVLW  00
1FCE:  GOTO   7D0
1FCF:  MOVLW  01
1FD0:  MOVWF  78
1FD1:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
2514:  MOVLB  11
2515:  CLRF   53
2516:  CLRF   54
2517:  CLRF   55
2518:  CLRF   56
2519:  CLRF   57
251A:  CLRF   58
251B:  CLRF   59
251C:  CLRF   5A
251D:  CLRF   5B
....................    
....................    if (mis_type == APRS_DATA)
251E:  MOVF   52,F
251F:  BTFSC  03.2
2520:  GOTO   523
2521:  MOVLB  00
2522:  GOTO   537
2523:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02400000;
2524:  MOVLW  02
2525:  MOVLB  11
2526:  MOVWF  56
2527:  MOVLW  40
2528:  MOVWF  55
2529:  CLRF   54
252A:  CLRF   53
....................       mis_struct.end_address     = 0x02500FFF;
252B:  MOVLW  02
252C:  MOVWF  5A
252D:  MOVLW  50
252E:  MOVWF  59
252F:  MOVLW  0F
2530:  MOVWF  58
2531:  MOVLW  FF
2532:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000000;
2533:  MOVLW  80
2534:  MOVWF  5B
2535:  MOVLB  00
....................    }
2536:  GOTO   59F
....................    else if (mis_type == IN_VEHICLE)
2537:  MOVLB  11
2538:  DECFSZ 52,W
2539:  GOTO   53C
253A:  GOTO   53E
253B:  MOVLB  00
253C:  MOVLB  00
253D:  GOTO   553
253E:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02501000;
253F:  MOVLW  02
2540:  MOVLB  11
2541:  MOVWF  56
2542:  MOVLW  50
2543:  MOVWF  55
2544:  MOVLW  10
2545:  MOVWF  54
2546:  CLRF   53
....................       mis_struct.end_address     = 0x02501FFF;
2547:  MOVLW  02
2548:  MOVWF  5A
2549:  MOVLW  50
254A:  MOVWF  59
254B:  MOVLW  1F
254C:  MOVWF  58
254D:  MOVLW  FF
254E:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000001;  
254F:  MOVLW  81
2550:  MOVWF  5B
2551:  MOVLB  00
....................    }
2552:  GOTO   59F
....................    else if (mis_type == ECOSYSTEM_DATA)
2553:  MOVLB  11
2554:  MOVF   52,W
2555:  SUBLW  02
2556:  BTFSC  03.2
2557:  GOTO   55A
2558:  MOVLB  00
2559:  GOTO   56F
255A:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02506000;
255B:  MOVLW  02
255C:  MOVLB  11
255D:  MOVWF  56
255E:  MOVLW  50
255F:  MOVWF  55
2560:  MOVLW  60
2561:  MOVWF  54
2562:  CLRF   53
....................       mis_struct.end_address     = 0x02516FFF;
2563:  MOVLW  02
2564:  MOVWF  5A
2565:  MOVLW  51
2566:  MOVWF  59
2567:  MOVLW  6F
2568:  MOVWF  58
2569:  MOVLW  FF
256A:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000011;  
256B:  MOVLW  83
256C:  MOVWF  5B
256D:  MOVLB  00
....................    }
256E:  GOTO   59F
....................    else if (mis_type == APRS_PIC_LOG)
256F:  MOVLB  11
2570:  MOVF   52,W
2571:  SUBLW  03
2572:  BTFSC  03.2
2573:  GOTO   576
2574:  MOVLB  00
2575:  GOTO   58B
2576:  MOVLB  00
....................    {
....................       mis_struct.start_address   = 0x02517000;
2577:  MOVLW  02
2578:  MOVLB  11
2579:  MOVWF  56
257A:  MOVLW  51
257B:  MOVWF  55
257C:  MOVLW  70
257D:  MOVWF  54
257E:  CLRF   53
....................       mis_struct.end_address     = 0x02517FFF;
257F:  MOVLW  02
2580:  MOVWF  5A
2581:  MOVLW  51
2582:  MOVWF  59
2583:  MOVLW  7F
2584:  MOVWF  58
2585:  MOVLW  FF
2586:  MOVWF  57
....................       mis_struct.mission_flag    = 0b10000100;  
2587:  MOVLW  84
2588:  MOVWF  5B
2589:  MOVLB  00
....................    }
258A:  GOTO   59F
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
258B:  MOVLW  FF
258C:  MOVLB  11
258D:  MOVWF  56
258E:  MOVLW  FF
258F:  MOVWF  55
2590:  MOVLW  FF
2591:  MOVWF  54
2592:  MOVLW  FF
2593:  MOVWF  53
....................       mis_struct.end_address     = 0xFFFFFFFF;
2594:  MOVLW  FF
2595:  MOVWF  5A
2596:  MOVLW  FF
2597:  MOVWF  59
2598:  MOVLW  FF
2599:  MOVWF  58
259A:  MOVLW  FF
259B:  MOVWF  57
....................       mis_struct.mission_flag    = 0b11111111; 
259C:  MOVLW  FF
259D:  MOVWF  5B
259E:  MOVLB  00
....................    }
....................    
....................    return mis_struct;
259F:  MOVLW  D3
25A0:  MOVWF  78
25A1:  MOVLW  08
25A2:  MOVWF  79
25A3:  MOVLP  28
25A4:  GOTO   013 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
12FB:  MOVLB  0F
12FC:  CLRF   5D
12FD:  CLRF   5E
12FE:  CLRF   5F
12FF:  CLRF   60
1300:  CLRF   61
1301:  CLRF   62
1302:  CLRF   63
1303:  CLRF   64
1304:  CLRF   65
1305:  CLRF   66
1306:  CLRF   67
1307:  CLRF   68
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
1308:  MOVLW  7F
1309:  MOVLB  03
130A:  MOVWF  11
130B:  MOVLW  01
130C:  MOVWF  12
130D:  MOVLP  00
130E:  MOVLB  00
130F:  CALL   749
1310:  MOVLP  10
....................    fprintf(PC, "\t[BOSS] >>> ");
1311:  MOVLW  8F
1312:  MOVLB  03
1313:  MOVWF  11
1314:  MOVLW  01
1315:  MOVWF  12
1316:  MOVLP  00
1317:  MOVLB  00
1318:  CALL   749
1319:  MOVLP  10
....................    for (int8 i = 0; i < receive_signal_size; i++)
131A:  MOVLB  0F
131B:  CLRF   69
131C:  MOVLB  00
131D:  MOVLB  0F
131E:  MOVF   5C,W
131F:  SUBWF  69,W
1320:  BTFSS  03.0
1321:  GOTO   324
1322:  MOVLB  00
1323:  GOTO   343
1324:  MOVLB  00
....................       fprintf(PC, "%X ", receive_signal[i]);
1325:  MOVLB  0F
1326:  MOVF   69,W
1327:  ADDWF  5A,W
1328:  MOVWF  04
1329:  MOVLW  00
132A:  ADDWFC 5B,W
132B:  MOVWF  05
132C:  MOVF   00,W
132D:  MOVLB  10
132E:  MOVWF  22
132F:  MOVF   22,W
1330:  MOVLB  11
1331:  MOVWF  51
1332:  MOVLW  37
1333:  MOVWF  52
1334:  MOVLP  08
1335:  MOVLB  00
1336:  CALL   592
1337:  MOVLP  10
1338:  MOVLW  20
1339:  MOVLB  13
133A:  MOVWF  2E
133B:  MOVLP  00
133C:  MOVLB  00
133D:  CALL   721
133E:  MOVLP  10
133F:  MOVLB  0F
1340:  INCF   69,F
1341:  MOVLB  00
1342:  GOTO   31D
....................    fprintf(PC, "\r\n");
1343:  MOVLW  0D
1344:  MOVLB  13
1345:  MOVWF  2E
1346:  MOVLP  00
1347:  MOVLB  00
1348:  CALL   721
1349:  MOVLP  10
134A:  MOVLW  0A
134B:  MOVLB  13
134C:  MOVWF  2E
134D:  MOVLP  00
134E:  MOVLB  00
134F:  CALL   721
1350:  MOVLP  10
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
1351:  MOVLB  0F
1352:  MOVF   5B,W
1353:  MOVLB  10
1354:  MOVWF  23
1355:  MOVLB  0F
1356:  MOVF   5A,W
1357:  MOVLB  10
1358:  MOVWF  22
1359:  MOVLB  0F
135A:  MOVF   5C,W
135B:  MOVLB  10
135C:  MOVWF  24
135D:  MOVLB  00
*
13AA:  MOVF   78,W
13AB:  MOVLB  0F
13AC:  MOVWF  6A
....................    if (frame_start_position == -1)
13AD:  MOVF   6A,W
13AE:  SUBLW  FF
13AF:  BTFSC  03.2
13B0:  GOTO   3B3
13B1:  MOVLB  00
13B2:  GOTO   3B9
13B3:  MOVLB  00
....................       return command;
13B4:  MOVLW  DD
13B5:  MOVWF  78
13B6:  MOVLW  07
13B7:  MOVWF  79
13B8:  GOTO   572
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
13B9:  MOVLB  0F
13BA:  MOVF   6A,W
13BB:  ADDWF  5A,W
13BC:  MOVWF  6B
13BD:  MOVLW  00
13BE:  ADDWFC 5B,W
13BF:  MOVWF  6C
13C0:  MOVF   6B,W
13C1:  MOVWF  04
13C2:  MOVF   6C,W
13C3:  MOVWF  05
13C4:  ADDFSR 00,FSR0
13C5:  MOVF   00,W
13C6:  ANDLW  0F
13C7:  MOVWF  6D
13C8:  MOVF   6D,W
13C9:  MOVLB  10
13CA:  MOVWF  22
13CB:  MOVLB  00
*
1420:  MOVF   78,W
1421:  MOVLB  0F
1422:  MOVWF  6E
....................    if (content_size == -1)
1423:  MOVF   6E,W
1424:  SUBLW  FF
1425:  BTFSC  03.2
1426:  GOTO   429
1427:  MOVLB  00
1428:  GOTO   42F
1429:  MOVLB  00
....................       return command;
142A:  MOVLW  DD
142B:  MOVWF  78
142C:  MOVLW  07
142D:  MOVWF  79
142E:  GOTO   572
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
142F:  MOVLB  0F
1430:  MOVF   6A,W
1431:  SUBWF  5C,W
1432:  MOVWF  6F
....................    
....................    if (!check_crc(frame, receive_frame_size))
1433:  MOVF   6C,W
1434:  MOVLB  10
1435:  MOVWF  23
1436:  MOVLB  0F
1437:  MOVF   6B,W
1438:  MOVLB  10
1439:  MOVWF  22
143A:  MOVLB  0F
143B:  MOVF   6F,W
143C:  MOVLB  10
143D:  MOVWF  24
143E:  MOVLB  00
*
14BA:  MOVF   78,F
14BB:  BTFSS  03.2
14BC:  GOTO   4C2
....................       return command;
14BD:  MOVLW  DD
14BE:  MOVWF  78
14BF:  MOVLW  07
14C0:  MOVWF  79
14C1:  GOTO   572
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
14C2:  MOVLB  0F
14C3:  MOVF   6B,W
14C4:  MOVWF  04
14C5:  MOVF   6C,W
14C6:  MOVWF  05
14C7:  ADDFSR 00,FSR0
14C8:  MOVF   00,W
14C9:  ANDLW  F0
14CA:  MOVWF  77
14CB:  SWAPF  77,W
14CC:  MOVLB  10
14CD:  MOVWF  22
14CE:  MOVLW  0F
14CF:  ANDWF  22,F
14D0:  MOVF   22,W
14D1:  MOVWF  23
14D2:  MOVLB  00
*
1534:  MOVF   78,F
1535:  BTFSS  03.2
1536:  GOTO   53C
....................       return command;
1537:  MOVLW  DD
1538:  MOVWF  78
1539:  MOVLW  07
153A:  MOVWF  79
153B:  GOTO   572
.................... 
....................    command.frame_id = frame_id;
153C:  MOVLB  0F
153D:  MOVF   6D,W
153E:  MOVWF  5D
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
153F:  MOVLW  01
1540:  ADDWF  6B,W
1541:  MOVLB  10
1542:  MOVWF  22
1543:  MOVLW  00
1544:  MOVLB  0F
1545:  ADDWFC 6C,W
1546:  MOVLB  10
1547:  MOVWF  23
1548:  MOVLW  02
1549:  MOVLB  0F
154A:  SUBWF  6F,W
154B:  MOVLB  10
154C:  MOVWF  24
154D:  MOVF   23,W
154E:  MOVWF  05
154F:  MOVF   22,W
1550:  MOVWF  04
1551:  MOVF   24,W
1552:  MOVWF  78
1553:  BTFSS  03.2
1554:  GOTO   557
1555:  MOVLB  00
1556:  GOTO   560
1557:  MOVLW  24
1558:  MOVWF  07
1559:  MOVLW  F0
155A:  MOVWF  06
155B:  MOVLB  00
155C:  MOVIW  [FSR0++],W
155D:  MOVWI  W,[FSR1++]
155E:  DECFSZ 78,F
155F:  GOTO   55C
....................    command.size = receive_frame_size-2;
1560:  MOVLW  02
1561:  MOVLB  0F
1562:  SUBWF  6F,W
1563:  MOVWF  5E
....................    command.is_exist = TRUE;
1564:  BSF    5F.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1565:  MOVLW  96
1566:  MOVLB  03
1567:  MOVWF  11
1568:  MOVLW  01
1569:  MOVWF  12
156A:  MOVLP  00
156B:  MOVLB  00
156C:  CALL   749
156D:  MOVLP  10
....................    return command;
156E:  MOVLW  DD
156F:  MOVWF  78
1570:  MOVLW  07
1571:  MOVWF  79
1572:  MOVLP  38
1573:  GOTO   556 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
135E:  MOVLB  10
135F:  CLRF   25
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
1360:  CLRF   25
1361:  MOVLB  00
1362:  MOVLW  01
1363:  MOVLB  10
1364:  SUBWF  24,W
1365:  SUBWF  25,W
1366:  BTFSS  03.0
1367:  GOTO   36A
1368:  MOVLB  00
1369:  GOTO   383
136A:  MOVLB  00
....................       if(receive_signal[i] == SFD)
136B:  MOVLB  10
136C:  MOVF   25,W
136D:  ADDWF  22,W
136E:  MOVWF  04
136F:  MOVLW  00
1370:  ADDWFC 23,W
1371:  MOVWF  05
1372:  MOVF   00,W
1373:  SUBLW  AA
1374:  BTFSC  03.2
1375:  GOTO   378
1376:  MOVLB  00
1377:  GOTO   37F
1378:  MOVLB  00
....................          return i+1;
1379:  MOVLW  01
137A:  MOVLB  10
137B:  ADDWF  25,W
137C:  MOVWF  78
137D:  MOVLB  00
137E:  GOTO   3AA
137F:  MOVLB  10
1380:  INCF   25,F
1381:  MOVLB  00
1382:  GOTO   362
....................    if (receive_signal[i] == SFD)
1383:  MOVLB  10
1384:  MOVF   25,W
1385:  ADDWF  22,W
1386:  MOVWF  04
1387:  MOVLW  00
1388:  ADDWFC 23,W
1389:  MOVWF  05
138A:  MOVF   00,W
138B:  SUBLW  AA
138C:  BTFSC  03.2
138D:  GOTO   390
138E:  MOVLB  00
138F:  GOTO   39E
1390:  MOVLB  00
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
1391:  MOVLW  A4
1392:  MOVLB  03
1393:  MOVWF  11
1394:  MOVLW  01
1395:  MOVWF  12
1396:  MOVLP  00
1397:  MOVLB  00
1398:  CALL   749
1399:  MOVLP  10
....................       return -1;
139A:  MOVLW  FF
139B:  MOVWF  78
139C:  GOTO   3AA
....................    }
139D:  GOTO   3AA
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
139E:  MOVLW  AF
139F:  MOVLB  03
13A0:  MOVWF  11
13A1:  MOVLW  01
13A2:  MOVWF  12
13A3:  MOVLP  00
13A4:  MOVLB  00
13A5:  CALL   749
13A6:  MOVLP  10
....................       return -1;
13A7:  MOVLW  FF
13A8:  MOVWF  78
13A9:  GOTO   3AA
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
13CC:  MOVLB  10
13CD:  CLRF   23
13CE:  MOVLB  00
13CF:  MOVLB  10
13D0:  MOVF   23,W
13D1:  SUBLW  02
13D2:  BTFSC  03.0
13D3:  GOTO   3D6
13D4:  MOVLB  00
13D5:  GOTO   3F9
13D6:  MOVLB  00
....................       if (frame_id == frame_ids[i].id)
13D7:  BCF    03.0
13D8:  MOVLB  10
13D9:  RLF    23,W
13DA:  ADDLW  CC
13DB:  MOVWF  04
13DC:  MOVLW  24
13DD:  MOVWF  05
13DE:  BTFSC  03.0
13DF:  INCF   05,F
13E0:  MOVF   00,W
13E1:  SUBWF  22,W
13E2:  BTFSC  03.2
13E3:  GOTO   3E6
13E4:  MOVLB  00
13E5:  GOTO   3F5
13E6:  MOVLB  00
....................          return frame_ids[i].length;
13E7:  BCF    03.0
13E8:  MOVLB  10
13E9:  RLF    23,W
13EA:  ADDLW  01
13EB:  ADDLW  CC
13EC:  MOVWF  04
13ED:  MOVLW  24
13EE:  MOVWF  05
13EF:  BTFSC  03.0
13F0:  INCF   05,F
13F1:  MOVF   00,W
13F2:  MOVWF  78
13F3:  MOVLB  00
13F4:  GOTO   420
13F5:  MOVLB  10
13F6:  INCF   23,F
13F7:  MOVLB  00
13F8:  GOTO   3CF
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
13F9:  MOVLW  B8
13FA:  MOVLB  03
13FB:  MOVWF  11
13FC:  MOVLW  01
13FD:  MOVWF  12
13FE:  BCF    03.0
13FF:  MOVLW  1F
1400:  MOVLB  11
1401:  MOVWF  51
1402:  MOVLP  08
1403:  MOVLB  00
1404:  CALL   2C9
1405:  MOVLP  10
1406:  MOVLB  10
1407:  MOVF   22,W
1408:  MOVLB  11
1409:  MOVWF  51
140A:  MOVLW  37
140B:  MOVWF  52
140C:  MOVLP  08
140D:  MOVLB  00
140E:  CALL   592
140F:  MOVLP  10
1410:  MOVLW  0D
1411:  MOVLB  13
1412:  MOVWF  2E
1413:  MOVLP  00
1414:  MOVLB  00
1415:  CALL   721
1416:  MOVLP  10
1417:  MOVLW  0A
1418:  MOVLB  13
1419:  MOVWF  2E
141A:  MOVLP  00
141B:  MOVLB  00
141C:  CALL   721
141D:  MOVLP  10
....................    return -1;
141E:  MOVLW  FF
141F:  MOVWF  78
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
143F:  MOVLW  01
1440:  MOVLB  10
1441:  SUBWF  24,W
1442:  ADDWF  22,W
1443:  MOVWF  04
1444:  MOVLW  00
1445:  ADDWFC 23,W
1446:  MOVWF  05
1447:  MOVF   00,W
1448:  MOVWF  25
1449:  MOVLW  01
144A:  SUBWF  24,W
144B:  MOVWF  27
144C:  MOVF   23,W
144D:  MOVWF  29
144E:  MOVF   22,W
144F:  MOVWF  28
1450:  MOVF   27,W
1451:  MOVWF  2A
1452:  MOVLP  08
1453:  MOVLB  00
1454:  CALL   755
1455:  MOVLP  10
1456:  MOVF   78,W
1457:  MOVLB  10
1458:  MOVWF  26
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
1459:  MOVF   26,W
145A:  SUBWF  25,W
145B:  BTFSC  03.2
145C:  GOTO   45F
145D:  MOVLB  00
145E:  GOTO   464
145F:  MOVLB  00
....................       return TRUE;
1460:  MOVLW  01
1461:  MOVWF  78
1462:  GOTO   4BA
1463:  GOTO   4BA
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1464:  MOVLW  CA
1465:  MOVLB  03
1466:  MOVWF  11
1467:  MOVLW  01
1468:  MOVWF  12
1469:  MOVLP  00
146A:  MOVLB  00
146B:  CALL   749
146C:  MOVLP  10
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
146D:  MOVLW  D3
146E:  MOVLB  03
146F:  MOVWF  11
1470:  MOVLW  01
1471:  MOVWF  12
1472:  BCF    03.0
1473:  MOVLW  13
1474:  MOVLB  11
1475:  MOVWF  51
1476:  MOVLP  08
1477:  MOVLB  00
1478:  CALL   2C9
1479:  MOVLP  10
147A:  MOVLB  10
147B:  MOVF   25,W
147C:  MOVLB  11
147D:  MOVWF  51
147E:  MOVLW  37
147F:  MOVWF  52
1480:  MOVLP  08
1481:  MOVLB  00
1482:  CALL   592
1483:  MOVLP  10
1484:  MOVLW  0D
1485:  MOVLB  13
1486:  MOVWF  2E
1487:  MOVLP  00
1488:  MOVLB  00
1489:  CALL   721
148A:  MOVLP  10
148B:  MOVLW  0A
148C:  MOVLB  13
148D:  MOVWF  2E
148E:  MOVLP  00
148F:  MOVLB  00
1490:  CALL   721
1491:  MOVLP  10
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1492:  MOVLW  DF
1493:  MOVLB  03
1494:  MOVWF  11
1495:  MOVLW  01
1496:  MOVWF  12
1497:  BCF    03.0
1498:  MOVLW  13
1499:  MOVLB  11
149A:  MOVWF  51
149B:  MOVLP  08
149C:  MOVLB  00
149D:  CALL   2C9
149E:  MOVLP  10
149F:  MOVLB  10
14A0:  MOVF   26,W
14A1:  MOVLB  11
14A2:  MOVWF  51
14A3:  MOVLW  37
14A4:  MOVWF  52
14A5:  MOVLP  08
14A6:  MOVLB  00
14A7:  CALL   592
14A8:  MOVLP  10
14A9:  MOVLW  0D
14AA:  MOVLB  13
14AB:  MOVWF  2E
14AC:  MOVLP  00
14AD:  MOVLB  00
14AE:  CALL   721
14AF:  MOVLP  10
14B0:  MOVLW  0A
14B1:  MOVLB  13
14B2:  MOVWF  2E
14B3:  MOVLP  00
14B4:  MOVLB  00
14B5:  CALL   721
14B6:  MOVLP  10
....................       return FALSE;
14B7:  MOVLW  00
14B8:  MOVWF  78
14B9:  GOTO   4BA
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
14D3:  MOVLB  10
14D4:  MOVF   23,W
14D5:  SUBLW  0C
14D6:  BTFSC  03.2
14D7:  GOTO   4DA
14D8:  MOVLB  00
14D9:  GOTO   4DF
14DA:  MOVLB  00
....................       return TRUE;
14DB:  MOVLW  01
14DC:  MOVWF  78
14DD:  GOTO   534
14DE:  GOTO   534
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
14DF:  MOVLW  EB
14E0:  MOVLB  03
14E1:  MOVWF  11
14E2:  MOVLW  01
14E3:  MOVWF  12
14E4:  MOVLP  00
14E5:  MOVLB  00
14E6:  CALL   749
14E7:  MOVLP  10
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
14E8:  MOVLW  FC
14E9:  MOVLB  03
14EA:  MOVWF  11
14EB:  MOVLW  01
14EC:  MOVWF  12
14ED:  BCF    03.0
14EE:  MOVLW  13
14EF:  MOVLB  11
14F0:  MOVWF  51
14F1:  MOVLP  08
14F2:  MOVLB  00
14F3:  CALL   2C9
14F4:  MOVLP  10
14F5:  MOVLB  10
14F6:  MOVF   23,W
14F7:  MOVLB  11
14F8:  MOVWF  51
14F9:  MOVLW  37
14FA:  MOVWF  52
14FB:  MOVLP  08
14FC:  MOVLB  00
14FD:  CALL   592
14FE:  MOVLP  10
14FF:  MOVLW  0D
1500:  MOVLB  13
1501:  MOVWF  2E
1502:  MOVLP  00
1503:  MOVLB  00
1504:  CALL   721
1505:  MOVLP  10
1506:  MOVLW  0A
1507:  MOVLB  13
1508:  MOVWF  2E
1509:  MOVLP  00
150A:  MOVLB  00
150B:  CALL   721
150C:  MOVLP  10
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
150D:  MOVLW  08
150E:  MOVLB  03
150F:  MOVWF  11
1510:  MOVLW  02
1511:  MOVWF  12
1512:  BCF    03.0
1513:  MOVLW  13
1514:  MOVLB  11
1515:  MOVWF  51
1516:  MOVLP  08
1517:  MOVLB  00
1518:  CALL   2C9
1519:  MOVLP  10
151A:  MOVLW  0C
151B:  MOVLB  11
151C:  MOVWF  51
151D:  MOVLW  37
151E:  MOVWF  52
151F:  MOVLP  08
1520:  MOVLB  00
1521:  CALL   592
1522:  MOVLP  10
1523:  MOVLW  0D
1524:  MOVLB  13
1525:  MOVWF  2E
1526:  MOVLP  00
1527:  MOVLB  00
1528:  CALL   721
1529:  MOVLP  10
152A:  MOVLW  0A
152B:  MOVLB  13
152C:  MOVWF  2E
152D:  MOVLP  00
152E:  MOVLB  00
152F:  CALL   721
1530:  MOVLP  10
....................       return FALSE;  
1531:  MOVLW  00
1532:  MOVWF  78
1533:  GOTO   534
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
1574:  MOVLW  AA
1575:  MOVLB  0F
1576:  MOVWF  5C
....................    data[1] = (BOSS_PIC << 4) | frame_id;
1577:  MOVF   58,W
1578:  IORLW  50
1579:  MOVWF  5D
....................    memcpy(&data[2], content, size);
157A:  MOVF   5A,W
157B:  MOVWF  05
157C:  MOVF   59,W
157D:  MOVWF  04
157E:  MOVF   5B,W
157F:  MOVWF  78
1580:  BTFSS  03.2
1581:  GOTO   584
1582:  MOVLB  00
1583:  GOTO   58D
1584:  MOVLW  24
1585:  MOVWF  07
1586:  MOVLW  EE
1587:  MOVWF  06
1588:  MOVLB  00
1589:  MOVIW  [FSR0++],W
158A:  MOVWI  W,[FSR1++]
158B:  DECFSZ 78,F
158C:  GOTO   589
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
158D:  MOVLW  02
158E:  MOVLB  0F
158F:  ADDWF  5B,W
1590:  MOVWF  6C
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
1591:  MOVLW  EC
1592:  ADDWF  6C,W
1593:  MOVLB  10
1594:  MOVWF  22
1595:  MOVLW  24
1596:  MOVWF  23
1597:  BTFSC  03.0
1598:  INCF   23,F
1599:  MOVLW  01
159A:  MOVLB  0F
159B:  SUBWF  6C,W
159C:  MOVLB  10
159D:  MOVWF  24
159E:  MOVLW  24
159F:  MOVWF  29
15A0:  MOVLW  ED
15A1:  MOVWF  28
15A2:  MOVF   24,W
15A3:  MOVWF  2A
15A4:  MOVLP  08
15A5:  MOVLB  00
15A6:  CALL   755
15A7:  MOVLP  10
15A8:  MOVLB  10
15A9:  MOVF   23,W
15AA:  MOVWF  05
15AB:  MOVF   22,W
15AC:  MOVWF  04
15AD:  MOVF   78,W
15AE:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
15AF:  MOVLW  01
15B0:  MOVLB  0F
15B1:  ADDWF  6C,W
15B2:  MOVWF  6D
....................    
....................    transmit(data, data_size);
15B3:  MOVLW  24
15B4:  MOVLB  10
15B5:  MOVWF  23
15B6:  MOVLW  EC
15B7:  MOVWF  22
15B8:  MOVLB  0F
15B9:  MOVF   6D,W
15BA:  MOVLB  10
15BB:  MOVWF  24
15BC:  MOVLB  00
*
161B:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
15BD:  MOVLB  10
15BE:  CLRF   25
15BF:  MOVLB  00
15C0:  MOVLB  10
15C1:  MOVF   24,W
15C2:  SUBWF  25,W
15C3:  BTFSS  03.0
15C4:  GOTO   5C7
15C5:  MOVLB  00
15C6:  GOTO   5DC
15C7:  MOVLB  00
....................       fputc(data[i], BOSS);
15C8:  MOVLB  10
15C9:  MOVF   25,W
15CA:  ADDWF  22,W
15CB:  MOVWF  04
15CC:  MOVLW  00
15CD:  ADDWFC 23,W
15CE:  MOVWF  05
15CF:  MOVF   00,W
15D0:  MOVWF  27
15D1:  MOVF   27,W
15D2:  MOVLB  00
*
15D8:  MOVLB  10
15D9:  INCF   25,F
15DA:  MOVLB  00
15DB:  GOTO   5C0
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
15DC:  MOVLW  14
15DD:  MOVLB  03
15DE:  MOVWF  11
15DF:  MOVLW  02
15E0:  MOVWF  12
15E1:  MOVLP  00
15E2:  MOVLB  00
15E3:  CALL   749
15E4:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
15E5:  MOVLB  10
15E6:  CLRF   26
15E7:  MOVLB  00
15E8:  MOVLB  10
15E9:  MOVF   24,W
15EA:  SUBWF  26,W
15EB:  BTFSS  03.0
15EC:  GOTO   5EF
15ED:  MOVLB  00
15EE:  GOTO   60D
15EF:  MOVLB  00
....................       fprintf(PC, "%X ", data[i]);
15F0:  MOVLB  10
15F1:  MOVF   26,W
15F2:  ADDWF  22,W
15F3:  MOVWF  04
15F4:  MOVLW  00
15F5:  ADDWFC 23,W
15F6:  MOVWF  05
15F7:  MOVF   00,W
15F8:  MOVWF  27
15F9:  MOVF   27,W
15FA:  MOVLB  11
15FB:  MOVWF  51
15FC:  MOVLW  37
15FD:  MOVWF  52
15FE:  MOVLP  08
15FF:  MOVLB  00
1600:  CALL   592
1601:  MOVLP  10
1602:  MOVLW  20
1603:  MOVLB  13
1604:  MOVWF  2E
1605:  MOVLP  00
1606:  MOVLB  00
1607:  CALL   721
1608:  MOVLP  10
1609:  MOVLB  10
160A:  INCF   26,F
160B:  MOVLB  00
160C:  GOTO   5E8
....................    fprintf(PC, "\r\n");
160D:  MOVLW  0D
160E:  MOVLB  13
160F:  MOVWF  2E
1610:  MOVLP  00
1611:  MOVLB  00
1612:  CALL   721
1613:  MOVLP  10
1614:  MOVLW  0A
1615:  MOVLB  13
1616:  MOVWF  2E
1617:  MOVLP  00
1618:  MOVLB  00
1619:  CALL   721
161A:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0F55:  MOVLB  10
0F56:  MOVF   28,W
0F57:  MOVWF  04
0F58:  MOVF   29,W
0F59:  MOVWF  05
0F5A:  ADDFSR 00,FSR0
0F5B:  MOVF   00,W
0F5C:  MOVWF  2B
0F5D:  MOVLW  01
0F5E:  MOVWF  2C
0F5F:  MOVLB  00
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0F60:  MOVLB  10
0F61:  MOVF   2A,W
0F62:  SUBWF  2C,W
0F63:  BTFSS  03.0
0F64:  GOTO   767
0F65:  MOVLB  00
0F66:  GOTO   774
0F67:  MOVLB  00
....................       crc ^= frame[i++];
0F68:  MOVLB  10
0F69:  MOVF   2C,W
0F6A:  INCF   2C,F
0F6B:  ADDWF  28,W
0F6C:  MOVWF  04
0F6D:  MOVLW  00
0F6E:  ADDWFC 29,W
0F6F:  MOVWF  05
0F70:  MOVF   00,W
0F71:  XORWF  2B,F
0F72:  MOVLB  00
0F73:  GOTO   760
....................    return crc;
0F74:  MOVLB  10
0F75:  MOVF   2B,W
0F76:  MOVWF  78
0F77:  MOVLB  00
0F78:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0F9C:  MOVLW  0F
0F9D:  MOVLB  0F
0F9E:  MOVWF  58
0F9F:  CLRF   5A
0FA0:  CLRF   59
0FA1:  CLRF   5B
0FA2:  MOVLP  10
0FA3:  MOVLB  00
0FA4:  CALL   574
0FA5:  MOVLP  08
0FA6:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
1FD2:  MOVLW  03
1FD3:  MOVLB  0F
1FD4:  MOVWF  58
1FD5:  MOVLW  20
1FD6:  MOVWF  5A
1FD7:  MOVLW  09
1FD8:  MOVWF  59
1FD9:  MOVLW  04
1FDA:  MOVWF  5B
1FDB:  MOVLP  10
1FDC:  MOVLB  00
1FDD:  CALL   574
1FDE:  MOVLP  18
1FDF:  MOVLP  20
1FE0:  GOTO   436 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... union AD7490_RESISTOR reg;
.................... struct AD7490_STREAM adf7490_stream;
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     // Set default register values
....................     reg.coding = 0; // 1: Two's complement, 0: Binary
*
07EF:  MOVLB  0F
07F0:  BCF    42.0
....................     reg.write = 1;
07F1:  BSF    43.3
....................     reg.seq = 0; 
07F2:  BCF    43.2
....................     reg.randge = 0;
07F3:  BCF    42.1
....................     reg.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
07F4:  BCF    42.2
....................     reg.shadow = 0; // 1: Shadow register, 0: Direct access
07F5:  BCF    42.3
07F6:  MOVLB  00
07F7:  MOVLP  38
07F8:  GOTO   521 (RETURN)
.................... 
.................... }
.................... 
.................... unsigned int16 ad7490_read(int16 channel)
.................... {   
....................     set_add(channel);
*
1F2C:  MOVLB  0F
1F2D:  MOVF   6B,W
1F2E:  MOVWF  6F
1F2F:  MOVF   6A,W
1F30:  MOVWF  6E
1F31:  MOVLB  00
....................     set_pm(AD7490_PM_NORMAL);
*
1F83:  MOVLB  0F
1F84:  CLRF   6E
1F85:  MOVLB  00
....................     //spi_xfer(adf7490_stream.spi_stream, reg.value); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] << %04X\r\n", reg.value);
....................     #endif
....................     
....................     //unsigned int16 ans = spi_xfer(adf7490_stream.spi_stream);
....................     //unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata = 0;
*
1F95:  MOVLB  0F
1F96:  CLRF   6D
1F97:  CLRF   6C
....................     
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC,"\t[ADC] >> %04X\r\n", readdata);
....................     #endif
....................     return readdata;
1F98:  MOVF   6C,W
1F99:  MOVWF  78
1F9A:  MOVF   6D,W
1F9B:  MOVWF  79
1F9C:  MOVLB  00
1F9D:  RETURN
.................... }
.................... 
.................... void set_add(int16 channel)
.................... {
....................     reg.add0 = (channel >> 0) & 0x1;
*
1F32:  MOVLB  0F
1F33:  MOVF   6F,W
1F34:  MOVLB  10
1F35:  MOVWF  21
1F36:  MOVLB  0F
1F37:  MOVF   6E,W
1F38:  MOVLB  10
1F39:  MOVWF  20
1F3A:  MOVF   20,W
1F3B:  ANDLW  01
1F3C:  MOVWF  77
1F3D:  CLRF   7A
1F3E:  MOVF   77,W
1F3F:  MOVWF  78
1F40:  MOVLB  0F
1F41:  BCF    42.6
1F42:  BTFSC  78.0
1F43:  BSF    42.6
....................     reg.add1 = (channel >> 1) & 0x1;
1F44:  BCF    03.0
1F45:  RRF    6F,W
1F46:  MOVLB  10
1F47:  MOVWF  21
1F48:  MOVLB  0F
1F49:  RRF    6E,W
1F4A:  MOVLB  10
1F4B:  MOVWF  20
1F4C:  MOVF   20,W
1F4D:  ANDLW  01
1F4E:  MOVWF  77
1F4F:  CLRF   7A
1F50:  MOVF   77,W
1F51:  MOVWF  78
1F52:  MOVLB  0F
1F53:  BCF    42.7
1F54:  BTFSC  78.0
1F55:  BSF    42.7
....................     reg.add2 = (channel >> 2) & 0x1;
1F56:  RRF    6F,W
1F57:  MOVLB  10
1F58:  MOVWF  21
1F59:  MOVLB  0F
1F5A:  RRF    6E,W
1F5B:  MOVLB  10
1F5C:  MOVWF  20
1F5D:  RRF    21,F
1F5E:  RRF    20,F
1F5F:  MOVLW  3F
1F60:  ANDWF  21,F
1F61:  MOVF   20,W
1F62:  ANDLW  01
1F63:  MOVWF  77
1F64:  CLRF   7A
1F65:  MOVF   77,W
1F66:  MOVWF  78
1F67:  MOVLB  0F
1F68:  BCF    43.0
1F69:  BTFSC  78.0
1F6A:  BSF    43.0
....................     reg.add3 = (channel >> 3) & 0x1;
1F6B:  RRF    6F,W
1F6C:  MOVLB  10
1F6D:  MOVWF  21
1F6E:  MOVLB  0F
1F6F:  RRF    6E,W
1F70:  MOVLB  10
1F71:  MOVWF  20
1F72:  RRF    21,F
1F73:  RRF    20,F
1F74:  RRF    21,F
1F75:  RRF    20,F
1F76:  MOVLW  1F
1F77:  ANDWF  21,F
1F78:  MOVF   20,W
1F79:  ANDLW  01
1F7A:  MOVWF  77
1F7B:  CLRF   7A
1F7C:  MOVF   77,W
1F7D:  MOVWF  78
1F7E:  MOVLB  0F
1F7F:  BCF    43.1
1F80:  BTFSC  78.0
1F81:  BSF    43.1
1F82:  MOVLB  00
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.pm0 = (powermode >> 0) & 0x1;
*
1F86:  MOVLB  0F
1F87:  MOVF   6E,W
1F88:  ANDLW  01
1F89:  MOVWF  78
1F8A:  BCF    42.4
1F8B:  BTFSC  78.0
1F8C:  BSF    42.4
....................     reg.pm1 = (powermode >> 1) & 0x1;
1F8D:  BCF    03.0
1F8E:  RRF    6E,W
1F8F:  ANDLW  01
1F90:  MOVWF  78
1F91:  BCF    42.5
1F92:  BTFSC  78.0
1F93:  BSF    42.5
1F94:  MOVLB  00
....................     
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32  smf_piclog_use_counter;
....................         unsigned int8   smf_piclog_loop_counter;
....................         unsigned int32  smf_meas_use_counter;
....................         unsigned int8   smf_meas_loop_counter;
.................... 
....................         unsigned int32  misf_piclog_use_counter;
....................         unsigned int8   misf_piclog_loop_counter;
....................         unsigned int32  misf_piclog_uncopyed_counter;
....................         unsigned int8   misf_piclog_write_counter;
....................         unsigned int32  misf_meas_use_counter;
....................         unsigned int8   misf_meas_loop_counter;
....................         unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................         unsigned int8   reserve[34];
....................         unsigned int8   crc;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[PACKET_SIZE]; 
.................... } FLASH_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    
....................    //adc_init();
....................    sweep(sweep_step);
....................    //copy_data();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
2000:  MOVLW  CE
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  02
2004:  MOVWF  12
2005:  MOVLP  00
2006:  MOVLB  00
2007:  CALL   749
2008:  MOVLP  20
....................     unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
2009:  MOVLW  64
200A:  MOVLB  0F
200B:  MOVWF  5F
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
200C:  MOVLW  D5
200D:  MOVLB  03
200E:  MOVWF  11
200F:  MOVLW  02
2010:  MOVWF  12
2011:  BCF    03.0
2012:  MOVLW  0E
2013:  MOVLB  11
2014:  MOVWF  51
2015:  MOVLP  08
2016:  MOVLB  00
2017:  CALL   2C9
2018:  MOVLP  20
2019:  MOVLB  0F
201A:  MOVF   5F,W
201B:  MOVLB  11
201C:  MOVWF  3A
201D:  MOVLW  1B
201E:  MOVWF  3B
201F:  MOVLP  08
2020:  MOVLB  00
2021:  CALL   430
2022:  MOVLP  20
2023:  MOVLW  0D
2024:  MOVLB  13
2025:  MOVWF  2E
2026:  MOVLP  00
2027:  MOVLB  00
2028:  CALL   721
2029:  MOVLP  20
202A:  MOVLW  0A
202B:  MOVLB  13
202C:  MOVWF  2E
202D:  MOVLP  00
202E:  MOVLB  00
202F:  CALL   721
2030:  MOVLP  20
....................     output_high(CONNECT_CIGS);
2031:  MOVLB  01
2032:  BCF    0E.0
2033:  MOVLB  02
2034:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
2035:  MOVLW  20
2036:  MOVWF  78
2037:  MOVLB  01
2038:  MOVF   1D,W
2039:  ANDLW  83
203A:  IORWF  78,W
203B:  MOVWF  1D
203C:  MOVLW  0F
203D:  MOVWF  78
203E:  MOVF   1F,W
203F:  ANDLW  F0
2040:  IORWF  78,W
2041:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
2042:  MOVLW  0D
2043:  MOVWF  77
2044:  MOVLB  00
2045:  DECFSZ 77,F
2046:  GOTO   045
....................     measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2047:  MOVLB  0F
2048:  CLRF   6B
2049:  CLRF   6A
204A:  MOVLP  18
204B:  MOVLB  00
204C:  CALL   72C
204D:  MOVLP  20
204E:  MOVF   79,W
204F:  MOVLB  0C
2050:  MOVWF  33
2051:  MOVF   78,W
2052:  MOVWF  32
....................     set_adc_channel(TEMP_BOT);
2053:  MOVLW  0C
2054:  MOVWF  78
2055:  MOVLB  01
2056:  MOVF   1D,W
2057:  ANDLW  83
2058:  IORWF  78,W
2059:  MOVWF  1D
205A:  MOVLW  0F
205B:  MOVWF  78
205C:  MOVF   1F,W
205D:  ANDLW  F0
205E:  IORWF  78,W
205F:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
2060:  MOVLW  0D
2061:  MOVWF  77
2062:  MOVLB  00
2063:  DECFSZ 77,F
2064:  GOTO   063
....................     measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2065:  MOVLB  0F
2066:  CLRF   6B
2067:  CLRF   6A
2068:  MOVLP  18
2069:  MOVLB  00
206A:  CALL   72C
206B:  MOVLP  20
206C:  MOVF   79,W
206D:  MOVLB  0C
206E:  MOVWF  35
206F:  MOVF   78,W
2070:  MOVWF  34
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
2071:  MOVLW  00
2072:  MOVWF  78
2073:  MOVLB  01
2074:  MOVF   1D,W
2075:  ANDLW  83
2076:  IORWF  78,W
2077:  MOVWF  1D
2078:  MOVLW  0F
2079:  MOVWF  78
207A:  MOVF   1F,W
207B:  ANDLW  F0
207C:  IORWF  78,W
207D:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
207E:  MOVLW  0D
207F:  MOVWF  77
2080:  MOVLB  00
2081:  DECFSZ 77,F
2082:  GOTO   081
....................     measured_pd_start = ad7490_read(AD7490_VIN0); // voltage at adc pin
2083:  MOVLB  0F
2084:  CLRF   6B
2085:  CLRF   6A
2086:  MOVLP  18
2087:  MOVLB  00
2088:  CALL   72C
2089:  MOVLP  20
208A:  MOVF   79,W
208B:  MOVLB  0C
208C:  MOVWF  2F
208D:  MOVF   78,W
208E:  MOVWF  2E
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
208F:  MOVLB  0F
2090:  CLRF   65
2091:  CLRF   64
2092:  MOVLB  00
2093:  MOVLB  0F
2094:  MOVF   65,F
2095:  BTFSC  03.2
2096:  GOTO   099
2097:  MOVLB  00
2098:  GOTO   160
2099:  MOVLB  00
209A:  MOVLB  0F
209B:  MOVF   5F,W
209C:  SUBWF  64,W
209D:  BTFSS  03.0
209E:  GOTO   0A1
209F:  MOVLB  00
20A0:  GOTO   160
20A1:  MOVLB  00
....................     {    
....................          // set DAC value
....................          dac_write(count);
20A2:  MOVLB  0F
20A3:  MOVF   64,W
20A4:  MOVLB  02
20A5:  MOVWF  19
....................          delay_us(100); // wait for the DAC to stabilize
20A6:  MOVLW  85
20A7:  MOVWF  77
20A8:  MOVLB  00
20A9:  DECFSZ 77,F
20AA:  GOTO   0A9
.................... 
....................          // read CIGS voltage and current
....................          set_adc_channel(CIGS_VOLT);       
20AB:  MOVLW  00
20AC:  MOVWF  78
20AD:  MOVLB  01
20AE:  MOVF   1D,W
20AF:  ANDLW  83
20B0:  IORWF  78,W
20B1:  MOVWF  1D
20B2:  MOVLW  0F
20B3:  MOVWF  78
20B4:  MOVF   1F,W
20B5:  ANDLW  F0
20B6:  IORWF  78,W
20B7:  MOVWF  1F
....................          delay_us(10); // wait for the ADC to stabilize
20B8:  MOVLW  0D
20B9:  MOVWF  77
20BA:  MOVLB  00
20BB:  DECFSZ 77,F
20BC:  GOTO   0BB
....................          data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
20BD:  BCF    03.0
20BE:  MOVLB  0F
20BF:  RLF    64,W
20C0:  MOVWF  68
20C1:  RLF    65,W
20C2:  MOVWF  69
20C3:  BCF    03.0
20C4:  RLF    68,W
20C5:  MOVWF  79
20C6:  RLF    69,W
20C7:  MOVWF  7A
20C8:  MOVF   79,W
20C9:  ADDLW  3A
20CA:  MOVWF  68
20CB:  MOVLW  20
20CC:  ADDWFC 7A,W
20CD:  MOVWF  69
20CE:  CLRF   6B
20CF:  CLRF   6A
20D0:  MOVLP  18
20D1:  MOVLB  00
20D2:  CALL   72C
20D3:  MOVLP  20
20D4:  MOVLB  0F
20D5:  MOVF   69,W
20D6:  MOVWF  05
20D7:  MOVF   68,W
20D8:  MOVWF  04
20D9:  MOVF   78,W
20DA:  MOVWF  00
20DB:  ADDFSR 01,FSR0
20DC:  MOVF   79,W
20DD:  MOVWF  00
20DE:  ADDFSR 3F,FSR0
....................          
....................          set_adc_channel(CIGS_CURR);
20DF:  MOVLW  04
20E0:  MOVWF  78
20E1:  MOVLB  01
20E2:  MOVF   1D,W
20E3:  ANDLW  83
20E4:  IORWF  78,W
20E5:  MOVWF  1D
20E6:  MOVLW  0F
20E7:  MOVWF  78
20E8:  MOVF   1F,W
20E9:  ANDLW  F0
20EA:  IORWF  78,W
20EB:  MOVWF  1F
....................          current = 0; // reset current value
20EC:  MOVLB  0F
20ED:  CLRF   63
20EE:  CLRF   62
20EF:  CLRF   61
20F0:  CLRF   60
....................          for(int k=0; k<10; k++)
20F1:  CLRF   66
20F2:  MOVLB  00
20F3:  MOVLB  0F
20F4:  MOVF   66,W
20F5:  SUBLW  09
20F6:  BTFSC  03.0
20F7:  GOTO   0FA
20F8:  MOVLB  00
20F9:  GOTO   116
20FA:  MOVLB  00
....................          {
....................                                              //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................                delay_us(10);
20FB:  MOVLW  0D
20FC:  MOVWF  77
20FD:  DECFSZ 77,F
20FE:  GOTO   0FD
....................                current = current + ad7490_read(AD7490_VIN0); 
20FF:  MOVLB  0F
2100:  CLRF   6B
2101:  CLRF   6A
2102:  MOVLP  18
2103:  MOVLB  00
2104:  CALL   72C
2105:  MOVLP  20
2106:  MOVF   79,W
2107:  MOVWF  7A
2108:  MOVF   78,W
2109:  MOVLB  0F
210A:  ADDWF  60,F
210B:  MOVF   7A,W
210C:  ADDWFC 61,F
210D:  MOVLW  00
210E:  ADDWFC 62,F
210F:  MOVLW  00
2110:  ADDWFC 63,F
2111:  MOVLB  00
2112:  MOVLB  0F
2113:  INCF   66,F
2114:  MOVLB  00
2115:  GOTO   0F3
....................          }    
....................          
....................          current = current / 10; // average the current value
2116:  BCF    03.1
2117:  MOVLB  0F
2118:  MOVF   63,W
2119:  MOVLB  11
211A:  MOVWF  63
211B:  MOVLB  0F
211C:  MOVF   62,W
211D:  MOVLB  11
211E:  MOVWF  62
211F:  MOVLB  0F
2120:  MOVF   61,W
2121:  MOVLB  11
2122:  MOVWF  61
2123:  MOVLB  0F
2124:  MOVF   60,W
2125:  MOVLB  11
2126:  MOVWF  60
2127:  CLRF   67
2128:  CLRF   66
2129:  CLRF   65
212A:  MOVLW  0A
212B:  MOVWF  64
212C:  MOVLP  08
212D:  MOVLB  00
212E:  CALL   32C
212F:  MOVLP  20
2130:  MOVF   7A,W
2131:  MOVLB  0F
2132:  MOVWF  63
2133:  MOVF   79,W
2134:  MOVWF  62
2135:  MOVF   78,W
2136:  MOVWF  61
2137:  MOVF   77,W
2138:  MOVWF  60
.................... 
....................          delay_us(10); // wait for the ADC to stabilize
2139:  MOVLW  0D
213A:  MOVWF  77
213B:  MOVLB  00
213C:  DECFSZ 77,F
213D:  GOTO   13C
....................          data_buffer[count*2+1] = current; // store the current value in the buffer
213E:  BCF    03.0
213F:  MOVLB  0F
2140:  RLF    64,W
2141:  MOVWF  68
2142:  RLF    65,W
2143:  MOVWF  69
2144:  MOVLW  01
2145:  ADDWF  68,F
2146:  MOVLW  00
2147:  ADDWFC 69,F
2148:  BCF    03.0
2149:  RLF    68,W
214A:  MOVWF  79
214B:  RLF    69,W
214C:  MOVWF  7A
214D:  MOVF   79,W
214E:  ADDLW  3A
214F:  MOVWF  04
2150:  MOVLW  20
2151:  ADDWFC 7A,W
2152:  MOVWF  05
2153:  MOVF   60,W
2154:  MOVWF  00
2155:  ADDFSR 01,FSR0
2156:  MOVF   61,W
2157:  MOVWF  00
2158:  ADDFSR 3F,FSR0
2159:  MOVLB  00
215A:  MOVLB  0F
215B:  INCF   64,F
215C:  BTFSC  03.2
215D:  INCF   65,F
215E:  MOVLB  00
215F:  GOTO   093
....................          //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................     }
.................... 
....................       fprintf(PC, "END SWEEP\r\n");
2160:  MOVLW  DF
2161:  MOVLB  03
2162:  MOVWF  11
2163:  MOVLW  02
2164:  MOVWF  12
2165:  MOVLP  00
2166:  MOVLB  00
2167:  CALL   749
2168:  MOVLP  20
....................       // read PD value
....................       set_adc_channel(PD);
2169:  MOVLW  00
216A:  MOVWF  78
216B:  MOVLB  01
216C:  MOVF   1D,W
216D:  ANDLW  83
216E:  IORWF  78,W
216F:  MOVWF  1D
2170:  MOVLW  0F
2171:  MOVWF  78
2172:  MOVF   1F,W
2173:  ANDLW  F0
2174:  IORWF  78,W
2175:  MOVWF  1F
....................       measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
2176:  BSF    1D.1
2177:  MOVLB  00
2178:  MOVLB  01
2179:  BTFSS  1D.1
217A:  GOTO   17D
217B:  MOVLB  00
217C:  GOTO   178
217D:  MOVLB  0C
217E:  CLRF   31
217F:  MOVLB  01
2180:  MOVF   1C,W
2181:  MOVLB  0C
2182:  MOVWF  30
.................... 
....................       convert_cigs_data(measurement_step);
2183:  MOVLB  0F
2184:  MOVF   5F,W
2185:  MOVWF  68
2186:  MOVLB  00
....................       //convert_header_data();    
....................       output_low(CONNECT_CIGS);
*
22F2:  MOVLB  01
22F3:  BCF    0E.0
22F4:  MOVLB  02
22F5:  BCF    0E.0
22F6:  MOVLB  00
22F7:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
0FBB:  MOVLW  1A
0FBC:  MOVLB  03
0FBD:  MOVWF  11
0FBE:  MOVLW  03
0FBF:  MOVWF  12
0FC0:  MOVLP  00
0FC1:  MOVLB  00
0FC2:  CALL   749
0FC3:  MOVLP  08
....................    flash_setting(mis_fm);
0FC4:  MOVLB  0D
0FC5:  MOVF   45,W
0FC6:  MOVLB  13
0FC7:  MOVWF  2C
0FC8:  MOVLB  0D
0FC9:  MOVF   44,W
0FCA:  MOVLB  13
0FCB:  MOVWF  2B
0FCC:  MOVLB  0D
0FCD:  MOVF   43,W
0FCE:  MOVLB  13
0FCF:  MOVWF  2A
0FD0:  MOVLB  0D
0FD1:  MOVF   42,W
0FD2:  MOVLB  13
0FD3:  MOVWF  29
0FD4:  MOVLB  00
0FD5:  CALL   7A7
....................    sector_erase(mis_fm, 0x00000000);
0FD6:  MOVLB  0D
0FD7:  MOVF   45,W
0FD8:  MOVLB  10
0FD9:  MOVWF  23
0FDA:  MOVLB  0D
0FDB:  MOVF   44,W
0FDC:  MOVLB  10
0FDD:  MOVWF  22
0FDE:  MOVLB  0D
0FDF:  MOVF   43,W
0FE0:  MOVLB  10
0FE1:  MOVWF  21
0FE2:  MOVLB  0D
0FE3:  MOVF   42,W
0FE4:  MOVLB  10
0FE5:  MOVWF  20
0FE6:  CLRF   27
0FE7:  CLRF   26
0FE8:  CLRF   25
0FE9:  CLRF   24
0FEA:  MOVLP  10
0FEB:  MOVLB  00
0FEC:  CALL   61C
0FED:  MOVLP  08
....................    fprintf(PC, "End Flash Erase All\r\n");
0FEE:  MOVLW  26
0FEF:  MOVLB  03
0FF0:  MOVWF  11
0FF1:  MOVLW  03
0FF2:  MOVWF  12
0FF3:  MOVLP  00
0FF4:  MOVLB  00
0FF5:  CALL   749
0FF6:  MOVLP  08
0FF7:  MOVLP  20
0FF8:  GOTO   383 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
*
1800:  MOVLW  31
1801:  MOVLB  03
1802:  MOVWF  11
1803:  MOVLW  03
1804:  MOVWF  12
1805:  MOVLP  00
1806:  MOVLB  00
1807:  CALL   749
1808:  MOVLP  18
....................    flash_setting(mis_fm);
1809:  MOVLB  0D
180A:  MOVF   45,W
180B:  MOVLB  13
180C:  MOVWF  2C
180D:  MOVLB  0D
180E:  MOVF   44,W
180F:  MOVLB  13
1810:  MOVWF  2B
1811:  MOVLB  0D
1812:  MOVF   43,W
1813:  MOVLB  13
1814:  MOVWF  2A
1815:  MOVLB  0D
1816:  MOVF   42,W
1817:  MOVLB  13
1818:  MOVWF  29
1819:  MOVLP  08
181A:  MOVLB  00
181B:  CALL   7A7
181C:  MOVLP  18
....................    sector_erase(mis_fm, 0x00000000);
181D:  MOVLB  0D
181E:  MOVF   45,W
181F:  MOVLB  10
1820:  MOVWF  23
1821:  MOVLB  0D
1822:  MOVF   44,W
1823:  MOVLB  10
1824:  MOVWF  22
1825:  MOVLB  0D
1826:  MOVF   43,W
1827:  MOVLB  10
1828:  MOVWF  21
1829:  MOVLB  0D
182A:  MOVF   42,W
182B:  MOVLB  10
182C:  MOVWF  20
182D:  CLRF   27
182E:  CLRF   26
182F:  CLRF   25
1830:  CLRF   24
1831:  MOVLP  10
1832:  MOVLB  00
1833:  CALL   61C
1834:  MOVLP  18
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
1835:  MOVLW  40
1836:  MOVLB  03
1837:  MOVWF  11
1838:  MOVLW  03
1839:  MOVWF  12
183A:  MOVLP  00
183B:  MOVLB  00
183C:  CALL   749
183D:  MOVLP  18
183E:  MOVLP  20
183F:  GOTO   38D (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
1840:  MOVLW  4E
1841:  MOVLB  03
1842:  MOVWF  11
1843:  MOVLW  03
1844:  MOVWF  12
1845:  MOVLP  00
1846:  MOVLB  00
1847:  CALL   749
1848:  MOVLP  18
....................    flash_setting(mis_fm);
1849:  MOVLB  0D
184A:  MOVF   45,W
184B:  MOVLB  13
184C:  MOVWF  2C
184D:  MOVLB  0D
184E:  MOVF   44,W
184F:  MOVLB  13
1850:  MOVWF  2B
1851:  MOVLB  0D
1852:  MOVF   43,W
1853:  MOVLB  13
1854:  MOVWF  2A
1855:  MOVLB  0D
1856:  MOVF   42,W
1857:  MOVLB  13
1858:  MOVWF  29
1859:  MOVLP  08
185A:  MOVLB  00
185B:  CALL   7A7
185C:  MOVLP  18
....................    sector_erase(mis_fm, 0x00000000);
185D:  MOVLB  0D
185E:  MOVF   45,W
185F:  MOVLB  10
1860:  MOVWF  23
1861:  MOVLB  0D
1862:  MOVF   44,W
1863:  MOVLB  10
1864:  MOVWF  22
1865:  MOVLB  0D
1866:  MOVF   43,W
1867:  MOVLB  10
1868:  MOVWF  21
1869:  MOVLB  0D
186A:  MOVF   42,W
186B:  MOVLB  10
186C:  MOVWF  20
186D:  CLRF   27
186E:  CLRF   26
186F:  CLRF   25
1870:  CLRF   24
1871:  MOVLP  10
1872:  MOVLB  00
1873:  CALL   61C
1874:  MOVLP  18
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
1875:  MOVLW  5C
1876:  MOVLB  03
1877:  MOVWF  11
1878:  MOVLW  03
1879:  MOVWF  12
187A:  MOVLP  00
187B:  MOVLB  00
187C:  CALL   749
187D:  MOVLP  18
187E:  MOVLP  20
187F:  GOTO   397 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
1880:  MOVLW  69
1881:  MOVLB  03
1882:  MOVWF  11
1883:  MOVLW  03
1884:  MOVWF  12
1885:  MOVLP  00
1886:  MOVLB  00
1887:  CALL   749
1888:  MOVLP  18
....................    sector_erase(mis_fm, 0x000000); // Erase the sector before writing
1889:  MOVLB  0D
188A:  MOVF   45,W
188B:  MOVLB  10
188C:  MOVWF  23
188D:  MOVLB  0D
188E:  MOVF   44,W
188F:  MOVLB  10
1890:  MOVWF  22
1891:  MOVLB  0D
1892:  MOVF   43,W
1893:  MOVLB  10
1894:  MOVWF  21
1895:  MOVLB  0D
1896:  MOVF   42,W
1897:  MOVLB  10
1898:  MOVWF  20
1899:  CLRF   27
189A:  CLRF   26
189B:  CLRF   25
189C:  CLRF   24
189D:  MOVLP  10
189E:  MOVLB  00
189F:  CALL   61C
18A0:  MOVLP  18
....................    delay_ms(100); // Wait for the erase operation to complete
18A1:  MOVLW  64
18A2:  MOVLB  13
18A3:  MOVWF  43
18A4:  MOVLP  08
18A5:  MOVLB  00
18A6:  CALL   73F
18A7:  MOVLP  18
....................    unsigned int32 write_address = 0x000000;
....................    int8 write_data[4] = {0x01, 0x02, 0x03, 0x04};
18A8:  MOVLB  0F
18A9:  CLRF   64
18AA:  CLRF   63
18AB:  CLRF   62
18AC:  CLRF   61
18AD:  MOVLW  01
18AE:  MOVWF  65
18AF:  MOVLW  02
18B0:  MOVWF  66
18B1:  MOVLW  03
18B2:  MOVWF  67
18B3:  MOVLW  04
18B4:  MOVWF  68
....................    write_data_bytes(mis_fm, write_address, write_data, 4);
18B5:  MOVLB  0D
18B6:  MOVF   45,W
18B7:  MOVLB  13
18B8:  MOVWF  2C
18B9:  MOVLB  0D
18BA:  MOVF   44,W
18BB:  MOVLB  13
18BC:  MOVWF  2B
18BD:  MOVLB  0D
18BE:  MOVF   43,W
18BF:  MOVLB  13
18C0:  MOVWF  2A
18C1:  MOVLB  0D
18C2:  MOVF   42,W
18C3:  MOVLB  13
18C4:  MOVWF  29
18C5:  MOVLB  0F
18C6:  MOVF   64,W
18C7:  MOVLB  13
18C8:  MOVWF  30
18C9:  MOVLB  0F
18CA:  MOVF   63,W
18CB:  MOVLB  13
18CC:  MOVWF  2F
18CD:  MOVLB  0F
18CE:  MOVF   62,W
18CF:  MOVLB  13
18D0:  MOVWF  2E
18D1:  MOVLB  0F
18D2:  MOVF   61,W
18D3:  MOVLB  13
18D4:  MOVWF  2D
18D5:  MOVLW  24
18D6:  MOVWF  32
18D7:  MOVLW  F5
18D8:  MOVWF  31
18D9:  CLRF   34
18DA:  MOVLW  04
18DB:  MOVWF  33
18DC:  MOVLP  10
18DD:  MOVLB  00
18DE:  CALL   000
18DF:  MOVLP  18
....................    fprintf(PC, "End Flash Write Demo\r\n");
18E0:  MOVLW  76
18E1:  MOVLB  03
18E2:  MOVWF  11
18E3:  MOVLW  03
18E4:  MOVWF  12
18E5:  MOVLP  00
18E6:  MOVLB  00
18E7:  CALL   749
18E8:  MOVLP  18
....................    int8 read_data[4];
....................    read_data_bytes(mis_fm, write_address, read_data, 4);
18E9:  MOVLB  0D
18EA:  MOVF   45,W
18EB:  MOVLB  13
18EC:  MOVWF  2C
18ED:  MOVLB  0D
18EE:  MOVF   44,W
18EF:  MOVLB  13
18F0:  MOVWF  2B
18F1:  MOVLB  0D
18F2:  MOVF   43,W
18F3:  MOVLB  13
18F4:  MOVWF  2A
18F5:  MOVLB  0D
18F6:  MOVF   42,W
18F7:  MOVLB  13
18F8:  MOVWF  29
18F9:  MOVLB  0F
18FA:  MOVF   64,W
18FB:  MOVLB  13
18FC:  MOVWF  30
18FD:  MOVLB  0F
18FE:  MOVF   63,W
18FF:  MOVLB  13
1900:  MOVWF  2F
1901:  MOVLB  0F
1902:  MOVF   62,W
1903:  MOVLB  13
1904:  MOVWF  2E
1905:  MOVLB  0F
1906:  MOVF   61,W
1907:  MOVLB  13
1908:  MOVWF  2D
1909:  MOVLW  24
190A:  MOVWF  32
190B:  MOVLW  F9
190C:  MOVWF  31
190D:  CLRF   36
190E:  CLRF   35
190F:  CLRF   34
1910:  MOVLW  04
1911:  MOVWF  33
1912:  MOVLP  08
1913:  MOVLB  00
1914:  CALL   1D4
1915:  MOVLP  18
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
1916:  MOVLW  82
1917:  MOVLB  03
1918:  MOVWF  11
1919:  MOVLW  03
191A:  MOVWF  12
191B:  BCF    03.0
191C:  MOVLW  0B
191D:  MOVLB  11
191E:  MOVWF  51
191F:  MOVLP  08
1920:  MOVLB  00
1921:  CALL   2C9
1922:  MOVLP  18
1923:  MOVLB  0F
1924:  MOVF   69,W
1925:  MOVLB  11
1926:  MOVWF  51
1927:  MOVLW  37
1928:  MOVWF  52
1929:  MOVLP  08
192A:  MOVLB  00
192B:  CALL   592
192C:  MOVLP  18
192D:  MOVLW  20
192E:  MOVLB  13
192F:  MOVWF  2E
1930:  MOVLP  00
1931:  MOVLB  00
1932:  CALL   721
1933:  MOVLP  18
1934:  MOVLB  0F
1935:  MOVF   6A,W
1936:  MOVLB  11
1937:  MOVWF  51
1938:  MOVLW  37
1939:  MOVWF  52
193A:  MOVLP  08
193B:  MOVLB  00
193C:  CALL   592
193D:  MOVLP  18
193E:  MOVLW  20
193F:  MOVLB  13
1940:  MOVWF  2E
1941:  MOVLP  00
1942:  MOVLB  00
1943:  CALL   721
1944:  MOVLP  18
1945:  MOVLB  0F
1946:  MOVF   6B,W
1947:  MOVLB  11
1948:  MOVWF  51
1949:  MOVLW  37
194A:  MOVWF  52
194B:  MOVLP  08
194C:  MOVLB  00
194D:  CALL   592
194E:  MOVLP  18
194F:  MOVLW  20
1950:  MOVLB  13
1951:  MOVWF  2E
1952:  MOVLP  00
1953:  MOVLB  00
1954:  CALL   721
1955:  MOVLP  18
1956:  MOVLB  0F
1957:  MOVF   6C,W
1958:  MOVLB  11
1959:  MOVWF  51
195A:  MOVLW  37
195B:  MOVWF  52
195C:  MOVLP  08
195D:  MOVLB  00
195E:  CALL   592
195F:  MOVLP  18
1960:  MOVLW  0D
1961:  MOVLB  13
1962:  MOVWF  2E
1963:  MOVLP  00
1964:  MOVLB  00
1965:  CALL   721
1966:  MOVLP  18
1967:  MOVLW  0A
1968:  MOVLB  13
1969:  MOVWF  2E
196A:  MOVLP  00
196B:  MOVLB  00
196C:  CALL   721
196D:  MOVLP  18
....................    write_data[0] = 0x05; // Modify the data to be written
196E:  MOVLW  05
196F:  MOVLB  0F
1970:  MOVWF  65
....................    write_data[1] = 0x06;
1971:  MOVLW  06
1972:  MOVWF  66
....................    write_data[2] = 0x07;
1973:  MOVLW  07
1974:  MOVWF  67
....................    write_data[3] = 0x08;
1975:  MOVLW  08
1976:  MOVWF  68
....................    write_data_bytes(mis_fm, write_address+4, write_data, 4);
1977:  MOVLW  04
1978:  ADDWF  61,W
1979:  MOVLB  10
197A:  MOVWF  20
197B:  MOVLW  00
197C:  MOVLB  0F
197D:  ADDWFC 62,W
197E:  MOVLB  10
197F:  MOVWF  21
1980:  MOVLW  00
1981:  MOVLB  0F
1982:  ADDWFC 63,W
1983:  MOVLB  10
1984:  MOVWF  22
1985:  MOVLW  00
1986:  MOVLB  0F
1987:  ADDWFC 64,W
1988:  MOVLB  10
1989:  MOVWF  23
198A:  MOVLB  0D
198B:  MOVF   45,W
198C:  MOVLB  13
198D:  MOVWF  2C
198E:  MOVLB  0D
198F:  MOVF   44,W
1990:  MOVLB  13
1991:  MOVWF  2B
1992:  MOVLB  0D
1993:  MOVF   43,W
1994:  MOVLB  13
1995:  MOVWF  2A
1996:  MOVLB  0D
1997:  MOVF   42,W
1998:  MOVLB  13
1999:  MOVWF  29
199A:  MOVLB  10
199B:  MOVF   23,W
199C:  MOVLB  13
199D:  MOVWF  30
199E:  MOVLB  10
199F:  MOVF   22,W
19A0:  MOVLB  13
19A1:  MOVWF  2F
19A2:  MOVLB  10
19A3:  MOVF   21,W
19A4:  MOVLB  13
19A5:  MOVWF  2E
19A6:  MOVLB  10
19A7:  MOVF   20,W
19A8:  MOVLB  13
19A9:  MOVWF  2D
19AA:  MOVLW  24
19AB:  MOVWF  32
19AC:  MOVLW  F5
19AD:  MOVWF  31
19AE:  CLRF   34
19AF:  MOVLW  04
19B0:  MOVWF  33
19B1:  MOVLP  10
19B2:  MOVLB  00
19B3:  CALL   000
19B4:  MOVLP  18
....................    read_data_bytes(mis_fm, write_address+4, read_data, 4);
19B5:  MOVLW  04
19B6:  MOVLB  0F
19B7:  ADDWF  61,W
19B8:  MOVLB  10
19B9:  MOVWF  20
19BA:  MOVLW  00
19BB:  MOVLB  0F
19BC:  ADDWFC 62,W
19BD:  MOVLB  10
19BE:  MOVWF  21
19BF:  MOVLW  00
19C0:  MOVLB  0F
19C1:  ADDWFC 63,W
19C2:  MOVLB  10
19C3:  MOVWF  22
19C4:  MOVLW  00
19C5:  MOVLB  0F
19C6:  ADDWFC 64,W
19C7:  MOVLB  10
19C8:  MOVWF  23
19C9:  MOVLB  0D
19CA:  MOVF   45,W
19CB:  MOVLB  13
19CC:  MOVWF  2C
19CD:  MOVLB  0D
19CE:  MOVF   44,W
19CF:  MOVLB  13
19D0:  MOVWF  2B
19D1:  MOVLB  0D
19D2:  MOVF   43,W
19D3:  MOVLB  13
19D4:  MOVWF  2A
19D5:  MOVLB  0D
19D6:  MOVF   42,W
19D7:  MOVLB  13
19D8:  MOVWF  29
19D9:  MOVLB  10
19DA:  MOVF   23,W
19DB:  MOVLB  13
19DC:  MOVWF  30
19DD:  MOVLB  10
19DE:  MOVF   22,W
19DF:  MOVLB  13
19E0:  MOVWF  2F
19E1:  MOVLB  10
19E2:  MOVF   21,W
19E3:  MOVLB  13
19E4:  MOVWF  2E
19E5:  MOVLB  10
19E6:  MOVF   20,W
19E7:  MOVLB  13
19E8:  MOVWF  2D
19E9:  MOVLW  24
19EA:  MOVWF  32
19EB:  MOVLW  F9
19EC:  MOVWF  31
19ED:  CLRF   36
19EE:  CLRF   35
19EF:  CLRF   34
19F0:  MOVLW  04
19F1:  MOVWF  33
19F2:  MOVLP  08
19F3:  MOVLB  00
19F4:  CALL   1D4
19F5:  MOVLP  18
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
19F6:  MOVLW  93
19F7:  MOVLB  03
19F8:  MOVWF  11
19F9:  MOVLW  03
19FA:  MOVWF  12
19FB:  BCF    03.0
19FC:  MOVLW  0B
19FD:  MOVLB  11
19FE:  MOVWF  51
19FF:  MOVLP  08
1A00:  MOVLB  00
1A01:  CALL   2C9
1A02:  MOVLP  18
1A03:  MOVLB  0F
1A04:  MOVF   69,W
1A05:  MOVLB  11
1A06:  MOVWF  51
1A07:  MOVLW  37
1A08:  MOVWF  52
1A09:  MOVLP  08
1A0A:  MOVLB  00
1A0B:  CALL   592
1A0C:  MOVLP  18
1A0D:  MOVLW  20
1A0E:  MOVLB  13
1A0F:  MOVWF  2E
1A10:  MOVLP  00
1A11:  MOVLB  00
1A12:  CALL   721
1A13:  MOVLP  18
1A14:  MOVLB  0F
1A15:  MOVF   6A,W
1A16:  MOVLB  11
1A17:  MOVWF  51
1A18:  MOVLW  37
1A19:  MOVWF  52
1A1A:  MOVLP  08
1A1B:  MOVLB  00
1A1C:  CALL   592
1A1D:  MOVLP  18
1A1E:  MOVLW  20
1A1F:  MOVLB  13
1A20:  MOVWF  2E
1A21:  MOVLP  00
1A22:  MOVLB  00
1A23:  CALL   721
1A24:  MOVLP  18
1A25:  MOVLB  0F
1A26:  MOVF   6B,W
1A27:  MOVLB  11
1A28:  MOVWF  51
1A29:  MOVLW  37
1A2A:  MOVWF  52
1A2B:  MOVLP  08
1A2C:  MOVLB  00
1A2D:  CALL   592
1A2E:  MOVLP  18
1A2F:  MOVLW  20
1A30:  MOVLB  13
1A31:  MOVWF  2E
1A32:  MOVLP  00
1A33:  MOVLB  00
1A34:  CALL   721
1A35:  MOVLP  18
1A36:  MOVLB  0F
1A37:  MOVF   6C,W
1A38:  MOVLB  11
1A39:  MOVWF  51
1A3A:  MOVLW  37
1A3B:  MOVWF  52
1A3C:  MOVLP  08
1A3D:  MOVLB  00
1A3E:  CALL   592
1A3F:  MOVLP  18
1A40:  MOVLW  0D
1A41:  MOVLB  13
1A42:  MOVWF  2E
1A43:  MOVLP  00
1A44:  MOVLB  00
1A45:  CALL   721
1A46:  MOVLP  18
1A47:  MOVLW  0A
1A48:  MOVLB  13
1A49:  MOVWF  2E
1A4A:  MOVLP  00
1A4B:  MOVLB  00
1A4C:  CALL   721
1A4D:  MOVLP  18
....................    fprintf(PC, "End Flash Write Demo\r\n");
1A4E:  MOVLW  A4
1A4F:  MOVLB  03
1A50:  MOVWF  11
1A51:  MOVLW  03
1A52:  MOVWF  12
1A53:  MOVLP  00
1A54:  MOVLB  00
1A55:  CALL   749
1A56:  MOVLP  18
1A57:  MOVLP  20
1A58:  GOTO   3A1 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
1A59:  MOVLW  B0
1A5A:  MOVLB  03
1A5B:  MOVWF  11
1A5C:  MOVLW  03
1A5D:  MOVWF  12
1A5E:  MOVLP  00
1A5F:  MOVLB  00
1A60:  CALL   749
1A61:  MOVLP  18
....................    flash_setting(mis_fm);
1A62:  MOVLB  0D
1A63:  MOVF   45,W
1A64:  MOVLB  13
1A65:  MOVWF  2C
1A66:  MOVLB  0D
1A67:  MOVF   44,W
1A68:  MOVLB  13
1A69:  MOVWF  2B
1A6A:  MOVLB  0D
1A6B:  MOVF   43,W
1A6C:  MOVLB  13
1A6D:  MOVWF  2A
1A6E:  MOVLB  0D
1A6F:  MOVF   42,W
1A70:  MOVLB  13
1A71:  MOVWF  29
1A72:  MOVLP  08
1A73:  MOVLB  00
1A74:  CALL   7A7
1A75:  MOVLP  18
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
1A76:  MOVLB  0F
1A77:  CLRF   64
1A78:  CLRF   63
1A79:  CLRF   62
1A7A:  CLRF   61
1A7B:  MOVLW  01
1A7C:  MOVWF  65
1A7D:  MOVLW  02
1A7E:  MOVWF  66
1A7F:  MOVLW  03
1A80:  MOVWF  67
1A81:  MOVLW  04
1A82:  MOVWF  68
1A83:  CLRF   69
1A84:  CLRF   6A
1A85:  CLRF   6B
1A86:  CLRF   6C
1A87:  CLRF   6D
1A88:  CLRF   6E
1A89:  CLRF   6F
1A8A:  MOVLB  10
1A8B:  CLRF   20
1A8C:  CLRF   21
1A8D:  CLRF   22
1A8E:  CLRF   23
1A8F:  CLRF   24
1A90:  CLRF   25
1A91:  CLRF   26
1A92:  CLRF   27
1A93:  CLRF   28
1A94:  CLRF   29
1A95:  CLRF   2A
1A96:  CLRF   2B
1A97:  CLRF   2C
1A98:  CLRF   2D
1A99:  CLRF   2E
1A9A:  CLRF   2F
1A9B:  CLRF   30
1A9C:  CLRF   31
1A9D:  CLRF   32
1A9E:  CLRF   33
1A9F:  CLRF   34
1AA0:  CLRF   35
1AA1:  CLRF   36
1AA2:  CLRF   37
1AA3:  CLRF   38
1AA4:  CLRF   39
1AA5:  CLRF   3A
1AA6:  CLRF   3B
1AA7:  CLRF   3C
1AA8:  CLRF   3D
1AA9:  CLRF   3E
1AAA:  CLRF   3F
1AAB:  CLRF   40
1AAC:  CLRF   41
1AAD:  CLRF   42
1AAE:  CLRF   43
1AAF:  CLRF   44
1AB0:  CLRF   45
1AB1:  CLRF   46
1AB2:  CLRF   47
1AB3:  CLRF   48
1AB4:  CLRF   49
1AB5:  CLRF   4A
1AB6:  CLRF   4B
1AB7:  CLRF   4C
1AB8:  CLRF   4D
1AB9:  CLRF   4E
1ABA:  CLRF   4F
1ABB:  CLRF   50
1ABC:  CLRF   51
1ABD:  CLRF   52
1ABE:  CLRF   53
1ABF:  CLRF   54
1AC0:  CLRF   55
1AC1:  CLRF   56
1AC2:  CLRF   57
1AC3:  CLRF   58
1AC4:  CLRF   59
1AC5:  CLRF   5A
1AC6:  CLRF   5B
1AC7:  CLRF   5C
1AC8:  CLRF   5D
1AC9:  CLRF   5E
1ACA:  CLRF   5F
1ACB:  CLRF   60
1ACC:  CLRF   61
1ACD:  CLRF   62
1ACE:  CLRF   63
1ACF:  CLRF   64
1AD0:  CLRF   65
1AD1:  CLRF   66
1AD2:  CLRF   67
1AD3:  CLRF   68
1AD4:  CLRF   69
1AD5:  CLRF   6A
1AD6:  CLRF   6B
1AD7:  CLRF   6C
1AD8:  CLRF   6D
1AD9:  CLRF   6E
1ADA:  CLRF   6F
1ADB:  MOVLB  11
1ADC:  CLRF   20
1ADD:  CLRF   21
1ADE:  CLRF   22
1ADF:  CLRF   23
1AE0:  CLRF   24
1AE1:  CLRF   25
1AE2:  CLRF   26
1AE3:  CLRF   27
1AE4:  CLRF   28
1AE5:  CLRF   29
1AE6:  CLRF   2A
1AE7:  CLRF   2B
1AE8:  CLRF   2C
1AE9:  CLRF   2D
1AEA:  CLRF   2E
1AEB:  CLRF   2F
1AEC:  CLRF   30
1AED:  CLRF   31
1AEE:  CLRF   32
1AEF:  CLRF   33
1AF0:  CLRF   34
1AF1:  CLRF   35
1AF2:  CLRF   36
1AF3:  CLRF   37
1AF4:  CLRF   38
1AF5:  CLRF   39
1AF6:  CLRF   3A
1AF7:  CLRF   3B
1AF8:  CLRF   3C
1AF9:  CLRF   3D
1AFA:  CLRF   3E
1AFB:  CLRF   3F
1AFC:  CLRF   40
1AFD:  CLRF   41
1AFE:  CLRF   42
1AFF:  CLRF   43
1B00:  CLRF   44
1B01:  CLRF   45
1B02:  CLRF   46
1B03:  CLRF   47
1B04:  CLRF   48
1B05:  CLRF   49
1B06:  CLRF   4A
1B07:  CLRF   4B
1B08:  CLRF   4C
1B09:  CLRF   4D
1B0A:  CLRF   4E
1B0B:  CLRF   4F
1B0C:  CLRF   50
1B0D:  CLRF   51
1B0E:  CLRF   52
1B0F:  CLRF   53
1B10:  CLRF   54
1B11:  CLRF   55
1B12:  CLRF   56
1B13:  CLRF   57
1B14:  CLRF   58
1B15:  CLRF   59
1B16:  CLRF   5A
1B17:  CLRF   5B
1B18:  CLRF   5C
1B19:  CLRF   5D
1B1A:  CLRF   5E
1B1B:  CLRF   5F
1B1C:  CLRF   60
1B1D:  CLRF   61
1B1E:  CLRF   62
1B1F:  CLRF   63
1B20:  CLRF   64
1B21:  CLRF   65
1B22:  CLRF   66
1B23:  CLRF   67
1B24:  CLRF   68
1B25:  CLRF   69
1B26:  CLRF   6A
1B27:  CLRF   6B
1B28:  CLRF   6C
1B29:  CLRF   6D
1B2A:  CLRF   6E
1B2B:  CLRF   6F
1B2C:  MOVLB  12
1B2D:  CLRF   20
1B2E:  CLRF   21
1B2F:  CLRF   22
1B30:  CLRF   23
1B31:  CLRF   24
1B32:  CLRF   25
1B33:  CLRF   26
1B34:  CLRF   27
1B35:  CLRF   28
1B36:  CLRF   29
1B37:  CLRF   2A
1B38:  CLRF   2B
1B39:  CLRF   2C
1B3A:  CLRF   2D
1B3B:  CLRF   2E
1B3C:  CLRF   2F
1B3D:  CLRF   30
1B3E:  CLRF   31
1B3F:  CLRF   32
1B40:  CLRF   33
1B41:  CLRF   34
1B42:  CLRF   35
1B43:  CLRF   36
1B44:  CLRF   37
1B45:  CLRF   38
1B46:  CLRF   39
1B47:  CLRF   3A
1B48:  CLRF   3B
1B49:  CLRF   3C
1B4A:  CLRF   3D
1B4B:  CLRF   3E
1B4C:  CLRF   3F
1B4D:  CLRF   40
1B4E:  CLRF   41
1B4F:  CLRF   42
1B50:  CLRF   43
1B51:  CLRF   44
1B52:  CLRF   45
1B53:  CLRF   46
1B54:  CLRF   47
1B55:  CLRF   48
1B56:  CLRF   49
1B57:  CLRF   4A
1B58:  CLRF   4B
1B59:  CLRF   4C
1B5A:  CLRF   4D
1B5B:  CLRF   4E
1B5C:  CLRF   4F
1B5D:  CLRF   50
1B5E:  CLRF   51
1B5F:  CLRF   52
1B60:  CLRF   53
1B61:  CLRF   54
1B62:  CLRF   55
1B63:  CLRF   56
1B64:  CLRF   57
1B65:  CLRF   58
1B66:  CLRF   59
1B67:  CLRF   5A
1B68:  CLRF   5B
1B69:  CLRF   5C
1B6A:  CLRF   5D
1B6B:  CLRF   5E
1B6C:  CLRF   5F
1B6D:  CLRF   60
1B6E:  CLRF   61
1B6F:  CLRF   62
1B70:  CLRF   63
1B71:  CLRF   64
1B72:  CLRF   65
1B73:  CLRF   66
1B74:  CLRF   67
1B75:  CLRF   68
1B76:  CLRF   69
1B77:  CLRF   6A
1B78:  CLRF   6B
1B79:  CLRF   6C
1B7A:  CLRF   6D
1B7B:  CLRF   6E
1B7C:  CLRF   6F
1B7D:  MOVLB  13
1B7E:  CLRF   20
1B7F:  CLRF   21
1B80:  CLRF   22
1B81:  CLRF   23
1B82:  CLRF   24
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
1B83:  MOVLB  0D
1B84:  MOVF   45,W
1B85:  MOVLB  13
1B86:  MOVWF  2C
1B87:  MOVLB  0D
1B88:  MOVF   44,W
1B89:  MOVLB  13
1B8A:  MOVWF  2B
1B8B:  MOVLB  0D
1B8C:  MOVF   43,W
1B8D:  MOVLB  13
1B8E:  MOVWF  2A
1B8F:  MOVLB  0D
1B90:  MOVF   42,W
1B91:  MOVLB  13
1B92:  MOVWF  29
1B93:  MOVLB  0F
1B94:  MOVF   64,W
1B95:  MOVLB  13
1B96:  MOVWF  30
1B97:  MOVLB  0F
1B98:  MOVF   63,W
1B99:  MOVLB  13
1B9A:  MOVWF  2F
1B9B:  MOVLB  0F
1B9C:  MOVF   62,W
1B9D:  MOVLB  13
1B9E:  MOVWF  2E
1B9F:  MOVLB  0F
1BA0:  MOVF   61,W
1BA1:  MOVLB  13
1BA2:  MOVWF  2D
1BA3:  MOVLW  24
1BA4:  MOVWF  32
1BA5:  MOVLW  F5
1BA6:  MOVWF  31
1BA7:  MOVLW  01
1BA8:  MOVWF  34
1BA9:  CLRF   33
1BAA:  MOVLP  10
1BAB:  MOVLB  00
1BAC:  CALL   000
1BAD:  MOVLP  18
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
1BAE:  MOVLW  C3
1BAF:  MOVLB  03
1BB0:  MOVWF  11
1BB1:  MOVLW  03
1BB2:  MOVWF  12
1BB3:  MOVLP  00
1BB4:  MOVLB  00
1BB5:  CALL   749
1BB6:  MOVLP  18
1BB7:  MOVLP  20
1BB8:  GOTO   3AB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
1BB9:  MOVLW  D5
1BBA:  MOVLB  03
1BBB:  MOVWF  11
1BBC:  MOVLW  03
1BBD:  MOVWF  12
1BBE:  MOVLP  00
1BBF:  MOVLB  00
1BC0:  CALL   749
1BC1:  MOVLP  18
....................    FLASH_PARAM flash_param = {0};
1BC2:  MOVLB  0F
1BC3:  CLRF   61
1BC4:  CLRF   62
1BC5:  CLRF   63
1BC6:  CLRF   64
1BC7:  CLRF   65
1BC8:  CLRF   66
1BC9:  CLRF   67
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = parameter[0];
1BCA:  MOVF   5F,W
1BCB:  MOVWF  04
1BCC:  MOVF   60,W
1BCD:  MOVWF  05
1BCE:  ADDFSR 00,FSR0
1BCF:  MOVF   00,W
1BD0:  MOVWF  61
....................    flash_param.readaddress = 
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
1BD1:  MOVF   5F,W
1BD2:  MOVWF  04
1BD3:  MOVF   60,W
1BD4:  MOVWF  05
1BD5:  ADDFSR 01,FSR0
1BD6:  MOVF   00,W
1BD7:  MOVLB  10
1BD8:  CLRF   5D
1BD9:  CLRF   5C
1BDA:  CLRF   5B
1BDB:  MOVWF  5A
1BDC:  MOVF   5A,W
1BDD:  MOVWF  5D
1BDE:  CLRF   5A
1BDF:  CLRF   5B
1BE0:  CLRF   5C
1BE1:  MOVLB  0F
1BE2:  MOVF   5F,W
1BE3:  MOVWF  04
1BE4:  MOVF   60,W
1BE5:  MOVWF  05
1BE6:  ADDFSR 02,FSR0
1BE7:  MOVF   00,W
1BE8:  MOVLB  10
1BE9:  CLRF   62
1BEA:  CLRF   61
1BEB:  CLRF   60
1BEC:  MOVWF  5F
1BED:  MOVF   60,W
1BEE:  MOVWF  7A
1BEF:  MOVF   5F,W
1BF0:  MOVWF  79
1BF1:  CLRF   77
1BF2:  CLRF   78
1BF3:  MOVF   77,W
1BF4:  IORWF  5A,F
1BF5:  MOVF   78,W
1BF6:  IORWF  5B,F
1BF7:  MOVF   79,W
1BF8:  IORWF  5C,F
1BF9:  MOVF   7A,W
1BFA:  IORWF  5D,F
1BFB:  MOVLB  0F
1BFC:  MOVF   5F,W
1BFD:  MOVWF  04
1BFE:  MOVF   60,W
1BFF:  MOVWF  05
1C00:  ADDFSR 03,FSR0
1C01:  MOVF   00,W
1C02:  MOVLB  10
1C03:  CLRF   62
1C04:  CLRF   61
1C05:  CLRF   60
1C06:  MOVWF  5F
1C07:  MOVF   61,W
1C08:  MOVWF  7A
1C09:  MOVF   60,W
1C0A:  MOVWF  79
1C0B:  MOVF   5F,W
1C0C:  MOVWF  78
1C0D:  CLRF   77
1C0E:  MOVF   77,W
1C0F:  IORWF  5A,F
1C10:  MOVF   78,W
1C11:  IORWF  5B,F
1C12:  MOVF   79,W
1C13:  IORWF  5C,F
1C14:  MOVF   7A,W
1C15:  IORWF  5D,F
1C16:  MOVLB  0F
1C17:  MOVF   5F,W
1C18:  MOVWF  04
1C19:  MOVF   60,W
1C1A:  MOVWF  05
1C1B:  ADDFSR 04,FSR0
1C1C:  MOVF   00,W
1C1D:  MOVWF  77
1C1E:  CLRF   78
1C1F:  CLRF   79
1C20:  CLRF   7A
1C21:  MOVF   77,W
1C22:  MOVLB  10
1C23:  IORWF  5A,W
1C24:  MOVLB  0F
1C25:  MOVWF  64
1C26:  MOVF   78,W
1C27:  MOVLB  10
1C28:  IORWF  5B,W
1C29:  MOVLB  0F
1C2A:  MOVWF  65
1C2B:  MOVF   79,W
1C2C:  MOVLB  10
1C2D:  IORWF  5C,W
1C2E:  MOVLB  0F
1C2F:  MOVWF  66
1C30:  MOVF   7A,W
1C31:  MOVLB  10
1C32:  IORWF  5D,W
1C33:  MOVLB  0F
1C34:  MOVWF  67
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)parameter[7] << 8) |
....................     ((unsigned int16)parameter[8]);
1C35:  MOVF   5F,W
1C36:  MOVWF  04
1C37:  MOVF   60,W
1C38:  MOVWF  05
1C39:  ADDFSR 07,FSR0
1C3A:  MOVF   00,W
1C3B:  MOVLB  10
1C3C:  CLRF   5B
1C3D:  MOVWF  5A
1C3E:  MOVF   5A,W
1C3F:  MOVWF  5B
1C40:  CLRF   5A
1C41:  MOVLB  0F
1C42:  MOVF   5F,W
1C43:  MOVWF  04
1C44:  MOVF   60,W
1C45:  MOVWF  05
1C46:  ADDFSR 08,FSR0
1C47:  MOVF   00,W
1C48:  CLRF   7A
1C49:  MOVLB  10
1C4A:  IORWF  5A,W
1C4B:  MOVLB  0F
1C4C:  MOVWF  62
1C4D:  MOVF   7A,W
1C4E:  MOVLB  10
1C4F:  IORWF  5B,W
1C50:  MOVLB  0F
1C51:  MOVWF  63
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
1C52:  MOVLW  DF
1C53:  MOVLB  03
1C54:  MOVWF  11
1C55:  MOVLW  03
1C56:  MOVWF  12
1C57:  BCF    03.0
1C58:  MOVLW  0C
1C59:  MOVLB  11
1C5A:  MOVWF  51
1C5B:  MOVLP  08
1C5C:  MOVLB  00
1C5D:  CALL   2C9
1C5E:  MOVLP  18
1C5F:  MOVLB  0F
1C60:  MOVF   61,W
1C61:  MOVLB  11
1C62:  MOVWF  51
1C63:  MOVLW  37
1C64:  MOVWF  52
1C65:  MOVLP  08
1C66:  MOVLB  00
1C67:  CALL   592
1C68:  MOVLP  18
1C69:  MOVLW  0D
1C6A:  MOVLB  13
1C6B:  MOVWF  2E
1C6C:  MOVLP  00
1C6D:  MOVLB  00
1C6E:  CALL   721
1C6F:  MOVLP  18
1C70:  MOVLW  0A
1C71:  MOVLB  13
1C72:  MOVWF  2E
1C73:  MOVLP  00
1C74:  MOVLB  00
1C75:  CALL   721
1C76:  MOVLP  18
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
1C77:  MOVLW  E9
1C78:  MOVLB  03
1C79:  MOVWF  11
1C7A:  MOVLW  03
1C7B:  MOVWF  12
1C7C:  BCF    03.0
1C7D:  MOVLW  0E
1C7E:  MOVLB  11
1C7F:  MOVWF  51
1C80:  MOVLP  08
1C81:  MOVLB  00
1C82:  CALL   2C9
1C83:  MOVLP  18
1C84:  MOVLB  0F
1C85:  MOVF   67,W
1C86:  MOVLB  11
1C87:  MOVWF  51
1C88:  MOVLW  37
1C89:  MOVWF  52
1C8A:  MOVLP  08
1C8B:  MOVLB  00
1C8C:  CALL   592
1C8D:  MOVLP  18
1C8E:  MOVLB  0F
1C8F:  MOVF   66,W
1C90:  MOVLB  11
1C91:  MOVWF  51
1C92:  MOVLW  37
1C93:  MOVWF  52
1C94:  MOVLP  08
1C95:  MOVLB  00
1C96:  CALL   592
1C97:  MOVLP  18
1C98:  MOVLB  0F
1C99:  MOVF   65,W
1C9A:  MOVLB  11
1C9B:  MOVWF  51
1C9C:  MOVLW  37
1C9D:  MOVWF  52
1C9E:  MOVLP  08
1C9F:  MOVLB  00
1CA0:  CALL   592
1CA1:  MOVLP  18
1CA2:  MOVLB  0F
1CA3:  MOVF   64,W
1CA4:  MOVLB  11
1CA5:  MOVWF  51
1CA6:  MOVLW  37
1CA7:  MOVWF  52
1CA8:  MOVLP  08
1CA9:  MOVLB  00
1CAA:  CALL   592
1CAB:  MOVLP  18
1CAC:  MOVLW  0D
1CAD:  MOVLB  13
1CAE:  MOVWF  2E
1CAF:  MOVLP  00
1CB0:  MOVLB  00
1CB1:  CALL   721
1CB2:  MOVLP  18
1CB3:  MOVLW  0A
1CB4:  MOVLB  13
1CB5:  MOVWF  2E
1CB6:  MOVLP  00
1CB7:  MOVLB  00
1CB8:  CALL   721
1CB9:  MOVLP  18
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
1CBA:  MOVLW  F4
1CBB:  MOVLB  03
1CBC:  MOVWF  11
1CBD:  MOVLW  03
1CBE:  MOVWF  12
1CBF:  BCF    03.0
1CC0:  MOVLW  0E
1CC1:  MOVLB  11
1CC2:  MOVWF  51
1CC3:  MOVLP  08
1CC4:  MOVLB  00
1CC5:  CALL   2C9
1CC6:  MOVLP  18
1CC7:  MOVLB  0F
1CC8:  MOVF   63,W
1CC9:  MOVLB  11
1CCA:  MOVWF  51
1CCB:  MOVLW  37
1CCC:  MOVWF  52
1CCD:  MOVLP  08
1CCE:  MOVLB  00
1CCF:  CALL   592
1CD0:  MOVLP  18
1CD1:  MOVLB  0F
1CD2:  MOVF   62,W
1CD3:  MOVLB  11
1CD4:  MOVWF  51
1CD5:  MOVLW  37
1CD6:  MOVWF  52
1CD7:  MOVLP  08
1CD8:  MOVLB  00
1CD9:  CALL   592
1CDA:  MOVLP  18
1CDB:  MOVLW  0D
1CDC:  MOVLB  13
1CDD:  MOVWF  2E
1CDE:  MOVLP  00
1CDF:  MOVLB  00
1CE0:  CALL   721
1CE1:  MOVLP  18
1CE2:  MOVLW  0A
1CE3:  MOVLB  13
1CE4:  MOVWF  2E
1CE5:  MOVLP  00
1CE6:  MOVLB  00
1CE7:  CALL   721
1CE8:  MOVLP  18
....................    
....................    piclog_make(flash_param.id, 0x00);
1CE9:  MOVLB  0F
1CEA:  MOVF   61,W
1CEB:  MOVLB  10
1CEC:  MOVWF  5A
1CED:  CLRF   5B
1CEE:  MOVLP  10
1CEF:  MOVLB  00
1CF0:  CALL   1C2
1CF1:  MOVLP  18
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE];
....................    fprintf(PC, "READ DATA\r\n");
1CF2:  MOVLW  FF
1CF3:  MOVLB  03
1CF4:  MOVWF  11
1CF5:  MOVLW  03
1CF6:  MOVWF  12
1CF7:  MOVLP  00
1CF8:  MOVLB  00
1CF9:  CALL   749
1CFA:  MOVLP  18
....................    for (unsigned int8 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
1CFB:  MOVLB  10
1CFC:  CLRF   58
1CFD:  MOVLB  00
1CFE:  MOVLB  0F
1CFF:  MOVF   63,F
1D00:  BTFSC  03.2
1D01:  GOTO   504
1D02:  MOVLB  00
1D03:  GOTO   50E
1D04:  MOVLB  00
1D05:  MOVLB  0F
1D06:  MOVF   62,W
1D07:  MOVLB  10
1D08:  SUBWF  58,W
1D09:  BTFSS  03.0
1D0A:  GOTO   50D
1D0B:  MOVLB  00
1D0C:  GOTO   591
1D0D:  MOVLB  00
....................       read_data_bytes(mis_fm,flash_param.readaddress + packetcount * PACKET_SIZE, readdata, PACKET_SIZE);
1D0E:  MOVLB  10
1D0F:  SWAPF  58,W
1D10:  MOVWF  77
1D11:  RLF    77,F
1D12:  RLF    77,F
1D13:  MOVLW  C0
1D14:  ANDWF  77,F
1D15:  MOVF   77,W
1D16:  MOVLB  0F
1D17:  ADDWF  64,W
1D18:  MOVLB  10
1D19:  MOVWF  5A
1D1A:  MOVLW  00
1D1B:  MOVLB  0F
1D1C:  ADDWFC 65,W
1D1D:  MOVLB  10
1D1E:  MOVWF  5B
1D1F:  MOVLW  00
1D20:  MOVLB  0F
1D21:  ADDWFC 66,W
1D22:  MOVLB  10
1D23:  MOVWF  5C
1D24:  MOVLW  00
1D25:  MOVLB  0F
1D26:  ADDWFC 67,W
1D27:  MOVLB  10
1D28:  MOVWF  5D
1D29:  MOVLB  0D
1D2A:  MOVF   45,W
1D2B:  MOVLB  13
1D2C:  MOVWF  2C
1D2D:  MOVLB  0D
1D2E:  MOVF   44,W
1D2F:  MOVLB  13
1D30:  MOVWF  2B
1D31:  MOVLB  0D
1D32:  MOVF   43,W
1D33:  MOVLB  13
1D34:  MOVWF  2A
1D35:  MOVLB  0D
1D36:  MOVF   42,W
1D37:  MOVLB  13
1D38:  MOVWF  29
1D39:  MOVLB  10
1D3A:  MOVF   5D,W
1D3B:  MOVLB  13
1D3C:  MOVWF  30
1D3D:  MOVLB  10
1D3E:  MOVF   5C,W
1D3F:  MOVLB  13
1D40:  MOVWF  2F
1D41:  MOVLB  10
1D42:  MOVF   5B,W
1D43:  MOVLB  13
1D44:  MOVWF  2E
1D45:  MOVLB  10
1D46:  MOVF   5A,W
1D47:  MOVLB  13
1D48:  MOVWF  2D
1D49:  MOVLW  24
1D4A:  MOVWF  32
1D4B:  MOVLW  F8
1D4C:  MOVWF  31
1D4D:  CLRF   36
1D4E:  CLRF   35
1D4F:  CLRF   34
1D50:  MOVLW  40
1D51:  MOVWF  33
1D52:  MOVLP  08
1D53:  MOVLB  00
1D54:  CALL   1D4
1D55:  MOVLP  18
....................       for (unsigned int8 bitcount = 0; bitcount < PACKET_SIZE; bitcount++){
1D56:  MOVLB  10
1D57:  CLRF   59
1D58:  MOVLB  00
1D59:  MOVLB  10
1D5A:  MOVF   59,W
1D5B:  SUBLW  3F
1D5C:  BTFSC  03.0
1D5D:  GOTO   560
1D5E:  MOVLB  00
1D5F:  GOTO   57F
1D60:  MOVLB  00
....................          fprintf(PC,"%02X ",readdata[bitcount]);
1D61:  MOVLW  F8
1D62:  MOVLB  10
1D63:  ADDWF  59,W
1D64:  MOVWF  04
1D65:  MOVLW  24
1D66:  MOVWF  05
1D67:  BTFSC  03.0
1D68:  INCF   05,F
1D69:  MOVF   00,W
1D6A:  MOVWF  5A
1D6B:  MOVF   5A,W
1D6C:  MOVLB  11
1D6D:  MOVWF  51
1D6E:  MOVLW  37
1D6F:  MOVWF  52
1D70:  MOVLP  08
1D71:  MOVLB  00
1D72:  CALL   592
1D73:  MOVLP  18
1D74:  MOVLW  20
1D75:  MOVLB  13
1D76:  MOVWF  2E
1D77:  MOVLP  00
1D78:  MOVLB  00
1D79:  CALL   721
1D7A:  MOVLP  18
1D7B:  MOVLB  10
1D7C:  INCF   59,F
1D7D:  MOVLB  00
1D7E:  GOTO   559
....................       }
....................       fprintf(PC,"\r\n");
1D7F:  MOVLW  0D
1D80:  MOVLB  13
1D81:  MOVWF  2E
1D82:  MOVLP  00
1D83:  MOVLB  00
1D84:  CALL   721
1D85:  MOVLP  18
1D86:  MOVLW  0A
1D87:  MOVLB  13
1D88:  MOVWF  2E
1D89:  MOVLP  00
1D8A:  MOVLB  00
1D8B:  CALL   721
1D8C:  MOVLP  18
1D8D:  MOVLB  10
1D8E:  INCF   58,F
1D8F:  MOVLB  00
1D90:  GOTO   4FE
....................    }
....................    fprintf(PC, "End Flash Read\r\n");
1D91:  MOVLW  05
1D92:  MOVLB  03
1D93:  MOVWF  11
1D94:  MOVLW  04
1D95:  MOVWF  12
1D96:  MOVLP  00
1D97:  MOVLB  00
1D98:  CALL   749
1D99:  MOVLP  18
1D9A:  MOVLP  20
1D9B:  GOTO   3B5 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
1D9C:  MOVLW  0E
1D9D:  MOVLB  03
1D9E:  MOVWF  11
1D9F:  MOVLW  04
1DA0:  MOVWF  12
1DA1:  MOVLP  00
1DA2:  MOVLB  00
1DA3:  CALL   749
1DA4:  MOVLP  18
....................    flash_setting(mis_fm);
1DA5:  MOVLB  0D
1DA6:  MOVF   45,W
1DA7:  MOVLB  13
1DA8:  MOVWF  2C
1DA9:  MOVLB  0D
1DAA:  MOVF   44,W
1DAB:  MOVLB  13
1DAC:  MOVWF  2B
1DAD:  MOVLB  0D
1DAE:  MOVF   43,W
1DAF:  MOVLB  13
1DB0:  MOVWF  2A
1DB1:  MOVLB  0D
1DB2:  MOVF   42,W
1DB3:  MOVLB  13
1DB4:  MOVWF  29
1DB5:  MOVLP  08
1DB6:  MOVLB  00
1DB7:  CALL   7A7
1DB8:  MOVLP  18
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
1DB9:  MOVLB  0F
1DBA:  CLRF   64
1DBB:  CLRF   63
1DBC:  CLRF   62
1DBD:  CLRF   61
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
1DBE:  MOVLB  0D
1DBF:  MOVF   45,W
1DC0:  MOVLB  13
1DC1:  MOVWF  2C
1DC2:  MOVLB  0D
1DC3:  MOVF   44,W
1DC4:  MOVLB  13
1DC5:  MOVWF  2B
1DC6:  MOVLB  0D
1DC7:  MOVF   43,W
1DC8:  MOVLB  13
1DC9:  MOVWF  2A
1DCA:  MOVLB  0D
1DCB:  MOVF   42,W
1DCC:  MOVLB  13
1DCD:  MOVWF  29
1DCE:  MOVLB  0F
1DCF:  MOVF   64,W
1DD0:  MOVLB  13
1DD1:  MOVWF  30
1DD2:  MOVLB  0F
1DD3:  MOVF   63,W
1DD4:  MOVLB  13
1DD5:  MOVWF  2F
1DD6:  MOVLB  0F
1DD7:  MOVF   62,W
1DD8:  MOVLB  13
1DD9:  MOVWF  2E
1DDA:  MOVLB  0F
1DDB:  MOVF   61,W
1DDC:  MOVLB  13
1DDD:  MOVWF  2D
1DDE:  MOVLW  24
1DDF:  MOVWF  32
1DE0:  MOVLW  F5
1DE1:  MOVWF  31
1DE2:  CLRF   36
1DE3:  CLRF   35
1DE4:  CLRF   34
1DE5:  MOVLW  04
1DE6:  MOVWF  33
1DE7:  MOVLP  08
1DE8:  MOVLB  00
1DE9:  CALL   1D4
1DEA:  MOVLP  18
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
1DEB:  MOVLW  1C
1DEC:  MOVLB  03
1DED:  MOVWF  11
1DEE:  MOVLW  04
1DEF:  MOVWF  12
1DF0:  BCF    03.0
1DF1:  MOVLW  0B
1DF2:  MOVLB  11
1DF3:  MOVWF  51
1DF4:  MOVLP  08
1DF5:  MOVLB  00
1DF6:  CALL   2C9
1DF7:  MOVLP  18
1DF8:  MOVLB  0F
1DF9:  MOVF   65,W
1DFA:  MOVLB  11
1DFB:  MOVWF  51
1DFC:  MOVLW  37
1DFD:  MOVWF  52
1DFE:  MOVLP  08
1DFF:  MOVLB  00
1E00:  CALL   592
1E01:  MOVLP  18
1E02:  MOVLW  20
1E03:  MOVLB  13
1E04:  MOVWF  2E
1E05:  MOVLP  00
1E06:  MOVLB  00
1E07:  CALL   721
1E08:  MOVLP  18
1E09:  MOVLB  0F
1E0A:  MOVF   66,W
1E0B:  MOVLB  11
1E0C:  MOVWF  51
1E0D:  MOVLW  37
1E0E:  MOVWF  52
1E0F:  MOVLP  08
1E10:  MOVLB  00
1E11:  CALL   592
1E12:  MOVLP  18
1E13:  MOVLW  20
1E14:  MOVLB  13
1E15:  MOVWF  2E
1E16:  MOVLP  00
1E17:  MOVLB  00
1E18:  CALL   721
1E19:  MOVLP  18
1E1A:  MOVLB  0F
1E1B:  MOVF   67,W
1E1C:  MOVLB  11
1E1D:  MOVWF  51
1E1E:  MOVLW  37
1E1F:  MOVWF  52
1E20:  MOVLP  08
1E21:  MOVLB  00
1E22:  CALL   592
1E23:  MOVLP  18
1E24:  MOVLW  20
1E25:  MOVLB  13
1E26:  MOVWF  2E
1E27:  MOVLP  00
1E28:  MOVLB  00
1E29:  CALL   721
1E2A:  MOVLP  18
1E2B:  MOVLB  0F
1E2C:  MOVF   68,W
1E2D:  MOVLB  11
1E2E:  MOVWF  51
1E2F:  MOVLW  37
1E30:  MOVWF  52
1E31:  MOVLP  08
1E32:  MOVLB  00
1E33:  CALL   592
1E34:  MOVLP  18
1E35:  MOVLW  0D
1E36:  MOVLB  13
1E37:  MOVWF  2E
1E38:  MOVLP  00
1E39:  MOVLB  00
1E3A:  CALL   721
1E3B:  MOVLP  18
1E3C:  MOVLW  0A
1E3D:  MOVLB  13
1E3E:  MOVWF  2E
1E3F:  MOVLP  00
1E40:  MOVLB  00
1E41:  CALL   721
1E42:  MOVLP  18
....................    fprintf(PC, "End Flash Read Address\r\n");
1E43:  MOVLW  2D
1E44:  MOVLB  03
1E45:  MOVWF  11
1E46:  MOVLW  04
1E47:  MOVWF  12
1E48:  MOVLP  00
1E49:  MOVLB  00
1E4A:  CALL   749
1E4B:  MOVLP  18
1E4C:  MOVLP  20
1E4D:  GOTO   3BF (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
1E4E:  MOVLW  3A
1E4F:  MOVLB  03
1E50:  MOVWF  11
1E51:  MOVLW  04
1E52:  MOVWF  12
1E53:  MOVLP  00
1E54:  MOVLB  00
1E55:  CALL   749
1E56:  MOVLP  18
....................    flash_setting(mis_fm);
1E57:  MOVLB  0D
1E58:  MOVF   45,W
1E59:  MOVLB  13
1E5A:  MOVWF  2C
1E5B:  MOVLB  0D
1E5C:  MOVF   44,W
1E5D:  MOVLB  13
1E5E:  MOVWF  2B
1E5F:  MOVLB  0D
1E60:  MOVF   43,W
1E61:  MOVLB  13
1E62:  MOVWF  2A
1E63:  MOVLB  0D
1E64:  MOVF   42,W
1E65:  MOVLB  13
1E66:  MOVWF  29
1E67:  MOVLP  08
1E68:  MOVLB  00
1E69:  CALL   7A7
1E6A:  MOVLP  18
....................    flash_setting(smf);
1E6B:  MOVLB  0D
1E6C:  MOVF   49,W
1E6D:  MOVLB  13
1E6E:  MOVWF  2C
1E6F:  MOVLB  0D
1E70:  MOVF   48,W
1E71:  MOVLB  13
1E72:  MOVWF  2B
1E73:  MOVLB  0D
1E74:  MOVF   47,W
1E75:  MOVLB  13
1E76:  MOVWF  2A
1E77:  MOVLB  0D
1E78:  MOVF   46,W
1E79:  MOVLB  13
1E7A:  MOVWF  29
1E7B:  MOVLP  08
1E7C:  MOVLB  00
1E7D:  CALL   7A7
1E7E:  MOVLP  18
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
1E7F:  MOVLB  0F
1E80:  CLRF   64
1E81:  CLRF   63
1E82:  CLRF   62
1E83:  CLRF   61
1E84:  CLRF   68
1E85:  CLRF   67
1E86:  MOVLW  10
1E87:  MOVWF  66
1E88:  CLRF   65
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
1E89:  MOVLB  0D
1E8A:  MOVF   45,W
1E8B:  MOVLB  13
1E8C:  MOVWF  2C
1E8D:  MOVLB  0D
1E8E:  MOVF   44,W
1E8F:  MOVLB  13
1E90:  MOVWF  2B
1E91:  MOVLB  0D
1E92:  MOVF   43,W
1E93:  MOVLB  13
1E94:  MOVWF  2A
1E95:  MOVLB  0D
1E96:  MOVF   42,W
1E97:  MOVLB  13
1E98:  MOVWF  29
1E99:  MOVLB  0F
1E9A:  MOVF   64,W
1E9B:  MOVLB  13
1E9C:  MOVWF  30
1E9D:  MOVLB  0F
1E9E:  MOVF   63,W
1E9F:  MOVLB  13
1EA0:  MOVWF  2F
1EA1:  MOVLB  0F
1EA2:  MOVF   62,W
1EA3:  MOVLB  13
1EA4:  MOVWF  2E
1EA5:  MOVLB  0F
1EA6:  MOVF   61,W
1EA7:  MOVLB  13
1EA8:  MOVWF  2D
1EA9:  MOVLW  24
1EAA:  MOVWF  32
1EAB:  MOVLW  F9
1EAC:  MOVWF  31
1EAD:  CLRF   36
1EAE:  CLRF   35
1EAF:  MOVLW  01
1EB0:  MOVWF  34
1EB1:  CLRF   33
1EB2:  MOVLP  08
1EB3:  MOVLB  00
1EB4:  CALL   1D4
1EB5:  MOVLP  18
....................    write_data_bytes(smf, dest_address, read_data, 256);
1EB6:  MOVLB  0D
1EB7:  MOVF   49,W
1EB8:  MOVLB  13
1EB9:  MOVWF  2C
1EBA:  MOVLB  0D
1EBB:  MOVF   48,W
1EBC:  MOVLB  13
1EBD:  MOVWF  2B
1EBE:  MOVLB  0D
1EBF:  MOVF   47,W
1EC0:  MOVLB  13
1EC1:  MOVWF  2A
1EC2:  MOVLB  0D
1EC3:  MOVF   46,W
1EC4:  MOVLB  13
1EC5:  MOVWF  29
1EC6:  MOVLB  0F
1EC7:  MOVF   68,W
1EC8:  MOVLB  13
1EC9:  MOVWF  30
1ECA:  MOVLB  0F
1ECB:  MOVF   67,W
1ECC:  MOVLB  13
1ECD:  MOVWF  2F
1ECE:  MOVLB  0F
1ECF:  MOVF   66,W
1ED0:  MOVLB  13
1ED1:  MOVWF  2E
1ED2:  MOVLB  0F
1ED3:  MOVF   65,W
1ED4:  MOVLB  13
1ED5:  MOVWF  2D
1ED6:  MOVLW  24
1ED7:  MOVWF  32
1ED8:  MOVLW  F9
1ED9:  MOVWF  31
1EDA:  MOVLW  01
1EDB:  MOVWF  34
1EDC:  CLRF   33
1EDD:  MOVLP  10
1EDE:  MOVLB  00
1EDF:  CALL   000
1EE0:  MOVLP  18
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
1EE1:  MOVLW  46
1EE2:  MOVLB  03
1EE3:  MOVWF  11
1EE4:  MOVLW  04
1EE5:  MOVWF  12
1EE6:  MOVLP  00
1EE7:  MOVLB  00
1EE8:  CALL   749
1EE9:  MOVLP  18
1EEA:  MOVLP  20
1EEB:  GOTO   3C9 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
1EEC:  MOVLW  86
1EED:  MOVLB  03
1EEE:  MOVWF  11
1EEF:  MOVLW  04
1EF0:  MOVWF  12
1EF1:  MOVLP  00
1EF2:  MOVLB  00
1EF3:  CALL   749
1EF4:  MOVLP  18
....................    FLASH_DATA_HEADER flash_data_header;
....................    flash_data_header.fields.misf_meas_loop_counter = 0;
1EF5:  MOVLB  10
1EF6:  CLRF   29
....................    flash_data_header.fields.misf_piclog_loop_counter = 0;
1EF7:  MOVLB  0F
1EF8:  CLRF   6F
....................    flash_data_header.fields.misf_piclog_use_counter = 0;
1EF9:  CLRF   6E
1EFA:  CLRF   6D
1EFB:  CLRF   6C
1EFC:  CLRF   6B
....................    flash_data_header.fields.misf_meas_uncopyed_counter = 0;
1EFD:  MOVLB  10
1EFE:  CLRF   2D
1EFF:  CLRF   2C
1F00:  CLRF   2B
1F01:  CLRF   2A
.................... 
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, flash_data_header.bytes, PACKET_SIZE);
1F02:  MOVLB  0D
1F03:  MOVF   45,W
1F04:  MOVLB  13
1F05:  MOVWF  2C
1F06:  MOVLB  0D
1F07:  MOVF   44,W
1F08:  MOVLB  13
1F09:  MOVWF  2B
1F0A:  MOVLB  0D
1F0B:  MOVF   43,W
1F0C:  MOVLB  13
1F0D:  MOVWF  2A
1F0E:  MOVLB  0D
1F0F:  MOVF   42,W
1F10:  MOVLB  13
1F11:  MOVWF  29
1F12:  CLRF   30
1F13:  CLRF   2F
1F14:  CLRF   2E
1F15:  CLRF   2D
1F16:  MOVLW  24
1F17:  MOVWF  32
1F18:  MOVLW  F1
1F19:  MOVWF  31
1F1A:  CLRF   34
1F1B:  MOVLW  40
1F1C:  MOVWF  33
1F1D:  MOVLP  10
1F1E:  MOVLB  00
1F1F:  CALL   000
1F20:  MOVLP  18
.................... 
....................    fprintf(PC, "End Flash Address Reset\r\n");
1F21:  MOVLW  94
1F22:  MOVLB  03
1F23:  MOVWF  11
1F24:  MOVLW  04
1F25:  MOVWF  12
1F26:  MOVLP  00
1F27:  MOVLB  00
1F28:  CALL   749
1F29:  MOVLP  18
1F2A:  MOVLP  20
1F2B:  GOTO   3D3 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
33FD:  MOVLW  A1
33FE:  MOVLB  03
33FF:  MOVWF  11
3400:  MOVLW  04
3401:  MOVWF  12
3402:  MOVLP  00
3403:  MOVLB  00
3404:  CALL   749
3405:  MOVLP  30
....................     fprintf(PC, "___Start copy_data__\r\n");
3406:  MOVLW  AE
3407:  MOVLB  03
3408:  MOVWF  11
3409:  MOVLW  04
340A:  MOVWF  12
340B:  MOVLP  00
340C:  MOVLB  00
340D:  CALL   749
340E:  MOVLP  30
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
340F:  MOVLB  10
3410:  CLRF   48
3411:  MOVLB  00
3412:  MOVLP  18
3413:  CALL   7C5
3414:  MOVLP  30
3415:  MOVF   78,F
3416:  BTFSS  03.2
3417:  GOTO   5AE
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
3418:  MOVLW  BA
3419:  MOVLB  03
341A:  MOVWF  11
341B:  MOVLW  04
341C:  MOVWF  12
341D:  BCF    03.0
341E:  MOVLW  07
341F:  MOVLB  11
3420:  MOVWF  51
3421:  MOVLP  08
3422:  MOVLB  00
3423:  CALL   2C9
3424:  MOVLP  30
3425:  MOVLB  10
3426:  MOVF   48,W
3427:  MOVLB  11
3428:  MOVWF  4E
3429:  MOVLW  18
342A:  MOVWF  4F
342B:  MOVLP  20
342C:  MOVLB  00
342D:  CALL   44D
342E:  MOVLP  30
342F:  MOVLW  BE
3430:  MOVLB  03
3431:  MOVWF  11
3432:  MOVLW  04
3433:  MOVWF  12
3434:  BSF    03.0
3435:  MOVLW  12
3436:  MOVLB  11
3437:  MOVWF  51
3438:  MOVLP  08
3439:  MOVLB  00
343A:  CALL   2C9
343B:  MOVLP  30
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
343C:  MOVLP  20
343D:  GOTO   4DC
343E:  MOVLP  30
343F:  MOVF   79,W
3440:  MOVLB  10
3441:  MOVWF  4A
3442:  MOVF   78,W
3443:  MOVWF  49
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
3444:  MOVF   4A,W
3445:  MOVLB  11
3446:  MOVWF  2D
3447:  MOVLB  10
3448:  MOVF   49,W
3449:  MOVLB  11
344A:  MOVWF  2C
344B:  MOVLW  25
344C:  MOVWF  2F
344D:  MOVLW  2B
344E:  MOVWF  2E
344F:  MOVLW  25
3450:  MOVWF  31
3451:  MOVLW  34
3452:  MOVWF  30
3453:  MOVLW  25
3454:  MOVWF  33
3455:  MOVLW  38
3456:  MOVWF  32
3457:  MOVLW  25
3458:  MOVWF  35
3459:  MOVLW  3C
345A:  MOVWF  34
345B:  MOVLW  25
345C:  MOVWF  37
345D:  MOVLW  40
345E:  MOVWF  36
345F:  MOVLW  25
3460:  MOVWF  39
3461:  MOVLW  44
3462:  MOVWF  38
3463:  MOVLW  25
3464:  MOVWF  3B
3465:  MOVLW  45
3466:  MOVWF  3A
3467:  MOVLP  28
3468:  MOVLB  00
3469:  GOTO   000
346A:  MOVLP  30
....................         status[i+1] = mission_type.mission_flag;
346B:  MOVLW  01
346C:  MOVLB  10
346D:  ADDWF  48,W
346E:  ADDLW  09
346F:  MOVWF  04
3470:  MOVLW  20
3471:  MOVWF  05
3472:  BTFSC  03.0
3473:  INCF   05,F
3474:  MOVF   53,W
3475:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
3476:  MOVF   54,W
3477:  MOVWF  69
3478:  MOVLW  10
3479:  ADDWF  55,W
347A:  MOVWF  6A
347B:  MOVLW  00
347C:  ADDWFC 56,W
347D:  MOVWF  6B
347E:  MOVLW  00
347F:  ADDWFC 57,W
3480:  MOVWF  6C
3481:  MOVF   5B,W
3482:  MOVLB  11
3483:  MOVWF  23
3484:  MOVLB  10
3485:  MOVF   5A,W
3486:  MOVLB  11
3487:  MOVWF  22
3488:  MOVLB  10
3489:  MOVF   59,W
348A:  MOVLB  11
348B:  MOVWF  21
348C:  MOVLB  10
348D:  MOVF   58,W
348E:  MOVLB  11
348F:  MOVWF  20
3490:  MOVLB  10
3491:  MOVF   69,W
3492:  MOVLB  11
3493:  SUBWF  20,W
3494:  MOVWF  24
3495:  MOVLB  10
3496:  MOVF   6A,W
3497:  MOVLB  11
3498:  SUBWFC 21,W
3499:  MOVWF  25
349A:  MOVLB  10
349B:  MOVF   6B,W
349C:  MOVLB  11
349D:  SUBWFC 22,W
349E:  MOVWF  26
349F:  MOVLB  10
34A0:  MOVF   6C,W
34A1:  MOVLB  11
34A2:  SUBWFC 23,W
34A3:  MOVWF  27
34A4:  MOVLB  10
34A5:  MOVF   65,W
34A6:  ADDWF  69,W
34A7:  MOVLB  11
34A8:  MOVWF  28
34A9:  MOVLB  10
34AA:  MOVF   66,W
34AB:  ADDWFC 6A,W
34AC:  MOVLB  11
34AD:  MOVWF  29
34AE:  MOVLB  10
34AF:  MOVF   67,W
34B0:  ADDWFC 6B,W
34B1:  MOVLB  11
34B2:  MOVWF  2A
34B3:  MOVLB  10
34B4:  MOVF   68,W
34B5:  ADDWFC 6C,W
34B6:  MOVLB  11
34B7:  MOVWF  2B
.................... 
....................         if ((used_size + write_size) > data_region_size)
34B8:  MOVLB  10
34B9:  MOVF   60,W
34BA:  ADDWF  65,W
34BB:  MOVLB  11
34BC:  MOVWF  2C
34BD:  MOVLB  10
34BE:  MOVF   61,W
34BF:  ADDWFC 66,W
34C0:  MOVLB  11
34C1:  MOVWF  2D
34C2:  MOVLB  10
34C3:  MOVF   62,W
34C4:  ADDWFC 67,W
34C5:  MOVLB  11
34C6:  MOVWF  2E
34C7:  MOVLB  10
34C8:  MOVF   63,W
34C9:  ADDWFC 68,W
34CA:  MOVLB  11
34CB:  MOVWF  2F
34CC:  MOVF   27,W
34CD:  SUBWF  2F,W
34CE:  BTFSC  03.0
34CF:  GOTO   4D2
34D0:  MOVLB  00
34D1:  GOTO   523
34D2:  MOVLB  00
34D3:  BTFSS  03.2
34D4:  GOTO   4F1
34D5:  MOVLB  11
34D6:  MOVF   26,W
34D7:  SUBWF  2E,W
34D8:  BTFSC  03.0
34D9:  GOTO   4DC
34DA:  MOVLB  00
34DB:  GOTO   523
34DC:  MOVLB  00
34DD:  BTFSS  03.2
34DE:  GOTO   4F1
34DF:  MOVLB  11
34E0:  MOVF   25,W
34E1:  SUBWF  2D,W
34E2:  BTFSC  03.0
34E3:  GOTO   4E6
34E4:  MOVLB  00
34E5:  GOTO   523
34E6:  MOVLB  00
34E7:  BTFSS  03.2
34E8:  GOTO   4F1
34E9:  MOVLB  11
34EA:  MOVF   2C,W
34EB:  SUBWF  24,W
34EC:  BTFSS  03.0
34ED:  GOTO   4F0
34EE:  MOVLB  00
34EF:  GOTO   523
34F0:  MOVLB  00
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
34F1:  MOVLB  10
34F2:  MOVF   6C,W
34F3:  MOVLB  11
34F4:  MOVWF  2F
34F5:  MOVLB  10
34F6:  MOVF   6B,W
34F7:  MOVLB  11
34F8:  MOVWF  2E
34F9:  MOVLB  10
34FA:  MOVF   6A,W
34FB:  MOVLB  11
34FC:  MOVWF  2D
34FD:  MOVLB  10
34FE:  MOVF   69,W
34FF:  MOVLB  11
3500:  MOVWF  2C
3501:  MOVF   23,W
3502:  MOVWF  33
3503:  MOVF   22,W
3504:  MOVWF  32
3505:  MOVF   21,W
3506:  MOVWF  31
3507:  MOVF   20,W
3508:  MOVWF  30
3509:  MOVLP  20
350A:  MOVLB  00
350B:  GOTO   6C3
350C:  MOVLP  30
....................             loop_count++;
350D:  MOVLB  10
350E:  INCF   64,F
....................             used_size = 0;
350F:  CLRF   68
3510:  CLRF   67
3511:  CLRF   66
3512:  CLRF   65
....................             data_write_addr = data_region_start;
3513:  MOVF   6C,W
3514:  MOVLB  11
3515:  MOVWF  2B
3516:  MOVLB  10
3517:  MOVF   6B,W
3518:  MOVLB  11
3519:  MOVWF  2A
351A:  MOVLB  10
351B:  MOVF   6A,W
351C:  MOVLB  11
351D:  MOVWF  29
351E:  MOVLB  10
351F:  MOVF   69,W
3520:  MOVLB  11
3521:  MOVWF  28
3522:  MOVLB  00
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
3523:  MOVLB  11
3524:  MOVF   2B,W
3525:  MOVWF  2F
3526:  MOVF   2A,W
3527:  MOVWF  2E
3528:  MOVF   29,W
3529:  MOVWF  2D
352A:  MOVF   28,W
352B:  MOVWF  2C
352C:  MOVLB  10
352D:  MOVF   63,W
352E:  MOVLB  11
352F:  MOVWF  33
3530:  MOVLB  10
3531:  MOVF   62,W
3532:  MOVLB  11
3533:  MOVWF  32
3534:  MOVLB  10
3535:  MOVF   61,W
3536:  MOVLB  11
3537:  MOVWF  31
3538:  MOVLB  10
3539:  MOVF   60,W
353A:  MOVLB  11
353B:  MOVWF  30
353C:  MOVLB  10
353D:  MOVF   5B,W
353E:  MOVLB  11
353F:  MOVWF  37
3540:  MOVLB  10
3541:  MOVF   5A,W
3542:  MOVLB  11
3543:  MOVWF  36
3544:  MOVLB  10
3545:  MOVF   59,W
3546:  MOVLB  11
3547:  MOVWF  35
3548:  MOVLB  10
3549:  MOVF   58,W
354A:  MOVLB  11
354B:  MOVWF  34
354C:  MOVLP  20
354D:  MOVLB  00
354E:  GOTO   723
354F:  MOVLP  30
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
3550:  MOVLB  10
3551:  MOVF   5F,W
3552:  MOVLB  11
3553:  MOVWF  2F
3554:  MOVLB  10
3555:  MOVF   5E,W
3556:  MOVLB  11
3557:  MOVWF  2E
3558:  MOVLB  10
3559:  MOVF   5D,W
355A:  MOVLB  11
355B:  MOVWF  2D
355C:  MOVLB  10
355D:  MOVF   5C,W
355E:  MOVLB  11
355F:  MOVWF  2C
3560:  MOVLB  10
3561:  MOVF   63,W
3562:  MOVLB  11
3563:  MOVWF  33
3564:  MOVLB  10
3565:  MOVF   62,W
3566:  MOVLB  11
3567:  MOVWF  32
3568:  MOVLB  10
3569:  MOVF   61,W
356A:  MOVLB  11
356B:  MOVWF  31
356C:  MOVLB  10
356D:  MOVF   60,W
356E:  MOVLB  11
356F:  MOVWF  30
3570:  MOVF   2B,W
3571:  MOVWF  37
3572:  MOVF   2A,W
3573:  MOVWF  36
3574:  MOVF   29,W
3575:  MOVWF  35
3576:  MOVF   28,W
3577:  MOVWF  34
3578:  MOVLW  24
3579:  MOVWF  39
357A:  MOVLW  E8
357B:  MOVWF  38
357C:  MOVLW  25
357D:  MOVWF  3B
357E:  MOVLW  45
357F:  MOVWF  3A
3580:  MOVLP  28
3581:  MOVLB  00
3582:  GOTO   5D3
3583:  MOVLP  30
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
3584:  MOVLB  10
3585:  MOVF   57,W
3586:  MOVLB  11
3587:  MOVWF  2F
3588:  MOVLB  10
3589:  MOVF   56,W
358A:  MOVLB  11
358B:  MOVWF  2E
358C:  MOVLB  10
358D:  MOVF   55,W
358E:  MOVLB  11
358F:  MOVWF  2D
3590:  MOVLB  10
3591:  MOVF   54,W
3592:  MOVLB  11
3593:  MOVWF  2C
3594:  MOVLB  10
3595:  MOVF   68,W
3596:  MOVLB  11
3597:  MOVWF  33
3598:  MOVLB  10
3599:  MOVF   67,W
359A:  MOVLB  11
359B:  MOVWF  32
359C:  MOVLB  10
359D:  MOVF   66,W
359E:  MOVLB  11
359F:  MOVWF  31
35A0:  MOVLB  10
35A1:  MOVF   65,W
35A2:  MOVLB  11
35A3:  MOVWF  30
35A4:  MOVLB  10
35A5:  MOVF   64,W
35A6:  MOVLB  11
35A7:  MOVWF  34
35A8:  MOVLB  00
35A9:  GOTO   1EB
35AA:  MOVLB  10
35AB:  INCF   48,F
35AC:  MOVLB  00
35AD:  GOTO   412
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
35AE:  MOVLW  C8
35AF:  MOVLB  03
35B0:  MOVWF  11
35B1:  MOVLW  04
35B2:  MOVWF  12
35B3:  MOVLP  00
35B4:  MOVLB  00
35B5:  CALL   749
35B6:  MOVLP  30
....................     fprintf(PC, "____________________\r\n\r\n");
35B7:  MOVLW  D5
35B8:  MOVLB  03
35B9:  MOVWF  11
35BA:  MOVLW  04
35BB:  MOVWF  12
35BC:  MOVLP  00
35BD:  MOVLB  00
35BE:  CALL   749
35BF:  MOVLP  30
35C0:  MOVLP  20
35C1:  GOTO   7EE (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
2800:  MOVLB  11
2801:  MOVF   2F,W
2802:  MOVWF  7A
2803:  MOVF   2E,W
2804:  MOVWF  49
2805:  MOVF   7A,W
2806:  MOVWF  4A
2807:  MOVF   2C,W
2808:  MOVWF  04
2809:  MOVF   2D,W
280A:  MOVWF  05
280B:  ADDFSR 00,FSR0
280C:  MOVF   00,W
280D:  MOVWF  4B
280E:  MOVF   4B,W
280F:  MOVWF  52
2810:  MOVLP  20
2811:  MOVLB  00
2812:  GOTO   514
2813:  MOVLP  28
2814:  MOVF   79,W
2815:  MOVWF  7A
2816:  MOVF   78,W
2817:  MOVWF  04
2818:  MOVF   7A,W
2819:  MOVWF  05
281A:  MOVLW  09
281B:  MOVWF  78
281C:  MOVLB  11
281D:  MOVF   4A,W
281E:  MOVWF  07
281F:  MOVF   49,W
2820:  MOVWF  06
2821:  MOVLB  00
2822:  MOVIW  [FSR0++],W
2823:  MOVWI  W,[FSR1++]
2824:  DECFSZ 78,F
2825:  GOTO   022
....................     *mis_start_address = mission_type->start_address;
2826:  MOVLB  11
2827:  MOVF   31,W
2828:  MOVWF  7A
2829:  MOVF   30,W
282A:  MOVWF  49
282B:  MOVF   7A,W
282C:  MOVWF  4A
282D:  MOVF   2E,W
282E:  MOVWF  04
282F:  MOVF   2F,W
2830:  MOVWF  05
2831:  ADDFSR 00,FSR0
2832:  MOVF   00,W
2833:  MOVWF  77
2834:  ADDFSR 01,FSR0
2835:  MOVF   00,W
2836:  MOVWF  78
2837:  ADDFSR 01,FSR0
2838:  MOVF   00,W
2839:  MOVWF  79
283A:  ADDFSR 01,FSR0
283B:  MOVF   00,W
283C:  MOVWF  7A
283D:  ADDFSR 3D,FSR0
283E:  MOVF   7A,W
283F:  MOVWF  4E
2840:  MOVF   79,W
2841:  MOVWF  4D
2842:  MOVF   78,W
2843:  MOVWF  4C
2844:  MOVF   77,W
2845:  MOVWF  4B
2846:  MOVF   4A,W
2847:  MOVWF  05
2848:  MOVF   49,W
2849:  MOVWF  04
284A:  MOVF   4B,W
284B:  MOVWF  00
284C:  ADDFSR 01,FSR0
284D:  MOVF   4C,W
284E:  MOVWF  00
284F:  ADDFSR 01,FSR0
2850:  MOVF   4D,W
2851:  MOVWF  00
2852:  ADDFSR 01,FSR0
2853:  MOVF   4E,W
2854:  MOVWF  00
2855:  ADDFSR 3D,FSR0
....................     *mis_end_address = mission_type->end_address;
2856:  MOVF   33,W
2857:  MOVWF  7A
2858:  MOVF   32,W
2859:  MOVWF  49
285A:  MOVF   7A,W
285B:  MOVWF  4A
285C:  MOVF   2E,W
285D:  MOVWF  04
285E:  MOVF   2F,W
285F:  MOVWF  05
2860:  ADDFSR 04,FSR0
2861:  MOVF   00,W
2862:  MOVWF  77
2863:  ADDFSR 01,FSR0
2864:  MOVF   00,W
2865:  MOVWF  78
2866:  ADDFSR 01,FSR0
2867:  MOVF   00,W
2868:  MOVWF  79
2869:  ADDFSR 01,FSR0
286A:  MOVF   00,W
286B:  MOVWF  7A
286C:  ADDFSR 3D,FSR0
286D:  MOVF   7A,W
286E:  MOVWF  4E
286F:  MOVF   79,W
2870:  MOVWF  4D
2871:  MOVF   78,W
2872:  MOVWF  4C
2873:  MOVF   77,W
2874:  MOVWF  4B
2875:  MOVF   4A,W
2876:  MOVWF  05
2877:  MOVF   49,W
2878:  MOVWF  04
2879:  MOVF   4B,W
287A:  MOVWF  00
287B:  ADDFSR 01,FSR0
287C:  MOVF   4C,W
287D:  MOVWF  00
287E:  ADDFSR 01,FSR0
287F:  MOVF   4D,W
2880:  MOVWF  00
2881:  ADDFSR 01,FSR0
2882:  MOVF   4E,W
2883:  MOVWF  00
2884:  ADDFSR 3D,FSR0
....................     *write_src = smf_data->src;
2885:  MOVF   35,W
2886:  MOVWF  7A
2887:  MOVF   34,W
2888:  MOVWF  49
2889:  MOVF   7A,W
288A:  MOVWF  4A
288B:  MOVF   2C,W
288C:  MOVWF  04
288D:  MOVF   2D,W
288E:  MOVWF  05
288F:  ADDFSR 01,FSR0
2890:  MOVF   00,W
2891:  MOVWF  77
2892:  ADDFSR 01,FSR0
2893:  MOVF   00,W
2894:  MOVWF  78
2895:  ADDFSR 01,FSR0
2896:  MOVF   00,W
2897:  MOVWF  79
2898:  ADDFSR 01,FSR0
2899:  MOVF   00,W
289A:  MOVWF  7A
289B:  ADDFSR 3D,FSR0
289C:  MOVF   7A,W
289D:  MOVWF  4E
289E:  MOVF   79,W
289F:  MOVWF  4D
28A0:  MOVF   78,W
28A1:  MOVWF  4C
28A2:  MOVF   77,W
28A3:  MOVWF  4B
28A4:  MOVF   4A,W
28A5:  MOVWF  05
28A6:  MOVF   49,W
28A7:  MOVWF  04
28A8:  MOVF   4B,W
28A9:  MOVWF  00
28AA:  ADDFSR 01,FSR0
28AB:  MOVF   4C,W
28AC:  MOVWF  00
28AD:  ADDFSR 01,FSR0
28AE:  MOVF   4D,W
28AF:  MOVWF  00
28B0:  ADDFSR 01,FSR0
28B1:  MOVF   4E,W
28B2:  MOVWF  00
28B3:  ADDFSR 3D,FSR0
....................     *write_size = smf_data->size;
28B4:  MOVF   37,W
28B5:  MOVWF  7A
28B6:  MOVF   36,W
28B7:  MOVWF  49
28B8:  MOVF   7A,W
28B9:  MOVWF  4A
28BA:  MOVF   2C,W
28BB:  MOVWF  04
28BC:  MOVF   2D,W
28BD:  MOVWF  05
28BE:  ADDFSR 05,FSR0
28BF:  MOVF   00,W
28C0:  MOVWF  77
28C1:  ADDFSR 01,FSR0
28C2:  MOVF   00,W
28C3:  MOVWF  78
28C4:  ADDFSR 01,FSR0
28C5:  MOVF   00,W
28C6:  MOVWF  79
28C7:  ADDFSR 01,FSR0
28C8:  MOVF   00,W
28C9:  MOVWF  7A
28CA:  ADDFSR 3D,FSR0
28CB:  MOVF   7A,W
28CC:  MOVWF  4E
28CD:  MOVF   79,W
28CE:  MOVWF  4D
28CF:  MOVF   78,W
28D0:  MOVWF  4C
28D1:  MOVF   77,W
28D2:  MOVWF  4B
28D3:  MOVF   4A,W
28D4:  MOVWF  05
28D5:  MOVF   49,W
28D6:  MOVWF  04
28D7:  MOVF   4B,W
28D8:  MOVWF  00
28D9:  ADDFSR 01,FSR0
28DA:  MOVF   4C,W
28DB:  MOVWF  00
28DC:  ADDFSR 01,FSR0
28DD:  MOVF   4D,W
28DE:  MOVWF  00
28DF:  ADDFSR 01,FSR0
28E0:  MOVF   4E,W
28E1:  MOVWF  00
28E2:  ADDFSR 3D,FSR0
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
28E3:  MOVF   31,W
28E4:  MOVWF  7A
28E5:  MOVF   30,W
28E6:  MOVWF  04
28E7:  MOVF   7A,W
28E8:  MOVWF  05
28E9:  MOVF   00,W
28EA:  MOVWF  49
28EB:  ADDFSR 01,FSR0
28EC:  MOVF   00,W
28ED:  MOVWF  4A
28EE:  ADDFSR 01,FSR0
28EF:  MOVF   00,W
28F0:  MOVWF  4B
28F1:  ADDFSR 01,FSR0
28F2:  MOVF   00,W
28F3:  MOVWF  4C
28F4:  ADDFSR 3D,FSR0
28F5:  MOVLW  E2
28F6:  MOVLB  03
28F7:  MOVWF  11
28F8:  MOVLW  04
28F9:  MOVWF  12
28FA:  BCF    03.0
28FB:  MOVLW  25
28FC:  MOVLB  11
28FD:  MOVWF  51
28FE:  MOVLP  08
28FF:  MOVLB  00
2900:  CALL   2C9
2901:  MOVLP  28
2902:  MOVLB  11
2903:  MOVF   4C,W
2904:  MOVWF  51
2905:  MOVLW  37
2906:  MOVWF  52
2907:  MOVLP  08
2908:  MOVLB  00
2909:  CALL   592
290A:  MOVLP  28
290B:  MOVLB  11
290C:  MOVF   4B,W
290D:  MOVWF  51
290E:  MOVLW  37
290F:  MOVWF  52
2910:  MOVLP  08
2911:  MOVLB  00
2912:  CALL   592
2913:  MOVLP  28
2914:  MOVLB  11
2915:  MOVF   4A,W
2916:  MOVWF  51
2917:  MOVLW  37
2918:  MOVWF  52
2919:  MOVLP  08
291A:  MOVLB  00
291B:  CALL   592
291C:  MOVLP  28
291D:  MOVLB  11
291E:  MOVF   49,W
291F:  MOVWF  51
2920:  MOVLW  37
2921:  MOVWF  52
2922:  MOVLP  08
2923:  MOVLB  00
2924:  CALL   592
2925:  MOVLP  28
2926:  MOVLW  0D
2927:  MOVLB  13
2928:  MOVWF  2E
2929:  MOVLP  00
292A:  MOVLB  00
292B:  CALL   721
292C:  MOVLP  28
292D:  MOVLW  0A
292E:  MOVLB  13
292F:  MOVWF  2E
2930:  MOVLP  00
2931:  MOVLB  00
2932:  CALL   721
2933:  MOVLP  28
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
2934:  MOVLB  11
2935:  MOVF   33,W
2936:  MOVWF  7A
2937:  MOVF   32,W
2938:  MOVWF  04
2939:  MOVF   7A,W
293A:  MOVWF  05
293B:  MOVF   00,W
293C:  MOVWF  49
293D:  ADDFSR 01,FSR0
293E:  MOVF   00,W
293F:  MOVWF  4A
2940:  ADDFSR 01,FSR0
2941:  MOVF   00,W
2942:  MOVWF  4B
2943:  ADDFSR 01,FSR0
2944:  MOVF   00,W
2945:  MOVWF  4C
2946:  ADDFSR 3D,FSR0
2947:  MOVLW  F8
2948:  MOVLB  03
2949:  MOVWF  11
294A:  MOVLW  04
294B:  MOVWF  12
294C:  BCF    03.0
294D:  MOVLW  25
294E:  MOVLB  11
294F:  MOVWF  51
2950:  MOVLP  08
2951:  MOVLB  00
2952:  CALL   2C9
2953:  MOVLP  28
2954:  MOVLB  11
2955:  MOVF   4C,W
2956:  MOVWF  51
2957:  MOVLW  37
2958:  MOVWF  52
2959:  MOVLP  08
295A:  MOVLB  00
295B:  CALL   592
295C:  MOVLP  28
295D:  MOVLB  11
295E:  MOVF   4B,W
295F:  MOVWF  51
2960:  MOVLW  37
2961:  MOVWF  52
2962:  MOVLP  08
2963:  MOVLB  00
2964:  CALL   592
2965:  MOVLP  28
2966:  MOVLB  11
2967:  MOVF   4A,W
2968:  MOVWF  51
2969:  MOVLW  37
296A:  MOVWF  52
296B:  MOVLP  08
296C:  MOVLB  00
296D:  CALL   592
296E:  MOVLP  28
296F:  MOVLB  11
2970:  MOVF   49,W
2971:  MOVWF  51
2972:  MOVLW  37
2973:  MOVWF  52
2974:  MOVLP  08
2975:  MOVLB  00
2976:  CALL   592
2977:  MOVLP  28
2978:  MOVLW  0D
2979:  MOVLB  13
297A:  MOVWF  2E
297B:  MOVLP  00
297C:  MOVLB  00
297D:  CALL   721
297E:  MOVLP  28
297F:  MOVLW  0A
2980:  MOVLB  13
2981:  MOVWF  2E
2982:  MOVLP  00
2983:  MOVLB  00
2984:  CALL   721
2985:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
2986:  MOVLB  11
2987:  MOVF   35,W
2988:  MOVWF  7A
2989:  MOVF   34,W
298A:  MOVWF  04
298B:  MOVF   7A,W
298C:  MOVWF  05
298D:  MOVF   00,W
298E:  MOVWF  49
298F:  ADDFSR 01,FSR0
2990:  MOVF   00,W
2991:  MOVWF  4A
2992:  ADDFSR 01,FSR0
2993:  MOVF   00,W
2994:  MOVWF  4B
2995:  ADDFSR 01,FSR0
2996:  MOVF   00,W
2997:  MOVWF  4C
2998:  ADDFSR 3D,FSR0
2999:  MOVLW  0E
299A:  MOVLB  03
299B:  MOVWF  11
299C:  MOVLW  05
299D:  MOVWF  12
299E:  BCF    03.0
299F:  MOVLW  25
29A0:  MOVLB  11
29A1:  MOVWF  51
29A2:  MOVLP  08
29A3:  MOVLB  00
29A4:  CALL   2C9
29A5:  MOVLP  28
29A6:  MOVLB  11
29A7:  MOVF   4C,W
29A8:  MOVWF  51
29A9:  MOVLW  37
29AA:  MOVWF  52
29AB:  MOVLP  08
29AC:  MOVLB  00
29AD:  CALL   592
29AE:  MOVLP  28
29AF:  MOVLB  11
29B0:  MOVF   4B,W
29B1:  MOVWF  51
29B2:  MOVLW  37
29B3:  MOVWF  52
29B4:  MOVLP  08
29B5:  MOVLB  00
29B6:  CALL   592
29B7:  MOVLP  28
29B8:  MOVLB  11
29B9:  MOVF   4A,W
29BA:  MOVWF  51
29BB:  MOVLW  37
29BC:  MOVWF  52
29BD:  MOVLP  08
29BE:  MOVLB  00
29BF:  CALL   592
29C0:  MOVLP  28
29C1:  MOVLB  11
29C2:  MOVF   49,W
29C3:  MOVWF  51
29C4:  MOVLW  37
29C5:  MOVWF  52
29C6:  MOVLP  08
29C7:  MOVLB  00
29C8:  CALL   592
29C9:  MOVLP  28
29CA:  MOVLW  0D
29CB:  MOVLB  13
29CC:  MOVWF  2E
29CD:  MOVLP  00
29CE:  MOVLB  00
29CF:  CALL   721
29D0:  MOVLP  28
29D1:  MOVLW  0A
29D2:  MOVLB  13
29D3:  MOVWF  2E
29D4:  MOVLP  00
29D5:  MOVLB  00
29D6:  CALL   721
29D7:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
29D8:  MOVLB  11
29D9:  MOVF   37,W
29DA:  MOVWF  7A
29DB:  MOVF   36,W
29DC:  MOVWF  04
29DD:  MOVF   7A,W
29DE:  MOVWF  05
29DF:  MOVF   00,W
29E0:  MOVWF  49
29E1:  ADDFSR 01,FSR0
29E2:  MOVF   00,W
29E3:  MOVWF  4A
29E4:  ADDFSR 01,FSR0
29E5:  MOVF   00,W
29E6:  MOVWF  4B
29E7:  ADDFSR 01,FSR0
29E8:  MOVF   00,W
29E9:  MOVWF  4C
29EA:  ADDFSR 3D,FSR0
29EB:  MOVLW  24
29EC:  MOVLB  03
29ED:  MOVWF  11
29EE:  MOVLW  05
29EF:  MOVWF  12
29F0:  BCF    03.0
29F1:  MOVLW  25
29F2:  MOVLB  11
29F3:  MOVWF  51
29F4:  MOVLP  08
29F5:  MOVLB  00
29F6:  CALL   2C9
29F7:  MOVLP  28
29F8:  MOVLW  41
29F9:  MOVWF  04
29FA:  MOVLB  11
29FB:  MOVF   4C,W
29FC:  MOVWF  54
29FD:  MOVF   4B,W
29FE:  MOVWF  53
29FF:  MOVF   4A,W
2A00:  MOVWF  52
2A01:  MOVF   49,W
2A02:  MOVWF  51
2A03:  MOVLP  08
2A04:  MOVLB  00
2A05:  CALL   395
2A06:  MOVLP  28
2A07:  MOVLW  38
2A08:  MOVLB  03
2A09:  MOVWF  11
2A0A:  MOVLW  05
2A0B:  MOVWF  12
2A0C:  BCF    03.0
2A0D:  MOVLW  04
2A0E:  MOVLB  11
2A0F:  MOVWF  51
2A10:  MOVLP  08
2A11:  MOVLB  00
2A12:  CALL   2C9
2A13:  MOVLP  28
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
2A14:  MOVLB  11
2A15:  MOVF   31,W
2A16:  MOVWF  7A
2A17:  MOVF   30,W
2A18:  MOVWF  04
2A19:  MOVF   7A,W
2A1A:  MOVWF  05
2A1B:  MOVF   00,W
2A1C:  MOVWF  49
2A1D:  ADDFSR 01,FSR0
2A1E:  MOVF   00,W
2A1F:  MOVWF  4A
2A20:  ADDFSR 01,FSR0
2A21:  MOVF   00,W
2A22:  MOVWF  4B
2A23:  ADDFSR 01,FSR0
2A24:  MOVF   00,W
2A25:  MOVWF  4C
2A26:  ADDFSR 3D,FSR0
2A27:  MOVLB  0D
2A28:  MOVF   49,W
2A29:  MOVLB  13
2A2A:  MOVWF  2C
2A2B:  MOVLB  0D
2A2C:  MOVF   48,W
2A2D:  MOVLB  13
2A2E:  MOVWF  2B
2A2F:  MOVLB  0D
2A30:  MOVF   47,W
2A31:  MOVLB  13
2A32:  MOVWF  2A
2A33:  MOVLB  0D
2A34:  MOVF   46,W
2A35:  MOVLB  13
2A36:  MOVWF  29
2A37:  MOVLB  11
2A38:  MOVF   4C,W
2A39:  MOVLB  13
2A3A:  MOVWF  30
2A3B:  MOVLB  11
2A3C:  MOVF   4B,W
2A3D:  MOVLB  13
2A3E:  MOVWF  2F
2A3F:  MOVLB  11
2A40:  MOVF   4A,W
2A41:  MOVLB  13
2A42:  MOVWF  2E
2A43:  MOVLB  11
2A44:  MOVF   49,W
2A45:  MOVLB  13
2A46:  MOVWF  2D
2A47:  MOVLW  25
2A48:  MOVWF  32
2A49:  MOVLW  6C
2A4A:  MOVWF  31
2A4B:  CLRF   36
2A4C:  CLRF   35
2A4D:  CLRF   34
2A4E:  MOVLW  04
2A4F:  MOVWF  33
2A50:  MOVLP  08
2A51:  MOVLB  00
2A52:  CALL   1D4
2A53:  MOVLP  28
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
2A54:  MOVLB  11
2A55:  MOVF   3B,W
2A56:  MOVWF  7A
2A57:  MOVF   3A,W
2A58:  MOVWF  04
2A59:  MOVF   7A,W
2A5A:  MOVWF  05
2A5B:  CLRF   4E
2A5C:  CLRF   4D
2A5D:  CLRF   4C
2A5E:  MOVF   3F,W
2A5F:  MOVWF  4B
2A60:  MOVF   4B,W
2A61:  MOVWF  4E
2A62:  CLRF   4B
2A63:  CLRF   4C
2A64:  CLRF   4D
2A65:  CLRF   53
2A66:  CLRF   52
2A67:  CLRF   51
2A68:  MOVF   3E,W
2A69:  MOVWF  50
2A6A:  MOVF   51,W
2A6B:  MOVWF  7A
2A6C:  MOVF   50,W
2A6D:  MOVWF  79
2A6E:  CLRF   77
2A6F:  CLRF   78
2A70:  MOVF   77,W
2A71:  IORWF  4B,F
2A72:  MOVF   78,W
2A73:  IORWF  4C,F
2A74:  MOVF   79,W
2A75:  IORWF  4D,F
2A76:  MOVF   7A,W
2A77:  IORWF  4E,F
2A78:  CLRF   53
2A79:  CLRF   52
2A7A:  CLRF   51
2A7B:  MOVF   3D,W
2A7C:  MOVWF  50
2A7D:  MOVF   52,W
2A7E:  MOVWF  7A
2A7F:  MOVF   51,W
2A80:  MOVWF  79
2A81:  MOVF   50,W
2A82:  MOVWF  78
2A83:  CLRF   77
2A84:  MOVF   77,W
2A85:  IORWF  4B,F
2A86:  MOVF   78,W
2A87:  IORWF  4C,F
2A88:  MOVF   79,W
2A89:  IORWF  4D,F
2A8A:  MOVF   7A,W
2A8B:  IORWF  4E,F
2A8C:  MOVF   3C,W
2A8D:  MOVWF  77
2A8E:  CLRF   78
2A8F:  CLRF   79
2A90:  CLRF   7A
2A91:  MOVF   77,W
2A92:  IORWF  4B,W
2A93:  MOVWF  77
2A94:  MOVF   78,W
2A95:  IORWF  4C,W
2A96:  MOVWF  78
2A97:  MOVF   79,W
2A98:  IORWF  4D,W
2A99:  MOVWF  79
2A9A:  MOVF   7A,W
2A9B:  IORWF  4E,W
2A9C:  MOVWF  7A
2A9D:  MOVF   77,W
2A9E:  MOVWF  00
2A9F:  ADDFSR 01,FSR0
2AA0:  MOVF   78,W
2AA1:  MOVWF  00
2AA2:  ADDFSR 01,FSR0
2AA3:  MOVF   79,W
2AA4:  MOVWF  00
2AA5:  ADDFSR 01,FSR0
2AA6:  MOVF   7A,W
2AA7:  MOVWF  00
2AA8:  ADDFSR 3D,FSR0
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
2AA9:  MOVF   39,W
2AAA:  MOVWF  7A
2AAB:  MOVF   38,W
2AAC:  MOVWF  49
2AAD:  MOVF   7A,W
2AAE:  MOVWF  4A
2AAF:  MOVF   31,W
2AB0:  MOVWF  7A
2AB1:  MOVF   30,W
2AB2:  MOVWF  04
2AB3:  MOVF   7A,W
2AB4:  MOVWF  05
2AB5:  MOVF   00,W
2AB6:  MOVWF  4B
2AB7:  ADDFSR 01,FSR0
2AB8:  MOVF   00,W
2AB9:  MOVWF  4C
2ABA:  ADDFSR 01,FSR0
2ABB:  MOVF   00,W
2ABC:  MOVWF  4D
2ABD:  ADDFSR 01,FSR0
2ABE:  MOVF   00,W
2ABF:  MOVWF  4E
2AC0:  ADDFSR 3D,FSR0
2AC1:  MOVLW  04
2AC2:  ADDWF  4B,F
2AC3:  MOVLW  00
2AC4:  ADDWFC 4C,F
2AC5:  MOVLW  00
2AC6:  ADDWFC 4D,F
2AC7:  MOVLW  00
2AC8:  ADDWFC 4E,F
2AC9:  MOVLB  0D
2ACA:  MOVF   49,W
2ACB:  MOVLB  11
2ACC:  MOVWF  52
2ACD:  MOVLB  0D
2ACE:  MOVF   48,W
2ACF:  MOVLB  11
2AD0:  MOVWF  51
2AD1:  MOVLB  0D
2AD2:  MOVF   47,W
2AD3:  MOVLB  11
2AD4:  MOVWF  50
2AD5:  MOVLB  0D
2AD6:  MOVF   46,W
2AD7:  MOVLB  11
2AD8:  MOVWF  4F
2AD9:  MOVF   4E,W
2ADA:  MOVWF  56
2ADB:  MOVF   4D,W
2ADC:  MOVWF  55
2ADD:  MOVF   4C,W
2ADE:  MOVWF  54
2ADF:  MOVF   4B,W
2AE0:  MOVWF  53
2AE1:  MOVLP  20
2AE2:  MOVLB  00
2AE3:  GOTO   5A5
2AE4:  MOVLP  28
2AE5:  MOVLB  11
2AE6:  MOVF   4A,W
2AE7:  MOVWF  05
2AE8:  MOVF   49,W
2AE9:  MOVWF  04
2AEA:  MOVF   78,W
2AEB:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
2AEC:  MOVLW  3B
2AED:  MOVLB  03
2AEE:  MOVWF  11
2AEF:  MOVLW  05
2AF0:  MOVWF  12
2AF1:  MOVLP  00
2AF2:  MOVLB  00
2AF3:  CALL   749
2AF4:  MOVLP  28
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
2AF5:  MOVLB  11
2AF6:  MOVF   3B,W
2AF7:  MOVWF  7A
2AF8:  MOVF   3A,W
2AF9:  MOVWF  04
2AFA:  MOVF   7A,W
2AFB:  MOVWF  05
2AFC:  MOVF   00,W
2AFD:  MOVWF  49
2AFE:  ADDFSR 01,FSR0
2AFF:  MOVF   00,W
2B00:  MOVWF  4A
2B01:  ADDFSR 01,FSR0
2B02:  MOVF   00,W
2B03:  MOVWF  4B
2B04:  ADDFSR 01,FSR0
2B05:  MOVF   00,W
2B06:  MOVWF  4C
2B07:  ADDFSR 3D,FSR0
2B08:  MOVF   31,W
2B09:  MOVWF  7A
2B0A:  MOVF   30,W
2B0B:  MOVWF  04
2B0C:  MOVF   7A,W
2B0D:  MOVWF  05
2B0E:  MOVF   00,W
2B0F:  MOVWF  4D
2B10:  ADDFSR 01,FSR0
2B11:  MOVF   00,W
2B12:  MOVWF  4E
2B13:  ADDFSR 01,FSR0
2B14:  MOVF   00,W
2B15:  MOVWF  4F
2B16:  ADDFSR 01,FSR0
2B17:  MOVF   00,W
2B18:  MOVWF  50
2B19:  ADDFSR 3D,FSR0
2B1A:  MOVLW  44
2B1B:  MOVLB  03
2B1C:  MOVWF  11
2B1D:  MOVLW  05
2B1E:  MOVWF  12
2B1F:  BCF    03.0
2B20:  MOVLW  0C
2B21:  MOVLB  11
2B22:  MOVWF  51
2B23:  MOVLP  08
2B24:  MOVLB  00
2B25:  CALL   2C9
2B26:  MOVLP  28
2B27:  MOVLW  41
2B28:  MOVWF  04
2B29:  MOVLB  11
2B2A:  MOVF   4C,W
2B2B:  MOVWF  54
2B2C:  MOVF   4B,W
2B2D:  MOVWF  53
2B2E:  MOVF   4A,W
2B2F:  MOVWF  52
2B30:  MOVF   49,W
2B31:  MOVWF  51
2B32:  MOVLP  08
2B33:  MOVLB  00
2B34:  CALL   395
2B35:  MOVLP  28
2B36:  MOVLW  4B
2B37:  MOVLB  03
2B38:  MOVWF  11
2B39:  MOVLW  05
2B3A:  MOVWF  12
2B3B:  BSF    03.0
2B3C:  MOVLW  08
2B3D:  MOVLB  11
2B3E:  MOVWF  51
2B3F:  MOVLP  08
2B40:  MOVLB  00
2B41:  CALL   2C9
2B42:  MOVLP  28
2B43:  MOVLB  11
2B44:  MOVF   50,W
2B45:  MOVWF  51
2B46:  MOVLW  37
2B47:  MOVWF  52
2B48:  MOVLP  08
2B49:  MOVLB  00
2B4A:  CALL   592
2B4B:  MOVLP  28
2B4C:  MOVLB  11
2B4D:  MOVF   4F,W
2B4E:  MOVWF  51
2B4F:  MOVLW  37
2B50:  MOVWF  52
2B51:  MOVLP  08
2B52:  MOVLB  00
2B53:  CALL   592
2B54:  MOVLP  28
2B55:  MOVLB  11
2B56:  MOVF   4E,W
2B57:  MOVWF  51
2B58:  MOVLW  37
2B59:  MOVWF  52
2B5A:  MOVLP  08
2B5B:  MOVLB  00
2B5C:  CALL   592
2B5D:  MOVLP  28
2B5E:  MOVLB  11
2B5F:  MOVF   4D,W
2B60:  MOVWF  51
2B61:  MOVLW  37
2B62:  MOVWF  52
2B63:  MOVLP  08
2B64:  MOVLB  00
2B65:  CALL   592
2B66:  MOVLP  28
2B67:  MOVLW  29
2B68:  MOVLB  13
2B69:  MOVWF  2E
2B6A:  MOVLP  00
2B6B:  MOVLB  00
2B6C:  CALL   721
2B6D:  MOVLP  28
2B6E:  MOVLW  0D
2B6F:  MOVLB  13
2B70:  MOVWF  2E
2B71:  MOVLP  00
2B72:  MOVLB  00
2B73:  CALL   721
2B74:  MOVLP  28
2B75:  MOVLW  0A
2B76:  MOVLB  13
2B77:  MOVWF  2E
2B78:  MOVLP  00
2B79:  MOVLB  00
2B7A:  CALL   721
2B7B:  MOVLP  28
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
2B7C:  MOVLB  11
2B7D:  MOVF   39,W
2B7E:  MOVWF  7A
2B7F:  MOVF   38,W
2B80:  MOVWF  04
2B81:  MOVF   7A,W
2B82:  MOVWF  05
2B83:  MOVF   00,W
2B84:  MOVWF  49
2B85:  MOVF   31,W
2B86:  MOVWF  7A
2B87:  MOVF   30,W
2B88:  MOVWF  04
2B89:  MOVF   7A,W
2B8A:  MOVWF  05
2B8B:  MOVF   00,W
2B8C:  MOVWF  4A
2B8D:  ADDFSR 01,FSR0
2B8E:  MOVF   00,W
2B8F:  MOVWF  4B
2B90:  ADDFSR 01,FSR0
2B91:  MOVF   00,W
2B92:  MOVWF  4C
2B93:  ADDFSR 01,FSR0
2B94:  MOVF   00,W
2B95:  MOVWF  4D
2B96:  ADDFSR 3D,FSR0
2B97:  MOVLW  04
2B98:  ADDWF  4A,F
2B99:  MOVLW  00
2B9A:  ADDWFC 4B,F
2B9B:  MOVLW  00
2B9C:  ADDWFC 4C,F
2B9D:  MOVLW  00
2B9E:  ADDWFC 4D,F
2B9F:  MOVLW  54
2BA0:  MOVLB  03
2BA1:  MOVWF  11
2BA2:  MOVLW  05
2BA3:  MOVWF  12
2BA4:  BCF    03.0
2BA5:  MOVLW  0C
2BA6:  MOVLB  11
2BA7:  MOVWF  51
2BA8:  MOVLP  08
2BA9:  MOVLB  00
2BAA:  CALL   2C9
2BAB:  MOVLP  28
2BAC:  MOVLB  11
2BAD:  MOVF   49,W
2BAE:  MOVWF  4E
2BAF:  MOVLW  18
2BB0:  MOVWF  4F
2BB1:  MOVLP  20
2BB2:  MOVLB  00
2BB3:  CALL   44D
2BB4:  MOVLP  28
2BB5:  MOVLW  5B
2BB6:  MOVLB  03
2BB7:  MOVWF  11
2BB8:  MOVLW  05
2BB9:  MOVWF  12
2BBA:  BCF    03.0
2BBB:  MOVLW  09
2BBC:  MOVLB  11
2BBD:  MOVWF  51
2BBE:  MOVLP  08
2BBF:  MOVLB  00
2BC0:  CALL   2C9
2BC1:  MOVLP  28
2BC2:  MOVLB  11
2BC3:  MOVF   4D,W
2BC4:  MOVWF  51
2BC5:  MOVLW  37
2BC6:  MOVWF  52
2BC7:  MOVLP  08
2BC8:  MOVLB  00
2BC9:  CALL   592
2BCA:  MOVLP  28
2BCB:  MOVLB  11
2BCC:  MOVF   4C,W
2BCD:  MOVWF  51
2BCE:  MOVLW  37
2BCF:  MOVWF  52
2BD0:  MOVLP  08
2BD1:  MOVLB  00
2BD2:  CALL   592
2BD3:  MOVLP  28
2BD4:  MOVLB  11
2BD5:  MOVF   4B,W
2BD6:  MOVWF  51
2BD7:  MOVLW  37
2BD8:  MOVWF  52
2BD9:  MOVLP  08
2BDA:  MOVLB  00
2BDB:  CALL   592
2BDC:  MOVLP  28
2BDD:  MOVLB  11
2BDE:  MOVF   4A,W
2BDF:  MOVWF  51
2BE0:  MOVLW  37
2BE1:  MOVWF  52
2BE2:  MOVLP  08
2BE3:  MOVLB  00
2BE4:  CALL   592
2BE5:  MOVLP  28
2BE6:  MOVLW  62
2BE7:  MOVLB  03
2BE8:  MOVWF  11
2BE9:  MOVLW  05
2BEA:  MOVWF  12
2BEB:  BCF    03.0
2BEC:  MOVLW  05
2BED:  MOVLB  11
2BEE:  MOVWF  51
2BEF:  MOVLP  08
2BF0:  MOVLB  00
2BF1:  CALL   2C9
2BF2:  MOVLP  28
2BF3:  MOVLP  30
2BF4:  GOTO   46A (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
*
26C3:  MOVLW  65
26C4:  MOVLB  03
26C5:  MOVWF  11
26C6:  MOVLW  05
26C7:  MOVWF  12
26C8:  MOVLP  00
26C9:  MOVLB  00
26CA:  CALL   749
26CB:  MOVLP  20
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
26CC:  MOVLB  11
26CD:  MOVF   2F,W
26CE:  MOVWF  37
26CF:  MOVF   2E,W
26D0:  MOVWF  36
26D1:  MOVF   2D,W
26D2:  MOVWF  35
26D3:  MOVF   2C,W
26D4:  MOVWF  34
26D5:  MOVLB  00
26D6:  MOVLB  11
26D7:  MOVF   37,W
26D8:  SUBWF  33,W
26D9:  BTFSC  03.0
26DA:  GOTO   6DD
26DB:  MOVLB  00
26DC:  GOTO   721
26DD:  MOVLB  00
26DE:  BTFSS  03.2
26DF:  GOTO   6FC
26E0:  MOVLB  11
26E1:  MOVF   36,W
26E2:  SUBWF  32,W
26E3:  BTFSC  03.0
26E4:  GOTO   6E7
26E5:  MOVLB  00
26E6:  GOTO   721
26E7:  MOVLB  00
26E8:  BTFSS  03.2
26E9:  GOTO   6FC
26EA:  MOVLB  11
26EB:  MOVF   35,W
26EC:  SUBWF  31,W
26ED:  BTFSC  03.0
26EE:  GOTO   6F1
26EF:  MOVLB  00
26F0:  GOTO   721
26F1:  MOVLB  00
26F2:  BTFSS  03.2
26F3:  GOTO   6FC
26F4:  MOVLB  11
26F5:  MOVF   30,W
26F6:  SUBWF  34,W
26F7:  BTFSS  03.0
26F8:  GOTO   6FB
26F9:  MOVLB  00
26FA:  GOTO   721
26FB:  MOVLB  00
....................         subsector_4kByte_erase(smf, addr);
26FC:  MOVLB  0D
26FD:  MOVF   49,W
26FE:  MOVLB  11
26FF:  MOVWF  47
2700:  MOVLB  0D
2701:  MOVF   48,W
2702:  MOVLB  11
2703:  MOVWF  46
2704:  MOVLB  0D
2705:  MOVF   47,W
2706:  MOVLB  11
2707:  MOVWF  45
2708:  MOVLB  0D
2709:  MOVF   46,W
270A:  MOVLB  11
270B:  MOVWF  44
270C:  MOVF   37,W
270D:  MOVWF  4B
270E:  MOVF   36,W
270F:  MOVWF  4A
2710:  MOVF   35,W
2711:  MOVWF  49
2712:  MOVF   34,W
2713:  MOVWF  48
2714:  MOVLP  28
2715:  MOVLB  00
2716:  CALL   3F5
2717:  MOVLP  20
2718:  MOVLW  10
2719:  MOVLB  11
271A:  ADDWF  35,F
271B:  MOVLW  00
271C:  ADDWFC 36,F
271D:  MOVLW  00
271E:  ADDWFC 37,F
271F:  MOVLB  00
2720:  GOTO   6D6
2721:  MOVLP  30
2722:  GOTO   50C (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
2723:  MOVLB  11
2724:  CLRF   38
2725:  MOVF   2D,W
2726:  ANDLW  F0
2727:  MOVWF  39
2728:  CLRF   3A
2729:  CLRF   3B
272A:  MOVF   30,W
272B:  ADDWF  2C,W
272C:  MOVWF  44
272D:  MOVF   31,W
272E:  ADDWFC 2D,W
272F:  MOVWF  45
2730:  MOVF   32,W
2731:  ADDWFC 2E,W
2732:  MOVWF  46
2733:  MOVF   33,W
2734:  ADDWFC 2F,W
2735:  MOVWF  47
2736:  MOVLW  FF
2737:  ADDWF  44,F
2738:  MOVLW  0F
2739:  ADDWFC 45,F
273A:  MOVLW  00
273B:  ADDWFC 46,F
273C:  MOVLW  00
273D:  ADDWFC 47,F
273E:  CLRF   3C
273F:  MOVF   45,W
2740:  ANDLW  F0
2741:  MOVWF  3D
2742:  CLRF   3E
2743:  CLRF   3F
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
2744:  MOVF   3B,W
2745:  MOVWF  43
2746:  MOVF   3A,W
2747:  MOVWF  42
2748:  MOVF   39,W
2749:  MOVWF  41
274A:  MOVF   38,W
274B:  MOVWF  40
274C:  MOVLB  00
274D:  MOVLB  11
274E:  MOVF   43,W
274F:  SUBWF  3F,W
2750:  BTFSC  03.0
2751:  GOTO   754
2752:  MOVLB  00
2753:  GOTO   7BE
2754:  MOVLB  00
2755:  BTFSS  03.2
2756:  GOTO   773
2757:  MOVLB  11
2758:  MOVF   42,W
2759:  SUBWF  3E,W
275A:  BTFSC  03.0
275B:  GOTO   75E
275C:  MOVLB  00
275D:  GOTO   7BE
275E:  MOVLB  00
275F:  BTFSS  03.2
2760:  GOTO   773
2761:  MOVLB  11
2762:  MOVF   41,W
2763:  SUBWF  3D,W
2764:  BTFSC  03.0
2765:  GOTO   768
2766:  MOVLB  00
2767:  GOTO   7BE
2768:  MOVLB  00
2769:  BTFSS  03.2
276A:  GOTO   773
276B:  MOVLB  11
276C:  MOVF   3C,W
276D:  SUBWF  40,W
276E:  BTFSS  03.0
276F:  GOTO   772
2770:  MOVLB  00
2771:  GOTO   7BE
2772:  MOVLB  00
2773:  MOVLB  11
2774:  MOVF   43,W
2775:  SUBWF  37,W
2776:  BTFSC  03.0
2777:  GOTO   77A
2778:  MOVLB  00
2779:  GOTO   7BE
277A:  MOVLB  00
277B:  BTFSS  03.2
277C:  GOTO   799
277D:  MOVLB  11
277E:  MOVF   42,W
277F:  SUBWF  36,W
2780:  BTFSC  03.0
2781:  GOTO   784
2782:  MOVLB  00
2783:  GOTO   7BE
2784:  MOVLB  00
2785:  BTFSS  03.2
2786:  GOTO   799
2787:  MOVLB  11
2788:  MOVF   41,W
2789:  SUBWF  35,W
278A:  BTFSC  03.0
278B:  GOTO   78E
278C:  MOVLB  00
278D:  GOTO   7BE
278E:  MOVLB  00
278F:  BTFSS  03.2
2790:  GOTO   799
2791:  MOVLB  11
2792:  MOVF   34,W
2793:  SUBWF  40,W
2794:  BTFSS  03.0
2795:  GOTO   798
2796:  MOVLB  00
2797:  GOTO   7BE
2798:  MOVLB  00
....................         subsector_4kByte_erase(smf, addr);
2799:  MOVLB  0D
279A:  MOVF   49,W
279B:  MOVLB  11
279C:  MOVWF  47
279D:  MOVLB  0D
279E:  MOVF   48,W
279F:  MOVLB  11
27A0:  MOVWF  46
27A1:  MOVLB  0D
27A2:  MOVF   47,W
27A3:  MOVLB  11
27A4:  MOVWF  45
27A5:  MOVLB  0D
27A6:  MOVF   46,W
27A7:  MOVLB  11
27A8:  MOVWF  44
27A9:  MOVF   43,W
27AA:  MOVWF  4B
27AB:  MOVF   42,W
27AC:  MOVWF  4A
27AD:  MOVF   41,W
27AE:  MOVWF  49
27AF:  MOVF   40,W
27B0:  MOVWF  48
27B1:  MOVLP  28
27B2:  MOVLB  00
27B3:  CALL   3F5
27B4:  MOVLP  20
27B5:  MOVLW  10
27B6:  MOVLB  11
27B7:  ADDWF  41,F
27B8:  MOVLW  00
27B9:  ADDWFC 42,F
27BA:  MOVLW  00
27BB:  ADDWFC 43,F
27BC:  MOVLB  00
27BD:  GOTO   74D
27BE:  MOVLP  30
27BF:  GOTO   54F (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
*
2DD3:  MOVLB  11
2DD4:  MOVF   33,W
2DD5:  MOVWF  3F
2DD6:  MOVF   32,W
2DD7:  MOVWF  3E
2DD8:  MOVF   31,W
2DD9:  MOVWF  3D
2DDA:  MOVF   30,W
2DDB:  MOVWF  3C
2DDC:  MOVF   2F,W
2DDD:  MOVWF  43
2DDE:  MOVF   2E,W
2DDF:  MOVWF  42
2DE0:  MOVF   2D,W
2DE1:  MOVWF  41
2DE2:  MOVF   2C,W
2DE3:  MOVWF  40
2DE4:  MOVF   37,W
2DE5:  MOVWF  47
2DE6:  MOVF   36,W
2DE7:  MOVWF  46
2DE8:  MOVF   35,W
2DE9:  MOVWF  45
2DEA:  MOVF   34,W
2DEB:  MOVWF  44
2DEC:  MOVLB  00
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
2DED:  MOVLB  11
2DEE:  MOVF   3C,F
2DEF:  BTFSC  03.2
2DF0:  GOTO   5F3
2DF1:  MOVLB  00
2DF2:  GOTO   609
2DF3:  MOVLB  00
2DF4:  MOVLB  11
2DF5:  MOVF   3D,F
2DF6:  BTFSC  03.2
2DF7:  GOTO   5FA
2DF8:  MOVLB  00
2DF9:  GOTO   609
2DFA:  MOVLB  00
2DFB:  MOVLB  11
2DFC:  MOVF   3E,F
2DFD:  BTFSC  03.2
2DFE:  GOTO   601
2DFF:  MOVLB  00
2E00:  GOTO   609
2E01:  MOVLB  00
2E02:  MOVLB  11
2E03:  MOVF   3F,F
2E04:  BTFSS  03.2
2E05:  GOTO   608
2E06:  MOVLB  00
2E07:  GOTO   6DA
2E08:  MOVLB  00
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
2E09:  MOVLB  11
2E0A:  MOVF   3F,F
2E0B:  BTFSC  03.2
2E0C:  GOTO   60F
2E0D:  MOVLB  00
2E0E:  GOTO   626
2E0F:  MOVLB  00
2E10:  MOVLB  11
2E11:  MOVF   3E,F
2E12:  BTFSC  03.2
2E13:  GOTO   616
2E14:  MOVLB  00
2E15:  GOTO   626
2E16:  MOVLB  00
2E17:  MOVLB  11
2E18:  MOVF   3D,F
2E19:  BTFSC  03.2
2E1A:  GOTO   61D
2E1B:  MOVLB  00
2E1C:  GOTO   626
2E1D:  MOVLB  00
2E1E:  MOVLB  11
2E1F:  MOVF   3C,W
2E20:  SUBLW  40
2E21:  BTFSS  03.0
2E22:  GOTO   625
2E23:  MOVLB  00
2E24:  GOTO   629
2E25:  MOVLB  00
2E26:  CLRF   7A
2E27:  MOVLW  40
2E28:  GOTO   62E
2E29:  MOVLB  11
2E2A:  MOVF   3D,W
2E2B:  MOVWF  7A
2E2C:  MOVF   3C,W
2E2D:  MOVLB  00
2E2E:  MOVLB  11
2E2F:  MOVWF  48
2E30:  MOVF   7A,W
2E31:  MOVWF  49
2E32:  MOVLB  00
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
2E33:  MOVLB  0D
2E34:  MOVF   45,W
2E35:  MOVLB  13
2E36:  MOVWF  2C
2E37:  MOVLB  0D
2E38:  MOVF   44,W
2E39:  MOVLB  13
2E3A:  MOVWF  2B
2E3B:  MOVLB  0D
2E3C:  MOVF   43,W
2E3D:  MOVLB  13
2E3E:  MOVWF  2A
2E3F:  MOVLB  0D
2E40:  MOVF   42,W
2E41:  MOVLB  13
2E42:  MOVWF  29
2E43:  MOVLB  11
2E44:  MOVF   43,W
2E45:  MOVLB  13
2E46:  MOVWF  30
2E47:  MOVLB  11
2E48:  MOVF   42,W
2E49:  MOVLB  13
2E4A:  MOVWF  2F
2E4B:  MOVLB  11
2E4C:  MOVF   41,W
2E4D:  MOVLB  13
2E4E:  MOVWF  2E
2E4F:  MOVLB  11
2E50:  MOVF   40,W
2E51:  MOVLB  13
2E52:  MOVWF  2D
2E53:  MOVLB  11
2E54:  MOVF   39,W
2E55:  MOVLB  13
2E56:  MOVWF  32
2E57:  MOVLB  11
2E58:  MOVF   38,W
2E59:  MOVLB  13
2E5A:  MOVWF  31
2E5B:  CLRF   36
2E5C:  CLRF   35
2E5D:  MOVLB  11
2E5E:  MOVF   49,W
2E5F:  MOVLB  13
2E60:  MOVWF  34
2E61:  MOVLB  11
2E62:  MOVF   48,W
2E63:  MOVLB  13
2E64:  MOVWF  33
2E65:  MOVLP  08
2E66:  MOVLB  00
2E67:  CALL   1D4
2E68:  MOVLP  28
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
2E69:  MOVLB  0D
2E6A:  MOVF   49,W
2E6B:  MOVLB  13
2E6C:  MOVWF  2C
2E6D:  MOVLB  0D
2E6E:  MOVF   48,W
2E6F:  MOVLB  13
2E70:  MOVWF  2B
2E71:  MOVLB  0D
2E72:  MOVF   47,W
2E73:  MOVLB  13
2E74:  MOVWF  2A
2E75:  MOVLB  0D
2E76:  MOVF   46,W
2E77:  MOVLB  13
2E78:  MOVWF  29
2E79:  MOVLB  11
2E7A:  MOVF   47,W
2E7B:  MOVLB  13
2E7C:  MOVWF  30
2E7D:  MOVLB  11
2E7E:  MOVF   46,W
2E7F:  MOVLB  13
2E80:  MOVWF  2F
2E81:  MOVLB  11
2E82:  MOVF   45,W
2E83:  MOVLB  13
2E84:  MOVWF  2E
2E85:  MOVLB  11
2E86:  MOVF   44,W
2E87:  MOVLB  13
2E88:  MOVWF  2D
2E89:  MOVLB  11
2E8A:  MOVF   39,W
2E8B:  MOVLB  13
2E8C:  MOVWF  32
2E8D:  MOVLB  11
2E8E:  MOVF   38,W
2E8F:  MOVLB  13
2E90:  MOVWF  31
2E91:  MOVLB  11
2E92:  MOVF   49,W
2E93:  MOVLB  13
2E94:  MOVWF  34
2E95:  MOVLB  11
2E96:  MOVF   48,W
2E97:  MOVLB  13
2E98:  MOVWF  33
2E99:  MOVLP  10
2E9A:  MOVLB  00
2E9B:  CALL   000
2E9C:  MOVLP  28
.................... 
....................         src_addr += chunk;
2E9D:  MOVLB  11
2E9E:  MOVF   48,W
2E9F:  ADDWF  40,F
2EA0:  MOVF   49,W
2EA1:  ADDWFC 41,F
2EA2:  MOVLW  00
2EA3:  ADDWFC 42,F
2EA4:  MOVLW  00
2EA5:  ADDWFC 43,F
....................         data_write_addr += chunk;
2EA6:  MOVF   48,W
2EA7:  ADDWF  44,F
2EA8:  MOVF   49,W
2EA9:  ADDWFC 45,F
2EAA:  MOVLW  00
2EAB:  ADDWFC 46,F
2EAC:  MOVLW  00
2EAD:  ADDWFC 47,F
....................         *used_size += chunk;
2EAE:  MOVF   3B,W
2EAF:  MOVWF  7A
2EB0:  MOVF   3A,W
2EB1:  MOVWF  04
2EB2:  MOVF   7A,W
2EB3:  MOVWF  05
2EB4:  MOVF   48,W
2EB5:  ADDWF  00,W
2EB6:  MOVWF  77
2EB7:  ADDFSR 01,FSR0
2EB8:  MOVF   49,W
2EB9:  ADDWFC 00,W
2EBA:  MOVWF  78
2EBB:  ADDFSR 01,FSR0
2EBC:  MOVLW  00
2EBD:  ADDWFC 00,W
2EBE:  MOVWF  79
2EBF:  ADDFSR 01,FSR0
2EC0:  MOVLW  00
2EC1:  ADDWFC 00,W
2EC2:  MOVWF  7A
2EC3:  ADDFSR 3D,FSR0
2EC4:  MOVF   77,W
2EC5:  MOVWF  00
2EC6:  ADDFSR 01,FSR0
2EC7:  MOVF   78,W
2EC8:  MOVWF  00
2EC9:  ADDFSR 01,FSR0
2ECA:  MOVF   79,W
2ECB:  MOVWF  00
2ECC:  ADDFSR 01,FSR0
2ECD:  MOVF   7A,W
2ECE:  MOVWF  00
2ECF:  ADDFSR 3D,FSR0
....................         remaining -= chunk;
2ED0:  MOVF   48,W
2ED1:  SUBWF  3C,F
2ED2:  MOVF   49,W
2ED3:  SUBWFC 3D,F
2ED4:  MOVLW  00
2ED5:  SUBWFC 3E,F
2ED6:  MOVLW  00
2ED7:  SUBWFC 3F,F
2ED8:  MOVLB  00
2ED9:  GOTO   5ED
....................     }
2EDA:  MOVLP  30
2EDB:  GOTO   583 (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
31EB:  MOVLW  80
31EC:  MOVLB  03
31ED:  MOVWF  11
31EE:  MOVLW  05
31EF:  MOVWF  12
31F0:  MOVLP  00
31F1:  MOVLB  00
31F2:  CALL   749
31F3:  MOVLP  30
....................     subsector_4kByte_erase(smf, base_addr);
31F4:  MOVLB  0D
31F5:  MOVF   49,W
31F6:  MOVLB  11
31F7:  MOVWF  47
31F8:  MOVLB  0D
31F9:  MOVF   48,W
31FA:  MOVLB  11
31FB:  MOVWF  46
31FC:  MOVLB  0D
31FD:  MOVF   47,W
31FE:  MOVLB  11
31FF:  MOVWF  45
3200:  MOVLB  0D
3201:  MOVF   46,W
3202:  MOVLB  11
3203:  MOVWF  44
3204:  MOVF   2F,W
3205:  MOVWF  4B
3206:  MOVF   2E,W
3207:  MOVWF  4A
3208:  MOVF   2D,W
3209:  MOVWF  49
320A:  MOVF   2C,W
320B:  MOVWF  48
320C:  MOVLP  28
320D:  MOVLB  00
320E:  CALL   3F5
320F:  MOVLP  30
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
3210:  MOVLB  11
3211:  MOVF   33,W
3212:  MOVWF  3E
3213:  MOVF   32,W
3214:  MOVWF  3D
3215:  MOVF   31,W
3216:  MOVWF  3C
3217:  MOVF   30,W
3218:  MOVWF  3B
3219:  CLRF   3C
321A:  CLRF   3D
321B:  CLRF   3E
321C:  MOVLB  0D
321D:  MOVF   49,W
321E:  MOVLB  11
321F:  MOVWF  46
3220:  MOVLB  0D
3221:  MOVF   48,W
3222:  MOVLB  11
3223:  MOVWF  45
3224:  MOVLB  0D
3225:  MOVF   47,W
3226:  MOVLB  11
3227:  MOVWF  44
3228:  MOVLB  0D
3229:  MOVF   46,W
322A:  MOVLB  11
322B:  MOVWF  43
322C:  MOVF   2F,W
322D:  MOVWF  4A
322E:  MOVF   2E,W
322F:  MOVWF  49
3230:  MOVF   2D,W
3231:  MOVWF  48
3232:  MOVF   2C,W
3233:  MOVWF  47
3234:  MOVF   3B,W
3235:  MOVWF  4B
3236:  MOVLB  00
3237:  CALL   000
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
3238:  MOVLW  01
3239:  MOVLB  11
323A:  ADDWF  2C,W
323B:  MOVWF  3A
323C:  MOVLW  00
323D:  ADDWFC 2D,W
323E:  MOVWF  3B
323F:  MOVLW  00
3240:  ADDWFC 2E,W
3241:  MOVWF  3C
3242:  MOVLW  00
3243:  ADDWFC 2F,W
3244:  MOVWF  3D
3245:  MOVF   31,W
3246:  MOVWF  3F
3247:  MOVF   32,W
3248:  MOVWF  40
3249:  MOVF   33,W
324A:  MOVWF  41
324B:  CLRF   42
324C:  CLRF   40
324D:  CLRF   41
324E:  CLRF   42
324F:  MOVLB  0D
3250:  MOVF   49,W
3251:  MOVLB  11
3252:  MOVWF  46
3253:  MOVLB  0D
3254:  MOVF   48,W
3255:  MOVLB  11
3256:  MOVWF  45
3257:  MOVLB  0D
3258:  MOVF   47,W
3259:  MOVLB  11
325A:  MOVWF  44
325B:  MOVLB  0D
325C:  MOVF   46,W
325D:  MOVLB  11
325E:  MOVWF  43
325F:  MOVF   3D,W
3260:  MOVWF  4A
3261:  MOVF   3C,W
3262:  MOVWF  49
3263:  MOVF   3B,W
3264:  MOVWF  48
3265:  MOVF   3A,W
3266:  MOVWF  47
3267:  MOVF   3F,W
3268:  MOVWF  4B
3269:  MOVLB  00
326A:  CALL   000
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
326B:  MOVLW  02
326C:  MOVLB  11
326D:  ADDWF  2C,W
326E:  MOVWF  3A
326F:  MOVLW  00
3270:  ADDWFC 2D,W
3271:  MOVWF  3B
3272:  MOVLW  00
3273:  ADDWFC 2E,W
3274:  MOVWF  3C
3275:  MOVLW  00
3276:  ADDWFC 2F,W
3277:  MOVWF  3D
3278:  MOVF   32,W
3279:  MOVWF  3F
327A:  MOVF   33,W
327B:  MOVWF  40
327C:  CLRF   41
327D:  CLRF   42
327E:  CLRF   40
327F:  CLRF   41
3280:  CLRF   42
3281:  MOVLB  0D
3282:  MOVF   49,W
3283:  MOVLB  11
3284:  MOVWF  46
3285:  MOVLB  0D
3286:  MOVF   48,W
3287:  MOVLB  11
3288:  MOVWF  45
3289:  MOVLB  0D
328A:  MOVF   47,W
328B:  MOVLB  11
328C:  MOVWF  44
328D:  MOVLB  0D
328E:  MOVF   46,W
328F:  MOVLB  11
3290:  MOVWF  43
3291:  MOVF   3D,W
3292:  MOVWF  4A
3293:  MOVF   3C,W
3294:  MOVWF  49
3295:  MOVF   3B,W
3296:  MOVWF  48
3297:  MOVF   3A,W
3298:  MOVWF  47
3299:  MOVF   3F,W
329A:  MOVWF  4B
329B:  MOVLB  00
329C:  CALL   000
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
329D:  MOVLW  03
329E:  MOVLB  11
329F:  ADDWF  2C,W
32A0:  MOVWF  3A
32A1:  MOVLW  00
32A2:  ADDWFC 2D,W
32A3:  MOVWF  3B
32A4:  MOVLW  00
32A5:  ADDWFC 2E,W
32A6:  MOVWF  3C
32A7:  MOVLW  00
32A8:  ADDWFC 2F,W
32A9:  MOVWF  3D
32AA:  MOVF   33,W
32AB:  MOVWF  3F
32AC:  CLRF   40
32AD:  CLRF   41
32AE:  CLRF   42
32AF:  CLRF   40
32B0:  CLRF   41
32B1:  CLRF   42
32B2:  MOVLB  0D
32B3:  MOVF   49,W
32B4:  MOVLB  11
32B5:  MOVWF  46
32B6:  MOVLB  0D
32B7:  MOVF   48,W
32B8:  MOVLB  11
32B9:  MOVWF  45
32BA:  MOVLB  0D
32BB:  MOVF   47,W
32BC:  MOVLB  11
32BD:  MOVWF  44
32BE:  MOVLB  0D
32BF:  MOVF   46,W
32C0:  MOVLB  11
32C1:  MOVWF  43
32C2:  MOVF   3D,W
32C3:  MOVWF  4A
32C4:  MOVF   3C,W
32C5:  MOVWF  49
32C6:  MOVF   3B,W
32C7:  MOVWF  48
32C8:  MOVF   3A,W
32C9:  MOVWF  47
32CA:  MOVF   3F,W
32CB:  MOVWF  4B
32CC:  MOVLB  00
32CD:  CALL   000
....................     write_data_byte(smf, base_addr + 4, loop_count);
32CE:  MOVLW  04
32CF:  MOVLB  11
32D0:  ADDWF  2C,W
32D1:  MOVWF  3A
32D2:  MOVLW  00
32D3:  ADDWFC 2D,W
32D4:  MOVWF  3B
32D5:  MOVLW  00
32D6:  ADDWFC 2E,W
32D7:  MOVWF  3C
32D8:  MOVLW  00
32D9:  ADDWFC 2F,W
32DA:  MOVWF  3D
32DB:  MOVLB  0D
32DC:  MOVF   49,W
32DD:  MOVLB  11
32DE:  MOVWF  46
32DF:  MOVLB  0D
32E0:  MOVF   48,W
32E1:  MOVLB  11
32E2:  MOVWF  45
32E3:  MOVLB  0D
32E4:  MOVF   47,W
32E5:  MOVLB  11
32E6:  MOVWF  44
32E7:  MOVLB  0D
32E8:  MOVF   46,W
32E9:  MOVLB  11
32EA:  MOVWF  43
32EB:  MOVF   3D,W
32EC:  MOVWF  4A
32ED:  MOVF   3C,W
32EE:  MOVWF  49
32EF:  MOVF   3B,W
32F0:  MOVWF  48
32F1:  MOVF   3A,W
32F2:  MOVWF  47
32F3:  MOVF   34,W
32F4:  MOVWF  4B
32F5:  MOVLB  00
32F6:  CALL   000
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
32F7:  MOVLW  8A
32F8:  MOVLB  03
32F9:  MOVWF  11
32FA:  MOVLW  05
32FB:  MOVWF  12
32FC:  BCF    03.0
32FD:  MOVLW  0C
32FE:  MOVLB  11
32FF:  MOVWF  51
3300:  MOVLP  08
3301:  MOVLB  00
3302:  CALL   2C9
3303:  MOVLP  30
3304:  MOVLW  41
3305:  MOVWF  04
3306:  MOVLB  11
3307:  MOVF   33,W
3308:  MOVWF  3D
3309:  MOVF   32,W
330A:  MOVWF  3C
330B:  MOVF   31,W
330C:  MOVWF  3B
330D:  MOVF   30,W
330E:  MOVWF  3A
330F:  MOVLB  00
*
33CA:  MOVLW  0D
33CB:  MOVLB  13
33CC:  MOVWF  2E
33CD:  MOVLP  00
33CE:  MOVLB  00
33CF:  CALL   721
33D0:  MOVLP  30
33D1:  MOVLW  0A
33D2:  MOVLB  13
33D3:  MOVWF  2E
33D4:  MOVLP  00
33D5:  MOVLB  00
33D6:  CALL   721
33D7:  MOVLP  30
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
33D8:  MOVLW  93
33D9:  MOVLB  03
33DA:  MOVWF  11
33DB:  MOVLW  05
33DC:  MOVWF  12
33DD:  BCF    03.0
33DE:  MOVLW  0D
33DF:  MOVLB  11
33E0:  MOVWF  51
33E1:  MOVLP  08
33E2:  MOVLB  00
33E3:  CALL   2C9
33E4:  MOVLP  30
33E5:  MOVLB  11
33E6:  MOVF   34,W
33E7:  MOVWF  3A
33E8:  MOVLW  1B
33E9:  MOVWF  3B
33EA:  MOVLP  08
33EB:  MOVLB  00
33EC:  CALL   430
33ED:  MOVLP  30
33EE:  MOVLW  9A
33EF:  MOVLB  03
33F0:  MOVWF  11
33F1:  MOVLW  05
33F2:  MOVWF  12
33F3:  BSF    03.0
33F4:  MOVLW  04
33F5:  MOVLB  11
33F6:  MOVWF  51
33F7:  MOVLP  08
33F8:  MOVLB  00
33F9:  CALL   2C9
33FA:  MOVLP  30
33FB:  MOVLP  30
33FC:  GOTO   5AA (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... // DI/O RTC
.................... #define RTC_PIN PIN_C1
.................... 
.................... // ADC Settings
.................... #define TEMP_TOP_ADC AD7490_VIN0
.................... #define TEMP_BOT_ADC AD7490_VIN1
.................... #define CIGS_VOLT_ADC AD7490_VIN2
.................... #define CIGS_CURR_ADC AD7490_VIN3
.................... #define PD_ADC AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
22F8:  MOVLB  0F
22F9:  MOVF   5A,W
22FA:  MOVWF  04
22FB:  MOVF   5B,W
22FC:  MOVWF  05
22FD:  ADDFSR 00,FSR0
22FE:  MOVF   00,W
22FF:  MOVWF  5C
2300:  MOVLW  01
2301:  ADDWF  5A,W
2302:  MOVWF  78
2303:  MOVLW  00
2304:  ADDWFC 5B,W
2305:  MOVWF  7A
2306:  MOVF   78,W
2307:  MOVWF  5D
2308:  MOVF   7A,W
2309:  MOVWF  5E
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
230A:  MOVLW  9D
230B:  MOVLB  03
230C:  MOVWF  11
230D:  MOVLW  05
230E:  MOVWF  12
230F:  MOVLP  00
2310:  MOVLB  00
2311:  CALL   749
2312:  MOVLP  20
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
2313:  MOVLW  C0
2314:  MOVLB  03
2315:  MOVWF  11
2316:  MOVLW  05
2317:  MOVWF  12
2318:  BCF    03.0
2319:  MOVLW  0C
231A:  MOVLB  11
231B:  MOVWF  51
231C:  MOVLP  08
231D:  MOVLB  00
231E:  CALL   2C9
231F:  MOVLP  20
2320:  MOVLB  0F
2321:  MOVF   5C,W
2322:  MOVLB  11
2323:  MOVWF  51
2324:  MOVLW  37
2325:  MOVWF  52
2326:  MOVLP  08
2327:  MOVLB  00
2328:  CALL   592
2329:  MOVLP  20
232A:  MOVLW  C7
232B:  MOVLB  03
232C:  MOVWF  11
232D:  MOVLW  05
232E:  MOVWF  12
232F:  BCF    03.0
2330:  MOVLW  04
2331:  MOVLB  11
2332:  MOVWF  51
2333:  MOVLP  08
2334:  MOVLB  00
2335:  CALL   2C9
2336:  MOVLP  20
....................    switch(command_id)
2337:  MOVLB  0F
2338:  MOVF   5C,W
2339:  XORLW  00
233A:  MOVLB  00
233B:  BTFSC  03.2
233C:  GOTO   36E
233D:  XORLW  10
233E:  BTFSC  03.2
233F:  GOTO   378
2340:  XORLW  11
2341:  BTFSC  03.2
2342:  GOTO   379
2343:  XORLW  03
2344:  BTFSC  03.2
2345:  GOTO   37A
2346:  XORLW  92
2347:  BTFSC  03.2
2348:  GOTO   37B
2349:  XORLW  01
234A:  BTFSC  03.2
234B:  GOTO   385
234C:  XORLW  03
234D:  BTFSC  03.2
234E:  GOTO   38F
234F:  XORLW  01
2350:  BTFSC  03.2
2351:  GOTO   399
2352:  XORLW  07
2353:  BTFSC  03.2
2354:  GOTO   3A3
2355:  XORLW  02
2356:  BTFSC  03.2
2357:  GOTO   3AD
2358:  XORLW  01
2359:  BTFSC  03.2
235A:  GOTO   3B7
235B:  XORLW  0D
235C:  BTFSC  03.2
235D:  GOTO   3C1
235E:  XORLW  05
235F:  BTFSC  03.2
2360:  GOTO   3CB
2361:  XORLW  EE
2362:  BTFSC  03.2
2363:  GOTO   3D5
2364:  XORLW  03
2365:  BTFSC  03.2
2366:  GOTO   3D7
2367:  XORLW  01
2368:  BTFSC  03.2
2369:  GOTO   3D9
236A:  XORLW  03
236B:  BTFSC  03.2
236C:  GOTO   3DB
236D:  GOTO   3DD
....................    {
....................       case 0x00: // example command
....................          fprintf(PC, "\t-> Example command 0x00\r\n");
236E:  MOVLW  CA
236F:  MOVLB  03
2370:  MOVWF  11
2371:  MOVLW  05
2372:  MOVWF  12
2373:  MOVLP  00
2374:  MOVLB  00
2375:  CALL   749
2376:  MOVLP  20
....................          //mode_iv_meas_adc();
....................          break;
2377:  GOTO   3E6
....................       case 0x10:
....................          //mode_measure(parameter);
....................          break;
2378:  GOTO   3E6
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
2379:  GOTO   3E6
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
237A:  GOTO   3E6
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
237B:  MOVLB  0F
237C:  MOVF   5B,W
237D:  MOVWF  60
237E:  MOVF   5A,W
237F:  MOVWF  5F
2380:  MOVLP  08
2381:  MOVLB  00
2382:  GOTO   7BB
2383:  MOVLP  20
....................          break;
2384:  GOTO   3E6
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
2385:  MOVLB  0F
2386:  MOVF   5B,W
2387:  MOVWF  60
2388:  MOVF   5A,W
2389:  MOVWF  5F
238A:  MOVLP  18
238B:  MOVLB  00
238C:  GOTO   000
238D:  MOVLP  20
....................          break;
238E:  GOTO   3E6
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
238F:  MOVLB  0F
2390:  MOVF   5B,W
2391:  MOVWF  60
2392:  MOVF   5A,W
2393:  MOVWF  5F
2394:  MOVLP  18
2395:  MOVLB  00
2396:  GOTO   040
2397:  MOVLP  20
....................          break;
2398:  GOTO   3E6
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
2399:  MOVLB  0F
239A:  MOVF   5B,W
239B:  MOVWF  60
239C:  MOVF   5A,W
239D:  MOVWF  5F
239E:  MOVLP  18
239F:  MOVLB  00
23A0:  GOTO   080
23A1:  MOVLP  20
....................          break;
23A2:  GOTO   3E6
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
23A3:  MOVLB  0F
23A4:  MOVF   5B,W
23A5:  MOVWF  60
23A6:  MOVF   5A,W
23A7:  MOVWF  5F
23A8:  MOVLP  18
23A9:  MOVLB  00
23AA:  GOTO   259
23AB:  MOVLP  20
....................          break;
23AC:  GOTO   3E6
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
23AD:  MOVLB  0F
23AE:  MOVF   5B,W
23AF:  MOVWF  60
23B0:  MOVF   5A,W
23B1:  MOVWF  5F
23B2:  MOVLP  18
23B3:  MOVLB  00
23B4:  GOTO   3B9
23B5:  MOVLP  20
....................          break;
23B6:  GOTO   3E6
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
23B7:  MOVLB  0F
23B8:  MOVF   5B,W
23B9:  MOVWF  60
23BA:  MOVF   5A,W
23BB:  MOVWF  5F
23BC:  MOVLP  18
23BD:  MOVLB  00
23BE:  GOTO   59C
23BF:  MOVLP  20
....................          break;
23C0:  GOTO   3E6
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
23C1:  MOVLB  0F
23C2:  MOVF   5B,W
23C3:  MOVWF  60
23C4:  MOVF   5A,W
23C5:  MOVWF  5F
23C6:  MOVLP  18
23C7:  MOVLB  00
23C8:  GOTO   64E
23C9:  MOVLP  20
....................          break;
23CA:  GOTO   3E6
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
23CB:  MOVLB  0F
23CC:  MOVF   5B,W
23CD:  MOVWF  60
23CE:  MOVF   5A,W
23CF:  MOVWF  5F
23D0:  MOVLP  18
23D1:  MOVLB  00
23D2:  GOTO   6EC
23D3:  MOVLP  20
....................          break;
23D4:  GOTO   3E6
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
23D5:  CALL   000
....................          break;
23D6:  GOTO   3E6
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
23D7:  CALL   000
....................          break;
23D8:  GOTO   3E6
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
23D9:  CALL   000
....................          break;
23DA:  GOTO   3E6
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
23DB:  CALL   000
....................          break;
23DC:  GOTO   3E6
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
23DD:  MOVLW  D8
23DE:  MOVLB  03
23DF:  MOVWF  11
23E0:  MOVLW  05
23E1:  MOVWF  12
23E2:  MOVLP  00
23E3:  MOVLB  00
23E4:  CALL   749
23E5:  MOVLP  20
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
23E6:  MOVLW  E4
23E7:  MOVLB  03
23E8:  MOVWF  11
23E9:  MOVLW  05
23EA:  MOVWF  12
23EB:  MOVLP  00
23EC:  MOVLB  00
23ED:  CALL   749
23EE:  MOVLP  20
23EF:  MOVLP  20
23F0:  GOTO   415 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
2EDC:  MOVLW  07
2EDD:  MOVLB  03
2EDE:  MOVWF  11
2EDF:  MOVLW  06
2EE0:  MOVWF  12
2EE1:  MOVLP  00
2EE2:  MOVLB  00
2EE3:  CALL   749
2EE4:  MOVLP  28
....................    
....................    switch(command->frame_id)
2EE5:  MOVLB  0F
2EE6:  MOVF   54,W
2EE7:  MOVWF  04
2EE8:  MOVF   55,W
2EE9:  MOVWF  05
2EEA:  ADDFSR 00,FSR0
2EEB:  MOVF   00,W
2EEC:  XORLW  00
2EED:  MOVLB  00
2EEE:  BTFSC  03.2
2EEF:  GOTO   6F7
2EF0:  XORLW  01
2EF1:  BTFSC  03.2
2EF2:  GOTO   701
2EF3:  XORLW  03
2EF4:  BTFSC  03.2
2EF5:  GOTO   711
2EF6:  GOTO   71B
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
2EF7:  MOVLB  0F
2EF8:  MOVF   55,W
2EF9:  MOVWF  57
2EFA:  MOVF   54,W
2EFB:  MOVWF  56
2EFC:  MOVLP  20
2EFD:  MOVLB  00
2EFE:  GOTO   3F1
2EFF:  MOVLP  28
....................          break;
2F00:  GOTO   71B
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
2F01:  MOVLB  0F
2F02:  MOVF   55,W
2F03:  MOVWF  57
2F04:  MOVF   54,W
2F05:  MOVWF  56
2F06:  MOVLP  20
2F07:  MOVLB  00
2F08:  GOTO   422
2F09:  MOVLP  28
2F0A:  MOVF   78,F
2F0B:  BTFSC  03.2
2F0C:  GOTO   710
....................             return TRUE; // if status is finished, return TRUE
2F0D:  MOVLW  01
2F0E:  MOVWF  78
2F0F:  GOTO   71D
....................          }        
....................          break;
2F10:  GOTO   71B
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
2F11:  MOVLB  0F
2F12:  MOVF   55,W
2F13:  MOVWF  57
2F14:  MOVF   54,W
2F15:  MOVWF  56
2F16:  MOVLP  20
2F17:  MOVLB  00
2F18:  GOTO   7C0
2F19:  MOVLP  28
....................          break;
2F1A:  GOTO   71B
....................    }
....................    return FALSE;
2F1B:  MOVLW  00
2F1C:  MOVWF  78
2F1D:  MOVLP  38
2F1E:  GOTO   582 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
23F1:  MOVLW  13
23F2:  MOVLB  03
23F3:  MOVWF  11
23F4:  MOVLW  06
23F5:  MOVWF  12
23F6:  MOVLP  00
23F7:  MOVLB  00
23F8:  CALL   749
23F9:  MOVLP  20
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
23FA:  MOVLW  1E
23FB:  MOVLB  03
23FC:  MOVWF  11
23FD:  MOVLW  06
23FE:  MOVWF  12
23FF:  MOVLP  00
2400:  MOVLB  00
2401:  CALL   749
2402:  MOVLP  20
....................    transmit_ack();
2403:  MOVLP  08
2404:  CALL   79C
2405:  MOVLP  20
.................... 
....................    status[0] = EXECUTING_MISSION;
2406:  MOVLW  02
2407:  MOVWF  29
....................    execute_mission(command->content);
2408:  MOVLW  03
2409:  MOVLB  0F
240A:  ADDWF  56,W
240B:  MOVWF  58
240C:  MOVLW  00
240D:  ADDWFC 57,W
240E:  MOVWF  59
240F:  MOVF   59,W
2410:  MOVWF  5B
2411:  MOVF   58,W
2412:  MOVWF  5A
2413:  MOVLB  00
2414:  GOTO   2F8
....................    if (is_empty_smf_data())
2415:  MOVLP  18
2416:  CALL   7C5
2417:  MOVLP  20
2418:  MOVF   78,F
2419:  BTFSC  03.2
241A:  GOTO   41E
....................       status[0] = FINISHED;
241B:  MOVLW  06
241C:  MOVWF  29
241D:  GOTO   420
....................    else
....................       status[0] = SMF_USE_REQ;
241E:  MOVLW  04
241F:  MOVWF  29
2420:  MOVLP  28
2421:  GOTO   6FF (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
2422:  MOVLW  2B
2423:  MOVLB  03
2424:  MOVWF  11
2425:  MOVLW  06
2426:  MOVWF  12
2427:  MOVLP  00
2428:  MOVLB  00
2429:  CALL   749
242A:  MOVLP  20
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
242B:  MOVLW  35
242C:  MOVLB  03
242D:  MOVWF  11
242E:  MOVLW  06
242F:  MOVWF  12
2430:  MOVLP  00
2431:  MOVLB  00
2432:  CALL   749
2433:  MOVLP  20
....................    transmit_status();
2434:  MOVLP  18
2435:  GOTO   7D2
2436:  MOVLP  20
....................    if (status[0] == FINISHED)
2437:  MOVF   29,W
2438:  SUBLW  06
2439:  BTFSS  03.2
243A:  GOTO   448
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
243B:  MOVLW  44
243C:  MOVLB  03
243D:  MOVWF  11
243E:  MOVLW  06
243F:  MOVWF  12
2440:  MOVLP  00
2441:  MOVLB  00
2442:  CALL   749
2443:  MOVLP  20
....................       return TRUE;
2444:  MOVLW  01
2445:  MOVWF  78
2446:  GOTO   44B
....................    }
2447:  GOTO   44B
....................    else{
....................       return FALSE;
2448:  MOVLW  00
2449:  MOVWF  78
244A:  GOTO   44B
....................    }
244B:  MOVLP  28
244C:  GOTO   709 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
27C0:  MOVLW  52
27C1:  MOVLB  03
27C2:  MOVWF  11
27C3:  MOVLW  06
27C4:  MOVWF  12
27C5:  MOVLP  00
27C6:  MOVLB  00
27C7:  CALL   749
27C8:  MOVLP  20
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
27C9:  MOVLW  5F
27CA:  MOVLB  03
27CB:  MOVWF  11
27CC:  MOVLW  06
27CD:  MOVWF  12
27CE:  MOVLP  00
27CF:  MOVLB  00
27D0:  CALL   749
27D1:  MOVLP  20
....................     transmit_ack();
27D2:  MOVLP  08
27D3:  CALL   79C
27D4:  MOVLP  20
....................     
....................     if (command->content[0] == ALLOW) {
27D5:  MOVLB  0F
27D6:  MOVF   56,W
27D7:  MOVWF  04
27D8:  MOVF   57,W
27D9:  MOVWF  05
27DA:  ADDFSR 03,FSR0
27DB:  MOVF   00,F
27DC:  BTFSC  03.2
27DD:  GOTO   7E0
27DE:  MOVLB  00
27DF:  GOTO   7F2
27E0:  MOVLB  00
....................         fprintf(PC, "\t\t-> allowd\r\n");
27E1:  MOVLW  6C
27E2:  MOVLB  03
27E3:  MOVWF  11
27E4:  MOVLW  06
27E5:  MOVWF  12
27E6:  MOVLP  00
27E7:  MOVLB  00
27E8:  CALL   749
27E9:  MOVLP  20
....................         status[0] = COPYING;
27EA:  MOVLW  05
27EB:  MOVWF  29
....................         copy_data();
27EC:  MOVLP  30
27ED:  GOTO   3FD
27EE:  MOVLP  20
....................         status[0] = FINISHED;
27EF:  MOVLW  06
27F0:  MOVWF  29
....................     } else {
27F1:  GOTO   7FB
....................         fprintf(PC, "\t\t-> denyed\r\n");
27F2:  MOVLW  73
27F3:  MOVLB  03
27F4:  MOVWF  11
27F5:  MOVLW  06
27F6:  MOVWF  12
27F7:  MOVLP  00
27F8:  MOVLB  00
27F9:  CALL   749
27FA:  MOVLP  20
....................     }
27FB:  MOVLP  28
27FC:  GOTO   719 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int8  cigs_data_header [HEADER_SIZE] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_pd_start = 0 ;
.................... volatile unsigned int16 measured_pd_end = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void update_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MANEGE_START 0x000000
.................... #define ADDRESS_MANEGE_END   0x000FFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x000100
.................... #define ADDRESS_MISF_PICLOG_INDEX_END 0x0001FF
.................... #define ADDRESS_MISF_PICLOG_DATA_START 0x000200
.................... #define ADDRESS_MISF_PICLOG_DATA_END   0x141FFF
.................... #define ADDRESS_MISF_MEASUREMENT_START 0x142000
.................... #define ADDRESS_MISF_MEASUREMENT_END   0x941FFF
.................... 
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... typedef union {
....................     struct {
....................         unsigned int32  smf_piclog_use_counter;
....................         unsigned int8   smf_piclog_loop_counter;
....................         unsigned int32  smf_meas_use_counter;
....................         unsigned int8   smf_meas_loop_counter;
.................... 
....................         unsigned int32  misf_piclog_use_counter;
....................         unsigned int8   misf_piclog_loop_counter;
....................         unsigned int32  misf_piclog_uncopyed_counter;
....................         unsigned int8   misf_piclog_write_counter;
....................         unsigned int32  misf_meas_use_counter;
....................         unsigned int8   misf_meas_loop_counter;
....................         unsigned int32  misf_meas_uncopyed_counter;
.................... 
....................         unsigned int8   reserve[34];
....................         unsigned int8   crc;
....................     }   fields; // フィールド
....................     unsigned int8 bytes[PACKET_SIZE]; 
.................... } FLASH_DATA_HEADER; // PICLOGデータ
.................... 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
3800:  MOVLB  03
3801:  BSF    1F.3
3802:  MOVLW  A0
3803:  MOVWF  1B
3804:  MOVLW  01
3805:  MOVWF  1C
3806:  MOVLW  A6
3807:  MOVWF  1E
3808:  MOVLW  90
3809:  MOVWF  1D
380A:  MOVLB  01
380B:  BCF    0D.4
380C:  MOVLB  02
380D:  BSF    0D.4
380E:  MOVLB  04
380F:  BCF    15.5
3810:  MOVLW  40
3811:  MOVWF  14
3812:  MOVLW  09
3813:  MOVWF  12
3814:  MOVLW  2A
3815:  MOVWF  15
3816:  MOVLB  02
3817:  BCF    1D.5
3818:  BCF    1D.3
3819:  BCF    1D.4
381A:  MOVLB  01
381B:  BCF    0E.5
381C:  BSF    0E.4
381D:  BCF    0E.3
381E:  MOVLB  00
381F:  BCF    28.0
3820:  CLRF   30
3821:  CLRF   2F
3822:  CLRF   2E
3823:  CLRF   2D
3824:  CLRF   34
3825:  CLRF   33
3826:  CLRF   32
3827:  CLRF   31
3828:  CLRF   36
3829:  CLRF   35
382A:  CLRF   38
382B:  CLRF   37
382C:  CLRF   59
382D:  MOVLB  0C
382E:  CLRF   2D
382F:  CLRF   2C
3830:  CLRF   2B
3831:  CLRF   2A
3832:  CLRF   2F
3833:  CLRF   2E
3834:  CLRF   31
3835:  CLRF   30
3836:  CLRF   33
3837:  CLRF   32
3838:  CLRF   35
3839:  CLRF   34
383A:  CLRF   70
383B:  MOVLW  1E
383C:  MOVWF  76
383D:  MOVLB  03
383E:  CLRF   0C
383F:  CLRF   0D
3840:  CLRF   0E
3841:  CLRF   0F
3842:  CLRF   10
3843:  MOVLB  02
3844:  CLRF   12
3845:  CLRF   11
3846:  MOVLB  00
3847:  MOVLW  03
3848:  MOVWF  29
3849:  CLRF   2A
384A:  CLRF   2B
384B:  CLRF   2C
384C:  CLRF   39
384D:  CLRF   3A
384E:  CLRF   3B
384F:  CLRF   3C
3850:  CLRF   3D
3851:  CLRF   3E
3852:  CLRF   3F
3853:  CLRF   40
3854:  CLRF   41
3855:  CLRF   42
3856:  CLRF   43
3857:  CLRF   44
3858:  CLRF   45
3859:  CLRF   46
385A:  CLRF   47
385B:  CLRF   48
385C:  CLRF   49
385D:  CLRF   4A
385E:  CLRF   4B
385F:  CLRF   4C
3860:  CLRF   4D
3861:  CLRF   4E
3862:  CLRF   4F
3863:  CLRF   50
3864:  CLRF   51
3865:  CLRF   52
3866:  CLRF   53
3867:  CLRF   54
3868:  CLRF   55
3869:  CLRF   56
386A:  CLRF   57
386B:  CLRF   58
386C:  CLRF   5A
386D:  CLRF   5B
386E:  CLRF   5C
386F:  CLRF   5D
3870:  CLRF   5E
3871:  CLRF   5F
3872:  CLRF   60
3873:  CLRF   61
3874:  CLRF   62
3875:  CLRF   63
3876:  CLRF   64
3877:  CLRF   65
3878:  CLRF   66
3879:  CLRF   67
387A:  CLRF   68
387B:  CLRF   69
387C:  CLRF   6A
387D:  CLRF   6B
387E:  CLRF   6C
387F:  CLRF   6D
3880:  CLRF   6E
3881:  CLRF   6F
3882:  MOVLB  01
3883:  CLRF   20
3884:  CLRF   21
3885:  CLRF   22
3886:  CLRF   23
3887:  CLRF   24
3888:  CLRF   25
3889:  CLRF   26
388A:  CLRF   27
388B:  CLRF   28
388C:  CLRF   29
388D:  CLRF   2A
388E:  CLRF   2B
388F:  CLRF   2C
3890:  CLRF   2D
3891:  CLRF   2E
3892:  CLRF   2F
3893:  CLRF   30
3894:  CLRF   31
3895:  CLRF   32
3896:  CLRF   33
3897:  CLRF   34
3898:  CLRF   35
3899:  CLRF   36
389A:  CLRF   37
389B:  CLRF   38
389C:  CLRF   39
389D:  CLRF   3A
389E:  CLRF   3B
389F:  CLRF   3C
38A0:  CLRF   3D
38A1:  CLRF   3E
38A2:  CLRF   3F
38A3:  CLRF   40
38A4:  CLRF   41
38A5:  CLRF   42
38A6:  CLRF   43
38A7:  CLRF   44
38A8:  CLRF   45
38A9:  CLRF   46
38AA:  CLRF   47
38AB:  CLRF   48
38AC:  CLRF   49
38AD:  CLRF   4A
38AE:  CLRF   4B
38AF:  CLRF   4C
38B0:  CLRF   4D
38B1:  CLRF   4E
38B2:  CLRF   4F
38B3:  CLRF   50
38B4:  CLRF   51
38B5:  CLRF   52
38B6:  CLRF   53
38B7:  CLRF   54
38B8:  CLRF   55
38B9:  CLRF   56
38BA:  CLRF   57
38BB:  CLRF   58
38BC:  CLRF   59
38BD:  CLRF   5A
38BE:  CLRF   5B
38BF:  CLRF   5C
38C0:  CLRF   5D
38C1:  CLRF   5E
38C2:  CLRF   5F
38C3:  CLRF   60
38C4:  CLRF   61
38C5:  CLRF   62
38C6:  CLRF   63
38C7:  CLRF   64
38C8:  CLRF   65
38C9:  CLRF   66
38CA:  CLRF   67
38CB:  CLRF   68
38CC:  CLRF   69
38CD:  CLRF   6A
38CE:  CLRF   6B
38CF:  CLRF   6C
38D0:  CLRF   6D
38D1:  CLRF   6E
38D2:  CLRF   6F
38D3:  MOVLB  02
38D4:  CLRF   20
38D5:  CLRF   21
38D6:  CLRF   22
38D7:  CLRF   23
38D8:  CLRF   24
38D9:  CLRF   25
38DA:  CLRF   26
38DB:  CLRF   27
38DC:  CLRF   28
38DD:  CLRF   29
38DE:  CLRF   2A
38DF:  CLRF   2B
38E0:  CLRF   2C
38E1:  CLRF   2D
38E2:  CLRF   2E
38E3:  CLRF   2F
38E4:  CLRF   30
38E5:  CLRF   31
38E6:  CLRF   32
38E7:  CLRF   33
38E8:  CLRF   34
38E9:  CLRF   35
38EA:  CLRF   36
38EB:  CLRF   37
38EC:  CLRF   38
38ED:  CLRF   39
38EE:  CLRF   3A
38EF:  CLRF   3B
38F0:  CLRF   3C
38F1:  CLRF   3D
38F2:  CLRF   3E
38F3:  CLRF   3F
38F4:  CLRF   40
38F5:  CLRF   41
38F6:  CLRF   42
38F7:  CLRF   43
38F8:  CLRF   44
38F9:  CLRF   45
38FA:  CLRF   46
38FB:  CLRF   47
38FC:  CLRF   48
38FD:  CLRF   49
38FE:  CLRF   4A
38FF:  CLRF   4B
3900:  CLRF   4C
3901:  CLRF   4D
3902:  CLRF   4E
3903:  CLRF   4F
3904:  CLRF   50
3905:  CLRF   51
3906:  CLRF   52
3907:  CLRF   53
3908:  CLRF   54
3909:  CLRF   55
390A:  CLRF   56
390B:  CLRF   57
390C:  CLRF   58
390D:  CLRF   59
390E:  CLRF   5A
390F:  CLRF   5B
3910:  CLRF   5C
3911:  CLRF   5D
3912:  CLRF   5E
3913:  CLRF   5F
3914:  CLRF   60
3915:  CLRF   61
3916:  CLRF   62
3917:  CLRF   63
3918:  CLRF   64
3919:  CLRF   65
391A:  CLRF   66
391B:  CLRF   67
391C:  CLRF   68
391D:  CLRF   69
391E:  CLRF   6A
391F:  CLRF   6B
3920:  CLRF   6C
3921:  CLRF   6D
3922:  CLRF   6E
3923:  CLRF   6F
3924:  MOVLB  03
3925:  CLRF   20
3926:  CLRF   21
3927:  CLRF   22
3928:  CLRF   23
3929:  CLRF   24
392A:  CLRF   25
392B:  CLRF   26
392C:  CLRF   27
392D:  CLRF   28
392E:  CLRF   29
392F:  CLRF   2A
3930:  CLRF   2B
3931:  CLRF   2C
3932:  CLRF   2D
3933:  CLRF   2E
3934:  CLRF   2F
3935:  CLRF   30
3936:  CLRF   31
3937:  CLRF   32
3938:  CLRF   33
3939:  CLRF   34
393A:  CLRF   35
393B:  CLRF   36
393C:  CLRF   37
393D:  CLRF   38
393E:  CLRF   39
393F:  CLRF   3A
3940:  CLRF   3B
3941:  CLRF   3C
3942:  CLRF   3D
3943:  CLRF   3E
3944:  CLRF   3F
3945:  CLRF   40
3946:  CLRF   41
3947:  CLRF   42
3948:  CLRF   43
3949:  CLRF   44
394A:  CLRF   45
394B:  CLRF   46
394C:  CLRF   47
394D:  CLRF   48
394E:  CLRF   49
394F:  CLRF   4A
3950:  CLRF   4B
3951:  CLRF   4C
3952:  CLRF   4D
3953:  CLRF   4E
3954:  CLRF   4F
3955:  CLRF   50
3956:  CLRF   51
3957:  CLRF   52
3958:  CLRF   53
3959:  CLRF   54
395A:  CLRF   55
395B:  CLRF   56
395C:  CLRF   57
395D:  CLRF   58
395E:  CLRF   59
395F:  CLRF   5A
3960:  CLRF   5B
3961:  CLRF   5C
3962:  CLRF   5D
3963:  CLRF   5E
3964:  CLRF   5F
3965:  CLRF   60
3966:  CLRF   61
3967:  CLRF   62
3968:  CLRF   63
3969:  CLRF   64
396A:  CLRF   65
396B:  CLRF   66
396C:  CLRF   67
396D:  CLRF   68
396E:  CLRF   69
396F:  CLRF   6A
3970:  CLRF   6B
3971:  CLRF   6C
3972:  CLRF   6D
3973:  CLRF   6E
3974:  CLRF   6F
3975:  MOVLB  04
3976:  CLRF   20
3977:  CLRF   21
3978:  CLRF   22
3979:  CLRF   23
397A:  CLRF   24
397B:  CLRF   25
397C:  CLRF   26
397D:  CLRF   27
397E:  CLRF   28
397F:  CLRF   29
3980:  CLRF   2A
3981:  CLRF   2B
3982:  CLRF   2C
3983:  CLRF   2D
3984:  CLRF   2E
3985:  CLRF   2F
3986:  CLRF   30
3987:  CLRF   31
3988:  CLRF   32
3989:  CLRF   33
398A:  CLRF   34
398B:  CLRF   35
398C:  CLRF   36
398D:  CLRF   37
398E:  CLRF   38
398F:  CLRF   39
3990:  CLRF   3A
3991:  CLRF   3B
3992:  CLRF   3C
3993:  CLRF   3D
3994:  CLRF   3E
3995:  CLRF   3F
3996:  CLRF   40
3997:  CLRF   41
3998:  CLRF   42
3999:  CLRF   43
399A:  CLRF   44
399B:  CLRF   45
399C:  CLRF   46
399D:  CLRF   47
399E:  CLRF   48
399F:  CLRF   49
39A0:  CLRF   4A
39A1:  CLRF   4B
39A2:  CLRF   4C
39A3:  CLRF   4D
39A4:  CLRF   4E
39A5:  CLRF   4F
39A6:  CLRF   50
39A7:  CLRF   51
39A8:  CLRF   52
39A9:  CLRF   53
39AA:  CLRF   54
39AB:  CLRF   55
39AC:  CLRF   56
39AD:  CLRF   57
39AE:  CLRF   58
39AF:  CLRF   59
39B0:  CLRF   5A
39B1:  CLRF   5B
39B2:  CLRF   5C
39B3:  CLRF   5D
39B4:  CLRF   5E
39B5:  CLRF   5F
39B6:  CLRF   60
39B7:  CLRF   61
39B8:  CLRF   62
39B9:  CLRF   63
39BA:  CLRF   64
39BB:  CLRF   65
39BC:  CLRF   66
39BD:  CLRF   67
39BE:  CLRF   68
39BF:  CLRF   69
39C0:  CLRF   6A
39C1:  CLRF   6B
39C2:  CLRF   6C
39C3:  CLRF   6D
39C4:  CLRF   6E
39C5:  CLRF   6F
39C6:  MOVLB  05
39C7:  CLRF   20
39C8:  CLRF   21
39C9:  CLRF   22
39CA:  CLRF   23
39CB:  CLRF   24
39CC:  CLRF   25
39CD:  CLRF   26
39CE:  CLRF   27
39CF:  CLRF   28
39D0:  CLRF   29
39D1:  CLRF   2A
39D2:  CLRF   2B
39D3:  CLRF   2C
39D4:  CLRF   2D
39D5:  CLRF   2E
39D6:  CLRF   2F
39D7:  CLRF   30
39D8:  CLRF   31
39D9:  CLRF   32
39DA:  CLRF   33
39DB:  CLRF   34
39DC:  CLRF   35
39DD:  CLRF   36
39DE:  CLRF   37
39DF:  CLRF   38
39E0:  CLRF   39
39E1:  CLRF   3A
39E2:  CLRF   3B
39E3:  CLRF   3C
39E4:  CLRF   3D
39E5:  CLRF   3E
39E6:  CLRF   3F
39E7:  CLRF   40
39E8:  CLRF   41
39E9:  CLRF   42
39EA:  CLRF   43
39EB:  CLRF   44
39EC:  CLRF   45
39ED:  CLRF   46
39EE:  CLRF   47
39EF:  CLRF   48
39F0:  CLRF   49
39F1:  CLRF   4A
39F2:  CLRF   4B
39F3:  CLRF   4C
39F4:  CLRF   4D
39F5:  CLRF   4E
39F6:  CLRF   4F
39F7:  CLRF   50
39F8:  CLRF   51
39F9:  CLRF   52
39FA:  CLRF   53
39FB:  CLRF   54
39FC:  CLRF   55
39FD:  CLRF   56
39FE:  CLRF   57
39FF:  CLRF   58
3A00:  CLRF   59
3A01:  CLRF   5A
3A02:  CLRF   5B
3A03:  CLRF   5C
3A04:  CLRF   5D
3A05:  CLRF   5E
3A06:  CLRF   5F
3A07:  CLRF   60
3A08:  CLRF   61
3A09:  CLRF   62
3A0A:  CLRF   63
3A0B:  CLRF   64
3A0C:  CLRF   65
3A0D:  CLRF   66
3A0E:  CLRF   67
3A0F:  CLRF   68
3A10:  CLRF   69
3A11:  CLRF   6A
3A12:  CLRF   6B
3A13:  CLRF   6C
3A14:  CLRF   6D
3A15:  CLRF   6E
3A16:  CLRF   6F
3A17:  MOVLB  06
3A18:  CLRF   20
3A19:  CLRF   21
3A1A:  CLRF   22
3A1B:  CLRF   23
3A1C:  CLRF   24
3A1D:  CLRF   25
3A1E:  CLRF   26
3A1F:  CLRF   27
3A20:  CLRF   28
3A21:  CLRF   29
3A22:  CLRF   2A
3A23:  CLRF   2B
3A24:  CLRF   2C
3A25:  CLRF   2D
3A26:  CLRF   2E
3A27:  CLRF   2F
3A28:  CLRF   30
3A29:  CLRF   31
3A2A:  CLRF   32
3A2B:  CLRF   33
3A2C:  CLRF   34
3A2D:  CLRF   35
3A2E:  CLRF   36
3A2F:  CLRF   37
3A30:  CLRF   38
3A31:  CLRF   39
3A32:  CLRF   3A
3A33:  CLRF   3B
3A34:  CLRF   3C
3A35:  CLRF   3D
3A36:  CLRF   3E
3A37:  CLRF   3F
3A38:  CLRF   40
3A39:  CLRF   41
3A3A:  CLRF   42
3A3B:  CLRF   43
3A3C:  CLRF   44
3A3D:  CLRF   45
3A3E:  CLRF   46
3A3F:  CLRF   47
3A40:  CLRF   48
3A41:  CLRF   49
3A42:  CLRF   4A
3A43:  CLRF   4B
3A44:  CLRF   4C
3A45:  CLRF   4D
3A46:  CLRF   4E
3A47:  CLRF   4F
3A48:  CLRF   50
3A49:  CLRF   51
3A4A:  CLRF   52
3A4B:  CLRF   53
3A4C:  CLRF   54
3A4D:  CLRF   55
3A4E:  CLRF   56
3A4F:  CLRF   57
3A50:  CLRF   58
3A51:  CLRF   59
3A52:  CLRF   5A
3A53:  CLRF   5B
3A54:  CLRF   5C
3A55:  CLRF   5D
3A56:  CLRF   5E
3A57:  CLRF   5F
3A58:  CLRF   60
3A59:  CLRF   61
3A5A:  CLRF   62
3A5B:  CLRF   63
3A5C:  CLRF   64
3A5D:  CLRF   65
3A5E:  CLRF   66
3A5F:  CLRF   67
3A60:  CLRF   68
3A61:  CLRF   69
3A62:  CLRF   6A
3A63:  CLRF   6B
3A64:  CLRF   6C
3A65:  CLRF   6D
3A66:  CLRF   6E
3A67:  CLRF   6F
3A68:  MOVLB  07
3A69:  CLRF   20
3A6A:  CLRF   21
3A6B:  CLRF   22
3A6C:  CLRF   23
3A6D:  CLRF   24
3A6E:  CLRF   25
3A6F:  CLRF   26
3A70:  CLRF   27
3A71:  CLRF   28
3A72:  CLRF   29
3A73:  CLRF   2A
3A74:  CLRF   2B
3A75:  CLRF   2C
3A76:  CLRF   2D
3A77:  CLRF   2E
3A78:  CLRF   2F
3A79:  CLRF   30
3A7A:  CLRF   31
3A7B:  CLRF   32
3A7C:  CLRF   33
3A7D:  CLRF   34
3A7E:  CLRF   35
3A7F:  CLRF   36
3A80:  CLRF   37
3A81:  CLRF   38
3A82:  CLRF   39
3A83:  CLRF   3A
3A84:  CLRF   3B
3A85:  CLRF   3C
3A86:  CLRF   3D
3A87:  CLRF   3E
3A88:  CLRF   3F
3A89:  CLRF   40
3A8A:  CLRF   41
3A8B:  CLRF   42
3A8C:  CLRF   43
3A8D:  CLRF   44
3A8E:  CLRF   45
3A8F:  CLRF   46
3A90:  CLRF   47
3A91:  CLRF   48
3A92:  CLRF   49
3A93:  CLRF   4A
3A94:  CLRF   4B
3A95:  CLRF   4C
3A96:  CLRF   4D
3A97:  CLRF   4E
3A98:  CLRF   4F
3A99:  CLRF   50
3A9A:  CLRF   51
3A9B:  CLRF   52
3A9C:  CLRF   53
3A9D:  CLRF   54
3A9E:  CLRF   55
3A9F:  CLRF   56
3AA0:  CLRF   57
3AA1:  CLRF   58
3AA2:  CLRF   59
3AA3:  CLRF   5A
3AA4:  CLRF   5B
3AA5:  CLRF   5C
3AA6:  CLRF   5D
3AA7:  CLRF   5E
3AA8:  CLRF   5F
3AA9:  CLRF   60
3AAA:  CLRF   61
3AAB:  CLRF   62
3AAC:  CLRF   63
3AAD:  CLRF   64
3AAE:  CLRF   65
3AAF:  CLRF   66
3AB0:  CLRF   67
3AB1:  CLRF   68
3AB2:  CLRF   69
3AB3:  CLRF   6A
3AB4:  CLRF   6B
3AB5:  CLRF   6C
3AB6:  CLRF   6D
3AB7:  CLRF   6E
3AB8:  CLRF   6F
3AB9:  MOVLB  08
3ABA:  CLRF   20
3ABB:  CLRF   21
3ABC:  CLRF   22
3ABD:  CLRF   23
3ABE:  CLRF   24
3ABF:  CLRF   25
3AC0:  CLRF   26
3AC1:  CLRF   27
3AC2:  CLRF   28
3AC3:  CLRF   29
3AC4:  CLRF   2A
3AC5:  CLRF   2B
3AC6:  CLRF   2C
3AC7:  CLRF   2D
3AC8:  CLRF   2E
3AC9:  CLRF   2F
3ACA:  CLRF   30
3ACB:  CLRF   31
3ACC:  CLRF   32
3ACD:  CLRF   33
3ACE:  CLRF   34
3ACF:  CLRF   35
3AD0:  CLRF   36
3AD1:  CLRF   37
3AD2:  CLRF   38
3AD3:  CLRF   39
3AD4:  CLRF   3A
3AD5:  CLRF   3B
3AD6:  CLRF   3C
3AD7:  CLRF   3D
3AD8:  CLRF   3E
3AD9:  CLRF   3F
3ADA:  CLRF   40
3ADB:  CLRF   41
3ADC:  CLRF   42
3ADD:  CLRF   43
3ADE:  CLRF   44
3ADF:  CLRF   45
3AE0:  CLRF   46
3AE1:  CLRF   47
3AE2:  CLRF   48
3AE3:  CLRF   49
3AE4:  CLRF   4A
3AE5:  CLRF   4B
3AE6:  CLRF   4C
3AE7:  CLRF   4D
3AE8:  CLRF   4E
3AE9:  CLRF   4F
3AEA:  CLRF   50
3AEB:  CLRF   51
3AEC:  CLRF   52
3AED:  CLRF   53
3AEE:  CLRF   54
3AEF:  CLRF   55
3AF0:  CLRF   56
3AF1:  CLRF   57
3AF2:  CLRF   58
3AF3:  CLRF   59
3AF4:  CLRF   5A
3AF5:  CLRF   5B
3AF6:  CLRF   5C
3AF7:  CLRF   5D
3AF8:  CLRF   5E
3AF9:  CLRF   5F
3AFA:  CLRF   60
3AFB:  CLRF   61
3AFC:  CLRF   62
3AFD:  CLRF   63
3AFE:  CLRF   64
3AFF:  CLRF   65
3B00:  CLRF   66
3B01:  CLRF   67
3B02:  CLRF   68
3B03:  CLRF   69
3B04:  CLRF   6A
3B05:  CLRF   6B
3B06:  CLRF   6C
3B07:  CLRF   6D
3B08:  CLRF   6E
3B09:  CLRF   6F
3B0A:  MOVLB  09
3B0B:  CLRF   20
3B0C:  CLRF   21
3B0D:  CLRF   22
3B0E:  CLRF   23
3B0F:  CLRF   24
3B10:  CLRF   25
3B11:  CLRF   26
3B12:  CLRF   27
3B13:  CLRF   28
3B14:  CLRF   29
3B15:  CLRF   2A
3B16:  CLRF   2B
3B17:  CLRF   2C
3B18:  CLRF   2D
3B19:  CLRF   2E
3B1A:  CLRF   2F
3B1B:  CLRF   30
3B1C:  CLRF   31
3B1D:  CLRF   32
3B1E:  CLRF   33
3B1F:  CLRF   34
3B20:  CLRF   35
3B21:  CLRF   36
3B22:  CLRF   37
3B23:  CLRF   38
3B24:  CLRF   39
3B25:  CLRF   3A
3B26:  CLRF   3B
3B27:  CLRF   3C
3B28:  CLRF   3D
3B29:  CLRF   3E
3B2A:  CLRF   3F
3B2B:  CLRF   40
3B2C:  CLRF   41
3B2D:  CLRF   42
3B2E:  CLRF   43
3B2F:  CLRF   44
3B30:  CLRF   45
3B31:  CLRF   46
3B32:  CLRF   47
3B33:  CLRF   48
3B34:  CLRF   49
3B35:  CLRF   4A
3B36:  CLRF   4B
3B37:  CLRF   4C
3B38:  CLRF   4D
3B39:  CLRF   4E
3B3A:  CLRF   4F
3B3B:  CLRF   50
3B3C:  CLRF   51
3B3D:  CLRF   52
3B3E:  CLRF   53
3B3F:  CLRF   54
3B40:  CLRF   55
3B41:  CLRF   56
3B42:  CLRF   57
3B43:  CLRF   58
3B44:  CLRF   59
3B45:  CLRF   5A
3B46:  CLRF   5B
3B47:  CLRF   5C
3B48:  CLRF   5D
3B49:  CLRF   5E
3B4A:  CLRF   5F
3B4B:  CLRF   60
3B4C:  CLRF   61
3B4D:  CLRF   62
3B4E:  CLRF   63
3B4F:  CLRF   64
3B50:  CLRF   65
3B51:  CLRF   66
3B52:  CLRF   67
3B53:  CLRF   68
3B54:  CLRF   69
3B55:  CLRF   6A
3B56:  CLRF   6B
3B57:  CLRF   6C
3B58:  CLRF   6D
3B59:  CLRF   6E
3B5A:  CLRF   6F
3B5B:  MOVLB  0A
3B5C:  CLRF   20
3B5D:  CLRF   21
3B5E:  CLRF   22
3B5F:  CLRF   23
3B60:  CLRF   24
3B61:  CLRF   25
3B62:  CLRF   26
3B63:  CLRF   27
3B64:  CLRF   28
3B65:  CLRF   29
3B66:  CLRF   2A
3B67:  CLRF   2B
3B68:  CLRF   2C
3B69:  CLRF   2D
3B6A:  CLRF   2E
3B6B:  CLRF   2F
3B6C:  CLRF   30
3B6D:  CLRF   31
3B6E:  CLRF   32
3B6F:  CLRF   33
3B70:  CLRF   34
3B71:  CLRF   35
3B72:  CLRF   36
3B73:  CLRF   37
3B74:  CLRF   38
3B75:  CLRF   39
3B76:  CLRF   3A
3B77:  CLRF   3B
3B78:  CLRF   3C
3B79:  CLRF   3D
3B7A:  CLRF   3E
3B7B:  CLRF   3F
3B7C:  CLRF   40
3B7D:  CLRF   41
3B7E:  CLRF   42
3B7F:  CLRF   43
3B80:  CLRF   44
3B81:  CLRF   45
3B82:  CLRF   46
3B83:  CLRF   47
3B84:  CLRF   48
3B85:  CLRF   49
3B86:  CLRF   4A
3B87:  CLRF   4B
3B88:  CLRF   4C
3B89:  CLRF   4D
3B8A:  CLRF   4E
3B8B:  CLRF   4F
3B8C:  CLRF   50
3B8D:  CLRF   51
3B8E:  CLRF   52
3B8F:  CLRF   53
3B90:  CLRF   54
3B91:  CLRF   55
3B92:  CLRF   56
3B93:  CLRF   57
3B94:  CLRF   58
3B95:  CLRF   59
3B96:  CLRF   5A
3B97:  CLRF   5B
3B98:  CLRF   5C
3B99:  CLRF   5D
3B9A:  CLRF   5E
3B9B:  CLRF   5F
3B9C:  CLRF   60
3B9D:  CLRF   61
3B9E:  CLRF   62
3B9F:  CLRF   63
3BA0:  CLRF   64
3BA1:  CLRF   65
3BA2:  CLRF   66
3BA3:  CLRF   67
3BA4:  CLRF   68
3BA5:  CLRF   69
3BA6:  CLRF   6A
3BA7:  CLRF   6B
3BA8:  CLRF   6C
3BA9:  CLRF   6D
3BAA:  CLRF   6E
3BAB:  CLRF   6F
3BAC:  MOVLB  0B
3BAD:  CLRF   20
3BAE:  CLRF   21
3BAF:  CLRF   22
3BB0:  CLRF   23
3BB1:  CLRF   24
3BB2:  CLRF   25
3BB3:  CLRF   26
3BB4:  CLRF   27
3BB5:  CLRF   28
3BB6:  CLRF   29
3BB7:  CLRF   2A
3BB8:  CLRF   2B
3BB9:  CLRF   2C
3BBA:  CLRF   2D
3BBB:  CLRF   2E
3BBC:  CLRF   2F
3BBD:  CLRF   30
3BBE:  CLRF   31
3BBF:  CLRF   32
3BC0:  CLRF   33
3BC1:  CLRF   34
3BC2:  CLRF   35
3BC3:  CLRF   36
3BC4:  CLRF   37
3BC5:  CLRF   38
3BC6:  CLRF   39
3BC7:  CLRF   3A
3BC8:  CLRF   3B
3BC9:  CLRF   3C
3BCA:  CLRF   3D
3BCB:  CLRF   3E
3BCC:  CLRF   3F
3BCD:  CLRF   40
3BCE:  CLRF   41
3BCF:  CLRF   42
3BD0:  CLRF   43
3BD1:  CLRF   44
3BD2:  CLRF   45
3BD3:  CLRF   46
3BD4:  CLRF   47
3BD5:  CLRF   48
3BD6:  CLRF   49
3BD7:  CLRF   4A
3BD8:  CLRF   4B
3BD9:  CLRF   4C
3BDA:  CLRF   4D
3BDB:  CLRF   4E
3BDC:  CLRF   4F
3BDD:  CLRF   50
3BDE:  CLRF   51
3BDF:  CLRF   52
3BE0:  CLRF   53
3BE1:  CLRF   54
3BE2:  CLRF   55
3BE3:  CLRF   56
3BE4:  CLRF   57
3BE5:  CLRF   58
3BE6:  CLRF   59
3BE7:  CLRF   5A
3BE8:  CLRF   5B
3BE9:  CLRF   5C
3BEA:  CLRF   5D
3BEB:  CLRF   5E
3BEC:  CLRF   5F
3BED:  CLRF   60
3BEE:  CLRF   61
3BEF:  CLRF   62
3BF0:  CLRF   63
3BF1:  CLRF   64
3BF2:  CLRF   65
3BF3:  CLRF   66
3BF4:  CLRF   67
3BF5:  CLRF   68
3BF6:  CLRF   69
3BF7:  CLRF   6A
3BF8:  CLRF   6B
3BF9:  CLRF   6C
3BFA:  CLRF   6D
3BFB:  CLRF   6E
3BFC:  CLRF   6F
3BFD:  MOVLB  0C
3BFE:  CLRF   20
3BFF:  CLRF   21
3C00:  CLRF   22
3C01:  CLRF   23
3C02:  CLRF   24
3C03:  CLRF   25
3C04:  CLRF   26
3C05:  CLRF   27
3C06:  CLRF   28
3C07:  CLRF   29
3C08:  CLRF   36
3C09:  CLRF   37
3C0A:  CLRF   38
3C0B:  CLRF   39
3C0C:  CLRF   3A
3C0D:  CLRF   3B
3C0E:  CLRF   3C
3C0F:  CLRF   3D
3C10:  CLRF   3E
3C11:  CLRF   3F
3C12:  CLRF   40
3C13:  CLRF   41
3C14:  CLRF   42
3C15:  CLRF   43
3C16:  CLRF   44
3C17:  CLRF   45
3C18:  CLRF   46
3C19:  CLRF   47
3C1A:  CLRF   48
3C1B:  CLRF   49
3C1C:  CLRF   4A
3C1D:  CLRF   4B
3C1E:  CLRF   4C
3C1F:  CLRF   4D
3C20:  CLRF   4E
3C21:  CLRF   4F
3C22:  CLRF   50
3C23:  CLRF   51
3C24:  CLRF   52
3C25:  CLRF   53
3C26:  CLRF   54
3C27:  CLRF   55
3C28:  CLRF   56
3C29:  CLRF   57
3C2A:  CLRF   58
3C2B:  CLRF   59
3C2C:  CLRF   5A
3C2D:  CLRF   5B
3C2E:  CLRF   5C
3C2F:  CLRF   5D
3C30:  CLRF   5E
3C31:  CLRF   5F
3C32:  CLRF   60
3C33:  CLRF   61
3C34:  CLRF   62
3C35:  CLRF   63
3C36:  CLRF   64
3C37:  CLRF   65
3C38:  CLRF   66
3C39:  CLRF   67
3C3A:  CLRF   68
3C3B:  CLRF   69
3C3C:  CLRF   6A
3C3D:  CLRF   6B
3C3E:  CLRF   6C
3C3F:  CLRF   6D
3C40:  CLRF   6E
3C41:  CLRF   6F
3C42:  MOVLB  0D
3C43:  CLRF   20
3C44:  CLRF   21
3C45:  CLRF   22
3C46:  CLRF   23
3C47:  CLRF   24
3C48:  CLRF   25
3C49:  CLRF   26
3C4A:  CLRF   27
3C4B:  CLRF   28
3C4C:  CLRF   29
3C4D:  CLRF   42
3C4E:  CLRF   43
3C4F:  MOVLW  79
3C50:  MOVWF  44
3C51:  CLRF   45
3C52:  MOVLW  01
3C53:  MOVWF  46
3C54:  MOVLW  01
3C55:  MOVWF  47
3C56:  MOVLW  7A
3C57:  MOVWF  48
3C58:  CLRF   49
3C59:  CLRF   4A
3C5A:  CLRF   4B
3C5B:  CLRF   4C
3C5C:  CLRF   4D
3C5D:  CLRF   4E
3C5E:  CLRF   4F
3C5F:  CLRF   50
3C60:  CLRF   51
3C61:  CLRF   52
3C62:  CLRF   53
3C63:  CLRF   54
3C64:  CLRF   55
3C65:  CLRF   56
3C66:  CLRF   57
3C67:  CLRF   58
3C68:  CLRF   59
3C69:  CLRF   5A
3C6A:  CLRF   5B
3C6B:  CLRF   5C
3C6C:  CLRF   5D
3C6D:  CLRF   5E
3C6E:  CLRF   5F
3C6F:  CLRF   60
3C70:  CLRF   61
3C71:  CLRF   62
3C72:  CLRF   63
3C73:  CLRF   64
3C74:  CLRF   65
3C75:  CLRF   66
3C76:  CLRF   67
3C77:  CLRF   68
3C78:  CLRF   69
3C79:  CLRF   6A
3C7A:  CLRF   6B
3C7B:  CLRF   6C
3C7C:  CLRF   6D
3C7D:  CLRF   6E
3C7E:  CLRF   6F
3C7F:  MOVLB  0E
3C80:  CLRF   20
3C81:  CLRF   21
3C82:  CLRF   22
3C83:  CLRF   23
3C84:  CLRF   24
3C85:  CLRF   25
3C86:  CLRF   26
3C87:  CLRF   27
3C88:  CLRF   28
3C89:  CLRF   29
3C8A:  CLRF   2A
3C8B:  CLRF   2B
3C8C:  CLRF   2C
3C8D:  CLRF   2D
3C8E:  CLRF   2E
3C8F:  CLRF   2F
3C90:  CLRF   30
3C91:  CLRF   31
3C92:  CLRF   32
3C93:  CLRF   33
3C94:  CLRF   34
3C95:  CLRF   35
3C96:  CLRF   36
3C97:  CLRF   37
3C98:  CLRF   38
3C99:  CLRF   39
3C9A:  CLRF   3A
3C9B:  CLRF   3B
3C9C:  CLRF   3C
3C9D:  CLRF   3D
3C9E:  CLRF   3E
3C9F:  CLRF   3F
3CA0:  CLRF   40
3CA1:  CLRF   41
3CA2:  CLRF   42
3CA3:  CLRF   43
3CA4:  CLRF   44
3CA5:  CLRF   45
3CA6:  CLRF   46
3CA7:  CLRF   47
3CA8:  CLRF   48
3CA9:  CLRF   49
3CAA:  CLRF   4A
3CAB:  CLRF   4B
3CAC:  CLRF   4C
3CAD:  CLRF   4D
3CAE:  CLRF   4E
3CAF:  CLRF   4F
3CB0:  CLRF   50
3CB1:  CLRF   51
3CB2:  CLRF   52
3CB3:  CLRF   53
3CB4:  CLRF   54
3CB5:  CLRF   55
3CB6:  CLRF   56
3CB7:  CLRF   57
3CB8:  CLRF   58
3CB9:  CLRF   59
3CBA:  CLRF   5A
3CBB:  CLRF   5B
3CBC:  CLRF   5C
3CBD:  CLRF   5D
3CBE:  CLRF   5E
3CBF:  CLRF   5F
3CC0:  CLRF   60
3CC1:  CLRF   61
3CC2:  CLRF   62
3CC3:  CLRF   63
3CC4:  CLRF   64
3CC5:  CLRF   65
3CC6:  CLRF   66
3CC7:  CLRF   67
3CC8:  CLRF   68
3CC9:  CLRF   69
3CCA:  CLRF   6A
3CCB:  CLRF   6B
3CCC:  CLRF   6C
3CCD:  CLRF   6D
3CCE:  CLRF   6E
3CCF:  CLRF   6F
3CD0:  MOVLB  0F
3CD1:  CLRF   20
3CD2:  CLRF   21
3CD3:  CLRF   22
3CD4:  CLRF   23
3CD5:  CLRF   24
3CD6:  CLRF   25
3CD7:  CLRF   26
3CD8:  CLRF   27
3CD9:  CLRF   28
3CDA:  CLRF   29
3CDB:  CLRF   2A
3CDC:  CLRF   2B
3CDD:  CLRF   2C
3CDE:  CLRF   2D
3CDF:  CLRF   2E
3CE0:  CLRF   2F
3CE1:  CLRF   30
3CE2:  CLRF   31
3CE3:  CLRF   32
3CE4:  CLRF   33
3CE5:  CLRF   34
3CE6:  CLRF   35
3CE7:  CLRF   36
3CE8:  CLRF   37
3CE9:  CLRF   38
3CEA:  CLRF   39
3CEB:  CLRF   3A
3CEC:  CLRF   3B
3CED:  CLRF   3C
3CEE:  MOVLW  09
3CEF:  MOVWF  3D
3CF0:  MOVLW  01
3CF1:  MOVWF  3E
3CF2:  CLRF   3F
3CF3:  MOVLW  02
3CF4:  MOVWF  40
3CF5:  MOVLW  01
3CF6:  MOVWF  41
3CF7:  MOVLB  00
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
3CF8:  MOVLW  7A
3CF9:  MOVLB  03
3CFA:  MOVWF  11
3CFB:  MOVLW  06
3CFC:  MOVWF  12
3CFD:  MOVLP  00
3CFE:  MOVLB  00
3CFF:  CALL   749
3D00:  MOVLP  38
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
3D01:  MOVLW  9D
3D02:  MOVLB  03
3D03:  MOVWF  11
3D04:  MOVLW  06
3D05:  MOVWF  12
3D06:  MOVLP  00
3D07:  MOVLB  00
3D08:  CALL   749
3D09:  MOVLP  38
....................    fprintf(PC,"Last updated on 2025/06/15, by Inoue.\r\n\r\n");  
3D0A:  MOVLW  B4
3D0B:  MOVLB  03
3D0C:  MOVWF  11
3D0D:  MOVLW  06
3D0E:  MOVWF  12
3D0F:  MOVLP  00
3D10:  MOVLB  00
3D11:  CALL   749
3D12:  MOVLP  38
.................... 
....................    
....................    io_init();
3D13:  MOVLP  00
3D14:  GOTO   799
3D15:  MOVLP  38
....................    adc_init();
3D16:  MOVLP  00
3D17:  GOTO   7B1
3D18:  MOVLP  38
....................    setup_uart_to_boss();
3D19:  MOVLP  00
3D1A:  GOTO   7DB
3D1B:  MOVLP  38
....................    setup_timer();
3D1C:  MOVLP  08
3D1D:  GOTO   000
3D1E:  MOVLP  38
....................    ad7490_init();
3D1F:  MOVLP  00
3D20:  GOTO   7EF
3D21:  MOVLP  38
....................    misf_init();
3D22:  MOVLP  08
3D23:  GOTO   488
3D24:  MOVLP  38
....................    piclog_make(PICLOG_STARTUP,0x00);
3D25:  MOVF   70,W
3D26:  MOVLB  10
3D27:  MOVWF  5A
3D28:  CLRF   5B
3D29:  MOVLP  10
3D2A:  MOVLB  00
3D2B:  CALL   1C2
3D2C:  MOVLP  38
.................... 
....................    int1 is_finished = FALSE;
3D2D:  MOVLB  0F
3D2E:  BCF    47.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
3D2F:  MOVLW  C9
3D30:  MOVLB  03
3D31:  MOVWF  11
3D32:  MOVLW  06
3D33:  MOVWF  12
3D34:  MOVLP  00
3D35:  MOVLB  00
3D36:  CALL   749
3D37:  MOVLP  38
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
3D38:  MOVLW  DC
3D39:  MOVLB  03
3D3A:  MOVWF  11
3D3B:  MOVLW  06
3D3C:  MOVWF  12
3D3D:  MOVLP  00
3D3E:  MOVLB  00
3D3F:  CALL   749
3D40:  MOVLP  38
....................    
....................    //Start loop
....................    while(!is_finished)
3D41:  MOVLB  0F
3D42:  BTFSS  47.0
3D43:  GOTO   546
3D44:  MOVLB  00
3D45:  GOTO   5FC
3D46:  MOVLB  00
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
3D47:  MOVF   59,F
3D48:  BTFSC  03.2
3D49:  GOTO   591
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
3D4A:  MOVLW  20
3D4B:  MOVLB  0F
3D4C:  MOVWF  5B
3D4D:  MOVLW  19
3D4E:  MOVWF  5A
3D4F:  MOVLB  00
3D50:  MOVF   59,W
3D51:  MOVLB  0F
3D52:  MOVWF  5C
3D53:  MOVLP  10
3D54:  MOVLB  00
3D55:  GOTO   2FB
3D56:  MOVLP  38
3D57:  MOVF   79,W
3D58:  MOVWF  7A
3D59:  MOVF   78,W
3D5A:  MOVWF  04
3D5B:  MOVF   7A,W
3D5C:  MOVWF  05
3D5D:  MOVLW  0C
3D5E:  MOVWF  78
3D5F:  MOVLW  24
3D60:  MOVWF  07
3D61:  MOVLW  D8
3D62:  MOVWF  06
3D63:  MOVIW  [FSR0++],W
3D64:  MOVWI  W,[FSR1++]
3D65:  DECFSZ 78,F
3D66:  GOTO   563
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
3D67:  MOVLW  20
3D68:  MOVLB  0F
3D69:  MOVWF  55
3D6A:  MOVLW  19
3D6B:  MOVWF  54
3D6C:  MOVLW  20
3D6D:  MOVWF  57
3D6E:  MOVLW  39
3D6F:  MOVWF  56
3D70:  MOVLP  08
3D71:  MOVLB  00
3D72:  GOTO   779
3D73:  MOVLP  38
....................          
....................          if(recieve_cmd.is_exist)
3D74:  MOVLB  0F
3D75:  BTFSC  4A.0
3D76:  GOTO   579
3D77:  MOVLB  00
3D78:  GOTO   588
3D79:  MOVLB  00
....................             is_finished = execute_command(&recieve_cmd); 
3D7A:  MOVLW  24
3D7B:  MOVLB  0F
3D7C:  MOVWF  55
3D7D:  MOVLW  D8
3D7E:  MOVWF  54
3D7F:  MOVLP  28
3D80:  MOVLB  00
3D81:  GOTO   6DC
3D82:  MOVLP  38
3D83:  MOVLB  0F
3D84:  BCF    47.0
3D85:  BTFSC  78.0
3D86:  BSF    47.0
3D87:  MOVLB  00
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
3D88:  MOVLW  EB
3D89:  MOVLB  03
3D8A:  MOVWF  11
3D8B:  MOVLW  06
3D8C:  MOVWF  12
3D8D:  MOVLP  00
3D8E:  MOVLB  00
3D8F:  CALL   749
3D90:  MOVLP  38
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
3D91:  MOVLB  0F
3D92:  BTFSC  47.0
3D93:  GOTO   596
3D94:  MOVLB  00
3D95:  GOTO   598
3D96:  MOVLB  00
....................          break;
3D97:  GOTO   5FC
....................          
....................       delay_ms(400);
3D98:  MOVLW  02
3D99:  MOVLB  0F
3D9A:  MOVWF  54
3D9B:  MOVLB  00
3D9C:  MOVLW  C8
3D9D:  MOVLB  13
3D9E:  MOVWF  43
3D9F:  MOVLP  08
3DA0:  MOVLB  00
3DA1:  CALL   73F
3DA2:  MOVLP  38
3DA3:  MOVLB  0F
3DA4:  DECFSZ 54,F
3DA5:  GOTO   5A8
3DA6:  GOTO   5AA
3DA7:  MOVLB  00
3DA8:  MOVLB  00
3DA9:  GOTO   59C
....................       fprintf(PC,"0x%08LX\r\n", get_current_sec());
3DAA:  MOVLP  08
3DAB:  MOVLB  00
3DAC:  CALL   589
3DAD:  MOVLP  38
3DAE:  MOVF   7A,W
3DAF:  MOVLB  0F
3DB0:  MOVWF  57
3DB1:  MOVF   79,W
3DB2:  MOVWF  56
3DB3:  MOVF   78,W
3DB4:  MOVWF  55
3DB5:  MOVF   77,W
3DB6:  MOVWF  54
3DB7:  MOVLW  30
3DB8:  MOVLB  13
3DB9:  MOVWF  2E
3DBA:  MOVLP  00
3DBB:  MOVLB  00
3DBC:  CALL   721
3DBD:  MOVLP  38
3DBE:  MOVLW  78
3DBF:  MOVLB  13
3DC0:  MOVWF  2E
3DC1:  MOVLP  00
3DC2:  MOVLB  00
3DC3:  CALL   721
3DC4:  MOVLP  38
3DC5:  MOVLB  0F
3DC6:  MOVF   57,W
3DC7:  MOVLB  11
3DC8:  MOVWF  51
3DC9:  MOVLW  37
3DCA:  MOVWF  52
3DCB:  MOVLP  08
3DCC:  MOVLB  00
3DCD:  CALL   592
3DCE:  MOVLP  38
3DCF:  MOVLB  0F
3DD0:  MOVF   56,W
3DD1:  MOVLB  11
3DD2:  MOVWF  51
3DD3:  MOVLW  37
3DD4:  MOVWF  52
3DD5:  MOVLP  08
3DD6:  MOVLB  00
3DD7:  CALL   592
3DD8:  MOVLP  38
3DD9:  MOVLB  0F
3DDA:  MOVF   55,W
3DDB:  MOVLB  11
3DDC:  MOVWF  51
3DDD:  MOVLW  37
3DDE:  MOVWF  52
3DDF:  MOVLP  08
3DE0:  MOVLB  00
3DE1:  CALL   592
3DE2:  MOVLP  38
3DE3:  MOVLB  0F
3DE4:  MOVF   54,W
3DE5:  MOVLB  11
3DE6:  MOVWF  51
3DE7:  MOVLW  37
3DE8:  MOVWF  52
3DE9:  MOVLP  08
3DEA:  MOVLB  00
3DEB:  CALL   592
3DEC:  MOVLP  38
3DED:  MOVLW  0D
3DEE:  MOVLB  13
3DEF:  MOVWF  2E
3DF0:  MOVLP  00
3DF1:  MOVLB  00
3DF2:  CALL   721
3DF3:  MOVLP  38
3DF4:  MOVLW  0A
3DF5:  MOVLB  13
3DF6:  MOVWF  2E
3DF7:  MOVLP  00
3DF8:  MOVLB  00
3DF9:  CALL   721
3DFA:  MOVLP  38
3DFB:  GOTO   541
....................       //fprintf(PC, ".");
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
3DFC:  MOVLW  FB
3DFD:  MOVLB  03
3DFE:  MOVWF  11
3DFF:  MOVLW  06
3E00:  MOVWF  12
3E01:  MOVLP  00
3E02:  MOVLB  00
3E03:  CALL   749
3E04:  MOVLP  38
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3E05:  MOVLW  2E
3E06:  MOVLB  13
3E07:  MOVWF  2E
3E08:  MOVLP  00
3E09:  MOVLB  00
3E0A:  CALL   721
3E0B:  MOVLP  38
....................       delay_ms(1000);
3E0C:  MOVLW  04
3E0D:  MOVLB  0F
3E0E:  MOVWF  54
3E0F:  MOVLB  00
3E10:  MOVLW  FA
3E11:  MOVLB  13
3E12:  MOVWF  43
3E13:  MOVLP  08
3E14:  MOVLB  00
3E15:  CALL   73F
3E16:  MOVLP  38
3E17:  MOVLB  0F
3E18:  DECFSZ 54,F
3E19:  GOTO   61C
3E1A:  GOTO   61E
3E1B:  MOVLB  00
3E1C:  MOVLB  00
3E1D:  GOTO   610
3E1E:  MOVLB  00
3E1F:  GOTO   605
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
3E20:  MOVLW  1B
3E21:  MOVLB  03
3E22:  MOVWF  11
3E23:  MOVLW  07
3E24:  MOVWF  12
3E25:  MOVLP  00
3E26:  MOVLB  00
3E27:  CALL   749
3E28:  MOVLP  38
....................    
.................... }
.................... 
3E29:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
