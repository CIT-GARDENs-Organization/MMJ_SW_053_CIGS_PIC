CCS PCM C Compiler, Version 5.104, 57077               13-7-25 14:47

               Filename:   build\mmj_cigs_main.lst

               ROM used:   14923 words (91%)
                           Largest free fragment is 1239
               RAM used:   892 (44%) at main() level
                           1144 (56%) worst case
               Stack used: 7 locations (6 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  30
0001:  GOTO   194
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06B
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005B:  DATA D4,34
005C:  DATA ED,32
005D:  DATA 72,10
005E:  DATA 49,37
005F:  DATA 69,3A
0060:  DATA E9,30
0061:  DATA EC,34
0062:  DATA FA,32
0063:  DATA 0D,05
0064:  DATA 00,00
0065:  DATA 89,21
0066:  DATA EF,36
0067:  DATA 70,36
0068:  DATA 65,3A
0069:  DATA E5,06
006A:  DATA 0A,00
*
0084:  DATA D5,20
0085:  DATA 52,2A
0086:  DATA A0,24
0087:  DATA EE,34
0088:  DATA F4,34
0089:  DATA 61,36
008A:  DATA 69,3D
008B:  DATA E5,06
008C:  DATA 0A,00
008D:  DATA 89,21
008E:  DATA EF,36
008F:  DATA 70,36
0090:  DATA 65,3A
0091:  DATA E5,06
0092:  DATA 0A,00
0093:  DATA CD,24
0094:  DATA D3,29
0095:  DATA C9,27
0096:  DATA 4E,10
0097:  DATA 46,26
0098:  DATA C1,29
0099:  DATA 48,10
009A:  DATA 49,37
009B:  DATA 69,3A
009C:  DATA E9,30
009D:  DATA EC,34
009E:  DATA FA,32
009F:  DATA 0D,05
00A0:  DATA 00,01
00A1:  DATA 09,23
00A2:  DATA EC,30
00A3:  DATA 73,34
00A4:  DATA A0,34
00A5:  DATA 73,10
00A6:  DATA EE,37
00A7:  DATA 74,10
00A8:  DATA E3,37
00A9:  DATA 6E,37
00AA:  DATA E5,31
00AB:  DATA F4,32
00AC:  DATA E4,06
00AD:  DATA 0A,00
00AE:  DATA 89,29
00AF:  DATA 4D,23
00B0:  DATA 20,10
00B1:  DATA D0,24
00B2:  DATA 43,26
00B3:  DATA CF,23
00B4:  DATA A0,2A
00B5:  DATA F3,32
00B6:  DATA A0,21
00B7:  DATA EF,3A
00B8:  DATA 6E,3A
00B9:  DATA 65,39
00BA:  DATA 20,10
00BB:  DATA 20,10
00BC:  DATA 20,10
00BD:  DATA 3A,10
00BE:  DATA 30,3C
00BF:  DATA 25,18
00C0:  DATA 38,26
00C1:  DATA D8,06
00C2:  DATA 0A,00
00C3:  DATA 89,29
00C4:  DATA 4D,23
00C5:  DATA 20,10
00C6:  DATA D0,24
00C7:  DATA 43,26
00C8:  DATA CF,23
00C9:  DATA 20,26
00CA:  DATA EF,37
00CB:  DATA 70,10
00CC:  DATA C3,37
00CD:  DATA 75,37
00CE:  DATA F4,32
00CF:  DATA 72,10
00D0:  DATA 20,10
00D1:  DATA 20,10
00D2:  DATA 3A,10
00D3:  DATA 30,3C
00D4:  DATA 25,18
00D5:  DATA 32,2C
00D6:  DATA 0D,05
00D7:  DATA 00,01
00D8:  DATA 89,29
00D9:  DATA 4D,23
00DA:  DATA 20,10
00DB:  DATA CD,22
00DC:  DATA C1,29
00DD:  DATA 20,10
00DE:  DATA A0,2A
00DF:  DATA F3,32
00E0:  DATA A0,21
00E1:  DATA EF,3A
00E2:  DATA 6E,3A
00E3:  DATA 65,39
00E4:  DATA 20,10
00E5:  DATA 20,10
00E6:  DATA 20,10
00E7:  DATA 3A,10
00E8:  DATA 30,3C
00E9:  DATA 25,18
00EA:  DATA 38,26
00EB:  DATA D8,06
00EC:  DATA 0A,00
00ED:  DATA 89,29
00EE:  DATA 4D,23
00EF:  DATA 20,10
00F0:  DATA CD,22
00F1:  DATA C1,29
00F2:  DATA 20,10
00F3:  DATA 20,26
00F4:  DATA EF,37
00F5:  DATA 70,10
00F6:  DATA C3,37
00F7:  DATA 75,37
00F8:  DATA F4,32
00F9:  DATA 72,10
00FA:  DATA 20,10
00FB:  DATA 20,10
00FC:  DATA 3A,10
00FD:  DATA 30,3C
00FE:  DATA 25,18
00FF:  DATA 32,2C
0100:  DATA 0D,05
0101:  DATA 00,01
0102:  DATA 89,26
0103:  DATA C9,29
0104:  DATA 46,10
0105:  DATA D0,24
0106:  DATA 43,26
0107:  DATA CF,23
0108:  DATA A0,2A
0109:  DATA F3,32
010A:  DATA A0,21
010B:  DATA EF,3A
010C:  DATA 6E,3A
010D:  DATA 65,39
010E:  DATA 20,10
010F:  DATA 20,10
0110:  DATA 20,10
0111:  DATA 3A,10
0112:  DATA 30,3C
0113:  DATA 25,18
0114:  DATA 38,26
0115:  DATA D8,06
0116:  DATA 0A,00
0117:  DATA 89,26
0118:  DATA C9,29
0119:  DATA 46,10
011A:  DATA D0,24
011B:  DATA 43,26
011C:  DATA CF,23
011D:  DATA A0,2A
011E:  DATA EE,31
011F:  DATA 6F,38
0120:  DATA F9,32
0121:  DATA 64,10
0122:  DATA C3,37
0123:  DATA 75,37
0124:  DATA F4,32
0125:  DATA 72,10
0126:  DATA 3A,10
0127:  DATA 30,3C
0128:  DATA 25,18
0129:  DATA 38,26
012A:  DATA D8,06
012B:  DATA 0A,00
012C:  DATA 89,26
012D:  DATA C9,29
012E:  DATA 46,10
012F:  DATA D0,24
0130:  DATA 43,26
0131:  DATA CF,23
0132:  DATA 20,26
0133:  DATA EF,37
0134:  DATA 70,10
0135:  DATA C3,37
0136:  DATA 75,37
0137:  DATA F4,32
0138:  DATA 72,10
0139:  DATA 20,10
013A:  DATA 20,10
013B:  DATA 3A,10
013C:  DATA 30,3C
013D:  DATA 25,18
013E:  DATA 32,2C
013F:  DATA 0D,05
0140:  DATA 00,01
0141:  DATA 89,26
0142:  DATA C9,29
0143:  DATA 46,10
0144:  DATA D0,24
0145:  DATA 43,26
0146:  DATA CF,23
0147:  DATA A0,2B
0148:  DATA F2,34
0149:  DATA F4,32
014A:  DATA A0,21
014B:  DATA EF,3A
014C:  DATA 6E,3A
014D:  DATA 65,39
014E:  DATA 20,10
014F:  DATA 20,10
0150:  DATA 3A,10
0151:  DATA 30,3C
0152:  DATA 25,18
0153:  DATA 32,2C
0154:  DATA 0D,05
0155:  DATA 00,01
0156:  DATA 89,26
0157:  DATA C9,29
0158:  DATA 46,10
0159:  DATA CD,22
015A:  DATA C1,29
015B:  DATA 20,10
015C:  DATA A0,2A
015D:  DATA F3,32
015E:  DATA A0,21
015F:  DATA EF,3A
0160:  DATA 6E,3A
0161:  DATA 65,39
0162:  DATA 20,10
0163:  DATA 20,10
0164:  DATA 20,10
0165:  DATA 3A,10
0166:  DATA 30,3C
0167:  DATA 25,18
0168:  DATA 38,26
0169:  DATA D8,06
016A:  DATA 0A,00
016B:  DATA 89,26
016C:  DATA C9,29
016D:  DATA 46,10
016E:  DATA CD,22
016F:  DATA C1,29
0170:  DATA 20,10
0171:  DATA A0,2A
0172:  DATA EE,31
0173:  DATA 6F,38
0174:  DATA F9,32
0175:  DATA 64,10
0176:  DATA C3,37
0177:  DATA 75,37
0178:  DATA F4,32
0179:  DATA 72,10
017A:  DATA 3A,10
017B:  DATA 30,3C
017C:  DATA 25,18
017D:  DATA 38,26
017E:  DATA D8,06
017F:  DATA 0A,00
0180:  DATA 89,26
0181:  DATA C9,29
0182:  DATA 46,10
0183:  DATA CD,22
0184:  DATA C1,29
0185:  DATA 20,10
0186:  DATA 20,26
0187:  DATA EF,37
0188:  DATA 70,10
0189:  DATA C3,37
018A:  DATA 75,37
018B:  DATA F4,32
018C:  DATA 72,10
018D:  DATA 20,10
018E:  DATA 20,10
018F:  DATA 3A,10
0190:  DATA 30,3C
0191:  DATA 25,18
0192:  DATA 32,2C
0193:  DATA 0D,05
0194:  DATA 00,01
0195:  DATA 89,21
0196:  DATA EF,36
0197:  DATA 70,36
0198:  DATA 65,3A
0199:  DATA E5,06
019A:  DATA 0A,00
019B:  DATA CD,34
019C:  DATA F3,39
019D:  DATA E9,37
019E:  DATA 6E,10
019F:  DATA 46,36
01A0:  DATA E1,39
01A1:  DATA 68,10
01A2:  DATA E9,39
01A3:  DATA 20,37
01A4:  DATA 6F,3A
01A5:  DATA A0,31
01A6:  DATA 6F,37
01A7:  DATA EE,32
01A8:  DATA 63,3A
01A9:  DATA 65,32
01AA:  DATA 0D,05
01AB:  DATA 00,01
01AC:  DATA 57,39
01AD:  DATA 69,3A
01AE:  DATA 65,10
01AF:  DATA CD,24
01B0:  DATA 53,23
01B1:  DATA A0,20
01B2:  DATA 64,32
01B3:  DATA F2,32
01B4:  DATA F3,39
01B5:  DATA A0,20
01B6:  DATA F2,32
01B7:  DATA 61,10
01B8:  DATA C3,37
01B9:  DATA 6D,38
01BA:  DATA EC,32
01BB:  DATA F4,32
01BC:  DATA 0D,05
01BD:  DATA 00,00
01BE:  DATA 5B,28
01BF:  DATA C9,21
01C0:  DATA CC,27
01C1:  DATA C7,2E
01C2:  DATA 20,1D
01C3:  DATA 20,00
01C4:  DATA CD,34
01C5:  DATA F3,39
01C6:  DATA E9,37
01C7:  DATA 6E,10
01C8:  DATA 46,36
01C9:  DATA E1,39
01CA:  DATA 68,10
01CB:  DATA E9,39
01CC:  DATA 20,37
01CD:  DATA 6F,3A
01CE:  DATA A0,31
01CF:  DATA 6F,37
01D0:  DATA EE,32
01D1:  DATA 63,3A
01D2:  DATA 65,32
01D3:  DATA 0D,05
01D4:  DATA 00,00
01D5:  DATA 41,22
01D6:  DATA 37,1A
01D7:  DATA 39,18
01D8:  DATA A0,24
01D9:  DATA EE,34
01DA:  DATA F4,34
01DB:  DATA 61,36
01DC:  DATA 69,3D
01DD:  DATA E5,06
01DE:  DATA 0A,00
01DF:  DATA 89,21
01E0:  DATA EF,36
01E1:  DATA 70,36
01E2:  DATA 65,3A
01E3:  DATA E5,06
01E4:  DATA 0A,00
01E5:  DATA 89,2B
01E6:  DATA D2,24
01E7:  DATA D4,22
01E8:  DATA 20,1D
01E9:  DATA A0,12
01EA:  DATA 64,10
01EB:  DATA A8,12
01EC:  DATA 30,1A
01ED:  DATA 4C,2C
01EE:  DATA A9,06
01EF:  DATA 0A,00
01F0:  DATA 89,29
01F1:  DATA C5,28
01F2:  DATA 20,10
01F3:  DATA 20,1D
01F4:  DATA A0,12
01F5:  DATA 64,10
01F6:  DATA A8,12
01F7:  DATA 30,1A
01F8:  DATA 4C,2C
01F9:  DATA A9,06
01FA:  DATA 0A,00
01FB:  DATA 89,20
01FC:  DATA 44,22
01FD:  DATA 52,10
01FE:  DATA 20,1D
01FF:  DATA A0,12
0200:  DATA 64,10
0201:  DATA A8,12
0202:  DATA 30,1A
0203:  DATA 4C,2C
0204:  DATA A9,06
0205:  DATA 0A,00
0206:  DATA 09,28
0207:  DATA 4D,10
0208:  DATA 20,10
0209:  DATA 20,10
020A:  DATA 3A,10
020B:  DATA 25,32
020C:  DATA 20,14
020D:  DATA 25,18
020E:  DATA 34,26
020F:  DATA D8,14
0210:  DATA 0D,05
0211:  DATA 00,01
0212:  DATA 89,29
0213:  DATA C8,20
0214:  DATA C4,27
0215:  DATA 57,10
0216:  DATA 3A,10
0217:  DATA 25,32
0218:  DATA 20,14
0219:  DATA 25,18
021A:  DATA 34,26
021B:  DATA D8,14
021C:  DATA 0D,05
021D:  DATA 00,01
021E:  DATA 89,2B
021F:  DATA C5,20
0220:  DATA CB,17
0221:  DATA 54,29
0222:  DATA 49,10
0223:  DATA 3A,10
0224:  DATA 25,32
0225:  DATA 20,14
0226:  DATA 25,18
0227:  DATA 34,26
0228:  DATA D8,14
0229:  DATA 0D,05
022A:  DATA 00,01
022B:  DATA 09,29
022C:  DATA 41,27
022D:  DATA C7,22
022E:  DATA 20,10
022F:  DATA 3A,10
0230:  DATA 25,32
0231:  DATA 20,14
0232:  DATA 25,18
0233:  DATA 34,26
0234:  DATA D8,14
0235:  DATA 0D,05
0236:  DATA 00,01
0237:  DATA 89,21
0238:  DATA 4F,22
0239:  DATA 49,27
023A:  DATA 47,10
023B:  DATA 3A,10
023C:  DATA 25,32
023D:  DATA 20,14
023E:  DATA 25,18
023F:  DATA 34,26
0240:  DATA D8,14
0241:  DATA 0D,05
0242:  DATA 00,01
0243:  DATA 89,2D
0244:  DATA 41,22
0245:  DATA 37,1A
0246:  DATA 39,18
0247:  DATA 5D,10
0248:  DATA C6,34
0249:  DATA EE,30
024A:  DATA 6C,10
024B:  DATA C3,37
024C:  DATA ED,36
024D:  DATA 61,37
024E:  DATA 64,10
024F:  DATA 3A,10
0250:  DATA 25,18
0251:  DATA 34,26
0252:  DATA D8,06
0253:  DATA 0A,00
0254:  DATA 0D,05
0255:  DATA 53,3A
0256:  DATA 61,39
0257:  DATA 74,10
0258:  DATA ED,30
0259:  DATA EB,32
025A:  DATA 5F,39
025B:  DATA E5,31
025C:  DATA E5,34
025D:  DATA F6,32
025E:  DATA DF,31
025F:  DATA EF,36
0260:  DATA ED,30
0261:  DATA 6E,32
0262:  DATA 0D,05
0263:  DATA 00,01
0264:  DATA 89,2D
0265:  DATA C2,27
0266:  DATA D3,29
0267:  DATA 5D,10
0268:  DATA 3E,1F
0269:  DATA 3E,10
026A:  DATA 00,01
026B:  DATA 45,37
026C:  DATA 64,10
026D:  DATA ED,30
026E:  DATA EB,32
026F:  DATA 5F,39
0270:  DATA E5,31
0271:  DATA 69,3B
0272:  DATA E5,2F
0273:  DATA E3,37
0274:  DATA ED,36
0275:  DATA 61,37
0276:  DATA E4,06
0277:  DATA 8A,06
0278:  DATA 0A,00
0279:  DATA F3,34
027A:  DATA 67,37
027B:  DATA 61,36
027C:  DATA A0,32
027D:  DATA 6E,32
027E:  DATA A0,3B
027F:  DATA 69,3A
0280:  DATA 68,10
0281:  DATA 53,23
0282:  DATA C4,06
0283:  DATA 0A,00
0284:  DATA E4,37
0285:  DATA EE,13
0286:  DATA 74,10
0287:  DATA E6,34
0288:  DATA 6E,32
0289:  DATA A0,29
028A:  DATA 46,22
028B:  DATA 0D,05
028C:  DATA 00,00
028D:  DATA 89,16
028E:  DATA 3E,10
028F:  DATA 49,37
0290:  DATA F6,30
0291:  DATA EC,34
0292:  DATA 64,10
0293:  DATA 46,39
0294:  DATA E1,36
0295:  DATA 65,10
0296:  DATA 49,22
0297:  DATA 20,39
0298:  DATA E5,31
0299:  DATA E5,34
029A:  DATA F6,32
029B:  DATA 64,1D
029C:  DATA A0,12
029D:  DATA D8,06
029E:  DATA 0A,00
029F:  DATA 89,16
02A0:  DATA 3E,10
02A1:  DATA 43,29
02A2:  DATA 43,10
02A3:  DATA 65,39
02A4:  DATA F2,37
02A5:  DATA F2,10
02A6:  DATA 0D,05
02A7:  DATA 00,01
02A8:  DATA 89,04
02A9:  DATA 2D,1F
02AA:  DATA 20,39
02AB:  DATA E5,31
02AC:  DATA E5,34
02AD:  DATA F6,32
02AE:  DATA 64,10
02AF:  DATA 43,29
02B0:  DATA 43,1D
02B1:  DATA A0,12
02B2:  DATA D8,06
02B3:  DATA 0A,00
02B4:  DATA 89,04
02B5:  DATA 20,10
02B6:  DATA A0,31
02B7:  DATA 6F,36
02B8:  DATA EC,32
02B9:  DATA 63,3A
02BA:  DATA A0,21
02BB:  DATA D2,21
02BC:  DATA 20,1D
02BD:  DATA A0,12
02BE:  DATA D8,06
02BF:  DATA 0A,00
02C0:  DATA 89,16
02C1:  DATA 3E,10
02C2:  DATA 49,37
02C3:  DATA F6,30
02C4:  DATA EC,34
02C5:  DATA 64,10
02C6:  DATA E4,32
02C7:  DATA F6,34
02C8:  DATA E3,32
02C9:  DATA A0,24
02CA:  DATA 44,10
02CB:  DATA F2,32
02CC:  DATA E3,32
02CD:  DATA 69,3B
02CE:  DATA 65,32
02CF:  DATA 0D,05
02D0:  DATA 00,01
02D1:  DATA 89,04
02D2:  DATA 2D,1F
02D3:  DATA 20,39
02D4:  DATA E5,31
02D5:  DATA E5,34
02D6:  DATA F6,32
02D7:  DATA 64,1D
02D8:  DATA 20,10
02D9:  DATA 20,10
02DA:  DATA A0,12
02DB:  DATA D8,06
02DC:  DATA 0A,00
02DD:  DATA 89,04
02DE:  DATA 20,10
02DF:  DATA A0,26
02E0:  DATA 79,10
02E1:  DATA E4,32
02E2:  DATA F6,34
02E3:  DATA E3,32
02E4:  DATA A0,24
02E5:  DATA 44,1D
02E6:  DATA A0,12
02E7:  DATA D8,06
02E8:  DATA 0A,00
02E9:  DATA 89,2D
02EA:  DATA C2,27
02EB:  DATA D3,29
02EC:  DATA 5D,10
02ED:  DATA 3C,1E
02EE:  DATA 3C,10
02EF:  DATA 00,01
02F0:  DATA 89,16
02F1:  DATA 3E,10
02F2:  DATA 46,39
02F3:  DATA E1,36
02F4:  DATA 65,10
02F5:  DATA 49,22
02F6:  DATA 3A,10
02F7:  DATA 25,2C
02F8:  DATA 0D,05
02F9:  DATA 00,01
02FA:  DATA 89,16
02FB:  DATA 3E,10
02FC:  DATA C3,37
02FD:  DATA 6E,3A
02FE:  DATA 65,37
02FF:  DATA 74,10
0300:  DATA F3,34
0301:  DATA FA,32
0302:  DATA 3A,10
0303:  DATA 25,32
0304:  DATA 0D,05
0305:  DATA 00,00
0306:  DATA 53,3A
0307:  DATA 61,39
0308:  DATA 74,10
0309:  DATA D3,26
030A:  DATA 46,10
030B:  DATA F5,39
030C:  DATA 69,37
030D:  DATA 67,10
030E:  DATA F2,32
030F:  DATA F1,32
0310:  DATA 73,3A
0311:  DATA A0,39
0312:  DATA E5,30
0313:  DATA F1,3A
0314:  DATA 65,37
0315:  DATA E3,32
0316:  DATA 0D,05
0317:  DATA 00,01
0318:  DATA 45,39
0319:  DATA F2,37
031A:  DATA F2,10
031B:  DATA 20,29
031C:  DATA E5,31
031D:  DATA E5,34
031E:  DATA F6,34
031F:  DATA EE,33
0320:  DATA A0,31
0321:  DATA EF,36
0322:  DATA ED,30
0323:  DATA 6E,32
0324:  DATA A0,34
0325:  DATA EE,31
0326:  DATA 6F,37
0327:  DATA F3,34
0328:  DATA 73,3A
0329:  DATA 65,37
032A:  DATA 74,10
032B:  DATA F7,34
032C:  DATA 74,34
032D:  DATA 20,3A
032E:  DATA E8,32
032F:  DATA 20,32
0330:  DATA E5,39
0331:  DATA E9,33
0332:  DATA EE,06
0333:  DATA 0A,00
0334:  DATA D3,26
0335:  DATA 46,10
0336:  DATA F5,39
0337:  DATA 65,10
0338:  DATA F2,32
0339:  DATA F1,3A
033A:  DATA E5,39
033B:  DATA 74,10
033C:  DATA 61,36
033D:  DATA EC,37
033E:  DATA F7,32
033F:  DATA E4,06
0340:  DATA 0A,00
0341:  DATA D3,26
0342:  DATA 46,10
0343:  DATA F5,39
0344:  DATA 65,10
0345:  DATA F2,32
0346:  DATA F1,3A
0347:  DATA E5,39
0348:  DATA 74,10
0349:  DATA E4,32
034A:  DATA EE,3C
034B:  DATA 65,32
034C:  DATA 0D,05
034D:  DATA 00,01
034E:  DATA D2,32
034F:  DATA 74,39
0350:  DATA 79,10
0351:  DATA F2,32
0352:  DATA F1,3A
0353:  DATA E5,39
0354:  DATA 74,10
0355:  DATA F4,37
0356:  DATA 20,21
0357:  DATA CF,29
0358:  DATA 53,10
0359:  DATA D0,24
035A:  DATA C3,06
035B:  DATA 0A,00
035C:  DATA 45,39
035D:  DATA F2,37
035E:  DATA F2,10
035F:  DATA 20,29
0360:  DATA E5,31
0361:  DATA E5,34
0362:  DATA F6,34
0363:  DATA EE,33
0364:  DATA A0,31
0365:  DATA EF,36
0366:  DATA ED,30
0367:  DATA 6E,32
0368:  DATA A0,34
0369:  DATA EE,31
036A:  DATA 6F,37
036B:  DATA F3,34
036C:  DATA 73,3A
036D:  DATA 65,37
036E:  DATA 74,10
036F:  DATA F7,34
0370:  DATA 74,34
0371:  DATA 20,3A
0372:  DATA E8,32
0373:  DATA 20,32
0374:  DATA E5,39
0375:  DATA E9,33
0376:  DATA EE,06
0377:  DATA 0A,00
0378:  DATA 45,37
0379:  DATA 64,10
037A:  DATA D3,26
037B:  DATA 46,10
037C:  DATA F5,39
037D:  DATA 69,37
037E:  DATA 67,10
037F:  DATA F2,32
0380:  DATA F1,32
0381:  DATA 73,3A
0382:  DATA A0,39
0383:  DATA E5,30
0384:  DATA F1,3A
0385:  DATA 65,37
0386:  DATA E3,32
0387:  DATA 0D,05
0388:  DATA 00,00
0389:  DATA C9,27
038A:  DATA A0,24
038B:  DATA EE,34
038C:  DATA F4,34
038D:  DATA 61,36
038E:  DATA 69,3D
038F:  DATA E5,06
0390:  DATA 0A,00
0391:  DATA 89,21
0392:  DATA EF,36
0393:  DATA 70,36
0394:  DATA 65,3A
0395:  DATA E5,06
0396:  DATA 0A,00
0397:  DATA 41,22
0398:  DATA 43,10
0399:  DATA 49,37
039A:  DATA 69,3A
039B:  DATA E9,30
039C:  DATA EC,34
039D:  DATA FA,32
039E:  DATA 0D,05
039F:  DATA 00,01
03A0:  DATA 89,21
03A1:  DATA EF,36
03A2:  DATA 70,36
03A3:  DATA 65,3A
03A4:  DATA E5,06
03A5:  DATA 0A,00
03A6:  DATA 53,3A
03A7:  DATA 61,39
03A8:  DATA 74,10
03A9:  DATA D3,2B
03AA:  DATA C5,22
03AB:  DATA D0,06
03AC:  DATA 0A,00
03AD:  DATA 89,29
03AE:  DATA F7,32
03AF:  DATA 65,38
03B0:  DATA A0,39
03B1:  DATA F4,32
03B2:  DATA 70,10
03B3:  DATA 3A,10
03B4:  DATA A5,3A
03B5:  DATA 0D,05
03B6:  DATA 00,01
03B7:  DATA 45,27
03B8:  DATA 44,10
03B9:  DATA D3,2B
03BA:  DATA C5,22
03BB:  DATA D0,06
03BC:  DATA 0A,00
03BD:  DATA 53,3A
03BE:  DATA 61,39
03BF:  DATA 74,10
03C0:  DATA C3,24
03C1:  DATA C7,29
03C2:  DATA 20,32
03C3:  DATA 61,3A
03C4:  DATA 61,10
03C5:  DATA E3,37
03C6:  DATA 6E,3B
03C7:  DATA 65,39
03C8:  DATA F3,34
03C9:  DATA 6F,37
03CA:  DATA 0D,05
03CB:  DATA 00,01
03CC:  DATA 45,37
03CD:  DATA 64,10
03CE:  DATA C3,24
03CF:  DATA C7,29
03D0:  DATA 20,32
03D1:  DATA 61,3A
03D2:  DATA 61,10
03D3:  DATA E3,37
03D4:  DATA 6E,3B
03D5:  DATA 65,39
03D6:  DATA F3,34
03D7:  DATA 6F,37
03D8:  DATA 0D,05
03D9:  DATA 00,00
03DA:  DATA D3,26
03DB:  DATA 46,10
03DC:  DATA E4,30
03DD:  DATA F4,30
03DE:  DATA 20,36
03DF:  DATA E9,39
03E0:  DATA 74,10
03E1:  DATA E9,39
03E2:  DATA 20,33
03E3:  DATA 75,36
03E4:  DATA EC,10
03E5:  DATA A1,10
03E6:  DATA 0D,05
03E7:  DATA 80,00
03E8:  DATA D3,26
03E9:  DATA 46,10
03EA:  DATA E4,30
03EB:  DATA F4,30
03EC:  DATA 20,36
03ED:  DATA E9,39
03EE:  DATA 74,10
03EF:  DATA E9,39
03F0:  DATA A0,32
03F1:  DATA 6D,38
03F2:  DATA F4,3C
03F3:  DATA 0D,05
03F4:  DATA 00,00
03F5:  DATA 53,3A
03F6:  DATA 61,39
03F7:  DATA 74,10
03F8:  DATA CD,27
03F9:  DATA C4,22
03FA:  DATA 20,22
03FB:  DATA D5,26
03FC:  DATA CD,2C
03FD:  DATA 0D,05
03FE:  DATA 00,01
03FF:  DATA 89,26
0400:  DATA 4F,22
0401:  DATA 45,10
0402:  DATA 20,10
0403:  DATA 20,10
0404:  DATA 3A,10
0405:  DATA 25,18
0406:  DATA 32,2C
0407:  DATA 0D,05
0408:  DATA 00,01
0409:  DATA 09,28
040A:  DATA 61,39
040B:  DATA E1,36
040C:  DATA 31,10
040D:  DATA 20,10
040E:  DATA 3A,10
040F:  DATA 30,3C
0410:  DATA 25,18
0411:  DATA 38,26
0412:  DATA D8,06
0413:  DATA 0A,00
0414:  DATA 09,28
0415:  DATA 61,39
0416:  DATA E1,36
0417:  DATA 32,10
0418:  DATA 20,10
0419:  DATA 3A,10
041A:  DATA 30,3C
041B:  DATA 25,18
041C:  DATA 34,26
041D:  DATA D8,06
041E:  DATA 0A,00
041F:  DATA 45,37
0420:  DATA 64,10
0421:  DATA CD,27
0422:  DATA C4,22
0423:  DATA 20,22
0424:  DATA D5,26
0425:  DATA CD,2C
0426:  DATA 0D,05
0427:  DATA 00,00
0428:  DATA 53,3A
0429:  DATA 61,39
042A:  DATA 74,10
042B:  DATA CD,27
042C:  DATA C4,22
042D:  DATA A0,26
042E:  DATA C5,20
042F:  DATA D3,2A
0430:  DATA D2,22
0431:  DATA 0D,05
0432:  DATA 00,00
0433:  DATA 53,3A
0434:  DATA 61,39
0435:  DATA 74,10
0436:  DATA CD,27
0437:  DATA C4,22
0438:  DATA A0,26
0439:  DATA C5,20
043A:  DATA D3,2A
043B:  DATA D2,22
043C:  DATA 20,2B
043D:  DATA 6F,36
043E:  DATA F4,30
043F:  DATA E7,32
0440:  DATA 0D,05
0441:  DATA 00,00
0442:  DATA 53,3A
0443:  DATA 61,39
0444:  DATA 74,10
0445:  DATA D3,2B
0446:  DATA C5,22
0447:  DATA D0,06
0448:  DATA 0A,00
0449:  DATA 89,29
044A:  DATA F7,32
044B:  DATA 65,38
044C:  DATA A0,39
044D:  DATA F4,32
044E:  DATA 70,10
044F:  DATA 3A,10
0450:  DATA A5,3A
0451:  DATA 0D,05
0452:  DATA 80,01
0453:  DATA 45,27
0454:  DATA 44,10
0455:  DATA D3,2B
0456:  DATA C5,22
0457:  DATA D0,06
0458:  DATA 0A,00
0459:  DATA F4,32
045A:  DATA 6D,38
045B:  DATA 5F,3A
045C:  DATA 6F,38
045D:  DATA 3A,10
045E:  DATA 25,2C
045F:  DATA 0D,05
0460:  DATA 00,01
0461:  DATA F4,32
0462:  DATA 6D,38
0463:  DATA 5F,31
0464:  DATA 6F,3A
0465:  DATA 3A,10
0466:  DATA 25,2C
0467:  DATA 0D,05
0468:  DATA 00,00
0469:  DATA 70,32
046A:  DATA 5F,3B
046B:  DATA 61,36
046C:  DATA F5,32
046D:  DATA 3A,10
046E:  DATA 25,2C
046F:  DATA 0D,05
0470:  DATA 00,00
0471:  DATA E3,34
0472:  DATA E7,39
0473:  DATA 5F,3B
0474:  DATA 61,36
0475:  DATA F5,32
0476:  DATA 3A,10
0477:  DATA 25,2C
0478:  DATA 0D,05
0479:  DATA 00,00
047A:  DATA E3,3A
047B:  DATA 72,39
047C:  DATA 65,37
047D:  DATA F4,2F
047E:  DATA F6,30
047F:  DATA EC,3A
0480:  DATA 65,1D
0481:  DATA A0,12
0482:  DATA D8,06
0483:  DATA 0A,00
0484:  DATA F6,37
0485:  DATA 6C,3A
0486:  DATA E1,33
0487:  DATA E5,2F
0488:  DATA F6,30
0489:  DATA EC,3A
048A:  DATA 65,1D
048B:  DATA A0,12
048C:  DATA D8,06
048D:  DATA 0A,00
048E:  DATA 53,3A
048F:  DATA 61,39
0490:  DATA 74,10
0491:  DATA CD,27
0492:  DATA C4,22
0493:  DATA 20,2A
0494:  DATA C5,29
0495:  DATA 54,10
0496:  DATA 49,2B
0497:  DATA 0D,05
0498:  DATA 00,01
0499:  DATA 89,29
049A:  DATA F7,32
049B:  DATA 65,38
049C:  DATA A0,39
049D:  DATA F4,32
049E:  DATA 70,10
049F:  DATA 3A,10
04A0:  DATA A5,3A
04A1:  DATA 0D,05
04A2:  DATA 00,01
04A3:  DATA 45,37
04A4:  DATA 64,10
04A5:  DATA CD,27
04A6:  DATA C4,22
04A7:  DATA 20,2A
04A8:  DATA C5,29
04A9:  DATA 54,10
04AA:  DATA 49,2B
04AB:  DATA 0D,05
04AC:  DATA 00,01
04AD:  DATA 41,32
04AE:  DATA 64,10
04AF:  DATA D3,26
04B0:  DATA 46,10
04B1:  DATA F1,3A
04B2:  DATA E5,06
04B3:  DATA 0A,00
04B4:  DATA 53,3A
04B5:  DATA 61,39
04B6:  DATA 74,10
04B7:  DATA 46,36
04B8:  DATA E1,39
04B9:  DATA 68,10
04BA:  DATA 45,39
04BB:  DATA E1,39
04BC:  DATA 65,10
04BD:  DATA 41,36
04BE:  DATA EC,06
04BF:  DATA 0A,00
04C0:  DATA 45,37
04C1:  DATA 64,10
04C2:  DATA 46,36
04C3:  DATA E1,39
04C4:  DATA 68,10
04C5:  DATA 45,39
04C6:  DATA E1,39
04C7:  DATA 65,10
04C8:  DATA 41,36
04C9:  DATA EC,06
04CA:  DATA 0A,00
04CB:  DATA 53,3A
04CC:  DATA 61,39
04CD:  DATA 74,10
04CE:  DATA 46,36
04CF:  DATA E1,39
04D0:  DATA 68,10
04D1:  DATA 45,39
04D2:  DATA E1,39
04D3:  DATA 65,10
04D4:  DATA 31,10
04D5:  DATA D3,32
04D6:  DATA 63,3A
04D7:  DATA 6F,39
04D8:  DATA 0D,05
04D9:  DATA 00,01
04DA:  DATA 89,29
04DB:  DATA E5,31
04DC:  DATA F4,37
04DD:  DATA 72,10
04DE:  DATA 41,32
04DF:  DATA 64,39
04E0:  DATA E5,39
04E1:  DATA 73,1D
04E2:  DATA 20,18
04E3:  DATA F8,12
04E4:  DATA 30,1C
04E5:  DATA 4C,2C
04E6:  DATA 0D,05
04E7:  DATA 00,01
04E8:  DATA 45,37
04E9:  DATA 64,10
04EA:  DATA 46,36
04EB:  DATA E1,39
04EC:  DATA 68,10
04ED:  DATA 45,39
04EE:  DATA E1,39
04EF:  DATA 65,10
04F0:  DATA 31,10
04F1:  DATA D3,32
04F2:  DATA 63,3A
04F3:  DATA 6F,39
04F4:  DATA 0D,05
04F5:  DATA 00,00
04F6:  DATA 53,3A
04F7:  DATA 61,39
04F8:  DATA 74,10
04F9:  DATA 46,36
04FA:  DATA E1,39
04FB:  DATA 68,10
04FC:  DATA C3,37
04FD:  DATA F0,3C
04FE:  DATA A0,18
04FF:  DATA A0,29
0500:  DATA E5,31
0501:  DATA F4,37
0502:  DATA F2,06
0503:  DATA 0A,00
0504:  DATA 89,29
0505:  DATA 75,31
0506:  DATA F3,32
0507:  DATA 63,3A
0508:  DATA 6F,39
0509:  DATA A0,20
050A:  DATA 64,32
050B:  DATA F2,32
050C:  DATA F3,39
050D:  DATA 3A,10
050E:  DATA 30,3C
050F:  DATA 25,18
0510:  DATA 38,26
0511:  DATA D8,06
0512:  DATA 0A,00
0513:  DATA 45,37
0514:  DATA 64,10
0515:  DATA 46,36
0516:  DATA E1,39
0517:  DATA 68,10
0518:  DATA C3,37
0519:  DATA F0,3C
051A:  DATA A0,18
051B:  DATA A0,29
051C:  DATA E5,31
051D:  DATA F4,37
051E:  DATA F2,06
051F:  DATA 0A,00
0520:  DATA 53,3A
0521:  DATA 61,39
0522:  DATA 74,10
0523:  DATA 46,36
0524:  DATA E1,39
0525:  DATA 68,10
0526:  DATA 57,39
0527:  DATA 69,3A
0528:  DATA 65,10
0529:  DATA C4,32
052A:  DATA ED,37
052B:  DATA 0D,05
052C:  DATA 00,01
052D:  DATA 89,26
052E:  DATA 4F,22
052F:  DATA 45,10
0530:  DATA 20,10
0531:  DATA 20,10
0532:  DATA 3A,10
0533:  DATA 25,18
0534:  DATA 32,2C
0535:  DATA 0D,05
0536:  DATA 00,01
0537:  DATA 89,20
0538:  DATA 64,32
0539:  DATA F2,32
053A:  DATA F3,39
053B:  DATA 20,10
053C:  DATA 3A,10
053D:  DATA 30,3C
053E:  DATA 25,18
053F:  DATA 38,26
0540:  DATA D8,06
0541:  DATA 0A,00
0542:  DATA 09,28
0543:  DATA E1,31
0544:  DATA EB,32
0545:  DATA 74,27
0546:  DATA F5,36
0547:  DATA 3A,10
0548:  DATA 30,3C
0549:  DATA 25,18
054A:  DATA 34,26
054B:  DATA D8,06
054C:  DATA 0A,00
054D:  DATA 57,39
054E:  DATA 69,3A
054F:  DATA 65,10
0550:  DATA C4,30
0551:  DATA F4,30
0552:  DATA 0D,05
0553:  DATA 00,01
0554:  DATA 45,37
0555:  DATA 64,10
0556:  DATA 46,36
0557:  DATA E1,39
0558:  DATA 68,10
0559:  DATA 57,39
055A:  DATA 69,3A
055B:  DATA 65,10
055C:  DATA C4,32
055D:  DATA ED,37
055E:  DATA 0D,05
055F:  DATA 00,00
0560:  DATA 53,3A
0561:  DATA 61,39
0562:  DATA 74,10
0563:  DATA 46,36
0564:  DATA E1,39
0565:  DATA 68,10
0566:  DATA 57,39
0567:  DATA 69,3A
0568:  DATA 65,10
0569:  DATA B4,35
056A:  DATA C2,3C
056B:  DATA F4,32
056C:  DATA A0,29
056D:  DATA 75,31
056E:  DATA F3,32
056F:  DATA 63,3A
0570:  DATA 6F,39
0571:  DATA 0D,05
0572:  DATA 00,01
0573:  DATA 45,37
0574:  DATA 64,10
0575:  DATA 46,36
0576:  DATA E1,39
0577:  DATA 68,10
0578:  DATA 57,39
0579:  DATA 69,3A
057A:  DATA 65,10
057B:  DATA B4,35
057C:  DATA C2,3C
057D:  DATA F4,32
057E:  DATA A0,29
057F:  DATA 75,31
0580:  DATA F3,32
0581:  DATA 63,3A
0582:  DATA 6F,39
0583:  DATA 0D,05
0584:  DATA 00,00
0585:  DATA 53,3A
0586:  DATA 61,39
0587:  DATA 74,10
0588:  DATA 46,36
0589:  DATA E1,39
058A:  DATA 68,10
058B:  DATA D2,32
058C:  DATA 61,32
058D:  DATA 0D,05
058E:  DATA 00,01
058F:  DATA 89,26
0590:  DATA 4F,22
0591:  DATA 45,10
0592:  DATA 20,10
0593:  DATA 20,10
0594:  DATA 3A,10
0595:  DATA 25,18
0596:  DATA 32,2C
0597:  DATA 0D,05
0598:  DATA 00,01
0599:  DATA 89,20
059A:  DATA 64,32
059B:  DATA F2,32
059C:  DATA F3,39
059D:  DATA 20,10
059E:  DATA 3A,10
059F:  DATA 30,3C
05A0:  DATA 25,18
05A1:  DATA 38,26
05A2:  DATA D8,06
05A3:  DATA 0A,00
05A4:  DATA 09,28
05A5:  DATA E1,31
05A6:  DATA EB,32
05A7:  DATA 74,27
05A8:  DATA F5,36
05A9:  DATA 3A,10
05AA:  DATA 30,3C
05AB:  DATA 25,18
05AC:  DATA 34,26
05AD:  DATA D8,06
05AE:  DATA 0A,00
05AF:  DATA D2,22
05B0:  DATA 41,22
05B1:  DATA 20,22
05B2:  DATA 41,2A
05B3:  DATA C1,06
05B4:  DATA 0A,00
05B5:  DATA CD,34
05B6:  DATA F3,39
05B7:  DATA E9,37
05B8:  DATA 6E,10
05B9:  DATA 46,36
05BA:  DATA E1,39
05BB:  DATA 68,10
05BC:  DATA E9,39
05BD:  DATA 20,37
05BE:  DATA 6F,3A
05BF:  DATA A0,31
05C0:  DATA 6F,37
05C1:  DATA EE,32
05C2:  DATA 63,3A
05C3:  DATA 65,32
05C4:  DATA 0D,05
05C5:  DATA 00,01
05C6:  DATA 45,37
05C7:  DATA 64,10
05C8:  DATA 46,36
05C9:  DATA E1,39
05CA:  DATA 68,10
05CB:  DATA D2,32
05CC:  DATA 61,32
05CD:  DATA 0D,05
05CE:  DATA 00,00
05CF:  DATA 53,3A
05D0:  DATA 61,39
05D1:  DATA 74,10
05D2:  DATA 46,36
05D3:  DATA E1,39
05D4:  DATA 68,10
05D5:  DATA D2,32
05D6:  DATA 61,32
05D7:  DATA A0,20
05D8:  DATA 64,32
05D9:  DATA F2,32
05DA:  DATA F3,39
05DB:  DATA 0D,05
05DC:  DATA 00,01
05DD:  DATA D2,32
05DE:  DATA 61,32
05DF:  DATA 20,22
05E0:  DATA 61,3A
05E1:  DATA 61,1D
05E2:  DATA A0,12
05E3:  DATA 30,19
05E4:  DATA 58,10
05E5:  DATA 25,18
05E6:  DATA 32,2C
05E7:  DATA A0,12
05E8:  DATA 30,19
05E9:  DATA 58,10
05EA:  DATA 25,18
05EB:  DATA 32,2C
05EC:  DATA 0D,05
05ED:  DATA 00,01
05EE:  DATA 45,37
05EF:  DATA 64,10
05F0:  DATA 46,36
05F1:  DATA E1,39
05F2:  DATA 68,10
05F3:  DATA D2,32
05F4:  DATA 61,32
05F5:  DATA A0,20
05F6:  DATA 64,32
05F7:  DATA F2,32
05F8:  DATA F3,39
05F9:  DATA 0D,05
05FA:  DATA 00,00
05FB:  DATA 53,3A
05FC:  DATA 61,39
05FD:  DATA 74,10
05FE:  DATA 46,36
05FF:  DATA E1,39
0600:  DATA 68,10
0601:  DATA D3,26
0602:  DATA 46,10
0603:  DATA C3,37
0604:  DATA F0,3C
0605:  DATA 0D,05
0606:  DATA 00,01
0607:  DATA 45,37
0608:  DATA 64,10
0609:  DATA 46,36
060A:  DATA E1,39
060B:  DATA 68,10
060C:  DATA D3,26
060D:  DATA 46,10
060E:  DATA C3,37
060F:  DATA F0,3C
0610:  DATA 0D,05
0611:  DATA 00,00
0612:  DATA 53,3A
0613:  DATA 61,39
0614:  DATA 74,10
0615:  DATA 46,36
0616:  DATA E1,39
0617:  DATA 68,10
0618:  DATA D3,26
0619:  DATA 46,10
061A:  DATA D2,32
061B:  DATA 61,32
061C:  DATA 0D,05
061D:  DATA 00,01
061E:  DATA D2,32
061F:  DATA 61,32
0620:  DATA 20,22
0621:  DATA 61,3A
0622:  DATA 61,1D
0623:  DATA 20,00
0624:  DATA 0D,05
0625:  DATA 45,37
0626:  DATA 64,10
0627:  DATA 46,36
0628:  DATA E1,39
0629:  DATA 68,10
062A:  DATA D3,26
062B:  DATA 46,10
062C:  DATA D2,32
062D:  DATA 61,32
062E:  DATA 0D,05
062F:  DATA 00,00
0630:  DATA 53,3A
0631:  DATA 61,39
0632:  DATA 74,10
0633:  DATA 46,36
0634:  DATA E1,39
0635:  DATA 68,10
0636:  DATA D3,26
0637:  DATA 46,10
0638:  DATA 57,39
0639:  DATA 69,3A
063A:  DATA E5,06
063B:  DATA 0A,00
063C:  DATA 45,37
063D:  DATA 64,10
063E:  DATA 46,36
063F:  DATA E1,39
0640:  DATA 68,10
0641:  DATA D3,26
0642:  DATA 46,10
0643:  DATA 57,39
0644:  DATA 69,3A
0645:  DATA E5,06
0646:  DATA 0A,00
0647:  DATA 53,3A
0648:  DATA 61,39
0649:  DATA 74,10
064A:  DATA 46,36
064B:  DATA E1,39
064C:  DATA 68,10
064D:  DATA 41,32
064E:  DATA 64,39
064F:  DATA E5,39
0650:  DATA 73,10
0651:  DATA D2,32
0652:  DATA F3,32
0653:  DATA F4,06
0654:  DATA 0A,00
0655:  DATA 45,37
0656:  DATA 64,10
0657:  DATA 46,36
0658:  DATA E1,39
0659:  DATA 68,10
065A:  DATA 41,32
065B:  DATA 64,39
065C:  DATA E5,39
065D:  DATA 73,10
065E:  DATA D2,32
065F:  DATA F3,32
0660:  DATA F4,06
0661:  DATA 0A,00
0662:  DATA 0D,05
0663:  DATA DF,2F
0664:  DATA DF,2F
0665:  DATA DF,2F
0666:  DATA DF,2F
0667:  DATA DF,2F
0668:  DATA DF,2F
0669:  DATA DF,2F
066A:  DATA DF,2F
066B:  DATA DF,2F
066C:  DATA DF,2F
066D:  DATA 0D,05
066E:  DATA 00,01
066F:  DATA DF,2F
0670:  DATA DF,29
0671:  DATA F4,30
0672:  DATA 72,3A
0673:  DATA A0,31
0674:  DATA 6F,38
0675:  DATA F9,2F
0676:  DATA E4,30
0677:  DATA F4,30
0678:  DATA DF,2F
0679:  DATA 0D,05
067A:  DATA 00,01
067B:  DATA 53,3A
067C:  DATA 61,39
067D:  DATA 74,10
067E:  DATA DB,12
067F:  DATA 64,10
0680:  DATA 74,34
0681:  DATA 5D,10
0682:  DATA E4,30
0683:  DATA F4,30
0684:  DATA A0,31
0685:  DATA 6F,38
0686:  DATA F9,06
0687:  DATA 8A,06
0688:  DATA 0A,00
0689:  DATA 49,37
068A:  DATA A0,39
068B:  DATA 6D,33
068C:  DATA A0,36
068D:  DATA E9,39
068E:  DATA F3,34
068F:  DATA 6F,37
0690:  DATA 20,32
0691:  DATA 61,3A
0692:  DATA 61,10
0693:  DATA 73,3A
0694:  DATA 61,39
0695:  DATA 74,10
0696:  DATA 20,10
0697:  DATA 61,32
0698:  DATA 64,39
0699:  DATA E5,39
069A:  DATA 73,1D
069B:  DATA A0,12
069C:  DATA 30,1C
069D:  DATA 4C,2C
069E:  DATA 0D,05
069F:  DATA 00,01
06A0:  DATA 49,37
06A1:  DATA A0,39
06A2:  DATA 6D,33
06A3:  DATA A0,36
06A4:  DATA E9,39
06A5:  DATA F3,34
06A6:  DATA 6F,37
06A7:  DATA 20,32
06A8:  DATA 61,3A
06A9:  DATA 61,10
06AA:  DATA 65,37
06AB:  DATA 64,10
06AC:  DATA 20,10
06AD:  DATA 20,10
06AE:  DATA 61,32
06AF:  DATA 64,39
06B0:  DATA E5,39
06B1:  DATA 73,1D
06B2:  DATA A0,12
06B3:  DATA 30,1C
06B4:  DATA 4C,2C
06B5:  DATA 0D,05
06B6:  DATA 00,01
06B7:  DATA 49,37
06B8:  DATA A0,26
06B9:  DATA C9,29
06BA:  DATA 20,23
06BB:  DATA 4D,10
06BC:  DATA 57,39
06BD:  DATA 69,3A
06BE:  DATA 65,10
06BF:  DATA F3,37
06C0:  DATA 75,39
06C1:  DATA E3,32
06C2:  DATA 20,32
06C3:  DATA 61,3A
06C4:  DATA 61,10
06C5:  DATA 61,32
06C6:  DATA 64,39
06C7:  DATA E5,39
06C8:  DATA 73,1D
06C9:  DATA A0,12
06CA:  DATA 30,1C
06CB:  DATA 4C,2C
06CC:  DATA 0D,05
06CD:  DATA 00,01
06CE:  DATA 49,37
06CF:  DATA A0,26
06D0:  DATA C9,29
06D1:  DATA 20,23
06D2:  DATA 4D,10
06D3:  DATA 57,39
06D4:  DATA 69,3A
06D5:  DATA 65,10
06D6:  DATA E4,30
06D7:  DATA F4,30
06D8:  DATA A0,39
06D9:  DATA 69,3D
06DA:  DATA 65,10
06DB:  DATA 20,10
06DC:  DATA 20,10
06DD:  DATA 20,10
06DE:  DATA 20,10
06DF:  DATA 20,1D
06E0:  DATA A0,12
06E1:  DATA EC,3A
06E2:  DATA 20,14
06E3:  DATA 30,3C
06E4:  DATA 25,36
06E5:  DATA F8,14
06E6:  DATA 0D,05
06E7:  DATA 0D,05
06E8:  DATA 00,02
06E9:  DATA 45,39
06EA:  DATA F2,37
06EB:  DATA 72,1D
06EC:  DATA A0,29
06ED:  DATA 4D,23
06EE:  DATA A0,34
06EF:  DATA 73,10
06F0:  DATA EE,37
06F1:  DATA 74,10
06F2:  DATA E3,37
06F3:  DATA 6E,37
06F4:  DATA E5,31
06F5:  DATA F4,32
06F6:  DATA E4,06
06F7:  DATA 0A,00
06F8:  DATA D3,34
06F9:  DATA FA,32
06FA:  DATA A0,30
06FB:  DATA F2,32
06FC:  DATA 61,10
06FD:  DATA F2,32
06FE:  DATA 61,32
06FF:  DATA 0D,05
0700:  DATA 00,01
0701:  DATA F5,39
0702:  DATA 65,32
0703:  DATA DF,39
0704:  DATA 69,3D
0705:  DATA 65,10
0706:  DATA 3D,10
0707:  DATA 25,36
0708:  DATA 75,10
0709:  DATA A8,39
070A:  DATA F2,31
070B:  DATA 20,18
070C:  DATA F8,12
070D:  DATA 30,1C
070E:  DATA 4C,2C
070F:  DATA A9,06
0710:  DATA 0A,00
0711:  DATA EC,37
0712:  DATA 6F,38
0713:  DATA A0,31
0714:  DATA EF,3A
0715:  DATA 6E,3A
0716:  DATA 3D,10
0717:  DATA 25,32
0718:  DATA 20,10
0719:  DATA A8,39
071A:  DATA F2,31
071B:  DATA 20,18
071C:  DATA F8,12
071D:  DATA 30,1C
071E:  DATA 4C,2C
071F:  DATA A9,06
0720:  DATA 8A,06
0721:  DATA 0A,00
0722:  DATA 57,39
0723:  DATA 61,38
0724:  DATA 20,3A
0725:  DATA F2,34
0726:  DATA E7,33
0727:  DATA 65,39
0728:  DATA 65,32
0729:  DATA 3A,10
072A:  DATA D2,32
072B:  DATA F3,32
072C:  DATA 74,3A
072D:  DATA 69,37
072E:  DATA 67,10
072F:  DATA E4,30
0730:  DATA F4,30
0731:  DATA DF,3B
0732:  DATA F2,34
0733:  DATA F4,32
0734:  DATA DF,30
0735:  DATA 64,32
0736:  DATA 72,10
0737:  DATA F4,37
0738:  DATA A0,39
0739:  DATA F4,30
073A:  DATA 72,3A
073B:  DATA 0D,05
073C:  DATA 00,01
073D:  DATA 55,38
073E:  DATA E4,30
073F:  DATA F4,32
0740:  DATA A0,39
0741:  DATA 69,3D
0742:  DATA 65,10
0743:  DATA 61,39
0744:  DATA E5,30
0745:  DATA 0D,05
0746:  DATA 00,01
0747:  DATA F5,39
0748:  DATA 65,32
0749:  DATA DF,39
074A:  DATA 69,3D
074B:  DATA 65,10
074C:  DATA 3D,10
074D:  DATA 25,36
074E:  DATA E4,06
074F:  DATA 0A,00
0750:  DATA EC,37
0751:  DATA 6F,38
0752:  DATA DF,31
0753:  DATA EF,3A
0754:  DATA 6E,3A
0755:  DATA A0,1E
0756:  DATA A0,12
0757:  DATA F5,06
0758:  DATA 8A,06
0759:  DATA 0A,00
075A:  DATA 0D,05
075B:  DATA DF,2F
075C:  DATA DF,22
075D:  DATA 6E,32
075E:  DATA A0,31
075F:  DATA 6F,38
0760:  DATA F9,2F
0761:  DATA E4,30
0762:  DATA F4,30
0763:  DATA DF,2F
0764:  DATA DF,2F
0765:  DATA 0D,05
0766:  DATA 00,01
0767:  DATA DF,2F
0768:  DATA DF,2F
0769:  DATA DF,2F
076A:  DATA DF,2F
076B:  DATA DF,2F
076C:  DATA DF,2F
076D:  DATA DF,2F
076E:  DATA DF,2F
076F:  DATA DF,2F
0770:  DATA DF,2F
0771:  DATA 0D,05
0772:  DATA 0D,05
0773:  DATA 00,00
0774:  DATA 0D,05
0775:  DATA DF,2F
0776:  DATA DF,2F
0777:  DATA DF,2F
0778:  DATA DF,2F
0779:  DATA DF,2F
077A:  DATA DF,2F
077B:  DATA DF,2F
077C:  DATA DF,2F
077D:  DATA DF,2F
077E:  DATA DF,2F
077F:  DATA DF,2F
0780:  DATA DF,2F
0781:  DATA DF,2F
0782:  DATA DF,2F
0783:  DATA DF,2F
0784:  DATA 0D,05
0785:  DATA DF,2F
0786:  DATA DF,2F
0787:  DATA DF,29
0788:  DATA F4,30
0789:  DATA 72,3A
078A:  DATA A0,32
078B:  DATA F8,32
078C:  DATA E3,3A
078D:  DATA F4,32
078E:  DATA DF,36
078F:  DATA E9,39
0790:  DATA F3,34
0791:  DATA 6F,37
0792:  DATA DF,2F
0793:  DATA DF,2F
0794:  DATA DF,06
0795:  DATA 8A,06
0796:  DATA 0A,00
0797:  DATA C3,37
0798:  DATA ED,36
0799:  DATA 61,37
079A:  DATA 64,10
079B:  DATA 49,22
079C:  DATA 3A,10
079D:  DATA 25,2C
079E:  DATA 0D,05
079F:  DATA 0D,05
07A0:  DATA 00,01
07A1:  DATA 89,04
07A2:  DATA 2D,1F
07A3:  DATA A0,24
07A4:  DATA 6E,3B
07A5:  DATA 61,36
07A6:  DATA 69,32
07A7:  DATA A0,21
07A8:  DATA 4D,22
07A9:  DATA A0,24
07AA:  DATA C4,10
07AB:  DATA 0D,05
07AC:  DATA 00,01
07AD:  DATA 0D,05
07AE:  DATA DF,2F
07AF:  DATA DF,2F
07B0:  DATA DF,2F
07B1:  DATA 45,37
07B2:  DATA 64,10
07B3:  DATA 65,3C
07B4:  DATA E5,31
07B5:  DATA 75,3A
07B6:  DATA E5,2F
07B7:  DATA ED,34
07B8:  DATA F3,39
07B9:  DATA E9,37
07BA:  DATA EE,2F
07BB:  DATA DF,2F
07BC:  DATA DF,2F
07BD:  DATA DF,06
07BE:  DATA 8A,2F
07BF:  DATA DF,2F
07C0:  DATA DF,2F
07C1:  DATA DF,2F
07C2:  DATA DF,2F
07C3:  DATA DF,2F
07C4:  DATA DF,2F
07C5:  DATA DF,2F
07C6:  DATA DF,2F
07C7:  DATA DF,2F
07C8:  DATA DF,2F
07C9:  DATA DF,2F
07CA:  DATA DF,2F
07CB:  DATA DF,2F
07CC:  DATA DF,2F
07CD:  DATA DF,2F
07CE:  DATA 0D,05
07CF:  DATA 00,00
07D0:  DATA 53,3A
07D1:  DATA 61,39
07D2:  DATA 74,10
07D3:  DATA 65,3C
07D4:  DATA E5,31
07D5:  DATA 75,3A
07D6:  DATA E5,2F
07D7:  DATA E3,37
07D8:  DATA ED,36
07D9:  DATA 61,37
07DA:  DATA E4,06
07DB:  DATA 0A,00
07DC:  DATA 89,16
07DD:  DATA 3E,10
07DE:  DATA 55,38
07DF:  DATA EC,34
07E0:  DATA EE,35
07E1:  DATA A0,31
07E2:  DATA EF,36
07E3:  DATA ED,30
07E4:  DATA 6E,32
07E5:  DATA 0D,05
07E6:  DATA 00,01
07E7:  DATA 09,10
07E8:  DATA 20,10
07E9:  DATA 54,39
07EA:  DATA 61,37
07EB:  DATA F3,36
07EC:  DATA 69,3A
07ED:  DATA A0,20
07EE:  DATA E3,35
07EF:  DATA EE,37
07F0:  DATA EC,32
07F1:  DATA 67,32
07F2:  DATA E5,06
07F3:  DATA 0A,00
07F4:  DATA 89,16
07F5:  DATA 3E,10
07F6:  DATA 53,3A
07F7:  DATA 61,3A
07F8:  DATA F5,39
07F9:  DATA A0,31
07FA:  DATA E8,32
07FB:  DATA E3,35
07FC:  DATA 0D,05
07FD:  DATA 00,01
*
0800:  DATA 09,10
0801:  DATA 20,10
0802:  DATA 54,39
0803:  DATA 61,37
0804:  DATA F3,36
0805:  DATA 69,3A
0806:  DATA A0,26
0807:  DATA C9,29
0808:  DATA A0,26
0809:  DATA C3,2A
080A:  DATA A0,29
080B:  DATA F4,30
080C:  DATA F4,3A
080D:  DATA F3,06
080E:  DATA 0A,00
080F:  DATA E6,34
0810:  DATA EE,34
0811:  DATA 73,34
0812:  DATA 65,32
0813:  DATA A0,34
0814:  DATA 6E,10
0815:  DATA 73,3A
0816:  DATA 61,3A
0817:  DATA F5,39
0818:  DATA DF,31
0819:  DATA E8,32
081A:  DATA E3,35
081B:  DATA 0D,05
081C:  DATA 00,00
081D:  DATA 89,16
081E:  DATA 3E,10
081F:  DATA D3,26
0820:  DATA 46,10
0821:  DATA 61,3B
0822:  DATA E1,34
0823:  DATA EC,30
0824:  DATA 62,36
0825:  DATA 65,10
0826:  DATA 63,34
0827:  DATA E5,31
0828:  DATA EB,06
0829:  DATA 0A,00
082A:  DATA 09,10
082B:  DATA 20,10
082C:  DATA 54,39
082D:  DATA 61,37
082E:  DATA F3,36
082F:  DATA 69,3A
0830:  DATA A0,20
0831:  DATA E3,35
0832:  DATA EE,37
0833:  DATA EC,32
0834:  DATA 67,32
0835:  DATA E5,06
0836:  DATA 0A,00
0837:  DATA 89,04
0838:  DATA 2D,1F
0839:  DATA A0,30
083A:  DATA 6C,36
083B:  DATA EF,3B
083C:  DATA E4,06
083D:  DATA 0A,00
083E:  DATA 89,04
083F:  DATA 2D,1F
0840:  DATA 20,32
0841:  DATA 65,37
0842:  DATA F9,32
0843:  DATA E4,06
0844:  DATA 0A,00
0845:  DATA 0D,05
0846:  DATA 0D,05
0847:  DATA 0D,05
0848:  DATA BD,1E
0849:  DATA BD,1E
084A:  DATA BD,1E
084B:  DATA BD,1E
084C:  DATA BD,1E
084D:  DATA BD,1E
084E:  DATA BD,1E
084F:  DATA BD,1E
0850:  DATA BD,1E
0851:  DATA BD,1E
0852:  DATA BD,1E
0853:  DATA BD,1E
0854:  DATA BD,1E
0855:  DATA BD,1E
0856:  DATA BD,1E
0857:  DATA BD,1E
0858:  DATA BD,1E
0859:  DATA BD,1E
085A:  DATA BD,1E
085B:  DATA BD,1E
085C:  DATA BD,1E
085D:  DATA BD,1E
085E:  DATA BD,1E
085F:  DATA BD,1E
0860:  DATA BD,1E
0861:  DATA BD,1E
0862:  DATA BD,1E
0863:  DATA BD,1E
0864:  DATA BD,1E
0865:  DATA BD,1E
0866:  DATA 0D,05
0867:  DATA 00,01
0868:  DATA 54,34
0869:  DATA E9,39
086A:  DATA A0,34
086B:  DATA 73,10
086C:  DATA CD,27
086D:  DATA CD,24
086E:  DATA CA,24
086F:  DATA A0,21
0870:  DATA C9,23
0871:  DATA 53,10
0872:  DATA D0,24
0873:  DATA 43,10
0874:  DATA 42,21
0875:  DATA 4D,10
0876:  DATA E6,37
0877:  DATA 72,10
0878:  DATA CD,24
0879:  DATA D3,1B
087A:  DATA 5F,21
087B:  DATA C2,26
087C:  DATA 33,17
087D:  DATA 0D,05
087E:  DATA 00,01
087F:  DATA CC,30
0880:  DATA 73,3A
0881:  DATA A0,3A
0882:  DATA 70,32
0883:  DATA 61,3A
0884:  DATA 65,32
0885:  DATA A0,37
0886:  DATA 6E,10
0887:  DATA A5,39
0888:  DATA A0,12
0889:  DATA 73,16
088A:  DATA 20,31
088B:  DATA 79,10
088C:  DATA 49,37
088D:  DATA EF,3A
088E:  DATA 65,17
088F:  DATA 0D,05
0890:  DATA 0D,05
0891:  DATA 00,01
0892:  DATA B1,19
0893:  DATA 2D,25
0894:  DATA 75,36
0895:  DATA 2D,19
0896:  DATA 35,00
0897:  DATA 31,1A
0898:  DATA 3A,1A
0899:  DATA 37,1D
089A:  DATA 31,18
089B:  DATA 00,01
089C:  DATA DF,2F
089D:  DATA DF,2F
089E:  DATA C3,24
089F:  DATA C7,29
08A0:  DATA 20,28
08A1:  DATA C9,21
08A2:  DATA A0,29
08A3:  DATA F4,30
08A4:  DATA 72,3A
08A5:  DATA A0,27
08A6:  DATA F0,32
08A7:  DATA F2,30
08A8:  DATA F4,34
08A9:  DATA 6F,37
08AA:  DATA DF,2F
08AB:  DATA DF,2F
08AC:  DATA DF,06
08AD:  DATA 8A,06
08AE:  DATA 0A,00
08AF:  DATA F7,30
08B0:  DATA 69,3A
08B1:  DATA 69,37
08B2:  DATA 67,10
08B3:  DATA E6,37
08B4:  DATA 72,10
08B5:  DATA C2,27
08B6:  DATA D3,29
08B7:  DATA 20,28
08B8:  DATA C9,21
08B9:  DATA A0,31
08BA:  DATA EF,36
08BB:  DATA ED,30
08BC:  DATA 6E,32
08BD:  DATA 00,01
08BE:  DATA 0D,05
08BF:  DATA F7,30
08C0:  DATA 69,3A
08C1:  DATA 69,37
08C2:  DATA 67,10
08C3:  DATA E6,37
08C4:  DATA 72,10
08C5:  DATA C2,27
08C6:  DATA D3,29
08C7:  DATA 20,28
08C8:  DATA C9,21
08C9:  DATA A0,31
08CA:  DATA EF,36
08CB:  DATA ED,30
08CC:  DATA 6E,32
08CD:  DATA 00,01
08CE:  DATA 0D,05
08CF:  DATA 0D,05
08D0:  DATA BD,1E
08D1:  DATA BD,1E
08D2:  DATA BD,1E
08D3:  DATA 0D,05
08D4:  DATA 0D,05
08D5:  DATA C6,34
08D6:  DATA EE,34
08D7:  DATA 73,34
08D8:  DATA 65,32
08D9:  DATA 20,38
08DA:  DATA F2,37
08DB:  DATA E3,32
08DC:  DATA F3,39
08DD:  DATA AE,06
08DE:  DATA 8A,2B
08DF:  DATA E1,34
08E0:  DATA 74,10
08E1:  DATA E6,37
08E2:  DATA 72,10
08E3:  DATA C2,27
08E4:  DATA D3,29
08E5:  DATA 20,28
08E6:  DATA C9,21
08E7:  DATA 20,3A
08E8:  DATA 75,39
08E9:  DATA 6E,10
08EA:  DATA 6F,33
08EB:  DATA 66,10
08EC:  DATA ED,32
08ED:  DATA 00,01
08EE:  DATA 45,37
08EF:  DATA 64,10
08F0:  DATA ED,30
08F1:  DATA 69,37
08F2:  DATA 0D,05
08F3:  DATA 00,00
*
0919:  MOVF   0B,W
091A:  BCF    0B.7
091B:  MOVLB  03
091C:  BSF    15.7
091D:  BSF    15.0
091E:  NOP
091F:  NOP
0920:  BTFSC  09.7
0921:  BSF    0B.7
0922:  MOVF   13,W
0923:  ANDLW  7F
0924:  BTFSC  03.2
0925:  GOTO   165
0926:  MOVLB  0D
0927:  MOVWF  34
0928:  MOVLB  03
0929:  MOVF   11,W
092A:  MOVLB  0D
092B:  MOVWF  35
092C:  MOVLB  03
092D:  MOVF   12,W
092E:  MOVLB  0D
092F:  MOVWF  36
0930:  MOVF   34,W
0931:  MOVWF  37
0932:  MOVLB  00
0933:  CALL   0F4
0934:  MOVLB  0D
0935:  MOVF   35,W
0936:  MOVLB  03
0937:  MOVWF  11
0938:  MOVLB  0D
0939:  MOVF   36,W
093A:  MOVLB  03
093B:  MOVWF  12
093C:  MOVF   0B,W
093D:  BCF    0B.7
093E:  BSF    15.7
093F:  BSF    15.0
0940:  NOP
0941:  NOP
0942:  BTFSC  09.7
0943:  BSF    0B.7
0944:  RLF    13,W
0945:  RLF    14,W
0946:  ANDLW  7F
0947:  BTFSC  03.2
0948:  GOTO   165
0949:  MOVLB  0D
094A:  MOVWF  34
094B:  MOVLB  03
094C:  MOVF   11,W
094D:  MOVLB  0D
094E:  MOVWF  35
094F:  MOVLB  03
0950:  MOVF   12,W
0951:  MOVLB  0D
0952:  MOVWF  36
0953:  MOVF   34,W
0954:  MOVWF  37
0955:  MOVLB  00
0956:  CALL   0F4
0957:  MOVLB  0D
0958:  MOVF   35,W
0959:  MOVLB  03
095A:  MOVWF  11
095B:  MOVLB  0D
095C:  MOVF   36,W
095D:  MOVLB  03
095E:  MOVWF  12
095F:  INCF   11,F
0960:  BTFSC  03.2
0961:  INCF   12,F
0962:  MOVLB  00
0963:  GOTO   119
0964:  MOVLB  03
0965:  MOVLB  00
0966:  RETURN
0967:  MOVF   0B,W
0968:  BCF    0B.7
0969:  MOVLB  03
096A:  BSF    15.7
096B:  BSF    15.0
096C:  NOP
096D:  NOP
096E:  BTFSC  09.7
096F:  BSF    0B.7
0970:  BTFSC  03.0
0971:  GOTO   19B
0972:  MOVF   13,W
0973:  ANDLW  7F
0974:  MOVLB  0C
0975:  MOVWF  6D
0976:  MOVLB  03
0977:  MOVF   11,W
0978:  MOVLB  0C
0979:  MOVWF  6E
097A:  MOVLB  03
097B:  MOVF   12,W
097C:  MOVLB  0C
097D:  MOVWF  6F
097E:  MOVF   6D,W
097F:  MOVLB  0D
0980:  MOVWF  37
0981:  MOVLB  00
0982:  CALL   0F4
0983:  MOVLB  0C
0984:  MOVF   6E,W
0985:  MOVLB  03
0986:  MOVWF  11
0987:  MOVLB  0C
0988:  MOVF   6F,W
0989:  MOVLB  03
098A:  MOVWF  12
098B:  MOVF   0B,W
098C:  BCF    0B.7
098D:  BSF    15.7
098E:  BSF    15.0
098F:  NOP
0990:  NOP
0991:  BTFSC  09.7
0992:  BSF    0B.7
0993:  MOVLB  0C
0994:  DECFSZ 6A,F
0995:  GOTO   197
0996:  GOTO   199
0997:  MOVLB  03
0998:  GOTO   19B
0999:  GOTO   1BF
099A:  MOVLB  03
099B:  RLF    13,W
099C:  RLF    14,W
099D:  ANDLW  7F
099E:  MOVLB  0C
099F:  MOVWF  6D
09A0:  MOVLB  03
09A1:  MOVF   11,W
09A2:  MOVLB  0C
09A3:  MOVWF  6E
09A4:  MOVLB  03
09A5:  MOVF   12,W
09A6:  MOVLB  0C
09A7:  MOVWF  6F
09A8:  MOVF   6D,W
09A9:  MOVLB  0D
09AA:  MOVWF  37
09AB:  MOVLB  00
09AC:  CALL   0F4
09AD:  MOVLB  0C
09AE:  MOVF   6E,W
09AF:  MOVLB  03
09B0:  MOVWF  11
09B1:  MOVLB  0C
09B2:  MOVF   6F,W
09B3:  MOVLB  03
09B4:  MOVWF  12
09B5:  INCF   11,F
09B6:  BTFSC  03.2
09B7:  INCF   12,F
09B8:  BCF    03.0
09B9:  MOVLB  0C
09BA:  DECFSZ 6A,F
09BB:  GOTO   1BD
09BC:  GOTO   1BF
09BD:  MOVLB  00
09BE:  GOTO   167
09BF:  MOVLB  00
09C0:  RETURN
*
0A45:  MOVLB  0D
0A46:  MOVF   53,W
0A47:  ANDLW  07
0A48:  MOVWF  77
0A49:  RRF    53,W
0A4A:  MOVWF  78
0A4B:  RRF    78,F
0A4C:  RRF    78,F
0A4D:  MOVLW  1F
0A4E:  ANDWF  78,F
0A4F:  MOVF   78,W
0A50:  ADDWF  55,W
0A51:  MOVWF  04
0A52:  MOVLW  00
0A53:  ADDWFC 56,W
0A54:  MOVWF  05
0A55:  CLRF   78
0A56:  INCF   78,F
0A57:  INCF   77,F
0A58:  GOTO   25A
0A59:  RLF    78,F
0A5A:  DECFSZ 77,F
0A5B:  GOTO   259
0A5C:  MOVF   54,F
0A5D:  BTFSC  03.2
0A5E:  GOTO   262
0A5F:  MOVF   78,W
0A60:  IORWF  00,F
0A61:  GOTO   265
0A62:  COMF   78,F
0A63:  MOVF   78,W
0A64:  ANDWF  00,F
0A65:  MOVLB  00
0A66:  RETURN
*
0CBA:  MOVLB  0C
0CBB:  BTFSC  6B.7
0CBC:  GOTO   4D0
0CBD:  MOVLW  0F
0CBE:  MOVWF  77
0CBF:  SWAPF  6A,W
0CC0:  ANDWF  77,F
0CC1:  MOVLW  0A
0CC2:  SUBWF  77,W
0CC3:  BTFSC  03.0
0CC4:  GOTO   4C8
0CC5:  MOVLW  30
0CC6:  ADDWF  77,F
0CC7:  GOTO   4CA
0CC8:  MOVF   6B,W
0CC9:  ADDWF  77,F
0CCA:  MOVF   77,W
0CCB:  MOVLB  0D
0CCC:  MOVWF  37
0CCD:  MOVLB  00
0CCE:  CALL   0F4
0CCF:  MOVLB  0C
0CD0:  MOVLW  0F
0CD1:  ANDWF  6A,F
0CD2:  MOVLW  0A
0CD3:  SUBWF  6A,W
0CD4:  BTFSC  03.0
0CD5:  GOTO   4D8
0CD6:  MOVLW  30
0CD7:  GOTO   4DA
0CD8:  BCF    6B.7
0CD9:  MOVF   6B,W
0CDA:  ADDWF  6A,F
0CDB:  MOVF   6A,W
0CDC:  MOVLB  0D
0CDD:  MOVWF  37
0CDE:  MOVLB  00
0CDF:  CALL   0F4
0CE0:  RETURN
*
0FAA:  MOVF   78,W
0FAB:  BTFSC  03.2
0FAC:  GOTO   7B1
0FAD:  MOVF   77,W
0FAE:  MOVWI  W,[FSR0++]
0FAF:  DECFSZ 78,F
0FB0:  GOTO   7AD
0FB1:  RETURN
*
0FDB:  MOVLB  0D
0FDC:  MOVF   21,W
0FDD:  CLRF   78
0FDE:  SUBWF  20,W
0FDF:  BTFSC  03.0
0FE0:  GOTO   7E4
0FE1:  MOVF   20,W
0FE2:  MOVWF  77
0FE3:  GOTO   7F0
0FE4:  CLRF   77
0FE5:  MOVLW  08
0FE6:  MOVWF  22
0FE7:  RLF    20,F
0FE8:  RLF    77,F
0FE9:  MOVF   21,W
0FEA:  SUBWF  77,W
0FEB:  BTFSC  03.0
0FEC:  MOVWF  77
0FED:  RLF    78,F
0FEE:  DECFSZ 22,F
0FEF:  GOTO   7E7
0FF0:  MOVLB  00
0FF1:  RETURN
*
1CFF:  MOVF   78,W
1D00:  MOVLB  0C
1D01:  MOVF   66,W
1D02:  MOVLB  0D
1D03:  MOVWF  20
1D04:  MOVLW  64
1D05:  MOVWF  21
1D06:  MOVLP  08
1D07:  MOVLB  00
1D08:  CALL   7DB
1D09:  MOVLP  18
1D0A:  MOVF   77,W
1D0B:  MOVLB  0C
1D0C:  MOVWF  66
1D0D:  MOVF   78,W
1D0E:  MOVLW  30
1D0F:  BTFSS  03.2
1D10:  GOTO   518
1D11:  BTFSS  67.1
1D12:  GOTO   524
1D13:  BTFSC  67.3
1D14:  GOTO   524
1D15:  BTFSC  67.4
1D16:  MOVLW  20
1D17:  GOTO   51B
1D18:  BCF    67.3
1D19:  BCF    67.4
1D1A:  BSF    67.0
1D1B:  ADDWF  78,F
1D1C:  MOVF   78,W
1D1D:  MOVLB  0D
1D1E:  MOVWF  37
1D1F:  MOVLP  08
1D20:  MOVLB  00
1D21:  CALL   0F4
1D22:  MOVLP  18
1D23:  MOVLB  0C
1D24:  MOVF   66,W
1D25:  MOVLB  0D
1D26:  MOVWF  20
1D27:  MOVLW  0A
1D28:  MOVWF  21
1D29:  MOVLP  08
1D2A:  MOVLB  00
1D2B:  CALL   7DB
1D2C:  MOVLP  18
1D2D:  MOVF   77,W
1D2E:  MOVLB  0C
1D2F:  MOVWF  66
1D30:  MOVF   78,W
1D31:  MOVLW  30
1D32:  BTFSS  03.2
1D33:  GOTO   53A
1D34:  BTFSC  67.3
1D35:  GOTO   543
1D36:  BTFSS  67.0
1D37:  GOTO   543
1D38:  BTFSC  67.4
1D39:  MOVLW  20
1D3A:  ADDWF  78,F
1D3B:  MOVF   78,W
1D3C:  MOVLB  0D
1D3D:  MOVWF  37
1D3E:  MOVLP  08
1D3F:  MOVLB  00
1D40:  CALL   0F4
1D41:  MOVLP  18
1D42:  MOVLB  0C
1D43:  MOVLW  30
1D44:  ADDWF  66,F
1D45:  MOVF   66,W
1D46:  MOVLB  0D
1D47:  MOVWF  37
1D48:  MOVLP  08
1D49:  MOVLB  00
1D4A:  CALL   0F4
1D4B:  MOVLP  18
1D4C:  RETURN
*
1D7E:  CLRF   77
1D7F:  CLRF   78
1D80:  MOVLB  0C
1D81:  MOVF   67,W
1D82:  BCF    03.0
1D83:  BTFSC  68.0
1D84:  ADDWF  77,F
1D85:  RRF    77,F
1D86:  RRF    78,F
1D87:  BTFSC  68.1
1D88:  ADDWF  77,F
1D89:  RRF    77,F
1D8A:  RRF    78,F
1D8B:  BTFSC  68.2
1D8C:  ADDWF  77,F
1D8D:  RRF    77,F
1D8E:  RRF    78,F
1D8F:  BTFSC  68.3
1D90:  ADDWF  77,F
1D91:  RRF    77,F
1D92:  RRF    78,F
1D93:  BTFSC  68.4
1D94:  ADDWF  77,F
1D95:  RRF    77,F
1D96:  RRF    78,F
1D97:  BTFSC  68.5
1D98:  ADDWF  77,F
1D99:  RRF    77,F
1D9A:  RRF    78,F
1D9B:  BTFSC  68.6
1D9C:  ADDWF  77,F
1D9D:  RRF    77,F
1D9E:  RRF    78,F
1D9F:  BTFSC  68.7
1DA0:  ADDWF  77,F
1DA1:  RRF    77,F
1DA2:  RRF    78,F
1DA3:  MOVLB  00
1DA4:  RETURN
*
26B8:  MOVLW  20
26B9:  MOVLB  0C
26BA:  BTFSS  6B.4
26BB:  MOVLW  30
26BC:  MOVWF  6C
26BD:  MOVF   6A,W
26BE:  MOVWF  77
26BF:  BTFSS  6A.7
26C0:  GOTO   6C9
26C1:  COMF   77,F
26C2:  INCF   77,F
26C3:  MOVF   77,W
26C4:  MOVWF  6A
26C5:  MOVLW  2D
26C6:  MOVWF  6C
26C7:  BSF    6B.7
26C8:  BSF    6B.0
26C9:  MOVF   6A,W
26CA:  MOVLB  0D
26CB:  MOVWF  20
26CC:  MOVLW  64
26CD:  MOVWF  21
26CE:  MOVLP  08
26CF:  MOVLB  00
26D0:  CALL   7DB
26D1:  MOVLP  20
26D2:  MOVF   77,W
26D3:  MOVLB  0C
26D4:  MOVWF  6A
26D5:  MOVLW  30
26D6:  ADDWF  78,W
26D7:  MOVWF  6D
26D8:  MOVF   6A,W
26D9:  MOVLB  0D
26DA:  MOVWF  20
26DB:  MOVLW  0A
26DC:  MOVWF  21
26DD:  MOVLP  08
26DE:  MOVLB  00
26DF:  CALL   7DB
26E0:  MOVLP  20
26E1:  MOVLW  30
26E2:  ADDWF  77,W
26E3:  MOVLB  0C
26E4:  MOVWF  6F
26E5:  MOVLW  30
26E6:  ADDWF  78,W
26E7:  MOVWF  6E
26E8:  MOVF   6C,W
26E9:  MOVWF  77
26EA:  MOVLW  30
26EB:  SUBWF  6D,W
26EC:  BTFSC  03.2
26ED:  GOTO   6F2
26EE:  BSF    6B.1
26EF:  BTFSC  6B.7
26F0:  BSF    6B.2
26F1:  GOTO   706
26F2:  MOVF   6C,W
26F3:  MOVWF  6D
26F4:  MOVLW  20
26F5:  MOVWF  6C
26F6:  MOVLW  30
26F7:  SUBWF  6E,W
26F8:  BTFSC  03.2
26F9:  GOTO   6FE
26FA:  BSF    6B.0
26FB:  BTFSC  6B.7
26FC:  BSF    6B.1
26FD:  GOTO   706
26FE:  BTFSS  03.2
26FF:  BSF    6B.0
2700:  BTFSS  03.2
2701:  GOTO   706
2702:  MOVF   6D,W
2703:  MOVWF  6E
2704:  MOVLW  20
2705:  MOVWF  6D
2706:  BTFSC  6B.2
2707:  GOTO   70D
2708:  BTFSC  6B.1
2709:  GOTO   715
270A:  BTFSC  6B.0
270B:  GOTO   71D
270C:  GOTO   725
270D:  MOVF   6C,W
270E:  MOVLB  0D
270F:  MOVWF  37
2710:  MOVLP  08
2711:  MOVLB  00
2712:  CALL   0F4
2713:  MOVLP  20
2714:  MOVLB  0C
2715:  MOVF   6D,W
2716:  MOVLB  0D
2717:  MOVWF  37
2718:  MOVLP  08
2719:  MOVLB  00
271A:  CALL   0F4
271B:  MOVLP  20
271C:  MOVLB  0C
271D:  MOVF   6E,W
271E:  MOVLB  0D
271F:  MOVWF  37
2720:  MOVLP  08
2721:  MOVLB  00
2722:  CALL   0F4
2723:  MOVLP  20
2724:  MOVLB  0C
2725:  MOVF   6F,W
2726:  MOVLB  0D
2727:  MOVWF  37
2728:  MOVLP  08
2729:  MOVLB  00
272A:  CALL   0F4
272B:  MOVLP  20
272C:  RETURN
272D:  BTFSC  03.1
272E:  GOTO   732
272F:  MOVLW  24
2730:  MOVWF  05
2731:  MOVWF  04
2732:  CLRF   77
2733:  CLRF   78
2734:  CLRF   79
2735:  CLRF   7A
2736:  MOVLB  0D
2737:  CLRF   34
2738:  CLRF   35
2739:  CLRF   36
273A:  CLRF   37
273B:  MOVF   2F,W
273C:  IORWF  2E,W
273D:  IORWF  2D,W
273E:  IORWF  2C,W
273F:  BTFSC  03.2
2740:  GOTO   771
2741:  MOVLW  20
2742:  MOVWF  38
2743:  BCF    03.0
2744:  RLF    28,F
2745:  RLF    29,F
2746:  RLF    2A,F
2747:  RLF    2B,F
2748:  RLF    34,F
2749:  RLF    35,F
274A:  RLF    36,F
274B:  RLF    37,F
274C:  MOVF   2F,W
274D:  SUBWF  37,W
274E:  BTFSS  03.2
274F:  GOTO   75A
2750:  MOVF   2E,W
2751:  SUBWF  36,W
2752:  BTFSS  03.2
2753:  GOTO   75A
2754:  MOVF   2D,W
2755:  SUBWF  35,W
2756:  BTFSS  03.2
2757:  GOTO   75A
2758:  MOVF   2C,W
2759:  SUBWF  34,W
275A:  BTFSS  03.0
275B:  GOTO   76B
275C:  MOVF   2C,W
275D:  SUBWF  34,F
275E:  MOVF   2D,W
275F:  BTFSS  03.0
2760:  INCFSZ 2D,W
2761:  SUBWF  35,F
2762:  MOVF   2E,W
2763:  BTFSS  03.0
2764:  INCFSZ 2E,W
2765:  SUBWF  36,F
2766:  MOVF   2F,W
2767:  BTFSS  03.0
2768:  INCFSZ 2F,W
2769:  SUBWF  37,F
276A:  BSF    03.0
276B:  RLF    77,F
276C:  RLF    78,F
276D:  RLF    79,F
276E:  RLF    7A,F
276F:  DECFSZ 38,F
2770:  GOTO   743
2771:  MOVF   34,W
2772:  MOVWF  00
2773:  MOVF   35,W
2774:  MOVWI  W,[FSR0+01]
2775:  MOVF   36,W
2776:  MOVWI  W,[FSR0+02]
2777:  MOVF   37,W
2778:  MOVWI  W,[FSR0+03]
2779:  MOVLB  00
277A:  RETURN
*
2DE0:  MOVF   04,W
2DE1:  MOVLB  0D
2DE2:  MOVWF  20
2DE3:  MOVLW  3B
2DE4:  MOVWF  27
2DE5:  MOVLW  9A
2DE6:  MOVWF  26
2DE7:  MOVLW  CA
2DE8:  MOVWF  25
2DE9:  CLRF   24
2DEA:  MOVLW  0A
2DEB:  MOVWF  22
2DEC:  BSF    03.1
2DED:  MOVLW  24
2DEE:  MOVWF  05
2DEF:  MOVLW  06
2DF0:  MOVWF  04
2DF1:  MOVLB  0C
2DF2:  MOVF   69,W
2DF3:  MOVLB  0D
2DF4:  MOVWF  2B
2DF5:  MOVLB  0C
2DF6:  MOVF   68,W
2DF7:  MOVLB  0D
2DF8:  MOVWF  2A
2DF9:  MOVLB  0C
2DFA:  MOVF   67,W
2DFB:  MOVLB  0D
2DFC:  MOVWF  29
2DFD:  MOVLB  0C
2DFE:  MOVF   66,W
2DFF:  MOVLB  0D
2E00:  MOVWF  28
2E01:  MOVF   27,W
2E02:  MOVWF  2F
2E03:  MOVF   26,W
2E04:  MOVWF  2E
2E05:  MOVF   25,W
2E06:  MOVWF  2D
2E07:  MOVF   24,W
2E08:  MOVWF  2C
2E09:  MOVLP  20
2E0A:  MOVLB  00
2E0B:  CALL   72D
2E0C:  MOVLP  28
2E0D:  MOVF   78,W
2E0E:  MOVF   77,F
2E0F:  BTFSS  03.2
2E10:  GOTO   628
2E11:  MOVLB  0D
2E12:  MOVF   22,W
2E13:  XORLW  01
2E14:  BTFSS  03.2
2E15:  GOTO   618
2E16:  MOVLB  00
2E17:  GOTO   628
2E18:  MOVF   20,W
2E19:  BTFSC  03.2
2E1A:  GOTO   62A
2E1B:  ANDLW  0F
2E1C:  SUBWF  22,W
2E1D:  BTFSC  03.2
2E1E:  GOTO   621
2E1F:  BTFSC  03.0
2E20:  GOTO   633
2E21:  BTFSC  20.7
2E22:  GOTO   633
2E23:  BTFSC  20.6
2E24:  GOTO   62A
2E25:  MOVLW  20
2E26:  GOTO   62B
2E27:  MOVLB  00
2E28:  MOVLB  0D
2E29:  CLRF   20
2E2A:  MOVLW  30
2E2B:  ADDWF  77,F
2E2C:  MOVF   77,W
2E2D:  MOVWF  37
2E2E:  MOVLP  08
2E2F:  MOVLB  00
2E30:  CALL   0F4
2E31:  MOVLP  28
2E32:  MOVLB  0D
2E33:  BCF    03.1
2E34:  MOVF   27,W
2E35:  MOVWF  2B
2E36:  MOVF   26,W
2E37:  MOVWF  2A
2E38:  MOVF   25,W
2E39:  MOVWF  29
2E3A:  MOVF   24,W
2E3B:  MOVWF  28
2E3C:  CLRF   2F
2E3D:  CLRF   2E
2E3E:  CLRF   2D
2E3F:  MOVLW  0A
2E40:  MOVWF  2C
2E41:  MOVLP  20
2E42:  MOVLB  00
2E43:  CALL   72D
2E44:  MOVLP  28
2E45:  MOVF   7A,W
2E46:  MOVLB  0D
2E47:  MOVWF  27
2E48:  MOVF   79,W
2E49:  MOVWF  26
2E4A:  MOVF   78,W
2E4B:  MOVWF  25
2E4C:  MOVF   77,W
2E4D:  MOVWF  24
2E4E:  DECFSZ 22,F
2E4F:  GOTO   5EC
2E50:  MOVLB  00
2E51:  RETURN
*
3EC7:  MOVF   04,W
3EC8:  MOVLB  0D
3EC9:  MOVWF  20
3ECA:  MOVLB  0C
3ECB:  BTFSS  69.7
3ECC:  GOTO   6DC
3ECD:  MOVLB  0D
3ECE:  DECF   20,F
3ECF:  BSF    20.5
3ED0:  MOVLB  0C
3ED1:  COMF   66,F
3ED2:  COMF   67,F
3ED3:  COMF   68,F
3ED4:  COMF   69,F
3ED5:  INCF   66,F
3ED6:  BTFSC  03.2
3ED7:  INCF   67,F
3ED8:  BTFSC  03.2
3ED9:  INCF   68,F
3EDA:  BTFSC  03.2
3EDB:  INCF   69,F
3EDC:  MOVLW  3B
3EDD:  MOVLB  0D
3EDE:  MOVWF  27
3EDF:  MOVLW  9A
3EE0:  MOVWF  26
3EE1:  MOVLW  CA
3EE2:  MOVWF  25
3EE3:  CLRF   24
3EE4:  MOVLW  0A
3EE5:  MOVWF  22
3EE6:  BSF    03.1
3EE7:  MOVLW  24
3EE8:  MOVWF  05
3EE9:  MOVLW  06
3EEA:  MOVWF  04
3EEB:  MOVLB  0C
3EEC:  MOVF   69,W
3EED:  MOVLB  0D
3EEE:  MOVWF  2B
3EEF:  MOVLB  0C
3EF0:  MOVF   68,W
3EF1:  MOVLB  0D
3EF2:  MOVWF  2A
3EF3:  MOVLB  0C
3EF4:  MOVF   67,W
3EF5:  MOVLB  0D
3EF6:  MOVWF  29
3EF7:  MOVLB  0C
3EF8:  MOVF   66,W
3EF9:  MOVLB  0D
3EFA:  MOVWF  28
3EFB:  MOVF   27,W
3EFC:  MOVWF  2F
3EFD:  MOVF   26,W
3EFE:  MOVWF  2E
3EFF:  MOVF   25,W
3F00:  MOVWF  2D
3F01:  MOVF   24,W
3F02:  MOVWF  2C
3F03:  MOVLP  20
3F04:  MOVLB  00
3F05:  CALL   72D
3F06:  MOVLP  38
3F07:  MOVF   78,W
3F08:  MOVF   77,F
3F09:  BTFSS  03.2
3F0A:  GOTO   722
3F0B:  MOVLB  0D
3F0C:  MOVF   22,W
3F0D:  XORLW  01
3F0E:  BTFSS  03.2
3F0F:  GOTO   712
3F10:  MOVLB  00
3F11:  GOTO   722
3F12:  MOVF   20,W
3F13:  BTFSC  03.2
3F14:  GOTO   725
3F15:  ANDLW  0F
3F16:  SUBWF  22,W
3F17:  BTFSC  03.2
3F18:  GOTO   71B
3F19:  BTFSC  03.0
3F1A:  GOTO   74D
3F1B:  BTFSC  20.7
3F1C:  GOTO   74D
3F1D:  BTFSC  20.6
3F1E:  GOTO   725
3F1F:  MOVLW  20
3F20:  GOTO   745
3F21:  MOVLB  00
3F22:  MOVLW  20
3F23:  MOVLB  0D
3F24:  ANDWF  20,F
3F25:  BTFSS  20.5
3F26:  GOTO   734
3F27:  BCF    20.5
3F28:  MOVF   77,W
3F29:  MOVWF  20
3F2A:  MOVLW  2D
3F2B:  MOVWF  37
3F2C:  MOVLP  08
3F2D:  MOVLB  00
3F2E:  CALL   0F4
3F2F:  MOVLP  38
3F30:  MOVLB  0D
3F31:  MOVF   20,W
3F32:  MOVWF  77
3F33:  CLRF   20
3F34:  MOVLW  30
3F35:  BTFSS  20.5
3F36:  GOTO   745
3F37:  BCF    20.5
3F38:  MOVF   77,W
3F39:  MOVWF  20
3F3A:  MOVLW  2D
3F3B:  MOVWF  37
3F3C:  MOVLP  08
3F3D:  MOVLB  00
3F3E:  CALL   0F4
3F3F:  MOVLP  38
3F40:  MOVLB  0D
3F41:  MOVF   20,W
3F42:  MOVWF  77
3F43:  CLRF   20
3F44:  MOVLW  30
3F45:  ADDWF  77,F
3F46:  MOVF   77,W
3F47:  MOVWF  37
3F48:  MOVLP  08
3F49:  MOVLB  00
3F4A:  CALL   0F4
3F4B:  MOVLP  38
3F4C:  MOVLB  0D
3F4D:  BCF    03.1
3F4E:  MOVF   27,W
3F4F:  MOVWF  2B
3F50:  MOVF   26,W
3F51:  MOVWF  2A
3F52:  MOVF   25,W
3F53:  MOVWF  29
3F54:  MOVF   24,W
3F55:  MOVWF  28
3F56:  CLRF   2F
3F57:  CLRF   2E
3F58:  CLRF   2D
3F59:  MOVLW  0A
3F5A:  MOVWF  2C
3F5B:  MOVLP  20
3F5C:  MOVLB  00
3F5D:  CALL   72D
3F5E:  MOVLP  38
3F5F:  MOVF   7A,W
3F60:  MOVLB  0D
3F61:  MOVWF  27
3F62:  MOVF   79,W
3F63:  MOVWF  26
3F64:  MOVF   78,W
3F65:  MOVWF  25
3F66:  MOVF   77,W
3F67:  MOVWF  24
3F68:  DECFSZ 22,F
3F69:  GOTO   6E6
.................... 
.................... #list
.................... 
.................... 
.................... //#opt 8 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
0E23:  MOVLW  24
0E24:  MOVWF  05
0E25:  MOVLW  3D
0E26:  MOVWF  04
0E27:  MOVF   00,W
0E28:  BTFSC  03.2
0E29:  GOTO   638
0E2A:  MOVLW  05
0E2B:  MOVWF  78
0E2C:  CLRF   77
0E2D:  DECFSZ 77,F
0E2E:  GOTO   62D
0E2F:  DECFSZ 78,F
0E30:  GOTO   62C
0E31:  MOVLW  2E
0E32:  MOVWF  77
0E33:  DECFSZ 77,F
0E34:  GOTO   633
0E35:  GOTO   636
0E36:  DECFSZ 00,F
0E37:  GOTO   62A
0E38:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
1B94:  MOVLB  00
1B95:  BTFSS  11.4
1B96:  GOTO   395
1B97:  MOVLB  03
1B98:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
08F4:  MOVLB  01
08F5:  BCF    0D.4
08F6:  MOVLB  02
08F7:  BCF    0D.4
08F8:  MOVLW  08
08F9:  MOVWF  78
08FA:  GOTO   0FB
08FB:  NOP
08FC:  BSF    78.7
08FD:  GOTO   10E
08FE:  BCF    78.7
08FF:  MOVLB  0D
0900:  RRF    37,F
0901:  MOVLB  02
0902:  BTFSC  03.0
0903:  BSF    0D.4
0904:  BTFSS  03.0
0905:  BCF    0D.4
0906:  BSF    78.6
0907:  GOTO   10E
0908:  BCF    78.6
0909:  DECFSZ 78,F
090A:  GOTO   0FF
090B:  GOTO   10C
090C:  NOP
090D:  BSF    0D.4
090E:  MOVLW  84
090F:  MOVWF  04
0910:  DECFSZ 04,F
0911:  GOTO   110
0912:  NOP
0913:  BTFSC  78.7
0914:  GOTO   0FE
0915:  BTFSC  78.6
0916:  GOTO   108
0917:  MOVLB  00
0918:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
0A67:  MOVLB  04
0A68:  MOVF   11,W
0A69:  MOVLB  0E
0A6A:  MOVF   20,W
0A6B:  MOVLB  04
0A6C:  MOVWF  11
0A6D:  RRF    14,W
0A6E:  BTFSS  03.0
0A6F:  GOTO   26D
0A70:  MOVF   11,W
0A71:  MOVWF  77
0A72:  MOVLB  00
0A73:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
0A74:  MOVLB  04
0A75:  MOVF   11,W
0A76:  MOVLB  0E
0A77:  MOVF   20,W
0A78:  MOVLB  04
0A79:  MOVWF  11
0A7A:  RRF    14,W
0A7B:  BTFSS  03.0
0A7C:  GOTO   27A
0A7D:  MOVF   11,W
0A7E:  MOVWF  77
0A7F:  MOVLB  00
0A80:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
*
17D2:  MOVLB  01
17D3:  BCF    0F.2
17D4:  MOVLB  02
17D5:  BCF    0F.2
17D6:  MOVLB  04
17D7:  MOVF   11,W
17D8:  MOVLB  0C
17D9:  MOVF   3B,W
17DA:  MOVLB  04
17DB:  MOVWF  11
17DC:  RRF    14,W
17DD:  BTFSS  03.0
17DE:  GOTO   7DC
17DF:  MOVF   11,W
17E0:  MOVWF  78
17E1:  MOVF   11,W
17E2:  MOVLB  0C
17E3:  MOVF   3A,W
17E4:  MOVLB  04
17E5:  MOVWF  11
17E6:  RRF    14,W
17E7:  BTFSS  03.0
17E8:  GOTO   7E6
17E9:  MOVF   11,W
17EA:  MOVWF  77
17EB:  MOVLB  01
17EC:  BCF    0F.2
17ED:  MOVLB  02
17EE:  BSF    0F.2
17EF:  MOVLB  00
17F0:  RETURN
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(2^16-CLOCK_FREQUENCY); 
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  MOVLW  12
004E:  MOVWF  16
004F:  NOP
....................    sec++;
0050:  MOVLW  01
0051:  ADDWF  31,F
0052:  BTFSC  03.0
0053:  INCF   32,F
0054:  BTFSC  03.2
0055:  INCF   33,F
0056:  BTFSC  03.2
0057:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0058:  BCF    11.0
0059:  MOVLP  00
005A:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0A09:  MOVLW  5B
0A0A:  MOVLB  03
0A0B:  MOVWF  11
0A0C:  MOVLW  00
0A0D:  MOVWF  12
0A0E:  MOVLB  00
0A0F:  CALL   119
....................    clear_interrupt(INT_TIMER1);
0A10:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
0A11:  MOVLW  8F
0A12:  MOVWF  18
0A13:  CLRF   19
....................    set_timer1(2^16-CLOCK_FREQUENCY); 
0A14:  CLRF   16
0A15:  MOVLW  80
0A16:  MOVWF  17
0A17:  MOVLW  12
0A18:  MOVWF  16
0A19:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
0A1A:  MOVLB  01
0A1B:  BSF    11.0
....................    enable_interrupts(GLOBAL);
0A1C:  MOVLW  C0
0A1D:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
0A1E:  MOVLW  65
0A1F:  MOVLB  03
0A20:  MOVWF  11
0A21:  MOVLW  00
0A22:  MOVWF  12
0A23:  MOVLB  00
0A24:  CALL   119
0A25:  MOVLP  30
0A26:  GOTO   27C (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
1800:  MOVF   31,W
1801:  MOVWF  77
1802:  MOVF   32,W
1803:  MOVWF  78
1804:  MOVF   33,W
1805:  MOVWF  79
1806:  MOVF   34,W
1807:  MOVWF  7A
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006B:  GOTO   06E
006C:  BTFSS  28.0
006D:  GOTO   081
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006E:  MOVF   59,W
006F:  SUBLW  1F
0070:  BTFSS  03.0
0071:  GOTO   081
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0072:  MOVF   59,W
0073:  INCF   59,F
0074:  ANDLW  1F
0075:  ADDLW  19
0076:  MOVWF  04
0077:  MOVLW  20
0078:  MOVWF  05
0079:  BTFSC  03.0
007A:  INCF   05,F
007B:  BTFSS  11.5
007C:  GOTO   07B
007D:  MOVLB  03
007E:  MOVF   19,W
007F:  MOVWF  00
0080:  MOVLB  00
0081:  BCF    11.5
0082:  MOVLP  00
0083:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
09F5:  MOVLW  84
09F6:  MOVLB  03
09F7:  MOVWF  11
09F8:  MOVLW  00
09F9:  MOVWF  12
09FA:  MOVLB  00
09FB:  CALL   119
....................    enable_interrupts(INT_RDA);
09FC:  MOVLB  01
09FD:  BSF    11.5
....................    enable_interrupts(global);
09FE:  MOVLW  C0
09FF:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
0A00:  MOVLW  8D
0A01:  MOVLB  03
0A02:  MOVWF  11
0A03:  MOVLW  00
0A04:  MOVWF  12
0A05:  MOVLB  00
0A06:  CALL   119
0A07:  MOVLP  30
0A08:  GOTO   279 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0FB2:  MOVLB  0A
0FB3:  MOVF   6E,W
0FB4:  MOVWF  7A
0FB5:  MOVF   6D,W
0FB6:  MOVWF  04
0FB7:  MOVF   6E,W
0FB8:  MOVWF  05
0FB9:  MOVF   00,W
0FBA:  MOVLB  0B
0FBB:  MOVWF  20
0FBC:  MOVLB  0A
0FBD:  MOVF   6C,W
0FBE:  MOVWF  05
0FBF:  MOVF   6B,W
0FC0:  MOVWF  04
0FC1:  CLRF   77
0FC2:  MOVLB  0B
0FC3:  MOVF   20,W
0FC4:  MOVWF  78
0FC5:  MOVLB  00
0FC6:  CALL   7AA
....................    *receive_signal_size = 0;
0FC7:  MOVLB  0A
0FC8:  MOVF   6D,W
0FC9:  MOVWF  04
0FCA:  MOVF   6E,W
0FCB:  MOVWF  05
0FCC:  CLRF   00
0FCD:  MOVLP  30
0FCE:  MOVLB  00
0FCF:  GOTO   2CF (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 8 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 8 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
*
384C:  MOVLB  0C
384D:  CLRF   65
384E:  BTFSC  00.0
384F:  INCF   65,F
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0CE1:  MOVLB  0D
0CE2:  MOVF   4D,W
0CE3:  XORLW  00
0CE4:  MOVLB  00
0CE5:  BTFSC  03.2
0CE6:  GOTO   4EB
0CE7:  XORLW  01
0CE8:  BTFSC  03.2
0CE9:  GOTO   514
0CEA:  GOTO   53E
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0CEB:  MOVLB  0D
0CEC:  CLRF   56
0CED:  CLRF   55
0CEE:  MOVF   56,W
0CEF:  SUBWF  54,W
0CF0:  BTFSS  03.0
0CF1:  GOTO   513
0CF2:  BTFSS  03.2
0CF3:  GOTO   4F8
0CF4:  MOVF   53,W
0CF5:  SUBWF  55,W
0CF6:  BTFSC  03.0
0CF7:  GOTO   513
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0CF8:  MOVF   51,W
0CF9:  ADDWF  55,W
0CFA:  MOVWF  04
0CFB:  MOVF   52,W
0CFC:  ADDWFC 56,W
0CFD:  MOVWF  05
0CFE:  MOVF   00,W
0CFF:  MOVWF  59
0D00:  MOVLB  04
0D01:  BCF    15.5
0D02:  MOVLW  40
0D03:  MOVWF  14
0D04:  MOVLW  13
0D05:  MOVWF  12
0D06:  MOVLW  2A
0D07:  MOVWF  15
0D08:  MOVLB  0D
0D09:  MOVF   59,W
0D0A:  MOVLB  0E
0D0B:  MOVWF  20
0D0C:  MOVLB  00
0D0D:  CALL   267
0D0E:  MOVLB  0D
0D0F:  INCF   55,F
0D10:  BTFSC  03.2
0D11:  INCF   56,F
0D12:  GOTO   4EE
....................          break;
0D13:  GOTO   53F
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0D14:  MOVLB  0D
0D15:  CLRF   58
0D16:  CLRF   57
0D17:  MOVF   58,W
0D18:  SUBWF  54,W
0D19:  BTFSS  03.0
0D1A:  GOTO   53C
0D1B:  BTFSS  03.2
0D1C:  GOTO   521
0D1D:  MOVF   53,W
0D1E:  SUBWF  57,W
0D1F:  BTFSC  03.0
0D20:  GOTO   53C
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0D21:  MOVF   51,W
0D22:  ADDWF  57,W
0D23:  MOVWF  04
0D24:  MOVF   52,W
0D25:  ADDWFC 58,W
0D26:  MOVWF  05
0D27:  MOVF   00,W
0D28:  MOVWF  59
0D29:  MOVLB  04
0D2A:  BCF    15.5
0D2B:  MOVLW  40
0D2C:  MOVWF  14
0D2D:  MOVLW  13
0D2E:  MOVWF  12
0D2F:  MOVLW  2A
0D30:  MOVWF  15
0D31:  MOVLB  0D
0D32:  MOVF   59,W
0D33:  MOVLB  0E
0D34:  MOVWF  20
0D35:  MOVLB  00
0D36:  CALL   274
0D37:  MOVLB  0D
0D38:  INCF   57,F
0D39:  BTFSC  03.2
0D3A:  INCF   58,F
0D3B:  GOTO   517
....................          break;
0D3C:  GOTO   53F
0D3D:  MOVLB  00
....................          
....................       default:
....................          break;
0D3E:  MOVLB  0D
....................    }
....................    return;
0D3F:  MOVLB  00
0D40:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0A81:  MOVLB  0D
0A82:  MOVF   53,W
0A83:  XORLW  00
0A84:  MOVLB  00
0A85:  BTFSC  03.2
0A86:  GOTO   28B
0A87:  XORLW  01
0A88:  BTFSC  03.2
0A89:  GOTO   2ED
0A8A:  GOTO   350
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0A8B:  MOVLB  0D
0A8C:  CLRF   62
0A8D:  CLRF   61
0A8E:  MOVF   62,W
0A8F:  SUBWF  5A,W
0A90:  BTFSS  03.0
0A91:  GOTO   2B3
0A92:  BTFSS  03.2
0A93:  GOTO   298
0A94:  MOVF   59,W
0A95:  SUBWF  61,W
0A96:  BTFSC  03.0
0A97:  GOTO   2B3
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0A98:  MOVF   57,W
0A99:  ADDWF  61,W
0A9A:  MOVWF  04
0A9B:  MOVF   58,W
0A9C:  ADDWFC 62,W
0A9D:  MOVWF  05
0A9E:  MOVF   00,W
0A9F:  MOVWF  6E
0AA0:  MOVLB  04
0AA1:  BCF    15.5
0AA2:  MOVLW  40
0AA3:  MOVWF  14
0AA4:  MOVLW  13
0AA5:  MOVWF  12
0AA6:  MOVLW  2A
0AA7:  MOVWF  15
0AA8:  MOVLB  0D
0AA9:  MOVF   6E,W
0AAA:  MOVLB  0E
0AAB:  MOVWF  20
0AAC:  MOVLB  00
0AAD:  CALL   267
0AAE:  MOVLB  0D
0AAF:  INCF   61,F
0AB0:  BTFSC  03.2
0AB1:  INCF   62,F
0AB2:  GOTO   28E
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0AB3:  CLRF   66
0AB4:  CLRF   65
0AB5:  CLRF   64
0AB6:  CLRF   63
0AB7:  MOVF   66,W
0AB8:  SUBWF  60,W
0AB9:  BTFSS  03.0
0ABA:  GOTO   2EC
0ABB:  BTFSS  03.2
0ABC:  GOTO   2CD
0ABD:  MOVF   65,W
0ABE:  SUBWF  5F,W
0ABF:  BTFSS  03.0
0AC0:  GOTO   2EC
0AC1:  BTFSS  03.2
0AC2:  GOTO   2CD
0AC3:  MOVF   64,W
0AC4:  SUBWF  5E,W
0AC5:  BTFSS  03.0
0AC6:  GOTO   2EC
0AC7:  BTFSS  03.2
0AC8:  GOTO   2CD
0AC9:  MOVF   5D,W
0ACA:  SUBWF  63,W
0ACB:  BTFSC  03.0
0ACC:  GOTO   2EC
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0ACD:  MOVF   5B,W
0ACE:  ADDWF  63,W
0ACF:  MOVWF  04
0AD0:  MOVF   5C,W
0AD1:  ADDWFC 64,W
0AD2:  MOVWF  05
0AD3:  MOVLB  04
0AD4:  BCF    15.5
0AD5:  MOVLW  40
0AD6:  MOVWF  14
0AD7:  MOVLW  13
0AD8:  MOVWF  12
0AD9:  MOVLW  2A
0ADA:  MOVWF  15
0ADB:  MOVLW  01
0ADC:  MOVLB  0E
0ADD:  MOVWF  20
0ADE:  MOVLB  00
0ADF:  CALL   267
0AE0:  MOVF   77,W
0AE1:  MOVWF  00
0AE2:  MOVLW  01
0AE3:  MOVLB  0D
0AE4:  ADDWF  63,F
0AE5:  BTFSC  03.0
0AE6:  INCF   64,F
0AE7:  BTFSC  03.2
0AE8:  INCF   65,F
0AE9:  BTFSC  03.2
0AEA:  INCF   66,F
0AEB:  GOTO   2B7
....................          break;
0AEC:  GOTO   351
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0AED:  MOVLB  0D
0AEE:  CLRF   68
0AEF:  CLRF   67
0AF0:  MOVF   68,W
0AF1:  SUBWF  5A,W
0AF2:  BTFSS  03.0
0AF3:  GOTO   315
0AF4:  BTFSS  03.2
0AF5:  GOTO   2FA
0AF6:  MOVF   59,W
0AF7:  SUBWF  67,W
0AF8:  BTFSC  03.0
0AF9:  GOTO   315
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0AFA:  MOVF   57,W
0AFB:  ADDWF  67,W
0AFC:  MOVWF  04
0AFD:  MOVF   58,W
0AFE:  ADDWFC 68,W
0AFF:  MOVWF  05
0B00:  MOVF   00,W
0B01:  MOVWF  6E
0B02:  MOVLB  04
0B03:  BCF    15.5
0B04:  MOVLW  40
0B05:  MOVWF  14
0B06:  MOVLW  13
0B07:  MOVWF  12
0B08:  MOVLW  2A
0B09:  MOVWF  15
0B0A:  MOVLB  0D
0B0B:  MOVF   6E,W
0B0C:  MOVLB  0E
0B0D:  MOVWF  20
0B0E:  MOVLB  00
0B0F:  CALL   274
0B10:  MOVLB  0D
0B11:  INCF   67,F
0B12:  BTFSC  03.2
0B13:  INCF   68,F
0B14:  GOTO   2F0
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0B15:  CLRF   6C
0B16:  CLRF   6B
0B17:  CLRF   6A
0B18:  CLRF   69
0B19:  MOVF   6C,W
0B1A:  SUBWF  60,W
0B1B:  BTFSS  03.0
0B1C:  GOTO   34E
0B1D:  BTFSS  03.2
0B1E:  GOTO   32F
0B1F:  MOVF   6B,W
0B20:  SUBWF  5F,W
0B21:  BTFSS  03.0
0B22:  GOTO   34E
0B23:  BTFSS  03.2
0B24:  GOTO   32F
0B25:  MOVF   6A,W
0B26:  SUBWF  5E,W
0B27:  BTFSS  03.0
0B28:  GOTO   34E
0B29:  BTFSS  03.2
0B2A:  GOTO   32F
0B2B:  MOVF   5D,W
0B2C:  SUBWF  69,W
0B2D:  BTFSC  03.0
0B2E:  GOTO   34E
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0B2F:  MOVF   5B,W
0B30:  ADDWF  69,W
0B31:  MOVWF  04
0B32:  MOVF   5C,W
0B33:  ADDWFC 6A,W
0B34:  MOVWF  05
0B35:  MOVLB  04
0B36:  BCF    15.5
0B37:  MOVLW  40
0B38:  MOVWF  14
0B39:  MOVLW  13
0B3A:  MOVWF  12
0B3B:  MOVLW  2A
0B3C:  MOVWF  15
0B3D:  MOVLW  02
0B3E:  MOVLB  0E
0B3F:  MOVWF  20
0B40:  MOVLB  00
0B41:  CALL   274
0B42:  MOVF   77,W
0B43:  MOVWF  00
0B44:  MOVLW  01
0B45:  MOVLB  0D
0B46:  ADDWF  69,F
0B47:  BTFSC  03.0
0B48:  INCF   6A,F
0B49:  BTFSC  03.2
0B4A:  INCF   6B,F
0B4B:  BTFSC  03.2
0B4C:  INCF   6C,F
0B4D:  GOTO   319
....................          break;
0B4E:  GOTO   351
0B4F:  MOVLB  00
....................    
....................          
....................       default:
....................          break;
0B50:  MOVLB  0D
....................    }
....................    return;
0B51:  MOVLB  00
0B52:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0D41:  MOVLB  0D
0D42:  MOVF   4D,W
0D43:  XORLW  00
0D44:  MOVLB  00
0D45:  BTFSC  03.2
0D46:  GOTO   54B
0D47:  XORLW  01
0D48:  BTFSC  03.2
0D49:  GOTO   592
0D4A:  GOTO   5DA
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0D4B:  MOVLB  0D
0D4C:  CLRF   58
0D4D:  MOVF   53,W
0D4E:  SUBWF  58,W
0D4F:  BTFSC  03.0
0D50:  GOTO   56A
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0D51:  MOVF   58,W
0D52:  ADDWF  51,W
0D53:  MOVWF  04
0D54:  MOVLW  00
0D55:  ADDWFC 52,W
0D56:  MOVWF  05
0D57:  MOVF   00,W
0D58:  MOVWF  5E
0D59:  MOVLB  04
0D5A:  BCF    15.5
0D5B:  MOVLW  40
0D5C:  MOVWF  14
0D5D:  MOVLW  13
0D5E:  MOVWF  12
0D5F:  MOVLW  2A
0D60:  MOVWF  15
0D61:  MOVLB  0D
0D62:  MOVF   5E,W
0D63:  MOVLB  0E
0D64:  MOVWF  20
0D65:  MOVLB  00
0D66:  CALL   267
0D67:  MOVLB  0D
0D68:  INCF   58,F
0D69:  GOTO   54D
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0D6A:  CLRF   5A
0D6B:  CLRF   59
0D6C:  MOVF   5A,W
0D6D:  SUBWF  57,W
0D6E:  BTFSS  03.0
0D6F:  GOTO   591
0D70:  BTFSS  03.2
0D71:  GOTO   576
0D72:  MOVF   56,W
0D73:  SUBWF  59,W
0D74:  BTFSC  03.0
0D75:  GOTO   591
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0D76:  MOVF   54,W
0D77:  ADDWF  59,W
0D78:  MOVWF  04
0D79:  MOVF   55,W
0D7A:  ADDWFC 5A,W
0D7B:  MOVWF  05
0D7C:  MOVF   00,W
0D7D:  MOVWF  5E
0D7E:  MOVLB  04
0D7F:  BCF    15.5
0D80:  MOVLW  40
0D81:  MOVWF  14
0D82:  MOVLW  13
0D83:  MOVWF  12
0D84:  MOVLW  2A
0D85:  MOVWF  15
0D86:  MOVLB  0D
0D87:  MOVF   5E,W
0D88:  MOVLB  0E
0D89:  MOVWF  20
0D8A:  MOVLB  00
0D8B:  CALL   267
0D8C:  MOVLB  0D
0D8D:  INCF   59,F
0D8E:  BTFSC  03.2
0D8F:  INCF   5A,F
0D90:  GOTO   56C
....................          break;
0D91:  GOTO   5DB
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0D92:  MOVLB  0D
0D93:  CLRF   5B
0D94:  MOVF   53,W
0D95:  SUBWF  5B,W
0D96:  BTFSC  03.0
0D97:  GOTO   5B1
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0D98:  MOVF   5B,W
0D99:  ADDWF  51,W
0D9A:  MOVWF  04
0D9B:  MOVLW  00
0D9C:  ADDWFC 52,W
0D9D:  MOVWF  05
0D9E:  MOVF   00,W
0D9F:  MOVWF  5E
0DA0:  MOVLB  04
0DA1:  BCF    15.5
0DA2:  MOVLW  40
0DA3:  MOVWF  14
0DA4:  MOVLW  13
0DA5:  MOVWF  12
0DA6:  MOVLW  2A
0DA7:  MOVWF  15
0DA8:  MOVLB  0D
0DA9:  MOVF   5E,W
0DAA:  MOVLB  0E
0DAB:  MOVWF  20
0DAC:  MOVLB  00
0DAD:  CALL   274
0DAE:  MOVLB  0D
0DAF:  INCF   5B,F
0DB0:  GOTO   594
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0DB1:  CLRF   5D
0DB2:  CLRF   5C
0DB3:  MOVF   5D,W
0DB4:  SUBWF  57,W
0DB5:  BTFSS  03.0
0DB6:  GOTO   5D8
0DB7:  BTFSS  03.2
0DB8:  GOTO   5BD
0DB9:  MOVF   56,W
0DBA:  SUBWF  5C,W
0DBB:  BTFSC  03.0
0DBC:  GOTO   5D8
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0DBD:  MOVF   54,W
0DBE:  ADDWF  5C,W
0DBF:  MOVWF  04
0DC0:  MOVF   55,W
0DC1:  ADDWFC 5D,W
0DC2:  MOVWF  05
0DC3:  MOVF   00,W
0DC4:  MOVWF  5E
0DC5:  MOVLB  04
0DC6:  BCF    15.5
0DC7:  MOVLW  40
0DC8:  MOVWF  14
0DC9:  MOVLW  13
0DCA:  MOVWF  12
0DCB:  MOVLW  2A
0DCC:  MOVWF  15
0DCD:  MOVLB  0D
0DCE:  MOVF   5E,W
0DCF:  MOVLB  0E
0DD0:  MOVWF  20
0DD1:  MOVLB  00
0DD2:  CALL   274
0DD3:  MOVLB  0D
0DD4:  INCF   5C,F
0DD5:  BTFSC  03.2
0DD6:  INCF   5D,F
0DD7:  GOTO   5B3
....................          break;
0DD8:  GOTO   5DB
0DD9:  MOVLB  00
....................          
....................       default:
....................          break;
0DDA:  MOVLB  0D
....................    }
....................    return;
0DDB:  MOVLB  00
0DDC:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
0DDD:  MOVLW  05
0DDE:  MOVLB  0D
0DDF:  MOVWF  51
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0DE0:  MOVF   4F,W
0DE1:  MOVWF  53
0DE2:  CLRF   54
0DE3:  MOVLW  01
0DE4:  MOVWF  56
0DE5:  CLRF   55
0DE6:  MOVLB  00
0DE7:  CALL   245
0DE8:  MOVLB  0D
0DE9:  MOVF   4F,W
0DEA:  MOVWF  53
0DEB:  CLRF   54
0DEC:  CLRF   56
0DED:  MOVLW  80
0DEE:  MOVWF  55
0DEF:  MOVLB  00
0DF0:  CALL   245
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0DF1:  MOVLB  0D
0DF2:  MOVF   50,W
0DF3:  MOVWF  56
0DF4:  MOVF   4F,W
0DF5:  MOVWF  55
0DF6:  MOVF   4E,W
0DF7:  MOVWF  54
0DF8:  MOVF   4D,W
0DF9:  MOVWF  53
0DFA:  MOVLW  24
0DFB:  MOVWF  58
0DFC:  MOVLW  41
0DFD:  MOVWF  57
0DFE:  CLRF   5A
0DFF:  MOVLW  01
0E00:  MOVWF  59
0E01:  MOVLW  24
0E02:  MOVWF  5C
0E03:  MOVLW  42
0E04:  MOVWF  5B
0E05:  CLRF   60
0E06:  CLRF   5F
0E07:  CLRF   5E
0E08:  MOVLW  01
0E09:  MOVWF  5D
0E0A:  MOVLB  00
0E0B:  CALL   281
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
0E0C:  MOVLB  0D
0E0D:  MOVF   4F,W
0E0E:  MOVWF  53
0E0F:  MOVLW  01
0E10:  MOVWF  54
0E11:  MOVWF  56
0E12:  CLRF   55
0E13:  MOVLB  00
0E14:  CALL   245
0E15:  MOVLB  0D
0E16:  MOVF   4F,W
0E17:  MOVWF  53
0E18:  CLRF   54
0E19:  CLRF   56
0E1A:  MOVLW  80
0E1B:  MOVWF  55
0E1C:  MOVLB  00
0E1D:  CALL   245
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
0E1E:  MOVLB  0D
0E1F:  MOVF   52,W
0E20:  MOVWF  78
0E21:  MOVLB  00
0E22:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2290:  MOVLB  0B
2291:  MOVF   2D,F
2292:  BTFSS  03.2
2293:  GOTO   34B
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
2294:  MOVLW  06
2295:  MOVWF  34
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
2296:  MOVLW  D8
2297:  MOVWF  35
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2298:  MOVF   32,W
2299:  MOVWF  44
229A:  MOVF   33,W
229B:  MOVWF  45
229C:  CLRF   46
229D:  CLRF   47
229E:  CLRF   78
229F:  CLRF   79
22A0:  CLRF   7A
22A1:  MOVF   44,W
22A2:  MOVWF  36
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
22A3:  MOVF   31,W
22A4:  MOVWF  44
22A5:  MOVF   32,W
22A6:  MOVWF  45
22A7:  MOVF   33,W
22A8:  MOVWF  46
22A9:  CLRF   47
22AA:  CLRF   78
22AB:  CLRF   79
22AC:  CLRF   7A
22AD:  MOVF   44,W
22AE:  MOVWF  37
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
22AF:  CLRF   78
22B0:  CLRF   79
22B1:  CLRF   7A
22B2:  MOVF   30,W
22B3:  MOVWF  38
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
22B4:  MOVF   2E,W
22B5:  MOVLB  0D
22B6:  MOVWF  53
22B7:  CLRF   54
22B8:  MOVLW  01
22B9:  MOVWF  56
22BA:  CLRF   55
22BB:  MOVLP  08
22BC:  MOVLB  00
22BD:  CALL   245
22BE:  MOVLP  20
22BF:  MOVLB  0B
22C0:  MOVF   2E,W
22C1:  MOVLB  0D
22C2:  MOVWF  53
22C3:  CLRF   54
22C4:  CLRF   56
22C5:  MOVLW  80
22C6:  MOVWF  55
22C7:  MOVLP  08
22C8:  MOVLB  00
22C9:  CALL   245
22CA:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
22CB:  MOVLB  0B
22CC:  MOVF   2F,W
22CD:  MOVLB  0D
22CE:  MOVWF  50
22CF:  MOVLB  0B
22D0:  MOVF   2E,W
22D1:  MOVLB  0D
22D2:  MOVWF  4F
22D3:  MOVLB  0B
22D4:  MOVF   2D,W
22D5:  MOVLB  0D
22D6:  MOVWF  4E
22D7:  MOVLB  0B
22D8:  MOVF   2C,W
22D9:  MOVLB  0D
22DA:  MOVWF  4D
22DB:  MOVLW  23
22DC:  MOVWF  52
22DD:  MOVLW  84
22DE:  MOVWF  51
22DF:  CLRF   54
22E0:  MOVLW  01
22E1:  MOVWF  53
22E2:  MOVLP  08
22E3:  MOVLB  00
22E4:  CALL   4E1
22E5:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
22E6:  MOVLB  0B
22E7:  MOVF   2E,W
22E8:  MOVLB  0D
22E9:  MOVWF  53
22EA:  MOVLW  01
22EB:  MOVWF  54
22EC:  MOVWF  56
22ED:  CLRF   55
22EE:  MOVLP  08
22EF:  MOVLB  00
22F0:  CALL   245
22F1:  MOVLP  20
22F2:  MOVLB  0B
22F3:  MOVF   2E,W
22F4:  MOVLB  0D
22F5:  MOVWF  53
22F6:  CLRF   54
22F7:  CLRF   56
22F8:  MOVLW  80
22F9:  MOVWF  55
22FA:  MOVLP  08
22FB:  MOVLB  00
22FC:  CALL   245
22FD:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
22FE:  MOVLB  0B
22FF:  MOVF   2E,W
2300:  MOVLB  0D
2301:  MOVWF  53
2302:  CLRF   54
2303:  MOVLW  01
2304:  MOVWF  56
2305:  CLRF   55
2306:  MOVLP  08
2307:  MOVLB  00
2308:  CALL   245
2309:  MOVLP  20
230A:  MOVLB  0B
230B:  MOVF   2E,W
230C:  MOVLB  0D
230D:  MOVWF  53
230E:  CLRF   54
230F:  CLRF   56
2310:  MOVLW  80
2311:  MOVWF  55
2312:  MOVLP  08
2313:  MOVLB  00
2314:  CALL   245
2315:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
2316:  MOVLB  0B
2317:  MOVF   2F,W
2318:  MOVLB  0D
2319:  MOVWF  50
231A:  MOVLB  0B
231B:  MOVF   2E,W
231C:  MOVLB  0D
231D:  MOVWF  4F
231E:  MOVLB  0B
231F:  MOVF   2D,W
2320:  MOVLB  0D
2321:  MOVWF  4E
2322:  MOVLB  0B
2323:  MOVF   2C,W
2324:  MOVLB  0D
2325:  MOVWF  4D
2326:  MOVLW  23
2327:  MOVWF  52
2328:  MOVLW  85
2329:  MOVWF  51
232A:  CLRF   54
232B:  MOVLW  04
232C:  MOVWF  53
232D:  MOVLP  08
232E:  MOVLB  00
232F:  CALL   4E1
2330:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2331:  MOVLB  0B
2332:  MOVF   2E,W
2333:  MOVLB  0D
2334:  MOVWF  53
2335:  MOVLW  01
2336:  MOVWF  54
2337:  MOVWF  56
2338:  CLRF   55
2339:  MOVLP  08
233A:  MOVLB  00
233B:  CALL   245
233C:  MOVLP  20
233D:  MOVLB  0B
233E:  MOVF   2E,W
233F:  MOVLB  0D
2340:  MOVWF  53
2341:  CLRF   54
2342:  CLRF   56
2343:  MOVLW  80
2344:  MOVWF  55
2345:  MOVLP  08
2346:  MOVLB  00
2347:  CALL   245
2348:  MOVLP  20
....................    }
2349:  GOTO   40C
234A:  MOVLB  0B
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
234B:  DECFSZ 2D,W
234C:  GOTO   40D
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
234D:  MOVLW  06
234E:  MOVWF  39
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
234F:  MOVLW  DC
2350:  MOVWF  3A
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
2351:  MOVF   33,W
2352:  MOVWF  44
2353:  CLRF   45
2354:  CLRF   46
2355:  CLRF   47
2356:  CLRF   78
2357:  CLRF   79
2358:  CLRF   7A
2359:  MOVF   44,W
235A:  MOVWF  3B
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
235B:  MOVF   32,W
235C:  MOVWF  44
235D:  MOVF   33,W
235E:  MOVWF  45
235F:  CLRF   46
2360:  CLRF   47
2361:  CLRF   78
2362:  CLRF   79
2363:  CLRF   7A
2364:  MOVF   44,W
2365:  MOVWF  3C
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2366:  MOVF   31,W
2367:  MOVWF  44
2368:  MOVF   32,W
2369:  MOVWF  45
236A:  MOVF   33,W
236B:  MOVWF  46
236C:  CLRF   47
236D:  CLRF   78
236E:  CLRF   79
236F:  CLRF   7A
2370:  MOVF   44,W
2371:  MOVWF  3D
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
2372:  CLRF   78
2373:  CLRF   79
2374:  CLRF   7A
2375:  MOVF   30,W
2376:  MOVWF  3E
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
2377:  MOVF   2E,W
2378:  MOVLB  0D
2379:  MOVWF  53
237A:  CLRF   54
237B:  MOVLW  01
237C:  MOVWF  56
237D:  CLRF   55
237E:  MOVLP  08
237F:  MOVLB  00
2380:  CALL   245
2381:  MOVLP  20
2382:  MOVLB  0B
2383:  MOVF   2E,W
2384:  MOVLB  0D
2385:  MOVWF  53
2386:  CLRF   54
2387:  CLRF   56
2388:  MOVLW  80
2389:  MOVWF  55
238A:  MOVLP  08
238B:  MOVLB  00
238C:  CALL   245
238D:  MOVLP  20
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
238E:  MOVLB  0B
238F:  MOVF   2F,W
2390:  MOVLB  0D
2391:  MOVWF  50
2392:  MOVLB  0B
2393:  MOVF   2E,W
2394:  MOVLB  0D
2395:  MOVWF  4F
2396:  MOVLB  0B
2397:  MOVF   2D,W
2398:  MOVLB  0D
2399:  MOVWF  4E
239A:  MOVLB  0B
239B:  MOVF   2C,W
239C:  MOVLB  0D
239D:  MOVWF  4D
239E:  MOVLW  23
239F:  MOVWF  52
23A0:  MOVLW  89
23A1:  MOVWF  51
23A2:  CLRF   54
23A3:  MOVLW  01
23A4:  MOVWF  53
23A5:  MOVLP  08
23A6:  MOVLB  00
23A7:  CALL   4E1
23A8:  MOVLP  20
....................       output_high(flash_stream.cs_pin);
23A9:  MOVLB  0B
23AA:  MOVF   2E,W
23AB:  MOVLB  0D
23AC:  MOVWF  53
23AD:  MOVLW  01
23AE:  MOVWF  54
23AF:  MOVWF  56
23B0:  CLRF   55
23B1:  MOVLP  08
23B2:  MOVLB  00
23B3:  CALL   245
23B4:  MOVLP  20
23B5:  MOVLB  0B
23B6:  MOVF   2E,W
23B7:  MOVLB  0D
23B8:  MOVWF  53
23B9:  CLRF   54
23BA:  CLRF   56
23BB:  MOVLW  80
23BC:  MOVWF  55
23BD:  MOVLP  08
23BE:  MOVLB  00
23BF:  CALL   245
23C0:  MOVLP  20
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
23C1:  MOVLB  0B
23C2:  MOVF   2E,W
23C3:  MOVLB  0D
23C4:  MOVWF  53
23C5:  CLRF   54
23C6:  MOVLW  01
23C7:  MOVWF  56
23C8:  CLRF   55
23C9:  MOVLP  08
23CA:  MOVLB  00
23CB:  CALL   245
23CC:  MOVLP  20
23CD:  MOVLB  0B
23CE:  MOVF   2E,W
23CF:  MOVLB  0D
23D0:  MOVWF  53
23D1:  CLRF   54
23D2:  CLRF   56
23D3:  MOVLW  80
23D4:  MOVWF  55
23D5:  MOVLP  08
23D6:  MOVLB  00
23D7:  CALL   245
23D8:  MOVLP  20
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
23D9:  MOVLB  0B
23DA:  MOVF   2F,W
23DB:  MOVLB  0D
23DC:  MOVWF  50
23DD:  MOVLB  0B
23DE:  MOVF   2E,W
23DF:  MOVLB  0D
23E0:  MOVWF  4F
23E1:  MOVLB  0B
23E2:  MOVF   2D,W
23E3:  MOVLB  0D
23E4:  MOVWF  4E
23E5:  MOVLB  0B
23E6:  MOVF   2C,W
23E7:  MOVLB  0D
23E8:  MOVWF  4D
23E9:  MOVLW  23
23EA:  MOVWF  52
23EB:  MOVLW  8A
23EC:  MOVWF  51
23ED:  CLRF   54
23EE:  MOVLW  05
23EF:  MOVWF  53
23F0:  MOVLP  08
23F1:  MOVLB  00
23F2:  CALL   4E1
23F3:  MOVLP  20
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
23F4:  MOVLB  0B
23F5:  MOVF   2E,W
23F6:  MOVLB  0D
23F7:  MOVWF  53
23F8:  MOVLW  01
23F9:  MOVWF  54
23FA:  MOVWF  56
23FB:  CLRF   55
23FC:  MOVLP  08
23FD:  MOVLB  00
23FE:  CALL   245
23FF:  MOVLP  20
2400:  MOVLB  0B
2401:  MOVF   2E,W
2402:  MOVLB  0D
2403:  MOVWF  53
2404:  CLRF   54
2405:  CLRF   56
2406:  MOVLW  80
2407:  MOVWF  55
2408:  MOVLP  08
2409:  MOVLB  00
240A:  CALL   245
240B:  MOVLP  20
....................    }
240C:  MOVLB  0B
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
240D:  CLRF   3F
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
240E:  MOVF   2F,W
240F:  MOVLB  0D
2410:  MOVWF  50
2411:  MOVLB  0B
2412:  MOVF   2E,W
2413:  MOVLB  0D
2414:  MOVWF  4F
2415:  MOVLB  0B
2416:  MOVF   2D,W
2417:  MOVLB  0D
2418:  MOVWF  4E
2419:  MOVLB  0B
241A:  MOVF   2C,W
241B:  MOVLB  0D
241C:  MOVWF  4D
241D:  MOVLP  08
241E:  MOVLB  00
241F:  CALL   5DD
2420:  MOVLP  20
2421:  MOVF   78,W
2422:  ANDLW  01
2423:  SUBLW  01
2424:  BTFSS  03.2
2425:  GOTO   446
....................       if(timeout_counter > 10)
2426:  MOVLB  0B
2427:  MOVF   3F,W
2428:  SUBLW  0A
2429:  BTFSC  03.0
242A:  GOTO   434
....................          delay_ms(200);
242B:  MOVLW  C8
242C:  MOVLB  0D
242D:  MOVWF  4D
242E:  MOVLP  08
242F:  MOVLB  00
2430:  CALL   623
2431:  MOVLP  20
2432:  GOTO   43B
2433:  MOVLB  0B
....................       else
....................          delay_ms(10);   
2434:  MOVLW  0A
2435:  MOVLB  0D
2436:  MOVWF  4D
2437:  MOVLP  08
2438:  MOVLB  00
2439:  CALL   623
243A:  MOVLP  20
....................       
....................       if(timeout_counter > 100){
243B:  MOVLB  0B
243C:  MOVF   3F,W
243D:  SUBLW  64
243E:  BTFSC  03.0
243F:  GOTO   443
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
2440:  MOVLB  00
2441:  GOTO   446
2442:  MOVLB  0B
....................       }  
....................       timeout_counter++;
2443:  INCF   3F,F
2444:  GOTO   40E
2445:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
2446:  MOVLP  18
2447:  GOTO   74A (RETURN)
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
149E:  MOVLB  0D
149F:  MOVF   35,F
14A0:  BTFSS  03.2
14A1:  GOTO   543
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
14A2:  MOVLW  06
14A3:  MOVWF  3C
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
14A4:  MOVLW  20
14A5:  MOVWF  3D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
14A6:  MOVF   3A,W
14A7:  MOVWF  49
14A8:  MOVF   3B,W
14A9:  MOVWF  4A
14AA:  CLRF   4B
14AB:  CLRF   4C
14AC:  CLRF   78
14AD:  CLRF   79
14AE:  CLRF   7A
14AF:  MOVF   49,W
14B0:  MOVWF  3E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
14B1:  MOVF   39,W
14B2:  MOVWF  49
14B3:  MOVF   3A,W
14B4:  MOVWF  4A
14B5:  MOVF   3B,W
14B6:  MOVWF  4B
14B7:  CLRF   4C
14B8:  CLRF   78
14B9:  CLRF   79
14BA:  CLRF   7A
14BB:  MOVF   49,W
14BC:  MOVWF  3F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
14BD:  CLRF   78
14BE:  CLRF   79
14BF:  CLRF   7A
14C0:  MOVF   38,W
14C1:  MOVWF  40
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
14C2:  MOVF   36,W
14C3:  MOVWF  53
14C4:  CLRF   54
14C5:  MOVLW  01
14C6:  MOVWF  56
14C7:  CLRF   55
14C8:  MOVLP  08
14C9:  MOVLB  00
14CA:  CALL   245
14CB:  MOVLP  10
14CC:  MOVLB  0D
14CD:  MOVF   36,W
14CE:  MOVWF  53
14CF:  CLRF   54
14D0:  CLRF   56
14D1:  MOVLW  80
14D2:  MOVWF  55
14D3:  MOVLP  08
14D4:  MOVLB  00
14D5:  CALL   245
14D6:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
14D7:  MOVLB  0D
14D8:  MOVF   37,W
14D9:  MOVWF  50
14DA:  MOVF   36,W
14DB:  MOVWF  4F
14DC:  MOVF   35,W
14DD:  MOVWF  4E
14DE:  MOVF   34,W
14DF:  MOVWF  4D
14E0:  MOVLW  24
14E1:  MOVWF  52
14E2:  MOVLW  2C
14E3:  MOVWF  51
14E4:  CLRF   54
14E5:  MOVLW  01
14E6:  MOVWF  53
14E7:  MOVLP  08
14E8:  MOVLB  00
14E9:  CALL   4E1
14EA:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
14EB:  MOVLB  0D
14EC:  MOVF   36,W
14ED:  MOVWF  53
14EE:  MOVLW  01
14EF:  MOVWF  54
14F0:  MOVWF  56
14F1:  CLRF   55
14F2:  MOVLP  08
14F3:  MOVLB  00
14F4:  CALL   245
14F5:  MOVLP  10
14F6:  MOVLB  0D
14F7:  MOVF   36,W
14F8:  MOVWF  53
14F9:  CLRF   54
14FA:  CLRF   56
14FB:  MOVLW  80
14FC:  MOVWF  55
14FD:  MOVLP  08
14FE:  MOVLB  00
14FF:  CALL   245
1500:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1501:  MOVLB  0D
1502:  MOVF   36,W
1503:  MOVWF  53
1504:  CLRF   54
1505:  MOVLW  01
1506:  MOVWF  56
1507:  CLRF   55
1508:  MOVLP  08
1509:  MOVLB  00
150A:  CALL   245
150B:  MOVLP  10
150C:  MOVLB  0D
150D:  MOVF   36,W
150E:  MOVWF  53
150F:  CLRF   54
1510:  CLRF   56
1511:  MOVLW  80
1512:  MOVWF  55
1513:  MOVLP  08
1514:  MOVLB  00
1515:  CALL   245
1516:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1517:  MOVLB  0D
1518:  MOVF   37,W
1519:  MOVWF  50
151A:  MOVF   36,W
151B:  MOVWF  4F
151C:  MOVF   35,W
151D:  MOVWF  4E
151E:  MOVF   34,W
151F:  MOVWF  4D
1520:  MOVLW  24
1521:  MOVWF  52
1522:  MOVLW  2D
1523:  MOVWF  51
1524:  CLRF   54
1525:  MOVLW  04
1526:  MOVWF  53
1527:  MOVLP  08
1528:  MOVLB  00
1529:  CALL   4E1
152A:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
152B:  MOVLB  0D
152C:  MOVF   36,W
152D:  MOVWF  53
152E:  MOVLW  01
152F:  MOVWF  54
1530:  MOVWF  56
1531:  CLRF   55
1532:  MOVLP  08
1533:  MOVLB  00
1534:  CALL   245
1535:  MOVLP  10
1536:  MOVLB  0D
1537:  MOVF   36,W
1538:  MOVWF  53
1539:  CLRF   54
153A:  CLRF   56
153B:  MOVLW  80
153C:  MOVWF  55
153D:  MOVLP  08
153E:  MOVLB  00
153F:  CALL   245
1540:  MOVLP  10
....................    }
1541:  GOTO   5EE
1542:  MOVLB  0D
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1543:  DECFSZ 35,W
1544:  GOTO   5EF
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1545:  MOVLW  06
1546:  MOVWF  41
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
1547:  MOVLW  21
1548:  MOVWF  42
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1549:  MOVF   3B,W
154A:  MOVWF  49
154B:  CLRF   4A
154C:  CLRF   4B
154D:  CLRF   4C
154E:  CLRF   78
154F:  CLRF   79
1550:  CLRF   7A
1551:  MOVF   49,W
1552:  MOVWF  43
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1553:  MOVF   3A,W
1554:  MOVWF  49
1555:  MOVF   3B,W
1556:  MOVWF  4A
1557:  CLRF   4B
1558:  CLRF   4C
1559:  CLRF   78
155A:  CLRF   79
155B:  CLRF   7A
155C:  MOVF   49,W
155D:  MOVWF  44
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
155E:  MOVF   39,W
155F:  MOVWF  49
1560:  MOVF   3A,W
1561:  MOVWF  4A
1562:  MOVF   3B,W
1563:  MOVWF  4B
1564:  CLRF   4C
1565:  CLRF   78
1566:  CLRF   79
1567:  CLRF   7A
1568:  MOVF   49,W
1569:  MOVWF  45
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
156A:  CLRF   78
156B:  CLRF   79
156C:  CLRF   7A
156D:  MOVF   38,W
156E:  MOVWF  46
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
156F:  MOVF   36,W
1570:  MOVWF  53
1571:  CLRF   54
1572:  MOVLW  01
1573:  MOVWF  56
1574:  CLRF   55
1575:  MOVLP  08
1576:  MOVLB  00
1577:  CALL   245
1578:  MOVLP  10
1579:  MOVLB  0D
157A:  MOVF   36,W
157B:  MOVWF  53
157C:  CLRF   54
157D:  CLRF   56
157E:  MOVLW  80
157F:  MOVWF  55
1580:  MOVLP  08
1581:  MOVLB  00
1582:  CALL   245
1583:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1584:  MOVLB  0D
1585:  MOVF   37,W
1586:  MOVWF  50
1587:  MOVF   36,W
1588:  MOVWF  4F
1589:  MOVF   35,W
158A:  MOVWF  4E
158B:  MOVF   34,W
158C:  MOVWF  4D
158D:  MOVLW  24
158E:  MOVWF  52
158F:  MOVLW  31
1590:  MOVWF  51
1591:  CLRF   54
1592:  MOVLW  01
1593:  MOVWF  53
1594:  MOVLP  08
1595:  MOVLB  00
1596:  CALL   4E1
1597:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1598:  MOVLB  0D
1599:  MOVF   36,W
159A:  MOVWF  53
159B:  MOVLW  01
159C:  MOVWF  54
159D:  MOVWF  56
159E:  CLRF   55
159F:  MOVLP  08
15A0:  MOVLB  00
15A1:  CALL   245
15A2:  MOVLP  10
15A3:  MOVLB  0D
15A4:  MOVF   36,W
15A5:  MOVWF  53
15A6:  CLRF   54
15A7:  CLRF   56
15A8:  MOVLW  80
15A9:  MOVWF  55
15AA:  MOVLP  08
15AB:  MOVLB  00
15AC:  CALL   245
15AD:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
15AE:  MOVLB  0D
15AF:  MOVF   36,W
15B0:  MOVWF  53
15B1:  CLRF   54
15B2:  MOVLW  01
15B3:  MOVWF  56
15B4:  CLRF   55
15B5:  MOVLP  08
15B6:  MOVLB  00
15B7:  CALL   245
15B8:  MOVLP  10
15B9:  MOVLB  0D
15BA:  MOVF   36,W
15BB:  MOVWF  53
15BC:  CLRF   54
15BD:  CLRF   56
15BE:  MOVLW  80
15BF:  MOVWF  55
15C0:  MOVLP  08
15C1:  MOVLB  00
15C2:  CALL   245
15C3:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
15C4:  MOVLB  0D
15C5:  MOVF   37,W
15C6:  MOVWF  50
15C7:  MOVF   36,W
15C8:  MOVWF  4F
15C9:  MOVF   35,W
15CA:  MOVWF  4E
15CB:  MOVF   34,W
15CC:  MOVWF  4D
15CD:  MOVLW  24
15CE:  MOVWF  52
15CF:  MOVLW  32
15D0:  MOVWF  51
15D1:  CLRF   54
15D2:  MOVLW  05
15D3:  MOVWF  53
15D4:  MOVLP  08
15D5:  MOVLB  00
15D6:  CALL   4E1
15D7:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
15D8:  MOVLB  0D
15D9:  MOVF   36,W
15DA:  MOVWF  53
15DB:  MOVLW  01
15DC:  MOVWF  54
15DD:  MOVWF  56
15DE:  CLRF   55
15DF:  MOVLP  08
15E0:  MOVLB  00
15E1:  CALL   245
15E2:  MOVLP  10
15E3:  MOVLB  0D
15E4:  MOVF   36,W
15E5:  MOVWF  53
15E6:  CLRF   54
15E7:  CLRF   56
15E8:  MOVLW  80
15E9:  MOVWF  55
15EA:  MOVLP  08
15EB:  MOVLB  00
15EC:  CALL   245
15ED:  MOVLP  10
....................    }
15EE:  MOVLB  0D
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
15EF:  CLRF   47
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
15F0:  MOVF   37,W
15F1:  MOVWF  50
15F2:  MOVF   36,W
15F3:  MOVWF  4F
15F4:  MOVF   35,W
15F5:  MOVWF  4E
15F6:  MOVF   34,W
15F7:  MOVWF  4D
15F8:  MOVLP  08
15F9:  MOVLB  00
15FA:  CALL   5DD
15FB:  MOVLP  10
15FC:  MOVF   78,W
15FD:  ANDLW  01
15FE:  SUBLW  01
15FF:  BTFSS  03.2
1600:  GOTO   61E
....................       if(timeout_counter > 10)
1601:  MOVLB  0D
1602:  MOVF   47,W
1603:  SUBLW  0A
1604:  BTFSC  03.0
1605:  GOTO   60E
....................          delay_ms(200);
1606:  MOVLW  C8
1607:  MOVWF  4D
1608:  MOVLP  08
1609:  MOVLB  00
160A:  CALL   623
160B:  MOVLP  10
160C:  GOTO   614
160D:  MOVLB  0D
....................       else
....................          delay_ms(10);   
160E:  MOVLW  0A
160F:  MOVWF  4D
1610:  MOVLP  08
1611:  MOVLB  00
1612:  CALL   623
1613:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
1614:  MOVLB  0D
1615:  MOVF   47,W
1616:  SUBLW  64
1617:  BTFSC  03.0
1618:  GOTO   61C
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1619:  MOVLB  00
161A:  GOTO   61E
161B:  MOVLB  0D
....................       }  
....................       timeout_counter++;
161C:  INCF   47,F
161D:  GOTO   5F0
161E:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
161F:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2E52:  MOVLB  0D
2E53:  MOVF   22,F
2E54:  BTFSS  03.2
2E55:  GOTO   6B9
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
2E56:  MOVLW  03
2E57:  MOVWF  2A
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2E58:  CLRF   37
2E59:  CLRF   38
2E5A:  CLRF   78
2E5B:  CLRF   79
2E5C:  CLRF   7A
2E5D:  MOVF   27,W
2E5E:  MOVWF  2B
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2E5F:  CLRF   38
2E60:  CLRF   78
2E61:  CLRF   79
2E62:  CLRF   7A
2E63:  MOVF   26,W
2E64:  MOVWF  2C
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2E65:  CLRF   78
2E66:  CLRF   79
2E67:  CLRF   7A
2E68:  MOVF   25,W
2E69:  MOVWF  2D
....................             
....................       output_low(flash_stream.cs_pin);
2E6A:  MOVF   23,W
2E6B:  MOVWF  53
2E6C:  CLRF   54
2E6D:  MOVLW  01
2E6E:  MOVWF  56
2E6F:  CLRF   55
2E70:  MOVLP  08
2E71:  MOVLB  00
2E72:  CALL   245
2E73:  MOVLP  28
2E74:  MOVLB  0D
2E75:  MOVF   23,W
2E76:  MOVWF  53
2E77:  CLRF   54
2E78:  CLRF   56
2E79:  MOVLW  80
2E7A:  MOVWF  55
2E7B:  MOVLP  08
2E7C:  MOVLB  00
2E7D:  CALL   245
2E7E:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
2E7F:  MOVLB  0D
2E80:  MOVF   24,W
2E81:  MOVWF  56
2E82:  MOVF   23,W
2E83:  MOVWF  55
2E84:  MOVF   22,W
2E85:  MOVWF  54
2E86:  MOVF   21,W
2E87:  MOVWF  53
2E88:  MOVLW  24
2E89:  MOVWF  58
2E8A:  MOVLW  1A
2E8B:  MOVWF  57
2E8C:  CLRF   5A
2E8D:  MOVLW  04
2E8E:  MOVWF  59
2E8F:  MOVLW  24
2E90:  MOVWF  5C
2E91:  MOVLW  19
2E92:  MOVWF  5B
2E93:  CLRF   60
2E94:  CLRF   5F
2E95:  CLRF   5E
2E96:  MOVLW  01
2E97:  MOVWF  5D
2E98:  MOVLP  08
2E99:  MOVLB  00
2E9A:  CALL   281
2E9B:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2E9C:  MOVLW  02
2E9D:  MOVWF  77
2E9E:  DECFSZ 77,F
2E9F:  GOTO   69E
2EA0:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2EA1:  MOVLB  0D
2EA2:  MOVF   23,W
2EA3:  MOVWF  53
2EA4:  MOVLW  01
2EA5:  MOVWF  54
2EA6:  MOVWF  56
2EA7:  CLRF   55
2EA8:  MOVLP  08
2EA9:  MOVLB  00
2EAA:  CALL   245
2EAB:  MOVLP  28
2EAC:  MOVLB  0D
2EAD:  MOVF   23,W
2EAE:  MOVWF  53
2EAF:  CLRF   54
2EB0:  CLRF   56
2EB1:  MOVLW  80
2EB2:  MOVWF  55
2EB3:  MOVLP  08
2EB4:  MOVLB  00
2EB5:  CALL   245
2EB6:  MOVLP  28
....................    }
2EB7:  GOTO   724
2EB8:  MOVLB  0D
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
2EB9:  DECFSZ 22,W
2EBA:  GOTO   725
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
2EBB:  MOVLW  13
2EBC:  MOVWF  2E
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
2EBD:  CLRF   36
2EBE:  CLRF   37
2EBF:  CLRF   38
2EC0:  CLRF   78
2EC1:  CLRF   79
2EC2:  CLRF   7A
2EC3:  MOVF   28,W
2EC4:  MOVWF  2F
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2EC5:  CLRF   37
2EC6:  CLRF   38
2EC7:  CLRF   78
2EC8:  CLRF   79
2EC9:  CLRF   7A
2ECA:  MOVF   27,W
2ECB:  MOVWF  30
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2ECC:  CLRF   38
2ECD:  CLRF   78
2ECE:  CLRF   79
2ECF:  CLRF   7A
2ED0:  MOVF   26,W
2ED1:  MOVWF  31
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2ED2:  CLRF   78
2ED3:  CLRF   79
2ED4:  CLRF   7A
2ED5:  MOVF   25,W
2ED6:  MOVWF  32
....................    
....................       output_low(flash_stream.cs_pin);
2ED7:  MOVF   23,W
2ED8:  MOVWF  53
2ED9:  CLRF   54
2EDA:  MOVLW  01
2EDB:  MOVWF  56
2EDC:  CLRF   55
2EDD:  MOVLP  08
2EDE:  MOVLB  00
2EDF:  CALL   245
2EE0:  MOVLP  28
2EE1:  MOVLB  0D
2EE2:  MOVF   23,W
2EE3:  MOVWF  53
2EE4:  CLRF   54
2EE5:  CLRF   56
2EE6:  MOVLW  80
2EE7:  MOVWF  55
2EE8:  MOVLP  08
2EE9:  MOVLB  00
2EEA:  CALL   245
2EEB:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
2EEC:  MOVLB  0D
2EED:  MOVF   24,W
2EEE:  MOVWF  56
2EEF:  MOVF   23,W
2EF0:  MOVWF  55
2EF1:  MOVF   22,W
2EF2:  MOVWF  54
2EF3:  MOVF   21,W
2EF4:  MOVWF  53
2EF5:  MOVLW  24
2EF6:  MOVWF  58
2EF7:  MOVLW  1E
2EF8:  MOVWF  57
2EF9:  CLRF   5A
2EFA:  MOVLW  05
2EFB:  MOVWF  59
2EFC:  MOVLW  24
2EFD:  MOVWF  5C
2EFE:  MOVLW  19
2EFF:  MOVWF  5B
2F00:  CLRF   60
2F01:  CLRF   5F
2F02:  CLRF   5E
2F03:  MOVLW  01
2F04:  MOVWF  5D
2F05:  MOVLP  08
2F06:  MOVLB  00
2F07:  CALL   281
2F08:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2F09:  MOVLW  02
2F0A:  MOVWF  77
2F0B:  DECFSZ 77,F
2F0C:  GOTO   70B
2F0D:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2F0E:  MOVLB  0D
2F0F:  MOVF   23,W
2F10:  MOVWF  53
2F11:  MOVLW  01
2F12:  MOVWF  54
2F13:  MOVWF  56
2F14:  CLRF   55
2F15:  MOVLP  08
2F16:  MOVLB  00
2F17:  CALL   245
2F18:  MOVLP  28
2F19:  MOVLB  0D
2F1A:  MOVF   23,W
2F1B:  MOVWF  53
2F1C:  CLRF   54
2F1D:  CLRF   56
2F1E:  MOVLW  80
2F1F:  MOVWF  55
2F20:  MOVLP  08
2F21:  MOVLB  00
2F22:  CALL   245
2F23:  MOVLP  28
2F24:  MOVLB  0D
....................    }
....................    return read_data;
2F25:  MOVF   29,W
2F26:  MOVWF  78
2F27:  MOVLP  38
2F28:  MOVLB  00
2F29:  GOTO   28C (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0BA1:  MOVLB  0C
0BA2:  MOVF   67,F
0BA3:  BTFSS  03.2
0BA4:  GOTO   428
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0BA5:  MOVLW  03
0BA6:  MOVLB  0D
0BA7:  MOVWF  24
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0BA8:  MOVLB  0C
0BA9:  MOVF   6C,W
0BAA:  MOVLB  0D
0BAB:  MOVWF  30
0BAC:  MOVLB  0C
0BAD:  MOVF   6D,W
0BAE:  MOVLB  0D
0BAF:  MOVWF  31
0BB0:  CLRF   32
0BB1:  CLRF   33
0BB2:  CLRF   78
0BB3:  CLRF   79
0BB4:  CLRF   7A
0BB5:  MOVF   30,W
0BB6:  MOVWF  25
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0BB7:  MOVLB  0C
0BB8:  MOVF   6B,W
0BB9:  MOVLB  0D
0BBA:  MOVWF  30
0BBB:  MOVLB  0C
0BBC:  MOVF   6C,W
0BBD:  MOVLB  0D
0BBE:  MOVWF  31
0BBF:  MOVLB  0C
0BC0:  MOVF   6D,W
0BC1:  MOVLB  0D
0BC2:  MOVWF  32
0BC3:  CLRF   33
0BC4:  CLRF   78
0BC5:  CLRF   79
0BC6:  CLRF   7A
0BC7:  MOVF   30,W
0BC8:  MOVWF  26
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0BC9:  MOVLB  0C
0BCA:  CLRF   78
0BCB:  CLRF   79
0BCC:  CLRF   7A
0BCD:  MOVF   6A,W
0BCE:  MOVLB  0D
0BCF:  MOVWF  27
....................             
....................       output_low(flash_stream.cs_pin);
0BD0:  MOVLB  0C
0BD1:  MOVF   68,W
0BD2:  MOVLB  0D
0BD3:  MOVWF  53
0BD4:  CLRF   54
0BD5:  MOVLW  01
0BD6:  MOVWF  56
0BD7:  CLRF   55
0BD8:  MOVLB  00
0BD9:  CALL   245
0BDA:  MOVLB  0C
0BDB:  MOVF   68,W
0BDC:  MOVLB  0D
0BDD:  MOVWF  53
0BDE:  CLRF   54
0BDF:  CLRF   56
0BE0:  MOVLW  80
0BE1:  MOVWF  55
0BE2:  MOVLB  00
0BE3:  CALL   245
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0BE4:  MOVLB  0C
0BE5:  MOVF   69,W
0BE6:  MOVLB  0D
0BE7:  MOVWF  56
0BE8:  MOVLB  0C
0BE9:  MOVF   68,W
0BEA:  MOVLB  0D
0BEB:  MOVWF  55
0BEC:  MOVLB  0C
0BED:  MOVF   67,W
0BEE:  MOVLB  0D
0BEF:  MOVWF  54
0BF0:  MOVLB  0C
0BF1:  MOVF   66,W
0BF2:  MOVLB  0D
0BF3:  MOVWF  53
0BF4:  MOVLW  24
0BF5:  MOVWF  58
0BF6:  MOVLW  14
0BF7:  MOVWF  57
0BF8:  CLRF   5A
0BF9:  MOVLW  04
0BFA:  MOVWF  59
0BFB:  MOVLB  0C
0BFC:  MOVF   6F,W
0BFD:  MOVLB  0D
0BFE:  MOVWF  5C
0BFF:  MOVLB  0C
0C00:  MOVF   6E,W
0C01:  MOVLB  0D
0C02:  MOVWF  5B
0C03:  MOVF   23,W
0C04:  MOVWF  60
0C05:  MOVF   22,W
0C06:  MOVWF  5F
0C07:  MOVF   21,W
0C08:  MOVWF  5E
0C09:  MOVF   20,W
0C0A:  MOVWF  5D
0C0B:  MOVLB  00
0C0C:  CALL   281
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0C0D:  MOVLW  02
0C0E:  MOVWF  77
0C0F:  DECFSZ 77,F
0C10:  GOTO   40F
0C11:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0C12:  MOVLB  0C
0C13:  MOVF   68,W
0C14:  MOVLB  0D
0C15:  MOVWF  53
0C16:  MOVLW  01
0C17:  MOVWF  54
0C18:  MOVWF  56
0C19:  CLRF   55
0C1A:  MOVLB  00
0C1B:  CALL   245
0C1C:  MOVLB  0C
0C1D:  MOVF   68,W
0C1E:  MOVLB  0D
0C1F:  MOVWF  53
0C20:  CLRF   54
0C21:  CLRF   56
0C22:  MOVLW  80
0C23:  MOVWF  55
0C24:  MOVLB  00
0C25:  CALL   245
....................    }
0C26:  GOTO   4B7
0C27:  MOVLB  0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0C28:  DECFSZ 67,W
0C29:  GOTO   4B8
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0C2A:  MOVLW  13
0C2B:  MOVLB  0D
0C2C:  MOVWF  28
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0C2D:  MOVLB  0C
0C2E:  MOVF   6D,W
0C2F:  MOVLB  0D
0C30:  MOVWF  30
0C31:  CLRF   31
0C32:  CLRF   32
0C33:  CLRF   33
0C34:  CLRF   78
0C35:  CLRF   79
0C36:  CLRF   7A
0C37:  MOVF   30,W
0C38:  MOVWF  29
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0C39:  MOVLB  0C
0C3A:  MOVF   6C,W
0C3B:  MOVLB  0D
0C3C:  MOVWF  30
0C3D:  MOVLB  0C
0C3E:  MOVF   6D,W
0C3F:  MOVLB  0D
0C40:  MOVWF  31
0C41:  CLRF   32
0C42:  CLRF   33
0C43:  CLRF   78
0C44:  CLRF   79
0C45:  CLRF   7A
0C46:  MOVF   30,W
0C47:  MOVWF  2A
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0C48:  MOVLB  0C
0C49:  MOVF   6B,W
0C4A:  MOVLB  0D
0C4B:  MOVWF  30
0C4C:  MOVLB  0C
0C4D:  MOVF   6C,W
0C4E:  MOVLB  0D
0C4F:  MOVWF  31
0C50:  MOVLB  0C
0C51:  MOVF   6D,W
0C52:  MOVLB  0D
0C53:  MOVWF  32
0C54:  CLRF   33
0C55:  CLRF   78
0C56:  CLRF   79
0C57:  CLRF   7A
0C58:  MOVF   30,W
0C59:  MOVWF  2B
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0C5A:  MOVLB  0C
0C5B:  CLRF   78
0C5C:  CLRF   79
0C5D:  CLRF   7A
0C5E:  MOVF   6A,W
0C5F:  MOVLB  0D
0C60:  MOVWF  2C
....................    
....................       output_low(flash_stream.cs_pin);
0C61:  MOVLB  0C
0C62:  MOVF   68,W
0C63:  MOVLB  0D
0C64:  MOVWF  53
0C65:  CLRF   54
0C66:  MOVLW  01
0C67:  MOVWF  56
0C68:  CLRF   55
0C69:  MOVLB  00
0C6A:  CALL   245
0C6B:  MOVLB  0C
0C6C:  MOVF   68,W
0C6D:  MOVLB  0D
0C6E:  MOVWF  53
0C6F:  CLRF   54
0C70:  CLRF   56
0C71:  MOVLW  80
0C72:  MOVWF  55
0C73:  MOVLB  00
0C74:  CALL   245
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0C75:  MOVLB  0C
0C76:  MOVF   69,W
0C77:  MOVLB  0D
0C78:  MOVWF  56
0C79:  MOVLB  0C
0C7A:  MOVF   68,W
0C7B:  MOVLB  0D
0C7C:  MOVWF  55
0C7D:  MOVLB  0C
0C7E:  MOVF   67,W
0C7F:  MOVLB  0D
0C80:  MOVWF  54
0C81:  MOVLB  0C
0C82:  MOVF   66,W
0C83:  MOVLB  0D
0C84:  MOVWF  53
0C85:  MOVLW  24
0C86:  MOVWF  58
0C87:  MOVLW  18
0C88:  MOVWF  57
0C89:  CLRF   5A
0C8A:  MOVLW  05
0C8B:  MOVWF  59
0C8C:  MOVLB  0C
0C8D:  MOVF   6F,W
0C8E:  MOVLB  0D
0C8F:  MOVWF  5C
0C90:  MOVLB  0C
0C91:  MOVF   6E,W
0C92:  MOVLB  0D
0C93:  MOVWF  5B
0C94:  MOVF   23,W
0C95:  MOVWF  60
0C96:  MOVF   22,W
0C97:  MOVWF  5F
0C98:  MOVF   21,W
0C99:  MOVWF  5E
0C9A:  MOVF   20,W
0C9B:  MOVWF  5D
0C9C:  MOVLB  00
0C9D:  CALL   281
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0C9E:  MOVLW  02
0C9F:  MOVWF  77
0CA0:  DECFSZ 77,F
0CA1:  GOTO   4A0
0CA2:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0CA3:  MOVLB  0C
0CA4:  MOVF   68,W
0CA5:  MOVLB  0D
0CA6:  MOVWF  53
0CA7:  MOVLW  01
0CA8:  MOVWF  54
0CA9:  MOVWF  56
0CAA:  CLRF   55
0CAB:  MOVLB  00
0CAC:  CALL   245
0CAD:  MOVLB  0C
0CAE:  MOVF   68,W
0CAF:  MOVLB  0D
0CB0:  MOVWF  53
0CB1:  CLRF   54
0CB2:  CLRF   56
0CB3:  MOVLW  80
0CB4:  MOVWF  55
0CB5:  MOVLB  00
0CB6:  CALL   245
0CB7:  MOVLB  0C
....................    }
....................    return;
0CB8:  MOVLB  00
0CB9:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
3000:  MOVLB  0D
3001:  MOVF   21,F
3002:  BTFSS  03.2
3003:  GOTO   0AE
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
3004:  MOVLW  06
3005:  MOVWF  28
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
3006:  MOVLW  02
3007:  MOVWF  29
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3008:  MOVF   26,W
3009:  MOVWF  3A
300A:  MOVF   27,W
300B:  MOVWF  3B
300C:  CLRF   3C
300D:  CLRF   3D
300E:  CLRF   78
300F:  CLRF   79
3010:  CLRF   7A
3011:  MOVF   3A,W
3012:  MOVWF  2A
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3013:  MOVF   25,W
3014:  MOVWF  3A
3015:  MOVF   26,W
3016:  MOVWF  3B
3017:  MOVF   27,W
3018:  MOVWF  3C
3019:  CLRF   3D
301A:  CLRF   78
301B:  CLRF   79
301C:  CLRF   7A
301D:  MOVF   3A,W
301E:  MOVWF  2B
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
301F:  CLRF   78
3020:  CLRF   79
3021:  CLRF   7A
3022:  MOVF   24,W
3023:  MOVWF  2C
....................       flash_cmd[4] = write_data;
3024:  MOVLB  0C
3025:  MOVF   6F,W
3026:  MOVLB  0D
3027:  MOVWF  2D
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3028:  MOVF   22,W
3029:  MOVWF  53
302A:  CLRF   54
302B:  MOVLW  01
302C:  MOVWF  56
302D:  CLRF   55
302E:  MOVLP  08
302F:  MOVLB  00
3030:  CALL   245
3031:  MOVLP  30
3032:  MOVLB  0D
3033:  MOVF   22,W
3034:  MOVWF  53
3035:  CLRF   54
3036:  CLRF   56
3037:  MOVLW  80
3038:  MOVWF  55
3039:  MOVLP  08
303A:  MOVLB  00
303B:  CALL   245
303C:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
303D:  MOVLB  0D
303E:  MOVF   23,W
303F:  MOVWF  50
3040:  MOVF   22,W
3041:  MOVWF  4F
3042:  MOVF   21,W
3043:  MOVWF  4E
3044:  MOVF   20,W
3045:  MOVWF  4D
3046:  MOVLW  24
3047:  MOVWF  52
3048:  MOVLW  18
3049:  MOVWF  51
304A:  CLRF   54
304B:  MOVLW  01
304C:  MOVWF  53
304D:  MOVLP  08
304E:  MOVLB  00
304F:  CALL   4E1
3050:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3051:  MOVLB  0D
3052:  MOVF   22,W
3053:  MOVWF  53
3054:  MOVLW  01
3055:  MOVWF  54
3056:  MOVWF  56
3057:  CLRF   55
3058:  MOVLP  08
3059:  MOVLB  00
305A:  CALL   245
305B:  MOVLP  30
305C:  MOVLB  0D
305D:  MOVF   22,W
305E:  MOVWF  53
305F:  CLRF   54
3060:  CLRF   56
3061:  MOVLW  80
3062:  MOVWF  55
3063:  MOVLP  08
3064:  MOVLB  00
3065:  CALL   245
3066:  MOVLP  30
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
3067:  MOVLB  0D
3068:  MOVF   22,W
3069:  MOVWF  53
306A:  CLRF   54
306B:  MOVLW  01
306C:  MOVWF  56
306D:  CLRF   55
306E:  MOVLP  08
306F:  MOVLB  00
3070:  CALL   245
3071:  MOVLP  30
3072:  MOVLB  0D
3073:  MOVF   22,W
3074:  MOVWF  53
3075:  CLRF   54
3076:  CLRF   56
3077:  MOVLW  80
3078:  MOVWF  55
3079:  MOVLP  08
307A:  MOVLB  00
307B:  CALL   245
307C:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
307D:  MOVLB  0D
307E:  MOVF   23,W
307F:  MOVWF  50
3080:  MOVF   22,W
3081:  MOVWF  4F
3082:  MOVF   21,W
3083:  MOVWF  4E
3084:  MOVF   20,W
3085:  MOVWF  4D
3086:  MOVLW  24
3087:  MOVWF  52
3088:  MOVLW  19
3089:  MOVWF  51
308A:  CLRF   54
308B:  MOVLW  05
308C:  MOVWF  53
308D:  MOVLP  08
308E:  MOVLB  00
308F:  CALL   4E1
3090:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3091:  MOVLW  02
3092:  MOVWF  77
3093:  DECFSZ 77,F
3094:  GOTO   093
3095:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
3096:  MOVLB  0D
3097:  MOVF   22,W
3098:  MOVWF  53
3099:  MOVLW  01
309A:  MOVWF  54
309B:  MOVWF  56
309C:  CLRF   55
309D:  MOVLP  08
309E:  MOVLB  00
309F:  CALL   245
30A0:  MOVLP  30
30A1:  MOVLB  0D
30A2:  MOVF   22,W
30A3:  MOVWF  53
30A4:  CLRF   54
30A5:  CLRF   56
30A6:  MOVLW  80
30A7:  MOVWF  55
30A8:  MOVLP  08
30A9:  MOVLB  00
30AA:  CALL   245
30AB:  MOVLP  30
....................    }
30AC:  GOTO   162
30AD:  MOVLB  0D
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
30AE:  DECFSZ 21,W
30AF:  GOTO   163
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
30B0:  MOVLW  06
30B1:  MOVWF  2E
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
30B2:  MOVLW  12
30B3:  MOVWF  2F
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
30B4:  MOVF   27,W
30B5:  MOVWF  3A
30B6:  CLRF   3B
30B7:  CLRF   3C
30B8:  CLRF   3D
30B9:  CLRF   78
30BA:  CLRF   79
30BB:  CLRF   7A
30BC:  MOVF   3A,W
30BD:  MOVWF  30
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
30BE:  MOVF   26,W
30BF:  MOVWF  3A
30C0:  MOVF   27,W
30C1:  MOVWF  3B
30C2:  CLRF   3C
30C3:  CLRF   3D
30C4:  CLRF   78
30C5:  CLRF   79
30C6:  CLRF   7A
30C7:  MOVF   3A,W
30C8:  MOVWF  31
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
30C9:  MOVF   25,W
30CA:  MOVWF  3A
30CB:  MOVF   26,W
30CC:  MOVWF  3B
30CD:  MOVF   27,W
30CE:  MOVWF  3C
30CF:  CLRF   3D
30D0:  CLRF   78
30D1:  CLRF   79
30D2:  CLRF   7A
30D3:  MOVF   3A,W
30D4:  MOVWF  32
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
30D5:  CLRF   78
30D6:  CLRF   79
30D7:  CLRF   7A
30D8:  MOVF   24,W
30D9:  MOVWF  33
....................       flash_cmd[5] = write_data;
30DA:  MOVLB  0C
30DB:  MOVF   6F,W
30DC:  MOVLB  0D
30DD:  MOVWF  34
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
30DE:  MOVF   22,W
30DF:  MOVWF  53
30E0:  CLRF   54
30E1:  MOVLW  01
30E2:  MOVWF  56
30E3:  CLRF   55
30E4:  MOVLP  08
30E5:  MOVLB  00
30E6:  CALL   245
30E7:  MOVLP  30
30E8:  MOVLB  0D
30E9:  MOVF   22,W
30EA:  MOVWF  53
30EB:  CLRF   54
30EC:  CLRF   56
30ED:  MOVLW  80
30EE:  MOVWF  55
30EF:  MOVLP  08
30F0:  MOVLB  00
30F1:  CALL   245
30F2:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
30F3:  MOVLB  0D
30F4:  MOVF   23,W
30F5:  MOVWF  50
30F6:  MOVF   22,W
30F7:  MOVWF  4F
30F8:  MOVF   21,W
30F9:  MOVWF  4E
30FA:  MOVF   20,W
30FB:  MOVWF  4D
30FC:  MOVLW  24
30FD:  MOVWF  52
30FE:  MOVLW  1E
30FF:  MOVWF  51
3100:  CLRF   54
3101:  MOVLW  01
3102:  MOVWF  53
3103:  MOVLP  08
3104:  MOVLB  00
3105:  CALL   4E1
3106:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3107:  MOVLB  0D
3108:  MOVF   22,W
3109:  MOVWF  53
310A:  MOVLW  01
310B:  MOVWF  54
310C:  MOVWF  56
310D:  CLRF   55
310E:  MOVLP  08
310F:  MOVLB  00
3110:  CALL   245
3111:  MOVLP  30
3112:  MOVLB  0D
3113:  MOVF   22,W
3114:  MOVWF  53
3115:  CLRF   54
3116:  CLRF   56
3117:  MOVLW  80
3118:  MOVWF  55
3119:  MOVLP  08
311A:  MOVLB  00
311B:  CALL   245
311C:  MOVLP  30
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
311D:  MOVLB  0D
311E:  MOVF   22,W
311F:  MOVWF  53
3120:  CLRF   54
3121:  MOVLW  01
3122:  MOVWF  56
3123:  CLRF   55
3124:  MOVLP  08
3125:  MOVLB  00
3126:  CALL   245
3127:  MOVLP  30
3128:  MOVLB  0D
3129:  MOVF   22,W
312A:  MOVWF  53
312B:  CLRF   54
312C:  CLRF   56
312D:  MOVLW  80
312E:  MOVWF  55
312F:  MOVLP  08
3130:  MOVLB  00
3131:  CALL   245
3132:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
3133:  MOVLB  0D
3134:  MOVF   23,W
3135:  MOVWF  50
3136:  MOVF   22,W
3137:  MOVWF  4F
3138:  MOVF   21,W
3139:  MOVWF  4E
313A:  MOVF   20,W
313B:  MOVWF  4D
313C:  MOVLW  24
313D:  MOVWF  52
313E:  MOVLW  1F
313F:  MOVWF  51
3140:  CLRF   54
3141:  MOVLW  06
3142:  MOVWF  53
3143:  MOVLP  08
3144:  MOVLB  00
3145:  CALL   4E1
3146:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3147:  MOVLW  02
3148:  MOVWF  77
3149:  DECFSZ 77,F
314A:  GOTO   149
314B:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
314C:  MOVLB  0D
314D:  MOVF   22,W
314E:  MOVWF  53
314F:  MOVLW  01
3150:  MOVWF  54
3151:  MOVWF  56
3152:  CLRF   55
3153:  MOVLP  08
3154:  MOVLB  00
3155:  CALL   245
3156:  MOVLP  30
3157:  MOVLB  0D
3158:  MOVF   22,W
3159:  MOVWF  53
315A:  CLRF   54
315B:  CLRF   56
315C:  MOVLW  80
315D:  MOVWF  55
315E:  MOVLP  08
315F:  MOVLB  00
3160:  CALL   245
3161:  MOVLP  30
3162:  MOVLB  0D
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
3163:  CLRF   35
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
3164:  MOVF   23,W
3165:  MOVWF  50
3166:  MOVF   22,W
3167:  MOVWF  4F
3168:  MOVF   21,W
3169:  MOVWF  4E
316A:  MOVF   20,W
316B:  MOVWF  4D
316C:  MOVLP  08
316D:  MOVLB  00
316E:  CALL   5DD
316F:  MOVLP  30
3170:  MOVF   78,W
3171:  ANDLW  01
3172:  SUBLW  01
3173:  BTFSS  03.2
3174:  GOTO   192
....................       if(timeout_counter > 10)
3175:  MOVLB  0D
3176:  MOVF   35,W
3177:  SUBLW  0A
3178:  BTFSC  03.0
3179:  GOTO   182
....................          delay_ms(200);
317A:  MOVLW  C8
317B:  MOVWF  4D
317C:  MOVLP  08
317D:  MOVLB  00
317E:  CALL   623
317F:  MOVLP  30
3180:  GOTO   188
3181:  MOVLB  0D
....................       else
....................          delay_ms(10);   
3182:  MOVLW  0A
3183:  MOVWF  4D
3184:  MOVLP  08
3185:  MOVLB  00
3186:  CALL   623
3187:  MOVLP  30
....................       
....................       if(timeout_counter > 100){
3188:  MOVLB  0D
3189:  MOVF   35,W
318A:  SUBLW  64
318B:  BTFSC  03.0
318C:  GOTO   190
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
318D:  MOVLB  00
318E:  GOTO   192
318F:  MOVLB  0D
....................       }  
....................       timeout_counter++;
3190:  INCF   35,F
3191:  GOTO   164
3192:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
3193:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0E39:  MOVLB  0D
0E3A:  MOVF   35,F
0E3B:  BTFSS  03.2
0E3C:  GOTO   6CC
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
0E3D:  MOVLW  06
0E3E:  MOVWF  40
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
0E3F:  MOVLW  02
0E40:  MOVWF  41
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0E41:  CLRF   50
0E42:  CLRF   51
0E43:  CLRF   78
0E44:  CLRF   79
0E45:  CLRF   7A
0E46:  MOVF   3A,W
0E47:  MOVWF  42
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0E48:  CLRF   51
0E49:  CLRF   78
0E4A:  CLRF   79
0E4B:  CLRF   7A
0E4C:  MOVF   39,W
0E4D:  MOVWF  43
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
0E4E:  CLRF   78
0E4F:  CLRF   79
0E50:  CLRF   7A
0E51:  MOVF   38,W
0E52:  MOVWF  44
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0E53:  MOVF   36,W
0E54:  MOVWF  53
0E55:  CLRF   54
0E56:  MOVLW  01
0E57:  MOVWF  56
0E58:  CLRF   55
0E59:  MOVLB  00
0E5A:  CALL   245
0E5B:  MOVLB  0D
0E5C:  MOVF   36,W
0E5D:  MOVWF  53
0E5E:  CLRF   54
0E5F:  CLRF   56
0E60:  MOVLW  80
0E61:  MOVWF  55
0E62:  MOVLB  00
0E63:  CALL   245
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0E64:  MOVLB  0D
0E65:  MOVF   37,W
0E66:  MOVWF  50
0E67:  MOVF   36,W
0E68:  MOVWF  4F
0E69:  MOVF   35,W
0E6A:  MOVWF  4E
0E6B:  MOVF   34,W
0E6C:  MOVWF  4D
0E6D:  MOVLW  24
0E6E:  MOVWF  52
0E6F:  MOVLW  30
0E70:  MOVWF  51
0E71:  CLRF   54
0E72:  MOVLW  01
0E73:  MOVWF  53
0E74:  MOVLB  00
0E75:  CALL   4E1
....................       output_high(flash_stream.cs_pin);
0E76:  MOVLB  0D
0E77:  MOVF   36,W
0E78:  MOVWF  53
0E79:  MOVLW  01
0E7A:  MOVWF  54
0E7B:  MOVWF  56
0E7C:  CLRF   55
0E7D:  MOVLB  00
0E7E:  CALL   245
0E7F:  MOVLB  0D
0E80:  MOVF   36,W
0E81:  MOVWF  53
0E82:  CLRF   54
0E83:  CLRF   56
0E84:  MOVLW  80
0E85:  MOVWF  55
0E86:  MOVLB  00
0E87:  CALL   245
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
0E88:  MOVLB  0D
0E89:  MOVF   36,W
0E8A:  MOVWF  53
0E8B:  CLRF   54
0E8C:  MOVLW  01
0E8D:  MOVWF  56
0E8E:  CLRF   55
0E8F:  MOVLB  00
0E90:  CALL   245
0E91:  MOVLB  0D
0E92:  MOVF   36,W
0E93:  MOVWF  53
0E94:  CLRF   54
0E95:  CLRF   56
0E96:  MOVLW  80
0E97:  MOVWF  55
0E98:  MOVLB  00
0E99:  CALL   245
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
0E9A:  MOVLB  0D
0E9B:  MOVF   37,W
0E9C:  MOVWF  50
0E9D:  MOVF   36,W
0E9E:  MOVWF  4F
0E9F:  MOVF   35,W
0EA0:  MOVWF  4E
0EA1:  MOVF   34,W
0EA2:  MOVWF  4D
0EA3:  MOVLW  24
0EA4:  MOVWF  52
0EA5:  MOVLW  31
0EA6:  MOVWF  51
0EA7:  MOVLW  04
0EA8:  MOVWF  53
0EA9:  MOVF   3D,W
0EAA:  MOVWF  55
0EAB:  MOVF   3C,W
0EAC:  MOVWF  54
0EAD:  MOVF   3F,W
0EAE:  MOVWF  57
0EAF:  MOVF   3E,W
0EB0:  MOVWF  56
0EB1:  MOVLB  00
0EB2:  CALL   541
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0EB3:  MOVLW  02
0EB4:  MOVWF  77
0EB5:  DECFSZ 77,F
0EB6:  GOTO   6B5
0EB7:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0EB8:  MOVLB  0D
0EB9:  MOVF   36,W
0EBA:  MOVWF  53
0EBB:  MOVLW  01
0EBC:  MOVWF  54
0EBD:  MOVWF  56
0EBE:  CLRF   55
0EBF:  MOVLB  00
0EC0:  CALL   245
0EC1:  MOVLB  0D
0EC2:  MOVF   36,W
0EC3:  MOVWF  53
0EC4:  CLRF   54
0EC5:  CLRF   56
0EC6:  MOVLW  80
0EC7:  MOVWF  55
0EC8:  MOVLB  00
0EC9:  CALL   245
....................    }
0ECA:  GOTO   763
0ECB:  MOVLB  0D
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0ECC:  DECFSZ 35,W
0ECD:  GOTO   764
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
0ECE:  MOVLW  06
0ECF:  MOVWF  45
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
0ED0:  MOVLW  12
0ED1:  MOVWF  46
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0ED2:  CLRF   4F
0ED3:  CLRF   50
0ED4:  CLRF   51
0ED5:  CLRF   78
0ED6:  CLRF   79
0ED7:  CLRF   7A
0ED8:  MOVF   3B,W
0ED9:  MOVWF  47
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0EDA:  CLRF   50
0EDB:  CLRF   51
0EDC:  CLRF   78
0EDD:  CLRF   79
0EDE:  CLRF   7A
0EDF:  MOVF   3A,W
0EE0:  MOVWF  48
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0EE1:  CLRF   51
0EE2:  CLRF   78
0EE3:  CLRF   79
0EE4:  CLRF   7A
0EE5:  MOVF   39,W
0EE6:  MOVWF  49
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
0EE7:  CLRF   78
0EE8:  CLRF   79
0EE9:  CLRF   7A
0EEA:  MOVF   38,W
0EEB:  MOVWF  4A
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
0EEC:  MOVF   36,W
0EED:  MOVWF  53
0EEE:  CLRF   54
0EEF:  MOVLW  01
0EF0:  MOVWF  56
0EF1:  CLRF   55
0EF2:  MOVLB  00
0EF3:  CALL   245
0EF4:  MOVLB  0D
0EF5:  MOVF   36,W
0EF6:  MOVWF  53
0EF7:  CLRF   54
0EF8:  CLRF   56
0EF9:  MOVLW  80
0EFA:  MOVWF  55
0EFB:  MOVLB  00
0EFC:  CALL   245
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0EFD:  MOVLB  0D
0EFE:  MOVF   37,W
0EFF:  MOVWF  50
0F00:  MOVF   36,W
0F01:  MOVWF  4F
0F02:  MOVF   35,W
0F03:  MOVWF  4E
0F04:  MOVF   34,W
0F05:  MOVWF  4D
0F06:  MOVLW  24
0F07:  MOVWF  52
0F08:  MOVLW  35
0F09:  MOVWF  51
0F0A:  CLRF   54
0F0B:  MOVLW  01
0F0C:  MOVWF  53
0F0D:  MOVLB  00
0F0E:  CALL   4E1
....................       output_high(flash_stream.cs_pin);
0F0F:  MOVLB  0D
0F10:  MOVF   36,W
0F11:  MOVWF  53
0F12:  MOVLW  01
0F13:  MOVWF  54
0F14:  MOVWF  56
0F15:  CLRF   55
0F16:  MOVLB  00
0F17:  CALL   245
0F18:  MOVLB  0D
0F19:  MOVF   36,W
0F1A:  MOVWF  53
0F1B:  CLRF   54
0F1C:  CLRF   56
0F1D:  MOVLW  80
0F1E:  MOVWF  55
0F1F:  MOVLB  00
0F20:  CALL   245
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
0F21:  MOVLB  0D
0F22:  MOVF   36,W
0F23:  MOVWF  53
0F24:  CLRF   54
0F25:  MOVLW  01
0F26:  MOVWF  56
0F27:  CLRF   55
0F28:  MOVLB  00
0F29:  CALL   245
0F2A:  MOVLB  0D
0F2B:  MOVF   36,W
0F2C:  MOVWF  53
0F2D:  CLRF   54
0F2E:  CLRF   56
0F2F:  MOVLW  80
0F30:  MOVWF  55
0F31:  MOVLB  00
0F32:  CALL   245
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
0F33:  MOVLB  0D
0F34:  MOVF   37,W
0F35:  MOVWF  50
0F36:  MOVF   36,W
0F37:  MOVWF  4F
0F38:  MOVF   35,W
0F39:  MOVWF  4E
0F3A:  MOVF   34,W
0F3B:  MOVWF  4D
0F3C:  MOVLW  24
0F3D:  MOVWF  52
0F3E:  MOVLW  36
0F3F:  MOVWF  51
0F40:  MOVLW  05
0F41:  MOVWF  53
0F42:  MOVF   3D,W
0F43:  MOVWF  55
0F44:  MOVF   3C,W
0F45:  MOVWF  54
0F46:  MOVF   3F,W
0F47:  MOVWF  57
0F48:  MOVF   3E,W
0F49:  MOVWF  56
0F4A:  MOVLB  00
0F4B:  CALL   541
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0F4C:  MOVLW  02
0F4D:  MOVWF  77
0F4E:  DECFSZ 77,F
0F4F:  GOTO   74E
0F50:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0F51:  MOVLB  0D
0F52:  MOVF   36,W
0F53:  MOVWF  53
0F54:  MOVLW  01
0F55:  MOVWF  54
0F56:  MOVWF  56
0F57:  CLRF   55
0F58:  MOVLB  00
0F59:  CALL   245
0F5A:  MOVLB  0D
0F5B:  MOVF   36,W
0F5C:  MOVWF  53
0F5D:  CLRF   54
0F5E:  CLRF   56
0F5F:  MOVLW  80
0F60:  MOVWF  55
0F61:  MOVLB  00
0F62:  CALL   245
0F63:  MOVLB  0D
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
0F64:  CLRF   4B
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
0F65:  MOVF   37,W
0F66:  MOVWF  50
0F67:  MOVF   36,W
0F68:  MOVWF  4F
0F69:  MOVF   35,W
0F6A:  MOVWF  4E
0F6B:  MOVF   34,W
0F6C:  MOVWF  4D
0F6D:  MOVLB  00
0F6E:  CALL   5DD
0F6F:  MOVF   78,W
0F70:  ANDLW  01
0F71:  SUBLW  01
0F72:  BTFSS  03.2
0F73:  GOTO   78D
....................       if(timeout_counter > 10)
0F74:  MOVLB  0D
0F75:  MOVF   4B,W
0F76:  SUBLW  0A
0F77:  BTFSC  03.0
0F78:  GOTO   77F
....................          delay_ms(200);
0F79:  MOVLW  C8
0F7A:  MOVWF  4D
0F7B:  MOVLB  00
0F7C:  CALL   623
0F7D:  GOTO   783
0F7E:  MOVLB  0D
....................       else
....................          delay_ms(10);   
0F7F:  MOVLW  0A
0F80:  MOVWF  4D
0F81:  MOVLB  00
0F82:  CALL   623
....................       
....................       if(timeout_counter > 100){
0F83:  MOVLB  0D
0F84:  MOVF   4B,W
0F85:  SUBLW  64
0F86:  BTFSC  03.0
0F87:  GOTO   78B
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
0F88:  MOVLB  00
0F89:  GOTO   78D
0F8A:  MOVLB  0D
....................       }  
....................       timeout_counter++;
0F8B:  INCF   4B,F
0F8C:  GOTO   765
0F8D:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
0F8E:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0B53:  MOVLW  9F
0B54:  MOVLB  0D
0B55:  MOVWF  3C
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0B56:  MOVF   36,W
0B57:  MOVWF  53
0B58:  CLRF   54
0B59:  MOVLW  01
0B5A:  MOVWF  56
0B5B:  CLRF   55
0B5C:  MOVLB  00
0B5D:  CALL   245
0B5E:  MOVLB  0D
0B5F:  MOVF   36,W
0B60:  MOVWF  53
0B61:  CLRF   54
0B62:  CLRF   56
0B63:  MOVLW  80
0B64:  MOVWF  55
0B65:  MOVLB  00
0B66:  CALL   245
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0B67:  MOVLB  0D
0B68:  MOVF   37,W
0B69:  MOVWF  56
0B6A:  MOVF   36,W
0B6B:  MOVWF  55
0B6C:  MOVF   35,W
0B6D:  MOVWF  54
0B6E:  MOVF   34,W
0B6F:  MOVWF  53
0B70:  MOVLW  24
0B71:  MOVWF  58
0B72:  MOVLW  2C
0B73:  MOVWF  57
0B74:  CLRF   5A
0B75:  MOVLW  01
0B76:  MOVWF  59
0B77:  MOVLW  24
0B78:  MOVWF  5C
0B79:  MOVLW  28
0B7A:  MOVWF  5B
0B7B:  CLRF   60
0B7C:  CLRF   5F
0B7D:  CLRF   5E
0B7E:  MOVLW  04
0B7F:  MOVWF  5D
0B80:  MOVLB  00
0B81:  CALL   281
....................    output_high(flash_stream.cs_pin);
0B82:  MOVLB  0D
0B83:  MOVF   36,W
0B84:  MOVWF  53
0B85:  MOVLW  01
0B86:  MOVWF  54
0B87:  MOVWF  56
0B88:  CLRF   55
0B89:  MOVLB  00
0B8A:  CALL   245
0B8B:  MOVLB  0D
0B8C:  MOVF   36,W
0B8D:  MOVWF  53
0B8E:  CLRF   54
0B8F:  CLRF   56
0B90:  MOVLW  80
0B91:  MOVWF  55
0B92:  MOVLB  00
0B93:  CALL   245
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0B94:  MOVLB  0D
0B95:  MOVF   38,W
0B96:  SUBLW  20
0B97:  BTFSS  03.2
0B98:  GOTO   39D
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0B99:  MOVLW  01
0B9A:  MOVWF  78
0B9B:  GOTO   39F
....................    }
0B9C:  GOTO   39F
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0B9D:  MOVLW  00
0B9E:  MOVWF  78
....................    }
0B9F:  MOVLB  00
0BA0:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
1000:  MOVLW  93
1001:  MOVLB  03
1002:  MOVWF  11
1003:  MOVLW  00
1004:  MOVWF  12
1005:  MOVLP  08
1006:  MOVLB  00
1007:  CALL   119
1008:  MOVLP  10
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
1009:  MOVLB  01
100A:  BCF    0F.3
100B:  MOVLB  02
100C:  BSF    0F.3
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
100D:  MOVLB  01
100E:  BCF    0F.1
100F:  MOVLB  02
1010:  BSF    0F.1
....................     
.................... 
.................... 
....................     if (!is_connect(mis_fm)) {
1011:  MOVLB  08
1012:  MOVF   5D,W
1013:  MOVLB  0D
1014:  MOVWF  37
1015:  MOVLB  08
1016:  MOVF   5C,W
1017:  MOVLB  0D
1018:  MOVWF  36
1019:  MOVLB  08
101A:  MOVF   5B,W
101B:  MOVLB  0D
101C:  MOVWF  35
101D:  MOVLB  08
101E:  MOVF   5A,W
101F:  MOVLB  0D
1020:  MOVWF  34
1021:  MOVLP  08
1022:  MOVLB  00
1023:  CALL   353
1024:  MOVLP  10
1025:  MOVF   78,F
1026:  BTFSS  03.2
1027:  GOTO   033
....................         fprintf(PC, "\tFlash is not connected\r\n");
1028:  MOVLW  A1
1029:  MOVLB  03
102A:  MOVWF  11
102B:  MOVLW  00
102C:  MOVWF  12
102D:  MOVLP  08
102E:  MOVLB  00
102F:  CALL   119
1030:  MOVLP  10
....................         return;
1031:  GOTO   49D
....................     }else {
1032:  GOTO   033
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     unsigned int8 readdata[PACKET_SIZE];
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
1033:  MOVLB  08
1034:  MOVF   5D,W
1035:  MOVLB  0C
1036:  MOVWF  69
1037:  MOVLB  08
1038:  MOVF   5C,W
1039:  MOVLB  0C
103A:  MOVWF  68
103B:  MOVLB  08
103C:  MOVF   5B,W
103D:  MOVLB  0C
103E:  MOVWF  67
103F:  MOVLB  08
1040:  MOVF   5A,W
1041:  MOVLB  0C
1042:  MOVWF  66
1043:  CLRF   6D
1044:  CLRF   6C
1045:  CLRF   6B
1046:  CLRF   6A
1047:  MOVLW  23
1048:  MOVWF  6F
1049:  MOVLW  B7
104A:  MOVWF  6E
104B:  MOVLB  0D
104C:  CLRF   23
104D:  CLRF   22
104E:  CLRF   21
104F:  MOVLW  40
1050:  MOVWF  20
1051:  MOVLP  08
1052:  MOVLB  00
1053:  CALL   3A1
1054:  MOVLP  10
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = ((unsigned int32)readdata[0] << 24) | ((unsigned int32)readdata[1] << 16) | ((unsigned int32)readdata[2] << 8) | ((unsigned int32)readdata[3]);
1055:  MOVLB  0C
1056:  CLRF   5D
1057:  CLRF   5C
1058:  CLRF   5B
1059:  MOVLB  0B
105A:  MOVF   67,W
105B:  MOVLB  0C
105C:  MOVWF  5A
105D:  MOVWF  5D
105E:  CLRF   5A
105F:  CLRF   5B
1060:  CLRF   5C
1061:  CLRF   62
1062:  CLRF   61
1063:  CLRF   60
1064:  MOVLB  0B
1065:  MOVF   68,W
1066:  MOVLB  0C
1067:  MOVWF  5F
1068:  MOVF   60,W
1069:  MOVWF  7A
106A:  MOVF   5F,W
106B:  MOVWF  79
106C:  CLRF   77
106D:  CLRF   78
106E:  MOVF   77,W
106F:  IORWF  5A,F
1070:  MOVF   78,W
1071:  IORWF  5B,F
1072:  MOVF   5F,W
1073:  IORWF  5C,F
1074:  MOVF   60,W
1075:  IORWF  5D,F
1076:  CLRF   62
1077:  CLRF   61
1078:  CLRF   60
1079:  MOVLB  0B
107A:  MOVF   69,W
107B:  MOVLB  0C
107C:  MOVWF  5F
107D:  MOVF   61,W
107E:  MOVWF  7A
107F:  MOVF   60,W
1080:  MOVWF  79
1081:  MOVF   5F,W
1082:  MOVWF  78
1083:  CLRF   77
1084:  MOVF   77,W
1085:  IORWF  5A,F
1086:  MOVF   5F,W
1087:  IORWF  5B,F
1088:  MOVF   60,W
1089:  IORWF  5C,F
108A:  MOVF   61,W
108B:  IORWF  5D,F
108C:  MOVLB  0B
108D:  CLRF   78
108E:  CLRF   79
108F:  CLRF   7A
1090:  MOVF   6A,W
1091:  MOVLB  0C
1092:  IORWF  5A,W
1093:  MOVLB  08
1094:  MOVWF  42
1095:  MOVF   78,W
1096:  MOVLB  0C
1097:  IORWF  5B,W
1098:  MOVLB  08
1099:  MOVWF  43
109A:  MOVF   79,W
109B:  MOVLB  0C
109C:  IORWF  5C,W
109D:  MOVLB  08
109E:  MOVWF  44
109F:  MOVF   7A,W
10A0:  MOVLB  0C
10A1:  IORWF  5D,W
10A2:  MOVLB  08
10A3:  MOVWF  45
....................     smf_piclog_loop_counter = readdata[4];
10A4:  MOVLB  0B
10A5:  MOVF   6B,W
10A6:  MOVWF  71
....................     smf_meas_use_counter = ((unsigned int32)readdata[5] << 24) |((unsigned int32)readdata[6] << 16) |((unsigned int32)readdata[7] << 8) | ((unsigned int32)readdata[8]);
10A7:  MOVLB  0C
10A8:  CLRF   5D
10A9:  CLRF   5C
10AA:  CLRF   5B
10AB:  MOVLB  0B
10AC:  MOVF   6C,W
10AD:  MOVLB  0C
10AE:  MOVWF  5A
10AF:  MOVWF  5D
10B0:  CLRF   5A
10B1:  CLRF   5B
10B2:  CLRF   5C
10B3:  CLRF   62
10B4:  CLRF   61
10B5:  CLRF   60
10B6:  MOVLB  0B
10B7:  MOVF   6D,W
10B8:  MOVLB  0C
10B9:  MOVWF  5F
10BA:  MOVF   60,W
10BB:  MOVWF  7A
10BC:  MOVF   5F,W
10BD:  MOVWF  79
10BE:  CLRF   77
10BF:  CLRF   78
10C0:  MOVF   77,W
10C1:  IORWF  5A,F
10C2:  MOVF   78,W
10C3:  IORWF  5B,F
10C4:  MOVF   5F,W
10C5:  IORWF  5C,F
10C6:  MOVF   60,W
10C7:  IORWF  5D,F
10C8:  CLRF   62
10C9:  CLRF   61
10CA:  CLRF   60
10CB:  MOVLB  0B
10CC:  MOVF   6E,W
10CD:  MOVLB  0C
10CE:  MOVWF  5F
10CF:  MOVF   61,W
10D0:  MOVWF  7A
10D1:  MOVF   60,W
10D2:  MOVWF  79
10D3:  MOVF   5F,W
10D4:  MOVWF  78
10D5:  CLRF   77
10D6:  MOVF   77,W
10D7:  IORWF  5A,F
10D8:  MOVF   5F,W
10D9:  IORWF  5B,F
10DA:  MOVF   60,W
10DB:  IORWF  5C,F
10DC:  MOVF   61,W
10DD:  IORWF  5D,F
10DE:  MOVLB  0B
10DF:  CLRF   78
10E0:  CLRF   79
10E1:  CLRF   7A
10E2:  MOVF   6F,W
10E3:  MOVLB  0C
10E4:  IORWF  5A,W
10E5:  MOVLB  08
10E6:  MOVWF  46
10E7:  MOVF   78,W
10E8:  MOVLB  0C
10E9:  IORWF  5B,W
10EA:  MOVLB  08
10EB:  MOVWF  47
10EC:  MOVF   79,W
10ED:  MOVLB  0C
10EE:  IORWF  5C,W
10EF:  MOVLB  08
10F0:  MOVWF  48
10F1:  MOVF   7A,W
10F2:  MOVLB  0C
10F3:  IORWF  5D,W
10F4:  MOVLB  08
10F5:  MOVWF  49
....................     smf_meas_loop_counter = readdata[9];
10F6:  MOVLB  0C
10F7:  MOVF   20,W
10F8:  MOVWF  72
.................... 
....................     misf_piclog_use_counter = ((unsigned int32)readdata[10] << 24) |((unsigned int32)readdata[11] << 16) |((unsigned int32)readdata[12] << 8) | ((unsigned int32)readdata[13]);
10F9:  CLRF   5D
10FA:  CLRF   5C
10FB:  CLRF   5B
10FC:  MOVF   21,W
10FD:  MOVWF  5A
10FE:  MOVWF  5D
10FF:  CLRF   5A
1100:  CLRF   5B
1101:  CLRF   5C
1102:  CLRF   62
1103:  CLRF   61
1104:  CLRF   60
1105:  MOVF   22,W
1106:  MOVWF  5F
1107:  MOVF   60,W
1108:  MOVWF  7A
1109:  MOVF   5F,W
110A:  MOVWF  79
110B:  CLRF   77
110C:  CLRF   78
110D:  MOVF   77,W
110E:  IORWF  5A,F
110F:  MOVF   78,W
1110:  IORWF  5B,F
1111:  MOVF   5F,W
1112:  IORWF  5C,F
1113:  MOVF   60,W
1114:  IORWF  5D,F
1115:  CLRF   62
1116:  CLRF   61
1117:  CLRF   60
1118:  MOVF   23,W
1119:  MOVWF  5F
111A:  MOVF   61,W
111B:  MOVWF  7A
111C:  MOVF   60,W
111D:  MOVWF  79
111E:  MOVF   5F,W
111F:  MOVWF  78
1120:  CLRF   77
1121:  MOVF   77,W
1122:  IORWF  5A,F
1123:  MOVF   5F,W
1124:  IORWF  5B,F
1125:  MOVF   60,W
1126:  IORWF  5C,F
1127:  MOVF   61,W
1128:  IORWF  5D,F
1129:  CLRF   78
112A:  CLRF   79
112B:  CLRF   7A
112C:  MOVF   24,W
112D:  IORWF  5A,W
112E:  MOVLB  08
112F:  MOVWF  4A
1130:  MOVF   78,W
1131:  MOVLB  0C
1132:  IORWF  5B,W
1133:  MOVLB  08
1134:  MOVWF  4B
1135:  MOVF   79,W
1136:  MOVLB  0C
1137:  IORWF  5C,W
1138:  MOVLB  08
1139:  MOVWF  4C
113A:  MOVF   7A,W
113B:  MOVLB  0C
113C:  IORWF  5D,W
113D:  MOVLB  08
113E:  MOVWF  4D
....................     misf_piclog_loop_counter = readdata[14];
113F:  MOVLB  0C
1140:  MOVF   25,W
1141:  MOVWF  73
....................     misf_piclog_uncopyed_counter = ((unsigned int32)readdata[15] << 24) |((unsigned int32)readdata[16] << 16) |((unsigned int32)readdata[17] << 8) | ((unsigned int32)readdata[18]);
1142:  CLRF   5D
1143:  CLRF   5C
1144:  CLRF   5B
1145:  MOVF   26,W
1146:  MOVWF  5A
1147:  MOVWF  5D
1148:  CLRF   5A
1149:  CLRF   5B
114A:  CLRF   5C
114B:  CLRF   62
114C:  CLRF   61
114D:  CLRF   60
114E:  MOVF   27,W
114F:  MOVWF  5F
1150:  MOVF   60,W
1151:  MOVWF  7A
1152:  MOVF   5F,W
1153:  MOVWF  79
1154:  CLRF   77
1155:  CLRF   78
1156:  MOVF   77,W
1157:  IORWF  5A,F
1158:  MOVF   78,W
1159:  IORWF  5B,F
115A:  MOVF   5F,W
115B:  IORWF  5C,F
115C:  MOVF   60,W
115D:  IORWF  5D,F
115E:  CLRF   62
115F:  CLRF   61
1160:  CLRF   60
1161:  MOVF   28,W
1162:  MOVWF  5F
1163:  MOVF   61,W
1164:  MOVWF  7A
1165:  MOVF   60,W
1166:  MOVWF  79
1167:  MOVF   5F,W
1168:  MOVWF  78
1169:  CLRF   77
116A:  MOVF   77,W
116B:  IORWF  5A,F
116C:  MOVF   5F,W
116D:  IORWF  5B,F
116E:  MOVF   60,W
116F:  IORWF  5C,F
1170:  MOVF   61,W
1171:  IORWF  5D,F
1172:  CLRF   78
1173:  CLRF   79
1174:  CLRF   7A
1175:  MOVF   29,W
1176:  IORWF  5A,W
1177:  MOVLB  08
1178:  MOVWF  4E
1179:  MOVF   78,W
117A:  MOVLB  0C
117B:  IORWF  5B,W
117C:  MOVLB  08
117D:  MOVWF  4F
117E:  MOVF   79,W
117F:  MOVLB  0C
1180:  IORWF  5C,W
1181:  MOVLB  08
1182:  MOVWF  50
1183:  MOVF   7A,W
1184:  MOVLB  0C
1185:  IORWF  5D,W
1186:  MOVLB  08
1187:  MOVWF  51
....................     misf_piclog_write_counter = ((unsigned int32)readdata[19] << 24) |((unsigned int32)readdata[20] << 16) |((unsigned int32)readdata[21] << 8) | ((unsigned int32)readdata[22]);
1188:  MOVLB  0C
1189:  CLRF   5D
118A:  CLRF   5C
118B:  CLRF   5B
118C:  MOVF   2A,W
118D:  MOVWF  5A
118E:  MOVWF  5D
118F:  CLRF   5A
1190:  CLRF   5B
1191:  CLRF   5C
1192:  CLRF   62
1193:  CLRF   61
1194:  CLRF   60
1195:  MOVF   2B,W
1196:  MOVWF  5F
1197:  MOVF   60,W
1198:  MOVWF  7A
1199:  MOVF   5F,W
119A:  MOVWF  79
119B:  CLRF   77
119C:  CLRF   78
119D:  MOVF   77,W
119E:  IORWF  5A,F
119F:  MOVF   78,W
11A0:  IORWF  5B,F
11A1:  MOVF   5F,W
11A2:  IORWF  5C,F
11A3:  MOVF   60,W
11A4:  IORWF  5D,F
11A5:  CLRF   62
11A6:  CLRF   61
11A7:  CLRF   60
11A8:  MOVF   2C,W
11A9:  MOVWF  5F
11AA:  MOVF   61,W
11AB:  MOVWF  7A
11AC:  MOVF   60,W
11AD:  MOVWF  79
11AE:  MOVF   5F,W
11AF:  MOVWF  78
11B0:  CLRF   77
11B1:  MOVF   77,W
11B2:  IORWF  5A,F
11B3:  MOVF   5F,W
11B4:  IORWF  5B,F
11B5:  MOVF   60,W
11B6:  IORWF  5C,F
11B7:  MOVF   61,W
11B8:  IORWF  5D,F
11B9:  CLRF   78
11BA:  CLRF   79
11BB:  CLRF   7A
11BC:  MOVF   2D,W
11BD:  IORWF  5A,W
11BE:  MOVWF  74
....................     misf_meas_use_counter = ((unsigned int32)readdata[23] << 24) |((unsigned int32)readdata[24] << 16) |((unsigned int32)readdata[25] << 8) | ((unsigned int32)readdata[26]);
11BF:  CLRF   5D
11C0:  CLRF   5C
11C1:  CLRF   5B
11C2:  MOVF   2E,W
11C3:  MOVWF  5A
11C4:  MOVWF  5D
11C5:  CLRF   5A
11C6:  CLRF   5B
11C7:  CLRF   5C
11C8:  CLRF   62
11C9:  CLRF   61
11CA:  CLRF   60
11CB:  MOVF   2F,W
11CC:  MOVWF  5F
11CD:  MOVF   60,W
11CE:  MOVWF  7A
11CF:  MOVF   5F,W
11D0:  MOVWF  79
11D1:  CLRF   77
11D2:  CLRF   78
11D3:  MOVF   77,W
11D4:  IORWF  5A,F
11D5:  MOVF   78,W
11D6:  IORWF  5B,F
11D7:  MOVF   5F,W
11D8:  IORWF  5C,F
11D9:  MOVF   60,W
11DA:  IORWF  5D,F
11DB:  CLRF   62
11DC:  CLRF   61
11DD:  CLRF   60
11DE:  MOVF   30,W
11DF:  MOVWF  5F
11E0:  MOVF   61,W
11E1:  MOVWF  7A
11E2:  MOVF   60,W
11E3:  MOVWF  79
11E4:  MOVF   5F,W
11E5:  MOVWF  78
11E6:  CLRF   77
11E7:  MOVF   77,W
11E8:  IORWF  5A,F
11E9:  MOVF   5F,W
11EA:  IORWF  5B,F
11EB:  MOVF   60,W
11EC:  IORWF  5C,F
11ED:  MOVF   61,W
11EE:  IORWF  5D,F
11EF:  CLRF   78
11F0:  CLRF   79
11F1:  CLRF   7A
11F2:  MOVF   31,W
11F3:  IORWF  5A,W
11F4:  MOVLB  08
11F5:  MOVWF  52
11F6:  MOVF   78,W
11F7:  MOVLB  0C
11F8:  IORWF  5B,W
11F9:  MOVLB  08
11FA:  MOVWF  53
11FB:  MOVF   79,W
11FC:  MOVLB  0C
11FD:  IORWF  5C,W
11FE:  MOVLB  08
11FF:  MOVWF  54
1200:  MOVF   7A,W
1201:  MOVLB  0C
1202:  IORWF  5D,W
1203:  MOVLB  08
1204:  MOVWF  55
....................     misf_meas_loop_counter = readdata[27];
1205:  MOVLB  0C
1206:  MOVF   32,W
1207:  MOVWF  75
....................     misf_meas_uncopyed_counter = ((unsigned int32)readdata[28] << 24) |((unsigned int32)readdata[29] << 16) |((unsigned int32)readdata[30] << 8) | ((unsigned int32)readdata[31]);
1208:  CLRF   5D
1209:  CLRF   5C
120A:  CLRF   5B
120B:  MOVF   33,W
120C:  MOVWF  5A
120D:  MOVWF  5D
120E:  CLRF   5A
120F:  CLRF   5B
1210:  CLRF   5C
1211:  CLRF   62
1212:  CLRF   61
1213:  CLRF   60
1214:  MOVF   34,W
1215:  MOVWF  5F
1216:  MOVF   60,W
1217:  MOVWF  7A
1218:  MOVF   5F,W
1219:  MOVWF  79
121A:  CLRF   77
121B:  CLRF   78
121C:  MOVF   77,W
121D:  IORWF  5A,F
121E:  MOVF   78,W
121F:  IORWF  5B,F
1220:  MOVF   5F,W
1221:  IORWF  5C,F
1222:  MOVF   60,W
1223:  IORWF  5D,F
1224:  CLRF   62
1225:  CLRF   61
1226:  CLRF   60
1227:  MOVF   35,W
1228:  MOVWF  5F
1229:  MOVF   61,W
122A:  MOVWF  7A
122B:  MOVF   60,W
122C:  MOVWF  79
122D:  MOVF   5F,W
122E:  MOVWF  78
122F:  CLRF   77
1230:  MOVF   77,W
1231:  IORWF  5A,F
1232:  MOVF   5F,W
1233:  IORWF  5B,F
1234:  MOVF   60,W
1235:  IORWF  5C,F
1236:  MOVF   61,W
1237:  IORWF  5D,F
1238:  CLRF   78
1239:  CLRF   79
123A:  CLRF   7A
123B:  MOVF   36,W
123C:  IORWF  5A,W
123D:  MOVLB  08
123E:  MOVWF  56
123F:  MOVF   78,W
1240:  MOVLB  0C
1241:  IORWF  5B,W
1242:  MOVLB  08
1243:  MOVWF  57
1244:  MOVF   79,W
1245:  MOVLB  0C
1246:  IORWF  5C,W
1247:  MOVLB  08
1248:  MOVWF  58
1249:  MOVF   7A,W
124A:  MOVLB  0C
124B:  IORWF  5D,W
124C:  MOVLB  08
124D:  MOVWF  59
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
124E:  MOVLW  AE
124F:  MOVLB  03
1250:  MOVWF  11
1251:  MOVLW  00
1252:  MOVWF  12
1253:  BCF    03.0
1254:  MOVLW  22
1255:  MOVLB  0C
1256:  MOVWF  6A
1257:  MOVLP  08
1258:  MOVLB  00
1259:  CALL   167
125A:  MOVLP  10
125B:  MOVLB  08
125C:  MOVF   45,W
125D:  MOVLB  0C
125E:  MOVWF  6A
125F:  MOVLW  37
1260:  MOVWF  6B
1261:  MOVLP  08
1262:  MOVLB  00
1263:  CALL   4BA
1264:  MOVLP  10
1265:  MOVLB  08
1266:  MOVF   44,W
1267:  MOVLB  0C
1268:  MOVWF  6A
1269:  MOVLW  37
126A:  MOVWF  6B
126B:  MOVLP  08
126C:  MOVLB  00
126D:  CALL   4BA
126E:  MOVLP  10
126F:  MOVLB  08
1270:  MOVF   43,W
1271:  MOVLB  0C
1272:  MOVWF  6A
1273:  MOVLW  37
1274:  MOVWF  6B
1275:  MOVLP  08
1276:  MOVLB  00
1277:  CALL   4BA
1278:  MOVLP  10
1279:  MOVLB  08
127A:  MOVF   42,W
127B:  MOVLB  0C
127C:  MOVWF  6A
127D:  MOVLW  37
127E:  MOVWF  6B
127F:  MOVLP  08
1280:  MOVLB  00
1281:  CALL   4BA
1282:  MOVLP  10
1283:  MOVLW  0D
1284:  MOVLB  0D
1285:  MOVWF  37
1286:  MOVLP  08
1287:  MOVLB  00
1288:  CALL   0F4
1289:  MOVLP  10
128A:  MOVLW  0A
128B:  MOVLB  0D
128C:  MOVWF  37
128D:  MOVLP  08
128E:  MOVLB  00
128F:  CALL   0F4
1290:  MOVLP  10
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
1291:  MOVLW  C3
1292:  MOVLB  03
1293:  MOVWF  11
1294:  MOVLW  00
1295:  MOVWF  12
1296:  BCF    03.0
1297:  MOVLW  22
1298:  MOVLB  0C
1299:  MOVWF  6A
129A:  MOVLP  08
129B:  MOVLB  00
129C:  CALL   167
129D:  MOVLP  10
129E:  MOVF   71,W
129F:  MOVLB  0C
12A0:  MOVWF  6A
12A1:  MOVLW  37
12A2:  MOVWF  6B
12A3:  MOVLP  08
12A4:  MOVLB  00
12A5:  CALL   4BA
12A6:  MOVLP  10
12A7:  MOVLW  0D
12A8:  MOVLB  0D
12A9:  MOVWF  37
12AA:  MOVLP  08
12AB:  MOVLB  00
12AC:  CALL   0F4
12AD:  MOVLP  10
12AE:  MOVLW  0A
12AF:  MOVLB  0D
12B0:  MOVWF  37
12B1:  MOVLP  08
12B2:  MOVLB  00
12B3:  CALL   0F4
12B4:  MOVLP  10
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
12B5:  MOVLW  D8
12B6:  MOVLB  03
12B7:  MOVWF  11
12B8:  MOVLW  00
12B9:  MOVWF  12
12BA:  BCF    03.0
12BB:  MOVLW  22
12BC:  MOVLB  0C
12BD:  MOVWF  6A
12BE:  MOVLP  08
12BF:  MOVLB  00
12C0:  CALL   167
12C1:  MOVLP  10
12C2:  MOVLB  08
12C3:  MOVF   49,W
12C4:  MOVLB  0C
12C5:  MOVWF  6A
12C6:  MOVLW  37
12C7:  MOVWF  6B
12C8:  MOVLP  08
12C9:  MOVLB  00
12CA:  CALL   4BA
12CB:  MOVLP  10
12CC:  MOVLB  08
12CD:  MOVF   48,W
12CE:  MOVLB  0C
12CF:  MOVWF  6A
12D0:  MOVLW  37
12D1:  MOVWF  6B
12D2:  MOVLP  08
12D3:  MOVLB  00
12D4:  CALL   4BA
12D5:  MOVLP  10
12D6:  MOVLB  08
12D7:  MOVF   47,W
12D8:  MOVLB  0C
12D9:  MOVWF  6A
12DA:  MOVLW  37
12DB:  MOVWF  6B
12DC:  MOVLP  08
12DD:  MOVLB  00
12DE:  CALL   4BA
12DF:  MOVLP  10
12E0:  MOVLB  08
12E1:  MOVF   46,W
12E2:  MOVLB  0C
12E3:  MOVWF  6A
12E4:  MOVLW  37
12E5:  MOVWF  6B
12E6:  MOVLP  08
12E7:  MOVLB  00
12E8:  CALL   4BA
12E9:  MOVLP  10
12EA:  MOVLW  0D
12EB:  MOVLB  0D
12EC:  MOVWF  37
12ED:  MOVLP  08
12EE:  MOVLB  00
12EF:  CALL   0F4
12F0:  MOVLP  10
12F1:  MOVLW  0A
12F2:  MOVLB  0D
12F3:  MOVWF  37
12F4:  MOVLP  08
12F5:  MOVLB  00
12F6:  CALL   0F4
12F7:  MOVLP  10
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
12F8:  MOVLW  ED
12F9:  MOVLB  03
12FA:  MOVWF  11
12FB:  MOVLW  00
12FC:  MOVWF  12
12FD:  BCF    03.0
12FE:  MOVLW  22
12FF:  MOVLB  0C
1300:  MOVWF  6A
1301:  MOVLP  08
1302:  MOVLB  00
1303:  CALL   167
1304:  MOVLP  10
1305:  MOVF   72,W
1306:  MOVLB  0C
1307:  MOVWF  6A
1308:  MOVLW  37
1309:  MOVWF  6B
130A:  MOVLP  08
130B:  MOVLB  00
130C:  CALL   4BA
130D:  MOVLP  10
130E:  MOVLW  0D
130F:  MOVLB  0D
1310:  MOVWF  37
1311:  MOVLP  08
1312:  MOVLB  00
1313:  CALL   0F4
1314:  MOVLP  10
1315:  MOVLW  0A
1316:  MOVLB  0D
1317:  MOVWF  37
1318:  MOVLP  08
1319:  MOVLB  00
131A:  CALL   0F4
131B:  MOVLP  10
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
131C:  MOVLW  02
131D:  MOVLB  03
131E:  MOVWF  11
131F:  MOVLW  01
1320:  MOVWF  12
1321:  BCF    03.0
1322:  MOVLW  22
1323:  MOVLB  0C
1324:  MOVWF  6A
1325:  MOVLP  08
1326:  MOVLB  00
1327:  CALL   167
1328:  MOVLP  10
1329:  MOVLB  08
132A:  MOVF   4D,W
132B:  MOVLB  0C
132C:  MOVWF  6A
132D:  MOVLW  37
132E:  MOVWF  6B
132F:  MOVLP  08
1330:  MOVLB  00
1331:  CALL   4BA
1332:  MOVLP  10
1333:  MOVLB  08
1334:  MOVF   4C,W
1335:  MOVLB  0C
1336:  MOVWF  6A
1337:  MOVLW  37
1338:  MOVWF  6B
1339:  MOVLP  08
133A:  MOVLB  00
133B:  CALL   4BA
133C:  MOVLP  10
133D:  MOVLB  08
133E:  MOVF   4B,W
133F:  MOVLB  0C
1340:  MOVWF  6A
1341:  MOVLW  37
1342:  MOVWF  6B
1343:  MOVLP  08
1344:  MOVLB  00
1345:  CALL   4BA
1346:  MOVLP  10
1347:  MOVLB  08
1348:  MOVF   4A,W
1349:  MOVLB  0C
134A:  MOVWF  6A
134B:  MOVLW  37
134C:  MOVWF  6B
134D:  MOVLP  08
134E:  MOVLB  00
134F:  CALL   4BA
1350:  MOVLP  10
1351:  MOVLW  0D
1352:  MOVLB  0D
1353:  MOVWF  37
1354:  MOVLP  08
1355:  MOVLB  00
1356:  CALL   0F4
1357:  MOVLP  10
1358:  MOVLW  0A
1359:  MOVLB  0D
135A:  MOVWF  37
135B:  MOVLP  08
135C:  MOVLB  00
135D:  CALL   0F4
135E:  MOVLP  10
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
135F:  MOVLW  17
1360:  MOVLB  03
1361:  MOVWF  11
1362:  MOVLW  01
1363:  MOVWF  12
1364:  BCF    03.0
1365:  MOVLW  22
1366:  MOVLB  0C
1367:  MOVWF  6A
1368:  MOVLP  08
1369:  MOVLB  00
136A:  CALL   167
136B:  MOVLP  10
136C:  MOVLB  08
136D:  MOVF   51,W
136E:  MOVLB  0C
136F:  MOVWF  6A
1370:  MOVLW  37
1371:  MOVWF  6B
1372:  MOVLP  08
1373:  MOVLB  00
1374:  CALL   4BA
1375:  MOVLP  10
1376:  MOVLB  08
1377:  MOVF   50,W
1378:  MOVLB  0C
1379:  MOVWF  6A
137A:  MOVLW  37
137B:  MOVWF  6B
137C:  MOVLP  08
137D:  MOVLB  00
137E:  CALL   4BA
137F:  MOVLP  10
1380:  MOVLB  08
1381:  MOVF   4F,W
1382:  MOVLB  0C
1383:  MOVWF  6A
1384:  MOVLW  37
1385:  MOVWF  6B
1386:  MOVLP  08
1387:  MOVLB  00
1388:  CALL   4BA
1389:  MOVLP  10
138A:  MOVLB  08
138B:  MOVF   4E,W
138C:  MOVLB  0C
138D:  MOVWF  6A
138E:  MOVLW  37
138F:  MOVWF  6B
1390:  MOVLP  08
1391:  MOVLB  00
1392:  CALL   4BA
1393:  MOVLP  10
1394:  MOVLW  0D
1395:  MOVLB  0D
1396:  MOVWF  37
1397:  MOVLP  08
1398:  MOVLB  00
1399:  CALL   0F4
139A:  MOVLP  10
139B:  MOVLW  0A
139C:  MOVLB  0D
139D:  MOVWF  37
139E:  MOVLP  08
139F:  MOVLB  00
13A0:  CALL   0F4
13A1:  MOVLP  10
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
13A2:  MOVLW  2C
13A3:  MOVLB  03
13A4:  MOVWF  11
13A5:  MOVLW  01
13A6:  MOVWF  12
13A7:  BCF    03.0
13A8:  MOVLW  22
13A9:  MOVLB  0C
13AA:  MOVWF  6A
13AB:  MOVLP  08
13AC:  MOVLB  00
13AD:  CALL   167
13AE:  MOVLP  10
13AF:  MOVF   73,W
13B0:  MOVLB  0C
13B1:  MOVWF  6A
13B2:  MOVLW  37
13B3:  MOVWF  6B
13B4:  MOVLP  08
13B5:  MOVLB  00
13B6:  CALL   4BA
13B7:  MOVLP  10
13B8:  MOVLW  0D
13B9:  MOVLB  0D
13BA:  MOVWF  37
13BB:  MOVLP  08
13BC:  MOVLB  00
13BD:  CALL   0F4
13BE:  MOVLP  10
13BF:  MOVLW  0A
13C0:  MOVLB  0D
13C1:  MOVWF  37
13C2:  MOVLP  08
13C3:  MOVLB  00
13C4:  CALL   0F4
13C5:  MOVLP  10
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
13C6:  MOVLW  41
13C7:  MOVLB  03
13C8:  MOVWF  11
13C9:  MOVLW  01
13CA:  MOVWF  12
13CB:  BCF    03.0
13CC:  MOVLW  22
13CD:  MOVLB  0C
13CE:  MOVWF  6A
13CF:  MOVLP  08
13D0:  MOVLB  00
13D1:  CALL   167
13D2:  MOVLP  10
13D3:  MOVF   74,W
13D4:  MOVLB  0C
13D5:  MOVWF  6A
13D6:  MOVLW  37
13D7:  MOVWF  6B
13D8:  MOVLP  08
13D9:  MOVLB  00
13DA:  CALL   4BA
13DB:  MOVLP  10
13DC:  MOVLW  0D
13DD:  MOVLB  0D
13DE:  MOVWF  37
13DF:  MOVLP  08
13E0:  MOVLB  00
13E1:  CALL   0F4
13E2:  MOVLP  10
13E3:  MOVLW  0A
13E4:  MOVLB  0D
13E5:  MOVWF  37
13E6:  MOVLP  08
13E7:  MOVLB  00
13E8:  CALL   0F4
13E9:  MOVLP  10
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
13EA:  MOVLW  56
13EB:  MOVLB  03
13EC:  MOVWF  11
13ED:  MOVLW  01
13EE:  MOVWF  12
13EF:  BCF    03.0
13F0:  MOVLW  22
13F1:  MOVLB  0C
13F2:  MOVWF  6A
13F3:  MOVLP  08
13F4:  MOVLB  00
13F5:  CALL   167
13F6:  MOVLP  10
13F7:  MOVLB  08
13F8:  MOVF   55,W
13F9:  MOVLB  0C
13FA:  MOVWF  6A
13FB:  MOVLW  37
13FC:  MOVWF  6B
13FD:  MOVLP  08
13FE:  MOVLB  00
13FF:  CALL   4BA
1400:  MOVLP  10
1401:  MOVLB  08
1402:  MOVF   54,W
1403:  MOVLB  0C
1404:  MOVWF  6A
1405:  MOVLW  37
1406:  MOVWF  6B
1407:  MOVLP  08
1408:  MOVLB  00
1409:  CALL   4BA
140A:  MOVLP  10
140B:  MOVLB  08
140C:  MOVF   53,W
140D:  MOVLB  0C
140E:  MOVWF  6A
140F:  MOVLW  37
1410:  MOVWF  6B
1411:  MOVLP  08
1412:  MOVLB  00
1413:  CALL   4BA
1414:  MOVLP  10
1415:  MOVLB  08
1416:  MOVF   52,W
1417:  MOVLB  0C
1418:  MOVWF  6A
1419:  MOVLW  37
141A:  MOVWF  6B
141B:  MOVLP  08
141C:  MOVLB  00
141D:  CALL   4BA
141E:  MOVLP  10
141F:  MOVLW  0D
1420:  MOVLB  0D
1421:  MOVWF  37
1422:  MOVLP  08
1423:  MOVLB  00
1424:  CALL   0F4
1425:  MOVLP  10
1426:  MOVLW  0A
1427:  MOVLB  0D
1428:  MOVWF  37
1429:  MOVLP  08
142A:  MOVLB  00
142B:  CALL   0F4
142C:  MOVLP  10
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);
142D:  MOVLW  6B
142E:  MOVLB  03
142F:  MOVWF  11
1430:  MOVLW  01
1431:  MOVWF  12
1432:  BCF    03.0
1433:  MOVLW  22
1434:  MOVLB  0C
1435:  MOVWF  6A
1436:  MOVLP  08
1437:  MOVLB  00
1438:  CALL   167
1439:  MOVLP  10
143A:  MOVLB  08
143B:  MOVF   59,W
143C:  MOVLB  0C
143D:  MOVWF  6A
143E:  MOVLW  37
143F:  MOVWF  6B
1440:  MOVLP  08
1441:  MOVLB  00
1442:  CALL   4BA
1443:  MOVLP  10
1444:  MOVLB  08
1445:  MOVF   58,W
1446:  MOVLB  0C
1447:  MOVWF  6A
1448:  MOVLW  37
1449:  MOVWF  6B
144A:  MOVLP  08
144B:  MOVLB  00
144C:  CALL   4BA
144D:  MOVLP  10
144E:  MOVLB  08
144F:  MOVF   57,W
1450:  MOVLB  0C
1451:  MOVWF  6A
1452:  MOVLW  37
1453:  MOVWF  6B
1454:  MOVLP  08
1455:  MOVLB  00
1456:  CALL   4BA
1457:  MOVLP  10
1458:  MOVLB  08
1459:  MOVF   56,W
145A:  MOVLB  0C
145B:  MOVWF  6A
145C:  MOVLW  37
145D:  MOVWF  6B
145E:  MOVLP  08
145F:  MOVLB  00
1460:  CALL   4BA
1461:  MOVLP  10
1462:  MOVLW  0D
1463:  MOVLB  0D
1464:  MOVWF  37
1465:  MOVLP  08
1466:  MOVLB  00
1467:  CALL   0F4
1468:  MOVLP  10
1469:  MOVLW  0A
146A:  MOVLB  0D
146B:  MOVWF  37
146C:  MOVLP  08
146D:  MOVLB  00
146E:  CALL   0F4
146F:  MOVLP  10
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
1470:  MOVLW  80
1471:  MOVLB  03
1472:  MOVWF  11
1473:  MOVLW  01
1474:  MOVWF  12
1475:  BCF    03.0
1476:  MOVLW  22
1477:  MOVLB  0C
1478:  MOVWF  6A
1479:  MOVLP  08
147A:  MOVLB  00
147B:  CALL   167
147C:  MOVLP  10
147D:  MOVF   75,W
147E:  MOVLB  0C
147F:  MOVWF  6A
1480:  MOVLW  37
1481:  MOVWF  6B
1482:  MOVLP  08
1483:  MOVLB  00
1484:  CALL   4BA
1485:  MOVLP  10
1486:  MOVLW  0D
1487:  MOVLB  0D
1488:  MOVWF  37
1489:  MOVLP  08
148A:  MOVLB  00
148B:  CALL   0F4
148C:  MOVLP  10
148D:  MOVLW  0A
148E:  MOVLB  0D
148F:  MOVWF  37
1490:  MOVLP  08
1491:  MOVLB  00
1492:  CALL   0F4
1493:  MOVLP  10
....................     fprintf(PC, "\tComplete\r\n");
1494:  MOVLW  95
1495:  MOVLB  03
1496:  MOVWF  11
1497:  MOVLW  01
1498:  MOVWF  12
1499:  MOVLP  08
149A:  MOVLB  00
149B:  CALL   119
149C:  MOVLP  10
149D:  RETURN
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
1620:  MOVLB  0C
1621:  CLRF   43
1622:  CLRF   44
1623:  CLRF   45
1624:  CLRF   46
1625:  CLRF   47
1626:  CLRF   48
1627:  CLRF   49
1628:  CLRF   4A
1629:  CLRF   4B
162A:  CLRF   4C
162B:  CLRF   4D
162C:  CLRF   4E
162D:  CLRF   4F
162E:  CLRF   50
162F:  CLRF   51
1630:  CLRF   52
1631:  CLRF   53
1632:  CLRF   54
1633:  CLRF   55
1634:  CLRF   56
1635:  CLRF   57
1636:  CLRF   58
1637:  CLRF   59
1638:  CLRF   5A
1639:  CLRF   5B
163A:  CLRF   5C
163B:  CLRF   5D
163C:  CLRF   5E
163D:  CLRF   5F
163E:  CLRF   60
163F:  CLRF   61
1640:  CLRF   62
1641:  CLRF   63
1642:  CLRF   64
1643:  CLRF   65
1644:  CLRF   66
1645:  CLRF   67
1646:  CLRF   68
1647:  CLRF   69
1648:  CLRF   6A
1649:  CLRF   6B
164A:  CLRF   6C
164B:  CLRF   6D
164C:  CLRF   6E
164D:  CLRF   6F
164E:  MOVLB  0D
164F:  CLRF   20
1650:  CLRF   21
1651:  CLRF   22
1652:  CLRF   23
1653:  CLRF   24
1654:  CLRF   25
1655:  CLRF   26
1656:  CLRF   27
1657:  CLRF   28
1658:  CLRF   29
1659:  CLRF   2A
165A:  CLRF   2B
165B:  CLRF   2C
165C:  CLRF   2D
165D:  CLRF   2E
165E:  CLRF   2F
165F:  CLRF   30
1660:  CLRF   31
1661:  CLRF   32
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
1662:  MOVLB  08
1663:  MOVF   45,W
1664:  MOVLB  0D
1665:  MOVWF  35
1666:  CLRF   36
1667:  CLRF   37
1668:  CLRF   38
1669:  MOVF   35,W
166A:  MOVLB  0C
166B:  MOVWF  43
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
166C:  MOVLB  08
166D:  MOVF   44,W
166E:  MOVLB  0D
166F:  MOVWF  35
1670:  MOVLB  08
1671:  MOVF   45,W
1672:  MOVLB  0D
1673:  MOVWF  36
1674:  CLRF   37
1675:  CLRF   38
1676:  MOVF   35,W
1677:  MOVLB  0C
1678:  MOVWF  44
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
1679:  MOVLB  08
167A:  MOVF   43,W
167B:  MOVLB  0D
167C:  MOVWF  35
167D:  MOVLB  08
167E:  MOVF   44,W
167F:  MOVLB  0D
1680:  MOVWF  36
1681:  MOVLB  08
1682:  MOVF   45,W
1683:  MOVLB  0D
1684:  MOVWF  37
1685:  CLRF   38
1686:  MOVF   35,W
1687:  MOVLB  0C
1688:  MOVWF  45
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
1689:  MOVLB  08
168A:  MOVF   42,W
168B:  MOVLB  0C
168C:  MOVWF  46
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
168D:  MOVF   71,W
168E:  MOVWF  47
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
168F:  MOVLB  08
1690:  MOVF   49,W
1691:  MOVLB  0D
1692:  MOVWF  35
1693:  CLRF   36
1694:  CLRF   37
1695:  CLRF   38
1696:  MOVF   35,W
1697:  MOVLB  0C
1698:  MOVWF  48
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
1699:  MOVLB  08
169A:  MOVF   48,W
169B:  MOVLB  0D
169C:  MOVWF  35
169D:  MOVLB  08
169E:  MOVF   49,W
169F:  MOVLB  0D
16A0:  MOVWF  36
16A1:  CLRF   37
16A2:  CLRF   38
16A3:  MOVF   35,W
16A4:  MOVLB  0C
16A5:  MOVWF  49
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
16A6:  MOVLB  08
16A7:  MOVF   47,W
16A8:  MOVLB  0D
16A9:  MOVWF  35
16AA:  MOVLB  08
16AB:  MOVF   48,W
16AC:  MOVLB  0D
16AD:  MOVWF  36
16AE:  MOVLB  08
16AF:  MOVF   49,W
16B0:  MOVLB  0D
16B1:  MOVWF  37
16B2:  CLRF   38
16B3:  MOVF   35,W
16B4:  MOVLB  0C
16B5:  MOVWF  4A
....................     writedata[8] = smf_meas_use_counter & 0xFF;
16B6:  MOVLB  08
16B7:  MOVF   46,W
16B8:  MOVLB  0C
16B9:  MOVWF  4B
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
16BA:  MOVF   72,W
16BB:  MOVWF  4C
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
16BC:  MOVLB  08
16BD:  MOVF   4D,W
16BE:  MOVLB  0D
16BF:  MOVWF  35
16C0:  CLRF   36
16C1:  CLRF   37
16C2:  CLRF   38
16C3:  MOVF   35,W
16C4:  MOVLB  0C
16C5:  MOVWF  4D
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
16C6:  MOVLB  08
16C7:  MOVF   4C,W
16C8:  MOVLB  0D
16C9:  MOVWF  35
16CA:  MOVLB  08
16CB:  MOVF   4D,W
16CC:  MOVLB  0D
16CD:  MOVWF  36
16CE:  CLRF   37
16CF:  CLRF   38
16D0:  MOVF   35,W
16D1:  MOVLB  0C
16D2:  MOVWF  4E
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
16D3:  MOVLB  08
16D4:  MOVF   4B,W
16D5:  MOVLB  0D
16D6:  MOVWF  35
16D7:  MOVLB  08
16D8:  MOVF   4C,W
16D9:  MOVLB  0D
16DA:  MOVWF  36
16DB:  MOVLB  08
16DC:  MOVF   4D,W
16DD:  MOVLB  0D
16DE:  MOVWF  37
16DF:  CLRF   38
16E0:  MOVF   35,W
16E1:  MOVLB  0C
16E2:  MOVWF  4F
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
16E3:  MOVLB  08
16E4:  MOVF   4A,W
16E5:  MOVLB  0C
16E6:  MOVWF  50
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
16E7:  MOVF   73,W
16E8:  MOVWF  51
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
16E9:  MOVLB  08
16EA:  MOVF   51,W
16EB:  MOVLB  0D
16EC:  MOVWF  35
16ED:  CLRF   36
16EE:  CLRF   37
16EF:  CLRF   38
16F0:  MOVF   35,W
16F1:  MOVLB  0C
16F2:  MOVWF  52
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
16F3:  MOVLB  08
16F4:  MOVF   50,W
16F5:  MOVLB  0D
16F6:  MOVWF  35
16F7:  MOVLB  08
16F8:  MOVF   51,W
16F9:  MOVLB  0D
16FA:  MOVWF  36
16FB:  CLRF   37
16FC:  CLRF   38
16FD:  MOVF   35,W
16FE:  MOVLB  0C
16FF:  MOVWF  53
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
1700:  MOVLB  08
1701:  MOVF   4F,W
1702:  MOVLB  0D
1703:  MOVWF  35
1704:  MOVLB  08
1705:  MOVF   50,W
1706:  MOVLB  0D
1707:  MOVWF  36
1708:  MOVLB  08
1709:  MOVF   51,W
170A:  MOVLB  0D
170B:  MOVWF  37
170C:  CLRF   38
170D:  MOVF   35,W
170E:  MOVLB  0C
170F:  MOVWF  54
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
1710:  MOVLB  08
1711:  MOVF   4E,W
1712:  MOVLB  0C
1713:  MOVWF  55
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
1714:  MOVLW  00
1715:  MOVWF  56
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
1716:  MOVWF  57
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
1717:  MOVWF  58
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
1718:  MOVF   74,W
1719:  MOVWF  59
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
171A:  MOVLB  08
171B:  MOVF   55,W
171C:  MOVLB  0D
171D:  MOVWF  35
171E:  CLRF   36
171F:  CLRF   37
1720:  CLRF   38
1721:  MOVF   35,W
1722:  MOVLB  0C
1723:  MOVWF  5A
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
1724:  MOVLB  08
1725:  MOVF   54,W
1726:  MOVLB  0D
1727:  MOVWF  35
1728:  MOVLB  08
1729:  MOVF   55,W
172A:  MOVLB  0D
172B:  MOVWF  36
172C:  CLRF   37
172D:  CLRF   38
172E:  MOVF   35,W
172F:  MOVLB  0C
1730:  MOVWF  5B
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
1731:  MOVLB  08
1732:  MOVF   53,W
1733:  MOVLB  0D
1734:  MOVWF  35
1735:  MOVLB  08
1736:  MOVF   54,W
1737:  MOVLB  0D
1738:  MOVWF  36
1739:  MOVLB  08
173A:  MOVF   55,W
173B:  MOVLB  0D
173C:  MOVWF  37
173D:  CLRF   38
173E:  MOVF   35,W
173F:  MOVLB  0C
1740:  MOVWF  5C
....................     writedata[26] = misf_meas_use_counter & 0xFF;
1741:  MOVLB  08
1742:  MOVF   52,W
1743:  MOVLB  0C
1744:  MOVWF  5D
....................     
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
1745:  MOVF   75,W
1746:  MOVWF  5E
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
1747:  MOVLB  08
1748:  MOVF   59,W
1749:  MOVLB  0D
174A:  MOVWF  35
174B:  CLRF   36
174C:  CLRF   37
174D:  CLRF   38
174E:  MOVF   35,W
174F:  MOVLB  0C
1750:  MOVWF  5F
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
1751:  MOVLB  08
1752:  MOVF   58,W
1753:  MOVLB  0D
1754:  MOVWF  35
1755:  MOVLB  08
1756:  MOVF   59,W
1757:  MOVLB  0D
1758:  MOVWF  36
1759:  CLRF   37
175A:  CLRF   38
175B:  MOVF   35,W
175C:  MOVLB  0C
175D:  MOVWF  60
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
175E:  MOVLB  08
175F:  MOVF   57,W
1760:  MOVLB  0D
1761:  MOVWF  35
1762:  MOVLB  08
1763:  MOVF   58,W
1764:  MOVLB  0D
1765:  MOVWF  36
1766:  MOVLB  08
1767:  MOVF   59,W
1768:  MOVLB  0D
1769:  MOVWF  37
176A:  CLRF   38
176B:  MOVF   35,W
176C:  MOVLB  0C
176D:  MOVWF  61
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
176E:  MOVLB  08
176F:  MOVF   56,W
1770:  MOVLB  0C
1771:  MOVWF  62
.................... 
....................     if (!is_connect(mis_fm)) {
1772:  MOVLB  08
1773:  MOVF   5D,W
1774:  MOVLB  0D
1775:  MOVWF  37
1776:  MOVLB  08
1777:  MOVF   5C,W
1778:  MOVLB  0D
1779:  MOVWF  36
177A:  MOVLB  08
177B:  MOVF   5B,W
177C:  MOVLB  0D
177D:  MOVWF  35
177E:  MOVLB  08
177F:  MOVF   5A,W
1780:  MOVLB  0D
1781:  MOVWF  34
1782:  MOVLP  08
1783:  MOVLB  00
1784:  CALL   353
1785:  MOVLP  10
1786:  MOVF   78,F
1787:  BTFSS  03.2
1788:  GOTO   793
....................         fprintf(PC, "Mission Flash is not connected\r\n");
1789:  MOVLW  9B
178A:  MOVLB  03
178B:  MOVWF  11
178C:  MOVLW  01
178D:  MOVWF  12
178E:  MOVLP  08
178F:  MOVLB  00
1790:  CALL   119
1791:  MOVLP  10
....................         return;
1792:  GOTO   7D1
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
1793:  MOVLB  08
1794:  MOVF   5D,W
1795:  MOVLB  0D
1796:  MOVWF  37
1797:  MOVLB  08
1798:  MOVF   5C,W
1799:  MOVLB  0D
179A:  MOVWF  36
179B:  MOVLB  08
179C:  MOVF   5B,W
179D:  MOVLB  0D
179E:  MOVWF  35
179F:  MOVLB  08
17A0:  MOVF   5A,W
17A1:  MOVLB  0D
17A2:  MOVWF  34
17A3:  CLRF   3B
17A4:  CLRF   3A
17A5:  CLRF   39
17A6:  CLRF   38
17A7:  MOVLB  00
17A8:  CALL   49E
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
17A9:  MOVLB  08
17AA:  MOVF   5D,W
17AB:  MOVLB  0D
17AC:  MOVWF  37
17AD:  MOVLB  08
17AE:  MOVF   5C,W
17AF:  MOVLB  0D
17B0:  MOVWF  36
17B1:  MOVLB  08
17B2:  MOVF   5B,W
17B3:  MOVLB  0D
17B4:  MOVWF  35
17B5:  MOVLB  08
17B6:  MOVF   5A,W
17B7:  MOVLB  0D
17B8:  MOVWF  34
17B9:  CLRF   3B
17BA:  CLRF   3A
17BB:  CLRF   39
17BC:  CLRF   38
17BD:  MOVLW  23
17BE:  MOVWF  3D
17BF:  MOVLW  E3
17C0:  MOVWF  3C
17C1:  CLRF   3F
17C2:  MOVLW  40
17C3:  MOVWF  3E
17C4:  MOVLP  08
17C5:  MOVLB  00
17C6:  CALL   639
17C7:  MOVLP  10
....................     fprintf(PC, "Write MISF Address Area Complete\r\n");
17C8:  MOVLW  AC
17C9:  MOVLB  03
17CA:  MOVWF  11
17CB:  MOVLW  01
17CC:  MOVWF  12
17CD:  MOVLP  08
17CE:  MOVLB  00
17CF:  CALL   119
17D0:  MOVLP  10
17D1:  RETURN
.................... 
....................     
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
1808:  MOVF   7A,W
1809:  MOVLB  0C
180A:  MOVWF  3B
180B:  MOVF   79,W
180C:  MOVWF  3A
180D:  MOVF   78,W
180E:  MOVWF  39
180F:  MOVF   77,W
1810:  MOVWF  38
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
1811:  MOVF   3B,W
1812:  MOVWF  44
1813:  CLRF   45
1814:  CLRF   46
1815:  CLRF   47
1816:  MOVF   44,W
1817:  MOVWF  32
....................     piclog[1] = (time >> 16) & 0xFF;
1818:  MOVF   3A,W
1819:  MOVWF  44
181A:  MOVF   3B,W
181B:  MOVWF  45
181C:  CLRF   46
181D:  CLRF   47
181E:  MOVF   44,W
181F:  MOVWF  33
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
1820:  MOVF   39,W
1821:  MOVWF  44
1822:  MOVF   3A,W
1823:  MOVWF  45
1824:  MOVF   3B,W
1825:  MOVWF  46
1826:  CLRF   47
1827:  MOVF   44,W
1828:  MOVWF  34
....................     piclog[3] = time & 0xFF;         // Time low byte
1829:  MOVF   38,W
182A:  MOVWF  35
....................     piclog[4] = function;            // Function code
182B:  MOVF   30,W
182C:  MOVWF  36
....................     piclog[5] = parameter;           // Parameter code
182D:  MOVF   31,W
182E:  MOVWF  37
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
182F:  MOVLW  BE
1830:  MOVLB  03
1831:  MOVWF  11
1832:  MOVLW  01
1833:  MOVWF  12
1834:  MOVLP  08
1835:  MOVLB  00
1836:  CALL   119
1837:  MOVLP  18
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
1838:  MOVLB  0C
1839:  CLRF   3C
183A:  MOVF   3C,W
183B:  SUBLW  05
183C:  BTFSS  03.0
183D:  GOTO   058
....................             fprintf(PC, "%02X ", piclog[i]);
183E:  MOVLW  D2
183F:  ADDWF  3C,W
1840:  MOVWF  04
1841:  MOVLW  23
1842:  MOVWF  05
1843:  BTFSC  03.0
1844:  INCF   05,F
1845:  MOVF   00,W
1846:  MOVWF  43
1847:  MOVWF  6A
1848:  MOVLW  37
1849:  MOVWF  6B
184A:  MOVLP  08
184B:  MOVLB  00
184C:  CALL   4BA
184D:  MOVLP  18
184E:  MOVLW  20
184F:  MOVLB  0D
1850:  MOVWF  37
1851:  MOVLP  08
1852:  MOVLB  00
1853:  CALL   0F4
1854:  MOVLP  18
1855:  MOVLB  0C
1856:  INCF   3C,F
1857:  GOTO   03A
....................         }
....................         fprintf(PC, "\r\n");
1858:  MOVLW  0D
1859:  MOVLB  0D
185A:  MOVWF  37
185B:  MOVLP  08
185C:  MOVLB  00
185D:  CALL   0F4
185E:  MOVLP  18
185F:  MOVLW  0A
1860:  MOVLB  0D
1861:  MOVWF  37
1862:  MOVLP  08
1863:  MOVLB  00
1864:  CALL   0F4
1865:  MOVLP  18
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1866:  MOVLB  08
1867:  MOVF   4A,W
1868:  MOVLB  0C
1869:  MOVWF  3D
186A:  MOVLB  08
186B:  MOVF   4B,W
186C:  MOVLB  0C
186D:  MOVWF  3E
186E:  MOVLW  02
186F:  MOVLB  08
1870:  ADDWF  4C,W
1871:  MOVLB  0C
1872:  MOVWF  3F
1873:  MOVLW  00
1874:  MOVLB  08
1875:  ADDWFC 4D,W
1876:  MOVLB  0C
1877:  MOVWF  40
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
1878:  MOVLB  08
1879:  MOVF   5D,W
187A:  MOVLB  0D
187B:  MOVWF  37
187C:  MOVLB  08
187D:  MOVF   5C,W
187E:  MOVLB  0D
187F:  MOVWF  36
1880:  MOVLB  08
1881:  MOVF   5B,W
1882:  MOVLB  0D
1883:  MOVWF  35
1884:  MOVLB  08
1885:  MOVF   5A,W
1886:  MOVLB  0D
1887:  MOVWF  34
1888:  MOVLP  08
1889:  MOVLB  00
188A:  CALL   353
188B:  MOVLP  18
188C:  MOVF   78,F
188D:  BTFSS  03.2
188E:  GOTO   099
....................         fprintf(PC, "Mission Flash is not connected\r\n");
188F:  MOVLW  C4
1890:  MOVLB  03
1891:  MOVWF  11
1892:  MOVLW  01
1893:  MOVWF  12
1894:  MOVLP  08
1895:  MOVLB  00
1896:  CALL   119
1897:  MOVLP  18
....................         return;
1898:  GOTO   119
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
1899:  MOVLB  08
189A:  MOVF   5D,W
189B:  MOVLB  0D
189C:  MOVWF  37
189D:  MOVLB  08
189E:  MOVF   5C,W
189F:  MOVLB  0D
18A0:  MOVWF  36
18A1:  MOVLB  08
18A2:  MOVF   5B,W
18A3:  MOVLB  0D
18A4:  MOVWF  35
18A5:  MOVLB  08
18A6:  MOVF   5A,W
18A7:  MOVLB  0D
18A8:  MOVWF  34
18A9:  MOVLB  0C
18AA:  MOVF   40,W
18AB:  MOVLB  0D
18AC:  MOVWF  3B
18AD:  MOVLB  0C
18AE:  MOVF   3F,W
18AF:  MOVLB  0D
18B0:  MOVWF  3A
18B1:  MOVLB  0C
18B2:  MOVF   3E,W
18B3:  MOVLB  0D
18B4:  MOVWF  39
18B5:  MOVLB  0C
18B6:  MOVF   3D,W
18B7:  MOVLB  0D
18B8:  MOVWF  38
18B9:  MOVLW  23
18BA:  MOVWF  3D
18BB:  MOVLW  D2
18BC:  MOVWF  3C
18BD:  CLRF   3F
18BE:  MOVLW  06
18BF:  MOVWF  3E
18C0:  MOVLP  08
18C1:  MOVLB  00
18C2:  CALL   639
18C3:  MOVLP  18
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
18C4:  MOVLW  06
18C5:  MOVLB  08
18C6:  ADDWF  4A,F
18C7:  MOVLW  00
18C8:  ADDWFC 4B,F
18C9:  ADDWFC 4C,F
18CA:  ADDWFC 4D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
18CB:  MOVLW  06
18CC:  ADDWF  4E,F
18CD:  MOVLW  00
18CE:  ADDWFC 4F,F
18CF:  ADDWFC 50,F
18D0:  ADDWFC 51,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
18D1:  MOVLW  06
18D2:  ADDWF  74,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
18D3:  ADDWF  74,W
18D4:  SUBLW  3F
18D5:  BTFSC  03.0
18D6:  GOTO   115
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
18D7:  MOVF   4A,W
18D8:  MOVLB  0C
18D9:  MOVWF  3D
18DA:  MOVLB  08
18DB:  MOVF   4B,W
18DC:  MOVLB  0C
18DD:  MOVWF  3E
18DE:  MOVLW  02
18DF:  MOVLB  08
18E0:  ADDWF  4C,W
18E1:  MOVLB  0C
18E2:  MOVWF  3F
18E3:  MOVLW  00
18E4:  MOVLB  08
18E5:  ADDWFC 4D,W
18E6:  MOVLB  0C
18E7:  MOVWF  40
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
18E8:  MOVLB  08
18E9:  MOVF   5D,W
18EA:  MOVLB  0D
18EB:  MOVWF  37
18EC:  MOVLB  08
18ED:  MOVF   5C,W
18EE:  MOVLB  0D
18EF:  MOVWF  36
18F0:  MOVLB  08
18F1:  MOVF   5B,W
18F2:  MOVLB  0D
18F3:  MOVWF  35
18F4:  MOVLB  08
18F5:  MOVF   5A,W
18F6:  MOVLB  0D
18F7:  MOVWF  34
18F8:  MOVLB  0C
18F9:  MOVF   40,W
18FA:  MOVLB  0D
18FB:  MOVWF  3B
18FC:  MOVLB  0C
18FD:  MOVF   3F,W
18FE:  MOVLB  0D
18FF:  MOVWF  3A
1900:  MOVLB  0C
1901:  MOVF   3E,W
1902:  MOVLB  0D
1903:  MOVWF  39
1904:  MOVLB  0C
1905:  MOVF   3D,W
1906:  MOVLB  0D
1907:  MOVWF  38
1908:  MOVLW  22
1909:  MOVWF  3D
190A:  MOVLW  9E
190B:  MOVWF  3C
190C:  CLRF   3F
190D:  MOVLW  06
190E:  MOVWF  3E
190F:  MOVLP  08
1910:  MOVLB  00
1911:  CALL   639
1912:  MOVLP  18
....................         misf_piclog_write_counter = 0;
1913:  CLRF   74
1914:  MOVLB  08
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
1915:  MOVLP  10
1916:  MOVLB  00
1917:  CALL   620
1918:  MOVLP  18
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
1919:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... 
.................... //#define AD7490_DEBUG
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     //output_low(ADC_CS); // Set CS pin low to select the ADC
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
*
1D4D:  MOVLB  04
1D4E:  BCF    15.5
1D4F:  MOVLW  40
1D50:  MOVWF  14
1D51:  MOVLW  43
1D52:  MOVWF  12
1D53:  MOVLW  3A
1D54:  MOVWF  15
1D55:  MOVLB  0C
1D56:  MOVF   37,W
1D57:  MOVWF  3B
1D58:  MOVF   36,W
1D59:  MOVWF  3A
1D5A:  MOVLP  10
1D5B:  MOVLB  00
1D5C:  CALL   7D2
1D5D:  MOVLP  18
....................     //output_high(ADC_CS); // Set CS pin high to end communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] << %04LX\r\n", channel);
....................     #endif
....................     //output_high(ADC_CS); // Set CS pin high to end communication
....................     //delay_us(10); // Wait for the ADC to process the command
....................     //output_low(ADC_CS); // Set CS pin low to select the ADC again
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
1D5E:  MOVLB  04
1D5F:  BCF    15.5
1D60:  MOVLW  40
1D61:  MOVWF  14
1D62:  MOVLW  43
1D63:  MOVWF  12
1D64:  MOVLW  3A
1D65:  MOVWF  15
1D66:  MOVLB  0C
1D67:  CLRF   3B
1D68:  MOVLW  03
1D69:  MOVWF  3A
1D6A:  MOVLP  10
1D6B:  MOVLB  00
1D6C:  CALL   7D2
1D6D:  MOVLP  18
1D6E:  MOVF   78,W
1D6F:  MOVLB  0C
1D70:  MOVWF  39
1D71:  MOVF   77,W
1D72:  MOVWF  38
....................     //output_high(ADC_CS); // Set CS pin low to select the ADC again
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
1D73:  MOVF   38,W
1D74:  MOVWF  77
1D75:  MOVF   39,W
1D76:  ANDLW  0F
1D77:  MOVWF  7A
1D78:  MOVF   38,W
1D79:  MOVWF  78
1D7A:  MOVF   7A,W
1D7B:  MOVWF  79
1D7C:  MOVLB  00
1D7D:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
0A27:  MOVLW  D5
0A28:  MOVLB  03
0A29:  MOVWF  11
0A2A:  MOVLW  01
0A2B:  MOVWF  12
0A2C:  MOVLB  00
0A2D:  CALL   119
....................     // Set default register values
....................     reg.fields.coding = 1; // 1: Two's complement, 0: Binary
0A2E:  MOVLB  08
0A2F:  BSF    63.4
....................     reg.fields.write = 1;
0A30:  BSF    64.0
....................     reg.fields.seq = 0; 
0A31:  BCF    64.1
....................     reg.fields.range = 1;
0A32:  BSF    63.5
....................     reg.fields.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
0A33:  BCF    63.6
....................     reg.fields.shadow = 0; // 1: Shadow register, 0: Direct access
0A34:  BCF    63.7
....................     coding = 1;
0A35:  MOVLW  01
0A36:  MOVWF  76
....................     write = 1;
0A37:  MOVWF  7B
....................     seq = 0;
0A38:  CLRF   7C
....................     range = 1;
0A39:  MOVWF  7D
....................     weak_tri = 0;
0A3A:  CLRF   7E
....................     shadow = 0;
0A3B:  CLRF   62
....................     fprintf(PC, "\tComplete\r\n");
0A3C:  MOVLW  DF
0A3D:  MOVLB  03
0A3E:  MOVWF  11
0A3F:  MOVLW  01
0A40:  MOVWF  12
0A41:  MOVLB  00
0A42:  CALL   119
0A43:  MOVLP  30
0A44:  GOTO   27F (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
.................... {   
....................     //AD7490_RESISTOR reg;
....................         reg.fields.coding = 1; // 1: Two's complement, 0: Binary
*
2800:  MOVLB  08
2801:  BSF    63.4
....................     reg.fields.write = 1;
2802:  BSF    64.0
....................     reg.fields.seq = 0; 
2803:  BCF    64.1
....................     reg.fields.range = 1;
2804:  BSF    63.5
....................     reg.fields.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
2805:  BCF    63.6
....................     reg.fields.shadow = 0; // 1: Shadow register, 0: Direct access
2806:  BCF    63.7
....................     set_add(channel);
2807:  MOVLB  0B
2808:  MOVF   30,W
2809:  MOVWF  37
....................     set_pm(AD7490_PM_AUTO_STANDBY); // Set power mode to normal
*
2835:  MOVLW  03
2836:  MOVLB  0B
2837:  MOVWF  37
.................... 
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
*
2848:  MOVLB  0B
2849:  MOVF   30,W
284A:  MOVWF  37
*
2B2F:  MOVF   79,W
2B30:  MOVWF  32
2B31:  MOVF   78,W
2B32:  MOVWF  31
....................     
....................     output_low(ADC_CS); // Set CS pin low to select the ADC
2B33:  MOVLB  01
2B34:  BCF    0F.2
2B35:  MOVLB  02
2B36:  BCF    0F.2
....................     spi_xfer(ADC_STREAM, cmd); // Dummy transfer to start communication
2B37:  MOVLB  04
2B38:  BCF    15.5
2B39:  MOVLW  40
2B3A:  MOVWF  14
2B3B:  MOVLW  43
2B3C:  MOVWF  12
2B3D:  MOVLW  3A
2B3E:  MOVWF  15
2B3F:  MOVLB  0B
2B40:  MOVF   32,W
2B41:  MOVLB  0C
2B42:  MOVWF  3B
2B43:  MOVLB  0B
2B44:  MOVF   31,W
2B45:  MOVLB  0C
2B46:  MOVWF  3A
2B47:  MOVLP  10
2B48:  MOVLB  00
2B49:  CALL   7D2
2B4A:  MOVLP  28
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC, "AD7490 Read Channel: %d\r\n", channel);
....................         fprintf(PC,"\t[ADC] << %04LX\r\n", reg.value);
....................     #endif
....................     output_high(ADC_CS); // Set CS pin high to end communication
2B4B:  MOVLB  01
2B4C:  BCF    0F.2
2B4D:  MOVLB  02
2B4E:  BSF    0F.2
....................     delay_us(10); // Wait for the ADC to process the command
2B4F:  MOVLW  0D
2B50:  MOVWF  77
2B51:  DECFSZ 77,F
2B52:  GOTO   351
....................     output_low(ADC_CS); // Set CS pin low to select the ADC again
2B53:  MOVLB  01
2B54:  BCF    0F.2
2B55:  MOVLB  02
2B56:  BCF    0F.2
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
2B57:  MOVLB  04
2B58:  BCF    15.5
2B59:  MOVLW  40
2B5A:  MOVWF  14
2B5B:  MOVLW  43
2B5C:  MOVWF  12
2B5D:  MOVLW  3A
2B5E:  MOVWF  15
2B5F:  MOVLB  0C
2B60:  CLRF   3B
2B61:  MOVLW  03
2B62:  MOVWF  3A
2B63:  MOVLP  10
2B64:  MOVLB  00
2B65:  CALL   7D2
2B66:  MOVLP  28
2B67:  MOVF   78,W
2B68:  MOVLB  0B
2B69:  MOVWF  34
2B6A:  MOVF   77,W
2B6B:  MOVWF  33
....................     output_high(ADC_CS); // Set CS pin high to end communication
2B6C:  MOVLB  01
2B6D:  BCF    0F.2
2B6E:  MOVLB  02
2B6F:  BSF    0F.2
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
2B70:  MOVLB  0B
2B71:  MOVF   33,W
2B72:  MOVWF  35
2B73:  MOVF   34,W
2B74:  ANDLW  0F
2B75:  MOVWF  36
....................     //unsigned int16 readdata = 0;
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
2B76:  MOVF   35,W
2B77:  MOVWF  78
2B78:  MOVF   36,W
2B79:  MOVWF  79
2B7A:  MOVLB  00
2B7B:  RETURN
.................... }
.................... 
.................... void set_add(int8 channel)
.................... {
....................     reg.fields.add0 = (channel >> 0) & 0x1;
*
280A:  MOVF   37,W
280B:  ANDLW  01
280C:  MOVWF  78
280D:  MOVLB  08
280E:  BCF    64.5
280F:  BTFSC  78.0
2810:  BSF    64.5
....................     reg.fields.add1 = (channel >> 1) & 0x1;
2811:  BCF    03.0
2812:  MOVLB  0B
2813:  RRF    37,W
2814:  ANDLW  01
2815:  MOVWF  78
2816:  MOVLB  08
2817:  BCF    64.4
2818:  BTFSC  78.0
2819:  BSF    64.4
....................     reg.fields.add2 = (channel >> 2) & 0x1;
281A:  MOVLB  0B
281B:  RRF    37,W
281C:  MOVWF  77
281D:  RRF    77,F
281E:  MOVLW  3F
281F:  ANDWF  77,F
2820:  MOVF   77,W
2821:  ANDLW  01
2822:  MOVWF  78
2823:  MOVLB  08
2824:  BCF    64.3
2825:  BTFSC  78.0
2826:  BSF    64.3
....................     reg.fields.add3 = (channel >> 3) & 0x1;
2827:  MOVLB  0B
2828:  RRF    37,W
2829:  MOVWF  77
282A:  RRF    77,F
282B:  RRF    77,F
282C:  MOVLW  1F
282D:  ANDWF  77,F
282E:  MOVF   77,W
282F:  ANDLW  01
2830:  MOVWF  78
2831:  MOVLB  08
2832:  BCF    64.2
2833:  BTFSC  78.0
2834:  BSF    64.2
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.fields.pm0 = (powermode >> 0) & 0x1;
*
2838:  MOVF   37,W
2839:  ANDLW  01
283A:  MOVWF  78
283B:  MOVLB  08
283C:  BCF    64.7
283D:  BTFSC  78.0
283E:  BSF    64.7
....................     reg.fields.pm1 = (powermode >> 1) & 0x1;
283F:  BCF    03.0
2840:  MOVLB  0B
2841:  RRF    37,W
2842:  ANDLW  01
2843:  MOVWF  78
2844:  MOVLB  08
2845:  BCF    64.6
2846:  BTFSC  78.0
2847:  BSF    64.6
....................     
.................... }
.................... 
.................... void set_blank()
.................... {
....................     reg.fields.blank0 = 0;
....................     reg.fields.blank1 = 0;
....................     reg.fields.blank2 = 0;
....................     reg.fields.blank3 = 0;
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
*
284B:  CLRF   39
284C:  CLRF   38
.................... {
....................     unsigned int16 cmd = 0x0000;
.................... 
....................     // WRITE (Bit11)
....................     cmd |= (write & 0x01) << 11;
284D:  MOVF   7B,W
284E:  ANDLW  01
284F:  MOVLW  00
2850:  IORWF  38,F
....................     fprintf(PC, "\tWRITE : %d (%04LX)\r\n", write, cmd);
2851:  MOVLW  E5
2852:  MOVLB  03
2853:  MOVWF  11
2854:  MOVLW  01
2855:  MOVWF  12
2856:  BCF    03.0
2857:  MOVLW  09
2858:  MOVLB  0C
2859:  MOVWF  6A
285A:  MOVLP  08
285B:  MOVLB  00
285C:  CALL   167
285D:  MOVLP  28
285E:  MOVF   7B,W
285F:  MOVLB  0C
2860:  MOVWF  6A
2861:  MOVLW  18
2862:  MOVWF  6B
2863:  MOVLP  20
2864:  MOVLB  00
2865:  CALL   6B8
2866:  MOVLP  28
2867:  MOVLW  20
2868:  MOVLB  0D
2869:  MOVWF  37
286A:  MOVLP  08
286B:  MOVLB  00
286C:  CALL   0F4
286D:  MOVLP  28
286E:  MOVLW  28
286F:  MOVLB  0D
2870:  MOVWF  37
2871:  MOVLP  08
2872:  MOVLB  00
2873:  CALL   0F4
2874:  MOVLP  28
2875:  MOVLB  0B
2876:  MOVF   39,W
2877:  MOVLB  0C
2878:  MOVWF  6A
2879:  MOVLW  37
287A:  MOVWF  6B
287B:  MOVLP  08
287C:  MOVLB  00
287D:  CALL   4BA
287E:  MOVLP  28
287F:  MOVLB  0B
2880:  MOVF   38,W
2881:  MOVLB  0C
2882:  MOVWF  6A
2883:  MOVLW  37
2884:  MOVWF  6B
2885:  MOVLP  08
2886:  MOVLB  00
2887:  CALL   4BA
2888:  MOVLP  28
2889:  MOVLW  29
288A:  MOVLB  0D
288B:  MOVWF  37
288C:  MOVLP  08
288D:  MOVLB  00
288E:  CALL   0F4
288F:  MOVLP  28
2890:  MOVLW  0D
2891:  MOVLB  0D
2892:  MOVWF  37
2893:  MOVLP  08
2894:  MOVLB  00
2895:  CALL   0F4
2896:  MOVLP  28
2897:  MOVLW  0A
2898:  MOVLB  0D
2899:  MOVWF  37
289A:  MOVLP  08
289B:  MOVLB  00
289C:  CALL   0F4
289D:  MOVLP  28
.................... 
....................     // SEQ (Bit10)
....................     cmd |= (seq & 0x01) << 10;
289E:  MOVF   7C,W
289F:  ANDLW  01
28A0:  MOVLW  00
28A1:  MOVLB  0B
28A2:  IORWF  38,F
....................     fprintf(PC, "\tSEQ   : %d (%04LX)\r\n", seq, cmd);
28A3:  MOVLW  F0
28A4:  MOVLB  03
28A5:  MOVWF  11
28A6:  MOVLW  01
28A7:  MOVWF  12
28A8:  BCF    03.0
28A9:  MOVLW  09
28AA:  MOVLB  0C
28AB:  MOVWF  6A
28AC:  MOVLP  08
28AD:  MOVLB  00
28AE:  CALL   167
28AF:  MOVLP  28
28B0:  MOVF   7C,W
28B1:  MOVLB  0C
28B2:  MOVWF  6A
28B3:  MOVLW  18
28B4:  MOVWF  6B
28B5:  MOVLP  20
28B6:  MOVLB  00
28B7:  CALL   6B8
28B8:  MOVLP  28
28B9:  MOVLW  20
28BA:  MOVLB  0D
28BB:  MOVWF  37
28BC:  MOVLP  08
28BD:  MOVLB  00
28BE:  CALL   0F4
28BF:  MOVLP  28
28C0:  MOVLW  28
28C1:  MOVLB  0D
28C2:  MOVWF  37
28C3:  MOVLP  08
28C4:  MOVLB  00
28C5:  CALL   0F4
28C6:  MOVLP  28
28C7:  MOVLB  0B
28C8:  MOVF   39,W
28C9:  MOVLB  0C
28CA:  MOVWF  6A
28CB:  MOVLW  37
28CC:  MOVWF  6B
28CD:  MOVLP  08
28CE:  MOVLB  00
28CF:  CALL   4BA
28D0:  MOVLP  28
28D1:  MOVLB  0B
28D2:  MOVF   38,W
28D3:  MOVLB  0C
28D4:  MOVWF  6A
28D5:  MOVLW  37
28D6:  MOVWF  6B
28D7:  MOVLP  08
28D8:  MOVLB  00
28D9:  CALL   4BA
28DA:  MOVLP  28
28DB:  MOVLW  29
28DC:  MOVLB  0D
28DD:  MOVWF  37
28DE:  MOVLP  08
28DF:  MOVLB  00
28E0:  CALL   0F4
28E1:  MOVLP  28
28E2:  MOVLW  0D
28E3:  MOVLB  0D
28E4:  MOVWF  37
28E5:  MOVLP  08
28E6:  MOVLB  00
28E7:  CALL   0F4
28E8:  MOVLP  28
28E9:  MOVLW  0A
28EA:  MOVLB  0D
28EB:  MOVWF  37
28EC:  MOVLP  08
28ED:  MOVLB  00
28EE:  CALL   0F4
28EF:  MOVLP  28
.................... 
....................     // ADDR (Bit9-6)
....................     cmd |= (channel & 0x0F) << 6;
28F0:  MOVLB  0B
28F1:  MOVF   37,W
28F2:  ANDLW  0F
28F3:  MOVWF  77
28F4:  SWAPF  77,F
28F5:  RLF    77,F
28F6:  RLF    77,F
28F7:  MOVLW  C0
28F8:  ANDWF  77,F
28F9:  MOVF   77,W
28FA:  IORWF  38,F
....................     fprintf(PC, "\tADDR  : %d (%04LX)\r\n", channel, cmd);
28FB:  MOVLW  FB
28FC:  MOVLB  03
28FD:  MOVWF  11
28FE:  MOVLW  01
28FF:  MOVWF  12
2900:  BCF    03.0
2901:  MOVLW  09
2902:  MOVLB  0C
2903:  MOVWF  6A
2904:  MOVLP  08
2905:  MOVLB  00
2906:  CALL   167
2907:  MOVLP  28
2908:  MOVLB  0B
2909:  MOVF   37,W
290A:  MOVLB  0C
290B:  MOVWF  6A
290C:  MOVLW  18
290D:  MOVWF  6B
290E:  MOVLP  20
290F:  MOVLB  00
2910:  CALL   6B8
2911:  MOVLP  28
2912:  MOVLW  20
2913:  MOVLB  0D
2914:  MOVWF  37
2915:  MOVLP  08
2916:  MOVLB  00
2917:  CALL   0F4
2918:  MOVLP  28
2919:  MOVLW  28
291A:  MOVLB  0D
291B:  MOVWF  37
291C:  MOVLP  08
291D:  MOVLB  00
291E:  CALL   0F4
291F:  MOVLP  28
2920:  MOVLB  0B
2921:  MOVF   39,W
2922:  MOVLB  0C
2923:  MOVWF  6A
2924:  MOVLW  37
2925:  MOVWF  6B
2926:  MOVLP  08
2927:  MOVLB  00
2928:  CALL   4BA
2929:  MOVLP  28
292A:  MOVLB  0B
292B:  MOVF   38,W
292C:  MOVLB  0C
292D:  MOVWF  6A
292E:  MOVLW  37
292F:  MOVWF  6B
2930:  MOVLP  08
2931:  MOVLB  00
2932:  CALL   4BA
2933:  MOVLP  28
2934:  MOVLW  29
2935:  MOVLB  0D
2936:  MOVWF  37
2937:  MOVLP  08
2938:  MOVLB  00
2939:  CALL   0F4
293A:  MOVLP  28
293B:  MOVLW  0D
293C:  MOVLB  0D
293D:  MOVWF  37
293E:  MOVLP  08
293F:  MOVLB  00
2940:  CALL   0F4
2941:  MOVLP  28
2942:  MOVLW  0A
2943:  MOVLB  0D
2944:  MOVWF  37
2945:  MOVLP  08
2946:  MOVLB  00
2947:  CALL   0F4
2948:  MOVLP  28
.................... 
....................     // PM1/PM0 (Bit5-4)
....................     cmd |= (AD7490_PM_AUTO_STANDBY & 0x03) << 4;
2949:  MOVLW  30
294A:  MOVLB  0B
294B:  IORWF  38,F
....................     fprintf(PC, "\tPM     : %d (%04LX)\r\n", AD7490_PM_AUTO_STANDBY, cmd);
294C:  MOVLW  06
294D:  MOVLB  03
294E:  MOVWF  11
294F:  MOVLW  02
2950:  MOVWF  12
2951:  BCF    03.0
2952:  MOVLW  0A
2953:  MOVLB  0C
2954:  MOVWF  6A
2955:  MOVLP  08
2956:  MOVLB  00
2957:  CALL   167
2958:  MOVLP  28
2959:  MOVLW  03
295A:  MOVLB  0C
295B:  MOVWF  6A
295C:  MOVLW  18
295D:  MOVWF  6B
295E:  MOVLP  20
295F:  MOVLB  00
2960:  CALL   6B8
2961:  MOVLP  28
2962:  MOVLW  20
2963:  MOVLB  0D
2964:  MOVWF  37
2965:  MOVLP  08
2966:  MOVLB  00
2967:  CALL   0F4
2968:  MOVLP  28
2969:  MOVLW  28
296A:  MOVLB  0D
296B:  MOVWF  37
296C:  MOVLP  08
296D:  MOVLB  00
296E:  CALL   0F4
296F:  MOVLP  28
2970:  MOVLB  0B
2971:  MOVF   39,W
2972:  MOVLB  0C
2973:  MOVWF  6A
2974:  MOVLW  37
2975:  MOVWF  6B
2976:  MOVLP  08
2977:  MOVLB  00
2978:  CALL   4BA
2979:  MOVLP  28
297A:  MOVLB  0B
297B:  MOVF   38,W
297C:  MOVLB  0C
297D:  MOVWF  6A
297E:  MOVLW  37
297F:  MOVWF  6B
2980:  MOVLP  08
2981:  MOVLB  00
2982:  CALL   4BA
2983:  MOVLP  28
2984:  MOVLW  29
2985:  MOVLB  0D
2986:  MOVWF  37
2987:  MOVLP  08
2988:  MOVLB  00
2989:  CALL   0F4
298A:  MOVLP  28
298B:  MOVLW  0D
298C:  MOVLB  0D
298D:  MOVWF  37
298E:  MOVLP  08
298F:  MOVLB  00
2990:  CALL   0F4
2991:  MOVLP  28
2992:  MOVLW  0A
2993:  MOVLB  0D
2994:  MOVWF  37
2995:  MOVLP  08
2996:  MOVLB  00
2997:  CALL   0F4
2998:  MOVLP  28
.................... 
....................     // SHADOW (Bit3)
....................     cmd |= (shadow & 0x01) << 3;
2999:  MOVLB  08
299A:  MOVF   62,W
299B:  ANDLW  01
299C:  MOVWF  77
299D:  RLF    77,F
299E:  RLF    77,F
299F:  RLF    77,F
29A0:  MOVLW  F8
29A1:  ANDWF  77,F
29A2:  MOVF   77,W
29A3:  MOVLB  0B
29A4:  IORWF  38,F
....................     fprintf(PC, "\tSHADOW : %d (%04LX)\r\n", shadow, cmd);
29A5:  MOVLW  12
29A6:  MOVLB  03
29A7:  MOVWF  11
29A8:  MOVLW  02
29A9:  MOVWF  12
29AA:  BCF    03.0
29AB:  MOVLW  0A
29AC:  MOVLB  0C
29AD:  MOVWF  6A
29AE:  MOVLP  08
29AF:  MOVLB  00
29B0:  CALL   167
29B1:  MOVLP  28
29B2:  MOVLB  08
29B3:  MOVF   62,W
29B4:  MOVLB  0C
29B5:  MOVWF  6A
29B6:  MOVLW  18
29B7:  MOVWF  6B
29B8:  MOVLP  20
29B9:  MOVLB  00
29BA:  CALL   6B8
29BB:  MOVLP  28
29BC:  MOVLW  20
29BD:  MOVLB  0D
29BE:  MOVWF  37
29BF:  MOVLP  08
29C0:  MOVLB  00
29C1:  CALL   0F4
29C2:  MOVLP  28
29C3:  MOVLW  28
29C4:  MOVLB  0D
29C5:  MOVWF  37
29C6:  MOVLP  08
29C7:  MOVLB  00
29C8:  CALL   0F4
29C9:  MOVLP  28
29CA:  MOVLB  0B
29CB:  MOVF   39,W
29CC:  MOVLB  0C
29CD:  MOVWF  6A
29CE:  MOVLW  37
29CF:  MOVWF  6B
29D0:  MOVLP  08
29D1:  MOVLB  00
29D2:  CALL   4BA
29D3:  MOVLP  28
29D4:  MOVLB  0B
29D5:  MOVF   38,W
29D6:  MOVLB  0C
29D7:  MOVWF  6A
29D8:  MOVLW  37
29D9:  MOVWF  6B
29DA:  MOVLP  08
29DB:  MOVLB  00
29DC:  CALL   4BA
29DD:  MOVLP  28
29DE:  MOVLW  29
29DF:  MOVLB  0D
29E0:  MOVWF  37
29E1:  MOVLP  08
29E2:  MOVLB  00
29E3:  CALL   0F4
29E4:  MOVLP  28
29E5:  MOVLW  0D
29E6:  MOVLB  0D
29E7:  MOVWF  37
29E8:  MOVLP  08
29E9:  MOVLB  00
29EA:  CALL   0F4
29EB:  MOVLP  28
29EC:  MOVLW  0A
29ED:  MOVLB  0D
29EE:  MOVWF  37
29EF:  MOVLP  08
29F0:  MOVLB  00
29F1:  CALL   0F4
29F2:  MOVLP  28
.................... 
....................     // WEAK/TRI (Bit2)
....................     cmd |= (weak_tri & 0x01) << 2;
29F3:  MOVF   7E,W
29F4:  ANDLW  01
29F5:  MOVWF  77
29F6:  RLF    77,F
29F7:  RLF    77,F
29F8:  MOVLW  FC
29F9:  ANDWF  77,F
29FA:  MOVF   77,W
29FB:  MOVLB  0B
29FC:  IORWF  38,F
....................     fprintf(PC, "\tWEAK/TRI : %d (%04LX)\r\n", weak_tri, cmd);
29FD:  MOVLW  1E
29FE:  MOVLB  03
29FF:  MOVWF  11
2A00:  MOVLW  02
2A01:  MOVWF  12
2A02:  BCF    03.0
2A03:  MOVLW  0C
2A04:  MOVLB  0C
2A05:  MOVWF  6A
2A06:  MOVLP  08
2A07:  MOVLB  00
2A08:  CALL   167
2A09:  MOVLP  28
2A0A:  MOVF   7E,W
2A0B:  MOVLB  0C
2A0C:  MOVWF  6A
2A0D:  MOVLW  18
2A0E:  MOVWF  6B
2A0F:  MOVLP  20
2A10:  MOVLB  00
2A11:  CALL   6B8
2A12:  MOVLP  28
2A13:  MOVLW  20
2A14:  MOVLB  0D
2A15:  MOVWF  37
2A16:  MOVLP  08
2A17:  MOVLB  00
2A18:  CALL   0F4
2A19:  MOVLP  28
2A1A:  MOVLW  28
2A1B:  MOVLB  0D
2A1C:  MOVWF  37
2A1D:  MOVLP  08
2A1E:  MOVLB  00
2A1F:  CALL   0F4
2A20:  MOVLP  28
2A21:  MOVLB  0B
2A22:  MOVF   39,W
2A23:  MOVLB  0C
2A24:  MOVWF  6A
2A25:  MOVLW  37
2A26:  MOVWF  6B
2A27:  MOVLP  08
2A28:  MOVLB  00
2A29:  CALL   4BA
2A2A:  MOVLP  28
2A2B:  MOVLB  0B
2A2C:  MOVF   38,W
2A2D:  MOVLB  0C
2A2E:  MOVWF  6A
2A2F:  MOVLW  37
2A30:  MOVWF  6B
2A31:  MOVLP  08
2A32:  MOVLB  00
2A33:  CALL   4BA
2A34:  MOVLP  28
2A35:  MOVLW  29
2A36:  MOVLB  0D
2A37:  MOVWF  37
2A38:  MOVLP  08
2A39:  MOVLB  00
2A3A:  CALL   0F4
2A3B:  MOVLP  28
2A3C:  MOVLW  0D
2A3D:  MOVLB  0D
2A3E:  MOVWF  37
2A3F:  MOVLP  08
2A40:  MOVLB  00
2A41:  CALL   0F4
2A42:  MOVLP  28
2A43:  MOVLW  0A
2A44:  MOVLB  0D
2A45:  MOVWF  37
2A46:  MOVLP  08
2A47:  MOVLB  00
2A48:  CALL   0F4
2A49:  MOVLP  28
.................... 
....................     // RANGE (Bit1)
....................     cmd |= (range & 0x01) << 1;
2A4A:  MOVF   7D,W
2A4B:  ANDLW  01
2A4C:  MOVWF  77
2A4D:  BCF    03.0
2A4E:  RLF    77,F
2A4F:  MOVF   77,W
2A50:  MOVLB  0B
2A51:  IORWF  38,F
....................     fprintf(PC, "\tRANGE  : %d (%04LX)\r\n", range, cmd);
2A52:  MOVLW  2B
2A53:  MOVLB  03
2A54:  MOVWF  11
2A55:  MOVLW  02
2A56:  MOVWF  12
2A57:  BCF    03.0
2A58:  MOVLW  0A
2A59:  MOVLB  0C
2A5A:  MOVWF  6A
2A5B:  MOVLP  08
2A5C:  MOVLB  00
2A5D:  CALL   167
2A5E:  MOVLP  28
2A5F:  MOVF   7D,W
2A60:  MOVLB  0C
2A61:  MOVWF  6A
2A62:  MOVLW  18
2A63:  MOVWF  6B
2A64:  MOVLP  20
2A65:  MOVLB  00
2A66:  CALL   6B8
2A67:  MOVLP  28
2A68:  MOVLW  20
2A69:  MOVLB  0D
2A6A:  MOVWF  37
2A6B:  MOVLP  08
2A6C:  MOVLB  00
2A6D:  CALL   0F4
2A6E:  MOVLP  28
2A6F:  MOVLW  28
2A70:  MOVLB  0D
2A71:  MOVWF  37
2A72:  MOVLP  08
2A73:  MOVLB  00
2A74:  CALL   0F4
2A75:  MOVLP  28
2A76:  MOVLB  0B
2A77:  MOVF   39,W
2A78:  MOVLB  0C
2A79:  MOVWF  6A
2A7A:  MOVLW  37
2A7B:  MOVWF  6B
2A7C:  MOVLP  08
2A7D:  MOVLB  00
2A7E:  CALL   4BA
2A7F:  MOVLP  28
2A80:  MOVLB  0B
2A81:  MOVF   38,W
2A82:  MOVLB  0C
2A83:  MOVWF  6A
2A84:  MOVLW  37
2A85:  MOVWF  6B
2A86:  MOVLP  08
2A87:  MOVLB  00
2A88:  CALL   4BA
2A89:  MOVLP  28
2A8A:  MOVLW  29
2A8B:  MOVLB  0D
2A8C:  MOVWF  37
2A8D:  MOVLP  08
2A8E:  MOVLB  00
2A8F:  CALL   0F4
2A90:  MOVLP  28
2A91:  MOVLW  0D
2A92:  MOVLB  0D
2A93:  MOVWF  37
2A94:  MOVLP  08
2A95:  MOVLB  00
2A96:  CALL   0F4
2A97:  MOVLP  28
2A98:  MOVLW  0A
2A99:  MOVLB  0D
2A9A:  MOVWF  37
2A9B:  MOVLP  08
2A9C:  MOVLB  00
2A9D:  CALL   0F4
2A9E:  MOVLP  28
.................... 
....................     // CODING (Bit0)
....................     cmd |= (coding & 0x01) << 0;
2A9F:  MOVF   76,W
2AA0:  ANDLW  01
2AA1:  MOVLB  0B
2AA2:  IORWF  38,F
....................     fprintf(PC, "\tCODING : %d (%04LX)\r\n", coding, cmd);
2AA3:  MOVLW  37
2AA4:  MOVLB  03
2AA5:  MOVWF  11
2AA6:  MOVLW  02
2AA7:  MOVWF  12
2AA8:  BCF    03.0
2AA9:  MOVLW  0A
2AAA:  MOVLB  0C
2AAB:  MOVWF  6A
2AAC:  MOVLP  08
2AAD:  MOVLB  00
2AAE:  CALL   167
2AAF:  MOVLP  28
2AB0:  MOVF   76,W
2AB1:  MOVLB  0C
2AB2:  MOVWF  6A
2AB3:  MOVLW  18
2AB4:  MOVWF  6B
2AB5:  MOVLP  20
2AB6:  MOVLB  00
2AB7:  CALL   6B8
2AB8:  MOVLP  28
2AB9:  MOVLW  20
2ABA:  MOVLB  0D
2ABB:  MOVWF  37
2ABC:  MOVLP  08
2ABD:  MOVLB  00
2ABE:  CALL   0F4
2ABF:  MOVLP  28
2AC0:  MOVLW  28
2AC1:  MOVLB  0D
2AC2:  MOVWF  37
2AC3:  MOVLP  08
2AC4:  MOVLB  00
2AC5:  CALL   0F4
2AC6:  MOVLP  28
2AC7:  MOVLB  0B
2AC8:  MOVF   39,W
2AC9:  MOVLB  0C
2ACA:  MOVWF  6A
2ACB:  MOVLW  37
2ACC:  MOVWF  6B
2ACD:  MOVLP  08
2ACE:  MOVLB  00
2ACF:  CALL   4BA
2AD0:  MOVLP  28
2AD1:  MOVLB  0B
2AD2:  MOVF   38,W
2AD3:  MOVLB  0C
2AD4:  MOVWF  6A
2AD5:  MOVLW  37
2AD6:  MOVWF  6B
2AD7:  MOVLP  08
2AD8:  MOVLB  00
2AD9:  CALL   4BA
2ADA:  MOVLP  28
2ADB:  MOVLW  29
2ADC:  MOVLB  0D
2ADD:  MOVWF  37
2ADE:  MOVLP  08
2ADF:  MOVLB  00
2AE0:  CALL   0F4
2AE1:  MOVLP  28
2AE2:  MOVLW  0D
2AE3:  MOVLB  0D
2AE4:  MOVWF  37
2AE5:  MOVLP  08
2AE6:  MOVLB  00
2AE7:  CALL   0F4
2AE8:  MOVLP  28
2AE9:  MOVLW  0A
2AEA:  MOVLB  0D
2AEB:  MOVWF  37
2AEC:  MOVLP  08
2AED:  MOVLB  00
2AEE:  CALL   0F4
2AEF:  MOVLP  28
.................... 
....................     // コマンドを左詰め (12bit→16bit)
....................     cmd <<= 4;
2AF0:  MOVLB  0B
2AF1:  RLF    38,F
2AF2:  RLF    39,F
2AF3:  RLF    38,F
2AF4:  RLF    39,F
2AF5:  RLF    38,F
2AF6:  RLF    39,F
2AF7:  RLF    38,F
2AF8:  RLF    39,F
2AF9:  MOVLW  F0
2AFA:  ANDWF  38,F
....................     fprintf(PC, "\t[AD7490] Final Command : %04LX\r\n", cmd);
2AFB:  MOVLW  43
2AFC:  MOVLB  03
2AFD:  MOVWF  11
2AFE:  MOVLW  02
2AFF:  MOVWF  12
2B00:  BCF    03.0
2B01:  MOVLW  1A
2B02:  MOVLB  0C
2B03:  MOVWF  6A
2B04:  MOVLP  08
2B05:  MOVLB  00
2B06:  CALL   167
2B07:  MOVLP  28
2B08:  MOVLB  0B
2B09:  MOVF   39,W
2B0A:  MOVLB  0C
2B0B:  MOVWF  6A
2B0C:  MOVLW  37
2B0D:  MOVWF  6B
2B0E:  MOVLP  08
2B0F:  MOVLB  00
2B10:  CALL   4BA
2B11:  MOVLP  28
2B12:  MOVLB  0B
2B13:  MOVF   38,W
2B14:  MOVLB  0C
2B15:  MOVWF  6A
2B16:  MOVLW  37
2B17:  MOVWF  6B
2B18:  MOVLP  08
2B19:  MOVLB  00
2B1A:  CALL   4BA
2B1B:  MOVLP  28
2B1C:  MOVLW  0D
2B1D:  MOVLB  0D
2B1E:  MOVWF  37
2B1F:  MOVLP  08
2B20:  MOVLB  00
2B21:  CALL   0F4
2B22:  MOVLP  28
2B23:  MOVLW  0A
2B24:  MOVLB  0D
2B25:  MOVWF  37
2B26:  MOVLP  08
2B27:  MOVLB  00
2B28:  CALL   0F4
2B29:  MOVLP  28
.................... 
....................     return cmd;
2B2A:  MOVLB  0B
2B2B:  MOVF   38,W
2B2C:  MOVWF  78
2B2D:  MOVF   39,W
2B2E:  MOVWF  79
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
191A:  MOVLB  0B
191B:  CLRF   24
191C:  CLRF   25
191D:  CLRF   26
191E:  CLRF   27
191F:  CLRF   28
1920:  CLRF   29
1921:  CLRF   2A
1922:  CLRF   2B
1923:  CLRF   2C
1924:  CLRF   2D
1925:  CLRF   2E
1926:  CLRF   2F
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
1927:  MOVLW  54
1928:  MOVLB  03
1929:  MOVWF  11
192A:  MOVLW  02
192B:  MOVWF  12
192C:  MOVLP  08
192D:  MOVLB  00
192E:  CALL   119
192F:  MOVLP  18
....................    fprintf(PC, "\t[BOSS] >>> ");
1930:  MOVLW  64
1931:  MOVLB  03
1932:  MOVWF  11
1933:  MOVLW  02
1934:  MOVWF  12
1935:  MOVLP  08
1936:  MOVLB  00
1937:  CALL   119
1938:  MOVLP  18
....................    for (int8 i = 0; i < receive_signal_size; i++)
1939:  MOVLB  0B
193A:  CLRF   30
193B:  MOVF   23,W
193C:  SUBWF  30,W
193D:  BTFSC  03.0
193E:  GOTO   159
....................       fprintf(PC, "%X ", receive_signal[i]);
193F:  MOVF   30,W
1940:  ADDWF  21,W
1941:  MOVWF  04
1942:  MOVLW  00
1943:  ADDWFC 22,W
1944:  MOVWF  05
1945:  MOVF   00,W
1946:  MOVWF  37
1947:  MOVLB  0C
1948:  MOVWF  6A
1949:  MOVLW  37
194A:  MOVWF  6B
194B:  MOVLP  08
194C:  MOVLB  00
194D:  CALL   4BA
194E:  MOVLP  18
194F:  MOVLW  20
1950:  MOVLB  0D
1951:  MOVWF  37
1952:  MOVLP  08
1953:  MOVLB  00
1954:  CALL   0F4
1955:  MOVLP  18
1956:  MOVLB  0B
1957:  INCF   30,F
1958:  GOTO   13B
....................    fprintf(PC, "\r\n");
1959:  MOVLW  0D
195A:  MOVLB  0D
195B:  MOVWF  37
195C:  MOVLP  08
195D:  MOVLB  00
195E:  CALL   0F4
195F:  MOVLP  18
1960:  MOVLW  0A
1961:  MOVLB  0D
1962:  MOVWF  37
1963:  MOVLP  08
1964:  MOVLB  00
1965:  CALL   0F4
1966:  MOVLP  18
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
1967:  MOVLB  0B
1968:  MOVF   22,W
1969:  MOVWF  38
196A:  MOVF   21,W
196B:  MOVWF  37
196C:  MOVF   23,W
196D:  MOVWF  39
*
19A9:  MOVF   78,W
19AA:  MOVWF  31
....................    if (frame_start_position == -1)
19AB:  MOVF   31,W
19AC:  SUBLW  FF
19AD:  BTFSS  03.2
19AE:  GOTO   1B4
....................       return command;
19AF:  MOVLW  A4
19B0:  MOVWF  78
19B1:  MOVLW  05
19B2:  MOVWF  79
19B3:  GOTO   343
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
19B4:  MOVF   31,W
19B5:  ADDWF  21,W
19B6:  MOVWF  32
19B7:  MOVLW  00
19B8:  ADDWFC 22,W
19B9:  MOVWF  33
19BA:  MOVF   32,W
19BB:  MOVWF  04
19BC:  MOVF   33,W
19BD:  MOVWF  05
19BE:  ADDFSR 00,FSR0
19BF:  MOVF   00,W
19C0:  ANDLW  0F
19C1:  MOVWF  34
19C2:  MOVF   34,W
19C3:  MOVWF  37
*
1A0B:  MOVF   78,W
1A0C:  MOVWF  35
....................    if (content_size == -1)
1A0D:  MOVF   35,W
1A0E:  SUBLW  FF
1A0F:  BTFSS  03.2
1A10:  GOTO   216
....................       return command;
1A11:  MOVLW  A4
1A12:  MOVWF  78
1A13:  MOVLW  05
1A14:  MOVWF  79
1A15:  GOTO   343
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
1A16:  MOVF   31,W
1A17:  SUBWF  23,W
1A18:  MOVWF  36
....................    
....................    if (!check_crc(frame, receive_frame_size))
1A19:  MOVF   33,W
1A1A:  MOVWF  38
1A1B:  MOVF   32,W
1A1C:  MOVWF  37
1A1D:  MOVF   36,W
1A1E:  MOVWF  39
*
1A9B:  MOVF   78,F
1A9C:  BTFSS  03.2
1A9D:  GOTO   2A3
....................       return command;
1A9E:  MOVLW  A4
1A9F:  MOVWF  78
1AA0:  MOVLW  05
1AA1:  MOVWF  79
1AA2:  GOTO   343
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
1AA3:  MOVF   32,W
1AA4:  MOVWF  04
1AA5:  MOVF   33,W
1AA6:  MOVWF  05
1AA7:  ADDFSR 00,FSR0
1AA8:  MOVF   00,W
1AA9:  ANDLW  F0
1AAA:  MOVWF  77
1AAB:  SWAPF  77,W
1AAC:  MOVWF  37
1AAD:  MOVLW  0F
1AAE:  ANDWF  37,F
1AAF:  MOVF   37,W
1AB0:  MOVWF  38
*
1B0E:  MOVF   78,F
1B0F:  BTFSS  03.2
1B10:  GOTO   316
....................       return command;
1B11:  MOVLW  A4
1B12:  MOVWF  78
1B13:  MOVLW  05
1B14:  MOVWF  79
1B15:  GOTO   343
.................... 
....................    command.frame_id = frame_id;
1B16:  MOVF   34,W
1B17:  MOVWF  24
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
1B18:  MOVLW  01
1B19:  ADDWF  32,W
1B1A:  MOVWF  37
1B1B:  MOVLW  00
1B1C:  ADDWFC 33,W
1B1D:  MOVWF  38
1B1E:  MOVLW  02
1B1F:  SUBWF  36,W
1B20:  MOVWF  39
1B21:  MOVF   38,W
1B22:  MOVWF  05
1B23:  MOVF   37,W
1B24:  MOVWF  04
1B25:  MOVF   39,W
1B26:  MOVWF  78
1B27:  BTFSC  03.2
1B28:  GOTO   331
1B29:  MOVLW  23
1B2A:  MOVWF  07
1B2B:  MOVLW  77
1B2C:  MOVWF  06
1B2D:  MOVIW  [FSR0++],W
1B2E:  MOVWI  W,[FSR1++]
1B2F:  DECFSZ 78,F
1B30:  GOTO   32D
....................    command.size = receive_frame_size-2;
1B31:  MOVLW  02
1B32:  SUBWF  36,W
1B33:  MOVWF  25
....................    command.is_exist = TRUE;
1B34:  BSF    26.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1B35:  MOVLW  6B
1B36:  MOVLB  03
1B37:  MOVWF  11
1B38:  MOVLW  02
1B39:  MOVWF  12
1B3A:  MOVLP  08
1B3B:  MOVLB  00
1B3C:  CALL   119
1B3D:  MOVLP  18
....................    return command;
1B3E:  MOVLW  A4
1B3F:  MOVWF  78
1B40:  MOVLW  05
1B41:  MOVWF  79
1B42:  MOVLB  0B
1B43:  MOVLP  30
1B44:  MOVLB  00
1B45:  GOTO   2B2 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
196E:  CLRF   3A
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
196F:  CLRF   3A
1970:  MOVLW  01
1971:  SUBWF  39,W
1972:  SUBWF  3A,W
1973:  BTFSC  03.0
1974:  GOTO   185
....................       if(receive_signal[i] == SFD)
1975:  MOVF   3A,W
1976:  ADDWF  37,W
1977:  MOVWF  04
1978:  MOVLW  00
1979:  ADDWFC 38,W
197A:  MOVWF  05
197B:  MOVF   00,W
197C:  SUBLW  AA
197D:  BTFSS  03.2
197E:  GOTO   183
....................          return i+1;
197F:  MOVLW  01
1980:  ADDWF  3A,W
1981:  MOVWF  78
1982:  GOTO   1A9
1983:  INCF   3A,F
1984:  GOTO   170
....................    if (receive_signal[i] == SFD)
1985:  MOVF   3A,W
1986:  ADDWF  37,W
1987:  MOVWF  04
1988:  MOVLW  00
1989:  ADDWFC 38,W
198A:  MOVWF  05
198B:  MOVF   00,W
198C:  SUBLW  AA
198D:  BTFSS  03.2
198E:  GOTO   19D
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
198F:  MOVLW  79
1990:  MOVLB  03
1991:  MOVWF  11
1992:  MOVLW  02
1993:  MOVWF  12
1994:  MOVLP  08
1995:  MOVLB  00
1996:  CALL   119
1997:  MOVLP  18
....................       return -1;
1998:  MOVLW  FF
1999:  MOVWF  78
199A:  MOVLB  0B
199B:  GOTO   1A9
....................    }
199C:  GOTO   1A9
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
199D:  MOVLW  84
199E:  MOVLB  03
199F:  MOVWF  11
19A0:  MOVLW  02
19A1:  MOVWF  12
19A2:  MOVLP  08
19A3:  MOVLB  00
19A4:  CALL   119
19A5:  MOVLP  18
....................       return -1;
19A6:  MOVLW  FF
19A7:  MOVWF  78
19A8:  MOVLB  0B
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
19C4:  CLRF   38
19C5:  MOVF   38,W
19C6:  SUBLW  02
19C7:  BTFSS  03.0
19C8:  GOTO   1E3
....................       if (frame_id == frame_ids[i].id)
19C9:  BCF    03.0
19CA:  RLF    38,W
19CB:  ADDLW  C5
19CC:  MOVWF  04
19CD:  MOVLW  22
19CE:  MOVWF  05
19CF:  BTFSC  03.0
19D0:  INCF   05,F
19D1:  MOVF   00,W
19D2:  SUBWF  37,W
19D3:  BTFSS  03.2
19D4:  GOTO   1E1
....................          return frame_ids[i].length;
19D5:  BCF    03.0
19D6:  RLF    38,W
19D7:  ADDLW  01
19D8:  ADDLW  C5
19D9:  MOVWF  04
19DA:  MOVLW  22
19DB:  MOVWF  05
19DC:  BTFSC  03.0
19DD:  INCF   05,F
19DE:  MOVF   00,W
19DF:  MOVWF  78
19E0:  GOTO   20B
19E1:  INCF   38,F
19E2:  GOTO   1C5
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
19E3:  MOVLW  8D
19E4:  MOVLB  03
19E5:  MOVWF  11
19E6:  MOVLW  02
19E7:  MOVWF  12
19E8:  BCF    03.0
19E9:  MOVLW  1F
19EA:  MOVLB  0C
19EB:  MOVWF  6A
19EC:  MOVLP  08
19ED:  MOVLB  00
19EE:  CALL   167
19EF:  MOVLP  18
19F0:  MOVLB  0B
19F1:  MOVF   37,W
19F2:  MOVLB  0C
19F3:  MOVWF  6A
19F4:  MOVLW  37
19F5:  MOVWF  6B
19F6:  MOVLP  08
19F7:  MOVLB  00
19F8:  CALL   4BA
19F9:  MOVLP  18
19FA:  MOVLW  0D
19FB:  MOVLB  0D
19FC:  MOVWF  37
19FD:  MOVLP  08
19FE:  MOVLB  00
19FF:  CALL   0F4
1A00:  MOVLP  18
1A01:  MOVLW  0A
1A02:  MOVLB  0D
1A03:  MOVWF  37
1A04:  MOVLP  08
1A05:  MOVLB  00
1A06:  CALL   0F4
1A07:  MOVLP  18
....................    return -1;
1A08:  MOVLW  FF
1A09:  MOVWF  78
1A0A:  MOVLB  0B
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
1A1F:  MOVLW  01
1A20:  SUBWF  39,W
1A21:  ADDWF  37,W
1A22:  MOVWF  04
1A23:  MOVLW  00
1A24:  ADDWFC 38,W
1A25:  MOVWF  05
1A26:  MOVF   00,W
1A27:  MOVWF  3A
1A28:  MOVLW  01
1A29:  SUBWF  39,W
1A2A:  MOVWF  3C
1A2B:  MOVF   38,W
1A2C:  MOVLB  0C
1A2D:  MOVWF  35
1A2E:  MOVLB  0B
1A2F:  MOVF   37,W
1A30:  MOVLB  0C
1A31:  MOVWF  34
1A32:  MOVLB  0B
1A33:  MOVF   3C,W
1A34:  MOVLB  0C
1A35:  MOVWF  36
1A36:  MOVLP  08
1A37:  MOVLB  00
1A38:  CALL   78F
1A39:  MOVLP  18
1A3A:  MOVF   78,W
1A3B:  MOVLB  0B
1A3C:  MOVWF  3B
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
1A3D:  MOVF   3B,W
1A3E:  SUBWF  3A,W
1A3F:  BTFSS  03.2
1A40:  GOTO   245
....................       return TRUE;
1A41:  MOVLW  01
1A42:  MOVWF  78
1A43:  GOTO   29B
1A44:  GOTO   29B
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1A45:  MOVLW  9F
1A46:  MOVLB  03
1A47:  MOVWF  11
1A48:  MOVLW  02
1A49:  MOVWF  12
1A4A:  MOVLP  08
1A4B:  MOVLB  00
1A4C:  CALL   119
1A4D:  MOVLP  18
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
1A4E:  MOVLW  A8
1A4F:  MOVLB  03
1A50:  MOVWF  11
1A51:  MOVLW  02
1A52:  MOVWF  12
1A53:  BCF    03.0
1A54:  MOVLW  13
1A55:  MOVLB  0C
1A56:  MOVWF  6A
1A57:  MOVLP  08
1A58:  MOVLB  00
1A59:  CALL   167
1A5A:  MOVLP  18
1A5B:  MOVLB  0B
1A5C:  MOVF   3A,W
1A5D:  MOVLB  0C
1A5E:  MOVWF  6A
1A5F:  MOVLW  37
1A60:  MOVWF  6B
1A61:  MOVLP  08
1A62:  MOVLB  00
1A63:  CALL   4BA
1A64:  MOVLP  18
1A65:  MOVLW  0D
1A66:  MOVLB  0D
1A67:  MOVWF  37
1A68:  MOVLP  08
1A69:  MOVLB  00
1A6A:  CALL   0F4
1A6B:  MOVLP  18
1A6C:  MOVLW  0A
1A6D:  MOVLB  0D
1A6E:  MOVWF  37
1A6F:  MOVLP  08
1A70:  MOVLB  00
1A71:  CALL   0F4
1A72:  MOVLP  18
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1A73:  MOVLW  B4
1A74:  MOVLB  03
1A75:  MOVWF  11
1A76:  MOVLW  02
1A77:  MOVWF  12
1A78:  BCF    03.0
1A79:  MOVLW  13
1A7A:  MOVLB  0C
1A7B:  MOVWF  6A
1A7C:  MOVLP  08
1A7D:  MOVLB  00
1A7E:  CALL   167
1A7F:  MOVLP  18
1A80:  MOVLB  0B
1A81:  MOVF   3B,W
1A82:  MOVLB  0C
1A83:  MOVWF  6A
1A84:  MOVLW  37
1A85:  MOVWF  6B
1A86:  MOVLP  08
1A87:  MOVLB  00
1A88:  CALL   4BA
1A89:  MOVLP  18
1A8A:  MOVLW  0D
1A8B:  MOVLB  0D
1A8C:  MOVWF  37
1A8D:  MOVLP  08
1A8E:  MOVLB  00
1A8F:  CALL   0F4
1A90:  MOVLP  18
1A91:  MOVLW  0A
1A92:  MOVLB  0D
1A93:  MOVWF  37
1A94:  MOVLP  08
1A95:  MOVLB  00
1A96:  CALL   0F4
1A97:  MOVLP  18
....................       return FALSE;
1A98:  MOVLW  00
1A99:  MOVWF  78
1A9A:  MOVLB  0B
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
1AB1:  MOVF   38,W
1AB2:  SUBLW  0C
1AB3:  BTFSS  03.2
1AB4:  GOTO   2B9
....................       return TRUE;
1AB5:  MOVLW  01
1AB6:  MOVWF  78
1AB7:  GOTO   30E
1AB8:  GOTO   30E
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
1AB9:  MOVLW  C0
1ABA:  MOVLB  03
1ABB:  MOVWF  11
1ABC:  MOVLW  02
1ABD:  MOVWF  12
1ABE:  MOVLP  08
1ABF:  MOVLB  00
1AC0:  CALL   119
1AC1:  MOVLP  18
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
1AC2:  MOVLW  D1
1AC3:  MOVLB  03
1AC4:  MOVWF  11
1AC5:  MOVLW  02
1AC6:  MOVWF  12
1AC7:  BCF    03.0
1AC8:  MOVLW  13
1AC9:  MOVLB  0C
1ACA:  MOVWF  6A
1ACB:  MOVLP  08
1ACC:  MOVLB  00
1ACD:  CALL   167
1ACE:  MOVLP  18
1ACF:  MOVLB  0B
1AD0:  MOVF   38,W
1AD1:  MOVLB  0C
1AD2:  MOVWF  6A
1AD3:  MOVLW  37
1AD4:  MOVWF  6B
1AD5:  MOVLP  08
1AD6:  MOVLB  00
1AD7:  CALL   4BA
1AD8:  MOVLP  18
1AD9:  MOVLW  0D
1ADA:  MOVLB  0D
1ADB:  MOVWF  37
1ADC:  MOVLP  08
1ADD:  MOVLB  00
1ADE:  CALL   0F4
1ADF:  MOVLP  18
1AE0:  MOVLW  0A
1AE1:  MOVLB  0D
1AE2:  MOVWF  37
1AE3:  MOVLP  08
1AE4:  MOVLB  00
1AE5:  CALL   0F4
1AE6:  MOVLP  18
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
1AE7:  MOVLW  DD
1AE8:  MOVLB  03
1AE9:  MOVWF  11
1AEA:  MOVLW  02
1AEB:  MOVWF  12
1AEC:  BCF    03.0
1AED:  MOVLW  13
1AEE:  MOVLB  0C
1AEF:  MOVWF  6A
1AF0:  MOVLP  08
1AF1:  MOVLB  00
1AF2:  CALL   167
1AF3:  MOVLP  18
1AF4:  MOVLW  0C
1AF5:  MOVLB  0C
1AF6:  MOVWF  6A
1AF7:  MOVLW  37
1AF8:  MOVWF  6B
1AF9:  MOVLP  08
1AFA:  MOVLB  00
1AFB:  CALL   4BA
1AFC:  MOVLP  18
1AFD:  MOVLW  0D
1AFE:  MOVLB  0D
1AFF:  MOVWF  37
1B00:  MOVLP  08
1B01:  MOVLB  00
1B02:  CALL   0F4
1B03:  MOVLP  18
1B04:  MOVLW  0A
1B05:  MOVLB  0D
1B06:  MOVWF  37
1B07:  MOVLP  08
1B08:  MOVLB  00
1B09:  CALL   0F4
1B0A:  MOVLP  18
....................       return FALSE;  
1B0B:  MOVLW  00
1B0C:  MOVWF  78
1B0D:  MOVLB  0B
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
1B46:  MOVLW  AA
1B47:  MOVLB  0B
1B48:  MOVWF  24
....................    data[1] = (BOSS_PIC << 4) | frame_id;
1B49:  MOVF   20,W
1B4A:  IORLW  50
1B4B:  MOVWF  25
....................    memcpy(&data[2], content, size);
1B4C:  MOVF   22,W
1B4D:  MOVWF  05
1B4E:  MOVF   21,W
1B4F:  MOVWF  04
1B50:  MOVF   23,W
1B51:  MOVWF  78
1B52:  BTFSC  03.2
1B53:  GOTO   35C
1B54:  MOVLW  23
1B55:  MOVWF  07
1B56:  MOVLW  76
1B57:  MOVWF  06
1B58:  MOVIW  [FSR0++],W
1B59:  MOVWI  W,[FSR1++]
1B5A:  DECFSZ 78,F
1B5B:  GOTO   358
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
1B5C:  MOVLW  02
1B5D:  ADDWF  23,W
1B5E:  MOVWF  34
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
1B5F:  MOVLW  74
1B60:  ADDWF  34,W
1B61:  MOVWF  37
1B62:  MOVLW  23
1B63:  MOVWF  38
1B64:  BTFSC  03.0
1B65:  INCF   38,F
1B66:  MOVLW  01
1B67:  SUBWF  34,W
1B68:  MOVWF  39
1B69:  MOVLW  23
1B6A:  MOVLB  0C
1B6B:  MOVWF  35
1B6C:  MOVLW  75
1B6D:  MOVWF  34
1B6E:  MOVLB  0B
1B6F:  MOVF   39,W
1B70:  MOVLB  0C
1B71:  MOVWF  36
1B72:  MOVLP  08
1B73:  MOVLB  00
1B74:  CALL   78F
1B75:  MOVLP  18
1B76:  MOVLB  0B
1B77:  MOVF   38,W
1B78:  MOVWF  05
1B79:  MOVF   37,W
1B7A:  MOVWF  04
1B7B:  MOVF   78,W
1B7C:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
1B7D:  MOVLW  01
1B7E:  ADDWF  34,W
1B7F:  MOVWF  35
....................    
....................    transmit(data, data_size);
1B80:  MOVLW  23
1B81:  MOVWF  38
1B82:  MOVLW  74
1B83:  MOVWF  37
1B84:  MOVF   35,W
1B85:  MOVWF  39
*
1BD3:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
1B86:  CLRF   3A
1B87:  MOVF   39,W
1B88:  SUBWF  3A,W
1B89:  BTFSC  03.0
1B8A:  GOTO   39C
....................       fputc(data[i], BOSS);
1B8B:  MOVF   3A,W
1B8C:  ADDWF  37,W
1B8D:  MOVWF  04
1B8E:  MOVLW  00
1B8F:  ADDWFC 38,W
1B90:  MOVWF  05
1B91:  MOVF   00,W
1B92:  MOVWF  3C
1B93:  MOVF   3C,W
*
1B99:  MOVLB  0B
1B9A:  INCF   3A,F
1B9B:  GOTO   387
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
1B9C:  MOVLW  E9
1B9D:  MOVLB  03
1B9E:  MOVWF  11
1B9F:  MOVLW  02
1BA0:  MOVWF  12
1BA1:  MOVLP  08
1BA2:  MOVLB  00
1BA3:  CALL   119
1BA4:  MOVLP  18
....................    for(int i = 0; i < data_size; i++)
1BA5:  MOVLB  0B
1BA6:  CLRF   3B
1BA7:  MOVF   39,W
1BA8:  SUBWF  3B,W
1BA9:  BTFSC  03.0
1BAA:  GOTO   3C5
....................       fprintf(PC, "%X ", data[i]);
1BAB:  MOVF   3B,W
1BAC:  ADDWF  37,W
1BAD:  MOVWF  04
1BAE:  MOVLW  00
1BAF:  ADDWFC 38,W
1BB0:  MOVWF  05
1BB1:  MOVF   00,W
1BB2:  MOVWF  3C
1BB3:  MOVLB  0C
1BB4:  MOVWF  6A
1BB5:  MOVLW  37
1BB6:  MOVWF  6B
1BB7:  MOVLP  08
1BB8:  MOVLB  00
1BB9:  CALL   4BA
1BBA:  MOVLP  18
1BBB:  MOVLW  20
1BBC:  MOVLB  0D
1BBD:  MOVWF  37
1BBE:  MOVLP  08
1BBF:  MOVLB  00
1BC0:  CALL   0F4
1BC1:  MOVLP  18
1BC2:  MOVLB  0B
1BC3:  INCF   3B,F
1BC4:  GOTO   3A7
....................    fprintf(PC, "\r\n");
1BC5:  MOVLW  0D
1BC6:  MOVLB  0D
1BC7:  MOVWF  37
1BC8:  MOVLP  08
1BC9:  MOVLB  00
1BCA:  CALL   0F4
1BCB:  MOVLP  18
1BCC:  MOVLW  0A
1BCD:  MOVLB  0D
1BCE:  MOVWF  37
1BCF:  MOVLP  08
1BD0:  MOVLB  00
1BD1:  CALL   0F4
1BD2:  MOVLP  18
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0F8F:  MOVLB  0C
0F90:  MOVF   34,W
0F91:  MOVWF  04
0F92:  MOVF   35,W
0F93:  MOVWF  05
0F94:  MOVIW  [FSR0+00],W
0F95:  MOVWF  37
0F96:  MOVLW  01
0F97:  MOVWF  38
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0F98:  MOVF   36,W
0F99:  SUBWF  38,W
0F9A:  BTFSC  03.0
0F9B:  GOTO   7A6
....................       crc ^= frame[i++];
0F9C:  MOVF   38,W
0F9D:  INCF   38,F
0F9E:  ADDWF  34,W
0F9F:  MOVWF  04
0FA0:  MOVLW  00
0FA1:  ADDWFC 35,W
0FA2:  MOVWF  05
0FA3:  MOVF   00,W
0FA4:  XORWF  37,F
0FA5:  GOTO   798
....................    return crc;
0FA6:  MOVF   37,W
0FA7:  MOVWF  78
0FA8:  MOVLB  00
0FA9:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0FD0:  MOVLW  0F
0FD1:  MOVLB  0B
0FD2:  MOVWF  20
0FD3:  CLRF   22
0FD4:  CLRF   21
0FD5:  CLRF   23
0FD6:  MOVLP  18
0FD7:  MOVLB  00
0FD8:  CALL   346
0FD9:  MOVLP  08
0FDA:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
17F1:  MOVLW  03
17F2:  MOVLB  0B
17F3:  MOVWF  20
17F4:  MOVLW  20
17F5:  MOVWF  22
17F6:  MOVLW  09
17F7:  MOVWF  21
17F8:  MOVLW  04
17F9:  MOVWF  23
17FA:  MOVLP  18
17FB:  MOVLB  00
17FC:  CALL   346
17FD:  MOVLP  10
17FE:  MOVLP  20
17FF:  GOTO   7C4 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... ////
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
09C1:  MOVLW  89
09C2:  MOVLB  03
09C3:  MOVWF  11
09C4:  MOVLW  03
09C5:  MOVWF  12
09C6:  MOVLB  00
09C7:  CALL   119
....................     output_low(CONNECT_CIGS);
09C8:  MOVLB  01
09C9:  BCF    10.0
09CA:  MOVLB  02
09CB:  BCF    10.0
....................     output_high(EN_NPWR);
09CC:  MOVLB  01
09CD:  BCF    0C.4
09CE:  MOVLB  02
09CF:  BSF    0C.4
....................     fprintf(PC, "\tComplete\r\n");
09D0:  MOVLW  91
09D1:  MOVLB  03
09D2:  MOVWF  11
09D3:  MOVLW  03
09D4:  MOVWF  12
09D5:  MOVLB  00
09D6:  CALL   119
09D7:  MOVLP  30
09D8:  GOTO   273 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
09D9:  MOVLW  97
09DA:  MOVLB  03
09DB:  MOVWF  11
09DC:  MOVLW  03
09DD:  MOVWF  12
09DE:  MOVLB  00
09DF:  CALL   119
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
09E0:  MOVLW  78
09E1:  MOVLB  01
09E2:  MOVWF  19
....................    //setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
....................    setup_adc(ADC_CLOCK_DIV_64);
09E3:  BCF    1E.4
09E4:  BSF    1E.5
09E5:  BSF    1E.6
09E6:  BSF    1E.7
09E7:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
09E8:  MOVLW  A0
09E9:  MOVLB  02
09EA:  MOVWF  18
....................    dac_write(0);                                                               
09EB:  CLRF   19
....................    fprintf(PC, "\tComplete\r\n");
09EC:  MOVLW  A0
09ED:  MOVLB  03
09EE:  MOVWF  11
09EF:  MOVLW  03
09F0:  MOVWF  12
09F1:  MOVLB  00
09F2:  CALL   119
09F3:  MOVLP  30
09F4:  GOTO   276 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
*
2000:  MOVLW  A6
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  03
2004:  MOVWF  12
2005:  MOVLP  08
2006:  MOVLB  00
2007:  CALL   119
2008:  MOVLP  20
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
2009:  MOVLB  0B
200A:  MOVF   34,W
200B:  MOVWF  04
200C:  MOVF   35,W
200D:  MOVWF  05
200E:  MOVIW  [FSR0+01],W
200F:  MOVWF  36
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
2010:  MOVLW  AD
2011:  MOVLB  03
2012:  MOVWF  11
2013:  MOVLW  03
2014:  MOVWF  12
2015:  BCF    03.0
2016:  MOVLW  0E
2017:  MOVLB  0C
2018:  MOVWF  6A
2019:  MOVLP  08
201A:  MOVLB  00
201B:  CALL   167
201C:  MOVLP  20
201D:  MOVLB  0B
201E:  MOVF   36,W
201F:  MOVLB  0C
2020:  MOVWF  66
2021:  MOVLW  1B
2022:  MOVWF  67
2023:  MOVLP  18
2024:  MOVLB  00
2025:  CALL   4FF
2026:  MOVLP  20
2027:  MOVLW  0D
2028:  MOVLB  0D
2029:  MOVWF  37
202A:  MOVLP  08
202B:  MOVLB  00
202C:  CALL   0F4
202D:  MOVLP  20
202E:  MOVLW  0A
202F:  MOVLB  0D
2030:  MOVWF  37
2031:  MOVLP  08
2032:  MOVLB  00
2033:  CALL   0F4
2034:  MOVLP  20
....................     output_high(CONNECT_CIGS);
2035:  MOVLB  01
2036:  BCF    10.0
2037:  MOVLB  02
2038:  BSF    10.0
....................     delay_us(100); // wait for the CIGS to stabilize
2039:  MOVLW  85
203A:  MOVWF  77
203B:  DECFSZ 77,F
203C:  GOTO   03B
.................... 
....................     // read header data
....................     /*
....................     measured_time = get_current_sec(); // read time from timer0
....................     measured_pd = ad7490_read(ADC_PD); // read PD value
....................     measured_temp_top = ad7490_read(ADC_TEMP_TOP); // read temperature at top
....................     measured_temp_bot = ad7490_read(ADC_TEMP_BOT); // read temperature at bottom
....................     measured_open_voltage = ad7490_read(ADC_CIGS_VOLT); // read open voltage at CIGS
....................     */
....................    
....................     for (unsigned int8 count = 0; count < measurement_step; count++)
203D:  MOVLB  0B
203E:  CLRF   37
203F:  MOVF   36,W
2040:  SUBWF  37,W
2041:  BTFSC  03.0
2042:  GOTO   091
....................     {    
....................         // set DAC value
....................         dac_write(count);
2043:  MOVF   37,W
2044:  MOVLB  02
2045:  MOVWF  19
....................         //delay_ms(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_ms(1); // wait for the ADC to stabilize
2046:  MOVLW  01
2047:  MOVLB  0D
2048:  MOVWF  4D
2049:  MOVLP  08
204A:  MOVLB  00
204B:  CALL   623
204C:  MOVLP  20
....................         data_buffer[count*2] = ad7490_readdata(0x8330);//0xAF30 Jumper 
204D:  BCF    03.0
204E:  MOVLB  0B
204F:  RLF    37,W
2050:  CLRF   7A
2051:  MOVWF  79
2052:  BCF    03.0
2053:  RLF    79,F
2054:  RLF    7A,F
2055:  MOVF   79,W
2056:  ADDLW  3A
2057:  MOVLB  0C
2058:  MOVWF  34
2059:  MOVLW  20
205A:  ADDWFC 7A,W
205B:  MOVWF  35
205C:  MOVLW  83
205D:  MOVWF  37
205E:  MOVLW  30
205F:  MOVWF  36
2060:  MOVLP  18
2061:  MOVLB  00
2062:  CALL   54D
2063:  MOVLP  20
2064:  MOVLB  0C
2065:  MOVF   35,W
2066:  MOVWF  05
2067:  MOVF   34,W
2068:  MOVWF  04
2069:  MOVF   78,W
206A:  MOVWF  00
206B:  MOVF   79,W
206C:  MOVWI  W,[FSR0+01]
....................         data_buffer[count*2+1] = ad7490_readdata(0x8730); // read voltage at adc pin
206D:  BCF    03.0
206E:  MOVLB  0B
206F:  RLF    37,W
2070:  ADDLW  01
2071:  CLRF   7A
2072:  MOVWF  79
2073:  BCF    03.0
2074:  RLF    79,F
2075:  RLF    7A,F
2076:  MOVF   79,W
2077:  ADDLW  3A
2078:  MOVLB  0C
2079:  MOVWF  34
207A:  MOVLW  20
207B:  ADDWFC 7A,W
207C:  MOVWF  35
207D:  MOVLW  87
207E:  MOVWF  37
207F:  MOVLW  30
2080:  MOVWF  36
2081:  MOVLP  18
2082:  MOVLB  00
2083:  CALL   54D
2084:  MOVLP  20
2085:  MOVLB  0C
2086:  MOVF   35,W
2087:  MOVWF  05
2088:  MOVF   34,W
2089:  MOVWF  04
208A:  MOVF   78,W
208B:  MOVWF  00
208C:  MOVF   79,W
208D:  MOVWI  W,[FSR0+01]
208E:  MOVLB  0B
208F:  INCF   37,F
2090:  GOTO   03F
....................         
....................     }
.................... 
....................     output_low(CONNECT_CIGS);
2091:  MOVLB  01
2092:  BCF    10.0
2093:  MOVLB  02
2094:  BCF    10.0
....................     fprintf(PC, "END SWEEP\r\n");
2095:  MOVLW  B7
2096:  MOVLB  03
2097:  MOVWF  11
2098:  MOVLW  03
2099:  MOVWF  12
209A:  MOVLP  08
209B:  MOVLB  00
209C:  CALL   119
209D:  MOVLP  20
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
209E:  MOVLW  BD
209F:  MOVLB  03
20A0:  MOVWF  11
20A1:  MOVLW  03
20A2:  MOVWF  12
20A3:  MOVLP  08
20A4:  MOVLB  00
20A5:  CALL   119
20A6:  MOVLP  20
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00}; // Initialize packet data with 0x00
20A7:  MOVLB  0B
20A8:  CLRF   38
20A9:  CLRF   39
20AA:  CLRF   3A
20AB:  CLRF   3B
20AC:  CLRF   3C
20AD:  CLRF   3D
20AE:  CLRF   3E
20AF:  CLRF   3F
20B0:  CLRF   40
20B1:  CLRF   41
20B2:  CLRF   42
20B3:  CLRF   43
20B4:  CLRF   44
20B5:  CLRF   45
20B6:  CLRF   46
20B7:  CLRF   47
20B8:  CLRF   48
20B9:  CLRF   49
20BA:  CLRF   4A
20BB:  CLRF   4B
20BC:  CLRF   4C
20BD:  CLRF   4D
20BE:  CLRF   4E
20BF:  CLRF   4F
20C0:  CLRF   50
20C1:  CLRF   51
20C2:  CLRF   52
20C3:  CLRF   53
20C4:  CLRF   54
20C5:  CLRF   55
20C6:  CLRF   56
20C7:  CLRF   57
20C8:  CLRF   58
20C9:  CLRF   59
20CA:  CLRF   5A
20CB:  CLRF   5B
20CC:  CLRF   5C
20CD:  CLRF   5D
20CE:  CLRF   5E
20CF:  CLRF   5F
20D0:  CLRF   60
20D1:  CLRF   61
20D2:  CLRF   62
20D3:  CLRF   63
20D4:  CLRF   64
20D5:  CLRF   65
20D6:  CLRF   66
20D7:  CLRF   67
20D8:  CLRF   68
20D9:  CLRF   69
20DA:  CLRF   6A
20DB:  CLRF   6B
20DC:  CLRF   6C
20DD:  CLRF   6D
20DE:  CLRF   6E
20DF:  CLRF   6F
20E0:  MOVLB  0C
20E1:  CLRF   20
20E2:  CLRF   21
20E3:  CLRF   22
20E4:  CLRF   23
20E5:  CLRF   24
20E6:  CLRF   25
20E7:  CLRF   26
20E8:  CLRF   27
....................     
.................... 
....................     
....................     //make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetdata_index = 0; // Index for packet data
20E9:  CLRF   28
....................    
....................     for (unsigned int16 i = 0; i < measurement_step; i++)
20EA:  CLRF   2A
20EB:  CLRF   29
20EC:  MOVF   2A,F
20ED:  BTFSS  03.2
20EE:  GOTO   222
20EF:  MOVLB  0B
20F0:  MOVF   36,W
20F1:  MOVLB  0C
20F2:  SUBWF  29,W
20F3:  BTFSC  03.0
20F4:  GOTO   222
....................     {        
....................         packetdata[packetdata_index]      = (data_buffer[i*2] >> 4) & 0xFF;
20F5:  MOVLW  88
20F6:  ADDWF  28,W
20F7:  MOVWF  34
20F8:  MOVLW  23
20F9:  MOVWF  35
20FA:  BTFSC  03.0
20FB:  INCF   35,F
20FC:  BCF    03.0
20FD:  RLF    29,W
20FE:  MOVWF  36
20FF:  RLF    2A,W
2100:  MOVWF  37
2101:  BCF    03.0
2102:  RLF    36,W
2103:  MOVWF  79
2104:  RLF    37,W
2105:  MOVWF  7A
2106:  MOVF   79,W
2107:  ADDLW  3A
2108:  MOVWF  04
2109:  MOVLW  20
210A:  ADDWFC 7A,W
210B:  MOVWF  05
210C:  MOVF   00,W
210D:  MOVWF  36
210E:  ADDFSR 01,FSR0
210F:  MOVF   00,W
2110:  MOVWF  37
2111:  ADDFSR 3F,FSR0
2112:  RRF    37,F
2113:  RRF    36,F
2114:  RRF    37,F
2115:  RRF    36,F
2116:  RRF    37,F
2117:  RRF    36,F
2118:  RRF    37,F
2119:  RRF    36,F
211A:  MOVLW  0F
211B:  ANDWF  37,F
211C:  MOVF   36,W
211D:  MOVWF  77
211E:  CLRF   7A
211F:  MOVF   36,W
2120:  MOVWF  36
2121:  MOVF   7A,W
2122:  MOVWF  37
2123:  MOVF   35,W
2124:  MOVWF  05
2125:  MOVF   34,W
2126:  MOVWF  04
2127:  MOVF   36,W
2128:  MOVWF  00
....................         packetdata_index++; 
2129:  INCF   28,F
....................         packetdata[packetdata_index]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
212A:  MOVLW  88
212B:  ADDWF  28,W
212C:  MOVWF  34
212D:  MOVLW  23
212E:  MOVWF  35
212F:  BTFSC  03.0
2130:  INCF   35,F
2131:  BCF    03.0
2132:  RLF    29,W
2133:  MOVWF  36
2134:  RLF    2A,W
2135:  MOVWF  37
2136:  BCF    03.0
2137:  RLF    36,W
2138:  MOVWF  79
2139:  RLF    37,W
213A:  MOVWF  7A
213B:  MOVF   79,W
213C:  ADDLW  3A
213D:  MOVWF  04
213E:  MOVLW  20
213F:  ADDWFC 7A,W
2140:  MOVWF  05
2141:  MOVF   00,W
2142:  MOVWF  36
2143:  ADDFSR 01,FSR0
2144:  MOVF   00,W
2145:  MOVWF  37
2146:  ADDFSR 3F,FSR0
2147:  MOVLW  0F
2148:  ANDWF  36,F
2149:  CLRF   37
214A:  RLF    36,F
214B:  RLF    37,F
214C:  RLF    36,F
214D:  RLF    37,F
214E:  RLF    36,F
214F:  RLF    37,F
2150:  RLF    36,F
2151:  RLF    37,F
2152:  MOVLW  F0
2153:  ANDWF  36,F
2154:  BCF    03.0
2155:  RLF    29,W
2156:  MOVWF  38
2157:  RLF    2A,W
2158:  MOVWF  39
2159:  MOVLW  01
215A:  ADDWF  38,F
215B:  MOVLW  00
215C:  ADDWFC 39,F
215D:  BCF    03.0
215E:  RLF    38,W
215F:  MOVWF  79
2160:  RLF    39,W
2161:  MOVWF  7A
2162:  MOVF   79,W
2163:  ADDLW  3A
2164:  MOVWF  04
2165:  MOVLW  20
2166:  ADDWFC 7A,W
2167:  MOVWF  05
2168:  MOVF   00,W
2169:  MOVWF  38
216A:  ADDFSR 01,FSR0
216B:  MOVF   00,W
216C:  MOVWF  39
216D:  ADDFSR 3F,FSR0
216E:  MOVF   39,W
216F:  MOVWF  38
2170:  CLRF   39
2171:  MOVF   38,W
2172:  ANDLW  0F
2173:  MOVWF  77
2174:  CLRF   7A
2175:  MOVF   77,W
2176:  IORWF  36,W
2177:  MOVWF  77
2178:  MOVF   7A,W
2179:  IORWF  37,W
217A:  MOVWF  7A
217B:  MOVF   77,W
217C:  MOVWF  36
217D:  MOVF   7A,W
217E:  MOVWF  37
217F:  MOVF   35,W
2180:  MOVWF  05
2181:  MOVF   34,W
2182:  MOVWF  04
2183:  MOVF   36,W
2184:  MOVWF  00
....................         packetdata_index++; 
2185:  INCF   28,F
....................         packetdata[packetdata_index]    = data_buffer[i*2+1] & 0xFF;
2186:  MOVLW  88
2187:  ADDWF  28,W
2188:  MOVWF  34
2189:  MOVLW  23
218A:  MOVWF  35
218B:  BTFSC  03.0
218C:  INCF   35,F
218D:  BCF    03.0
218E:  RLF    29,W
218F:  MOVWF  36
2190:  RLF    2A,W
2191:  MOVWF  37
2192:  MOVLW  01
2193:  ADDWF  36,F
2194:  MOVLW  00
2195:  ADDWFC 37,F
2196:  BCF    03.0
2197:  RLF    36,W
2198:  MOVWF  79
2199:  RLF    37,W
219A:  MOVWF  7A
219B:  MOVF   79,W
219C:  ADDLW  3A
219D:  MOVWF  04
219E:  MOVLW  20
219F:  ADDWFC 7A,W
21A0:  MOVWF  05
21A1:  MOVF   00,W
21A2:  MOVWF  36
21A3:  ADDFSR 01,FSR0
21A4:  MOVF   00,W
21A5:  MOVWF  37
21A6:  ADDFSR 3F,FSR0
21A7:  MOVF   36,W
21A8:  MOVWF  77
21A9:  CLRF   7A
21AA:  MOVF   36,W
21AB:  MOVWF  36
21AC:  MOVF   7A,W
21AD:  MOVWF  37
21AE:  MOVF   35,W
21AF:  MOVWF  05
21B0:  MOVF   34,W
21B1:  MOVWF  04
21B2:  MOVF   36,W
21B3:  MOVWF  00
....................         packetdata_index++; 
21B4:  INCF   28,F
.................... 
....................         if (packetdata_index == PACKET_SIZE-1) {
21B5:  MOVF   28,W
21B6:  SUBLW  3F
21B7:  BTFSS  03.2
21B8:  GOTO   21E
....................             // Add CRC
....................             //fprintf(PC, "Adding CRC to packetdata\r\n");
....................             packetdata[PACKET_SIZE-1] = calc_crc8(packetdata, PACKET_SIZE-1);            
21B9:  MOVLW  23
21BA:  MOVWF  35
21BB:  MOVLW  88
21BC:  MOVWF  34
21BD:  MOVLW  3F
21BE:  MOVWF  36
21BF:  MOVLP  08
21C0:  MOVLB  00
21C1:  CALL   78F
21C2:  MOVLP  20
21C3:  MOVF   78,W
21C4:  MOVLB  0C
21C5:  MOVWF  27
....................             
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
21C6:  MOVLB  08
21C7:  MOVF   52,W
21C8:  MOVLB  0C
21C9:  MOVWF  2B
21CA:  MOVLB  08
21CB:  MOVF   53,W
21CC:  MOVLB  0C
21CD:  MOVWF  2C
21CE:  MOVLW  16
21CF:  MOVLB  08
21D0:  ADDWF  54,W
21D1:  MOVLB  0C
21D2:  MOVWF  2D
21D3:  MOVLW  00
21D4:  MOVLB  08
21D5:  ADDWFC 55,W
21D6:  MOVLB  0C
21D7:  MOVWF  2E
....................             //fprintf(PC, "write data\r\n");
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
21D8:  MOVLB  08
21D9:  MOVF   5D,W
21DA:  MOVLB  0D
21DB:  MOVWF  37
21DC:  MOVLB  08
21DD:  MOVF   5C,W
21DE:  MOVLB  0D
21DF:  MOVWF  36
21E0:  MOVLB  08
21E1:  MOVF   5B,W
21E2:  MOVLB  0D
21E3:  MOVWF  35
21E4:  MOVLB  08
21E5:  MOVF   5A,W
21E6:  MOVLB  0D
21E7:  MOVWF  34
21E8:  MOVLB  0C
21E9:  MOVF   2E,W
21EA:  MOVLB  0D
21EB:  MOVWF  3B
21EC:  MOVLB  0C
21ED:  MOVF   2D,W
21EE:  MOVLB  0D
21EF:  MOVWF  3A
21F0:  MOVLB  0C
21F1:  MOVF   2C,W
21F2:  MOVLB  0D
21F3:  MOVWF  39
21F4:  MOVLB  0C
21F5:  MOVF   2B,W
21F6:  MOVLB  0D
21F7:  MOVWF  38
21F8:  MOVLW  23
21F9:  MOVWF  3D
21FA:  MOVLW  88
21FB:  MOVWF  3C
21FC:  CLRF   3F
21FD:  MOVLW  40
21FE:  MOVWF  3E
21FF:  MOVLP  08
2200:  MOVLB  00
2201:  CALL   639
2202:  MOVLP  20
....................             //fprintf(PC, "Add Counter\r\n");
....................             // カウンタ更新
....................             //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_use_counter += PACKET_SIZE;
2203:  MOVLW  40
2204:  MOVLB  08
2205:  ADDWF  52,F
2206:  MOVLW  00
2207:  ADDWFC 53,F
2208:  ADDWFC 54,F
2209:  ADDWFC 55,F
....................             //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
220A:  MOVLW  40
220B:  ADDWF  56,F
220C:  MOVLW  00
220D:  ADDWFC 57,F
220E:  ADDWFC 58,F
220F:  ADDWFC 59,F
....................             packetdata_index = 0; // Reset packet byte counter
2210:  MOVLB  0C
2211:  CLRF   28
....................             memset(packetdata, 0x00, PACKET_SIZE); // これ重要
2212:  MOVLW  23
2213:  MOVWF  05
2214:  MOVLW  88
2215:  MOVWF  04
2216:  CLRF   77
2217:  MOVLW  40
2218:  MOVWF  78
2219:  MOVLP  08
221A:  MOVLB  00
221B:  CALL   7AA
221C:  MOVLP  20
221D:  MOVLB  0C
....................             //fprintf(PC, "Added Counter\r\n");
....................         }
221E:  INCF   29,F
221F:  BTFSC  03.2
2220:  INCF   2A,F
2221:  GOTO   0EC
....................     }
.................... 
....................     //fprintf(PC, "End CIGS data conversion\r\n");
....................     //fprintf(PC, "Start CIGS data conversion\r\n");
....................     
....................     if (packetdata_index < PACKET_SIZE-1) {
2222:  MOVF   28,W
2223:  SUBLW  3E
2224:  BTFSS  03.0
2225:  GOTO   281
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetdata_index; j < PACKET_SIZE-1; j++ ) {
2226:  MOVF   28,W
2227:  MOVWF  2F
2228:  MOVF   2F,W
2229:  SUBLW  3E
222A:  BTFSS  03.0
222B:  GOTO   236
....................             packetdata[j] = 0x00;
222C:  MOVLW  88
222D:  ADDWF  2F,W
222E:  MOVWF  04
222F:  MOVLW  23
2230:  MOVWF  05
2231:  BTFSC  03.0
2232:  INCF   05,F
2233:  CLRF   00
2234:  INCF   2F,F
2235:  GOTO   228
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
2236:  MOVLB  08
2237:  MOVF   52,W
2238:  MOVLB  0C
2239:  MOVWF  30
223A:  MOVLB  08
223B:  MOVF   53,W
223C:  MOVLB  0C
223D:  MOVWF  31
223E:  MOVLW  16
223F:  MOVLB  08
2240:  ADDWF  54,W
2241:  MOVLB  0C
2242:  MOVWF  32
2243:  MOVLW  00
2244:  MOVLB  08
2245:  ADDWFC 55,W
2246:  MOVLB  0C
2247:  MOVWF  33
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
2248:  MOVLB  08
2249:  MOVF   5D,W
224A:  MOVLB  0D
224B:  MOVWF  37
224C:  MOVLB  08
224D:  MOVF   5C,W
224E:  MOVLB  0D
224F:  MOVWF  36
2250:  MOVLB  08
2251:  MOVF   5B,W
2252:  MOVLB  0D
2253:  MOVWF  35
2254:  MOVLB  08
2255:  MOVF   5A,W
2256:  MOVLB  0D
2257:  MOVWF  34
2258:  MOVLB  0C
2259:  MOVF   33,W
225A:  MOVLB  0D
225B:  MOVWF  3B
225C:  MOVLB  0C
225D:  MOVF   32,W
225E:  MOVLB  0D
225F:  MOVWF  3A
2260:  MOVLB  0C
2261:  MOVF   31,W
2262:  MOVLB  0D
2263:  MOVWF  39
2264:  MOVLB  0C
2265:  MOVF   30,W
2266:  MOVLB  0D
2267:  MOVWF  38
2268:  MOVLW  23
2269:  MOVWF  3D
226A:  MOVLW  88
226B:  MOVWF  3C
226C:  CLRF   3F
226D:  MOVLW  40
226E:  MOVWF  3E
226F:  MOVLP  08
2270:  MOVLB  00
2271:  CALL   639
2272:  MOVLP  20
....................         //fprintf(PC, "before misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
2273:  MOVLW  40
2274:  MOVLB  08
2275:  ADDWF  52,F
2276:  MOVLW  00
2277:  ADDWFC 53,F
2278:  ADDWFC 54,F
2279:  ADDWFC 55,F
....................         //fprintf(PC, "after misf_meas_use_counter: %08LX\r\n", misf_meas_use_counter);
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
227A:  MOVLW  40
227B:  ADDWF  56,F
227C:  MOVLW  00
227D:  ADDWFC 57,F
227E:  ADDWFC 58,F
227F:  ADDWFC 59,F
2280:  MOVLB  0C
....................     }
....................         
....................     write_misf_address_area();
2281:  MOVLP  10
2282:  MOVLB  00
2283:  CALL   620
2284:  MOVLP  20
....................     //misf_init(); // Initialize the mission flash
....................     fprintf(PC, "End CIGS data conversion\r\n");
2285:  MOVLW  CC
2286:  MOVLB  03
2287:  MOVWF  11
2288:  MOVLW  03
2289:  MOVWF  12
228A:  MOVLP  08
228B:  MOVLB  00
228C:  CALL   119
228D:  MOVLP  20
228E:  MOVLP  18
228F:  GOTO   6A8 (RETURN)
....................     
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
*
1DA5:  MOVLW  01
1DA6:  MOVLB  0A
1DA7:  ADDWF  5C,W
1DA8:  ANDLW  0F
1DA9:  MOVLB  0B
1DAA:  MOVWF  36
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
1DAB:  MOVLB  0A
1DAC:  MOVF   5B,W
1DAD:  MOVLB  0B
1DAE:  SUBWF  36,W
1DAF:  BTFSS  03.2
1DB0:  GOTO   5BC
....................       fprintf(PC, "SMF data list is full!!!\r\n");
1DB1:  MOVLW  DA
1DB2:  MOVLB  03
1DB3:  MOVWF  11
1DB4:  MOVLW  03
1DB5:  MOVWF  12
1DB6:  MOVLP  08
1DB7:  MOVLB  00
1DB8:  CALL   119
1DB9:  MOVLP  18
1DBA:  GOTO   65F
1DBB:  MOVLB  0B
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
1DBC:  MOVLB  0A
1DBD:  MOVF   5C,W
1DBE:  MOVLB  0C
1DBF:  MOVWF  67
1DC0:  MOVLW  09
1DC1:  MOVWF  68
1DC2:  MOVLB  00
1DC3:  CALL   57E
1DC4:  MOVLW  CB
1DC5:  ADDWF  78,W
1DC6:  MOVWF  78
1DC7:  MOVLW  22
1DC8:  MOVWF  7A
1DC9:  BTFSC  03.0
1DCA:  INCF   7A,F
1DCB:  MOVF   78,W
1DCC:  MOVLB  0B
1DCD:  MOVWF  3A
1DCE:  MOVF   7A,W
1DCF:  MOVWF  3B
1DD0:  MOVF   35,W
1DD1:  MOVWF  7A
1DD2:  MOVF   34,W
1DD3:  MOVWF  04
1DD4:  MOVF   35,W
1DD5:  MOVWF  05
1DD6:  MOVLW  00
1DD7:  BTFSC  00.0
1DD8:  MOVLW  01
1DD9:  MOVWF  78
1DDA:  BTFSC  78.0
1DDB:  GOTO   5E2
1DDC:  MOVF   3B,W
1DDD:  MOVWF  05
1DDE:  MOVF   3A,W
1DDF:  MOVWF  04
1DE0:  BCF    00.0
1DE1:  GOTO   5E7
1DE2:  MOVF   3B,W
1DE3:  MOVWF  05
1DE4:  MOVF   3A,W
1DE5:  MOVWF  04
1DE6:  BSF    00.0
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
1DE7:  MOVLB  0A
1DE8:  MOVF   5C,W
1DE9:  MOVLB  0C
1DEA:  MOVWF  67
1DEB:  MOVLW  09
1DEC:  MOVWF  68
1DED:  MOVLB  00
1DEE:  CALL   57E
1DEF:  MOVLW  01
1DF0:  ADDWF  78,W
1DF1:  ADDLW  CB
1DF2:  MOVWF  78
1DF3:  MOVLW  22
1DF4:  MOVWF  7A
1DF5:  BTFSC  03.0
1DF6:  INCF   7A,F
1DF7:  MOVF   78,W
1DF8:  MOVLB  0B
1DF9:  MOVWF  3A
1DFA:  MOVF   7A,W
1DFB:  MOVWF  3B
1DFC:  MOVF   34,W
1DFD:  MOVWF  04
1DFE:  MOVF   35,W
1DFF:  MOVWF  05
1E00:  ADDFSR 01,FSR0
1E01:  MOVF   00,W
1E02:  MOVWF  77
1E03:  ADDFSR 01,FSR0
1E04:  MOVF   00,W
1E05:  MOVWF  78
1E06:  ADDFSR 01,FSR0
1E07:  MOVF   00,W
1E08:  MOVWF  79
1E09:  ADDFSR 01,FSR0
1E0A:  MOVF   00,W
1E0B:  MOVWF  7A
1E0C:  ADDFSR 3D,FSR0
1E0D:  MOVF   7A,W
1E0E:  MOVWF  3F
1E0F:  MOVF   79,W
1E10:  MOVWF  3E
1E11:  MOVF   78,W
1E12:  MOVWF  3D
1E13:  MOVF   77,W
1E14:  MOVWF  3C
1E15:  MOVF   3B,W
1E16:  MOVWF  05
1E17:  MOVF   3A,W
1E18:  MOVWF  04
1E19:  MOVF   3C,W
1E1A:  MOVWF  00
1E1B:  MOVF   3D,W
1E1C:  MOVWI  W,[FSR0+01]
1E1D:  MOVF   3E,W
1E1E:  MOVWI  W,[FSR0+02]
1E1F:  MOVF   3F,W
1E20:  MOVWI  W,[FSR0+03]
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
1E21:  MOVLB  0A
1E22:  MOVF   5C,W
1E23:  MOVLB  0C
1E24:  MOVWF  67
1E25:  MOVLW  09
1E26:  MOVWF  68
1E27:  MOVLB  00
1E28:  CALL   57E
1E29:  MOVLW  05
1E2A:  ADDWF  78,W
1E2B:  ADDLW  CB
1E2C:  MOVWF  78
1E2D:  MOVLW  22
1E2E:  MOVWF  7A
1E2F:  BTFSC  03.0
1E30:  INCF   7A,F
1E31:  MOVF   78,W
1E32:  MOVLB  0B
1E33:  MOVWF  3A
1E34:  MOVF   7A,W
1E35:  MOVWF  3B
1E36:  MOVF   34,W
1E37:  MOVWF  04
1E38:  MOVF   35,W
1E39:  MOVWF  05
1E3A:  ADDFSR 05,FSR0
1E3B:  MOVF   00,W
1E3C:  MOVWF  77
1E3D:  ADDFSR 01,FSR0
1E3E:  MOVF   00,W
1E3F:  MOVWF  78
1E40:  ADDFSR 01,FSR0
1E41:  MOVF   00,W
1E42:  MOVWF  79
1E43:  ADDFSR 01,FSR0
1E44:  MOVF   00,W
1E45:  MOVWF  7A
1E46:  ADDFSR 3D,FSR0
1E47:  MOVF   7A,W
1E48:  MOVWF  3F
1E49:  MOVF   79,W
1E4A:  MOVWF  3E
1E4B:  MOVF   78,W
1E4C:  MOVWF  3D
1E4D:  MOVF   77,W
1E4E:  MOVWF  3C
1E4F:  MOVF   3B,W
1E50:  MOVWF  05
1E51:  MOVF   3A,W
1E52:  MOVWF  04
1E53:  MOVF   3C,W
1E54:  MOVWF  00
1E55:  MOVF   3D,W
1E56:  MOVWI  W,[FSR0+01]
1E57:  MOVF   3E,W
1E58:  MOVWI  W,[FSR0+02]
1E59:  MOVF   3F,W
1E5A:  MOVWI  W,[FSR0+03]
.................... 
....................       smf_queue.smf_data_tail = next_tail;
1E5B:  MOVF   36,W
1E5C:  MOVLB  0A
1E5D:  MOVWF  5C
1E5E:  MOVLB  00
....................    }
1E5F:  MOVLP  18
1E60:  GOTO   705 (RETURN)
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
2D63:  MOVLB  0A
2D64:  MOVF   5C,W
2D65:  SUBWF  5B,W
2D66:  BTFSS  03.2
2D67:  GOTO   577
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
2D68:  MOVLW  E8
2D69:  MOVLB  03
2D6A:  MOVWF  11
2D6B:  MOVLW  03
2D6C:  MOVWF  12
2D6D:  MOVLP  08
2D6E:  MOVLB  00
2D6F:  CALL   119
2D70:  MOVLP  28
....................       return 0x00;
2D71:  MOVLW  00
2D72:  MOVWF  78
2D73:  MOVWF  79
2D74:  GOTO   591
....................    }
2D75:  GOTO   591
2D76:  MOVLB  0A
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
2D77:  MOVF   5B,W
2D78:  MOVLB  0C
2D79:  MOVWF  66
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
2D7A:  MOVLW  01
2D7B:  MOVLB  0A
2D7C:  ADDWF  5B,W
2D7D:  ANDLW  0F
2D7E:  MOVWF  5B
....................       return &smf_queue.smf_data[current_head];
2D7F:  MOVLB  0C
2D80:  MOVF   66,W
2D81:  MOVWF  67
2D82:  MOVLW  09
2D83:  MOVWF  68
2D84:  MOVLP  18
2D85:  MOVLB  00
2D86:  CALL   57E
2D87:  MOVLP  28
2D88:  MOVF   78,W
2D89:  ADDLW  CB
2D8A:  MOVWF  78
2D8B:  MOVLW  22
2D8C:  MOVWF  7A
2D8D:  BTFSC  03.0
2D8E:  INCF   7A,F
2D8F:  MOVF   7A,W
2D90:  MOVWF  79
....................    }
2D91:  MOVLP  38
2D92:  GOTO   041 (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0FF2:  MOVLB  0A
0FF3:  MOVF   5C,W
0FF4:  SUBWF  5B,W
0FF5:  BTFSC  03.2
0FF6:  GOTO   7F9
0FF7:  MOVLW  00
0FF8:  GOTO   7FA
0FF9:  MOVLW  01
0FFA:  MOVWF  78
0FFB:  MOVLB  00
0FFC:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
2D93:  MOVLB  0C
2D94:  CLRF   6E
2D95:  CLRF   6F
2D96:  MOVLB  0D
2D97:  CLRF   20
2D98:  CLRF   21
2D99:  CLRF   22
2D9A:  CLRF   23
2D9B:  CLRF   24
2D9C:  CLRF   25
2D9D:  CLRF   26
....................    
....................    if (mis_type == MEAURE_DATA)
2D9E:  MOVLB  0C
2D9F:  MOVF   6D,F
2DA0:  BTFSS  03.2
2DA1:  GOTO   5B6
....................    {
....................       mis_struct.start_address   = 0x04EC0000;
2DA2:  MOVLW  04
2DA3:  MOVLB  0D
2DA4:  MOVWF  21
2DA5:  MOVLW  EC
2DA6:  MOVWF  20
2DA7:  MOVLB  0C
2DA8:  CLRF   6F
2DA9:  CLRF   6E
....................       mis_struct.end_address     = 0x056BFFFF;
2DAA:  MOVLW  05
2DAB:  MOVLB  0D
2DAC:  MOVWF  25
2DAD:  MOVLW  6B
2DAE:  MOVWF  24
2DAF:  MOVLW  FF
2DB0:  MOVWF  23
2DB1:  MOVWF  22
....................       mis_struct.mission_flag    = 0b10000000;
2DB2:  MOVLW  80
2DB3:  MOVWF  26
....................    }
2DB4:  GOTO   5D9
2DB5:  MOVLB  0C
....................    else if (mis_type == PICLOG_DATA)
2DB6:  DECFSZ 6D,W
2DB7:  GOTO   5CC
....................    {
....................       mis_struct.start_address   = 0x04DC0000;
2DB8:  MOVLW  04
2DB9:  MOVLB  0D
2DBA:  MOVWF  21
2DBB:  MOVLW  DC
2DBC:  MOVWF  20
2DBD:  MOVLB  0C
2DBE:  CLRF   6F
2DBF:  CLRF   6E
....................       mis_struct.end_address     = 0x04EBFFFF;
2DC0:  MOVLW  04
2DC1:  MOVLB  0D
2DC2:  MOVWF  25
2DC3:  MOVLW  EB
2DC4:  MOVWF  24
2DC5:  MOVLW  FF
2DC6:  MOVWF  23
2DC7:  MOVWF  22
....................       mis_struct.mission_flag    = 0b10000001;  
2DC8:  MOVLW  81
2DC9:  MOVWF  26
....................    }
2DCA:  GOTO   5D9
2DCB:  MOVLB  0C
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
2DCC:  MOVLW  FF
2DCD:  MOVLB  0D
2DCE:  MOVWF  21
2DCF:  MOVWF  20
2DD0:  MOVLB  0C
2DD1:  MOVWF  6F
2DD2:  MOVWF  6E
....................       mis_struct.end_address     = 0xFFFFFFFF;
2DD3:  MOVLB  0D
2DD4:  MOVWF  25
2DD5:  MOVWF  24
2DD6:  MOVWF  23
2DD7:  MOVWF  22
....................       mis_struct.mission_flag    = 0b11111111; 
2DD8:  MOVWF  26
....................    }
....................    
....................    return mis_struct;
2DD9:  MOVLW  6E
2DDA:  MOVWF  78
2DDB:  MOVLW  06
2DDC:  MOVWF  79
2DDD:  MOVLP  38
2DDE:  MOVLB  00
2DDF:  GOTO   055 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
1BD4:  MOVLW  F5
1BD5:  MOVLB  03
1BD6:  MOVWF  11
1BD7:  MOVLW  03
1BD8:  MOVWF  12
1BD9:  MOVLP  08
1BDA:  MOVLB  00
1BDB:  CALL   119
1BDC:  MOVLP  18
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
1BDD:  MOVLB  0B
1BDE:  MOVF   25,W
1BDF:  MOVWF  04
1BE0:  MOVF   26,W
1BE1:  MOVWF  05
1BE2:  MOVIW  [FSR0+00],W
1BE3:  MOVWF  27
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
1BE4:  MOVF   25,W
1BE5:  MOVWF  04
1BE6:  MOVF   26,W
1BE7:  MOVWF  05
1BE8:  ADDFSR 01,FSR0
1BE9:  MOVF   00,W
1BEA:  CLRF   31
1BEB:  CLRF   30
1BEC:  CLRF   2F
1BED:  MOVWF  2E
1BEE:  MOVWF  31
1BEF:  CLRF   2E
1BF0:  CLRF   2F
1BF1:  CLRF   30
1BF2:  MOVF   25,W
1BF3:  MOVWF  04
1BF4:  MOVF   26,W
1BF5:  MOVWF  05
1BF6:  ADDFSR 02,FSR0
1BF7:  MOVF   00,W
1BF8:  CLRF   36
1BF9:  CLRF   35
1BFA:  CLRF   34
1BFB:  MOVWF  33
1BFC:  MOVF   34,W
1BFD:  MOVWF  7A
1BFE:  MOVF   33,W
1BFF:  MOVWF  79
1C00:  CLRF   77
1C01:  CLRF   78
1C02:  MOVF   77,W
1C03:  IORWF  2E,F
1C04:  MOVF   78,W
1C05:  IORWF  2F,F
1C06:  MOVF   33,W
1C07:  IORWF  30,F
1C08:  MOVF   34,W
1C09:  IORWF  31,F
1C0A:  MOVF   25,W
1C0B:  MOVWF  04
1C0C:  MOVF   26,W
1C0D:  MOVWF  05
1C0E:  ADDFSR 03,FSR0
1C0F:  MOVF   00,W
1C10:  CLRF   36
1C11:  CLRF   35
1C12:  CLRF   34
1C13:  MOVWF  33
1C14:  MOVF   35,W
1C15:  MOVWF  7A
1C16:  MOVF   34,W
1C17:  MOVWF  79
1C18:  MOVF   33,W
1C19:  MOVWF  78
1C1A:  CLRF   77
1C1B:  MOVF   77,W
1C1C:  IORWF  2E,F
1C1D:  MOVF   33,W
1C1E:  IORWF  2F,F
1C1F:  MOVF   34,W
1C20:  IORWF  30,F
1C21:  MOVF   35,W
1C22:  IORWF  31,F
1C23:  MOVF   25,W
1C24:  MOVWF  04
1C25:  MOVF   26,W
1C26:  MOVWF  05
1C27:  MOVIW  [FSR0+04],W
1C28:  MOVWF  77
1C29:  CLRF   78
1C2A:  CLRF   79
1C2B:  CLRF   7A
1C2C:  MOVF   77,W
1C2D:  IORWF  2E,W
1C2E:  MOVWF  28
1C2F:  MOVF   78,W
1C30:  IORWF  2F,W
1C31:  MOVWF  29
1C32:  MOVF   79,W
1C33:  IORWF  30,W
1C34:  MOVWF  2A
1C35:  MOVF   7A,W
1C36:  IORWF  31,W
1C37:  MOVWF  2B
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
1C38:  MOVF   25,W
1C39:  MOVWF  04
1C3A:  MOVF   26,W
1C3B:  MOVWF  05
1C3C:  ADDFSR 05,FSR0
1C3D:  MOVF   00,W
1C3E:  CLRF   2F
1C3F:  MOVWF  2E
1C40:  MOVWF  2F
1C41:  CLRF   2E
1C42:  MOVF   25,W
1C43:  MOVWF  04
1C44:  MOVF   26,W
1C45:  MOVWF  05
1C46:  MOVIW  [FSR0+06],W
1C47:  CLRF   7A
1C48:  IORWF  2E,W
1C49:  MOVWF  2C
1C4A:  MOVF   7A,W
1C4B:  IORWF  2F,W
1C4C:  MOVWF  2D
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
1C4D:  MOVLW  FF
1C4E:  MOVLB  03
1C4F:  MOVWF  11
1C50:  MOVLW  03
1C51:  MOVWF  12
1C52:  BCF    03.0
1C53:  MOVLW  0C
1C54:  MOVLB  0C
1C55:  MOVWF  6A
1C56:  MOVLP  08
1C57:  MOVLB  00
1C58:  CALL   167
1C59:  MOVLP  18
1C5A:  MOVLB  0B
1C5B:  MOVF   27,W
1C5C:  MOVLB  0C
1C5D:  MOVWF  6A
1C5E:  MOVLW  37
1C5F:  MOVWF  6B
1C60:  MOVLP  08
1C61:  MOVLB  00
1C62:  CALL   4BA
1C63:  MOVLP  18
1C64:  MOVLW  0D
1C65:  MOVLB  0D
1C66:  MOVWF  37
1C67:  MOVLP  08
1C68:  MOVLB  00
1C69:  CALL   0F4
1C6A:  MOVLP  18
1C6B:  MOVLW  0A
1C6C:  MOVLB  0D
1C6D:  MOVWF  37
1C6E:  MOVLP  08
1C6F:  MOVLB  00
1C70:  CALL   0F4
1C71:  MOVLP  18
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
1C72:  MOVLW  09
1C73:  MOVLB  03
1C74:  MOVWF  11
1C75:  MOVLW  04
1C76:  MOVWF  12
1C77:  BCF    03.0
1C78:  MOVLW  0E
1C79:  MOVLB  0C
1C7A:  MOVWF  6A
1C7B:  MOVLP  08
1C7C:  MOVLB  00
1C7D:  CALL   167
1C7E:  MOVLP  18
1C7F:  MOVLB  0B
1C80:  MOVF   2B,W
1C81:  MOVLB  0C
1C82:  MOVWF  6A
1C83:  MOVLW  37
1C84:  MOVWF  6B
1C85:  MOVLP  08
1C86:  MOVLB  00
1C87:  CALL   4BA
1C88:  MOVLP  18
1C89:  MOVLB  0B
1C8A:  MOVF   2A,W
1C8B:  MOVLB  0C
1C8C:  MOVWF  6A
1C8D:  MOVLW  37
1C8E:  MOVWF  6B
1C8F:  MOVLP  08
1C90:  MOVLB  00
1C91:  CALL   4BA
1C92:  MOVLP  18
1C93:  MOVLB  0B
1C94:  MOVF   29,W
1C95:  MOVLB  0C
1C96:  MOVWF  6A
1C97:  MOVLW  37
1C98:  MOVWF  6B
1C99:  MOVLP  08
1C9A:  MOVLB  00
1C9B:  CALL   4BA
1C9C:  MOVLP  18
1C9D:  MOVLB  0B
1C9E:  MOVF   28,W
1C9F:  MOVLB  0C
1CA0:  MOVWF  6A
1CA1:  MOVLW  37
1CA2:  MOVWF  6B
1CA3:  MOVLP  08
1CA4:  MOVLB  00
1CA5:  CALL   4BA
1CA6:  MOVLP  18
1CA7:  MOVLW  0D
1CA8:  MOVLB  0D
1CA9:  MOVWF  37
1CAA:  MOVLP  08
1CAB:  MOVLB  00
1CAC:  CALL   0F4
1CAD:  MOVLP  18
1CAE:  MOVLW  0A
1CAF:  MOVLB  0D
1CB0:  MOVWF  37
1CB1:  MOVLP  08
1CB2:  MOVLB  00
1CB3:  CALL   0F4
1CB4:  MOVLP  18
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
1CB5:  MOVLW  14
1CB6:  MOVLB  03
1CB7:  MOVWF  11
1CB8:  MOVLW  04
1CB9:  MOVWF  12
1CBA:  BCF    03.0
1CBB:  MOVLW  0E
1CBC:  MOVLB  0C
1CBD:  MOVWF  6A
1CBE:  MOVLP  08
1CBF:  MOVLB  00
1CC0:  CALL   167
1CC1:  MOVLP  18
1CC2:  MOVLB  0B
1CC3:  MOVF   2D,W
1CC4:  MOVLB  0C
1CC5:  MOVWF  6A
1CC6:  MOVLW  37
1CC7:  MOVWF  6B
1CC8:  MOVLP  08
1CC9:  MOVLB  00
1CCA:  CALL   4BA
1CCB:  MOVLP  18
1CCC:  MOVLB  0B
1CCD:  MOVF   2C,W
1CCE:  MOVLB  0C
1CCF:  MOVWF  6A
1CD0:  MOVLW  37
1CD1:  MOVWF  6B
1CD2:  MOVLP  08
1CD3:  MOVLB  00
1CD4:  CALL   4BA
1CD5:  MOVLP  18
1CD6:  MOVLW  0D
1CD7:  MOVLB  0D
1CD8:  MOVWF  37
1CD9:  MOVLP  08
1CDA:  MOVLB  00
1CDB:  CALL   0F4
1CDC:  MOVLP  18
1CDD:  MOVLW  0A
1CDE:  MOVLB  0D
1CDF:  MOVWF  37
1CE0:  MOVLP  08
1CE1:  MOVLB  00
1CE2:  CALL   0F4
1CE3:  MOVLP  18
.................... 
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_START); // Log the command execution
1CE4:  MOVLB  0B
1CE5:  MOVF   27,W
1CE6:  MOVLB  0C
1CE7:  MOVWF  30
1CE8:  MOVLW  01
1CE9:  MOVWF  31
1CEA:  MOVLB  00
1CEB:  CALL   000
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    piclog_make(dummy_cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
1CEC:  MOVLB  0B
1CED:  MOVF   27,W
1CEE:  MOVLB  0C
1CEF:  MOVWF  30
1CF0:  MOVLW  02
1CF1:  MOVWF  31
1CF2:  MOVLB  00
1CF3:  CALL   000
....................    fprintf(PC, "End MODE DUMMY\r\n");
1CF4:  MOVLW  1F
1CF5:  MOVLB  03
1CF6:  MOVWF  11
1CF7:  MOVLW  04
1CF8:  MOVWF  12
1CF9:  MOVLP  08
1CFA:  MOVLB  00
1CFB:  CALL   119
1CFC:  MOVLP  18
1CFD:  MOVLP  28
1CFE:  GOTO   558 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    //adc_init();
....................    sweep(parameter);
....................    
....................    
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
2B7C:  MOVLW  42
2B7D:  MOVLB  03
2B7E:  MOVWF  11
2B7F:  MOVLW  04
2B80:  MOVWF  12
2B81:  MOVLP  08
2B82:  MOVLB  00
2B83:  CALL   119
2B84:  MOVLP  28
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
2B85:  MOVLW  64
2B86:  MOVLB  0B
2B87:  MOVWF  25
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
2B88:  MOVLW  49
2B89:  MOVLB  03
2B8A:  MOVWF  11
2B8B:  MOVLW  04
2B8C:  MOVWF  12
2B8D:  BCF    03.0
2B8E:  MOVLW  0E
2B8F:  MOVLB  0C
2B90:  MOVWF  6A
2B91:  MOVLP  08
2B92:  MOVLB  00
2B93:  CALL   167
2B94:  MOVLP  28
2B95:  MOVLB  0B
2B96:  MOVF   25,W
2B97:  MOVLB  0C
2B98:  MOVWF  66
2B99:  MOVLW  1B
2B9A:  MOVWF  67
2B9B:  MOVLP  18
2B9C:  MOVLB  00
2B9D:  CALL   4FF
2B9E:  MOVLP  28
2B9F:  MOVLW  0D
2BA0:  MOVLB  0D
2BA1:  MOVWF  37
2BA2:  MOVLP  08
2BA3:  MOVLB  00
2BA4:  CALL   0F4
2BA5:  MOVLP  28
2BA6:  MOVLW  0A
2BA7:  MOVLB  0D
2BA8:  MOVWF  37
2BA9:  MOVLP  08
2BAA:  MOVLB  00
2BAB:  CALL   0F4
2BAC:  MOVLP  28
....................    output_high(CONNECT_CIGS);
2BAD:  MOVLB  01
2BAE:  BCF    10.0
2BAF:  MOVLB  02
2BB0:  BSF    10.0
.................... 
....................    // read temperature
....................    set_adc_channel(TEMP_TOP);
2BB1:  MOVLW  20
2BB2:  MOVWF  78
2BB3:  MOVLB  01
2BB4:  MOVF   1D,W
2BB5:  ANDLW  83
2BB6:  IORWF  78,W
2BB7:  MOVWF  1D
2BB8:  MOVLW  0F
2BB9:  MOVWF  78
2BBA:  MOVF   1F,W
2BBB:  ANDLW  F0
2BBC:  IORWF  78,W
2BBD:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
2BBE:  MOVLW  0D
2BBF:  MOVWF  77
2BC0:  DECFSZ 77,F
2BC1:  GOTO   3C0
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2BC2:  MOVLB  0B
2BC3:  CLRF   30
2BC4:  MOVLB  00
2BC5:  CALL   000
2BC6:  MOVF   79,W
2BC7:  MOVLB  08
2BC8:  MOVWF  3B
2BC9:  MOVF   78,W
2BCA:  MOVWF  3A
....................    set_adc_channel(TEMP_BOT);
2BCB:  MOVLW  0C
2BCC:  MOVWF  78
2BCD:  MOVLB  01
2BCE:  MOVF   1D,W
2BCF:  ANDLW  83
2BD0:  IORWF  78,W
2BD1:  MOVWF  1D
2BD2:  MOVLW  0F
2BD3:  MOVWF  78
2BD4:  MOVF   1F,W
2BD5:  ANDLW  F0
2BD6:  IORWF  78,W
2BD7:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
2BD8:  MOVLW  0D
2BD9:  MOVWF  77
2BDA:  DECFSZ 77,F
2BDB:  GOTO   3DA
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
2BDC:  MOVLB  0B
2BDD:  CLRF   30
2BDE:  MOVLB  00
2BDF:  CALL   000
2BE0:  MOVF   79,W
2BE1:  MOVLB  08
2BE2:  MOVWF  3D
2BE3:  MOVF   78,W
2BE4:  MOVWF  3C
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
2BE5:  MOVLW  00
2BE6:  MOVWF  78
2BE7:  MOVLB  01
2BE8:  MOVF   1D,W
2BE9:  ANDLW  83
2BEA:  IORWF  78,W
2BEB:  MOVWF  1D
2BEC:  MOVLW  0F
2BED:  MOVWF  78
2BEE:  MOVF   1F,W
2BEF:  ANDLW  F0
2BF0:  IORWF  78,W
2BF1:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
2BF2:  MOVLW  0D
2BF3:  MOVWF  77
2BF4:  DECFSZ 77,F
2BF5:  GOTO   3F4
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
2BF6:  MOVLB  0B
2BF7:  CLRF   2B
2BF8:  CLRF   2A
2BF9:  MOVF   2B,F
2BFA:  BTFSS  03.2
2BFB:  GOTO   49F
2BFC:  MOVF   25,W
2BFD:  SUBWF  2A,W
2BFE:  BTFSC  03.0
2BFF:  GOTO   49F
....................    {    
....................       // set DAC value
....................       dac_write(count);
2C00:  MOVF   2A,W
2C01:  MOVLB  02
2C02:  MOVWF  19
....................       delay_us(100); // wait for the DAC to stabilize
2C03:  MOVLW  85
2C04:  MOVWF  77
2C05:  DECFSZ 77,F
2C06:  GOTO   405
.................... 
....................       // read CIGS voltage and current
....................       set_adc_channel(CIGS_VOLT);       
2C07:  MOVLW  00
2C08:  MOVWF  78
2C09:  MOVLB  01
2C0A:  MOVF   1D,W
2C0B:  ANDLW  83
2C0C:  IORWF  78,W
2C0D:  MOVWF  1D
2C0E:  MOVLW  0F
2C0F:  MOVWF  78
2C10:  MOVF   1F,W
2C11:  ANDLW  F0
2C12:  IORWF  78,W
2C13:  MOVWF  1F
....................       delay_us(10); // wait for the ADC to stabilize
2C14:  MOVLW  0D
2C15:  MOVWF  77
2C16:  DECFSZ 77,F
2C17:  GOTO   416
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
2C18:  BCF    03.0
2C19:  MOVLB  0B
2C1A:  RLF    2A,W
2C1B:  MOVWF  2E
2C1C:  RLF    2B,W
2C1D:  MOVWF  2F
2C1E:  BCF    03.0
2C1F:  RLF    2E,W
2C20:  MOVWF  79
2C21:  RLF    2F,W
2C22:  MOVWF  7A
2C23:  MOVF   79,W
2C24:  ADDLW  3A
2C25:  MOVWF  2E
2C26:  MOVLW  20
2C27:  ADDWFC 7A,W
2C28:  MOVWF  2F
2C29:  CLRF   30
2C2A:  MOVLB  00
2C2B:  CALL   000
2C2C:  MOVLB  0B
2C2D:  MOVF   2F,W
2C2E:  MOVWF  05
2C2F:  MOVF   2E,W
2C30:  MOVWF  04
2C31:  MOVF   78,W
2C32:  MOVWF  00
2C33:  MOVF   79,W
2C34:  MOVWI  W,[FSR0+01]
....................       
....................       set_adc_channel(CIGS_CURR);
2C35:  MOVLW  04
2C36:  MOVWF  78
2C37:  MOVLB  01
2C38:  MOVF   1D,W
2C39:  ANDLW  83
2C3A:  IORWF  78,W
2C3B:  MOVWF  1D
2C3C:  MOVLW  0F
2C3D:  MOVWF  78
2C3E:  MOVF   1F,W
2C3F:  ANDLW  F0
2C40:  IORWF  78,W
2C41:  MOVWF  1F
....................       current = 0; // reset current value
2C42:  MOVLB  0B
2C43:  CLRF   29
2C44:  CLRF   28
2C45:  CLRF   27
2C46:  CLRF   26
....................       for(int k=0; k<10; k++)
2C47:  CLRF   2C
2C48:  MOVF   2C,W
2C49:  SUBLW  09
2C4A:  BTFSS  03.0
2C4B:  GOTO   45D
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
2C4C:  MOVLW  0D
2C4D:  MOVWF  77
2C4E:  DECFSZ 77,F
2C4F:  GOTO   44E
....................             current = current + ad7490_read(AD7490_VIN0); 
2C50:  CLRF   30
2C51:  MOVLB  00
2C52:  CALL   000
2C53:  MOVF   78,W
2C54:  MOVLB  0B
2C55:  ADDWF  26,F
2C56:  MOVF   79,W
2C57:  ADDWFC 27,F
2C58:  MOVLW  00
2C59:  ADDWFC 28,F
2C5A:  ADDWFC 29,F
2C5B:  INCF   2C,F
2C5C:  GOTO   448
....................       }    
....................       
....................       current = current / 10; // average the current value
2C5D:  BCF    03.1
2C5E:  MOVF   29,W
2C5F:  MOVLB  0D
2C60:  MOVWF  2B
2C61:  MOVLB  0B
2C62:  MOVF   28,W
2C63:  MOVLB  0D
2C64:  MOVWF  2A
2C65:  MOVLB  0B
2C66:  MOVF   27,W
2C67:  MOVLB  0D
2C68:  MOVWF  29
2C69:  MOVLB  0B
2C6A:  MOVF   26,W
2C6B:  MOVLB  0D
2C6C:  MOVWF  28
2C6D:  CLRF   2F
2C6E:  CLRF   2E
2C6F:  CLRF   2D
2C70:  MOVLW  0A
2C71:  MOVWF  2C
2C72:  MOVLP  20
2C73:  MOVLB  00
2C74:  CALL   72D
2C75:  MOVLP  28
2C76:  MOVF   7A,W
2C77:  MOVLB  0B
2C78:  MOVWF  29
2C79:  MOVF   79,W
2C7A:  MOVWF  28
2C7B:  MOVF   78,W
2C7C:  MOVWF  27
2C7D:  MOVF   77,W
2C7E:  MOVWF  26
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
2C7F:  MOVLW  0D
2C80:  MOVWF  77
2C81:  DECFSZ 77,F
2C82:  GOTO   481
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
2C83:  BCF    03.0
2C84:  RLF    2A,W
2C85:  MOVWF  2E
2C86:  RLF    2B,W
2C87:  MOVWF  2F
2C88:  MOVLW  01
2C89:  ADDWF  2E,F
2C8A:  MOVLW  00
2C8B:  ADDWFC 2F,F
2C8C:  BCF    03.0
2C8D:  RLF    2E,W
2C8E:  MOVWF  79
2C8F:  RLF    2F,W
2C90:  MOVWF  7A
2C91:  MOVF   79,W
2C92:  ADDLW  3A
2C93:  MOVWF  04
2C94:  MOVLW  20
2C95:  ADDWFC 7A,W
2C96:  MOVWF  05
2C97:  MOVF   26,W
2C98:  MOVWF  00
2C99:  MOVF   27,W
2C9A:  MOVWI  W,[FSR0+01]
2C9B:  INCF   2A,F
2C9C:  BTFSC  03.2
2C9D:  INCF   2B,F
2C9E:  GOTO   3F9
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
2C9F:  MOVLW  53
2CA0:  MOVLB  03
2CA1:  MOVWF  11
2CA2:  MOVLW  04
2CA3:  MOVWF  12
2CA4:  MOVLP  08
2CA5:  MOVLB  00
2CA6:  CALL   119
2CA7:  MOVLP  28
....................    // read PD value
....................    set_adc_channel(PD);
2CA8:  MOVLW  00
2CA9:  MOVWF  78
2CAA:  MOVLB  01
2CAB:  MOVF   1D,W
2CAC:  ANDLW  83
2CAD:  IORWF  78,W
2CAE:  MOVWF  1D
2CAF:  MOVLW  0F
2CB0:  MOVWF  78
2CB1:  MOVF   1F,W
2CB2:  ANDLW  F0
2CB3:  IORWF  78,W
2CB4:  MOVWF  1F
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS);
2CB5:  BCF    10.0
2CB6:  MOVLB  02
2CB7:  BCF    10.0
2CB8:  MOVLB  00
2CB9:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... #separate
.................... void mode_test_iv(unsigned int8 *uplinkcmd[])
*
1E61:  MOVLB  0B
1E62:  MOVF   25,W
1E63:  MOVWF  04
1E64:  MOVF   26,W
1E65:  MOVWF  05
1E66:  MOVIW  [FSR0+01],W
1E67:  MOVWF  27
.................... {
....................    
....................    unsigned int8 measurement_step = uplinkcmd[1]; // Get the measurement step from the parameter array
....................    fprintf(PC, "Start MODE TEST IV\r\n");
1E68:  MOVLW  8E
1E69:  MOVLB  03
1E6A:  MOVWF  11
1E6B:  MOVLW  04
1E6C:  MOVWF  12
1E6D:  MOVLP  08
1E6E:  MOVLB  00
1E6F:  CALL   119
1E70:  MOVLP  18
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
1E71:  MOVLW  99
1E72:  MOVLB  03
1E73:  MOVWF  11
1E74:  MOVLW  04
1E75:  MOVWF  12
1E76:  BCF    03.0
1E77:  MOVLW  0E
1E78:  MOVLB  0C
1E79:  MOVWF  6A
1E7A:  MOVLP  08
1E7B:  MOVLB  00
1E7C:  CALL   167
1E7D:  MOVLP  18
1E7E:  MOVLB  0B
1E7F:  MOVF   27,W
1E80:  MOVLB  0C
1E81:  MOVWF  66
1E82:  MOVLW  1B
1E83:  MOVWF  67
1E84:  MOVLB  00
1E85:  CALL   4FF
1E86:  MOVLW  0D
1E87:  MOVLB  0D
1E88:  MOVWF  37
1E89:  MOVLP  08
1E8A:  MOVLB  00
1E8B:  CALL   0F4
1E8C:  MOVLP  18
1E8D:  MOVLW  0A
1E8E:  MOVLB  0D
1E8F:  MOVWF  37
1E90:  MOVLP  08
1E91:  MOVLB  00
1E92:  CALL   0F4
1E93:  MOVLP  18
....................    //unsigned int16 test = 0x9330;
....................    //fprintf (PC, "Test value: %04LX\r\n", test);
....................    output_high(EN_MEAS_VOL);
1E94:  MOVLB  01
1E95:  BCF    0C.5
1E96:  MOVLB  02
1E97:  BSF    0C.5
....................    output_high(CONNECT_CIGS);
1E98:  MOVLB  01
1E99:  BCF    10.0
1E9A:  MOVLB  02
1E9B:  BSF    10.0
....................    output_low(EN_NPWR); // Enable NPWR
1E9C:  MOVLB  01
1E9D:  BCF    0C.4
1E9E:  MOVLB  02
1E9F:  BCF    0C.4
....................    unsigned int16 readdata;
....................    //setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD); 
....................    //delay_ms(1); // wait for the DAC to stabilize  
.................... 
....................    sweep(uplinkcmd); // Call the sweep function with the measurement step
1EA0:  MOVLB  0B
1EA1:  MOVF   26,W
1EA2:  MOVWF  35
1EA3:  MOVF   25,W
1EA4:  MOVWF  34
1EA5:  MOVLP  20
1EA6:  MOVLB  00
1EA7:  GOTO   000
1EA8:  MOVLP  18
.................... 
....................    fprintf(PC, "End MODE TEST IV\r\n");
1EA9:  MOVLW  A3
1EAA:  MOVLB  03
1EAB:  MOVWF  11
1EAC:  MOVLW  04
1EAD:  MOVWF  12
1EAE:  MOVLP  08
1EAF:  MOVLB  00
1EB0:  CALL   119
1EB1:  MOVLP  18
....................    output_low(EN_MEAS_VOL);
1EB2:  MOVLB  01
1EB3:  BCF    0C.5
1EB4:  MOVLB  02
1EB5:  BCF    0C.5
....................    output_low(CONNECT_CIGS);
1EB6:  MOVLB  01
1EB7:  BCF    10.0
1EB8:  MOVLB  02
1EB9:  BCF    10.0
....................    output_high(EN_NPWR); // Disable NPWR
1EBA:  MOVLB  01
1EBB:  BCF    0C.4
1EBC:  MOVLB  02
1EBD:  BSF    0C.4
.................... 
....................    fprintf(PC, "Add SMF que\r\n");
1EBE:  MOVLW  AD
1EBF:  MOVLB  03
1EC0:  MOVWF  11
1EC1:  MOVLW  04
1EC2:  MOVWF  12
1EC3:  MOVLP  08
1EC4:  MOVLB  00
1EC5:  CALL   119
1EC6:  MOVLP  18
....................    SmfDataStruct data;
....................    data.mission_type = MEAURE_DATA; // コピーする目的のデータ種別
1EC7:  MOVLB  0B
1EC8:  BCF    2A.0
....................    data.src = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter - misf_meas_uncopyed_counter; // コピー元のMIS_FMのアドレス
1EC9:  MOVLB  08
1ECA:  MOVF   52,W
1ECB:  MOVLB  0B
1ECC:  MOVWF  34
1ECD:  MOVLB  08
1ECE:  MOVF   53,W
1ECF:  MOVLB  0B
1ED0:  MOVWF  35
1ED1:  MOVLW  16
1ED2:  MOVLB  08
1ED3:  ADDWF  54,W
1ED4:  MOVLB  0B
1ED5:  MOVWF  36
1ED6:  MOVLW  00
1ED7:  MOVLB  08
1ED8:  ADDWFC 55,W
1ED9:  MOVLB  0B
1EDA:  MOVWF  37
1EDB:  MOVLB  08
1EDC:  MOVF   56,W
1EDD:  MOVLB  0B
1EDE:  SUBWF  34,W
1EDF:  MOVWF  2B
1EE0:  MOVLB  08
1EE1:  MOVF   57,W
1EE2:  MOVLB  0B
1EE3:  SUBWFC 35,W
1EE4:  MOVWF  2C
1EE5:  MOVLB  08
1EE6:  MOVF   58,W
1EE7:  MOVLB  0B
1EE8:  SUBWFC 36,W
1EE9:  MOVWF  2D
1EEA:  MOVLB  08
1EEB:  MOVF   59,W
1EEC:  MOVLB  0B
1EED:  SUBWFC 37,W
1EEE:  MOVWF  2E
....................    data.size = misf_meas_uncopyed_counter; // コピーするデータのサイズ
1EEF:  MOVLB  08
1EF0:  MOVF   59,W
1EF1:  MOVLB  0B
1EF2:  MOVWF  32
1EF3:  MOVLB  08
1EF4:  MOVF   58,W
1EF5:  MOVLB  0B
1EF6:  MOVWF  31
1EF7:  MOVLB  08
1EF8:  MOVF   57,W
1EF9:  MOVLB  0B
1EFA:  MOVWF  30
1EFB:  MOVLB  08
1EFC:  MOVF   56,W
1EFD:  MOVLB  0B
1EFE:  MOVWF  2F
....................    enqueue_smf_data(&data); // SMFへのデータコピーを実行する
1EFF:  MOVLW  23
1F00:  MOVWF  35
1F01:  MOVLW  7A
1F02:  MOVWF  34
1F03:  MOVLB  00
1F04:  GOTO   5A5
1F05:  MOVLP  28
1F06:  GOTO   558 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
1F07:  MOVLW  B4
1F08:  MOVLB  03
1F09:  MOVWF  11
1F0A:  MOVLW  04
1F0B:  MOVWF  12
1F0C:  MOVLP  08
1F0D:  MOVLB  00
1F0E:  CALL   119
1F0F:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
1F10:  MOVLB  0B
1F11:  MOVF   25,W
1F12:  MOVWF  04
1F13:  MOVF   26,W
1F14:  MOVWF  05
1F15:  MOVIW  [FSR0+00],W
1F16:  MOVWF  27
....................    piclog_make(cmd, 0x00); // Log the command execution
1F17:  MOVF   27,W
1F18:  MOVLB  0C
1F19:  MOVWF  30
1F1A:  CLRF   31
1F1B:  MOVLB  00
1F1C:  CALL   000
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
1F1D:  MOVLB  0B
1F1E:  CLRF   2B
1F1F:  CLRF   2A
1F20:  CLRF   29
1F21:  CLRF   28
1F22:  MOVF   2B,F
1F23:  BTFSS  03.2
1F24:  GOTO   751
1F25:  MOVF   2A,W
1F26:  SUBLW  F4
1F27:  BTFSS  03.0
1F28:  GOTO   751
1F29:  BTFSS  03.2
1F2A:  GOTO   72F
1F2B:  MOVF   29,W
1F2C:  SUBLW  23
1F2D:  BTFSS  03.0
1F2E:  GOTO   751
....................       sector_erase(mis_fm, address); // Erase each sector
1F2F:  MOVLB  08
1F30:  MOVF   5D,W
1F31:  MOVLB  0B
1F32:  MOVWF  2F
1F33:  MOVLB  08
1F34:  MOVF   5C,W
1F35:  MOVLB  0B
1F36:  MOVWF  2E
1F37:  MOVLB  08
1F38:  MOVF   5B,W
1F39:  MOVLB  0B
1F3A:  MOVWF  2D
1F3B:  MOVLB  08
1F3C:  MOVF   5A,W
1F3D:  MOVLB  0B
1F3E:  MOVWF  2C
1F3F:  MOVF   2B,W
1F40:  MOVWF  33
1F41:  MOVF   2A,W
1F42:  MOVWF  32
1F43:  MOVF   29,W
1F44:  MOVWF  31
1F45:  MOVF   28,W
1F46:  MOVWF  30
1F47:  MOVLP  20
1F48:  MOVLB  00
1F49:  GOTO   290
1F4A:  MOVLP  18
1F4B:  MOVLW  01
1F4C:  MOVLB  0B
1F4D:  ADDWF  2A,F
1F4E:  MOVLW  00
1F4F:  ADDWFC 2B,F
1F50:  GOTO   722
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
1F51:  MOVF   27,W
1F52:  MOVLB  0C
1F53:  MOVWF  30
1F54:  MOVLW  02
1F55:  MOVWF  31
1F56:  MOVLB  00
1F57:  CALL   000
....................    fprintf(PC, "End Flash Erase All\r\n");
1F58:  MOVLW  C0
1F59:  MOVLB  03
1F5A:  MOVWF  11
1F5B:  MOVLW  04
1F5C:  MOVWF  12
1F5D:  MOVLP  08
1F5E:  MOVLB  00
1F5F:  CALL   119
1F60:  MOVLP  18
1F61:  MOVLP  28
1F62:  GOTO   558 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
....................    
....................    sector_erase(mis_fm, sector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
....................    
....................    flash_write_param.id = parameter[0];
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
....................    for (p = 0; p < flash_write_param.packetnum; p++)
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "\r\n");
....................    fprintf(PC, "End Flash Write Demo\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
....................    flash_setting(mis_fm);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
*
2448:  MOVLW  85
2449:  MOVLB  03
244A:  MOVWF  11
244B:  MOVLW  05
244C:  MOVWF  12
244D:  MOVLP  08
244E:  MOVLB  00
244F:  CALL   119
2450:  MOVLP  20
....................    piclog_make(uplinkcmd[0], PICLOG_PARAM_START); // Log the command execution
2451:  MOVLB  0B
2452:  MOVF   25,W
2453:  MOVWF  04
2454:  MOVF   26,W
2455:  MOVWF  05
2456:  ADDFSR 00,FSR0
2457:  MOVF   00,W
2458:  MOVLB  0C
2459:  MOVWF  2E
245A:  MOVWF  30
245B:  MOVLW  01
245C:  MOVWF  31
245D:  MOVLP  18
245E:  MOVLB  00
245F:  CALL   000
2460:  MOVLP  20
....................    FLASH_PARAM flash_param = {0};
2461:  MOVLB  0B
2462:  CLRF   27
2463:  CLRF   28
2464:  CLRF   29
2465:  CLRF   2A
2466:  CLRF   2B
2467:  CLRF   2C
2468:  CLRF   2D
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
2469:  MOVF   25,W
246A:  MOVWF  04
246B:  MOVF   26,W
246C:  MOVWF  05
246D:  MOVIW  [FSR0+00],W
246E:  MOVWF  27
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
246F:  MOVF   25,W
2470:  MOVWF  04
2471:  MOVF   26,W
2472:  MOVWF  05
2473:  ADDFSR 01,FSR0
2474:  MOVF   00,W
2475:  MOVLB  0C
2476:  CLRF   31
2477:  CLRF   30
2478:  CLRF   2F
2479:  MOVWF  2E
247A:  MOVWF  31
247B:  CLRF   2E
247C:  CLRF   2F
247D:  CLRF   30
247E:  MOVLB  0B
247F:  MOVF   25,W
2480:  MOVWF  04
2481:  MOVF   26,W
2482:  MOVWF  05
2483:  ADDFSR 02,FSR0
2484:  MOVF   00,W
2485:  MOVLB  0C
2486:  CLRF   36
2487:  CLRF   35
2488:  CLRF   34
2489:  MOVWF  33
248A:  MOVF   34,W
248B:  MOVWF  7A
248C:  MOVF   33,W
248D:  MOVWF  79
248E:  CLRF   77
248F:  CLRF   78
2490:  MOVF   77,W
2491:  IORWF  2E,F
2492:  MOVF   78,W
2493:  IORWF  2F,F
2494:  MOVF   33,W
2495:  IORWF  30,F
2496:  MOVF   34,W
2497:  IORWF  31,F
2498:  MOVLB  0B
2499:  MOVF   25,W
249A:  MOVWF  04
249B:  MOVF   26,W
249C:  MOVWF  05
249D:  ADDFSR 03,FSR0
249E:  MOVF   00,W
249F:  MOVLB  0C
24A0:  CLRF   36
24A1:  CLRF   35
24A2:  CLRF   34
24A3:  MOVWF  33
24A4:  MOVF   35,W
24A5:  MOVWF  7A
24A6:  MOVF   34,W
24A7:  MOVWF  79
24A8:  MOVF   33,W
24A9:  MOVWF  78
24AA:  CLRF   77
24AB:  MOVF   77,W
24AC:  IORWF  2E,F
24AD:  MOVF   33,W
24AE:  IORWF  2F,F
24AF:  MOVF   34,W
24B0:  IORWF  30,F
24B1:  MOVF   35,W
24B2:  IORWF  31,F
24B3:  MOVLB  0B
24B4:  MOVF   25,W
24B5:  MOVWF  04
24B6:  MOVF   26,W
24B7:  MOVWF  05
24B8:  MOVIW  [FSR0+04],W
24B9:  MOVWF  77
24BA:  CLRF   78
24BB:  CLRF   79
24BC:  CLRF   7A
24BD:  MOVF   77,W
24BE:  MOVLB  0C
24BF:  IORWF  2E,W
24C0:  MOVLB  0B
24C1:  MOVWF  2A
24C2:  MOVF   78,W
24C3:  MOVLB  0C
24C4:  IORWF  2F,W
24C5:  MOVLB  0B
24C6:  MOVWF  2B
24C7:  MOVF   79,W
24C8:  MOVLB  0C
24C9:  IORWF  30,W
24CA:  MOVLB  0B
24CB:  MOVWF  2C
24CC:  MOVF   7A,W
24CD:  MOVLB  0C
24CE:  IORWF  31,W
24CF:  MOVLB  0B
24D0:  MOVWF  2D
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
24D1:  MOVF   25,W
24D2:  MOVWF  04
24D3:  MOVF   26,W
24D4:  MOVWF  05
24D5:  ADDFSR 07,FSR0
24D6:  MOVF   00,W
24D7:  MOVLB  0C
24D8:  CLRF   2F
24D9:  MOVWF  2E
24DA:  MOVWF  2F
24DB:  CLRF   2E
24DC:  MOVLB  0B
24DD:  MOVF   25,W
24DE:  MOVWF  04
24DF:  MOVF   26,W
24E0:  MOVWF  05
24E1:  MOVIW  [FSR0+08],W
24E2:  CLRF   7A
24E3:  MOVLB  0C
24E4:  IORWF  2E,W
24E5:  MOVLB  0B
24E6:  MOVWF  28
24E7:  MOVF   7A,W
24E8:  MOVLB  0C
24E9:  IORWF  2F,W
24EA:  MOVLB  0B
24EB:  MOVWF  29
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
24EC:  MOVLW  8F
24ED:  MOVLB  03
24EE:  MOVWF  11
24EF:  MOVLW  05
24F0:  MOVWF  12
24F1:  BCF    03.0
24F2:  MOVLW  0C
24F3:  MOVLB  0C
24F4:  MOVWF  6A
24F5:  MOVLP  08
24F6:  MOVLB  00
24F7:  CALL   167
24F8:  MOVLP  20
24F9:  MOVLB  0B
24FA:  MOVF   27,W
24FB:  MOVLB  0C
24FC:  MOVWF  6A
24FD:  MOVLW  37
24FE:  MOVWF  6B
24FF:  MOVLP  08
2500:  MOVLB  00
2501:  CALL   4BA
2502:  MOVLP  20
2503:  MOVLW  0D
2504:  MOVLB  0D
2505:  MOVWF  37
2506:  MOVLP  08
2507:  MOVLB  00
2508:  CALL   0F4
2509:  MOVLP  20
250A:  MOVLW  0A
250B:  MOVLB  0D
250C:  MOVWF  37
250D:  MOVLP  08
250E:  MOVLB  00
250F:  CALL   0F4
2510:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
2511:  MOVLW  99
2512:  MOVLB  03
2513:  MOVWF  11
2514:  MOVLW  05
2515:  MOVWF  12
2516:  BCF    03.0
2517:  MOVLW  0E
2518:  MOVLB  0C
2519:  MOVWF  6A
251A:  MOVLP  08
251B:  MOVLB  00
251C:  CALL   167
251D:  MOVLP  20
251E:  MOVLB  0B
251F:  MOVF   2D,W
2520:  MOVLB  0C
2521:  MOVWF  6A
2522:  MOVLW  37
2523:  MOVWF  6B
2524:  MOVLP  08
2525:  MOVLB  00
2526:  CALL   4BA
2527:  MOVLP  20
2528:  MOVLB  0B
2529:  MOVF   2C,W
252A:  MOVLB  0C
252B:  MOVWF  6A
252C:  MOVLW  37
252D:  MOVWF  6B
252E:  MOVLP  08
252F:  MOVLB  00
2530:  CALL   4BA
2531:  MOVLP  20
2532:  MOVLB  0B
2533:  MOVF   2B,W
2534:  MOVLB  0C
2535:  MOVWF  6A
2536:  MOVLW  37
2537:  MOVWF  6B
2538:  MOVLP  08
2539:  MOVLB  00
253A:  CALL   4BA
253B:  MOVLP  20
253C:  MOVLB  0B
253D:  MOVF   2A,W
253E:  MOVLB  0C
253F:  MOVWF  6A
2540:  MOVLW  37
2541:  MOVWF  6B
2542:  MOVLP  08
2543:  MOVLB  00
2544:  CALL   4BA
2545:  MOVLP  20
2546:  MOVLW  0D
2547:  MOVLB  0D
2548:  MOVWF  37
2549:  MOVLP  08
254A:  MOVLB  00
254B:  CALL   0F4
254C:  MOVLP  20
254D:  MOVLW  0A
254E:  MOVLB  0D
254F:  MOVWF  37
2550:  MOVLP  08
2551:  MOVLB  00
2552:  CALL   0F4
2553:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
2554:  MOVLW  A4
2555:  MOVLB  03
2556:  MOVWF  11
2557:  MOVLW  05
2558:  MOVWF  12
2559:  BCF    03.0
255A:  MOVLW  0E
255B:  MOVLB  0C
255C:  MOVWF  6A
255D:  MOVLP  08
255E:  MOVLB  00
255F:  CALL   167
2560:  MOVLP  20
2561:  MOVLB  0B
2562:  MOVF   29,W
2563:  MOVLB  0C
2564:  MOVWF  6A
2565:  MOVLW  37
2566:  MOVWF  6B
2567:  MOVLP  08
2568:  MOVLB  00
2569:  CALL   4BA
256A:  MOVLP  20
256B:  MOVLB  0B
256C:  MOVF   28,W
256D:  MOVLB  0C
256E:  MOVWF  6A
256F:  MOVLW  37
2570:  MOVWF  6B
2571:  MOVLP  08
2572:  MOVLB  00
2573:  CALL   4BA
2574:  MOVLP  20
2575:  MOVLW  0D
2576:  MOVLB  0D
2577:  MOVWF  37
2578:  MOVLP  08
2579:  MOVLB  00
257A:  CALL   0F4
257B:  MOVLP  20
257C:  MOVLW  0A
257D:  MOVLB  0D
257E:  MOVWF  37
257F:  MOVLP  08
2580:  MOVLB  00
2581:  CALL   0F4
2582:  MOVLP  20
....................    
....................    piclog_make(flash_param.id, 0x00);
2583:  MOVLB  0B
2584:  MOVF   27,W
2585:  MOVLB  0C
2586:  MOVWF  30
2587:  CLRF   31
2588:  MOVLP  18
2589:  MOVLB  00
258A:  CALL   000
258B:  MOVLP  20
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
258C:  MOVLB  0B
258D:  CLRF   2E
258E:  CLRF   2F
258F:  CLRF   30
2590:  CLRF   31
2591:  CLRF   32
2592:  CLRF   33
2593:  CLRF   34
2594:  CLRF   35
2595:  CLRF   36
2596:  CLRF   37
2597:  CLRF   38
2598:  CLRF   39
2599:  CLRF   3A
259A:  CLRF   3B
259B:  CLRF   3C
259C:  CLRF   3D
259D:  CLRF   3E
259E:  CLRF   3F
259F:  CLRF   40
25A0:  CLRF   41
25A1:  CLRF   42
25A2:  CLRF   43
25A3:  CLRF   44
25A4:  CLRF   45
25A5:  CLRF   46
25A6:  CLRF   47
25A7:  CLRF   48
25A8:  CLRF   49
25A9:  CLRF   4A
25AA:  CLRF   4B
25AB:  CLRF   4C
25AC:  CLRF   4D
25AD:  CLRF   4E
25AE:  CLRF   4F
25AF:  CLRF   50
25B0:  CLRF   51
25B1:  CLRF   52
25B2:  CLRF   53
25B3:  CLRF   54
25B4:  CLRF   55
25B5:  CLRF   56
25B6:  CLRF   57
25B7:  CLRF   58
25B8:  CLRF   59
25B9:  CLRF   5A
25BA:  CLRF   5B
25BB:  CLRF   5C
25BC:  CLRF   5D
25BD:  CLRF   5E
25BE:  CLRF   5F
25BF:  CLRF   60
25C0:  CLRF   61
25C1:  CLRF   62
25C2:  CLRF   63
25C3:  CLRF   64
25C4:  CLRF   65
25C5:  CLRF   66
25C6:  CLRF   67
25C7:  CLRF   68
25C8:  CLRF   69
25C9:  CLRF   6A
25CA:  CLRF   6B
25CB:  CLRF   6C
25CC:  CLRF   6D
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
25CD:  MOVLW  AF
25CE:  MOVLB  03
25CF:  MOVWF  11
25D0:  MOVLW  05
25D1:  MOVWF  12
25D2:  MOVLP  08
25D3:  MOVLB  00
25D4:  CALL   119
25D5:  MOVLP  20
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
25D6:  MOVLB  08
25D7:  MOVF   5D,W
25D8:  MOVLB  0D
25D9:  MOVWF  37
25DA:  MOVLB  08
25DB:  MOVF   5C,W
25DC:  MOVLB  0D
25DD:  MOVWF  36
25DE:  MOVLB  08
25DF:  MOVF   5B,W
25E0:  MOVLB  0D
25E1:  MOVWF  35
25E2:  MOVLB  08
25E3:  MOVF   5A,W
25E4:  MOVLB  0D
25E5:  MOVWF  34
25E6:  MOVLP  08
25E7:  MOVLB  00
25E8:  CALL   353
25E9:  MOVLP  20
25EA:  MOVF   78,F
25EB:  BTFSS  03.2
25EC:  GOTO   5F7
....................       fprintf(PC, "Mission Flash is not connected\r\n");
25ED:  MOVLW  B5
25EE:  MOVLB  03
25EF:  MOVWF  11
25F0:  MOVLW  05
25F1:  MOVWF  12
25F2:  MOVLP  08
25F3:  MOVLB  00
25F4:  CALL   119
25F5:  MOVLP  20
....................       return;
25F6:  GOTO   6B6
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
25F7:  MOVLB  0C
25F8:  CLRF   27
25F9:  CLRF   26
25FA:  CLRF   25
25FB:  CLRF   24
25FC:  MOVF   27,F
25FD:  BTFSS  03.2
25FE:  GOTO   6A3
25FF:  MOVF   26,F
2600:  BTFSS  03.2
2601:  GOTO   6A3
2602:  MOVF   25,W
2603:  MOVLB  0B
2604:  SUBWF  29,W
2605:  BTFSC  03.0
2606:  GOTO   609
2607:  MOVLB  0C
2608:  GOTO   6A3
2609:  BTFSS  03.2
260A:  GOTO   611
260B:  MOVF   28,W
260C:  MOVLB  0C
260D:  SUBWF  24,W
260E:  BTFSC  03.0
260F:  GOTO   6A3
2610:  MOVLB  0B
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
2611:  MOVLB  0C
2612:  RLF    24,W
2613:  MOVWF  77
2614:  RLF    25,W
2615:  MOVWF  78
2616:  RLF    26,W
2617:  MOVWF  79
2618:  RLF    27,W
2619:  MOVWF  7A
261A:  RLF    77,F
261B:  RLF    78,F
261C:  RLF    79,F
261D:  RLF    7A,F
261E:  RLF    77,F
261F:  RLF    78,F
2620:  RLF    79,F
2621:  RLF    7A,F
2622:  RLF    77,F
2623:  RLF    78,F
2624:  RLF    79,F
2625:  RLF    7A,F
2626:  RLF    77,F
2627:  RLF    78,F
2628:  RLF    79,F
2629:  RLF    7A,F
262A:  RLF    77,F
262B:  RLF    78,F
262C:  RLF    79,F
262D:  RLF    7A,F
262E:  MOVLW  C0
262F:  ANDWF  77,F
2630:  MOVF   77,W
2631:  MOVLB  0B
2632:  ADDWF  2A,W
2633:  MOVLB  0C
2634:  MOVWF  20
2635:  MOVF   78,W
2636:  MOVLB  0B
2637:  ADDWFC 2B,W
2638:  MOVLB  0C
2639:  MOVWF  21
263A:  MOVF   79,W
263B:  MOVLB  0B
263C:  ADDWFC 2C,W
263D:  MOVLB  0C
263E:  MOVWF  22
263F:  MOVF   7A,W
2640:  MOVLB  0B
2641:  ADDWFC 2D,W
2642:  MOVLB  0C
2643:  MOVWF  23
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
2644:  MOVLB  08
2645:  MOVF   5D,W
2646:  MOVLB  0C
2647:  MOVWF  69
2648:  MOVLB  08
2649:  MOVF   5C,W
264A:  MOVLB  0C
264B:  MOVWF  68
264C:  MOVLB  08
264D:  MOVF   5B,W
264E:  MOVLB  0C
264F:  MOVWF  67
2650:  MOVLB  08
2651:  MOVF   5A,W
2652:  MOVLB  0C
2653:  MOVWF  66
2654:  MOVF   23,W
2655:  MOVWF  6D
2656:  MOVF   22,W
2657:  MOVWF  6C
2658:  MOVF   21,W
2659:  MOVWF  6B
265A:  MOVF   20,W
265B:  MOVWF  6A
265C:  MOVLW  23
265D:  MOVWF  6F
265E:  MOVLW  7E
265F:  MOVWF  6E
2660:  MOVLB  0D
2661:  CLRF   23
2662:  CLRF   22
2663:  CLRF   21
2664:  MOVLW  40
2665:  MOVWF  20
2666:  MOVLP  08
2667:  MOVLB  00
2668:  CALL   3A1
2669:  MOVLP  20
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
266A:  MOVLB  0B
266B:  CLRF   6E
266C:  MOVF   6E,W
266D:  SUBLW  3F
266E:  BTFSS  03.0
266F:  GOTO   68B
....................          fprintf(PC,"%02X ",readdata[bytecount]);
2670:  MOVLW  7E
2671:  ADDWF  6E,W
2672:  MOVWF  04
2673:  MOVLW  23
2674:  MOVWF  05
2675:  BTFSC  03.0
2676:  INCF   05,F
2677:  MOVF   00,W
2678:  MOVLB  0C
2679:  MOVWF  2E
267A:  MOVWF  6A
267B:  MOVLW  37
267C:  MOVWF  6B
267D:  MOVLP  08
267E:  MOVLB  00
267F:  CALL   4BA
2680:  MOVLP  20
2681:  MOVLW  20
2682:  MOVLB  0D
2683:  MOVWF  37
2684:  MOVLP  08
2685:  MOVLB  00
2686:  CALL   0F4
2687:  MOVLP  20
2688:  MOVLB  0B
2689:  INCF   6E,F
268A:  GOTO   66C
....................       }
....................       fprintf(PC,"\r\n");
268B:  MOVLW  0D
268C:  MOVLB  0D
268D:  MOVWF  37
268E:  MOVLP  08
268F:  MOVLB  00
2690:  CALL   0F4
2691:  MOVLP  20
2692:  MOVLW  0A
2693:  MOVLB  0D
2694:  MOVWF  37
2695:  MOVLP  08
2696:  MOVLB  00
2697:  CALL   0F4
2698:  MOVLP  20
2699:  MOVLW  01
269A:  MOVLB  0C
269B:  ADDWF  24,F
269C:  BTFSC  03.0
269D:  INCF   25,F
269E:  BTFSC  03.2
269F:  INCF   26,F
26A0:  BTFSC  03.2
26A1:  INCF   27,F
26A2:  GOTO   5FC
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
26A3:  MOVLB  0B
26A4:  MOVF   27,W
26A5:  MOVLB  0C
26A6:  MOVWF  30
26A7:  MOVLW  02
26A8:  MOVWF  31
26A9:  MOVLP  18
26AA:  MOVLB  00
26AB:  CALL   000
26AC:  MOVLP  20
....................    fprintf(PC, "End Flash Read\r\n");
26AD:  MOVLW  C6
26AE:  MOVLB  03
26AF:  MOVWF  11
26B0:  MOVLW  05
26B1:  MOVWF  12
26B2:  MOVLP  08
26B3:  MOVLB  00
26B4:  CALL   119
26B5:  MOVLP  20
26B6:  MOVLP  28
26B7:  GOTO   558 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
....................    flash_setting(mis_fm);
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
....................    fprintf(PC, "End Flash Read Address\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
....................    flash_setting(mis_fm);
....................    flash_setting(smf);
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
....................    write_data_bytes(smf, dest_address, read_data, 256);
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
1F63:  MOVLW  47
1F64:  MOVLB  03
1F65:  MOVWF  11
1F66:  MOVLW  06
1F67:  MOVWF  12
1F68:  MOVLP  08
1F69:  MOVLB  00
1F6A:  CALL   119
1F6B:  MOVLP  18
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
1F6C:  MOVLB  0B
1F6D:  MOVF   25,W
1F6E:  MOVWF  04
1F6F:  MOVF   26,W
1F70:  MOVWF  05
1F71:  ADDFSR 00,FSR0
1F72:  MOVF   00,W
1F73:  MOVWF  67
1F74:  MOVLB  0C
1F75:  MOVWF  30
1F76:  MOVLW  01
1F77:  MOVWF  31
1F78:  MOVLB  00
1F79:  CALL   000
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
1F7A:  MOVLB  0B
1F7B:  CLRF   27
1F7C:  CLRF   28
1F7D:  CLRF   29
1F7E:  CLRF   2A
1F7F:  CLRF   2B
1F80:  CLRF   2C
1F81:  CLRF   2D
1F82:  CLRF   2E
1F83:  CLRF   2F
1F84:  CLRF   30
1F85:  CLRF   31
1F86:  CLRF   32
1F87:  CLRF   33
1F88:  CLRF   34
1F89:  CLRF   35
1F8A:  CLRF   36
1F8B:  CLRF   37
1F8C:  CLRF   38
1F8D:  CLRF   39
1F8E:  CLRF   3A
1F8F:  CLRF   3B
1F90:  CLRF   3C
1F91:  CLRF   3D
1F92:  CLRF   3E
1F93:  CLRF   3F
1F94:  CLRF   40
1F95:  CLRF   41
1F96:  CLRF   42
1F97:  CLRF   43
1F98:  CLRF   44
1F99:  CLRF   45
1F9A:  CLRF   46
1F9B:  CLRF   47
1F9C:  CLRF   48
1F9D:  CLRF   49
1F9E:  CLRF   4A
1F9F:  CLRF   4B
1FA0:  CLRF   4C
1FA1:  CLRF   4D
1FA2:  CLRF   4E
1FA3:  CLRF   4F
1FA4:  CLRF   50
1FA5:  CLRF   51
1FA6:  CLRF   52
1FA7:  CLRF   53
1FA8:  CLRF   54
1FA9:  CLRF   55
1FAA:  CLRF   56
1FAB:  CLRF   57
1FAC:  CLRF   58
1FAD:  CLRF   59
1FAE:  CLRF   5A
1FAF:  CLRF   5B
1FB0:  CLRF   5C
1FB1:  CLRF   5D
1FB2:  CLRF   5E
1FB3:  CLRF   5F
1FB4:  CLRF   60
1FB5:  CLRF   61
1FB6:  CLRF   62
1FB7:  CLRF   63
1FB8:  CLRF   64
1FB9:  CLRF   65
1FBA:  CLRF   66
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
1FBB:  MOVLB  08
1FBC:  MOVF   5D,W
1FBD:  MOVLB  0D
1FBE:  MOVWF  37
1FBF:  MOVLB  08
1FC0:  MOVF   5C,W
1FC1:  MOVLB  0D
1FC2:  MOVWF  36
1FC3:  MOVLB  08
1FC4:  MOVF   5B,W
1FC5:  MOVLB  0D
1FC6:  MOVWF  35
1FC7:  MOVLB  08
1FC8:  MOVF   5A,W
1FC9:  MOVLB  0D
1FCA:  MOVWF  34
1FCB:  CLRF   3B
1FCC:  CLRF   3A
1FCD:  CLRF   39
1FCE:  CLRF   38
1FCF:  MOVLW  23
1FD0:  MOVWF  3D
1FD1:  MOVLW  77
1FD2:  MOVWF  3C
1FD3:  CLRF   3F
1FD4:  MOVLW  40
1FD5:  MOVWF  3E
1FD6:  MOVLP  08
1FD7:  MOVLB  00
1FD8:  CALL   639
1FD9:  MOVLP  18
....................    misf_init(); // Update the address area after writing
1FDA:  MOVLP  10
1FDB:  CALL   000
1FDC:  MOVLP  18
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
1FDD:  MOVLB  0B
1FDE:  MOVF   25,W
1FDF:  MOVWF  04
1FE0:  MOVF   26,W
1FE1:  MOVWF  05
1FE2:  ADDFSR 00,FSR0
1FE3:  MOVF   00,W
1FE4:  MOVWF  67
1FE5:  MOVLB  0C
1FE6:  MOVWF  30
1FE7:  MOVLW  02
1FE8:  MOVWF  31
1FE9:  MOVLB  00
1FEA:  CALL   000
....................    fprintf(PC, "End Flash Address Reset\r\n");
1FEB:  MOVLW  55
1FEC:  MOVLB  03
1FED:  MOVWF  11
1FEE:  MOVLW  06
1FEF:  MOVWF  12
1FF0:  MOVLP  08
1FF1:  MOVLB  00
1FF2:  CALL   119
1FF3:  MOVLP  18
1FF4:  MOVLP  28
1FF5:  GOTO   558 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... /*
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
....................         status[i+1] = mission_type.mission_flag;
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
....................     *mis_start_address = mission_type->start_address;
....................     *mis_end_address = mission_type->end_address;
....................     *write_src = smf_data->src;
....................     *write_size = smf_data->size;
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
.................... 
....................     fprintf(PC, "Size area read\r\n");
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
....................         subsector_4kByte_erase(smf, addr);
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
....................         subsector_4kByte_erase(smf, addr);
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................         src_addr += chunk;
....................         data_write_addr += chunk;
....................         *used_size += chunk;
....................         remaining -= chunk;
....................     }
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
....................     subsector_4kByte_erase(smf, base_addr);
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
....................     write_data_byte(smf, base_addr + 4, loop_count);
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
3800:  MOVLW  62
3801:  MOVLB  03
3802:  MOVWF  11
3803:  MOVLW  06
3804:  MOVWF  12
3805:  MOVLP  08
3806:  MOVLB  00
3807:  CALL   119
3808:  MOVLP  38
....................     fprintf(PC, "___Start copy_data__\r\n");
3809:  MOVLW  6F
380A:  MOVLB  03
380B:  MOVWF  11
380C:  MOVLW  06
380D:  MOVWF  12
380E:  MOVLP  08
380F:  MOVLB  00
3810:  CALL   119
3811:  MOVLP  38
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
3812:  MOVLB  0B
3813:  CLRF   5F
3814:  MOVLP  08
3815:  MOVLB  00
3816:  CALL   7F2
3817:  MOVLP  38
3818:  MOVF   78,F
3819:  BTFSS  03.2
381A:  GOTO   79F
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
381B:  MOVLW  7B
381C:  MOVLB  03
381D:  MOVWF  11
381E:  MOVLW  06
381F:  MOVWF  12
3820:  BCF    03.0
3821:  MOVLW  07
3822:  MOVLB  0C
3823:  MOVWF  6A
3824:  MOVLP  08
3825:  MOVLB  00
3826:  CALL   167
3827:  MOVLP  38
3828:  MOVLB  0B
3829:  MOVF   5F,W
382A:  MOVLB  0C
382B:  MOVWF  6A
382C:  MOVLW  18
382D:  MOVWF  6B
382E:  MOVLP  20
382F:  MOVLB  00
3830:  CALL   6B8
3831:  MOVLP  38
3832:  MOVLW  7F
3833:  MOVLB  03
3834:  MOVWF  11
3835:  MOVLW  06
3836:  MOVWF  12
3837:  BSF    03.0
3838:  MOVLW  12
3839:  MOVLB  0C
383A:  MOVWF  6A
383B:  MOVLP  08
383C:  MOVLB  00
383D:  CALL   167
383E:  MOVLP  38
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
383F:  MOVLP  28
3840:  GOTO   563
3841:  MOVLP  38
3842:  MOVF   79,W
3843:  MOVLB  0B
3844:  MOVWF  61
3845:  MOVF   78,W
3846:  MOVWF  60
3847:  MOVWF  78
3848:  MOVF   78,W
3849:  MOVWF  04
384A:  MOVF   61,W
384B:  MOVWF  05
*
3850:  MOVF   65,W
3851:  MOVWF  6D
3852:  MOVLP  28
3853:  MOVLB  00
3854:  GOTO   593
3855:  MOVLP  38
3856:  MOVF   79,W
3857:  MOVWF  7A
3858:  MOVF   78,W
3859:  MOVWF  04
385A:  MOVF   7A,W
385B:  MOVWF  05
385C:  MOVLW  09
385D:  MOVWF  78
385E:  MOVLW  23
385F:  MOVWF  07
3860:  MOVLW  B2
3861:  MOVWF  06
3862:  MOVIW  [FSR0++],W
3863:  MOVWI  W,[FSR1++]
3864:  DECFSZ 78,F
3865:  GOTO   062
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
3866:  MOVLW  01
3867:  MOVLB  0B
3868:  ADDWF  5F,W
3869:  ADDLW  09
386A:  MOVWF  04
386B:  MOVLW  20
386C:  MOVWF  05
386D:  BTFSC  03.0
386E:  INCF   05,F
386F:  MOVF   6A,W
3870:  MOVWF  00
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
3871:  MOVF   65,W
3872:  MOVWF  6E
3873:  MOVF   64,W
3874:  MOVWF  6D
3875:  MOVF   63,W
3876:  MOVWF  6C
3877:  MOVF   62,W
3878:  MOVWF  6B
3879:  MOVF   69,W
387A:  MOVLB  0C
387B:  MOVWF  23
387C:  MOVLB  0B
387D:  MOVF   68,W
387E:  MOVLB  0C
387F:  MOVWF  22
3880:  MOVLB  0B
3881:  MOVF   67,W
3882:  MOVLB  0C
3883:  MOVWF  21
3884:  MOVLB  0B
3885:  MOVF   66,W
3886:  MOVLB  0C
3887:  MOVWF  20
3888:  MOVLB  0B
3889:  MOVF   60,W
388A:  MOVWF  04
388B:  MOVF   61,W
388C:  MOVWF  05
388D:  ADDFSR 01,FSR0
388E:  MOVF   00,W
388F:  MOVLB  0C
3890:  MOVWF  24
3891:  ADDFSR 01,FSR0
3892:  MOVF   00,W
3893:  MOVWF  25
3894:  ADDFSR 01,FSR0
3895:  MOVF   00,W
3896:  MOVWF  26
3897:  ADDFSR 01,FSR0
3898:  MOVF   00,W
3899:  MOVWF  27
389A:  ADDFSR 3D,FSR0
389B:  MOVLB  0B
389C:  MOVF   60,W
389D:  MOVWF  04
389E:  MOVF   61,W
389F:  MOVWF  05
38A0:  MOVIW  [FSR0+05],W
38A1:  MOVLB  0C
38A2:  MOVWF  28
38A3:  MOVIW  [FSR0+06],W
38A4:  MOVWF  29
38A5:  MOVIW  [FSR0+07],W
38A6:  MOVWF  2A
38A7:  MOVIW  [FSR0+08],W
38A8:  MOVWF  2B
....................         fprintf(PC, "In smf mission data start   address: %08LX\r\n", mis_start_address);
38A9:  MOVLW  89
38AA:  MOVLB  03
38AB:  MOVWF  11
38AC:  MOVLW  06
38AD:  MOVWF  12
38AE:  BCF    03.0
38AF:  MOVLW  25
38B0:  MOVLB  0C
38B1:  MOVWF  6A
38B2:  MOVLP  08
38B3:  MOVLB  00
38B4:  CALL   167
38B5:  MOVLP  38
38B6:  MOVLB  0B
38B7:  MOVF   6E,W
38B8:  MOVLB  0C
38B9:  MOVWF  6A
38BA:  MOVLW  37
38BB:  MOVWF  6B
38BC:  MOVLP  08
38BD:  MOVLB  00
38BE:  CALL   4BA
38BF:  MOVLP  38
38C0:  MOVLB  0B
38C1:  MOVF   6D,W
38C2:  MOVLB  0C
38C3:  MOVWF  6A
38C4:  MOVLW  37
38C5:  MOVWF  6B
38C6:  MOVLP  08
38C7:  MOVLB  00
38C8:  CALL   4BA
38C9:  MOVLP  38
38CA:  MOVLB  0B
38CB:  MOVF   6C,W
38CC:  MOVLB  0C
38CD:  MOVWF  6A
38CE:  MOVLW  37
38CF:  MOVWF  6B
38D0:  MOVLP  08
38D1:  MOVLB  00
38D2:  CALL   4BA
38D3:  MOVLP  38
38D4:  MOVLB  0B
38D5:  MOVF   6B,W
38D6:  MOVLB  0C
38D7:  MOVWF  6A
38D8:  MOVLW  37
38D9:  MOVWF  6B
38DA:  MOVLP  08
38DB:  MOVLB  00
38DC:  CALL   4BA
38DD:  MOVLP  38
38DE:  MOVLW  0D
38DF:  MOVLB  0D
38E0:  MOVWF  37
38E1:  MOVLP  08
38E2:  MOVLB  00
38E3:  CALL   0F4
38E4:  MOVLP  38
38E5:  MOVLW  0A
38E6:  MOVLB  0D
38E7:  MOVWF  37
38E8:  MOVLP  08
38E9:  MOVLB  00
38EA:  CALL   0F4
38EB:  MOVLP  38
....................         fprintf(PC, "In smf mission data end     address: %08LX\r\n", mis_end_address);
38EC:  MOVLW  A0
38ED:  MOVLB  03
38EE:  MOVWF  11
38EF:  MOVLW  06
38F0:  MOVWF  12
38F1:  BCF    03.0
38F2:  MOVLW  25
38F3:  MOVLB  0C
38F4:  MOVWF  6A
38F5:  MOVLP  08
38F6:  MOVLB  00
38F7:  CALL   167
38F8:  MOVLP  38
38F9:  MOVLB  0C
38FA:  MOVF   23,W
38FB:  MOVWF  6A
38FC:  MOVLW  37
38FD:  MOVWF  6B
38FE:  MOVLP  08
38FF:  MOVLB  00
3900:  CALL   4BA
3901:  MOVLP  38
3902:  MOVLB  0C
3903:  MOVF   22,W
3904:  MOVWF  6A
3905:  MOVLW  37
3906:  MOVWF  6B
3907:  MOVLP  08
3908:  MOVLB  00
3909:  CALL   4BA
390A:  MOVLP  38
390B:  MOVLB  0C
390C:  MOVF   21,W
390D:  MOVWF  6A
390E:  MOVLW  37
390F:  MOVWF  6B
3910:  MOVLP  08
3911:  MOVLB  00
3912:  CALL   4BA
3913:  MOVLP  38
3914:  MOVLB  0C
3915:  MOVF   20,W
3916:  MOVWF  6A
3917:  MOVLW  37
3918:  MOVWF  6B
3919:  MOVLP  08
391A:  MOVLB  00
391B:  CALL   4BA
391C:  MOVLP  38
391D:  MOVLW  0D
391E:  MOVLB  0D
391F:  MOVWF  37
3920:  MOVLP  08
3921:  MOVLB  00
3922:  CALL   0F4
3923:  MOVLP  38
3924:  MOVLW  0A
3925:  MOVLB  0D
3926:  MOVWF  37
3927:  MOVLP  08
3928:  MOVLB  00
3929:  CALL   0F4
392A:  MOVLP  38
....................         fprintf(PC, "In MIS FM Write source data address: %08LX\r\n", write_src);
392B:  MOVLW  B7
392C:  MOVLB  03
392D:  MOVWF  11
392E:  MOVLW  06
392F:  MOVWF  12
3930:  BCF    03.0
3931:  MOVLW  25
3932:  MOVLB  0C
3933:  MOVWF  6A
3934:  MOVLP  08
3935:  MOVLB  00
3936:  CALL   167
3937:  MOVLP  38
3938:  MOVLB  0C
3939:  MOVF   27,W
393A:  MOVWF  6A
393B:  MOVLW  37
393C:  MOVWF  6B
393D:  MOVLP  08
393E:  MOVLB  00
393F:  CALL   4BA
3940:  MOVLP  38
3941:  MOVLB  0C
3942:  MOVF   26,W
3943:  MOVWF  6A
3944:  MOVLW  37
3945:  MOVWF  6B
3946:  MOVLP  08
3947:  MOVLB  00
3948:  CALL   4BA
3949:  MOVLP  38
394A:  MOVLB  0C
394B:  MOVF   25,W
394C:  MOVWF  6A
394D:  MOVLW  37
394E:  MOVWF  6B
394F:  MOVLP  08
3950:  MOVLB  00
3951:  CALL   4BA
3952:  MOVLP  38
3953:  MOVLB  0C
3954:  MOVF   24,W
3955:  MOVWF  6A
3956:  MOVLW  37
3957:  MOVWF  6B
3958:  MOVLP  08
3959:  MOVLB  00
395A:  CALL   4BA
395B:  MOVLP  38
395C:  MOVLW  0D
395D:  MOVLB  0D
395E:  MOVWF  37
395F:  MOVLP  08
3960:  MOVLB  00
3961:  CALL   0F4
3962:  MOVLP  38
3963:  MOVLW  0A
3964:  MOVLB  0D
3965:  MOVWF  37
3966:  MOVLP  08
3967:  MOVLB  00
3968:  CALL   0F4
3969:  MOVLP  38
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
396A:  MOVLW  CE
396B:  MOVLB  03
396C:  MOVWF  11
396D:  MOVLW  06
396E:  MOVWF  12
396F:  BCF    03.0
3970:  MOVLW  25
3971:  MOVLB  0C
3972:  MOVWF  6A
3973:  MOVLP  08
3974:  MOVLB  00
3975:  CALL   167
3976:  MOVLP  38
3977:  MOVLW  41
3978:  MOVWF  04
3979:  MOVLB  0C
397A:  MOVF   2B,W
397B:  MOVWF  69
397C:  MOVF   2A,W
397D:  MOVWF  68
397E:  MOVF   29,W
397F:  MOVWF  67
3980:  MOVF   28,W
3981:  MOVWF  66
3982:  MOVLP  28
3983:  MOVLB  00
3984:  CALL   5E0
3985:  MOVLP  38
3986:  MOVLW  E2
3987:  MOVLB  03
3988:  MOVWF  11
3989:  MOVLW  06
398A:  MOVWF  12
398B:  BCF    03.0
398C:  MOVLW  04
398D:  MOVLB  0C
398E:  MOVWF  6A
398F:  MOVLP  08
3990:  MOVLB  00
3991:  CALL   167
3992:  MOVLP  38
3993:  MOVLB  0C
3994:  MOVF   2B,W
3995:  MOVWF  6A
3996:  MOVLW  57
3997:  MOVWF  6B
3998:  MOVLP  08
3999:  MOVLB  00
399A:  CALL   4BA
399B:  MOVLP  38
399C:  MOVLB  0C
399D:  MOVF   2A,W
399E:  MOVWF  6A
399F:  MOVLW  57
39A0:  MOVWF  6B
39A1:  MOVLP  08
39A2:  MOVLB  00
39A3:  CALL   4BA
39A4:  MOVLP  38
39A5:  MOVLB  0C
39A6:  MOVF   29,W
39A7:  MOVWF  6A
39A8:  MOVLW  57
39A9:  MOVWF  6B
39AA:  MOVLP  08
39AB:  MOVLB  00
39AC:  CALL   4BA
39AD:  MOVLP  38
39AE:  MOVLB  0C
39AF:  MOVF   28,W
39B0:  MOVWF  6A
39B1:  MOVLW  57
39B2:  MOVWF  6B
39B3:  MOVLP  08
39B4:  MOVLB  00
39B5:  CALL   4BA
39B6:  MOVLP  38
39B7:  MOVLW  E5
39B8:  MOVLB  03
39B9:  MOVWF  11
39BA:  MOVLW  06
39BB:  MOVWF  12
39BC:  BSF    03.0
39BD:  MOVLW  05
39BE:  MOVLB  0C
39BF:  MOVWF  6A
39C0:  MOVLP  08
39C1:  MOVLB  00
39C2:  CALL   167
39C3:  MOVLP  38
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
....................         if (is_connect(smf) == FALSE)
39C4:  MOVLB  08
39C5:  MOVF   61,W
39C6:  MOVLB  0D
39C7:  MOVWF  37
39C8:  MOVLB  08
39C9:  MOVF   60,W
39CA:  MOVLB  0D
39CB:  MOVWF  36
39CC:  MOVLB  08
39CD:  MOVF   5F,W
39CE:  MOVLB  0D
39CF:  MOVWF  35
39D0:  MOVLB  08
39D1:  MOVF   5E,W
39D2:  MOVLB  0D
39D3:  MOVWF  34
39D4:  MOVLP  08
39D5:  MOVLB  00
39D6:  CALL   353
39D7:  MOVLP  38
39D8:  MOVF   78,F
39D9:  BTFSS  03.2
39DA:  GOTO   1E5
....................         {
....................             fprintf(PC, "Error: SMF is not connected\r\n");
39DB:  MOVLW  E9
39DC:  MOVLB  03
39DD:  MOVWF  11
39DE:  MOVLW  06
39DF:  MOVWF  12
39E0:  MOVLP  08
39E1:  MOVLB  00
39E2:  CALL   119
39E3:  MOVLP  38
....................             return;
39E4:  GOTO   7B1
....................         }
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
39E5:  MOVLB  08
39E6:  MOVF   61,W
39E7:  MOVLB  0C
39E8:  MOVWF  69
39E9:  MOVLB  08
39EA:  MOVF   60,W
39EB:  MOVLB  0C
39EC:  MOVWF  68
39ED:  MOVLB  08
39EE:  MOVF   5F,W
39EF:  MOVLB  0C
39F0:  MOVWF  67
39F1:  MOVLB  08
39F2:  MOVF   5E,W
39F3:  MOVLB  0C
39F4:  MOVWF  66
39F5:  MOVLB  0B
39F6:  MOVF   6E,W
39F7:  MOVLB  0C
39F8:  MOVWF  6D
39F9:  MOVLB  0B
39FA:  MOVF   6D,W
39FB:  MOVLB  0C
39FC:  MOVWF  6C
39FD:  MOVLB  0B
39FE:  MOVF   6C,W
39FF:  MOVLB  0C
3A00:  MOVWF  6B
3A01:  MOVLB  0B
3A02:  MOVF   6B,W
3A03:  MOVLB  0C
3A04:  MOVWF  6A
3A05:  MOVLW  23
3A06:  MOVWF  6F
3A07:  MOVLW  CC
3A08:  MOVWF  6E
3A09:  MOVLB  0D
3A0A:  CLRF   23
3A0B:  CLRF   22
3A0C:  CLRF   21
3A0D:  MOVLW  04
3A0E:  MOVWF  20
3A0F:  MOVLP  08
3A10:  MOVLB  00
3A11:  CALL   3A1
3A12:  MOVLP  38
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
3A13:  MOVLB  0C
3A14:  CLRF   68
3A15:  CLRF   67
3A16:  CLRF   66
3A17:  MOVF   2F,W
3A18:  MOVWF  65
3A19:  MOVWF  68
3A1A:  CLRF   65
3A1B:  CLRF   66
3A1C:  CLRF   67
3A1D:  CLRF   6D
3A1E:  CLRF   6C
3A1F:  CLRF   6B
3A20:  MOVF   2E,W
3A21:  MOVWF  6A
3A22:  MOVF   6B,W
3A23:  MOVWF  7A
3A24:  MOVF   6A,W
3A25:  MOVWF  79
3A26:  CLRF   77
3A27:  CLRF   78
3A28:  MOVF   77,W
3A29:  IORWF  65,F
3A2A:  MOVF   78,W
3A2B:  IORWF  66,F
3A2C:  MOVF   6A,W
3A2D:  IORWF  67,F
3A2E:  MOVF   6B,W
3A2F:  IORWF  68,F
3A30:  CLRF   6D
3A31:  CLRF   6C
3A32:  CLRF   6B
3A33:  MOVF   2D,W
3A34:  MOVWF  6A
3A35:  MOVF   6C,W
3A36:  MOVWF  7A
3A37:  MOVF   6B,W
3A38:  MOVWF  79
3A39:  MOVF   6A,W
3A3A:  MOVWF  78
3A3B:  CLRF   77
3A3C:  MOVF   77,W
3A3D:  IORWF  65,F
3A3E:  MOVF   6A,W
3A3F:  IORWF  66,F
3A40:  MOVF   6B,W
3A41:  IORWF  67,F
3A42:  MOVF   6C,W
3A43:  IORWF  68,F
3A44:  MOVF   2C,W
3A45:  MOVWF  77
3A46:  CLRF   78
3A47:  CLRF   79
3A48:  CLRF   7A
3A49:  MOVF   2C,W
3A4A:  IORWF  65,W
3A4B:  MOVWF  30
3A4C:  MOVF   78,W
3A4D:  IORWF  66,W
3A4E:  MOVWF  31
3A4F:  MOVF   79,W
3A50:  IORWF  67,W
3A51:  MOVWF  32
3A52:  MOVF   7A,W
3A53:  IORWF  68,W
3A54:  MOVWF  33
3A55:  MOVLW  04
3A56:  MOVLB  0B
3A57:  ADDWF  6B,W
3A58:  MOVLB  0C
3A59:  MOVWF  65
3A5A:  MOVLW  00
3A5B:  MOVLB  0B
3A5C:  ADDWFC 6C,W
3A5D:  MOVLB  0C
3A5E:  MOVWF  66
3A5F:  MOVLW  00
3A60:  MOVLB  0B
3A61:  ADDWFC 6D,W
3A62:  MOVLB  0C
3A63:  MOVWF  67
3A64:  MOVLW  00
3A65:  MOVLB  0B
3A66:  ADDWFC 6E,W
3A67:  MOVLB  0C
3A68:  MOVWF  68
3A69:  MOVLB  08
3A6A:  MOVF   61,W
3A6B:  MOVLB  0D
3A6C:  MOVWF  24
3A6D:  MOVLB  08
3A6E:  MOVF   60,W
3A6F:  MOVLB  0D
3A70:  MOVWF  23
3A71:  MOVLB  08
3A72:  MOVF   5F,W
3A73:  MOVLB  0D
3A74:  MOVWF  22
3A75:  MOVLB  08
3A76:  MOVF   5E,W
3A77:  MOVLB  0D
3A78:  MOVWF  21
3A79:  MOVLB  0C
3A7A:  MOVF   68,W
3A7B:  MOVLB  0D
3A7C:  MOVWF  28
3A7D:  MOVLB  0C
3A7E:  MOVF   67,W
3A7F:  MOVLB  0D
3A80:  MOVWF  27
3A81:  MOVLB  0C
3A82:  MOVF   66,W
3A83:  MOVLB  0D
3A84:  MOVWF  26
3A85:  MOVLB  0C
3A86:  MOVF   65,W
3A87:  MOVLB  0D
3A88:  MOVWF  25
3A89:  MOVLP  28
3A8A:  MOVLB  00
3A8B:  GOTO   652
3A8C:  MOVLP  38
3A8D:  MOVF   78,W
3A8E:  MOVLB  0B
3A8F:  MOVWF  6F
....................         fprintf(PC, "Size area read\r\n");
3A90:  MOVLW  F8
3A91:  MOVLB  03
3A92:  MOVWF  11
3A93:  MOVLW  06
3A94:  MOVWF  12
3A95:  MOVLP  08
3A96:  MOVLB  00
3A97:  CALL   119
3A98:  MOVLP  38
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
3A99:  MOVLW  01
3A9A:  MOVLB  03
3A9B:  MOVWF  11
3A9C:  MOVLW  07
3A9D:  MOVWF  12
3A9E:  BCF    03.0
3A9F:  MOVLW  0C
3AA0:  MOVLB  0C
3AA1:  MOVWF  6A
3AA2:  MOVLP  08
3AA3:  MOVLB  00
3AA4:  CALL   167
3AA5:  MOVLP  38
3AA6:  MOVLW  41
3AA7:  MOVWF  04
3AA8:  MOVLB  0C
3AA9:  MOVF   33,W
3AAA:  MOVWF  69
3AAB:  MOVF   32,W
3AAC:  MOVWF  68
3AAD:  MOVF   31,W
3AAE:  MOVWF  67
3AAF:  MOVF   30,W
3AB0:  MOVWF  66
3AB1:  MOVLP  28
3AB2:  MOVLB  00
3AB3:  CALL   5E0
3AB4:  MOVLP  38
3AB5:  MOVLW  08
3AB6:  MOVLB  03
3AB7:  MOVWF  11
3AB8:  MOVLW  07
3AB9:  MOVWF  12
3ABA:  BSF    03.0
3ABB:  MOVLW  08
3ABC:  MOVLB  0C
3ABD:  MOVWF  6A
3ABE:  MOVLP  08
3ABF:  MOVLB  00
3AC0:  CALL   167
3AC1:  MOVLP  38
3AC2:  MOVLB  0B
3AC3:  MOVF   6E,W
3AC4:  MOVLB  0C
3AC5:  MOVWF  6A
3AC6:  MOVLW  37
3AC7:  MOVWF  6B
3AC8:  MOVLP  08
3AC9:  MOVLB  00
3ACA:  CALL   4BA
3ACB:  MOVLP  38
3ACC:  MOVLB  0B
3ACD:  MOVF   6D,W
3ACE:  MOVLB  0C
3ACF:  MOVWF  6A
3AD0:  MOVLW  37
3AD1:  MOVWF  6B
3AD2:  MOVLP  08
3AD3:  MOVLB  00
3AD4:  CALL   4BA
3AD5:  MOVLP  38
3AD6:  MOVLB  0B
3AD7:  MOVF   6C,W
3AD8:  MOVLB  0C
3AD9:  MOVWF  6A
3ADA:  MOVLW  37
3ADB:  MOVWF  6B
3ADC:  MOVLP  08
3ADD:  MOVLB  00
3ADE:  CALL   4BA
3ADF:  MOVLP  38
3AE0:  MOVLB  0B
3AE1:  MOVF   6B,W
3AE2:  MOVLB  0C
3AE3:  MOVWF  6A
3AE4:  MOVLW  37
3AE5:  MOVWF  6B
3AE6:  MOVLP  08
3AE7:  MOVLB  00
3AE8:  CALL   4BA
3AE9:  MOVLP  38
3AEA:  MOVLW  29
3AEB:  MOVLB  0D
3AEC:  MOVWF  37
3AED:  MOVLP  08
3AEE:  MOVLB  00
3AEF:  CALL   0F4
3AF0:  MOVLP  38
3AF1:  MOVLW  0D
3AF2:  MOVLB  0D
3AF3:  MOVWF  37
3AF4:  MOVLP  08
3AF5:  MOVLB  00
3AF6:  CALL   0F4
3AF7:  MOVLP  38
3AF8:  MOVLW  0A
3AF9:  MOVLB  0D
3AFA:  MOVWF  37
3AFB:  MOVLP  08
3AFC:  MOVLB  00
3AFD:  CALL   0F4
3AFE:  MOVLP  38
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
3AFF:  MOVLW  04
3B00:  MOVLB  0B
3B01:  ADDWF  6B,W
3B02:  MOVLB  0C
3B03:  MOVWF  65
3B04:  MOVLW  00
3B05:  MOVLB  0B
3B06:  ADDWFC 6C,W
3B07:  MOVLB  0C
3B08:  MOVWF  66
3B09:  MOVLW  00
3B0A:  MOVLB  0B
3B0B:  ADDWFC 6D,W
3B0C:  MOVLB  0C
3B0D:  MOVWF  67
3B0E:  MOVLW  00
3B0F:  MOVLB  0B
3B10:  ADDWFC 6E,W
3B11:  MOVLB  0C
3B12:  MOVWF  68
3B13:  MOVLW  11
3B14:  MOVLB  03
3B15:  MOVWF  11
3B16:  MOVLW  07
3B17:  MOVWF  12
3B18:  BCF    03.0
3B19:  MOVLW  0C
3B1A:  MOVLB  0C
3B1B:  MOVWF  6A
3B1C:  MOVLP  08
3B1D:  MOVLB  00
3B1E:  CALL   167
3B1F:  MOVLP  38
3B20:  MOVLB  0B
3B21:  MOVF   6F,W
3B22:  MOVLB  0C
3B23:  MOVWF  6A
3B24:  MOVLW  18
3B25:  MOVWF  6B
3B26:  MOVLP  20
3B27:  MOVLB  00
3B28:  CALL   6B8
3B29:  MOVLP  38
3B2A:  MOVLW  18
3B2B:  MOVLB  03
3B2C:  MOVWF  11
3B2D:  MOVLW  07
3B2E:  MOVWF  12
3B2F:  BCF    03.0
3B30:  MOVLW  09
3B31:  MOVLB  0C
3B32:  MOVWF  6A
3B33:  MOVLP  08
3B34:  MOVLB  00
3B35:  CALL   167
3B36:  MOVLP  38
3B37:  MOVLB  0C
3B38:  MOVF   68,W
3B39:  MOVWF  6A
3B3A:  MOVLW  37
3B3B:  MOVWF  6B
3B3C:  MOVLP  08
3B3D:  MOVLB  00
3B3E:  CALL   4BA
3B3F:  MOVLP  38
3B40:  MOVLB  0C
3B41:  MOVF   67,W
3B42:  MOVWF  6A
3B43:  MOVLW  37
3B44:  MOVWF  6B
3B45:  MOVLP  08
3B46:  MOVLB  00
3B47:  CALL   4BA
3B48:  MOVLP  38
3B49:  MOVLB  0C
3B4A:  MOVF   66,W
3B4B:  MOVWF  6A
3B4C:  MOVLW  37
3B4D:  MOVWF  6B
3B4E:  MOVLP  08
3B4F:  MOVLB  00
3B50:  CALL   4BA
3B51:  MOVLP  38
3B52:  MOVLB  0C
3B53:  MOVF   65,W
3B54:  MOVWF  6A
3B55:  MOVLW  37
3B56:  MOVWF  6B
3B57:  MOVLP  08
3B58:  MOVLB  00
3B59:  CALL   4BA
3B5A:  MOVLP  38
3B5B:  MOVLW  1F
3B5C:  MOVLB  03
3B5D:  MOVWF  11
3B5E:  MOVLW  07
3B5F:  MOVWF  12
3B60:  BCF    03.0
3B61:  MOVLW  05
3B62:  MOVLB  0C
3B63:  MOVWF  6A
3B64:  MOVLP  08
3B65:  MOVLB  00
3B66:  CALL   167
3B67:  MOVLP  38
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
3B68:  MOVLB  0B
3B69:  MOVF   6B,W
3B6A:  MOVLB  0C
3B6B:  MOVWF  34
3B6C:  MOVLW  10
3B6D:  MOVLB  0B
3B6E:  ADDWF  6C,W
3B6F:  MOVLB  0C
3B70:  MOVWF  35
3B71:  MOVLW  00
3B72:  MOVLB  0B
3B73:  ADDWFC 6D,W
3B74:  MOVLB  0C
3B75:  MOVWF  36
3B76:  MOVLW  00
3B77:  MOVLB  0B
3B78:  ADDWFC 6E,W
3B79:  MOVLB  0C
3B7A:  MOVWF  37
3B7B:  MOVF   23,W
3B7C:  MOVWF  3B
3B7D:  MOVF   22,W
3B7E:  MOVWF  3A
3B7F:  MOVF   21,W
3B80:  MOVWF  39
3B81:  MOVF   20,W
3B82:  MOVWF  38
3B83:  MOVF   34,W
3B84:  SUBWF  38,W
3B85:  MOVWF  3C
3B86:  MOVF   35,W
3B87:  SUBWFC 39,W
3B88:  MOVWF  3D
3B89:  MOVF   36,W
3B8A:  SUBWFC 3A,W
3B8B:  MOVWF  3E
3B8C:  MOVF   37,W
3B8D:  SUBWFC 3B,W
3B8E:  MOVWF  3F
3B8F:  MOVF   30,W
3B90:  ADDWF  34,W
3B91:  MOVWF  40
3B92:  MOVF   31,W
3B93:  ADDWFC 35,W
3B94:  MOVWF  41
3B95:  MOVF   32,W
3B96:  ADDWFC 36,W
3B97:  MOVWF  42
3B98:  MOVF   33,W
3B99:  ADDWFC 37,W
3B9A:  MOVWF  43
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
3B9B:  MOVF   28,W
3B9C:  ADDWF  30,W
3B9D:  MOVWF  65
3B9E:  MOVF   29,W
3B9F:  ADDWFC 31,W
3BA0:  MOVWF  66
3BA1:  MOVF   2A,W
3BA2:  ADDWFC 32,W
3BA3:  MOVWF  67
3BA4:  MOVF   2B,W
3BA5:  ADDWFC 33,W
3BA6:  MOVWF  68
3BA7:  MOVF   3F,W
3BA8:  SUBWF  68,W
3BA9:  BTFSS  03.0
3BAA:  GOTO   41E
3BAB:  BTFSS  03.2
3BAC:  GOTO   3BD
3BAD:  MOVF   3E,W
3BAE:  SUBWF  67,W
3BAF:  BTFSS  03.0
3BB0:  GOTO   41E
3BB1:  BTFSS  03.2
3BB2:  GOTO   3BD
3BB3:  MOVF   3D,W
3BB4:  SUBWF  66,W
3BB5:  BTFSS  03.0
3BB6:  GOTO   41E
3BB7:  BTFSS  03.2
3BB8:  GOTO   3BD
3BB9:  MOVF   65,W
3BBA:  SUBWF  3C,W
3BBB:  BTFSC  03.0
3BBC:  GOTO   41E
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
3BBD:  MOVLW  22
3BBE:  MOVLB  03
3BBF:  MOVWF  11
3BC0:  MOVLW  07
3BC1:  MOVWF  12
3BC2:  MOVLP  08
3BC3:  MOVLB  00
3BC4:  CALL   119
3BC5:  MOVLP  38
....................             loop_count++;
3BC6:  MOVLB  0B
3BC7:  INCF   6F,F
....................             used_size = 0;
3BC8:  MOVLB  0C
3BC9:  CLRF   33
3BCA:  CLRF   32
3BCB:  CLRF   31
3BCC:  CLRF   30
....................             data_write_addr = data_region_start;
3BCD:  MOVF   37,W
3BCE:  MOVWF  43
3BCF:  MOVF   36,W
3BD0:  MOVWF  42
3BD1:  MOVF   35,W
3BD2:  MOVWF  41
3BD3:  MOVF   34,W
3BD4:  MOVWF  40
....................             unsigned int32 erase_ptr = data_region_start;
3BD5:  MOVF   37,W
3BD6:  MOVWF  47
3BD7:  MOVF   36,W
3BD8:  MOVWF  46
3BD9:  MOVF   35,W
3BDA:  MOVWF  45
3BDB:  MOVF   34,W
3BDC:  MOVWF  44
....................             while (erase_ptr < data_region_end)
3BDD:  MOVF   47,W
3BDE:  SUBWF  3B,W
3BDF:  BTFSS  03.0
3BE0:  GOTO   41E
3BE1:  BTFSS  03.2
3BE2:  GOTO   3F3
3BE3:  MOVF   46,W
3BE4:  SUBWF  3A,W
3BE5:  BTFSS  03.0
3BE6:  GOTO   41E
3BE7:  BTFSS  03.2
3BE8:  GOTO   3F3
3BE9:  MOVF   45,W
3BEA:  SUBWF  39,W
3BEB:  BTFSS  03.0
3BEC:  GOTO   41E
3BED:  BTFSS  03.2
3BEE:  GOTO   3F3
3BEF:  MOVF   38,W
3BF0:  SUBWF  44,W
3BF1:  BTFSC  03.0
3BF2:  GOTO   41E
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
3BF3:  MOVLB  08
3BF4:  MOVF   61,W
3BF5:  MOVLB  0D
3BF6:  MOVWF  37
3BF7:  MOVLB  08
3BF8:  MOVF   60,W
3BF9:  MOVLB  0D
3BFA:  MOVWF  36
3BFB:  MOVLB  08
3BFC:  MOVF   5F,W
3BFD:  MOVLB  0D
3BFE:  MOVWF  35
3BFF:  MOVLB  08
3C00:  MOVF   5E,W
3C01:  MOVLB  0D
3C02:  MOVWF  34
3C03:  MOVLB  0C
3C04:  MOVF   47,W
3C05:  MOVLB  0D
3C06:  MOVWF  3B
3C07:  MOVLB  0C
3C08:  MOVF   46,W
3C09:  MOVLB  0D
3C0A:  MOVWF  3A
3C0B:  MOVLB  0C
3C0C:  MOVF   45,W
3C0D:  MOVLB  0D
3C0E:  MOVWF  39
3C0F:  MOVLB  0C
3C10:  MOVF   44,W
3C11:  MOVLB  0D
3C12:  MOVWF  38
3C13:  MOVLP  10
3C14:  MOVLB  00
3C15:  CALL   49E
3C16:  MOVLP  38
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
3C17:  MOVLW  10
3C18:  MOVLB  0C
3C19:  ADDWF  45,F
3C1A:  MOVLW  00
3C1B:  ADDWFC 46,F
3C1C:  ADDWFC 47,F
3C1D:  GOTO   3DD
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
3C1E:  CLRF   48
3C1F:  MOVF   41,W
3C20:  ANDLW  F0
3C21:  MOVWF  49
3C22:  CLRF   4A
3C23:  CLRF   4B
3C24:  MOVF   28,W
3C25:  ADDWF  40,W
3C26:  MOVWF  65
3C27:  MOVF   29,W
3C28:  ADDWFC 41,W
3C29:  MOVWF  66
3C2A:  MOVF   2A,W
3C2B:  ADDWFC 42,W
3C2C:  MOVWF  67
3C2D:  MOVF   2B,W
3C2E:  ADDWFC 43,W
3C2F:  MOVWF  68
3C30:  MOVLW  FF
3C31:  ADDWF  65,F
3C32:  MOVLW  0F
3C33:  ADDWFC 66,F
3C34:  MOVLW  00
3C35:  ADDWFC 67,F
3C36:  ADDWFC 68,F
3C37:  CLRF   4C
3C38:  MOVF   66,W
3C39:  ANDLW  F0
3C3A:  MOVWF  4D
3C3B:  CLRF   4E
3C3C:  CLRF   4F
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
3C3D:  MOVF   4B,W
3C3E:  MOVWF  53
3C3F:  MOVF   4A,W
3C40:  MOVWF  52
3C41:  MOVF   49,W
3C42:  MOVWF  51
3C43:  MOVF   48,W
3C44:  MOVWF  50
3C45:  MOVF   53,W
3C46:  SUBWF  4F,W
3C47:  BTFSS  03.0
3C48:  GOTO   49C
3C49:  BTFSS  03.2
3C4A:  GOTO   45B
3C4B:  MOVF   52,W
3C4C:  SUBWF  4E,W
3C4D:  BTFSS  03.0
3C4E:  GOTO   49C
3C4F:  BTFSS  03.2
3C50:  GOTO   45B
3C51:  MOVF   51,W
3C52:  SUBWF  4D,W
3C53:  BTFSS  03.0
3C54:  GOTO   49C
3C55:  BTFSS  03.2
3C56:  GOTO   45B
3C57:  MOVF   4C,W
3C58:  SUBWF  50,W
3C59:  BTFSC  03.0
3C5A:  GOTO   49C
3C5B:  MOVF   53,W
3C5C:  SUBWF  23,W
3C5D:  BTFSS  03.0
3C5E:  GOTO   49C
3C5F:  BTFSS  03.2
3C60:  GOTO   471
3C61:  MOVF   52,W
3C62:  SUBWF  22,W
3C63:  BTFSS  03.0
3C64:  GOTO   49C
3C65:  BTFSS  03.2
3C66:  GOTO   471
3C67:  MOVF   51,W
3C68:  SUBWF  21,W
3C69:  BTFSS  03.0
3C6A:  GOTO   49C
3C6B:  BTFSS  03.2
3C6C:  GOTO   471
3C6D:  MOVF   20,W
3C6E:  SUBWF  50,W
3C6F:  BTFSC  03.0
3C70:  GOTO   49C
....................             subsector_4kByte_erase(smf, addr);
3C71:  MOVLB  08
3C72:  MOVF   61,W
3C73:  MOVLB  0D
3C74:  MOVWF  37
3C75:  MOVLB  08
3C76:  MOVF   60,W
3C77:  MOVLB  0D
3C78:  MOVWF  36
3C79:  MOVLB  08
3C7A:  MOVF   5F,W
3C7B:  MOVLB  0D
3C7C:  MOVWF  35
3C7D:  MOVLB  08
3C7E:  MOVF   5E,W
3C7F:  MOVLB  0D
3C80:  MOVWF  34
3C81:  MOVLB  0C
3C82:  MOVF   53,W
3C83:  MOVLB  0D
3C84:  MOVWF  3B
3C85:  MOVLB  0C
3C86:  MOVF   52,W
3C87:  MOVLB  0D
3C88:  MOVWF  3A
3C89:  MOVLB  0C
3C8A:  MOVF   51,W
3C8B:  MOVLB  0D
3C8C:  MOVWF  39
3C8D:  MOVLB  0C
3C8E:  MOVF   50,W
3C8F:  MOVLB  0D
3C90:  MOVWF  38
3C91:  MOVLP  10
3C92:  MOVLB  00
3C93:  CALL   49E
3C94:  MOVLP  38
3C95:  MOVLW  10
3C96:  MOVLB  0C
3C97:  ADDWF  51,F
3C98:  MOVLW  00
3C99:  ADDWFC 52,F
3C9A:  ADDWFC 53,F
3C9B:  GOTO   445
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
3C9C:  MOVF   2B,W
3C9D:  MOVWF  57
3C9E:  MOVF   2A,W
3C9F:  MOVWF  56
3CA0:  MOVF   29,W
3CA1:  MOVWF  55
3CA2:  MOVF   28,W
3CA3:  MOVWF  54
3CA4:  MOVF   27,W
3CA5:  MOVWF  5B
3CA6:  MOVF   26,W
3CA7:  MOVWF  5A
3CA8:  MOVF   25,W
3CA9:  MOVWF  59
3CAA:  MOVF   24,W
3CAB:  MOVWF  58
....................         while (remaining > 0)
3CAC:  MOVF   54,F
3CAD:  BTFSS  03.2
3CAE:  GOTO   4B8
3CAF:  MOVF   55,F
3CB0:  BTFSS  03.2
3CB1:  GOTO   4B8
3CB2:  MOVF   56,F
3CB3:  BTFSS  03.2
3CB4:  GOTO   4B8
3CB5:  MOVF   57,F
3CB6:  BTFSC  03.2
3CB7:  GOTO   547
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
3CB8:  MOVF   57,F
3CB9:  BTFSS  03.2
3CBA:  GOTO   4C5
3CBB:  MOVF   56,F
3CBC:  BTFSS  03.2
3CBD:  GOTO   4C5
3CBE:  MOVF   55,F
3CBF:  BTFSS  03.2
3CC0:  GOTO   4C5
3CC1:  MOVF   54,W
3CC2:  SUBLW  40
3CC3:  BTFSC  03.0
3CC4:  GOTO   4C8
3CC5:  CLRF   7A
3CC6:  MOVLW  40
3CC7:  GOTO   4CB
3CC8:  MOVF   55,W
3CC9:  MOVWF  7A
3CCA:  MOVF   54,W
3CCB:  MOVWF  5C
3CCC:  MOVF   7A,W
3CCD:  MOVWF  5D
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
3CCE:  MOVLB  08
3CCF:  MOVF   5D,W
3CD0:  MOVLB  0C
3CD1:  MOVWF  69
3CD2:  MOVLB  08
3CD3:  MOVF   5C,W
3CD4:  MOVLB  0C
3CD5:  MOVWF  68
3CD6:  MOVLB  08
3CD7:  MOVF   5B,W
3CD8:  MOVLB  0C
3CD9:  MOVWF  67
3CDA:  MOVLB  08
3CDB:  MOVF   5A,W
3CDC:  MOVLB  0C
3CDD:  MOVWF  66
3CDE:  MOVF   5B,W
3CDF:  MOVWF  6D
3CE0:  MOVF   5A,W
3CE1:  MOVWF  6C
3CE2:  MOVF   59,W
3CE3:  MOVWF  6B
3CE4:  MOVF   58,W
3CE5:  MOVWF  6A
3CE6:  MOVLW  23
3CE7:  MOVWF  6F
3CE8:  MOVLW  6F
3CE9:  MOVWF  6E
3CEA:  MOVLB  0D
3CEB:  CLRF   23
3CEC:  CLRF   22
3CED:  MOVLB  0C
3CEE:  MOVF   5D,W
3CEF:  MOVLB  0D
3CF0:  MOVWF  21
3CF1:  MOVLB  0C
3CF2:  MOVF   5C,W
3CF3:  MOVLB  0D
3CF4:  MOVWF  20
3CF5:  MOVLP  08
3CF6:  MOVLB  00
3CF7:  CALL   3A1
3CF8:  MOVLP  38
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
3CF9:  MOVLB  08
3CFA:  MOVF   61,W
3CFB:  MOVLB  0D
3CFC:  MOVWF  37
3CFD:  MOVLB  08
3CFE:  MOVF   60,W
3CFF:  MOVLB  0D
3D00:  MOVWF  36
3D01:  MOVLB  08
3D02:  MOVF   5F,W
3D03:  MOVLB  0D
3D04:  MOVWF  35
3D05:  MOVLB  08
3D06:  MOVF   5E,W
3D07:  MOVLB  0D
3D08:  MOVWF  34
3D09:  MOVLB  0C
3D0A:  MOVF   43,W
3D0B:  MOVLB  0D
3D0C:  MOVWF  3B
3D0D:  MOVLB  0C
3D0E:  MOVF   42,W
3D0F:  MOVLB  0D
3D10:  MOVWF  3A
3D11:  MOVLB  0C
3D12:  MOVF   41,W
3D13:  MOVLB  0D
3D14:  MOVWF  39
3D15:  MOVLB  0C
3D16:  MOVF   40,W
3D17:  MOVLB  0D
3D18:  MOVWF  38
3D19:  MOVLW  23
3D1A:  MOVWF  3D
3D1B:  MOVLW  6F
3D1C:  MOVWF  3C
3D1D:  MOVLB  0C
3D1E:  MOVF   5D,W
3D1F:  MOVLB  0D
3D20:  MOVWF  3F
3D21:  MOVLB  0C
3D22:  MOVF   5C,W
3D23:  MOVLB  0D
3D24:  MOVWF  3E
3D25:  MOVLP  08
3D26:  MOVLB  00
3D27:  CALL   639
3D28:  MOVLP  38
.................... 
....................             src_addr += chunk;
3D29:  MOVLB  0C
3D2A:  MOVF   5C,W
3D2B:  ADDWF  58,F
3D2C:  MOVF   5D,W
3D2D:  ADDWFC 59,F
3D2E:  MOVLW  00
3D2F:  ADDWFC 5A,F
3D30:  ADDWFC 5B,F
....................             data_write_addr += chunk;
3D31:  MOVF   5C,W
3D32:  ADDWF  40,F
3D33:  MOVF   5D,W
3D34:  ADDWFC 41,F
3D35:  MOVLW  00
3D36:  ADDWFC 42,F
3D37:  ADDWFC 43,F
....................             used_size += chunk;
3D38:  MOVF   5C,W
3D39:  ADDWF  30,F
3D3A:  MOVF   5D,W
3D3B:  ADDWFC 31,F
3D3C:  MOVLW  00
3D3D:  ADDWFC 32,F
3D3E:  ADDWFC 33,F
....................             remaining -= chunk;
3D3F:  MOVF   5C,W
3D40:  SUBWF  54,F
3D41:  MOVF   5D,W
3D42:  SUBWFC 55,F
3D43:  MOVLW  00
3D44:  SUBWFC 56,F
3D45:  SUBWFC 57,F
3D46:  GOTO   4AC
....................         }
.................... 
.................... 
....................         // write size area
....................         fprintf(PC, "Update size area\r\n");
3D47:  MOVLW  3D
3D48:  MOVLB  03
3D49:  MOVWF  11
3D4A:  MOVLW  07
3D4B:  MOVWF  12
3D4C:  MOVLP  08
3D4D:  MOVLB  00
3D4E:  CALL   119
3D4F:  MOVLP  38
....................         subsector_4kByte_erase(smf, mis_start_address);
3D50:  MOVLB  08
3D51:  MOVF   61,W
3D52:  MOVLB  0D
3D53:  MOVWF  37
3D54:  MOVLB  08
3D55:  MOVF   60,W
3D56:  MOVLB  0D
3D57:  MOVWF  36
3D58:  MOVLB  08
3D59:  MOVF   5F,W
3D5A:  MOVLB  0D
3D5B:  MOVWF  35
3D5C:  MOVLB  08
3D5D:  MOVF   5E,W
3D5E:  MOVLB  0D
3D5F:  MOVWF  34
3D60:  MOVLB  0B
3D61:  MOVF   6E,W
3D62:  MOVLB  0D
3D63:  MOVWF  3B
3D64:  MOVLB  0B
3D65:  MOVF   6D,W
3D66:  MOVLB  0D
3D67:  MOVWF  3A
3D68:  MOVLB  0B
3D69:  MOVF   6C,W
3D6A:  MOVLB  0D
3D6B:  MOVWF  39
3D6C:  MOVLB  0B
3D6D:  MOVF   6B,W
3D6E:  MOVLB  0D
3D6F:  MOVWF  38
3D70:  MOVLP  10
3D71:  MOVLB  00
3D72:  CALL   49E
3D73:  MOVLP  38
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
3D74:  MOVLB  0C
3D75:  MOVF   33,W
3D76:  MOVWF  69
3D77:  MOVF   32,W
3D78:  MOVWF  68
3D79:  MOVF   31,W
3D7A:  MOVWF  67
3D7B:  MOVF   30,W
3D7C:  MOVWF  66
3D7D:  CLRF   67
3D7E:  CLRF   68
3D7F:  CLRF   69
3D80:  MOVLB  08
3D81:  MOVF   61,W
3D82:  MOVLB  0D
3D83:  MOVWF  23
3D84:  MOVLB  08
3D85:  MOVF   60,W
3D86:  MOVLB  0D
3D87:  MOVWF  22
3D88:  MOVLB  08
3D89:  MOVF   5F,W
3D8A:  MOVLB  0D
3D8B:  MOVWF  21
3D8C:  MOVLB  08
3D8D:  MOVF   5E,W
3D8E:  MOVLB  0D
3D8F:  MOVWF  20
3D90:  MOVLB  0B
3D91:  MOVF   6E,W
3D92:  MOVLB  0D
3D93:  MOVWF  27
3D94:  MOVLB  0B
3D95:  MOVF   6D,W
3D96:  MOVLB  0D
3D97:  MOVWF  26
3D98:  MOVLB  0B
3D99:  MOVF   6C,W
3D9A:  MOVLB  0D
3D9B:  MOVWF  25
3D9C:  MOVLB  0B
3D9D:  MOVF   6B,W
3D9E:  MOVLB  0D
3D9F:  MOVWF  24
3DA0:  MOVLB  0C
3DA1:  MOVF   66,W
3DA2:  MOVWF  6F
3DA3:  MOVLP  30
3DA4:  MOVLB  00
3DA5:  CALL   000
3DA6:  MOVLP  38
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
3DA7:  MOVLW  01
3DA8:  MOVLB  0B
3DA9:  ADDWF  6B,W
3DAA:  MOVLB  0C
3DAB:  MOVWF  65
3DAC:  MOVLW  00
3DAD:  MOVLB  0B
3DAE:  ADDWFC 6C,W
3DAF:  MOVLB  0C
3DB0:  MOVWF  66
3DB1:  MOVLW  00
3DB2:  MOVLB  0B
3DB3:  ADDWFC 6D,W
3DB4:  MOVLB  0C
3DB5:  MOVWF  67
3DB6:  MOVLW  00
3DB7:  MOVLB  0B
3DB8:  ADDWFC 6E,W
3DB9:  MOVLB  0C
3DBA:  MOVWF  68
3DBB:  MOVF   31,W
3DBC:  MOVWF  6A
3DBD:  MOVF   32,W
3DBE:  MOVWF  6B
3DBF:  MOVF   33,W
3DC0:  MOVWF  6C
3DC1:  CLRF   6D
3DC2:  CLRF   6B
3DC3:  CLRF   6C
3DC4:  CLRF   6D
3DC5:  MOVLB  08
3DC6:  MOVF   61,W
3DC7:  MOVLB  0D
3DC8:  MOVWF  23
3DC9:  MOVLB  08
3DCA:  MOVF   60,W
3DCB:  MOVLB  0D
3DCC:  MOVWF  22
3DCD:  MOVLB  08
3DCE:  MOVF   5F,W
3DCF:  MOVLB  0D
3DD0:  MOVWF  21
3DD1:  MOVLB  08
3DD2:  MOVF   5E,W
3DD3:  MOVLB  0D
3DD4:  MOVWF  20
3DD5:  MOVLB  0C
3DD6:  MOVF   68,W
3DD7:  MOVLB  0D
3DD8:  MOVWF  27
3DD9:  MOVLB  0C
3DDA:  MOVF   67,W
3DDB:  MOVLB  0D
3DDC:  MOVWF  26
3DDD:  MOVLB  0C
3DDE:  MOVF   66,W
3DDF:  MOVLB  0D
3DE0:  MOVWF  25
3DE1:  MOVLB  0C
3DE2:  MOVF   65,W
3DE3:  MOVLB  0D
3DE4:  MOVWF  24
3DE5:  MOVLB  0C
3DE6:  MOVF   6A,W
3DE7:  MOVWF  6F
3DE8:  MOVLP  30
3DE9:  MOVLB  00
3DEA:  CALL   000
3DEB:  MOVLP  38
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
3DEC:  MOVLW  02
3DED:  MOVLB  0B
3DEE:  ADDWF  6B,W
3DEF:  MOVLB  0C
3DF0:  MOVWF  65
3DF1:  MOVLW  00
3DF2:  MOVLB  0B
3DF3:  ADDWFC 6C,W
3DF4:  MOVLB  0C
3DF5:  MOVWF  66
3DF6:  MOVLW  00
3DF7:  MOVLB  0B
3DF8:  ADDWFC 6D,W
3DF9:  MOVLB  0C
3DFA:  MOVWF  67
3DFB:  MOVLW  00
3DFC:  MOVLB  0B
3DFD:  ADDWFC 6E,W
3DFE:  MOVLB  0C
3DFF:  MOVWF  68
3E00:  MOVF   32,W
3E01:  MOVWF  6A
3E02:  MOVF   33,W
3E03:  MOVWF  6B
3E04:  CLRF   6C
3E05:  CLRF   6D
3E06:  CLRF   6B
3E07:  CLRF   6C
3E08:  CLRF   6D
3E09:  MOVLB  08
3E0A:  MOVF   61,W
3E0B:  MOVLB  0D
3E0C:  MOVWF  23
3E0D:  MOVLB  08
3E0E:  MOVF   60,W
3E0F:  MOVLB  0D
3E10:  MOVWF  22
3E11:  MOVLB  08
3E12:  MOVF   5F,W
3E13:  MOVLB  0D
3E14:  MOVWF  21
3E15:  MOVLB  08
3E16:  MOVF   5E,W
3E17:  MOVLB  0D
3E18:  MOVWF  20
3E19:  MOVLB  0C
3E1A:  MOVF   68,W
3E1B:  MOVLB  0D
3E1C:  MOVWF  27
3E1D:  MOVLB  0C
3E1E:  MOVF   67,W
3E1F:  MOVLB  0D
3E20:  MOVWF  26
3E21:  MOVLB  0C
3E22:  MOVF   66,W
3E23:  MOVLB  0D
3E24:  MOVWF  25
3E25:  MOVLB  0C
3E26:  MOVF   65,W
3E27:  MOVLB  0D
3E28:  MOVWF  24
3E29:  MOVLB  0C
3E2A:  MOVF   6A,W
3E2B:  MOVWF  6F
3E2C:  MOVLP  30
3E2D:  MOVLB  00
3E2E:  CALL   000
3E2F:  MOVLP  38
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
3E30:  MOVLW  03
3E31:  MOVLB  0B
3E32:  ADDWF  6B,W
3E33:  MOVLB  0C
3E34:  MOVWF  65
3E35:  MOVLW  00
3E36:  MOVLB  0B
3E37:  ADDWFC 6C,W
3E38:  MOVLB  0C
3E39:  MOVWF  66
3E3A:  MOVLW  00
3E3B:  MOVLB  0B
3E3C:  ADDWFC 6D,W
3E3D:  MOVLB  0C
3E3E:  MOVWF  67
3E3F:  MOVLW  00
3E40:  MOVLB  0B
3E41:  ADDWFC 6E,W
3E42:  MOVLB  0C
3E43:  MOVWF  68
3E44:  MOVF   33,W
3E45:  MOVWF  6A
3E46:  CLRF   6B
3E47:  CLRF   6C
3E48:  CLRF   6D
3E49:  CLRF   6B
3E4A:  CLRF   6C
3E4B:  CLRF   6D
3E4C:  MOVLB  08
3E4D:  MOVF   61,W
3E4E:  MOVLB  0D
3E4F:  MOVWF  23
3E50:  MOVLB  08
3E51:  MOVF   60,W
3E52:  MOVLB  0D
3E53:  MOVWF  22
3E54:  MOVLB  08
3E55:  MOVF   5F,W
3E56:  MOVLB  0D
3E57:  MOVWF  21
3E58:  MOVLB  08
3E59:  MOVF   5E,W
3E5A:  MOVLB  0D
3E5B:  MOVWF  20
3E5C:  MOVLB  0C
3E5D:  MOVF   68,W
3E5E:  MOVLB  0D
3E5F:  MOVWF  27
3E60:  MOVLB  0C
3E61:  MOVF   67,W
3E62:  MOVLB  0D
3E63:  MOVWF  26
3E64:  MOVLB  0C
3E65:  MOVF   66,W
3E66:  MOVLB  0D
3E67:  MOVWF  25
3E68:  MOVLB  0C
3E69:  MOVF   65,W
3E6A:  MOVLB  0D
3E6B:  MOVWF  24
3E6C:  MOVLB  0C
3E6D:  MOVF   6A,W
3E6E:  MOVWF  6F
3E6F:  MOVLP  30
3E70:  MOVLB  00
3E71:  CALL   000
3E72:  MOVLP  38
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
3E73:  MOVLW  04
3E74:  MOVLB  0B
3E75:  ADDWF  6B,W
3E76:  MOVLB  0C
3E77:  MOVWF  65
3E78:  MOVLW  00
3E79:  MOVLB  0B
3E7A:  ADDWFC 6C,W
3E7B:  MOVLB  0C
3E7C:  MOVWF  66
3E7D:  MOVLW  00
3E7E:  MOVLB  0B
3E7F:  ADDWFC 6D,W
3E80:  MOVLB  0C
3E81:  MOVWF  67
3E82:  MOVLW  00
3E83:  MOVLB  0B
3E84:  ADDWFC 6E,W
3E85:  MOVLB  0C
3E86:  MOVWF  68
3E87:  MOVLB  08
3E88:  MOVF   61,W
3E89:  MOVLB  0D
3E8A:  MOVWF  23
3E8B:  MOVLB  08
3E8C:  MOVF   60,W
3E8D:  MOVLB  0D
3E8E:  MOVWF  22
3E8F:  MOVLB  08
3E90:  MOVF   5F,W
3E91:  MOVLB  0D
3E92:  MOVWF  21
3E93:  MOVLB  08
3E94:  MOVF   5E,W
3E95:  MOVLB  0D
3E96:  MOVWF  20
3E97:  MOVLB  0C
3E98:  MOVF   68,W
3E99:  MOVLB  0D
3E9A:  MOVWF  27
3E9B:  MOVLB  0C
3E9C:  MOVF   67,W
3E9D:  MOVLB  0D
3E9E:  MOVWF  26
3E9F:  MOVLB  0C
3EA0:  MOVF   66,W
3EA1:  MOVLB  0D
3EA2:  MOVWF  25
3EA3:  MOVLB  0C
3EA4:  MOVF   65,W
3EA5:  MOVLB  0D
3EA6:  MOVWF  24
3EA7:  MOVLB  0B
3EA8:  MOVF   6F,W
3EA9:  MOVLB  0C
3EAA:  MOVWF  6F
3EAB:  MOVLP  30
3EAC:  MOVLB  00
3EAD:  CALL   000
3EAE:  MOVLP  38
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
3EAF:  MOVLW  47
3EB0:  MOVLB  03
3EB1:  MOVWF  11
3EB2:  MOVLW  07
3EB3:  MOVWF  12
3EB4:  BCF    03.0
3EB5:  MOVLW  0C
3EB6:  MOVLB  0C
3EB7:  MOVWF  6A
3EB8:  MOVLP  08
3EB9:  MOVLB  00
3EBA:  CALL   167
3EBB:  MOVLP  38
3EBC:  MOVLW  41
3EBD:  MOVWF  04
3EBE:  MOVLB  0C
3EBF:  MOVF   33,W
3EC0:  MOVWF  69
3EC1:  MOVF   32,W
3EC2:  MOVWF  68
3EC3:  MOVF   31,W
3EC4:  MOVWF  67
3EC5:  MOVF   30,W
3EC6:  MOVWF  66
*
3F6A:  MOVLW  0D
3F6B:  MOVWF  37
3F6C:  MOVLP  08
3F6D:  MOVLB  00
3F6E:  CALL   0F4
3F6F:  MOVLP  38
3F70:  MOVLW  0A
3F71:  MOVLB  0D
3F72:  MOVWF  37
3F73:  MOVLP  08
3F74:  MOVLB  00
3F75:  CALL   0F4
3F76:  MOVLP  38
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
3F77:  MOVLW  50
3F78:  MOVLB  03
3F79:  MOVWF  11
3F7A:  MOVLW  07
3F7B:  MOVWF  12
3F7C:  BCF    03.0
3F7D:  MOVLW  0D
3F7E:  MOVLB  0C
3F7F:  MOVWF  6A
3F80:  MOVLP  08
3F81:  MOVLB  00
3F82:  CALL   167
3F83:  MOVLP  38
3F84:  MOVLB  0B
3F85:  MOVF   6F,W
3F86:  MOVLB  0C
3F87:  MOVWF  66
3F88:  MOVLW  1B
3F89:  MOVWF  67
3F8A:  MOVLP  18
3F8B:  MOVLB  00
3F8C:  CALL   4FF
3F8D:  MOVLP  38
3F8E:  MOVLW  57
3F8F:  MOVLB  03
3F90:  MOVWF  11
3F91:  MOVLW  07
3F92:  MOVWF  12
3F93:  BSF    03.0
3F94:  MOVLW  04
3F95:  MOVLB  0C
3F96:  MOVWF  6A
3F97:  MOVLP  08
3F98:  MOVLB  00
3F99:  CALL   167
3F9A:  MOVLP  38
3F9B:  MOVLB  0B
3F9C:  INCF   5F,F
3F9D:  GOTO   014
3F9E:  MOVLB  00
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
3F9F:  MOVLW  5A
3FA0:  MOVLB  03
3FA1:  MOVWF  11
3FA2:  MOVLW  07
3FA3:  MOVWF  12
3FA4:  MOVLP  08
3FA5:  MOVLB  00
3FA6:  CALL   119
3FA7:  MOVLP  38
....................     fprintf(PC, "____________________\r\n\r\n");
3FA8:  MOVLW  67
3FA9:  MOVLB  03
3FAA:  MOVWF  11
3FAB:  MOVLW  07
3FAC:  MOVWF  12
3FAD:  MOVLP  08
3FAE:  MOVLB  00
3FAF:  CALL   119
3FB0:  MOVLP  38
3FB1:  MOVLP  28
3FB2:  GOTO   755 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 8 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 200000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D2
.................... //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
.................... #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_E0
.................... #define EN_NPWR PIN_A4
.................... #define EN_MEAS_VOL PIN_A5
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS_VOLT   AD7490_VIN0
.................... #define ADC_CIGS_CURR   AD7490_VIN1
.................... #define ADC_PD          AD7490_VIN2
.................... #define ADC_TEMP_TOP    AD7490_VIN3
.................... #define ADC_TEMP_BOT    AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    MEAURE_DATA,  // <- assign your missoins
....................    PICLOG_DATA
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
2CBA:  MOVLB  0B
2CBB:  MOVF   22,W
2CBC:  MOVWF  04
2CBD:  MOVF   23,W
2CBE:  MOVWF  05
2CBF:  MOVIW  [FSR0+00],W
2CC0:  MOVWF  24
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
2CC1:  MOVLW  74
2CC2:  MOVLB  03
2CC3:  MOVWF  11
2CC4:  MOVLW  07
2CC5:  MOVWF  12
2CC6:  MOVLP  08
2CC7:  MOVLB  00
2CC8:  CALL   119
2CC9:  MOVLP  28
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
2CCA:  MOVLW  97
2CCB:  MOVLB  03
2CCC:  MOVWF  11
2CCD:  MOVLW  07
2CCE:  MOVWF  12
2CCF:  BCF    03.0
2CD0:  MOVLW  0C
2CD1:  MOVLB  0C
2CD2:  MOVWF  6A
2CD3:  MOVLP  08
2CD4:  MOVLB  00
2CD5:  CALL   167
2CD6:  MOVLP  28
2CD7:  MOVLB  0B
2CD8:  MOVF   24,W
2CD9:  MOVLB  0C
2CDA:  MOVWF  6A
2CDB:  MOVLW  37
2CDC:  MOVWF  6B
2CDD:  MOVLP  08
2CDE:  MOVLB  00
2CDF:  CALL   4BA
2CE0:  MOVLP  28
2CE1:  MOVLW  9E
2CE2:  MOVLB  03
2CE3:  MOVWF  11
2CE4:  MOVLW  07
2CE5:  MOVWF  12
2CE6:  BCF    03.0
2CE7:  MOVLW  04
2CE8:  MOVLB  0C
2CE9:  MOVWF  6A
2CEA:  MOVLP  08
2CEB:  MOVLB  00
2CEC:  CALL   167
2CED:  MOVLP  28
....................    switch(command_id)
2CEE:  MOVLB  0B
2CEF:  MOVF   24,W
2CF0:  XORLW  00
2CF1:  MOVLB  00
2CF2:  BTFSC  03.2
2CF3:  GOTO   513
2CF4:  XORLW  10
2CF5:  BTFSC  03.2
2CF6:  GOTO   51D
2CF7:  XORLW  11
2CF8:  BTFSC  03.2
2CF9:  GOTO   527
2CFA:  XORLW  03
2CFB:  BTFSC  03.2
2CFC:  GOTO   528
2CFD:  XORLW  92
2CFE:  BTFSC  03.2
2CFF:  GOTO   529
2D00:  XORLW  06
2D01:  BTFSC  03.2
2D02:  GOTO   533
2D03:  XORLW  09
2D04:  BTFSC  03.2
2D05:  GOTO   53D
2D06:  XORLW  EE
2D07:  BTFSC  03.2
2D08:  GOTO   547
2D09:  XORLW  03
2D0A:  BTFSC  03.2
2D0B:  GOTO   549
2D0C:  XORLW  01
2D0D:  BTFSC  03.2
2D0E:  GOTO   54B
2D0F:  XORLW  03
2D10:  BTFSC  03.2
2D11:  GOTO   54D
2D12:  GOTO   54F
....................    {
....................       case ID_DUMMY: // example command
....................          mode_dummy(content);
2D13:  MOVLB  0B
2D14:  MOVF   23,W
2D15:  MOVWF  26
2D16:  MOVF   22,W
2D17:  MOVWF  25
2D18:  MOVLP  18
2D19:  MOVLB  00
2D1A:  GOTO   3D4
2D1B:  MOVLP  28
....................          //mode_iv_meas_adc();
....................          break;
2D1C:  GOTO   558
....................       case 0x10:
....................          mode_test_iv(content);
2D1D:  MOVLB  0B
2D1E:  MOVF   23,W
2D1F:  MOVWF  26
2D20:  MOVF   22,W
2D21:  MOVWF  25
2D22:  MOVLP  18
2D23:  MOVLB  00
2D24:  GOTO   661
2D25:  MOVLP  28
....................          break;
2D26:  GOTO   558
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
2D27:  GOTO   558
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
2D28:  GOTO   558
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
2D29:  MOVLB  0B
2D2A:  MOVF   23,W
2D2B:  MOVWF  26
2D2C:  MOVF   22,W
2D2D:  MOVWF  25
2D2E:  MOVLP  18
2D2F:  MOVLB  00
2D30:  GOTO   707
2D31:  MOVLP  28
....................          break;
2D32:  GOTO   558
....................       /*
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
....................          break;
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
....................          break;
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
....................          break;
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
....................          break;
....................       */
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
2D33:  MOVLB  0B
2D34:  MOVF   23,W
2D35:  MOVWF  26
2D36:  MOVF   22,W
2D37:  MOVWF  25
2D38:  MOVLP  20
2D39:  MOVLB  00
2D3A:  GOTO   448
2D3B:  MOVLP  28
....................          break;
2D3C:  GOTO   558
....................       /*
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
....................          break;
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
....................          break;
....................       */
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
2D3D:  MOVLB  0B
2D3E:  MOVF   23,W
2D3F:  MOVWF  26
2D40:  MOVF   22,W
2D41:  MOVWF  25
2D42:  MOVLP  18
2D43:  MOVLB  00
2D44:  GOTO   763
2D45:  MOVLP  28
....................          break;
2D46:  GOTO   558
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
2D47:  CALL   37C
....................          break;
2D48:  GOTO   558
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
2D49:  CALL   37C
....................          break;
2D4A:  GOTO   558
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
2D4B:  CALL   37C
....................          break;
2D4C:  GOTO   558
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
2D4D:  CALL   37C
....................          break;
2D4E:  GOTO   558
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
2D4F:  MOVLW  A1
2D50:  MOVLB  03
2D51:  MOVWF  11
2D52:  MOVLW  07
2D53:  MOVWF  12
2D54:  MOVLP  08
2D55:  MOVLB  00
2D56:  CALL   119
2D57:  MOVLP  28
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
2D58:  MOVLW  AD
2D59:  MOVLB  03
2D5A:  MOVWF  11
2D5B:  MOVLW  07
2D5C:  MOVWF  12
2D5D:  MOVLP  08
2D5E:  MOVLB  00
2D5F:  CALL   119
2D60:  MOVLP  28
2D61:  MOVLP  20
2D62:  GOTO   7A2 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
2F65:  MOVLW  D0
2F66:  MOVLB  03
2F67:  MOVWF  11
2F68:  MOVLW  07
2F69:  MOVWF  12
2F6A:  MOVLP  08
2F6B:  MOVLB  00
2F6C:  CALL   119
2F6D:  MOVLP  28
....................    
....................    switch(command->frame_id)
2F6E:  MOVLB  0A
2F6F:  MOVF   6B,W
2F70:  MOVWF  04
2F71:  MOVF   6C,W
2F72:  MOVWF  05
2F73:  ADDFSR 00,FSR0
2F74:  MOVF   00,W
2F75:  XORLW  00
2F76:  MOVLB  00
2F77:  BTFSC  03.2
2F78:  GOTO   780
2F79:  XORLW  01
2F7A:  BTFSC  03.2
2F7B:  GOTO   78A
2F7C:  XORLW  03
2F7D:  BTFSC  03.2
2F7E:  GOTO   79A
2F7F:  GOTO   7A1
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
2F80:  MOVLB  0A
2F81:  MOVF   6C,W
2F82:  MOVWF  6E
2F83:  MOVF   6B,W
2F84:  MOVWF  6D
2F85:  MOVLP  20
2F86:  MOVLB  00
2F87:  GOTO   77B
2F88:  MOVLP  28
....................          break;
2F89:  GOTO   7A1
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
2F8A:  MOVLB  0A
2F8B:  MOVF   6C,W
2F8C:  MOVWF  6E
2F8D:  MOVF   6B,W
2F8E:  MOVWF  6D
2F8F:  MOVLP  20
2F90:  MOVLB  00
2F91:  GOTO   7B0
2F92:  MOVLP  28
2F93:  MOVF   78,F
2F94:  BTFSC  03.2
2F95:  GOTO   799
....................             return TRUE; // if status is finished, return TRUE
2F96:  MOVLW  01
2F97:  MOVWF  78
2F98:  GOTO   7A3
....................          }        
....................          break;
2F99:  GOTO   7A1
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
2F9A:  MOVLB  0A
2F9B:  MOVF   6C,W
2F9C:  MOVWF  6E
2F9D:  MOVF   6B,W
2F9E:  MOVWF  6D
2F9F:  MOVLB  00
2FA0:  GOTO   72A
....................          break;
....................    }
....................    return FALSE;
2FA1:  MOVLW  00
2FA2:  MOVWF  78
2FA3:  MOVLP  30
2FA4:  GOTO   2DA (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
277B:  MOVLW  DC
277C:  MOVLB  03
277D:  MOVWF  11
277E:  MOVLW  07
277F:  MOVWF  12
2780:  MOVLP  08
2781:  MOVLB  00
2782:  CALL   119
2783:  MOVLP  20
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
2784:  MOVLW  E7
2785:  MOVLB  03
2786:  MOVWF  11
2787:  MOVLW  07
2788:  MOVWF  12
2789:  MOVLP  08
278A:  MOVLB  00
278B:  CALL   119
278C:  MOVLP  20
....................    transmit_ack();
278D:  MOVLP  08
278E:  CALL   7D0
278F:  MOVLP  20
.................... 
....................    status[0] = EXECUTING_MISSION;
2790:  MOVLW  02
2791:  MOVWF  29
....................    execute_mission(command->content);
2792:  MOVLW  03
2793:  MOVLB  0A
2794:  ADDWF  6D,W
2795:  MOVLB  0B
2796:  MOVWF  20
2797:  MOVLW  00
2798:  MOVLB  0A
2799:  ADDWFC 6E,W
279A:  MOVLB  0B
279B:  MOVWF  21
279C:  MOVWF  23
279D:  MOVF   20,W
279E:  MOVWF  22
279F:  MOVLP  28
27A0:  MOVLB  00
27A1:  GOTO   4BA
27A2:  MOVLP  20
....................    if (is_empty_smf_data())
27A3:  MOVLP  08
27A4:  CALL   7F2
27A5:  MOVLP  20
27A6:  MOVF   78,F
27A7:  BTFSC  03.2
27A8:  GOTO   7AC
....................       status[0] = FINISHED;
27A9:  MOVLW  06
27AA:  MOVWF  29
27AB:  GOTO   7AE
....................    else
....................       status[0] = SMF_USE_REQ;
27AC:  MOVLW  04
27AD:  MOVWF  29
27AE:  MOVLP  28
27AF:  GOTO   7A1 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
27B0:  MOVLW  F4
27B1:  MOVLB  03
27B2:  MOVWF  11
27B3:  MOVLW  07
27B4:  MOVWF  12
27B5:  MOVLP  08
27B6:  MOVLB  00
27B7:  CALL   119
27B8:  MOVLP  20
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
27B9:  MOVLW  00
27BA:  MOVLB  03
27BB:  MOVWF  11
27BC:  MOVLW  08
27BD:  MOVWF  12
27BE:  MOVLP  08
27BF:  MOVLB  00
27C0:  CALL   119
27C1:  MOVLP  20
....................    transmit_status();
27C2:  MOVLP  10
27C3:  GOTO   7F1
27C4:  MOVLP  20
....................    if (status[0] == FINISHED)
27C5:  MOVF   29,W
27C6:  SUBLW  06
27C7:  BTFSS  03.2
27C8:  GOTO   7D6
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
27C9:  MOVLW  0F
27CA:  MOVLB  03
27CB:  MOVWF  11
27CC:  MOVLW  08
27CD:  MOVWF  12
27CE:  MOVLP  08
27CF:  MOVLB  00
27D0:  CALL   119
27D1:  MOVLP  20
....................       return TRUE;
27D2:  MOVLW  01
27D3:  MOVWF  78
27D4:  GOTO   7D8
....................    }
27D5:  GOTO   7D8
....................    else{
....................       return FALSE;
27D6:  MOVLW  00
27D7:  MOVWF  78
....................    }
27D8:  MOVLP  28
27D9:  GOTO   792 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
2F2A:  MOVLW  1D
2F2B:  MOVLB  03
2F2C:  MOVWF  11
2F2D:  MOVLW  08
2F2E:  MOVWF  12
2F2F:  MOVLP  08
2F30:  MOVLB  00
2F31:  CALL   119
2F32:  MOVLP  28
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
2F33:  MOVLW  2A
2F34:  MOVLB  03
2F35:  MOVWF  11
2F36:  MOVLW  08
2F37:  MOVWF  12
2F38:  MOVLP  08
2F39:  MOVLB  00
2F3A:  CALL   119
2F3B:  MOVLP  28
....................     transmit_ack();
2F3C:  MOVLP  08
2F3D:  CALL   7D0
2F3E:  MOVLP  28
....................     
....................     if (command->content[0] == ALLOW) {
2F3F:  MOVLB  0A
2F40:  MOVF   6D,W
2F41:  MOVWF  04
2F42:  MOVF   6E,W
2F43:  MOVWF  05
2F44:  ADDFSR 03,FSR0
2F45:  MOVF   00,F
2F46:  BTFSS  03.2
2F47:  GOTO   75A
....................         fprintf(PC, "\t\t-> allowd\r\n");
2F48:  MOVLW  37
2F49:  MOVLB  03
2F4A:  MOVWF  11
2F4B:  MOVLW  08
2F4C:  MOVWF  12
2F4D:  MOVLP  08
2F4E:  MOVLB  00
2F4F:  CALL   119
2F50:  MOVLP  28
....................         status[0] = COPYING;
2F51:  MOVLW  05
2F52:  MOVWF  29
....................         copy_data();
2F53:  MOVLP  38
2F54:  GOTO   000
2F55:  MOVLP  28
....................         status[0] = FINISHED;
2F56:  MOVLW  06
2F57:  MOVWF  29
....................     } else {
2F58:  GOTO   763
2F59:  MOVLB  0A
....................         fprintf(PC, "\t\t-> denyed\r\n");
2F5A:  MOVLW  3E
2F5B:  MOVLB  03
2F5C:  MOVWF  11
2F5D:  MOVLW  08
2F5E:  MOVWF  12
2F5F:  MOVLP  08
2F60:  MOVLB  00
2F61:  CALL   119
2F62:  MOVLP  28
....................     }
2F63:  MOVLP  28
2F64:  GOTO   7A1 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG Parameter
.................... #define PICLOG_PARAM_START 0x01
.................... #define PICLOG_PARAM_END 0x02
.................... 
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x00000000
.................... #define ADDRESS_MISF_END                0x00F42400
.................... #define ADDRESS_MANEGE_START            0x00000000
.................... #define ADDRESS_MANEGE_END              0x0000FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x00010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x0001FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x00020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x0015FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x00160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x0095FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... typedef struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... //0x8B30
.................... 
.................... 
.................... 
.................... typedef union AD7490_RESISTOR
.................... {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct fields
....................     {
....................         unsigned int blank3 :1 ; // bit 0 (LSB)
....................         unsigned int blank2 :1   ; // bit 1
....................         unsigned int blank1 :1   ; // bit 2
....................         unsigned int blank0 :1   ; // bit 3
....................         unsigned int coding:1       ; // bit 12
....................         unsigned int range   :1    ; // bit 5
....................         unsigned int weak_tri:1     ; // bit 4
....................         unsigned int shadow:1   ; // bit 13
....................         unsigned int write:1    ; // bit 15 (MSB)
....................         unsigned int seq :1     ; // bit 14
....................         unsigned int add3 :1    ; // bit 11
....................         unsigned int add2  :1   ; // bit 10
....................         unsigned int add1   :1  ; // bit 9
....................         unsigned int add0    :1 ; // bit 8
....................         unsigned int pm1    :1  ; // bit 7
....................         unsigned int pm0     :1 ; // bit 6
....................     } fields;
.................... } AD7490_RESISTOR;
.................... 
.................... unsigned int8 coding; // 1: Two's complement, 0: Binary
.................... unsigned int8 write;  // 1: Write operation, 0: Read operation
.................... unsigned int8 seq;    // 1: Sequential mode, 0: Random mode
.................... unsigned int8 range; // 1: Range mode, 0: Normal mode
.................... unsigned int8 weak_tri; // 1: Weak trigger, 0: Strong trigger
.................... unsigned int8 shadow; // 1: Shadow register, 0: Direct access
.................... unsigned int16 ad7490_readdata(unsigned int16 channel);
.................... //AD7490_RESISTOR reg;
.................... 
.................... AD7490_RESISTOR reg = {0}; // Initialize the AD7490_RESISTOR union
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... // Private Functions
.................... void set_add(int8 channel);
.................... void set_pm(int8 powermode);
.................... void print_bits(unsigned int16 data);
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000000
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000011
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
3194:  MOVLB  03
3195:  BSF    1F.3
3196:  MOVLW  A0
3197:  MOVWF  1B
3198:  MOVLW  01
3199:  MOVWF  1C
319A:  MOVLW  A6
319B:  MOVWF  1E
319C:  MOVLW  90
319D:  MOVWF  1D
319E:  MOVLB  01
319F:  BCF    0D.4
31A0:  MOVLB  02
31A1:  BSF    0D.4
31A2:  MOVLB  04
31A3:  BCF    15.5
31A4:  MOVLW  40
31A5:  MOVWF  14
31A6:  MOVLW  13
31A7:  MOVWF  12
31A8:  MOVLW  2A
31A9:  MOVWF  15
31AA:  MOVLB  02
31AB:  BCF    1D.5
31AC:  BCF    1D.3
31AD:  BCF    1D.4
31AE:  MOVLB  01
31AF:  BCF    0E.5
31B0:  BSF    0E.4
31B1:  BCF    0E.3
31B2:  MOVLB  00
31B3:  BCF    28.0
31B4:  CLRF   30
31B5:  CLRF   2F
31B6:  CLRF   2E
31B7:  CLRF   2D
31B8:  CLRF   34
31B9:  CLRF   33
31BA:  CLRF   32
31BB:  CLRF   31
31BC:  CLRF   36
31BD:  CLRF   35
31BE:  CLRF   38
31BF:  CLRF   37
31C0:  CLRF   59
31C1:  MOVLB  08
31C2:  CLRF   35
31C3:  CLRF   34
31C4:  CLRF   33
31C5:  CLRF   32
31C6:  CLRF   37
31C7:  CLRF   36
31C8:  CLRF   39
31C9:  CLRF   38
31CA:  CLRF   3B
31CB:  CLRF   3A
31CC:  CLRF   3D
31CD:  CLRF   3C
31CE:  CLRF   70
31CF:  MOVLW  1E
31D0:  MOVLB  0A
31D1:  MOVWF  5D
31D2:  MOVLB  03
31D3:  CLRF   0C
31D4:  CLRF   0D
31D5:  CLRF   0E
31D6:  CLRF   0F
31D7:  CLRF   10
31D8:  MOVLB  02
31D9:  CLRF   12
31DA:  CLRF   11
31DB:  GOTO   212
31DC:  DATA 04,34
31DD:  DATA 20,34
31DE:  DATA 09,34
31DF:  DATA 03,34
31E0:  DATA 00,34
31E1:  DATA 00,34
31E2:  DATA 00,34
31E3:  DATA 20,34
31E4:  DATA 60,34
31E5:  DATA 19,34
31E6:  DATA 00,34
31E7:  DATA FF,34
31E8:  DATA 60,34
31E9:  DATA 3A,34
31EA:  DATA 00,34
31EB:  DATA FF,34
31EC:  DATA C0,34
31ED:  DATA 00,34
31EE:  DATA 5A,34
31EF:  DATA C0,34
31F0:  DATA 00,34
31F1:  DATA 04,34
31F2:  DATA 22,34
31F3:  DATA 9E,34
31F4:  DATA 00,34
31F5:  DATA 00,34
31F6:  DATA 00,34
31F7:  DATA 00,34
31F8:  DATA 08,34
31F9:  DATA 22,34
31FA:  DATA BA,34
31FB:  DATA 00,34
31FC:  DATA 00,34
31FD:  DATA 7B,34
31FE:  DATA 00,34
31FF:  DATA 01,34
3200:  DATA 01,34
3201:  DATA 79,34
3202:  DATA 00,34
3203:  DATA 08,34
3204:  DATA 22,34
3205:  DATA C3,34
3206:  DATA 00,34
3207:  DATA 00,34
3208:  DATA 00,34
3209:  DATA 09,34
320A:  DATA 01,34
320B:  DATA 00,34
320C:  DATA 02,34
320D:  DATA 01,34
320E:  DATA 92,34
320F:  DATA C0,34
3210:  DATA 00,34
3211:  DATA 00,34
3212:  MOVLW  31
3213:  MOVWF  05
3214:  MOVLW  DC
3215:  MOVWF  04
3216:  BSF    05.7
3217:  MOVIW  [FSR0++],W
3218:  MOVWF  77
3219:  XORLW  00
321A:  BTFSC  03.2
321B:  GOTO   22C
321C:  MOVIW  [FSR0++],W
321D:  MOVWF  78
321E:  BTFSC  78.7
321F:  GOTO   224
3220:  ANDLW  3F
3221:  MOVWF  07
3222:  MOVIW  [FSR0++],W
3223:  MOVWF  06
3224:  BTFSC  78.6
3225:  MOVIW  [FSR0++],W
3226:  BTFSS  78.6
3227:  MOVIW  [FSR0++],W
3228:  MOVWI  W,[FSR1++]
3229:  DECFSZ 77,F
322A:  GOTO   226
322B:  GOTO   217
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
322C:  MOVLW  45
322D:  MOVLB  03
322E:  MOVWF  11
322F:  MOVLW  08
3230:  MOVWF  12
3231:  MOVLP  08
3232:  MOVLB  00
3233:  CALL   119
3234:  MOVLP  30
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM3.\r\n");
3235:  MOVLW  68
3236:  MOVLB  03
3237:  MOVWF  11
3238:  MOVLW  08
3239:  MOVWF  12
323A:  MOVLP  08
323B:  MOVLB  00
323C:  CALL   119
323D:  MOVLP  30
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
323E:  MOVLW  7F
323F:  MOVLB  03
3240:  MOVWF  11
3241:  MOVLW  08
3242:  MOVWF  12
3243:  BCF    03.0
3244:  MOVLW  10
3245:  MOVLB  0C
3246:  MOVWF  6A
3247:  MOVLP  08
3248:  MOVLB  00
3249:  CALL   167
324A:  MOVLP  30
324B:  MOVLW  92
324C:  MOVLB  03
324D:  MOVWF  11
324E:  MOVLW  08
324F:  MOVWF  12
3250:  MOVLP  08
3251:  MOVLB  00
3252:  CALL   119
3253:  MOVLP  30
3254:  MOVLW  20
3255:  MOVLB  0D
3256:  MOVWF  37
3257:  MOVLP  08
3258:  MOVLB  00
3259:  CALL   0F4
325A:  MOVLP  30
325B:  MOVLW  97
325C:  MOVLB  03
325D:  MOVWF  11
325E:  MOVLW  08
325F:  MOVWF  12
3260:  MOVLP  08
3261:  MOVLB  00
3262:  CALL   119
3263:  MOVLP  30
3264:  MOVLW  89
3265:  MOVLB  03
3266:  MOVWF  11
3267:  MOVLW  08
3268:  MOVWF  12
3269:  BSF    03.0
326A:  MOVLW  0F
326B:  MOVLB  0C
326C:  MOVWF  6A
326D:  MOVLP  08
326E:  MOVLB  00
326F:  CALL   167
3270:  MOVLP  30
....................    
....................    io_init();
3271:  MOVLP  08
3272:  GOTO   1C1
3273:  MOVLP  30
....................    adc_init();
3274:  MOVLP  08
3275:  GOTO   1D9
3276:  MOVLP  30
....................    setup_uart_to_boss();
3277:  MOVLP  08
3278:  GOTO   1F5
3279:  MOVLP  30
....................    setup_timer();
327A:  MOVLP  08
327B:  GOTO   209
327C:  MOVLP  30
....................    ad7490_init();
327D:  MOVLP  08
327E:  GOTO   227
327F:  MOVLP  30
....................    misf_init();
3280:  MOVLP  10
3281:  CALL   000
3282:  MOVLP  30
....................    piclog_make(PICLOG_STARTUP,0x00);
3283:  MOVF   70,W
3284:  MOVLB  0C
3285:  MOVWF  30
3286:  CLRF   31
3287:  MOVLP  18
3288:  MOVLB  00
3289:  CALL   000
328A:  MOVLP  30
.................... 
....................    int1 is_finished = FALSE;
328B:  MOVLB  0A
328C:  BCF    5E.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
328D:  MOVLW  9C
328E:  MOVLB  03
328F:  MOVWF  11
3290:  MOVLW  08
3291:  MOVWF  12
3292:  MOVLP  08
3293:  MOVLB  00
3294:  CALL   119
3295:  MOVLP  30
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
3296:  MOVLW  AF
3297:  MOVLB  03
3298:  MOVWF  11
3299:  MOVLW  08
329A:  MOVWF  12
329B:  MOVLP  08
329C:  MOVLB  00
329D:  CALL   119
329E:  MOVLP  30
....................    
....................    //Start loop
....................    while(!is_finished)
329F:  MOVLB  0A
32A0:  BTFSC  5E.0
32A1:  GOTO   300
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
32A2:  MOVLB  00
32A3:  MOVF   59,F
32A4:  BTFSC  03.2
32A5:  GOTO   2E8
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
32A6:  MOVLW  20
32A7:  MOVLB  0B
32A8:  MOVWF  22
32A9:  MOVLW  19
32AA:  MOVWF  21
32AB:  MOVLB  00
32AC:  MOVF   59,W
32AD:  MOVLB  0B
32AE:  MOVWF  23
32AF:  MOVLP  18
32B0:  MOVLB  00
32B1:  GOTO   11A
32B2:  MOVLP  30
32B3:  MOVF   79,W
32B4:  MOVWF  7A
32B5:  MOVF   78,W
32B6:  MOVWF  04
32B7:  MOVF   7A,W
32B8:  MOVWF  05
32B9:  MOVLW  0C
32BA:  MOVWF  78
32BB:  MOVLW  23
32BC:  MOVWF  07
32BD:  MOVLW  5F
32BE:  MOVWF  06
32BF:  MOVIW  [FSR0++],W
32C0:  MOVWI  W,[FSR1++]
32C1:  DECFSZ 78,F
32C2:  GOTO   2BF
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
32C3:  MOVLW  20
32C4:  MOVLB  0A
32C5:  MOVWF  6C
32C6:  MOVLW  19
32C7:  MOVWF  6B
32C8:  MOVLW  20
32C9:  MOVWF  6E
32CA:  MOVLW  39
32CB:  MOVWF  6D
32CC:  MOVLP  08
32CD:  MOVLB  00
32CE:  GOTO   7B2
32CF:  MOVLP  30
....................          
....................          if(recieve_cmd.is_exist)
32D0:  MOVLB  0A
32D1:  BTFSS  61.0
32D2:  GOTO   2DF
....................             //is_finished = execute_command(&recieve_cmd); 
....................             int1 flag = execute_command(&recieve_cmd);
32D3:  MOVLW  23
32D4:  MOVWF  6C
32D5:  MOVLW  5F
32D6:  MOVWF  6B
32D7:  MOVLP  28
32D8:  MOVLB  00
32D9:  GOTO   765
32DA:  MOVLP  30
32DB:  MOVLB  0A
32DC:  BCF    5E.1
32DD:  BTFSC  78.0
32DE:  BSF    5E.1
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
32DF:  MOVLW  BE
32E0:  MOVLB  03
32E1:  MOVWF  11
32E2:  MOVLW  08
32E3:  MOVWF  12
32E4:  MOVLP  08
32E5:  MOVLB  00
32E6:  CALL   119
32E7:  MOVLP  30
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
32E8:  MOVLB  0A
32E9:  BTFSC  5E.0
....................          break;
32EA:  GOTO   300
....................          
....................       delay_ms(400);
32EB:  MOVLW  02
32EC:  MOVWF  6B
32ED:  MOVLW  C8
32EE:  MOVLB  0D
32EF:  MOVWF  4D
32F0:  MOVLP  08
32F1:  MOVLB  00
32F2:  CALL   623
32F3:  MOVLP  30
32F4:  MOVLB  0A
32F5:  DECFSZ 6B,F
32F6:  GOTO   2ED
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
32F7:  MOVLW  2E
32F8:  MOVLB  0D
32F9:  MOVWF  37
32FA:  MOVLP  08
32FB:  MOVLB  00
32FC:  CALL   0F4
32FD:  MOVLP  30
32FE:  GOTO   29F
32FF:  MOVLB  0A
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
3300:  MOVLW  CE
3301:  MOVLB  03
3302:  MOVWF  11
3303:  MOVLW  08
3304:  MOVWF  12
3305:  MOVLP  08
3306:  MOVLB  00
3307:  CALL   119
3308:  MOVLP  30
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3309:  MOVLW  2E
330A:  MOVLB  0D
330B:  MOVWF  37
330C:  MOVLP  08
330D:  MOVLB  00
330E:  CALL   0F4
330F:  MOVLP  30
....................       delay_ms(1000);
3310:  MOVLW  04
3311:  MOVLB  0A
3312:  MOVWF  6B
3313:  MOVLW  FA
3314:  MOVLB  0D
3315:  MOVWF  4D
3316:  MOVLP  08
3317:  MOVLB  00
3318:  CALL   623
3319:  MOVLP  30
331A:  MOVLB  0A
331B:  DECFSZ 6B,F
331C:  GOTO   313
331D:  MOVLB  00
331E:  GOTO   309
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
331F:  MOVLW  EE
3320:  MOVLB  03
3321:  MOVWF  11
3322:  MOVLW  08
3323:  MOVWF  12
3324:  MOVLP  08
3325:  MOVLB  00
3326:  CALL   119
3327:  MOVLP  30
....................    
.................... }
.................... 
3328:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
