CCS PCM C Compiler, Version 5.104, 57077               20-6-25 18:44

               Filename:   build\mmj_cigs_main.lst

               ROM used:   14319 words (87%)
                           Largest free fragment is 1687
               RAM used:   889 (43%) at main() level
                           1234 (60%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  38
0001:  GOTO   000
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  CLRF   05
0020:  MOVLW  91
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  11.0
0025:  GOTO   046
0026:  CLRF   05
0027:  MOVLW  91
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  11.5
002C:  GOTO   048
002D:  MOVF   20,W
002E:  MOVWF  77
002F:  MOVF   21,W
0030:  MOVWF  78
0031:  MOVF   22,W
0032:  MOVWF  79
0033:  MOVF   23,W
0034:  MOVWF  7A
0035:  MOVF   24,W
0036:  MOVLB  03
0037:  MOVWF  11
0038:  MOVLB  00
0039:  MOVF   25,W
003A:  MOVLB  03
003B:  MOVWF  12
003C:  MOVLB  00
003D:  MOVF   26,W
003E:  MOVLB  03
003F:  MOVWF  13
0040:  MOVLB  00
0041:  MOVF   27,W
0042:  MOVLB  03
0043:  MOVWF  14
0044:  RETFIE
0045:  MOVLB  00
0046:  MOVLP  00
0047:  GOTO   04A
0048:  MOVLP  00
0049:  GOTO   06A
.................... #include "cigs/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
005A:  DATA D4,34
005B:  DATA ED,32
005C:  DATA 72,10
005D:  DATA 49,37
005E:  DATA 69,3A
005F:  DATA E9,30
0060:  DATA EC,34
0061:  DATA FA,32
0062:  DATA 0D,05
0063:  DATA 00,00
0064:  DATA 89,21
0065:  DATA EF,36
0066:  DATA 70,36
0067:  DATA 65,3A
0068:  DATA E5,06
0069:  DATA 0A,00
*
0083:  DATA D5,20
0084:  DATA 52,2A
0085:  DATA A0,24
0086:  DATA EE,34
0087:  DATA F4,34
0088:  DATA 61,36
0089:  DATA 69,3D
008A:  DATA E5,06
008B:  DATA 0A,00
008C:  DATA 89,21
008D:  DATA EF,36
008E:  DATA 70,36
008F:  DATA 65,3A
0090:  DATA E5,06
0091:  DATA 0A,00
0092:  DATA CD,24
0093:  DATA D3,29
0094:  DATA C9,27
0095:  DATA 4E,10
0096:  DATA 46,26
0097:  DATA C1,29
0098:  DATA 48,10
0099:  DATA 49,37
009A:  DATA 69,3A
009B:  DATA E9,30
009C:  DATA EC,34
009D:  DATA FA,32
009E:  DATA 0D,05
009F:  DATA 00,01
00A0:  DATA 09,23
00A1:  DATA EC,30
00A2:  DATA 73,34
00A3:  DATA A0,34
00A4:  DATA 73,10
00A5:  DATA EE,37
00A6:  DATA 74,10
00A7:  DATA E3,37
00A8:  DATA 6E,37
00A9:  DATA E5,31
00AA:  DATA F4,32
00AB:  DATA E4,06
00AC:  DATA 0A,00
00AD:  DATA 89,29
00AE:  DATA 4D,23
00AF:  DATA 20,10
00B0:  DATA D0,24
00B1:  DATA 43,26
00B2:  DATA CF,23
00B3:  DATA A0,2A
00B4:  DATA F3,32
00B5:  DATA A0,21
00B6:  DATA EF,3A
00B7:  DATA 6E,3A
00B8:  DATA 65,39
00B9:  DATA 20,10
00BA:  DATA 20,10
00BB:  DATA 20,10
00BC:  DATA 3A,10
00BD:  DATA 30,3C
00BE:  DATA 25,18
00BF:  DATA 38,26
00C0:  DATA D8,06
00C1:  DATA 0A,00
00C2:  DATA 89,29
00C3:  DATA 4D,23
00C4:  DATA 20,10
00C5:  DATA D0,24
00C6:  DATA 43,26
00C7:  DATA CF,23
00C8:  DATA 20,26
00C9:  DATA EF,37
00CA:  DATA 70,10
00CB:  DATA C3,37
00CC:  DATA 75,37
00CD:  DATA F4,32
00CE:  DATA 72,10
00CF:  DATA 20,10
00D0:  DATA 20,10
00D1:  DATA 3A,10
00D2:  DATA 30,3C
00D3:  DATA 25,18
00D4:  DATA 32,2C
00D5:  DATA 0D,05
00D6:  DATA 00,01
00D7:  DATA 89,29
00D8:  DATA 4D,23
00D9:  DATA 20,10
00DA:  DATA CD,22
00DB:  DATA C1,29
00DC:  DATA 20,10
00DD:  DATA A0,2A
00DE:  DATA F3,32
00DF:  DATA A0,21
00E0:  DATA EF,3A
00E1:  DATA 6E,3A
00E2:  DATA 65,39
00E3:  DATA 20,10
00E4:  DATA 20,10
00E5:  DATA 20,10
00E6:  DATA 3A,10
00E7:  DATA 30,3C
00E8:  DATA 25,18
00E9:  DATA 38,26
00EA:  DATA D8,06
00EB:  DATA 0A,00
00EC:  DATA 89,29
00ED:  DATA 4D,23
00EE:  DATA 20,10
00EF:  DATA CD,22
00F0:  DATA C1,29
00F1:  DATA 20,10
00F2:  DATA 20,26
00F3:  DATA EF,37
00F4:  DATA 70,10
00F5:  DATA C3,37
00F6:  DATA 75,37
00F7:  DATA F4,32
00F8:  DATA 72,10
00F9:  DATA 20,10
00FA:  DATA 20,10
00FB:  DATA 3A,10
00FC:  DATA 30,3C
00FD:  DATA 25,18
00FE:  DATA 32,2C
00FF:  DATA 0D,05
0100:  DATA 00,01
0101:  DATA 89,26
0102:  DATA C9,29
0103:  DATA 46,10
0104:  DATA D0,24
0105:  DATA 43,26
0106:  DATA CF,23
0107:  DATA A0,2A
0108:  DATA F3,32
0109:  DATA A0,21
010A:  DATA EF,3A
010B:  DATA 6E,3A
010C:  DATA 65,39
010D:  DATA 20,10
010E:  DATA 20,10
010F:  DATA 20,10
0110:  DATA 3A,10
0111:  DATA 30,3C
0112:  DATA 25,18
0113:  DATA 38,26
0114:  DATA D8,06
0115:  DATA 0A,00
0116:  DATA 89,26
0117:  DATA C9,29
0118:  DATA 46,10
0119:  DATA D0,24
011A:  DATA 43,26
011B:  DATA CF,23
011C:  DATA A0,2A
011D:  DATA EE,31
011E:  DATA 6F,38
011F:  DATA F9,32
0120:  DATA 64,10
0121:  DATA C3,37
0122:  DATA 75,37
0123:  DATA F4,32
0124:  DATA 72,10
0125:  DATA 3A,10
0126:  DATA 30,3C
0127:  DATA 25,18
0128:  DATA 38,26
0129:  DATA D8,06
012A:  DATA 0A,00
012B:  DATA 89,26
012C:  DATA C9,29
012D:  DATA 46,10
012E:  DATA D0,24
012F:  DATA 43,26
0130:  DATA CF,23
0131:  DATA 20,26
0132:  DATA EF,37
0133:  DATA 70,10
0134:  DATA C3,37
0135:  DATA 75,37
0136:  DATA F4,32
0137:  DATA 72,10
0138:  DATA 20,10
0139:  DATA 20,10
013A:  DATA 3A,10
013B:  DATA 30,3C
013C:  DATA 25,18
013D:  DATA 32,2C
013E:  DATA 0D,05
013F:  DATA 00,01
0140:  DATA 89,26
0141:  DATA C9,29
0142:  DATA 46,10
0143:  DATA D0,24
0144:  DATA 43,26
0145:  DATA CF,23
0146:  DATA A0,2B
0147:  DATA F2,34
0148:  DATA F4,32
0149:  DATA A0,21
014A:  DATA EF,3A
014B:  DATA 6E,3A
014C:  DATA 65,39
014D:  DATA 20,10
014E:  DATA 20,10
014F:  DATA 3A,10
0150:  DATA 30,3C
0151:  DATA 25,18
0152:  DATA 32,2C
0153:  DATA 0D,05
0154:  DATA 00,01
0155:  DATA 89,26
0156:  DATA C9,29
0157:  DATA 46,10
0158:  DATA CD,22
0159:  DATA C1,29
015A:  DATA 20,10
015B:  DATA A0,2A
015C:  DATA F3,32
015D:  DATA A0,21
015E:  DATA EF,3A
015F:  DATA 6E,3A
0160:  DATA 65,39
0161:  DATA 20,10
0162:  DATA 20,10
0163:  DATA 20,10
0164:  DATA 3A,10
0165:  DATA 30,3C
0166:  DATA 25,18
0167:  DATA 38,26
0168:  DATA D8,06
0169:  DATA 0A,00
016A:  DATA 89,26
016B:  DATA C9,29
016C:  DATA 46,10
016D:  DATA CD,22
016E:  DATA C1,29
016F:  DATA 20,10
0170:  DATA A0,2A
0171:  DATA EE,31
0172:  DATA 6F,38
0173:  DATA F9,32
0174:  DATA 64,10
0175:  DATA C3,37
0176:  DATA 75,37
0177:  DATA F4,32
0178:  DATA 72,10
0179:  DATA 3A,10
017A:  DATA 30,3C
017B:  DATA 25,18
017C:  DATA 38,26
017D:  DATA D8,06
017E:  DATA 0A,00
017F:  DATA 89,26
0180:  DATA C9,29
0181:  DATA 46,10
0182:  DATA CD,22
0183:  DATA C1,29
0184:  DATA 20,10
0185:  DATA 20,26
0186:  DATA EF,37
0187:  DATA 70,10
0188:  DATA C3,37
0189:  DATA 75,37
018A:  DATA F4,32
018B:  DATA 72,10
018C:  DATA 20,10
018D:  DATA 20,10
018E:  DATA 3A,10
018F:  DATA 30,3C
0190:  DATA 25,18
0191:  DATA 32,2C
0192:  DATA 0D,05
0193:  DATA 00,01
0194:  DATA 89,21
0195:  DATA EF,36
0196:  DATA 70,36
0197:  DATA 65,3A
0198:  DATA E5,06
0199:  DATA 0A,00
019A:  DATA CD,34
019B:  DATA F3,39
019C:  DATA E9,37
019D:  DATA 6E,10
019E:  DATA 46,36
019F:  DATA E1,39
01A0:  DATA 68,10
01A1:  DATA E9,39
01A2:  DATA 20,37
01A3:  DATA 6F,3A
01A4:  DATA A0,31
01A5:  DATA 6F,37
01A6:  DATA EE,32
01A7:  DATA 63,3A
01A8:  DATA 65,32
01A9:  DATA 0D,05
01AA:  DATA 00,00
01AB:  DATA 5B,28
01AC:  DATA C9,21
01AD:  DATA CC,27
01AE:  DATA C7,2E
01AF:  DATA 20,1D
01B0:  DATA 20,00
01B1:  DATA CD,34
01B2:  DATA F3,39
01B3:  DATA E9,37
01B4:  DATA 6E,10
01B5:  DATA 46,36
01B6:  DATA E1,39
01B7:  DATA 68,10
01B8:  DATA E9,39
01B9:  DATA 20,37
01BA:  DATA 6F,3A
01BB:  DATA A0,31
01BC:  DATA 6F,37
01BD:  DATA EE,32
01BE:  DATA 63,3A
01BF:  DATA 65,32
01C0:  DATA 0D,05
01C1:  DATA 00,00
01C2:  DATA 0D,05
01C3:  DATA 53,3A
01C4:  DATA 61,39
01C5:  DATA 74,10
01C6:  DATA ED,30
01C7:  DATA EB,32
01C8:  DATA 5F,39
01C9:  DATA E5,31
01CA:  DATA E5,34
01CB:  DATA F6,32
01CC:  DATA DF,31
01CD:  DATA EF,36
01CE:  DATA ED,30
01CF:  DATA 6E,32
01D0:  DATA 0D,05
01D1:  DATA 00,01
01D2:  DATA 89,2D
01D3:  DATA C2,27
01D4:  DATA D3,29
01D5:  DATA 5D,10
01D6:  DATA 3E,1F
01D7:  DATA 3E,10
01D8:  DATA 00,01
01D9:  DATA 45,37
01DA:  DATA 64,10
01DB:  DATA ED,30
01DC:  DATA EB,32
01DD:  DATA 5F,39
01DE:  DATA E5,31
01DF:  DATA 69,3B
01E0:  DATA E5,2F
01E1:  DATA E3,37
01E2:  DATA ED,36
01E3:  DATA 61,37
01E4:  DATA E4,06
01E5:  DATA 8A,06
01E6:  DATA 0A,00
01E7:  DATA F3,34
01E8:  DATA 67,37
01E9:  DATA 61,36
01EA:  DATA A0,32
01EB:  DATA 6E,32
01EC:  DATA A0,3B
01ED:  DATA 69,3A
01EE:  DATA 68,10
01EF:  DATA 53,23
01F0:  DATA C4,06
01F1:  DATA 0A,00
01F2:  DATA E4,37
01F3:  DATA EE,13
01F4:  DATA 74,10
01F5:  DATA E6,34
01F6:  DATA 6E,32
01F7:  DATA A0,29
01F8:  DATA 46,22
01F9:  DATA 0D,05
01FA:  DATA 00,00
01FB:  DATA 89,16
01FC:  DATA 3E,10
01FD:  DATA 49,37
01FE:  DATA F6,30
01FF:  DATA EC,34
0200:  DATA 64,10
0201:  DATA 46,39
0202:  DATA E1,36
0203:  DATA 65,10
0204:  DATA 49,22
0205:  DATA 20,39
0206:  DATA E5,31
0207:  DATA E5,34
0208:  DATA F6,32
0209:  DATA 64,1D
020A:  DATA A0,12
020B:  DATA D8,06
020C:  DATA 0A,00
020D:  DATA 89,16
020E:  DATA 3E,10
020F:  DATA 43,29
0210:  DATA 43,10
0211:  DATA 65,39
0212:  DATA F2,37
0213:  DATA F2,10
0214:  DATA 0D,05
0215:  DATA 00,01
0216:  DATA 89,04
0217:  DATA 2D,1F
0218:  DATA 20,39
0219:  DATA E5,31
021A:  DATA E5,34
021B:  DATA F6,32
021C:  DATA 64,10
021D:  DATA 43,29
021E:  DATA 43,1D
021F:  DATA A0,12
0220:  DATA D8,06
0221:  DATA 0A,00
0222:  DATA 89,04
0223:  DATA 20,10
0224:  DATA A0,31
0225:  DATA 6F,36
0226:  DATA EC,32
0227:  DATA 63,3A
0228:  DATA A0,21
0229:  DATA D2,21
022A:  DATA 20,1D
022B:  DATA A0,12
022C:  DATA D8,06
022D:  DATA 0A,00
022E:  DATA 89,16
022F:  DATA 3E,10
0230:  DATA 49,37
0231:  DATA F6,30
0232:  DATA EC,34
0233:  DATA 64,10
0234:  DATA E4,32
0235:  DATA F6,34
0236:  DATA E3,32
0237:  DATA A0,24
0238:  DATA 44,10
0239:  DATA F2,32
023A:  DATA E3,32
023B:  DATA 69,3B
023C:  DATA 65,32
023D:  DATA 0D,05
023E:  DATA 00,01
023F:  DATA 89,04
0240:  DATA 2D,1F
0241:  DATA 20,39
0242:  DATA E5,31
0243:  DATA E5,34
0244:  DATA F6,32
0245:  DATA 64,1D
0246:  DATA 20,10
0247:  DATA 20,10
0248:  DATA A0,12
0249:  DATA D8,06
024A:  DATA 0A,00
024B:  DATA 89,04
024C:  DATA 20,10
024D:  DATA A0,26
024E:  DATA 79,10
024F:  DATA E4,32
0250:  DATA F6,34
0251:  DATA E3,32
0252:  DATA A0,24
0253:  DATA 44,1D
0254:  DATA A0,12
0255:  DATA D8,06
0256:  DATA 0A,00
0257:  DATA 89,2D
0258:  DATA C2,27
0259:  DATA D3,29
025A:  DATA 5D,10
025B:  DATA 3C,1E
025C:  DATA 3C,10
025D:  DATA 00,01
025E:  DATA 89,16
025F:  DATA 3E,10
0260:  DATA 46,39
0261:  DATA E1,36
0262:  DATA 65,10
0263:  DATA 49,22
0264:  DATA 3A,10
0265:  DATA 25,2C
0266:  DATA 0D,05
0267:  DATA 00,01
0268:  DATA 89,16
0269:  DATA 3E,10
026A:  DATA C3,37
026B:  DATA 6E,3A
026C:  DATA 65,37
026D:  DATA 74,10
026E:  DATA F3,34
026F:  DATA FA,32
0270:  DATA 3A,10
0271:  DATA 25,32
0272:  DATA 0D,05
0273:  DATA 00,01
0274:  DATA 53,3A
0275:  DATA 61,39
0276:  DATA 74,10
0277:  DATA D3,26
0278:  DATA 46,10
0279:  DATA F5,39
027A:  DATA 69,37
027B:  DATA 67,10
027C:  DATA F2,32
027D:  DATA F1,32
027E:  DATA 73,3A
027F:  DATA A0,39
0280:  DATA E5,30
0281:  DATA F1,3A
0282:  DATA 65,37
0283:  DATA E3,32
0284:  DATA 0D,05
0285:  DATA 00,01
0286:  DATA 45,39
0287:  DATA F2,37
0288:  DATA F2,10
0289:  DATA 20,29
028A:  DATA E5,31
028B:  DATA E5,34
028C:  DATA F6,34
028D:  DATA EE,33
028E:  DATA A0,31
028F:  DATA EF,36
0290:  DATA ED,30
0291:  DATA 6E,32
0292:  DATA A0,34
0293:  DATA EE,31
0294:  DATA 6F,37
0295:  DATA F3,34
0296:  DATA 73,3A
0297:  DATA 65,37
0298:  DATA 74,10
0299:  DATA F7,34
029A:  DATA 74,34
029B:  DATA 20,3A
029C:  DATA E8,32
029D:  DATA 20,32
029E:  DATA E5,39
029F:  DATA E9,33
02A0:  DATA EE,06
02A1:  DATA 0A,00
02A2:  DATA D3,26
02A3:  DATA 46,10
02A4:  DATA F5,39
02A5:  DATA 65,10
02A6:  DATA F2,32
02A7:  DATA F1,3A
02A8:  DATA E5,39
02A9:  DATA 74,10
02AA:  DATA 61,36
02AB:  DATA EC,37
02AC:  DATA F7,32
02AD:  DATA E4,06
02AE:  DATA 0A,00
02AF:  DATA D3,26
02B0:  DATA 46,10
02B1:  DATA F5,39
02B2:  DATA 65,10
02B3:  DATA F2,32
02B4:  DATA F1,3A
02B5:  DATA E5,39
02B6:  DATA 74,10
02B7:  DATA E4,32
02B8:  DATA EE,3C
02B9:  DATA 65,32
02BA:  DATA 0D,05
02BB:  DATA 00,01
02BC:  DATA D2,32
02BD:  DATA 74,39
02BE:  DATA 79,10
02BF:  DATA F2,32
02C0:  DATA F1,3A
02C1:  DATA E5,39
02C2:  DATA 74,10
02C3:  DATA F4,37
02C4:  DATA 20,21
02C5:  DATA CF,29
02C6:  DATA 53,10
02C7:  DATA D0,24
02C8:  DATA C3,06
02C9:  DATA 0A,00
02CA:  DATA 45,39
02CB:  DATA F2,37
02CC:  DATA F2,10
02CD:  DATA 20,29
02CE:  DATA E5,31
02CF:  DATA E5,34
02D0:  DATA F6,34
02D1:  DATA EE,33
02D2:  DATA A0,31
02D3:  DATA EF,36
02D4:  DATA ED,30
02D5:  DATA 6E,32
02D6:  DATA A0,34
02D7:  DATA EE,31
02D8:  DATA 6F,37
02D9:  DATA F3,34
02DA:  DATA 73,3A
02DB:  DATA 65,37
02DC:  DATA 74,10
02DD:  DATA F7,34
02DE:  DATA 74,34
02DF:  DATA 20,3A
02E0:  DATA E8,32
02E1:  DATA 20,32
02E2:  DATA E5,39
02E3:  DATA E9,33
02E4:  DATA EE,06
02E5:  DATA 0A,00
02E6:  DATA 45,37
02E7:  DATA 64,10
02E8:  DATA D3,26
02E9:  DATA 46,10
02EA:  DATA F5,39
02EB:  DATA 69,37
02EC:  DATA 67,10
02ED:  DATA F2,32
02EE:  DATA F1,32
02EF:  DATA 73,3A
02F0:  DATA A0,39
02F1:  DATA E5,30
02F2:  DATA F1,3A
02F3:  DATA 65,37
02F4:  DATA E3,32
02F5:  DATA 0D,05
02F6:  DATA 00,00
02F7:  DATA C9,27
02F8:  DATA A0,24
02F9:  DATA EE,34
02FA:  DATA F4,34
02FB:  DATA 61,36
02FC:  DATA 69,3D
02FD:  DATA E5,06
02FE:  DATA 0A,00
02FF:  DATA 89,21
0300:  DATA EF,36
0301:  DATA 70,36
0302:  DATA 65,3A
0303:  DATA E5,06
0304:  DATA 0A,00
0305:  DATA 41,22
0306:  DATA 43,10
0307:  DATA 49,37
0308:  DATA 69,3A
0309:  DATA E9,30
030A:  DATA EC,34
030B:  DATA FA,32
030C:  DATA 0D,05
030D:  DATA 00,01
030E:  DATA 89,21
030F:  DATA EF,36
0310:  DATA 70,36
0311:  DATA 65,3A
0312:  DATA E5,06
0313:  DATA 0A,00
0314:  DATA 53,3A
0315:  DATA 61,39
0316:  DATA 74,10
0317:  DATA D3,2B
0318:  DATA C5,22
0319:  DATA D0,06
031A:  DATA 0A,00
031B:  DATA 89,29
031C:  DATA F7,32
031D:  DATA 65,38
031E:  DATA A0,39
031F:  DATA F4,32
0320:  DATA 70,10
0321:  DATA 3A,10
0322:  DATA A5,3A
0323:  DATA 0D,05
0324:  DATA 00,01
0325:  DATA 45,27
0326:  DATA 44,10
0327:  DATA D3,2B
0328:  DATA C5,22
0329:  DATA D0,06
032A:  DATA 0A,00
032B:  DATA 53,3A
032C:  DATA 61,39
032D:  DATA 74,10
032E:  DATA C3,24
032F:  DATA C7,29
0330:  DATA 20,32
0331:  DATA 61,3A
0332:  DATA 61,10
0333:  DATA E3,37
0334:  DATA 6E,3B
0335:  DATA 65,39
0336:  DATA F3,34
0337:  DATA 6F,37
0338:  DATA 0D,05
0339:  DATA 80,00
033A:  DATA D3,26
033B:  DATA 46,10
033C:  DATA E4,30
033D:  DATA F4,30
033E:  DATA 20,36
033F:  DATA E9,39
0340:  DATA 74,10
0341:  DATA E9,39
0342:  DATA 20,33
0343:  DATA 75,36
0344:  DATA EC,10
0345:  DATA A1,10
0346:  DATA 0D,05
0347:  DATA 00,00
0348:  DATA D3,26
0349:  DATA 46,10
034A:  DATA E4,30
034B:  DATA F4,30
034C:  DATA 20,36
034D:  DATA E9,39
034E:  DATA 74,10
034F:  DATA E9,39
0350:  DATA A0,32
0351:  DATA 6D,38
0352:  DATA F4,3C
0353:  DATA 0D,05
0354:  DATA 00,00
0355:  DATA 53,3A
0356:  DATA 61,39
0357:  DATA 74,10
0358:  DATA CD,27
0359:  DATA C4,22
035A:  DATA 20,22
035B:  DATA D5,26
035C:  DATA CD,2C
035D:  DATA 0D,05
035E:  DATA 00,01
035F:  DATA 89,26
0360:  DATA 4F,22
0361:  DATA 45,10
0362:  DATA 20,10
0363:  DATA 20,10
0364:  DATA 3A,10
0365:  DATA 25,18
0366:  DATA 32,2C
0367:  DATA 0D,05
0368:  DATA 00,01
0369:  DATA 09,28
036A:  DATA 61,39
036B:  DATA E1,36
036C:  DATA 31,10
036D:  DATA 20,10
036E:  DATA 3A,10
036F:  DATA 30,3C
0370:  DATA 25,18
0371:  DATA 38,26
0372:  DATA D8,06
0373:  DATA 0A,00
0374:  DATA 09,28
0375:  DATA 61,39
0376:  DATA E1,36
0377:  DATA 32,10
0378:  DATA 20,10
0379:  DATA 3A,10
037A:  DATA 30,3C
037B:  DATA 25,18
037C:  DATA 34,26
037D:  DATA D8,06
037E:  DATA 0A,00
037F:  DATA 45,37
0380:  DATA 64,10
0381:  DATA CD,27
0382:  DATA C4,22
0383:  DATA 20,22
0384:  DATA D5,26
0385:  DATA CD,2C
0386:  DATA 0D,05
0387:  DATA 00,00
0388:  DATA 53,3A
0389:  DATA 61,39
038A:  DATA 74,10
038B:  DATA CD,27
038C:  DATA C4,22
038D:  DATA A0,26
038E:  DATA C5,20
038F:  DATA D3,2A
0390:  DATA D2,22
0391:  DATA 0D,05
0392:  DATA 00,00
0393:  DATA 53,3A
0394:  DATA 61,39
0395:  DATA 74,10
0396:  DATA CD,27
0397:  DATA C4,22
0398:  DATA A0,26
0399:  DATA C5,20
039A:  DATA D3,2A
039B:  DATA D2,22
039C:  DATA 20,2B
039D:  DATA 6F,36
039E:  DATA F4,30
039F:  DATA E7,32
03A0:  DATA 0D,05
03A1:  DATA 00,00
03A2:  DATA 53,3A
03A3:  DATA 61,39
03A4:  DATA 74,10
03A5:  DATA D3,2B
03A6:  DATA C5,22
03A7:  DATA D0,06
03A8:  DATA 0A,00
03A9:  DATA 89,29
03AA:  DATA F7,32
03AB:  DATA 65,38
03AC:  DATA A0,39
03AD:  DATA F4,32
03AE:  DATA 70,10
03AF:  DATA 3A,10
03B0:  DATA A5,3A
03B1:  DATA 0D,05
03B2:  DATA 80,01
03B3:  DATA 45,27
03B4:  DATA 44,10
03B5:  DATA D3,2B
03B6:  DATA C5,22
03B7:  DATA D0,06
03B8:  DATA 0A,00
03B9:  DATA F4,32
03BA:  DATA 6D,38
03BB:  DATA 5F,3A
03BC:  DATA 6F,38
03BD:  DATA 3A,10
03BE:  DATA 25,2C
03BF:  DATA 0D,05
03C0:  DATA 00,01
03C1:  DATA F4,32
03C2:  DATA 6D,38
03C3:  DATA 5F,31
03C4:  DATA 6F,3A
03C5:  DATA 3A,10
03C6:  DATA 25,2C
03C7:  DATA 0D,05
03C8:  DATA 00,00
03C9:  DATA 70,32
03CA:  DATA 5F,3B
03CB:  DATA 61,36
03CC:  DATA F5,32
03CD:  DATA 3A,10
03CE:  DATA 25,2C
03CF:  DATA 0D,05
03D0:  DATA 00,00
03D1:  DATA E3,34
03D2:  DATA E7,39
03D3:  DATA 5F,3B
03D4:  DATA 61,36
03D5:  DATA F5,32
03D6:  DATA 3A,10
03D7:  DATA 25,2C
03D8:  DATA 0D,05
03D9:  DATA 00,00
03DA:  DATA E3,3A
03DB:  DATA 72,39
03DC:  DATA 65,37
03DD:  DATA F4,2F
03DE:  DATA F6,30
03DF:  DATA EC,3A
03E0:  DATA 65,1D
03E1:  DATA A0,12
03E2:  DATA D8,06
03E3:  DATA 0A,00
03E4:  DATA F6,37
03E5:  DATA 6C,3A
03E6:  DATA E1,33
03E7:  DATA E5,2F
03E8:  DATA F6,30
03E9:  DATA EC,3A
03EA:  DATA 65,1D
03EB:  DATA A0,12
03EC:  DATA D8,06
03ED:  DATA 0A,00
03EE:  DATA 53,3A
03EF:  DATA 61,39
03F0:  DATA 74,10
03F1:  DATA 46,36
03F2:  DATA E1,39
03F3:  DATA 68,10
03F4:  DATA 45,39
03F5:  DATA E1,39
03F6:  DATA 65,10
03F7:  DATA 41,36
03F8:  DATA EC,06
03F9:  DATA 0A,00
03FA:  DATA 45,37
03FB:  DATA 64,10
03FC:  DATA 46,36
03FD:  DATA E1,39
03FE:  DATA 68,10
03FF:  DATA 45,39
0400:  DATA E1,39
0401:  DATA 65,10
0402:  DATA 41,36
0403:  DATA EC,06
0404:  DATA 0A,00
0405:  DATA 53,3A
0406:  DATA 61,39
0407:  DATA 74,10
0408:  DATA 46,36
0409:  DATA E1,39
040A:  DATA 68,10
040B:  DATA 45,39
040C:  DATA E1,39
040D:  DATA 65,10
040E:  DATA 31,10
040F:  DATA D3,32
0410:  DATA 63,3A
0411:  DATA 6F,39
0412:  DATA 0D,05
0413:  DATA 00,01
0414:  DATA 89,29
0415:  DATA E5,31
0416:  DATA F4,37
0417:  DATA 72,10
0418:  DATA 41,32
0419:  DATA 64,39
041A:  DATA E5,39
041B:  DATA 73,1D
041C:  DATA 20,18
041D:  DATA F8,12
041E:  DATA 30,1C
041F:  DATA 4C,2C
0420:  DATA 0D,05
0421:  DATA 00,01
0422:  DATA 45,37
0423:  DATA 64,10
0424:  DATA 46,36
0425:  DATA E1,39
0426:  DATA 68,10
0427:  DATA 45,39
0428:  DATA E1,39
0429:  DATA 65,10
042A:  DATA 31,10
042B:  DATA D3,32
042C:  DATA 63,3A
042D:  DATA 6F,39
042E:  DATA 0D,05
042F:  DATA 00,00
0430:  DATA 53,3A
0431:  DATA 61,39
0432:  DATA 74,10
0433:  DATA 46,36
0434:  DATA E1,39
0435:  DATA 68,10
0436:  DATA C3,37
0437:  DATA F0,3C
0438:  DATA A0,18
0439:  DATA A0,29
043A:  DATA E5,31
043B:  DATA F4,37
043C:  DATA F2,06
043D:  DATA 0A,00
043E:  DATA 89,29
043F:  DATA 75,31
0440:  DATA F3,32
0441:  DATA 63,3A
0442:  DATA 6F,39
0443:  DATA A0,20
0444:  DATA 64,32
0445:  DATA F2,32
0446:  DATA F3,39
0447:  DATA 3A,10
0448:  DATA 30,3C
0449:  DATA 25,18
044A:  DATA 38,26
044B:  DATA D8,06
044C:  DATA 0A,00
044D:  DATA 45,37
044E:  DATA 64,10
044F:  DATA 46,36
0450:  DATA E1,39
0451:  DATA 68,10
0452:  DATA C3,37
0453:  DATA F0,3C
0454:  DATA A0,18
0455:  DATA A0,29
0456:  DATA E5,31
0457:  DATA F4,37
0458:  DATA F2,06
0459:  DATA 0A,00
045A:  DATA 53,3A
045B:  DATA 61,39
045C:  DATA 74,10
045D:  DATA 46,36
045E:  DATA E1,39
045F:  DATA 68,10
0460:  DATA 57,39
0461:  DATA 69,3A
0462:  DATA 65,10
0463:  DATA C4,32
0464:  DATA ED,37
0465:  DATA 0D,05
0466:  DATA 00,01
0467:  DATA 89,26
0468:  DATA 4F,22
0469:  DATA 45,10
046A:  DATA 20,10
046B:  DATA 20,10
046C:  DATA 3A,10
046D:  DATA 25,18
046E:  DATA 32,2C
046F:  DATA 0D,05
0470:  DATA 00,01
0471:  DATA 89,20
0472:  DATA 64,32
0473:  DATA F2,32
0474:  DATA F3,39
0475:  DATA 20,10
0476:  DATA 3A,10
0477:  DATA 30,3C
0478:  DATA 25,18
0479:  DATA 38,26
047A:  DATA D8,06
047B:  DATA 0A,00
047C:  DATA 09,28
047D:  DATA E1,31
047E:  DATA EB,32
047F:  DATA 74,27
0480:  DATA F5,36
0481:  DATA 3A,10
0482:  DATA 30,3C
0483:  DATA 25,18
0484:  DATA 34,26
0485:  DATA D8,06
0486:  DATA 0A,00
0487:  DATA 57,39
0488:  DATA 69,3A
0489:  DATA 65,10
048A:  DATA C4,30
048B:  DATA F4,30
048C:  DATA 0D,05
048D:  DATA 00,01
048E:  DATA 45,37
048F:  DATA 64,10
0490:  DATA 46,36
0491:  DATA E1,39
0492:  DATA 68,10
0493:  DATA 57,39
0494:  DATA 69,3A
0495:  DATA 65,10
0496:  DATA C4,32
0497:  DATA ED,37
0498:  DATA 0D,05
0499:  DATA 00,00
049A:  DATA 53,3A
049B:  DATA 61,39
049C:  DATA 74,10
049D:  DATA 46,36
049E:  DATA E1,39
049F:  DATA 68,10
04A0:  DATA 57,39
04A1:  DATA 69,3A
04A2:  DATA 65,10
04A3:  DATA B4,35
04A4:  DATA C2,3C
04A5:  DATA F4,32
04A6:  DATA A0,29
04A7:  DATA 75,31
04A8:  DATA F3,32
04A9:  DATA 63,3A
04AA:  DATA 6F,39
04AB:  DATA 0D,05
04AC:  DATA 00,01
04AD:  DATA 45,37
04AE:  DATA 64,10
04AF:  DATA 46,36
04B0:  DATA E1,39
04B1:  DATA 68,10
04B2:  DATA 57,39
04B3:  DATA 69,3A
04B4:  DATA 65,10
04B5:  DATA B4,35
04B6:  DATA C2,3C
04B7:  DATA F4,32
04B8:  DATA A0,29
04B9:  DATA 75,31
04BA:  DATA F3,32
04BB:  DATA 63,3A
04BC:  DATA 6F,39
04BD:  DATA 0D,05
04BE:  DATA 00,00
04BF:  DATA 53,3A
04C0:  DATA 61,39
04C1:  DATA 74,10
04C2:  DATA 46,36
04C3:  DATA E1,39
04C4:  DATA 68,10
04C5:  DATA D2,32
04C6:  DATA 61,32
04C7:  DATA 0D,05
04C8:  DATA 00,01
04C9:  DATA 89,26
04CA:  DATA 4F,22
04CB:  DATA 45,10
04CC:  DATA 20,10
04CD:  DATA 20,10
04CE:  DATA 3A,10
04CF:  DATA 25,18
04D0:  DATA 32,2C
04D1:  DATA 0D,05
04D2:  DATA 00,01
04D3:  DATA 89,20
04D4:  DATA 64,32
04D5:  DATA F2,32
04D6:  DATA F3,39
04D7:  DATA 20,10
04D8:  DATA 3A,10
04D9:  DATA 30,3C
04DA:  DATA 25,18
04DB:  DATA 38,26
04DC:  DATA D8,06
04DD:  DATA 0A,00
04DE:  DATA 09,28
04DF:  DATA E1,31
04E0:  DATA EB,32
04E1:  DATA 74,27
04E2:  DATA F5,36
04E3:  DATA 3A,10
04E4:  DATA 30,3C
04E5:  DATA 25,18
04E6:  DATA 34,26
04E7:  DATA D8,06
04E8:  DATA 0A,00
04E9:  DATA D2,22
04EA:  DATA 41,22
04EB:  DATA 20,22
04EC:  DATA 41,2A
04ED:  DATA C1,06
04EE:  DATA 0A,00
04EF:  DATA CD,34
04F0:  DATA F3,39
04F1:  DATA E9,37
04F2:  DATA 6E,10
04F3:  DATA 46,36
04F4:  DATA E1,39
04F5:  DATA 68,10
04F6:  DATA E9,39
04F7:  DATA 20,37
04F8:  DATA 6F,3A
04F9:  DATA A0,31
04FA:  DATA 6F,37
04FB:  DATA EE,32
04FC:  DATA 63,3A
04FD:  DATA 65,32
04FE:  DATA 0D,05
04FF:  DATA 00,01
0500:  DATA 45,37
0501:  DATA 64,10
0502:  DATA 46,36
0503:  DATA E1,39
0504:  DATA 68,10
0505:  DATA D2,32
0506:  DATA 61,32
0507:  DATA 0D,05
0508:  DATA 00,00
0509:  DATA 53,3A
050A:  DATA 61,39
050B:  DATA 74,10
050C:  DATA 46,36
050D:  DATA E1,39
050E:  DATA 68,10
050F:  DATA D2,32
0510:  DATA 61,32
0511:  DATA A0,20
0512:  DATA 64,32
0513:  DATA F2,32
0514:  DATA F3,39
0515:  DATA 0D,05
0516:  DATA 00,01
0517:  DATA D2,32
0518:  DATA 61,32
0519:  DATA 20,22
051A:  DATA 61,3A
051B:  DATA 61,1D
051C:  DATA A0,12
051D:  DATA 30,19
051E:  DATA 58,10
051F:  DATA 25,18
0520:  DATA 32,2C
0521:  DATA A0,12
0522:  DATA 30,19
0523:  DATA 58,10
0524:  DATA 25,18
0525:  DATA 32,2C
0526:  DATA 0D,05
0527:  DATA 00,01
0528:  DATA 45,37
0529:  DATA 64,10
052A:  DATA 46,36
052B:  DATA E1,39
052C:  DATA 68,10
052D:  DATA D2,32
052E:  DATA 61,32
052F:  DATA A0,20
0530:  DATA 64,32
0531:  DATA F2,32
0532:  DATA F3,39
0533:  DATA 0D,05
0534:  DATA 00,00
0535:  DATA 53,3A
0536:  DATA 61,39
0537:  DATA 74,10
0538:  DATA 46,36
0539:  DATA E1,39
053A:  DATA 68,10
053B:  DATA D3,26
053C:  DATA 46,10
053D:  DATA C3,37
053E:  DATA F0,3C
053F:  DATA 0D,05
0540:  DATA 00,01
0541:  DATA 45,37
0542:  DATA 64,10
0543:  DATA 46,36
0544:  DATA E1,39
0545:  DATA 68,10
0546:  DATA D3,26
0547:  DATA 46,10
0548:  DATA C3,37
0549:  DATA F0,3C
054A:  DATA 0D,05
054B:  DATA 00,00
054C:  DATA 53,3A
054D:  DATA 61,39
054E:  DATA 74,10
054F:  DATA 46,36
0550:  DATA E1,39
0551:  DATA 68,10
0552:  DATA D3,26
0553:  DATA 46,10
0554:  DATA D2,32
0555:  DATA 61,32
0556:  DATA 0D,05
0557:  DATA 00,01
0558:  DATA D2,32
0559:  DATA 61,32
055A:  DATA 20,22
055B:  DATA 61,3A
055C:  DATA 61,1D
055D:  DATA 20,00
055E:  DATA 0D,05
055F:  DATA 45,37
0560:  DATA 64,10
0561:  DATA 46,36
0562:  DATA E1,39
0563:  DATA 68,10
0564:  DATA D3,26
0565:  DATA 46,10
0566:  DATA D2,32
0567:  DATA 61,32
0568:  DATA 0D,05
0569:  DATA 00,00
056A:  DATA 53,3A
056B:  DATA 61,39
056C:  DATA 74,10
056D:  DATA 46,36
056E:  DATA E1,39
056F:  DATA 68,10
0570:  DATA D3,26
0571:  DATA 46,10
0572:  DATA 57,39
0573:  DATA 69,3A
0574:  DATA E5,06
0575:  DATA 0A,00
0576:  DATA 45,37
0577:  DATA 64,10
0578:  DATA 46,36
0579:  DATA E1,39
057A:  DATA 68,10
057B:  DATA D3,26
057C:  DATA 46,10
057D:  DATA 57,39
057E:  DATA 69,3A
057F:  DATA E5,06
0580:  DATA 0A,00
0581:  DATA 53,3A
0582:  DATA 61,39
0583:  DATA 74,10
0584:  DATA 46,36
0585:  DATA E1,39
0586:  DATA 68,10
0587:  DATA 41,32
0588:  DATA 64,39
0589:  DATA E5,39
058A:  DATA 73,10
058B:  DATA D2,32
058C:  DATA F3,32
058D:  DATA F4,06
058E:  DATA 0A,00
058F:  DATA 45,37
0590:  DATA 64,10
0591:  DATA 46,36
0592:  DATA E1,39
0593:  DATA 68,10
0594:  DATA 41,32
0595:  DATA 64,39
0596:  DATA E5,39
0597:  DATA 73,10
0598:  DATA D2,32
0599:  DATA F3,32
059A:  DATA F4,06
059B:  DATA 0A,00
059C:  DATA 0D,05
059D:  DATA DF,2F
059E:  DATA DF,2F
059F:  DATA DF,2F
05A0:  DATA DF,2F
05A1:  DATA DF,2F
05A2:  DATA DF,2F
05A3:  DATA DF,2F
05A4:  DATA DF,2F
05A5:  DATA DF,2F
05A6:  DATA DF,2F
05A7:  DATA 0D,05
05A8:  DATA 00,01
05A9:  DATA DF,2F
05AA:  DATA DF,29
05AB:  DATA F4,30
05AC:  DATA 72,3A
05AD:  DATA A0,31
05AE:  DATA 6F,38
05AF:  DATA F9,2F
05B0:  DATA E4,30
05B1:  DATA F4,30
05B2:  DATA DF,2F
05B3:  DATA 0D,05
05B4:  DATA 00,01
05B5:  DATA 53,3A
05B6:  DATA 61,39
05B7:  DATA 74,10
05B8:  DATA DB,12
05B9:  DATA 64,10
05BA:  DATA 74,34
05BB:  DATA 5D,10
05BC:  DATA E4,30
05BD:  DATA F4,30
05BE:  DATA A0,31
05BF:  DATA 6F,38
05C0:  DATA F9,06
05C1:  DATA 8A,06
05C2:  DATA 0A,00
05C3:  DATA 0D,05
05C4:  DATA DF,2F
05C5:  DATA DF,22
05C6:  DATA 6E,32
05C7:  DATA A0,31
05C8:  DATA 6F,38
05C9:  DATA F9,2F
05CA:  DATA E4,30
05CB:  DATA F4,30
05CC:  DATA DF,2F
05CD:  DATA DF,2F
05CE:  DATA 0D,05
05CF:  DATA 00,01
05D0:  DATA DF,2F
05D1:  DATA DF,2F
05D2:  DATA DF,2F
05D3:  DATA DF,2F
05D4:  DATA DF,2F
05D5:  DATA DF,2F
05D6:  DATA DF,2F
05D7:  DATA DF,2F
05D8:  DATA DF,2F
05D9:  DATA DF,2F
05DA:  DATA 0D,05
05DB:  DATA 0D,05
05DC:  DATA 00,00
05DD:  DATA 49,37
05DE:  DATA A0,39
05DF:  DATA 6D,33
05E0:  DATA A0,36
05E1:  DATA E9,39
05E2:  DATA F3,34
05E3:  DATA 6F,37
05E4:  DATA 20,32
05E5:  DATA 61,3A
05E6:  DATA 61,10
05E7:  DATA 73,3A
05E8:  DATA 61,39
05E9:  DATA 74,10
05EA:  DATA 20,10
05EB:  DATA 61,32
05EC:  DATA 64,39
05ED:  DATA E5,39
05EE:  DATA 73,1D
05EF:  DATA A0,12
05F0:  DATA 4C,2C
05F1:  DATA 0D,05
05F2:  DATA 00,01
05F3:  DATA 49,37
05F4:  DATA A0,39
05F5:  DATA 6D,33
05F6:  DATA A0,36
05F7:  DATA E9,39
05F8:  DATA F3,34
05F9:  DATA 6F,37
05FA:  DATA 20,32
05FB:  DATA 61,3A
05FC:  DATA 61,10
05FD:  DATA 65,37
05FE:  DATA 64,10
05FF:  DATA 20,10
0600:  DATA 20,10
0601:  DATA 61,32
0602:  DATA 64,39
0603:  DATA E5,39
0604:  DATA 73,1D
0605:  DATA A0,12
0606:  DATA 4C,2C
0607:  DATA 0D,05
0608:  DATA 00,01
0609:  DATA 49,37
060A:  DATA A0,26
060B:  DATA C9,29
060C:  DATA 20,23
060D:  DATA 4D,10
060E:  DATA 57,39
060F:  DATA 69,3A
0610:  DATA 65,10
0611:  DATA F3,37
0612:  DATA 75,39
0613:  DATA E3,32
0614:  DATA 20,32
0615:  DATA 61,3A
0616:  DATA 61,10
0617:  DATA 61,32
0618:  DATA 64,39
0619:  DATA E5,39
061A:  DATA 73,1D
061B:  DATA A0,12
061C:  DATA 4C,2C
061D:  DATA 0D,05
061E:  DATA 00,01
061F:  DATA 49,37
0620:  DATA A0,26
0621:  DATA C9,29
0622:  DATA 20,23
0623:  DATA 4D,10
0624:  DATA 57,39
0625:  DATA 69,3A
0626:  DATA 65,10
0627:  DATA E4,30
0628:  DATA F4,30
0629:  DATA A0,39
062A:  DATA 69,3D
062B:  DATA 65,10
062C:  DATA 20,10
062D:  DATA 20,10
062E:  DATA 20,10
062F:  DATA 20,10
0630:  DATA 20,1D
0631:  DATA A0,12
0632:  DATA EC,3A
0633:  DATA 0D,05
0634:  DATA 0D,05
0635:  DATA 00,02
0636:  DATA D3,34
0637:  DATA FA,32
0638:  DATA A0,30
0639:  DATA F2,32
063A:  DATA 61,10
063B:  DATA F2,32
063C:  DATA 61,32
063D:  DATA 0D,05
063E:  DATA 00,01
063F:  DATA F5,39
0640:  DATA 65,32
0641:  DATA DF,39
0642:  DATA 69,3D
0643:  DATA 65,10
0644:  DATA 3D,10
0645:  DATA 25,36
0646:  DATA 75,10
0647:  DATA A8,39
0648:  DATA F2,31
0649:  DATA 20,18
064A:  DATA F8,12
064B:  DATA 30,1C
064C:  DATA 4C,2C
064D:  DATA A9,06
064E:  DATA 0A,00
064F:  DATA EC,37
0650:  DATA 6F,38
0651:  DATA A0,31
0652:  DATA EF,3A
0653:  DATA 6E,3A
0654:  DATA 3D,10
0655:  DATA 25,32
0656:  DATA 20,10
0657:  DATA A8,39
0658:  DATA F2,31
0659:  DATA 20,18
065A:  DATA F8,12
065B:  DATA 30,1C
065C:  DATA 4C,2C
065D:  DATA A9,06
065E:  DATA 8A,06
065F:  DATA 0A,00
0660:  DATA 57,39
0661:  DATA 61,38
0662:  DATA 20,3A
0663:  DATA F2,34
0664:  DATA E7,33
0665:  DATA 65,39
0666:  DATA 65,32
0667:  DATA 3A,10
0668:  DATA D2,32
0669:  DATA F3,32
066A:  DATA 74,3A
066B:  DATA 69,37
066C:  DATA 67,10
066D:  DATA E4,30
066E:  DATA F4,30
066F:  DATA DF,3B
0670:  DATA F2,34
0671:  DATA F4,32
0672:  DATA DF,30
0673:  DATA 64,32
0674:  DATA 72,10
0675:  DATA F4,37
0676:  DATA A0,39
0677:  DATA F4,30
0678:  DATA 72,3A
0679:  DATA 0D,05
067A:  DATA 00,00
067B:  DATA 55,38
067C:  DATA E4,30
067D:  DATA F4,32
067E:  DATA A0,39
067F:  DATA 69,3D
0680:  DATA 65,10
0681:  DATA 61,39
0682:  DATA E5,30
0683:  DATA 0D,05
0684:  DATA 00,01
0685:  DATA F5,39
0686:  DATA 65,32
0687:  DATA DF,39
0688:  DATA 69,3D
0689:  DATA 65,10
068A:  DATA 3D,10
068B:  DATA 25,36
068C:  DATA E4,06
068D:  DATA 0A,00
068E:  DATA EC,37
068F:  DATA 6F,38
0690:  DATA DF,31
0691:  DATA EF,3A
0692:  DATA 6E,3A
0693:  DATA A0,1E
0694:  DATA A0,12
0695:  DATA F5,06
0696:  DATA 8A,06
0697:  DATA 0A,00
0698:  DATA 0D,05
0699:  DATA DF,2F
069A:  DATA DF,2F
069B:  DATA DF,2F
069C:  DATA DF,2F
069D:  DATA DF,2F
069E:  DATA DF,2F
069F:  DATA DF,2F
06A0:  DATA DF,2F
06A1:  DATA DF,2F
06A2:  DATA DF,2F
06A3:  DATA DF,2F
06A4:  DATA DF,2F
06A5:  DATA DF,2F
06A6:  DATA DF,2F
06A7:  DATA DF,2F
06A8:  DATA 0D,05
06A9:  DATA DF,2F
06AA:  DATA DF,2F
06AB:  DATA DF,29
06AC:  DATA F4,30
06AD:  DATA 72,3A
06AE:  DATA A0,32
06AF:  DATA F8,32
06B0:  DATA E3,3A
06B1:  DATA F4,32
06B2:  DATA DF,36
06B3:  DATA E9,39
06B4:  DATA F3,34
06B5:  DATA 6F,37
06B6:  DATA DF,2F
06B7:  DATA DF,2F
06B8:  DATA DF,06
06B9:  DATA 8A,06
06BA:  DATA 0A,00
06BB:  DATA C3,37
06BC:  DATA ED,36
06BD:  DATA 61,37
06BE:  DATA 64,10
06BF:  DATA 49,22
06C0:  DATA 3A,10
06C1:  DATA 25,2C
06C2:  DATA 0D,05
06C3:  DATA 0D,05
06C4:  DATA 00,01
06C5:  DATA 89,04
06C6:  DATA 2D,1F
06C7:  DATA A0,24
06C8:  DATA 6E,3B
06C9:  DATA 61,36
06CA:  DATA 69,32
06CB:  DATA A0,21
06CC:  DATA 4D,22
06CD:  DATA A0,24
06CE:  DATA C4,10
06CF:  DATA 0D,05
06D0:  DATA 00,01
06D1:  DATA 0D,05
06D2:  DATA DF,2F
06D3:  DATA DF,2F
06D4:  DATA DF,2F
06D5:  DATA 45,37
06D6:  DATA 64,10
06D7:  DATA 65,3C
06D8:  DATA E5,31
06D9:  DATA 75,3A
06DA:  DATA E5,2F
06DB:  DATA ED,34
06DC:  DATA F3,39
06DD:  DATA E9,37
06DE:  DATA EE,2F
06DF:  DATA DF,2F
06E0:  DATA DF,2F
06E1:  DATA DF,06
06E2:  DATA 8A,2F
06E3:  DATA DF,2F
06E4:  DATA DF,2F
06E5:  DATA DF,2F
06E6:  DATA DF,2F
06E7:  DATA DF,2F
06E8:  DATA DF,2F
06E9:  DATA DF,2F
06EA:  DATA DF,2F
06EB:  DATA DF,2F
06EC:  DATA DF,2F
06ED:  DATA DF,2F
06EE:  DATA DF,2F
06EF:  DATA DF,2F
06F0:  DATA DF,2F
06F1:  DATA DF,2F
06F2:  DATA 0D,05
06F3:  DATA 00,00
06F4:  DATA 53,3A
06F5:  DATA 61,39
06F6:  DATA 74,10
06F7:  DATA 65,3C
06F8:  DATA E5,31
06F9:  DATA 75,3A
06FA:  DATA E5,2F
06FB:  DATA E3,37
06FC:  DATA ED,36
06FD:  DATA 61,37
06FE:  DATA E4,06
06FF:  DATA 0A,00
0700:  DATA 89,16
0701:  DATA 3E,10
0702:  DATA 55,38
0703:  DATA EC,34
0704:  DATA EE,35
0705:  DATA A0,31
0706:  DATA EF,36
0707:  DATA ED,30
0708:  DATA 6E,32
0709:  DATA 0D,05
070A:  DATA 00,01
070B:  DATA 09,10
070C:  DATA 20,10
070D:  DATA 54,39
070E:  DATA 61,37
070F:  DATA F3,36
0710:  DATA 69,3A
0711:  DATA A0,20
0712:  DATA E3,35
0713:  DATA EE,37
0714:  DATA EC,32
0715:  DATA 67,32
0716:  DATA E5,06
0717:  DATA 0A,00
0718:  DATA 89,16
0719:  DATA 3E,10
071A:  DATA 53,3A
071B:  DATA 61,3A
071C:  DATA F5,39
071D:  DATA A0,31
071E:  DATA E8,32
071F:  DATA E3,35
0720:  DATA 0D,05
0721:  DATA 00,01
0722:  DATA 09,10
0723:  DATA 20,10
0724:  DATA 54,39
0725:  DATA 61,37
0726:  DATA F3,36
0727:  DATA 69,3A
0728:  DATA A0,26
0729:  DATA C9,29
072A:  DATA A0,26
072B:  DATA C3,2A
072C:  DATA A0,29
072D:  DATA F4,30
072E:  DATA F4,3A
072F:  DATA F3,06
0730:  DATA 0A,00
0731:  DATA E6,34
0732:  DATA EE,34
0733:  DATA 73,34
0734:  DATA 65,32
0735:  DATA A0,34
0736:  DATA 6E,10
0737:  DATA 73,3A
0738:  DATA 61,3A
0739:  DATA F5,39
073A:  DATA DF,31
073B:  DATA E8,32
073C:  DATA E3,35
073D:  DATA 0D,05
073E:  DATA 00,00
073F:  DATA 89,16
0740:  DATA 3E,10
0741:  DATA D3,26
0742:  DATA 46,10
0743:  DATA 61,3B
0744:  DATA E1,34
0745:  DATA EC,30
0746:  DATA 62,36
0747:  DATA 65,10
0748:  DATA 63,34
0749:  DATA E5,31
074A:  DATA EB,06
074B:  DATA 0A,00
074C:  DATA 09,10
074D:  DATA 20,10
074E:  DATA 54,39
074F:  DATA 61,37
0750:  DATA F3,36
0751:  DATA 69,3A
0752:  DATA A0,20
0753:  DATA E3,35
0754:  DATA EE,37
0755:  DATA EC,32
0756:  DATA 67,32
0757:  DATA E5,06
0758:  DATA 0A,00
0759:  DATA 89,04
075A:  DATA 2D,1F
075B:  DATA A0,30
075C:  DATA 6C,36
075D:  DATA EF,3B
075E:  DATA E4,06
075F:  DATA 0A,00
0760:  DATA 89,04
0761:  DATA 2D,1F
0762:  DATA 20,32
0763:  DATA 65,37
0764:  DATA F9,32
0765:  DATA E4,06
0766:  DATA 0A,00
0767:  DATA 0D,05
0768:  DATA 0D,05
0769:  DATA 0D,05
076A:  DATA BD,1E
076B:  DATA BD,1E
076C:  DATA BD,1E
076D:  DATA BD,1E
076E:  DATA BD,1E
076F:  DATA BD,1E
0770:  DATA BD,1E
0771:  DATA BD,1E
0772:  DATA BD,1E
0773:  DATA BD,1E
0774:  DATA BD,1E
0775:  DATA BD,1E
0776:  DATA BD,1E
0777:  DATA BD,1E
0778:  DATA BD,1E
0779:  DATA BD,1E
077A:  DATA BD,1E
077B:  DATA BD,1E
077C:  DATA BD,1E
077D:  DATA BD,1E
077E:  DATA BD,1E
077F:  DATA BD,1E
0780:  DATA BD,1E
0781:  DATA BD,1E
0782:  DATA BD,1E
0783:  DATA BD,1E
0784:  DATA BD,1E
0785:  DATA BD,1E
0786:  DATA BD,1E
0787:  DATA BD,1E
0788:  DATA 0D,05
0789:  DATA 00,01
078A:  DATA 54,34
078B:  DATA E9,39
078C:  DATA A0,34
078D:  DATA 73,10
078E:  DATA CD,27
078F:  DATA CD,24
0790:  DATA CA,24
0791:  DATA A0,21
0792:  DATA C9,23
0793:  DATA 53,10
0794:  DATA D0,24
0795:  DATA 43,10
0796:  DATA 42,21
0797:  DATA 4D,10
0798:  DATA E6,37
0799:  DATA 72,10
079A:  DATA CD,24
079B:  DATA D3,1B
079C:  DATA 5F,21
079D:  DATA C2,26
079E:  DATA 31,17
079F:  DATA 0D,05
07A0:  DATA 00,01
07A1:  DATA CC,30
07A2:  DATA 73,3A
07A3:  DATA A0,3A
07A4:  DATA 70,32
07A5:  DATA 61,3A
07A6:  DATA 65,32
07A7:  DATA A0,37
07A8:  DATA 6E,10
07A9:  DATA 32,18
07AA:  DATA B2,1A
07AB:  DATA 2F,18
07AC:  DATA B6,17
07AD:  DATA B1,1A
07AE:  DATA 2C,10
07AF:  DATA E2,3C
07B0:  DATA A0,24
07B1:  DATA EE,37
07B2:  DATA F5,32
07B3:  DATA AE,06
07B4:  DATA 8A,06
07B5:  DATA 0A,00
07B6:  DATA DF,2F
07B7:  DATA DF,2F
07B8:  DATA C3,24
07B9:  DATA C7,29
07BA:  DATA 20,28
07BB:  DATA C9,21
07BC:  DATA A0,29
07BD:  DATA F4,30
07BE:  DATA 72,3A
07BF:  DATA A0,27
07C0:  DATA F0,32
07C1:  DATA F2,30
07C2:  DATA F4,34
07C3:  DATA 6F,37
07C4:  DATA DF,2F
07C5:  DATA DF,2F
07C6:  DATA DF,06
07C7:  DATA 8A,06
07C8:  DATA 0A,00
07C9:  DATA F7,30
07CA:  DATA 69,3A
07CB:  DATA 69,37
07CC:  DATA 67,10
07CD:  DATA E6,37
07CE:  DATA 72,10
07CF:  DATA C2,27
07D0:  DATA D3,29
07D1:  DATA 20,28
07D2:  DATA C9,21
07D3:  DATA A0,31
07D4:  DATA EF,36
07D5:  DATA ED,30
07D6:  DATA 6E,32
07D7:  DATA 00,01
07D8:  DATA 0D,05
07D9:  DATA F7,30
07DA:  DATA 69,3A
07DB:  DATA 69,37
07DC:  DATA 67,10
07DD:  DATA E6,37
07DE:  DATA 72,10
07DF:  DATA C2,27
07E0:  DATA D3,29
07E1:  DATA 20,28
07E2:  DATA C9,21
07E3:  DATA A0,31
07E4:  DATA EF,36
07E5:  DATA ED,30
07E6:  DATA 6E,32
07E7:  DATA 00,01
07E8:  DATA 45,37
07E9:  DATA 64,10
07EA:  DATA ED,30
07EB:  DATA 69,37
07EC:  DATA 0D,05
07ED:  DATA 00,00
*
0800:  DATA 0D,05
0801:  DATA 0D,05
0802:  DATA BD,1E
0803:  DATA BD,1E
0804:  DATA BD,1E
0805:  DATA 0D,05
0806:  DATA 0D,05
0807:  DATA C6,34
0808:  DATA EE,34
0809:  DATA 73,34
080A:  DATA 65,32
080B:  DATA 20,38
080C:  DATA F2,37
080D:  DATA E3,32
080E:  DATA F3,39
080F:  DATA AE,06
0810:  DATA 8A,2B
0811:  DATA E1,34
0812:  DATA 74,10
0813:  DATA E6,37
0814:  DATA 72,10
0815:  DATA C2,27
0816:  DATA D3,29
0817:  DATA 20,28
0818:  DATA C9,21
0819:  DATA 20,3A
081A:  DATA 75,39
081B:  DATA 6E,10
081C:  DATA 6F,33
081D:  DATA 66,10
081E:  DATA ED,32
081F:  DATA 00,01
*
0845:  MOVF   0B,W
0846:  BCF    0B.7
0847:  MOVLB  03
0848:  BSF    15.7
0849:  BSF    15.0
084A:  NOP
084B:  NOP
084C:  BTFSC  09.7
084D:  BSF    0B.7
084E:  MOVF   13,W
084F:  ANDLW  7F
0850:  BTFSC  03.2
0851:  GOTO   091
0852:  MOVLB  0E
0853:  MOVWF  40
0854:  MOVLB  03
0855:  MOVF   11,W
0856:  MOVLB  0E
0857:  MOVWF  41
0858:  MOVLB  03
0859:  MOVF   12,W
085A:  MOVLB  0E
085B:  MOVWF  42
085C:  MOVF   40,W
085D:  MOVWF  43
085E:  MOVLB  00
085F:  CALL   020
0860:  MOVLB  0E
0861:  MOVF   41,W
0862:  MOVLB  03
0863:  MOVWF  11
0864:  MOVLB  0E
0865:  MOVF   42,W
0866:  MOVLB  03
0867:  MOVWF  12
0868:  MOVF   0B,W
0869:  BCF    0B.7
086A:  BSF    15.7
086B:  BSF    15.0
086C:  NOP
086D:  NOP
086E:  BTFSC  09.7
086F:  BSF    0B.7
0870:  RLF    13,W
0871:  RLF    14,W
0872:  ANDLW  7F
0873:  BTFSC  03.2
0874:  GOTO   091
0875:  MOVLB  0E
0876:  MOVWF  40
0877:  MOVLB  03
0878:  MOVF   11,W
0879:  MOVLB  0E
087A:  MOVWF  41
087B:  MOVLB  03
087C:  MOVF   12,W
087D:  MOVLB  0E
087E:  MOVWF  42
087F:  MOVF   40,W
0880:  MOVWF  43
0881:  MOVLB  00
0882:  CALL   020
0883:  MOVLB  0E
0884:  MOVF   41,W
0885:  MOVLB  03
0886:  MOVWF  11
0887:  MOVLB  0E
0888:  MOVF   42,W
0889:  MOVLB  03
088A:  MOVWF  12
088B:  INCF   11,F
088C:  BTFSC  03.2
088D:  INCF   12,F
088E:  MOVLB  00
088F:  GOTO   045
0890:  MOVLB  03
0891:  MOVLB  00
0892:  RETURN
*
0904:  MOVLB  0E
0905:  MOVF   5D,W
0906:  ANDLW  07
0907:  MOVWF  77
0908:  RRF    5D,W
0909:  MOVWF  78
090A:  RRF    78,F
090B:  RRF    78,F
090C:  MOVLW  1F
090D:  ANDWF  78,F
090E:  MOVF   78,W
090F:  ADDWF  5F,W
0910:  MOVWF  04
0911:  MOVLW  00
0912:  ADDWFC 60,W
0913:  MOVWF  05
0914:  CLRF   78
0915:  INCF   78,F
0916:  INCF   77,F
0917:  GOTO   119
0918:  RLF    78,F
0919:  DECFSZ 77,F
091A:  GOTO   118
091B:  MOVF   5E,F
091C:  BTFSC  03.2
091D:  GOTO   121
091E:  MOVF   78,W
091F:  IORWF  00,F
0920:  GOTO   124
0921:  COMF   78,F
0922:  MOVF   78,W
0923:  ANDWF  00,F
0924:  MOVLB  00
0925:  RETURN
*
0B4E:  MOVF   0B,W
0B4F:  BCF    0B.7
0B50:  MOVLB  03
0B51:  BSF    15.7
0B52:  BSF    15.0
0B53:  NOP
0B54:  NOP
0B55:  BTFSC  09.7
0B56:  BSF    0B.7
0B57:  BTFSC  03.0
0B58:  GOTO   382
0B59:  MOVF   13,W
0B5A:  ANDLW  7F
0B5B:  MOVLB  0C
0B5C:  MOVWF  6D
0B5D:  MOVLB  03
0B5E:  MOVF   11,W
0B5F:  MOVLB  0C
0B60:  MOVWF  6E
0B61:  MOVLB  03
0B62:  MOVF   12,W
0B63:  MOVLB  0C
0B64:  MOVWF  6F
0B65:  MOVF   6D,W
0B66:  MOVLB  0E
0B67:  MOVWF  43
0B68:  MOVLB  00
0B69:  CALL   020
0B6A:  MOVLB  0C
0B6B:  MOVF   6E,W
0B6C:  MOVLB  03
0B6D:  MOVWF  11
0B6E:  MOVLB  0C
0B6F:  MOVF   6F,W
0B70:  MOVLB  03
0B71:  MOVWF  12
0B72:  MOVF   0B,W
0B73:  BCF    0B.7
0B74:  BSF    15.7
0B75:  BSF    15.0
0B76:  NOP
0B77:  NOP
0B78:  BTFSC  09.7
0B79:  BSF    0B.7
0B7A:  MOVLB  0C
0B7B:  DECFSZ 6B,F
0B7C:  GOTO   37E
0B7D:  GOTO   380
0B7E:  MOVLB  03
0B7F:  GOTO   382
0B80:  GOTO   3A6
0B81:  MOVLB  03
0B82:  RLF    13,W
0B83:  RLF    14,W
0B84:  ANDLW  7F
0B85:  MOVLB  0C
0B86:  MOVWF  6D
0B87:  MOVLB  03
0B88:  MOVF   11,W
0B89:  MOVLB  0C
0B8A:  MOVWF  6E
0B8B:  MOVLB  03
0B8C:  MOVF   12,W
0B8D:  MOVLB  0C
0B8E:  MOVWF  6F
0B8F:  MOVF   6D,W
0B90:  MOVLB  0E
0B91:  MOVWF  43
0B92:  MOVLB  00
0B93:  CALL   020
0B94:  MOVLB  0C
0B95:  MOVF   6E,W
0B96:  MOVLB  03
0B97:  MOVWF  11
0B98:  MOVLB  0C
0B99:  MOVF   6F,W
0B9A:  MOVLB  03
0B9B:  MOVWF  12
0B9C:  INCF   11,F
0B9D:  BTFSC  03.2
0B9E:  INCF   12,F
0B9F:  BCF    03.0
0BA0:  MOVLB  0C
0BA1:  DECFSZ 6B,F
0BA2:  GOTO   3A4
0BA3:  GOTO   3A6
0BA4:  MOVLB  00
0BA5:  GOTO   34E
0BA6:  MOVLB  00
0BA7:  RETURN
0BA8:  MOVLB  0C
0BA9:  BTFSC  6C.7
0BAA:  GOTO   3BE
0BAB:  MOVLW  0F
0BAC:  MOVWF  77
0BAD:  SWAPF  6B,W
0BAE:  ANDWF  77,F
0BAF:  MOVLW  0A
0BB0:  SUBWF  77,W
0BB1:  BTFSC  03.0
0BB2:  GOTO   3B6
0BB3:  MOVLW  30
0BB4:  ADDWF  77,F
0BB5:  GOTO   3B8
0BB6:  MOVF   6C,W
0BB7:  ADDWF  77,F
0BB8:  MOVF   77,W
0BB9:  MOVLB  0E
0BBA:  MOVWF  43
0BBB:  MOVLB  00
0BBC:  CALL   020
0BBD:  MOVLB  0C
0BBE:  MOVLW  0F
0BBF:  ANDWF  6B,F
0BC0:  MOVLW  0A
0BC1:  SUBWF  6B,W
0BC2:  BTFSC  03.0
0BC3:  GOTO   3C6
0BC4:  MOVLW  30
0BC5:  GOTO   3C8
0BC6:  BCF    6C.7
0BC7:  MOVF   6C,W
0BC8:  ADDWF  6B,F
0BC9:  MOVF   6B,W
0BCA:  MOVLB  0E
0BCB:  MOVWF  43
0BCC:  MOVLB  00
0BCD:  CALL   020
0BCE:  RETURN
*
0FC5:  MOVF   78,W
0FC6:  BTFSC  03.2
0FC7:  GOTO   7CC
0FC8:  MOVF   77,W
0FC9:  MOVWI  W,[FSR0++]
0FCA:  DECFSZ 78,F
0FCB:  GOTO   7C8
*
17E9:  MOVLB  0D
17EA:  MOVF   21,W
17EB:  CLRF   78
17EC:  SUBWF  20,W
17ED:  BTFSC  03.0
17EE:  GOTO   7F2
17EF:  MOVF   20,W
17F0:  MOVWF  77
17F1:  GOTO   7FE
17F2:  CLRF   77
17F3:  MOVLW  08
17F4:  MOVWF  22
17F5:  RLF    20,F
17F6:  RLF    77,F
17F7:  MOVF   21,W
17F8:  SUBWF  77,W
17F9:  BTFSC  03.0
17FA:  MOVWF  77
17FB:  RLF    78,F
17FC:  DECFSZ 22,F
17FD:  GOTO   7F5
17FE:  MOVLB  00
17FF:  RETURN
*
1F84:  MOVF   78,W
1F85:  MOVLB  0C
1F86:  MOVF   55,W
1F87:  MOVLB  0D
1F88:  MOVWF  20
1F89:  MOVLW  64
1F8A:  MOVWF  21
1F8B:  MOVLP  10
1F8C:  MOVLB  00
1F8D:  CALL   7E9
1F8E:  MOVLP  18
1F8F:  MOVF   77,W
1F90:  MOVLB  0C
1F91:  MOVWF  55
1F92:  MOVF   78,W
1F93:  MOVLW  30
1F94:  BTFSS  03.2
1F95:  GOTO   79D
1F96:  BTFSS  56.1
1F97:  GOTO   7A9
1F98:  BTFSC  56.3
1F99:  GOTO   7A9
1F9A:  BTFSC  56.4
1F9B:  MOVLW  20
1F9C:  GOTO   7A0
1F9D:  BCF    56.3
1F9E:  BCF    56.4
1F9F:  BSF    56.0
1FA0:  ADDWF  78,F
1FA1:  MOVF   78,W
1FA2:  MOVLB  0E
1FA3:  MOVWF  43
1FA4:  MOVLP  08
1FA5:  MOVLB  00
1FA6:  CALL   020
1FA7:  MOVLP  18
1FA8:  MOVLB  0C
1FA9:  MOVF   55,W
1FAA:  MOVLB  0D
1FAB:  MOVWF  20
1FAC:  MOVLW  0A
1FAD:  MOVWF  21
1FAE:  MOVLP  10
1FAF:  MOVLB  00
1FB0:  CALL   7E9
1FB1:  MOVLP  18
1FB2:  MOVF   77,W
1FB3:  MOVLB  0C
1FB4:  MOVWF  55
1FB5:  MOVF   78,W
1FB6:  MOVLW  30
1FB7:  BTFSS  03.2
1FB8:  GOTO   7BF
1FB9:  BTFSC  56.3
1FBA:  GOTO   7C8
1FBB:  BTFSS  56.0
1FBC:  GOTO   7C8
1FBD:  BTFSC  56.4
1FBE:  MOVLW  20
1FBF:  ADDWF  78,F
1FC0:  MOVF   78,W
1FC1:  MOVLB  0E
1FC2:  MOVWF  43
1FC3:  MOVLP  08
1FC4:  MOVLB  00
1FC5:  CALL   020
1FC6:  MOVLP  18
1FC7:  MOVLB  0C
1FC8:  MOVLW  30
1FC9:  ADDWF  55,F
1FCA:  MOVF   55,W
1FCB:  MOVLB  0E
1FCC:  MOVWF  43
1FCD:  MOVLP  08
1FCE:  MOVLB  00
1FCF:  CALL   020
1FD0:  MOVLP  18
1FD1:  RETURN
*
25EB:  BTFSC  03.1
25EC:  GOTO   5F0
25ED:  MOVLW  24
25EE:  MOVWF  05
25EF:  MOVWF  04
25F0:  CLRF   77
25F1:  CLRF   78
25F2:  CLRF   79
25F3:  CLRF   7A
25F4:  MOVLB  0D
25F5:  CLRF   34
25F6:  CLRF   35
25F7:  CLRF   36
25F8:  CLRF   37
25F9:  MOVF   2F,W
25FA:  IORWF  2E,W
25FB:  IORWF  2D,W
25FC:  IORWF  2C,W
25FD:  BTFSC  03.2
25FE:  GOTO   62F
25FF:  MOVLW  20
2600:  MOVWF  38
2601:  BCF    03.0
2602:  RLF    28,F
2603:  RLF    29,F
2604:  RLF    2A,F
2605:  RLF    2B,F
2606:  RLF    34,F
2607:  RLF    35,F
2608:  RLF    36,F
2609:  RLF    37,F
260A:  MOVF   2F,W
260B:  SUBWF  37,W
260C:  BTFSS  03.2
260D:  GOTO   618
260E:  MOVF   2E,W
260F:  SUBWF  36,W
2610:  BTFSS  03.2
2611:  GOTO   618
2612:  MOVF   2D,W
2613:  SUBWF  35,W
2614:  BTFSS  03.2
2615:  GOTO   618
2616:  MOVF   2C,W
2617:  SUBWF  34,W
2618:  BTFSS  03.0
2619:  GOTO   629
261A:  MOVF   2C,W
261B:  SUBWF  34,F
261C:  MOVF   2D,W
261D:  BTFSS  03.0
261E:  INCFSZ 2D,W
261F:  SUBWF  35,F
2620:  MOVF   2E,W
2621:  BTFSS  03.0
2622:  INCFSZ 2E,W
2623:  SUBWF  36,F
2624:  MOVF   2F,W
2625:  BTFSS  03.0
2626:  INCFSZ 2F,W
2627:  SUBWF  37,F
2628:  BSF    03.0
2629:  RLF    77,F
262A:  RLF    78,F
262B:  RLF    79,F
262C:  RLF    7A,F
262D:  DECFSZ 38,F
262E:  GOTO   601
262F:  MOVF   34,W
2630:  MOVWF  00
2631:  MOVF   35,W
2632:  MOVWI  W,[FSR0+01]
2633:  MOVF   36,W
2634:  MOVWI  W,[FSR0+02]
2635:  MOVF   37,W
2636:  MOVWI  W,[FSR0+03]
2637:  MOVLB  00
2638:  RETURN
*
28F6:  MOVLW  20
28F7:  MOVLB  0C
28F8:  BTFSS  69.4
28F9:  MOVLW  30
28FA:  MOVWF  6C
28FB:  MOVF   68,W
28FC:  MOVWF  77
28FD:  BTFSS  68.7
28FE:  GOTO   107
28FF:  COMF   77,F
2900:  INCF   77,F
2901:  MOVF   77,W
2902:  MOVWF  68
2903:  MOVLW  2D
2904:  MOVWF  6C
2905:  BSF    69.7
2906:  BSF    69.0
2907:  MOVF   68,W
2908:  MOVLB  0D
2909:  MOVWF  20
290A:  MOVLW  64
290B:  MOVWF  21
290C:  MOVLP  10
290D:  MOVLB  00
290E:  CALL   7E9
290F:  MOVLP  28
2910:  MOVF   77,W
2911:  MOVLB  0C
2912:  MOVWF  68
2913:  MOVLW  30
2914:  ADDWF  78,W
2915:  MOVWF  6D
2916:  MOVF   68,W
2917:  MOVLB  0D
2918:  MOVWF  20
2919:  MOVLW  0A
291A:  MOVWF  21
291B:  MOVLP  10
291C:  MOVLB  00
291D:  CALL   7E9
291E:  MOVLP  28
291F:  MOVLW  30
2920:  ADDWF  77,W
2921:  MOVLB  0C
2922:  MOVWF  6F
2923:  MOVLW  30
2924:  ADDWF  78,W
2925:  MOVWF  6E
2926:  MOVF   6C,W
2927:  MOVWF  77
2928:  MOVLW  30
2929:  SUBWF  6D,W
292A:  BTFSC  03.2
292B:  GOTO   130
292C:  BSF    69.1
292D:  BTFSC  69.7
292E:  BSF    69.2
292F:  GOTO   144
2930:  MOVF   6C,W
2931:  MOVWF  6D
2932:  MOVLW  20
2933:  MOVWF  6C
2934:  MOVLW  30
2935:  SUBWF  6E,W
2936:  BTFSC  03.2
2937:  GOTO   13C
2938:  BSF    69.0
2939:  BTFSC  69.7
293A:  BSF    69.1
293B:  GOTO   144
293C:  BTFSS  03.2
293D:  BSF    69.0
293E:  BTFSS  03.2
293F:  GOTO   144
2940:  MOVF   6D,W
2941:  MOVWF  6E
2942:  MOVLW  20
2943:  MOVWF  6D
2944:  BTFSC  69.2
2945:  GOTO   14B
2946:  BTFSC  69.1
2947:  GOTO   153
2948:  BTFSC  69.0
2949:  GOTO   15B
294A:  GOTO   163
294B:  MOVF   6C,W
294C:  MOVLB  0E
294D:  MOVWF  43
294E:  MOVLP  08
294F:  MOVLB  00
2950:  CALL   020
2951:  MOVLP  28
2952:  MOVLB  0C
2953:  MOVF   6D,W
2954:  MOVLB  0E
2955:  MOVWF  43
2956:  MOVLP  08
2957:  MOVLB  00
2958:  CALL   020
2959:  MOVLP  28
295A:  MOVLB  0C
295B:  MOVF   6E,W
295C:  MOVLB  0E
295D:  MOVWF  43
295E:  MOVLP  08
295F:  MOVLB  00
2960:  CALL   020
2961:  MOVLP  28
2962:  MOVLB  0C
2963:  MOVF   6F,W
2964:  MOVLB  0E
2965:  MOVWF  43
2966:  MOVLP  08
2967:  MOVLB  00
2968:  CALL   020
2969:  MOVLP  28
296A:  RETURN
*
298C:  CLRF   77
298D:  CLRF   78
298E:  MOVF   45,W
298F:  BCF    03.0
2990:  BTFSC  46.0
2991:  ADDWF  77,F
2992:  RRF    77,F
2993:  RRF    78,F
2994:  BTFSC  46.1
2995:  ADDWF  77,F
2996:  RRF    77,F
2997:  RRF    78,F
2998:  BTFSC  46.2
2999:  ADDWF  77,F
299A:  RRF    77,F
299B:  RRF    78,F
299C:  BTFSC  46.3
299D:  ADDWF  77,F
299E:  RRF    77,F
299F:  RRF    78,F
29A0:  BTFSC  46.4
29A1:  ADDWF  77,F
29A2:  RRF    77,F
29A3:  RRF    78,F
29A4:  BTFSC  46.5
29A5:  ADDWF  77,F
29A6:  RRF    77,F
29A7:  RRF    78,F
29A8:  BTFSC  46.6
29A9:  ADDWF  77,F
29AA:  RRF    77,F
29AB:  RRF    78,F
29AC:  BTFSC  46.7
29AD:  ADDWF  77,F
29AE:  RRF    77,F
29AF:  RRF    78,F
*
2A40:  MOVF   04,W
2A41:  MOVLB  0D
2A42:  MOVWF  20
2A43:  MOVLW  3B
2A44:  MOVWF  27
2A45:  MOVLW  9A
2A46:  MOVWF  26
2A47:  MOVLW  CA
2A48:  MOVWF  25
2A49:  CLRF   24
2A4A:  MOVLW  0A
2A4B:  MOVWF  22
2A4C:  BSF    03.1
2A4D:  MOVLW  24
2A4E:  MOVWF  05
2A4F:  MOVLW  0B
2A50:  MOVWF  04
2A51:  MOVLB  0C
2A52:  MOVF   6E,W
2A53:  MOVLB  0D
2A54:  MOVWF  2B
2A55:  MOVLB  0C
2A56:  MOVF   6D,W
2A57:  MOVLB  0D
2A58:  MOVWF  2A
2A59:  MOVLB  0C
2A5A:  MOVF   6C,W
2A5B:  MOVLB  0D
2A5C:  MOVWF  29
2A5D:  MOVLB  0C
2A5E:  MOVF   6B,W
2A5F:  MOVLB  0D
2A60:  MOVWF  28
2A61:  MOVF   27,W
2A62:  MOVWF  2F
2A63:  MOVF   26,W
2A64:  MOVWF  2E
2A65:  MOVF   25,W
2A66:  MOVWF  2D
2A67:  MOVF   24,W
2A68:  MOVWF  2C
2A69:  MOVLP  20
2A6A:  MOVLB  00
2A6B:  CALL   5EB
2A6C:  MOVLP  28
2A6D:  MOVF   78,W
2A6E:  MOVF   77,F
2A6F:  BTFSS  03.2
2A70:  GOTO   288
2A71:  MOVLB  0D
2A72:  MOVF   22,W
2A73:  XORLW  01
2A74:  BTFSS  03.2
2A75:  GOTO   278
2A76:  MOVLB  00
2A77:  GOTO   288
2A78:  MOVF   20,W
2A79:  BTFSC  03.2
2A7A:  GOTO   28A
2A7B:  ANDLW  0F
2A7C:  SUBWF  22,W
2A7D:  BTFSC  03.2
2A7E:  GOTO   281
2A7F:  BTFSC  03.0
2A80:  GOTO   294
2A81:  BTFSC  20.7
2A82:  GOTO   294
2A83:  BTFSC  20.6
2A84:  GOTO   28A
2A85:  MOVLW  20
2A86:  GOTO   28B
2A87:  MOVLB  00
2A88:  MOVLB  0D
2A89:  CLRF   20
2A8A:  MOVLW  30
2A8B:  ADDWF  77,F
2A8C:  MOVF   77,W
2A8D:  MOVLB  0E
2A8E:  MOVWF  43
2A8F:  MOVLP  08
2A90:  MOVLB  00
2A91:  CALL   020
2A92:  MOVLP  28
2A93:  MOVLB  0D
2A94:  BCF    03.1
2A95:  MOVF   27,W
2A96:  MOVWF  2B
2A97:  MOVF   26,W
2A98:  MOVWF  2A
2A99:  MOVF   25,W
2A9A:  MOVWF  29
2A9B:  MOVF   24,W
2A9C:  MOVWF  28
2A9D:  CLRF   2F
2A9E:  CLRF   2E
2A9F:  CLRF   2D
2AA0:  MOVLW  0A
2AA1:  MOVWF  2C
2AA2:  MOVLP  20
2AA3:  MOVLB  00
2AA4:  CALL   5EB
2AA5:  MOVLP  28
2AA6:  MOVF   7A,W
2AA7:  MOVLB  0D
2AA8:  MOVWF  27
2AA9:  MOVF   79,W
2AAA:  MOVWF  26
2AAB:  MOVF   78,W
2AAC:  MOVWF  25
2AAD:  MOVF   77,W
2AAE:  MOVWF  24
2AAF:  DECFSZ 22,F
2AB0:  GOTO   24C
2AB1:  MOVLB  00
2AB2:  RETURN
*
3469:  MOVF   04,W
346A:  MOVWF  60
346B:  BTFSS  58.7
346C:  GOTO   47A
346D:  DECF   60,F
346E:  BSF    60.5
346F:  COMF   55,F
3470:  COMF   56,F
3471:  COMF   57,F
3472:  COMF   58,F
3473:  INCF   55,F
3474:  BTFSC  03.2
3475:  INCF   56,F
3476:  BTFSC  03.2
3477:  INCF   57,F
3478:  BTFSC  03.2
3479:  INCF   58,F
347A:  MOVLW  3B
347B:  MOVWF  67
347C:  MOVLW  9A
347D:  MOVWF  66
347E:  MOVLW  CA
347F:  MOVWF  65
3480:  CLRF   64
3481:  MOVLW  0A
3482:  MOVWF  62
3483:  BSF    03.1
3484:  MOVLW  23
3485:  MOVWF  05
3486:  MOVLW  F5
3487:  MOVWF  04
3488:  MOVF   58,W
3489:  MOVLB  0D
348A:  MOVWF  2B
348B:  MOVLB  0C
348C:  MOVF   57,W
348D:  MOVLB  0D
348E:  MOVWF  2A
348F:  MOVLB  0C
3490:  MOVF   56,W
3491:  MOVLB  0D
3492:  MOVWF  29
3493:  MOVLB  0C
3494:  MOVF   55,W
3495:  MOVLB  0D
3496:  MOVWF  28
3497:  MOVLB  0C
3498:  MOVF   67,W
3499:  MOVLB  0D
349A:  MOVWF  2F
349B:  MOVLB  0C
349C:  MOVF   66,W
349D:  MOVLB  0D
349E:  MOVWF  2E
349F:  MOVLB  0C
34A0:  MOVF   65,W
34A1:  MOVLB  0D
34A2:  MOVWF  2D
34A3:  MOVLB  0C
34A4:  MOVF   64,W
34A5:  MOVLB  0D
34A6:  MOVWF  2C
34A7:  MOVLP  20
34A8:  MOVLB  00
34A9:  CALL   5EB
34AA:  MOVLP  30
34AB:  MOVF   78,W
34AC:  MOVF   77,F
34AD:  BTFSS  03.2
34AE:  GOTO   4C6
34AF:  MOVLB  0C
34B0:  MOVF   62,W
34B1:  XORLW  01
34B2:  BTFSS  03.2
34B3:  GOTO   4B6
34B4:  MOVLB  00
34B5:  GOTO   4C6
34B6:  MOVF   60,W
34B7:  BTFSC  03.2
34B8:  GOTO   4C9
34B9:  ANDLW  0F
34BA:  SUBWF  62,W
34BB:  BTFSC  03.2
34BC:  GOTO   4BF
34BD:  BTFSC  03.0
34BE:  GOTO   4F4
34BF:  BTFSC  60.7
34C0:  GOTO   4F4
34C1:  BTFSC  60.6
34C2:  GOTO   4C9
34C3:  MOVLW  20
34C4:  GOTO   4EB
34C5:  MOVLB  00
34C6:  MOVLW  20
34C7:  MOVLB  0C
34C8:  ANDWF  60,F
34C9:  BTFSS  60.5
34CA:  GOTO   4D9
34CB:  BCF    60.5
34CC:  MOVF   77,W
34CD:  MOVWF  60
34CE:  MOVLW  2D
34CF:  MOVLB  0E
34D0:  MOVWF  43
34D1:  MOVLP  08
34D2:  MOVLB  00
34D3:  CALL   020
34D4:  MOVLP  30
34D5:  MOVLB  0C
34D6:  MOVF   60,W
34D7:  MOVWF  77
34D8:  CLRF   60
34D9:  MOVLW  30
34DA:  BTFSS  60.5
34DB:  GOTO   4EB
34DC:  BCF    60.5
34DD:  MOVF   77,W
34DE:  MOVWF  60
34DF:  MOVLW  2D
34E0:  MOVLB  0E
34E1:  MOVWF  43
34E2:  MOVLP  08
34E3:  MOVLB  00
34E4:  CALL   020
34E5:  MOVLP  30
34E6:  MOVLB  0C
34E7:  MOVF   60,W
34E8:  MOVWF  77
34E9:  CLRF   60
34EA:  MOVLW  30
34EB:  ADDWF  77,F
34EC:  MOVF   77,W
34ED:  MOVLB  0E
34EE:  MOVWF  43
34EF:  MOVLP  08
34F0:  MOVLB  00
34F1:  CALL   020
34F2:  MOVLP  30
34F3:  MOVLB  0C
34F4:  BCF    03.1
34F5:  MOVF   67,W
34F6:  MOVLB  0D
34F7:  MOVWF  2B
34F8:  MOVLB  0C
34F9:  MOVF   66,W
34FA:  MOVLB  0D
34FB:  MOVWF  2A
34FC:  MOVLB  0C
34FD:  MOVF   65,W
34FE:  MOVLB  0D
34FF:  MOVWF  29
3500:  MOVLB  0C
3501:  MOVF   64,W
3502:  MOVLB  0D
3503:  MOVWF  28
3504:  CLRF   2F
3505:  CLRF   2E
3506:  CLRF   2D
3507:  MOVLW  0A
3508:  MOVWF  2C
3509:  MOVLP  20
350A:  MOVLB  00
350B:  CALL   5EB
350C:  MOVLP  30
350D:  MOVF   7A,W
350E:  MOVLB  0C
350F:  MOVWF  67
3510:  MOVF   79,W
3511:  MOVWF  66
3512:  MOVF   78,W
3513:  MOVWF  65
3514:  MOVF   77,W
3515:  MOVWF  64
3516:  DECFSZ 62,F
3517:  GOTO   483
.................... 
.................... #list
.................... 
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
*
0F81:  MOVLW  24
0F82:  MOVWF  05
0F83:  MOVLW  97
0F84:  MOVWF  04
0F85:  MOVF   00,W
0F86:  BTFSC  03.2
0F87:  GOTO   796
0F88:  MOVLW  05
0F89:  MOVWF  78
0F8A:  CLRF   77
0F8B:  DECFSZ 77,F
0F8C:  GOTO   78B
0F8D:  DECFSZ 78,F
0F8E:  GOTO   78A
0F8F:  MOVLW  2E
0F90:  MOVWF  77
0F91:  DECFSZ 77,F
0F92:  GOTO   791
0F93:  GOTO   794
0F94:  DECFSZ 00,F
0F95:  GOTO   788
0F96:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
1632:  MOVLB  00
1633:  BTFSS  11.4
1634:  GOTO   633
1635:  MOVLB  03
1636:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
0820:  MOVLB  01
0821:  BCF    0D.4
0822:  MOVLB  02
0823:  BCF    0D.4
0824:  MOVLW  08
0825:  MOVWF  78
0826:  GOTO   027
0827:  NOP
0828:  BSF    78.7
0829:  GOTO   03A
082A:  BCF    78.7
082B:  MOVLB  0E
082C:  RRF    43,F
082D:  MOVLB  02
082E:  BTFSC  03.0
082F:  BSF    0D.4
0830:  BTFSS  03.0
0831:  BCF    0D.4
0832:  BSF    78.6
0833:  GOTO   03A
0834:  BCF    78.6
0835:  DECFSZ 78,F
0836:  GOTO   02B
0837:  GOTO   038
0838:  NOP
0839:  BSF    0D.4
083A:  MOVLW  84
083B:  MOVWF  04
083C:  DECFSZ 04,F
083D:  GOTO   03C
083E:  NOP
083F:  BTFSC  78.7
0840:  GOTO   02A
0841:  BTFSC  78.6
0842:  GOTO   034
0843:  MOVLB  00
0844:  RETURN
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
*
0926:  MOVLB  04
0927:  MOVF   11,W
0928:  MOVLB  0F
0929:  MOVF   2C,W
092A:  MOVLB  04
092B:  MOVWF  11
092C:  RRF    14,W
092D:  BTFSS  03.0
092E:  GOTO   12C
092F:  MOVF   11,W
0930:  MOVWF  77
0931:  MOVLB  00
0932:  RETURN
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
0933:  MOVLB  04
0934:  MOVF   11,W
0935:  MOVLB  0F
0936:  MOVF   2C,W
0937:  MOVLB  04
0938:  MOVWF  11
0939:  RRF    14,W
093A:  BTFSS  03.0
093B:  GOTO   139
093C:  MOVF   11,W
093D:  MOVWF  77
093E:  MOVLB  00
093F:  RETURN
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_TEMP_TOP    AD7490_VIN0
.................... #define ADC_TEMP_BOT    AD7490_VIN1
.................... #define ADC_CIGS_VOLT   AD7490_VIN2
.................... #define ADC_CIGS_CURR   AD7490_VIN3
.................... #define ADC_PD          AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER1
.................... void TIMER1_isr()
.................... {
....................    set_timer1(CLOCK_FREQUENCY); //3.2767秒後に割り込みを発生させる
*
004A:  CLRF   16
004B:  MOVLW  80
004C:  MOVWF  17
004D:  CLRF   16
004E:  NOP
....................    sec++;
004F:  MOVLW  01
0050:  ADDWF  31,F
0051:  BTFSC  03.0
0052:  INCF   32,F
0053:  BTFSC  03.2
0054:  INCF   33,F
0055:  BTFSC  03.2
0056:  INCF   34,F
....................    /*
....................    if (++subsec >= 100)
....................    {
....................       subsec = 0;
....................       sec++;
.................... 
....................       if (sec >= SEC_IN_A_DAY)
....................       {
....................          day++;
....................       }
....................    }*/
0057:  BCF    11.0
0058:  MOVLP  00
0059:  GOTO   02D
.................... }
.................... 
.................... void setup_timer()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
08E7:  MOVLW  5A
08E8:  MOVLB  03
08E9:  MOVWF  11
08EA:  MOVLW  00
08EB:  MOVWF  12
08EC:  MOVLB  00
08ED:  CALL   045
....................    clear_interrupt(INT_TIMER1);
08EE:  BCF    11.0
....................    //sec = 0;
....................    // 外部クロックをT1CKIピンから入力、プリスケーラなし
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
08EF:  MOVLW  8F
08F0:  MOVWF  18
08F1:  CLRF   19
....................    set_timer1(CLOCK_FREQUENCY); 
08F2:  CLRF   16
08F3:  MOVLW  80
08F4:  MOVWF  17
08F5:  CLRF   16
08F6:  NOP
....................    //set_timer1(0);  // タイマーカウント初期値設定
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);   
08F7:  MOVLB  01
08F8:  BSF    11.0
....................    enable_interrupts(GLOBAL);
08F9:  MOVLW  C0
08FA:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
08FB:  MOVLW  64
08FC:  MOVLB  03
08FD:  MOVWF  11
08FE:  MOVLW  00
08FF:  MOVWF  12
0900:  MOVLB  00
0901:  CALL   045
0902:  MOVLP  38
0903:  GOTO   0BB (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    sec = new_sec;
.................... 
.................... }
.................... 
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return sec;
*
133B:  MOVF   31,W
133C:  MOVWF  77
133D:  MOVF   32,W
133E:  MOVWF  78
133F:  MOVF   33,W
1340:  MOVWF  79
1341:  MOVF   34,W
1342:  MOVWF  7A
.................... }
.................... 
.................... unsigned int16 get_current_day()
.................... {
....................    return day;
.................... }
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
006A:  GOTO   06D
006B:  BTFSS  28.0
006C:  GOTO   080
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
006D:  MOVF   59,W
006E:  SUBLW  1F
006F:  BTFSS  03.0
0070:  GOTO   080
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
0071:  MOVF   59,W
0072:  INCF   59,F
0073:  ANDLW  1F
0074:  ADDLW  19
0075:  MOVWF  04
0076:  MOVLW  20
0077:  MOVWF  05
0078:  BTFSC  03.0
0079:  INCF   05,F
007A:  BTFSS  11.5
007B:  GOTO   07A
007C:  MOVLB  03
007D:  MOVF   19,W
007E:  MOVWF  00
007F:  MOVLB  00
0080:  BCF    11.5
0081:  MOVLP  00
0082:  GOTO   02D
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
08D3:  MOVLW  83
08D4:  MOVLB  03
08D5:  MOVWF  11
08D6:  MOVLW  00
08D7:  MOVWF  12
08D8:  MOVLB  00
08D9:  CALL   045
....................    enable_interrupts(INT_RDA);
08DA:  MOVLB  01
08DB:  BSF    11.5
....................    enable_interrupts(global);
08DC:  MOVLW  C0
08DD:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
08DE:  MOVLW  8C
08DF:  MOVLB  03
08E0:  MOVWF  11
08E1:  MOVLW  00
08E2:  MOVWF  12
08E3:  MOVLB  00
08E4:  CALL   045
08E5:  MOVLP  38
08E6:  GOTO   0B8 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0FB2:  MOVLB  0A
0FB3:  MOVF   6F,W
0FB4:  MOVWF  7A
0FB5:  MOVF   6E,W
0FB6:  MOVWF  04
0FB7:  MOVF   7A,W
0FB8:  MOVWF  05
0FB9:  MOVF   00,W
0FBA:  MOVLB  0B
0FBB:  MOVWF  20
0FBC:  MOVLB  0A
0FBD:  MOVF   6D,W
0FBE:  MOVWF  05
0FBF:  MOVF   6C,W
0FC0:  MOVWF  04
0FC1:  CLRF   77
0FC2:  MOVLB  0B
0FC3:  MOVF   20,W
0FC4:  MOVWF  78
....................    *receive_signal_size = 0;
*
0FCC:  MOVLB  0A
0FCD:  MOVF   6E,W
0FCE:  MOVWF  04
0FCF:  MOVF   6F,W
0FD0:  MOVWF  05
0FD1:  CLRF   00
0FD2:  MOVLP  38
0FD3:  MOVLB  00
0FD4:  GOTO   10E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... #include "../mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_TEMP_TOP    AD7490_VIN0
.................... #define ADC_TEMP_BOT    AD7490_VIN1
.................... #define ADC_CIGS_VOLT   AD7490_VIN2
.................... #define ADC_CIGS_CURR   AD7490_VIN3
.................... #define ADC_PD          AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... // External clock source for Timer1
.................... // Must Add a 32.768 kHz crystal to the T1CKI pin (pin 6 of PIC16F1789)
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_day();
.................... void set_current_sec(unsigned int32 new_sec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_TEMP_TOP    AD7490_VIN0
.................... #define ADC_TEMP_BOT    AD7490_VIN1
.................... #define ADC_CIGS_VOLT   AD7490_VIN2
.................... #define ADC_CIGS_CURR   AD7490_VIN3
.................... #define ADC_PD          AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0E3F:  MOVLB  0E
0E40:  MOVF   57,W
0E41:  XORLW  00
0E42:  MOVLB  00
0E43:  BTFSC  03.2
0E44:  GOTO   649
0E45:  XORLW  01
0E46:  BTFSC  03.2
0E47:  GOTO   672
0E48:  GOTO   69C
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E49:  MOVLB  0E
0E4A:  CLRF   60
0E4B:  CLRF   5F
0E4C:  MOVF   60,W
0E4D:  SUBWF  5E,W
0E4E:  BTFSS  03.0
0E4F:  GOTO   671
0E50:  BTFSS  03.2
0E51:  GOTO   656
0E52:  MOVF   5D,W
0E53:  SUBWF  5F,W
0E54:  BTFSC  03.0
0E55:  GOTO   671
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0E56:  MOVF   5B,W
0E57:  ADDWF  5F,W
0E58:  MOVWF  04
0E59:  MOVF   5C,W
0E5A:  ADDWFC 60,W
0E5B:  MOVWF  05
0E5C:  MOVF   00,W
0E5D:  MOVWF  63
0E5E:  MOVLB  04
0E5F:  BCF    15.5
0E60:  MOVLW  40
0E61:  MOVWF  14
0E62:  MOVLW  09
0E63:  MOVWF  12
0E64:  MOVLW  2A
0E65:  MOVWF  15
0E66:  MOVLB  0E
0E67:  MOVF   63,W
0E68:  MOVLB  0F
0E69:  MOVWF  2C
0E6A:  MOVLB  00
0E6B:  CALL   126
0E6C:  MOVLB  0E
0E6D:  INCF   5F,F
0E6E:  BTFSC  03.2
0E6F:  INCF   60,F
0E70:  GOTO   64C
....................          break;
0E71:  GOTO   69D
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0E72:  MOVLB  0E
0E73:  CLRF   62
0E74:  CLRF   61
0E75:  MOVF   62,W
0E76:  SUBWF  5E,W
0E77:  BTFSS  03.0
0E78:  GOTO   69A
0E79:  BTFSS  03.2
0E7A:  GOTO   67F
0E7B:  MOVF   5D,W
0E7C:  SUBWF  61,W
0E7D:  BTFSC  03.0
0E7E:  GOTO   69A
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
0E7F:  MOVF   5B,W
0E80:  ADDWF  61,W
0E81:  MOVWF  04
0E82:  MOVF   5C,W
0E83:  ADDWFC 62,W
0E84:  MOVWF  05
0E85:  MOVF   00,W
0E86:  MOVWF  63
0E87:  MOVLB  04
0E88:  BCF    15.5
0E89:  MOVLW  40
0E8A:  MOVWF  14
0E8B:  MOVLW  09
0E8C:  MOVWF  12
0E8D:  MOVLW  2A
0E8E:  MOVWF  15
0E8F:  MOVLB  0E
0E90:  MOVF   63,W
0E91:  MOVLB  0F
0E92:  MOVWF  2C
0E93:  MOVLB  00
0E94:  CALL   133
0E95:  MOVLB  0E
0E96:  INCF   61,F
0E97:  BTFSC  03.2
0E98:  INCF   62,F
0E99:  GOTO   675
....................          break;
0E9A:  GOTO   69D
0E9B:  MOVLB  00
....................          
....................       default:
....................          break;
0E9C:  MOVLB  0E
....................    }
....................    return;
0E9D:  MOVLB  00
0E9E:  RETURN
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
0940:  MOVLB  0E
0941:  MOVF   5D,W
0942:  XORLW  00
0943:  MOVLB  00
0944:  BTFSC  03.2
0945:  GOTO   14A
0946:  XORLW  01
0947:  BTFSC  03.2
0948:  GOTO   1BA
0949:  GOTO   22B
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
094A:  MOVLB  0E
094B:  CLRF   6C
094C:  CLRF   6B
094D:  MOVF   6C,W
094E:  SUBWF  64,W
094F:  BTFSS  03.0
0950:  GOTO   172
0951:  BTFSS  03.2
0952:  GOTO   157
0953:  MOVF   63,W
0954:  SUBWF  6B,W
0955:  BTFSC  03.0
0956:  GOTO   172
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0957:  MOVF   61,W
0958:  ADDWF  6B,W
0959:  MOVWF  04
095A:  MOVF   62,W
095B:  ADDWFC 6C,W
095C:  MOVWF  05
095D:  MOVF   00,W
095E:  MOVLB  0F
095F:  MOVWF  28
0960:  MOVLB  04
0961:  BCF    15.5
0962:  MOVLW  40
0963:  MOVWF  14
0964:  MOVLW  09
0965:  MOVWF  12
0966:  MOVLW  2A
0967:  MOVWF  15
0968:  MOVLB  0F
0969:  MOVF   28,W
096A:  MOVWF  2C
096B:  MOVLB  00
096C:  CALL   126
096D:  MOVLB  0E
096E:  INCF   6B,F
096F:  BTFSC  03.2
0970:  INCF   6C,F
0971:  GOTO   14D
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0972:  MOVLB  0F
0973:  CLRF   23
0974:  CLRF   22
0975:  CLRF   21
0976:  CLRF   20
0977:  MOVF   23,W
0978:  MOVLB  0E
0979:  SUBWF  6A,W
097A:  BTFSS  03.0
097B:  GOTO   1B9
097C:  BTFSS  03.2
097D:  GOTO   196
097E:  MOVLB  0F
097F:  MOVF   22,W
0980:  MOVLB  0E
0981:  SUBWF  69,W
0982:  BTFSS  03.0
0983:  GOTO   1B9
0984:  BTFSS  03.2
0985:  GOTO   196
0986:  MOVLB  0F
0987:  MOVF   21,W
0988:  MOVLB  0E
0989:  SUBWF  68,W
098A:  BTFSS  03.0
098B:  GOTO   1B9
098C:  BTFSS  03.2
098D:  GOTO   196
098E:  MOVF   67,W
098F:  MOVLB  0F
0990:  SUBWF  20,W
0991:  BTFSS  03.0
0992:  GOTO   195
0993:  MOVLB  0E
0994:  GOTO   1B9
0995:  MOVLB  0E
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
0996:  MOVF   65,W
0997:  MOVLB  0F
0998:  ADDWF  20,W
0999:  MOVWF  04
099A:  MOVLB  0E
099B:  MOVF   66,W
099C:  MOVLB  0F
099D:  ADDWFC 21,W
099E:  MOVWF  05
099F:  MOVLB  04
09A0:  BCF    15.5
09A1:  MOVLW  40
09A2:  MOVWF  14
09A3:  MOVLW  09
09A4:  MOVWF  12
09A5:  MOVLW  2A
09A6:  MOVWF  15
09A7:  MOVLW  01
09A8:  MOVLB  0F
09A9:  MOVWF  2C
09AA:  MOVLB  00
09AB:  CALL   126
09AC:  MOVF   77,W
09AD:  MOVWF  00
09AE:  MOVLW  01
09AF:  MOVLB  0F
09B0:  ADDWF  20,F
09B1:  BTFSC  03.0
09B2:  INCF   21,F
09B3:  BTFSC  03.2
09B4:  INCF   22,F
09B5:  BTFSC  03.2
09B6:  INCF   23,F
09B7:  GOTO   177
09B8:  MOVLB  0E
....................          break;
09B9:  GOTO   22C
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
09BA:  MOVLB  0E
09BB:  CLRF   6E
09BC:  CLRF   6D
09BD:  MOVF   6E,W
09BE:  SUBWF  64,W
09BF:  BTFSS  03.0
09C0:  GOTO   1E2
09C1:  BTFSS  03.2
09C2:  GOTO   1C7
09C3:  MOVF   63,W
09C4:  SUBWF  6D,W
09C5:  BTFSC  03.0
09C6:  GOTO   1E2
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
09C7:  MOVF   61,W
09C8:  ADDWF  6D,W
09C9:  MOVWF  04
09CA:  MOVF   62,W
09CB:  ADDWFC 6E,W
09CC:  MOVWF  05
09CD:  MOVF   00,W
09CE:  MOVLB  0F
09CF:  MOVWF  28
09D0:  MOVLB  04
09D1:  BCF    15.5
09D2:  MOVLW  40
09D3:  MOVWF  14
09D4:  MOVLW  09
09D5:  MOVWF  12
09D6:  MOVLW  2A
09D7:  MOVWF  15
09D8:  MOVLB  0F
09D9:  MOVF   28,W
09DA:  MOVWF  2C
09DB:  MOVLB  00
09DC:  CALL   133
09DD:  MOVLB  0E
09DE:  INCF   6D,F
09DF:  BTFSC  03.2
09E0:  INCF   6E,F
09E1:  GOTO   1BD
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
09E2:  MOVLB  0F
09E3:  CLRF   27
09E4:  CLRF   26
09E5:  CLRF   25
09E6:  CLRF   24
09E7:  MOVF   27,W
09E8:  MOVLB  0E
09E9:  SUBWF  6A,W
09EA:  BTFSS  03.0
09EB:  GOTO   229
09EC:  BTFSS  03.2
09ED:  GOTO   206
09EE:  MOVLB  0F
09EF:  MOVF   26,W
09F0:  MOVLB  0E
09F1:  SUBWF  69,W
09F2:  BTFSS  03.0
09F3:  GOTO   229
09F4:  BTFSS  03.2
09F5:  GOTO   206
09F6:  MOVLB  0F
09F7:  MOVF   25,W
09F8:  MOVLB  0E
09F9:  SUBWF  68,W
09FA:  BTFSS  03.0
09FB:  GOTO   229
09FC:  BTFSS  03.2
09FD:  GOTO   206
09FE:  MOVF   67,W
09FF:  MOVLB  0F
0A00:  SUBWF  24,W
0A01:  BTFSS  03.0
0A02:  GOTO   205
0A03:  MOVLB  0E
0A04:  GOTO   229
0A05:  MOVLB  0E
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
0A06:  MOVF   65,W
0A07:  MOVLB  0F
0A08:  ADDWF  24,W
0A09:  MOVWF  04
0A0A:  MOVLB  0E
0A0B:  MOVF   66,W
0A0C:  MOVLB  0F
0A0D:  ADDWFC 25,W
0A0E:  MOVWF  05
0A0F:  MOVLB  04
0A10:  BCF    15.5
0A11:  MOVLW  40
0A12:  MOVWF  14
0A13:  MOVLW  09
0A14:  MOVWF  12
0A15:  MOVLW  2A
0A16:  MOVWF  15
0A17:  MOVLW  02
0A18:  MOVLB  0F
0A19:  MOVWF  2C
0A1A:  MOVLB  00
0A1B:  CALL   133
0A1C:  MOVF   77,W
0A1D:  MOVWF  00
0A1E:  MOVLW  01
0A1F:  MOVLB  0F
0A20:  ADDWF  24,F
0A21:  BTFSC  03.0
0A22:  INCF   25,F
0A23:  BTFSC  03.2
0A24:  INCF   26,F
0A25:  BTFSC  03.2
0A26:  INCF   27,F
0A27:  GOTO   1E7
0A28:  MOVLB  0E
....................          break;
0A29:  GOTO   22C
0A2A:  MOVLB  00
....................    
....................          
....................       default:
....................          break;
0A2B:  MOVLB  0E
....................    }
....................    return;
0A2C:  MOVLB  00
0A2D:  RETURN
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
0E9F:  MOVLB  0E
0EA0:  MOVF   57,W
0EA1:  XORLW  00
0EA2:  MOVLB  00
0EA3:  BTFSC  03.2
0EA4:  GOTO   6A9
0EA5:  XORLW  01
0EA6:  BTFSC  03.2
0EA7:  GOTO   6F0
0EA8:  GOTO   738
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0EA9:  MOVLB  0E
0EAA:  CLRF   62
0EAB:  MOVF   5D,W
0EAC:  SUBWF  62,W
0EAD:  BTFSC  03.0
0EAE:  GOTO   6C8
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
0EAF:  MOVF   62,W
0EB0:  ADDWF  5B,W
0EB1:  MOVWF  04
0EB2:  MOVLW  00
0EB3:  ADDWFC 5C,W
0EB4:  MOVWF  05
0EB5:  MOVF   00,W
0EB6:  MOVWF  68
0EB7:  MOVLB  04
0EB8:  BCF    15.5
0EB9:  MOVLW  40
0EBA:  MOVWF  14
0EBB:  MOVLW  09
0EBC:  MOVWF  12
0EBD:  MOVLW  2A
0EBE:  MOVWF  15
0EBF:  MOVLB  0E
0EC0:  MOVF   68,W
0EC1:  MOVLB  0F
0EC2:  MOVWF  2C
0EC3:  MOVLB  00
0EC4:  CALL   126
0EC5:  MOVLB  0E
0EC6:  INCF   62,F
0EC7:  GOTO   6AB
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0EC8:  CLRF   64
0EC9:  CLRF   63
0ECA:  MOVF   64,W
0ECB:  SUBWF  61,W
0ECC:  BTFSS  03.0
0ECD:  GOTO   6EF
0ECE:  BTFSS  03.2
0ECF:  GOTO   6D4
0ED0:  MOVF   60,W
0ED1:  SUBWF  63,W
0ED2:  BTFSC  03.0
0ED3:  GOTO   6EF
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0ED4:  MOVF   5E,W
0ED5:  ADDWF  63,W
0ED6:  MOVWF  04
0ED7:  MOVF   5F,W
0ED8:  ADDWFC 64,W
0ED9:  MOVWF  05
0EDA:  MOVF   00,W
0EDB:  MOVWF  68
0EDC:  MOVLB  04
0EDD:  BCF    15.5
0EDE:  MOVLW  40
0EDF:  MOVWF  14
0EE0:  MOVLW  09
0EE1:  MOVWF  12
0EE2:  MOVLW  2A
0EE3:  MOVWF  15
0EE4:  MOVLB  0E
0EE5:  MOVF   68,W
0EE6:  MOVLB  0F
0EE7:  MOVWF  2C
0EE8:  MOVLB  00
0EE9:  CALL   126
0EEA:  MOVLB  0E
0EEB:  INCF   63,F
0EEC:  BTFSC  03.2
0EED:  INCF   64,F
0EEE:  GOTO   6CA
....................          break;
0EEF:  GOTO   739
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
0EF0:  MOVLB  0E
0EF1:  CLRF   65
0EF2:  MOVF   5D,W
0EF3:  SUBWF  65,W
0EF4:  BTFSC  03.0
0EF5:  GOTO   70F
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
0EF6:  MOVF   65,W
0EF7:  ADDWF  5B,W
0EF8:  MOVWF  04
0EF9:  MOVLW  00
0EFA:  ADDWFC 5C,W
0EFB:  MOVWF  05
0EFC:  MOVF   00,W
0EFD:  MOVWF  68
0EFE:  MOVLB  04
0EFF:  BCF    15.5
0F00:  MOVLW  40
0F01:  MOVWF  14
0F02:  MOVLW  09
0F03:  MOVWF  12
0F04:  MOVLW  2A
0F05:  MOVWF  15
0F06:  MOVLB  0E
0F07:  MOVF   68,W
0F08:  MOVLB  0F
0F09:  MOVWF  2C
0F0A:  MOVLB  00
0F0B:  CALL   133
0F0C:  MOVLB  0E
0F0D:  INCF   65,F
0F0E:  GOTO   6F2
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0F0F:  CLRF   67
0F10:  CLRF   66
0F11:  MOVF   67,W
0F12:  SUBWF  61,W
0F13:  BTFSS  03.0
0F14:  GOTO   736
0F15:  BTFSS  03.2
0F16:  GOTO   71B
0F17:  MOVF   60,W
0F18:  SUBWF  66,W
0F19:  BTFSC  03.0
0F1A:  GOTO   736
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
0F1B:  MOVF   5E,W
0F1C:  ADDWF  66,W
0F1D:  MOVWF  04
0F1E:  MOVF   5F,W
0F1F:  ADDWFC 67,W
0F20:  MOVWF  05
0F21:  MOVF   00,W
0F22:  MOVWF  68
0F23:  MOVLB  04
0F24:  BCF    15.5
0F25:  MOVLW  40
0F26:  MOVWF  14
0F27:  MOVLW  09
0F28:  MOVWF  12
0F29:  MOVLW  2A
0F2A:  MOVWF  15
0F2B:  MOVLB  0E
0F2C:  MOVF   68,W
0F2D:  MOVLB  0F
0F2E:  MOVWF  2C
0F2F:  MOVLB  00
0F30:  CALL   133
0F31:  MOVLB  0E
0F32:  INCF   66,F
0F33:  BTFSC  03.2
0F34:  INCF   67,F
0F35:  GOTO   711
....................          break;
0F36:  GOTO   739
0F37:  MOVLB  00
....................          
....................       default:
....................          break;
0F38:  MOVLB  0E
....................    }
....................    return;
0F39:  MOVLB  00
0F3A:  RETURN
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0FE0:  MOVLB  0E
0FE1:  MOVF   41,W
0FE2:  MOVWF  5D
0FE3:  MOVLW  01
0FE4:  MOVWF  5E
0FE5:  MOVWF  60
0FE6:  CLRF   5F
0FE7:  MOVLB  00
0FE8:  CALL   104
0FE9:  MOVLB  0E
0FEA:  MOVF   41,W
0FEB:  MOVWF  5D
0FEC:  CLRF   5E
0FED:  CLRF   60
0FEE:  MOVLW  80
0FEF:  MOVWF  5F
0FF0:  MOVLB  00
0FF1:  CALL   104
0FF2:  RETURN
.................... }
.................... #Separate 
.................... int8 status_register(Flash flash_stream){
*
0F3B:  MOVLW  05
0F3C:  MOVLB  0E
0F3D:  MOVWF  5B
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
0F3E:  MOVF   59,W
0F3F:  MOVWF  5D
0F40:  CLRF   5E
0F41:  MOVLW  01
0F42:  MOVWF  60
0F43:  CLRF   5F
0F44:  MOVLB  00
0F45:  CALL   104
0F46:  MOVLB  0E
0F47:  MOVF   59,W
0F48:  MOVWF  5D
0F49:  CLRF   5E
0F4A:  CLRF   60
0F4B:  MOVLW  80
0F4C:  MOVWF  5F
0F4D:  MOVLB  00
0F4E:  CALL   104
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
0F4F:  MOVLB  0E
0F50:  MOVF   5A,W
0F51:  MOVWF  60
0F52:  MOVF   59,W
0F53:  MOVWF  5F
0F54:  MOVF   58,W
0F55:  MOVWF  5E
0F56:  MOVF   57,W
0F57:  MOVWF  5D
0F58:  MOVLW  24
0F59:  MOVWF  62
0F5A:  MOVLW  9B
0F5B:  MOVWF  61
0F5C:  CLRF   64
0F5D:  MOVLW  01
0F5E:  MOVWF  63
0F5F:  MOVLW  24
0F60:  MOVWF  66
0F61:  MOVLW  9C
0F62:  MOVWF  65
0F63:  CLRF   6A
0F64:  CLRF   69
0F65:  CLRF   68
0F66:  MOVLW  01
0F67:  MOVWF  67
0F68:  MOVLB  00
0F69:  CALL   140
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
0F6A:  MOVLB  0E
0F6B:  MOVF   59,W
0F6C:  MOVWF  5D
0F6D:  MOVLW  01
0F6E:  MOVWF  5E
0F6F:  MOVWF  60
0F70:  CLRF   5F
0F71:  MOVLB  00
0F72:  CALL   104
0F73:  MOVLB  0E
0F74:  MOVF   59,W
0F75:  MOVWF  5D
0F76:  CLRF   5E
0F77:  CLRF   60
0F78:  MOVLW  80
0F79:  MOVWF  5F
0F7A:  MOVLB  00
0F7B:  CALL   104
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
0F7C:  MOVLB  0E
0F7D:  MOVF   5C,W
0F7E:  MOVWF  78
0F7F:  MOVLB  00
0F80:  RETURN
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... #Separate 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... #Separate 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1A2A:  MOVLB  0B
1A2B:  MOVF   2F,F
1A2C:  BTFSS  03.2
1A2D:  GOTO   2E5
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1A2E:  MOVLW  06
1A2F:  MOVWF  36
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
1A30:  MOVLW  D8
1A31:  MOVWF  37
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1A32:  MOVF   34,W
1A33:  MOVWF  44
1A34:  MOVF   35,W
1A35:  MOVWF  45
1A36:  CLRF   46
1A37:  CLRF   47
1A38:  CLRF   78
1A39:  CLRF   79
1A3A:  CLRF   7A
1A3B:  MOVF   44,W
1A3C:  MOVWF  38
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1A3D:  MOVF   33,W
1A3E:  MOVWF  44
1A3F:  MOVF   34,W
1A40:  MOVWF  45
1A41:  MOVF   35,W
1A42:  MOVWF  46
1A43:  CLRF   47
1A44:  CLRF   78
1A45:  CLRF   79
1A46:  CLRF   7A
1A47:  MOVF   44,W
1A48:  MOVWF  39
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1A49:  CLRF   78
1A4A:  CLRF   79
1A4B:  CLRF   7A
1A4C:  MOVF   32,W
1A4D:  MOVWF  3A
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1A4E:  MOVF   30,W
1A4F:  MOVLB  0E
1A50:  MOVWF  5D
1A51:  CLRF   5E
1A52:  MOVLW  01
1A53:  MOVWF  60
1A54:  CLRF   5F
1A55:  MOVLP  08
1A56:  MOVLB  00
1A57:  CALL   104
1A58:  MOVLP  18
1A59:  MOVLB  0B
1A5A:  MOVF   30,W
1A5B:  MOVLB  0E
1A5C:  MOVWF  5D
1A5D:  CLRF   5E
1A5E:  CLRF   60
1A5F:  MOVLW  80
1A60:  MOVWF  5F
1A61:  MOVLP  08
1A62:  MOVLB  00
1A63:  CALL   104
1A64:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1A65:  MOVLB  0B
1A66:  MOVF   31,W
1A67:  MOVLB  0E
1A68:  MOVWF  5A
1A69:  MOVLB  0B
1A6A:  MOVF   30,W
1A6B:  MOVLB  0E
1A6C:  MOVWF  59
1A6D:  MOVLB  0B
1A6E:  MOVF   2F,W
1A6F:  MOVLB  0E
1A70:  MOVWF  58
1A71:  MOVLB  0B
1A72:  MOVF   2E,W
1A73:  MOVLB  0E
1A74:  MOVWF  57
1A75:  MOVLW  23
1A76:  MOVWF  5C
1A77:  MOVLW  86
1A78:  MOVWF  5B
1A79:  CLRF   5E
1A7A:  MOVLW  01
1A7B:  MOVWF  5D
1A7C:  MOVLP  08
1A7D:  MOVLB  00
1A7E:  CALL   63F
1A7F:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1A80:  MOVLB  0B
1A81:  MOVF   30,W
1A82:  MOVLB  0E
1A83:  MOVWF  5D
1A84:  MOVLW  01
1A85:  MOVWF  5E
1A86:  MOVWF  60
1A87:  CLRF   5F
1A88:  MOVLP  08
1A89:  MOVLB  00
1A8A:  CALL   104
1A8B:  MOVLP  18
1A8C:  MOVLB  0B
1A8D:  MOVF   30,W
1A8E:  MOVLB  0E
1A8F:  MOVWF  5D
1A90:  CLRF   5E
1A91:  CLRF   60
1A92:  MOVLW  80
1A93:  MOVWF  5F
1A94:  MOVLP  08
1A95:  MOVLB  00
1A96:  CALL   104
1A97:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1A98:  MOVLB  0B
1A99:  MOVF   30,W
1A9A:  MOVLB  0E
1A9B:  MOVWF  5D
1A9C:  CLRF   5E
1A9D:  MOVLW  01
1A9E:  MOVWF  60
1A9F:  CLRF   5F
1AA0:  MOVLP  08
1AA1:  MOVLB  00
1AA2:  CALL   104
1AA3:  MOVLP  18
1AA4:  MOVLB  0B
1AA5:  MOVF   30,W
1AA6:  MOVLB  0E
1AA7:  MOVWF  5D
1AA8:  CLRF   5E
1AA9:  CLRF   60
1AAA:  MOVLW  80
1AAB:  MOVWF  5F
1AAC:  MOVLP  08
1AAD:  MOVLB  00
1AAE:  CALL   104
1AAF:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1AB0:  MOVLB  0B
1AB1:  MOVF   31,W
1AB2:  MOVLB  0E
1AB3:  MOVWF  5A
1AB4:  MOVLB  0B
1AB5:  MOVF   30,W
1AB6:  MOVLB  0E
1AB7:  MOVWF  59
1AB8:  MOVLB  0B
1AB9:  MOVF   2F,W
1ABA:  MOVLB  0E
1ABB:  MOVWF  58
1ABC:  MOVLB  0B
1ABD:  MOVF   2E,W
1ABE:  MOVLB  0E
1ABF:  MOVWF  57
1AC0:  MOVLW  23
1AC1:  MOVWF  5C
1AC2:  MOVLW  87
1AC3:  MOVWF  5B
1AC4:  CLRF   5E
1AC5:  MOVLW  04
1AC6:  MOVWF  5D
1AC7:  MOVLP  08
1AC8:  MOVLB  00
1AC9:  CALL   63F
1ACA:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1ACB:  MOVLB  0B
1ACC:  MOVF   30,W
1ACD:  MOVLB  0E
1ACE:  MOVWF  5D
1ACF:  MOVLW  01
1AD0:  MOVWF  5E
1AD1:  MOVWF  60
1AD2:  CLRF   5F
1AD3:  MOVLP  08
1AD4:  MOVLB  00
1AD5:  CALL   104
1AD6:  MOVLP  18
1AD7:  MOVLB  0B
1AD8:  MOVF   30,W
1AD9:  MOVLB  0E
1ADA:  MOVWF  5D
1ADB:  CLRF   5E
1ADC:  CLRF   60
1ADD:  MOVLW  80
1ADE:  MOVWF  5F
1ADF:  MOVLP  08
1AE0:  MOVLB  00
1AE1:  CALL   104
1AE2:  MOVLP  18
....................    }
1AE3:  GOTO   3A6
1AE4:  MOVLB  0B
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
1AE5:  DECFSZ 2F,W
1AE6:  GOTO   3A7
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
1AE7:  MOVLW  06
1AE8:  MOVWF  3B
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
1AE9:  MOVLW  DC
1AEA:  MOVWF  3C
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1AEB:  MOVF   35,W
1AEC:  MOVWF  44
1AED:  CLRF   45
1AEE:  CLRF   46
1AEF:  CLRF   47
1AF0:  CLRF   78
1AF1:  CLRF   79
1AF2:  CLRF   7A
1AF3:  MOVF   44,W
1AF4:  MOVWF  3D
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1AF5:  MOVF   34,W
1AF6:  MOVWF  44
1AF7:  MOVF   35,W
1AF8:  MOVWF  45
1AF9:  CLRF   46
1AFA:  CLRF   47
1AFB:  CLRF   78
1AFC:  CLRF   79
1AFD:  CLRF   7A
1AFE:  MOVF   44,W
1AFF:  MOVWF  3E
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1B00:  MOVF   33,W
1B01:  MOVWF  44
1B02:  MOVF   34,W
1B03:  MOVWF  45
1B04:  MOVF   35,W
1B05:  MOVWF  46
1B06:  CLRF   47
1B07:  CLRF   78
1B08:  CLRF   79
1B09:  CLRF   7A
1B0A:  MOVF   44,W
1B0B:  MOVWF  3F
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
1B0C:  CLRF   78
1B0D:  CLRF   79
1B0E:  CLRF   7A
1B0F:  MOVF   32,W
1B10:  MOVWF  40
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1B11:  MOVF   30,W
1B12:  MOVLB  0E
1B13:  MOVWF  5D
1B14:  CLRF   5E
1B15:  MOVLW  01
1B16:  MOVWF  60
1B17:  CLRF   5F
1B18:  MOVLP  08
1B19:  MOVLB  00
1B1A:  CALL   104
1B1B:  MOVLP  18
1B1C:  MOVLB  0B
1B1D:  MOVF   30,W
1B1E:  MOVLB  0E
1B1F:  MOVWF  5D
1B20:  CLRF   5E
1B21:  CLRF   60
1B22:  MOVLW  80
1B23:  MOVWF  5F
1B24:  MOVLP  08
1B25:  MOVLB  00
1B26:  CALL   104
1B27:  MOVLP  18
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1B28:  MOVLB  0B
1B29:  MOVF   31,W
1B2A:  MOVLB  0E
1B2B:  MOVWF  5A
1B2C:  MOVLB  0B
1B2D:  MOVF   30,W
1B2E:  MOVLB  0E
1B2F:  MOVWF  59
1B30:  MOVLB  0B
1B31:  MOVF   2F,W
1B32:  MOVLB  0E
1B33:  MOVWF  58
1B34:  MOVLB  0B
1B35:  MOVF   2E,W
1B36:  MOVLB  0E
1B37:  MOVWF  57
1B38:  MOVLW  23
1B39:  MOVWF  5C
1B3A:  MOVLW  8B
1B3B:  MOVWF  5B
1B3C:  CLRF   5E
1B3D:  MOVLW  01
1B3E:  MOVWF  5D
1B3F:  MOVLP  08
1B40:  MOVLB  00
1B41:  CALL   63F
1B42:  MOVLP  18
....................       output_high(flash_stream.cs_pin);
1B43:  MOVLB  0B
1B44:  MOVF   30,W
1B45:  MOVLB  0E
1B46:  MOVWF  5D
1B47:  MOVLW  01
1B48:  MOVWF  5E
1B49:  MOVWF  60
1B4A:  CLRF   5F
1B4B:  MOVLP  08
1B4C:  MOVLB  00
1B4D:  CALL   104
1B4E:  MOVLP  18
1B4F:  MOVLB  0B
1B50:  MOVF   30,W
1B51:  MOVLB  0E
1B52:  MOVWF  5D
1B53:  CLRF   5E
1B54:  CLRF   60
1B55:  MOVLW  80
1B56:  MOVWF  5F
1B57:  MOVLP  08
1B58:  MOVLB  00
1B59:  CALL   104
1B5A:  MOVLP  18
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1B5B:  MOVLB  0B
1B5C:  MOVF   30,W
1B5D:  MOVLB  0E
1B5E:  MOVWF  5D
1B5F:  CLRF   5E
1B60:  MOVLW  01
1B61:  MOVWF  60
1B62:  CLRF   5F
1B63:  MOVLP  08
1B64:  MOVLB  00
1B65:  CALL   104
1B66:  MOVLP  18
1B67:  MOVLB  0B
1B68:  MOVF   30,W
1B69:  MOVLB  0E
1B6A:  MOVWF  5D
1B6B:  CLRF   5E
1B6C:  CLRF   60
1B6D:  MOVLW  80
1B6E:  MOVWF  5F
1B6F:  MOVLP  08
1B70:  MOVLB  00
1B71:  CALL   104
1B72:  MOVLP  18
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
1B73:  MOVLB  0B
1B74:  MOVF   31,W
1B75:  MOVLB  0E
1B76:  MOVWF  5A
1B77:  MOVLB  0B
1B78:  MOVF   30,W
1B79:  MOVLB  0E
1B7A:  MOVWF  59
1B7B:  MOVLB  0B
1B7C:  MOVF   2F,W
1B7D:  MOVLB  0E
1B7E:  MOVWF  58
1B7F:  MOVLB  0B
1B80:  MOVF   2E,W
1B81:  MOVLB  0E
1B82:  MOVWF  57
1B83:  MOVLW  23
1B84:  MOVWF  5C
1B85:  MOVLW  8C
1B86:  MOVWF  5B
1B87:  CLRF   5E
1B88:  MOVLW  05
1B89:  MOVWF  5D
1B8A:  MOVLP  08
1B8B:  MOVLB  00
1B8C:  CALL   63F
1B8D:  MOVLP  18
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1B8E:  MOVLB  0B
1B8F:  MOVF   30,W
1B90:  MOVLB  0E
1B91:  MOVWF  5D
1B92:  MOVLW  01
1B93:  MOVWF  5E
1B94:  MOVWF  60
1B95:  CLRF   5F
1B96:  MOVLP  08
1B97:  MOVLB  00
1B98:  CALL   104
1B99:  MOVLP  18
1B9A:  MOVLB  0B
1B9B:  MOVF   30,W
1B9C:  MOVLB  0E
1B9D:  MOVWF  5D
1B9E:  CLRF   5E
1B9F:  CLRF   60
1BA0:  MOVLW  80
1BA1:  MOVWF  5F
1BA2:  MOVLP  08
1BA3:  MOVLB  00
1BA4:  CALL   104
1BA5:  MOVLP  18
....................    }
1BA6:  MOVLB  0B
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1BA7:  CLRF   41
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
1BA8:  MOVF   31,W
1BA9:  MOVLB  0E
1BAA:  MOVWF  5A
1BAB:  MOVLB  0B
1BAC:  MOVF   30,W
1BAD:  MOVLB  0E
1BAE:  MOVWF  59
1BAF:  MOVLB  0B
1BB0:  MOVF   2F,W
1BB1:  MOVLB  0E
1BB2:  MOVWF  58
1BB3:  MOVLB  0B
1BB4:  MOVF   2E,W
1BB5:  MOVLB  0E
1BB6:  MOVWF  57
1BB7:  MOVLP  08
1BB8:  MOVLB  00
1BB9:  CALL   73B
1BBA:  MOVLP  18
1BBB:  MOVF   78,W
1BBC:  ANDLW  01
1BBD:  SUBLW  01
1BBE:  BTFSS  03.2
1BBF:  GOTO   3DF
....................       if(timeout_counter > 10)
1BC0:  MOVLB  0B
1BC1:  MOVF   41,W
1BC2:  SUBLW  0A
1BC3:  BTFSC  03.0
1BC4:  GOTO   3CE
....................          delay_ms(200);
1BC5:  MOVLW  C8
1BC6:  MOVLB  0E
1BC7:  MOVWF  57
1BC8:  MOVLP  08
1BC9:  MOVLB  00
1BCA:  CALL   781
1BCB:  MOVLP  18
1BCC:  GOTO   3D5
1BCD:  MOVLB  0B
....................       else
....................          delay_ms(10);   
1BCE:  MOVLW  0A
1BCF:  MOVLB  0E
1BD0:  MOVWF  57
1BD1:  MOVLP  08
1BD2:  MOVLB  00
1BD3:  CALL   781
1BD4:  MOVLP  18
....................       
....................       if(timeout_counter > 100){
1BD5:  MOVLB  0B
1BD6:  MOVF   41,W
1BD7:  SUBLW  64
1BD8:  BTFSC  03.0
1BD9:  GOTO   3DD
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1BDA:  MOVLB  00
1BDB:  GOTO   3DF
1BDC:  MOVLB  0B
....................       }  
....................       timeout_counter++;
1BDD:  INCF   41,F
1BDE:  GOTO   3A8
1BDF:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
1BE0:  RETURN
.................... }
.................... #Separate 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... #Separate 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
119A:  MOVLB  0D
119B:  MOVF   35,F
119C:  BTFSS  03.2
119D:  GOTO   24B
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
119E:  MOVLW  06
119F:  MOVWF  3C
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
11A0:  MOVLW  20
11A1:  MOVWF  3D
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
11A2:  CLRF   4B
11A3:  CLRF   4C
11A4:  CLRF   78
11A5:  CLRF   79
11A6:  CLRF   7A
11A7:  MOVF   3A,W
11A8:  MOVWF  3E
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
11A9:  CLRF   4C
11AA:  CLRF   78
11AB:  CLRF   79
11AC:  CLRF   7A
11AD:  MOVF   39,W
11AE:  MOVWF  3F
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
11AF:  CLRF   78
11B0:  CLRF   79
11B1:  CLRF   7A
11B2:  MOVF   38,W
11B3:  MOVWF  40
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
11B4:  MOVF   36,W
11B5:  MOVLB  0E
11B6:  MOVWF  5D
11B7:  CLRF   5E
11B8:  MOVLW  01
11B9:  MOVWF  60
11BA:  CLRF   5F
11BB:  MOVLP  08
11BC:  MOVLB  00
11BD:  CALL   104
11BE:  MOVLP  10
11BF:  MOVLB  0D
11C0:  MOVF   36,W
11C1:  MOVLB  0E
11C2:  MOVWF  5D
11C3:  CLRF   5E
11C4:  CLRF   60
11C5:  MOVLW  80
11C6:  MOVWF  5F
11C7:  MOVLP  08
11C8:  MOVLB  00
11C9:  CALL   104
11CA:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
11CB:  MOVLB  0D
11CC:  MOVF   37,W
11CD:  MOVLB  0E
11CE:  MOVWF  5A
11CF:  MOVLB  0D
11D0:  MOVF   36,W
11D1:  MOVLB  0E
11D2:  MOVWF  59
11D3:  MOVLB  0D
11D4:  MOVF   35,W
11D5:  MOVLB  0E
11D6:  MOVWF  58
11D7:  MOVLB  0D
11D8:  MOVF   34,W
11D9:  MOVLB  0E
11DA:  MOVWF  57
11DB:  MOVLW  24
11DC:  MOVWF  5C
11DD:  MOVLW  2C
11DE:  MOVWF  5B
11DF:  CLRF   5E
11E0:  MOVLW  01
11E1:  MOVWF  5D
11E2:  MOVLP  08
11E3:  MOVLB  00
11E4:  CALL   63F
11E5:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
11E6:  MOVLB  0D
11E7:  MOVF   36,W
11E8:  MOVLB  0E
11E9:  MOVWF  5D
11EA:  MOVLW  01
11EB:  MOVWF  5E
11EC:  MOVWF  60
11ED:  CLRF   5F
11EE:  MOVLP  08
11EF:  MOVLB  00
11F0:  CALL   104
11F1:  MOVLP  10
11F2:  MOVLB  0D
11F3:  MOVF   36,W
11F4:  MOVLB  0E
11F5:  MOVWF  5D
11F6:  CLRF   5E
11F7:  CLRF   60
11F8:  MOVLW  80
11F9:  MOVWF  5F
11FA:  MOVLP  08
11FB:  MOVLB  00
11FC:  CALL   104
11FD:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
11FE:  MOVLB  0D
11FF:  MOVF   36,W
1200:  MOVLB  0E
1201:  MOVWF  5D
1202:  CLRF   5E
1203:  MOVLW  01
1204:  MOVWF  60
1205:  CLRF   5F
1206:  MOVLP  08
1207:  MOVLB  00
1208:  CALL   104
1209:  MOVLP  10
120A:  MOVLB  0D
120B:  MOVF   36,W
120C:  MOVLB  0E
120D:  MOVWF  5D
120E:  CLRF   5E
120F:  CLRF   60
1210:  MOVLW  80
1211:  MOVWF  5F
1212:  MOVLP  08
1213:  MOVLB  00
1214:  CALL   104
1215:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
1216:  MOVLB  0D
1217:  MOVF   37,W
1218:  MOVLB  0E
1219:  MOVWF  5A
121A:  MOVLB  0D
121B:  MOVF   36,W
121C:  MOVLB  0E
121D:  MOVWF  59
121E:  MOVLB  0D
121F:  MOVF   35,W
1220:  MOVLB  0E
1221:  MOVWF  58
1222:  MOVLB  0D
1223:  MOVF   34,W
1224:  MOVLB  0E
1225:  MOVWF  57
1226:  MOVLW  24
1227:  MOVWF  5C
1228:  MOVLW  2D
1229:  MOVWF  5B
122A:  CLRF   5E
122B:  MOVLW  04
122C:  MOVWF  5D
122D:  MOVLP  08
122E:  MOVLB  00
122F:  CALL   63F
1230:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1231:  MOVLB  0D
1232:  MOVF   36,W
1233:  MOVLB  0E
1234:  MOVWF  5D
1235:  MOVLW  01
1236:  MOVWF  5E
1237:  MOVWF  60
1238:  CLRF   5F
1239:  MOVLP  08
123A:  MOVLB  00
123B:  CALL   104
123C:  MOVLP  10
123D:  MOVLB  0D
123E:  MOVF   36,W
123F:  MOVLB  0E
1240:  MOVWF  5D
1241:  CLRF   5E
1242:  CLRF   60
1243:  MOVLW  80
1244:  MOVWF  5F
1245:  MOVLP  08
1246:  MOVLB  00
1247:  CALL   104
1248:  MOVLP  10
....................    }
1249:  GOTO   300
124A:  MOVLB  0D
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
124B:  DECFSZ 35,W
124C:  GOTO   301
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
124D:  MOVLW  06
124E:  MOVWF  41
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
124F:  MOVLW  21
1250:  MOVWF  42
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
1251:  CLRF   4A
1252:  CLRF   4B
1253:  CLRF   4C
1254:  CLRF   78
1255:  CLRF   79
1256:  CLRF   7A
1257:  MOVF   3B,W
1258:  MOVWF  43
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1259:  CLRF   4B
125A:  CLRF   4C
125B:  CLRF   78
125C:  CLRF   79
125D:  CLRF   7A
125E:  MOVF   3A,W
125F:  MOVWF  44
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1260:  CLRF   4C
1261:  CLRF   78
1262:  CLRF   79
1263:  CLRF   7A
1264:  MOVF   39,W
1265:  MOVWF  45
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
1266:  CLRF   78
1267:  CLRF   79
1268:  CLRF   7A
1269:  MOVF   38,W
126A:  MOVWF  46
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
126B:  MOVF   36,W
126C:  MOVLB  0E
126D:  MOVWF  5D
126E:  CLRF   5E
126F:  MOVLW  01
1270:  MOVWF  60
1271:  CLRF   5F
1272:  MOVLP  08
1273:  MOVLB  00
1274:  CALL   104
1275:  MOVLP  10
1276:  MOVLB  0D
1277:  MOVF   36,W
1278:  MOVLB  0E
1279:  MOVWF  5D
127A:  CLRF   5E
127B:  CLRF   60
127C:  MOVLW  80
127D:  MOVWF  5F
127E:  MOVLP  08
127F:  MOVLB  00
1280:  CALL   104
1281:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1282:  MOVLB  0D
1283:  MOVF   37,W
1284:  MOVLB  0E
1285:  MOVWF  5A
1286:  MOVLB  0D
1287:  MOVF   36,W
1288:  MOVLB  0E
1289:  MOVWF  59
128A:  MOVLB  0D
128B:  MOVF   35,W
128C:  MOVLB  0E
128D:  MOVWF  58
128E:  MOVLB  0D
128F:  MOVF   34,W
1290:  MOVLB  0E
1291:  MOVWF  57
1292:  MOVLW  24
1293:  MOVWF  5C
1294:  MOVLW  31
1295:  MOVWF  5B
1296:  CLRF   5E
1297:  MOVLW  01
1298:  MOVWF  5D
1299:  MOVLP  08
129A:  MOVLB  00
129B:  CALL   63F
129C:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
129D:  MOVLB  0D
129E:  MOVF   36,W
129F:  MOVLB  0E
12A0:  MOVWF  5D
12A1:  MOVLW  01
12A2:  MOVWF  5E
12A3:  MOVWF  60
12A4:  CLRF   5F
12A5:  MOVLP  08
12A6:  MOVLB  00
12A7:  CALL   104
12A8:  MOVLP  10
12A9:  MOVLB  0D
12AA:  MOVF   36,W
12AB:  MOVLB  0E
12AC:  MOVWF  5D
12AD:  CLRF   5E
12AE:  CLRF   60
12AF:  MOVLW  80
12B0:  MOVWF  5F
12B1:  MOVLP  08
12B2:  MOVLB  00
12B3:  CALL   104
12B4:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
12B5:  MOVLB  0D
12B6:  MOVF   36,W
12B7:  MOVLB  0E
12B8:  MOVWF  5D
12B9:  CLRF   5E
12BA:  MOVLW  01
12BB:  MOVWF  60
12BC:  CLRF   5F
12BD:  MOVLP  08
12BE:  MOVLB  00
12BF:  CALL   104
12C0:  MOVLP  10
12C1:  MOVLB  0D
12C2:  MOVF   36,W
12C3:  MOVLB  0E
12C4:  MOVWF  5D
12C5:  CLRF   5E
12C6:  CLRF   60
12C7:  MOVLW  80
12C8:  MOVWF  5F
12C9:  MOVLP  08
12CA:  MOVLB  00
12CB:  CALL   104
12CC:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
12CD:  MOVLB  0D
12CE:  MOVF   37,W
12CF:  MOVLB  0E
12D0:  MOVWF  5A
12D1:  MOVLB  0D
12D2:  MOVF   36,W
12D3:  MOVLB  0E
12D4:  MOVWF  59
12D5:  MOVLB  0D
12D6:  MOVF   35,W
12D7:  MOVLB  0E
12D8:  MOVWF  58
12D9:  MOVLB  0D
12DA:  MOVF   34,W
12DB:  MOVLB  0E
12DC:  MOVWF  57
12DD:  MOVLW  24
12DE:  MOVWF  5C
12DF:  MOVLW  32
12E0:  MOVWF  5B
12E1:  CLRF   5E
12E2:  MOVLW  05
12E3:  MOVWF  5D
12E4:  MOVLP  08
12E5:  MOVLB  00
12E6:  CALL   63F
12E7:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
12E8:  MOVLB  0D
12E9:  MOVF   36,W
12EA:  MOVLB  0E
12EB:  MOVWF  5D
12EC:  MOVLW  01
12ED:  MOVWF  5E
12EE:  MOVWF  60
12EF:  CLRF   5F
12F0:  MOVLP  08
12F1:  MOVLB  00
12F2:  CALL   104
12F3:  MOVLP  10
12F4:  MOVLB  0D
12F5:  MOVF   36,W
12F6:  MOVLB  0E
12F7:  MOVWF  5D
12F8:  CLRF   5E
12F9:  CLRF   60
12FA:  MOVLW  80
12FB:  MOVWF  5F
12FC:  MOVLP  08
12FD:  MOVLB  00
12FE:  CALL   104
12FF:  MOVLP  10
....................    }
1300:  MOVLB  0D
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1301:  CLRF   47
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
1302:  MOVF   37,W
1303:  MOVLB  0E
1304:  MOVWF  5A
1305:  MOVLB  0D
1306:  MOVF   36,W
1307:  MOVLB  0E
1308:  MOVWF  59
1309:  MOVLB  0D
130A:  MOVF   35,W
130B:  MOVLB  0E
130C:  MOVWF  58
130D:  MOVLB  0D
130E:  MOVF   34,W
130F:  MOVLB  0E
1310:  MOVWF  57
1311:  MOVLP  08
1312:  MOVLB  00
1313:  CALL   73B
1314:  MOVLP  10
1315:  MOVF   78,W
1316:  ANDLW  01
1317:  SUBLW  01
1318:  BTFSS  03.2
1319:  GOTO   339
....................       if(timeout_counter > 10)
131A:  MOVLB  0D
131B:  MOVF   47,W
131C:  SUBLW  0A
131D:  BTFSC  03.0
131E:  GOTO   328
....................          delay_ms(200);
131F:  MOVLW  C8
1320:  MOVLB  0E
1321:  MOVWF  57
1322:  MOVLP  08
1323:  MOVLB  00
1324:  CALL   781
1325:  MOVLP  10
1326:  GOTO   32F
1327:  MOVLB  0D
....................       else
....................          delay_ms(10);   
1328:  MOVLW  0A
1329:  MOVLB  0E
132A:  MOVWF  57
132B:  MOVLP  08
132C:  MOVLB  00
132D:  CALL   781
132E:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
132F:  MOVLB  0D
1330:  MOVF   47,W
1331:  SUBLW  64
1332:  BTFSC  03.0
1333:  GOTO   337
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1334:  MOVLB  00
1335:  GOTO   339
1336:  MOVLB  0D
....................       }  
....................       timeout_counter++;
1337:  INCF   47,F
1338:  GOTO   302
1339:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
133A:  RETURN
.................... }
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
2AB3:  MOVLB  0C
2AB4:  MOVF   6A,F
2AB5:  BTFSS  03.2
2AB6:  GOTO   327
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
2AB7:  MOVLW  03
2AB8:  MOVLB  0D
2AB9:  MOVWF  24
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2ABA:  CLRF   32
2ABB:  CLRF   33
2ABC:  CLRF   78
2ABD:  CLRF   79
2ABE:  CLRF   7A
2ABF:  MOVF   22,W
2AC0:  MOVWF  25
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2AC1:  CLRF   33
2AC2:  CLRF   78
2AC3:  CLRF   79
2AC4:  CLRF   7A
2AC5:  MOVF   21,W
2AC6:  MOVWF  26
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2AC7:  CLRF   78
2AC8:  CLRF   79
2AC9:  CLRF   7A
2ACA:  MOVF   20,W
2ACB:  MOVWF  27
....................             
....................       output_low(flash_stream.cs_pin);
2ACC:  MOVLB  0C
2ACD:  MOVF   6B,W
2ACE:  MOVLB  0E
2ACF:  MOVWF  5D
2AD0:  CLRF   5E
2AD1:  MOVLW  01
2AD2:  MOVWF  60
2AD3:  CLRF   5F
2AD4:  MOVLP  08
2AD5:  MOVLB  00
2AD6:  CALL   104
2AD7:  MOVLP  28
2AD8:  MOVLB  0C
2AD9:  MOVF   6B,W
2ADA:  MOVLB  0E
2ADB:  MOVWF  5D
2ADC:  CLRF   5E
2ADD:  CLRF   60
2ADE:  MOVLW  80
2ADF:  MOVWF  5F
2AE0:  MOVLP  08
2AE1:  MOVLB  00
2AE2:  CALL   104
2AE3:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
2AE4:  MOVLB  0C
2AE5:  MOVF   6C,W
2AE6:  MOVLB  0E
2AE7:  MOVWF  60
2AE8:  MOVLB  0C
2AE9:  MOVF   6B,W
2AEA:  MOVLB  0E
2AEB:  MOVWF  5F
2AEC:  MOVLB  0C
2AED:  MOVF   6A,W
2AEE:  MOVLB  0E
2AEF:  MOVWF  5E
2AF0:  MOVLB  0C
2AF1:  MOVF   69,W
2AF2:  MOVLB  0E
2AF3:  MOVWF  5D
2AF4:  MOVLW  24
2AF5:  MOVWF  62
2AF6:  MOVLW  14
2AF7:  MOVWF  61
2AF8:  CLRF   64
2AF9:  MOVLW  04
2AFA:  MOVWF  63
2AFB:  MOVLW  24
2AFC:  MOVWF  66
2AFD:  MOVLW  0D
2AFE:  MOVWF  65
2AFF:  CLRF   6A
2B00:  CLRF   69
2B01:  CLRF   68
2B02:  MOVLW  01
2B03:  MOVWF  67
2B04:  MOVLP  08
2B05:  MOVLB  00
2B06:  CALL   140
2B07:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2B08:  MOVLW  02
2B09:  MOVWF  77
2B0A:  DECFSZ 77,F
2B0B:  GOTO   30A
2B0C:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2B0D:  MOVLB  0C
2B0E:  MOVF   6B,W
2B0F:  MOVLB  0E
2B10:  MOVWF  5D
2B11:  MOVLW  01
2B12:  MOVWF  5E
2B13:  MOVWF  60
2B14:  CLRF   5F
2B15:  MOVLP  08
2B16:  MOVLB  00
2B17:  CALL   104
2B18:  MOVLP  28
2B19:  MOVLB  0C
2B1A:  MOVF   6B,W
2B1B:  MOVLB  0E
2B1C:  MOVWF  5D
2B1D:  CLRF   5E
2B1E:  CLRF   60
2B1F:  MOVLW  80
2B20:  MOVWF  5F
2B21:  MOVLP  08
2B22:  MOVLB  00
2B23:  CALL   104
2B24:  MOVLP  28
....................    }
2B25:  GOTO   39F
2B26:  MOVLB  0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
2B27:  DECFSZ 6A,W
2B28:  GOTO   3A0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
2B29:  MOVLW  13
2B2A:  MOVLB  0D
2B2B:  MOVWF  28
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
2B2C:  CLRF   31
2B2D:  CLRF   32
2B2E:  CLRF   33
2B2F:  CLRF   78
2B30:  CLRF   79
2B31:  CLRF   7A
2B32:  MOVF   23,W
2B33:  MOVWF  29
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
2B34:  CLRF   32
2B35:  CLRF   33
2B36:  CLRF   78
2B37:  CLRF   79
2B38:  CLRF   7A
2B39:  MOVF   22,W
2B3A:  MOVWF  2A
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
2B3B:  CLRF   33
2B3C:  CLRF   78
2B3D:  CLRF   79
2B3E:  CLRF   7A
2B3F:  MOVF   21,W
2B40:  MOVWF  2B
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
2B41:  CLRF   78
2B42:  CLRF   79
2B43:  CLRF   7A
2B44:  MOVF   20,W
2B45:  MOVWF  2C
....................    
....................       output_low(flash_stream.cs_pin);
2B46:  MOVLB  0C
2B47:  MOVF   6B,W
2B48:  MOVLB  0E
2B49:  MOVWF  5D
2B4A:  CLRF   5E
2B4B:  MOVLW  01
2B4C:  MOVWF  60
2B4D:  CLRF   5F
2B4E:  MOVLP  08
2B4F:  MOVLB  00
2B50:  CALL   104
2B51:  MOVLP  28
2B52:  MOVLB  0C
2B53:  MOVF   6B,W
2B54:  MOVLB  0E
2B55:  MOVWF  5D
2B56:  CLRF   5E
2B57:  CLRF   60
2B58:  MOVLW  80
2B59:  MOVWF  5F
2B5A:  MOVLP  08
2B5B:  MOVLB  00
2B5C:  CALL   104
2B5D:  MOVLP  28
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
2B5E:  MOVLB  0C
2B5F:  MOVF   6C,W
2B60:  MOVLB  0E
2B61:  MOVWF  60
2B62:  MOVLB  0C
2B63:  MOVF   6B,W
2B64:  MOVLB  0E
2B65:  MOVWF  5F
2B66:  MOVLB  0C
2B67:  MOVF   6A,W
2B68:  MOVLB  0E
2B69:  MOVWF  5E
2B6A:  MOVLB  0C
2B6B:  MOVF   69,W
2B6C:  MOVLB  0E
2B6D:  MOVWF  5D
2B6E:  MOVLW  24
2B6F:  MOVWF  62
2B70:  MOVLW  18
2B71:  MOVWF  61
2B72:  CLRF   64
2B73:  MOVLW  05
2B74:  MOVWF  63
2B75:  MOVLW  24
2B76:  MOVWF  66
2B77:  MOVLW  0D
2B78:  MOVWF  65
2B79:  CLRF   6A
2B7A:  CLRF   69
2B7B:  CLRF   68
2B7C:  MOVLW  01
2B7D:  MOVWF  67
2B7E:  MOVLP  08
2B7F:  MOVLB  00
2B80:  CALL   140
2B81:  MOVLP  28
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
2B82:  MOVLW  02
2B83:  MOVWF  77
2B84:  DECFSZ 77,F
2B85:  GOTO   384
2B86:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
2B87:  MOVLB  0C
2B88:  MOVF   6B,W
2B89:  MOVLB  0E
2B8A:  MOVWF  5D
2B8B:  MOVLW  01
2B8C:  MOVWF  5E
2B8D:  MOVWF  60
2B8E:  CLRF   5F
2B8F:  MOVLP  08
2B90:  MOVLB  00
2B91:  CALL   104
2B92:  MOVLP  28
2B93:  MOVLB  0C
2B94:  MOVF   6B,W
2B95:  MOVLB  0E
2B96:  MOVWF  5D
2B97:  CLRF   5E
2B98:  CLRF   60
2B99:  MOVLW  80
2B9A:  MOVWF  5F
2B9B:  MOVLP  08
2B9C:  MOVLB  00
2B9D:  CALL   104
2B9E:  MOVLP  28
2B9F:  MOVLB  0C
....................    }
....................    return read_data;
2BA0:  MOVF   6D,W
2BA1:  MOVWF  78
2BA2:  MOVLP  28
2BA3:  MOVLB  00
2BA4:  GOTO   651 (RETURN)
.................... }
.................... #Separate 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0A87:  MOVLB  0E
0A88:  MOVF   40,F
0A89:  BTFSS  03.2
0A8A:  GOTO   2E7
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
0A8B:  MOVLW  03
0A8C:  MOVWF  4D
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0A8D:  CLRF   5A
0A8E:  CLRF   5B
0A8F:  CLRF   78
0A90:  CLRF   79
0A91:  CLRF   7A
0A92:  MOVF   45,W
0A93:  MOVWF  4E
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0A94:  CLRF   5B
0A95:  CLRF   78
0A96:  CLRF   79
0A97:  CLRF   7A
0A98:  MOVF   44,W
0A99:  MOVWF  4F
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0A9A:  CLRF   78
0A9B:  CLRF   79
0A9C:  CLRF   7A
0A9D:  MOVF   43,W
0A9E:  MOVWF  50
....................             
....................       output_low(flash_stream.cs_pin);
0A9F:  MOVF   41,W
0AA0:  MOVWF  5D
0AA1:  CLRF   5E
0AA2:  MOVLW  01
0AA3:  MOVWF  60
0AA4:  CLRF   5F
0AA5:  MOVLB  00
0AA6:  CALL   104
0AA7:  MOVLB  0E
0AA8:  MOVF   41,W
0AA9:  MOVWF  5D
0AAA:  CLRF   5E
0AAB:  CLRF   60
0AAC:  MOVLW  80
0AAD:  MOVWF  5F
0AAE:  MOVLB  00
0AAF:  CALL   104
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
0AB0:  MOVLB  0E
0AB1:  MOVF   42,W
0AB2:  MOVWF  60
0AB3:  MOVF   41,W
0AB4:  MOVWF  5F
0AB5:  MOVF   40,W
0AB6:  MOVWF  5E
0AB7:  MOVF   3F,W
0AB8:  MOVWF  5D
0AB9:  MOVLW  24
0ABA:  MOVWF  62
0ABB:  MOVLW  8D
0ABC:  MOVWF  61
0ABD:  CLRF   64
0ABE:  MOVLW  04
0ABF:  MOVWF  63
0AC0:  MOVF   48,W
0AC1:  MOVWF  66
0AC2:  MOVF   47,W
0AC3:  MOVWF  65
0AC4:  MOVF   4C,W
0AC5:  MOVWF  6A
0AC6:  MOVF   4B,W
0AC7:  MOVWF  69
0AC8:  MOVF   4A,W
0AC9:  MOVWF  68
0ACA:  MOVF   49,W
0ACB:  MOVWF  67
0ACC:  MOVLB  00
0ACD:  CALL   140
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0ACE:  MOVLW  02
0ACF:  MOVWF  77
0AD0:  DECFSZ 77,F
0AD1:  GOTO   2D0
0AD2:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0AD3:  MOVLB  0E
0AD4:  MOVF   41,W
0AD5:  MOVWF  5D
0AD6:  MOVLW  01
0AD7:  MOVWF  5E
0AD8:  MOVWF  60
0AD9:  CLRF   5F
0ADA:  MOVLB  00
0ADB:  CALL   104
0ADC:  MOVLB  0E
0ADD:  MOVF   41,W
0ADE:  MOVWF  5D
0ADF:  CLRF   5E
0AE0:  CLRF   60
0AE1:  MOVLW  80
0AE2:  MOVWF  5F
0AE3:  MOVLB  00
0AE4:  CALL   104
....................    }
0AE5:  GOTO   34B
0AE6:  MOVLB  0E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
0AE7:  DECFSZ 40,W
0AE8:  GOTO   34C
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
0AE9:  MOVLW  13
0AEA:  MOVWF  51
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
0AEB:  CLRF   59
0AEC:  CLRF   5A
0AED:  CLRF   5B
0AEE:  CLRF   78
0AEF:  CLRF   79
0AF0:  CLRF   7A
0AF1:  MOVF   46,W
0AF2:  MOVWF  52
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0AF3:  CLRF   5A
0AF4:  CLRF   5B
0AF5:  CLRF   78
0AF6:  CLRF   79
0AF7:  CLRF   7A
0AF8:  MOVF   45,W
0AF9:  MOVWF  53
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
0AFA:  CLRF   5B
0AFB:  CLRF   78
0AFC:  CLRF   79
0AFD:  CLRF   7A
0AFE:  MOVF   44,W
0AFF:  MOVWF  54
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
0B00:  CLRF   78
0B01:  CLRF   79
0B02:  CLRF   7A
0B03:  MOVF   43,W
0B04:  MOVWF  55
....................    
....................       output_low(flash_stream.cs_pin);
0B05:  MOVF   41,W
0B06:  MOVWF  5D
0B07:  CLRF   5E
0B08:  MOVLW  01
0B09:  MOVWF  60
0B0A:  CLRF   5F
0B0B:  MOVLB  00
0B0C:  CALL   104
0B0D:  MOVLB  0E
0B0E:  MOVF   41,W
0B0F:  MOVWF  5D
0B10:  CLRF   5E
0B11:  CLRF   60
0B12:  MOVLW  80
0B13:  MOVWF  5F
0B14:  MOVLB  00
0B15:  CALL   104
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
0B16:  MOVLB  0E
0B17:  MOVF   42,W
0B18:  MOVWF  60
0B19:  MOVF   41,W
0B1A:  MOVWF  5F
0B1B:  MOVF   40,W
0B1C:  MOVWF  5E
0B1D:  MOVF   3F,W
0B1E:  MOVWF  5D
0B1F:  MOVLW  24
0B20:  MOVWF  62
0B21:  MOVLW  91
0B22:  MOVWF  61
0B23:  CLRF   64
0B24:  MOVLW  05
0B25:  MOVWF  63
0B26:  MOVF   48,W
0B27:  MOVWF  66
0B28:  MOVF   47,W
0B29:  MOVWF  65
0B2A:  MOVF   4C,W
0B2B:  MOVWF  6A
0B2C:  MOVF   4B,W
0B2D:  MOVWF  69
0B2E:  MOVF   4A,W
0B2F:  MOVWF  68
0B30:  MOVF   49,W
0B31:  MOVWF  67
0B32:  MOVLB  00
0B33:  CALL   140
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
0B34:  MOVLW  02
0B35:  MOVWF  77
0B36:  DECFSZ 77,F
0B37:  GOTO   336
0B38:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
0B39:  MOVLB  0E
0B3A:  MOVF   41,W
0B3B:  MOVWF  5D
0B3C:  MOVLW  01
0B3D:  MOVWF  5E
0B3E:  MOVWF  60
0B3F:  CLRF   5F
0B40:  MOVLB  00
0B41:  CALL   104
0B42:  MOVLB  0E
0B43:  MOVF   41,W
0B44:  MOVWF  5D
0B45:  CLRF   5E
0B46:  CLRF   60
0B47:  MOVLW  80
0B48:  MOVWF  5F
0B49:  MOVLB  00
0B4A:  CALL   104
0B4B:  MOVLB  0E
....................    }
....................    return;
0B4C:  MOVLB  00
0B4D:  RETURN
.................... }
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
315C:  MOVLB  0C
315D:  MOVF   5F,F
315E:  BTFSS  03.2
315F:  GOTO   228
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
3160:  MOVLW  06
3161:  MOVWF  67
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
3162:  MOVLW  02
3163:  MOVWF  68
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
3164:  MOVF   64,W
3165:  MOVLB  0D
3166:  MOVWF  26
3167:  MOVLB  0C
3168:  MOVF   65,W
3169:  MOVLB  0D
316A:  MOVWF  27
316B:  CLRF   28
316C:  CLRF   29
316D:  CLRF   78
316E:  CLRF   79
316F:  CLRF   7A
3170:  MOVF   26,W
3171:  MOVLB  0C
3172:  MOVWF  69
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3173:  MOVF   63,W
3174:  MOVLB  0D
3175:  MOVWF  26
3176:  MOVLB  0C
3177:  MOVF   64,W
3178:  MOVLB  0D
3179:  MOVWF  27
317A:  MOVLB  0C
317B:  MOVF   65,W
317C:  MOVLB  0D
317D:  MOVWF  28
317E:  CLRF   29
317F:  CLRF   78
3180:  CLRF   79
3181:  CLRF   7A
3182:  MOVF   26,W
3183:  MOVLB  0C
3184:  MOVWF  6A
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
3185:  CLRF   78
3186:  CLRF   79
3187:  CLRF   7A
3188:  MOVF   62,W
3189:  MOVWF  6B
....................       flash_cmd[4] = write_data;
318A:  MOVF   66,W
318B:  MOVWF  6C
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
318C:  MOVF   60,W
318D:  MOVLB  0E
318E:  MOVWF  5D
318F:  CLRF   5E
3190:  MOVLW  01
3191:  MOVWF  60
3192:  CLRF   5F
3193:  MOVLP  08
3194:  MOVLB  00
3195:  CALL   104
3196:  MOVLP  30
3197:  MOVLB  0C
3198:  MOVF   60,W
3199:  MOVLB  0E
319A:  MOVWF  5D
319B:  CLRF   5E
319C:  CLRF   60
319D:  MOVLW  80
319E:  MOVWF  5F
319F:  MOVLP  08
31A0:  MOVLB  00
31A1:  CALL   104
31A2:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
31A3:  MOVLB  0C
31A4:  MOVF   61,W
31A5:  MOVLB  0E
31A6:  MOVWF  5A
31A7:  MOVLB  0C
31A8:  MOVF   60,W
31A9:  MOVLB  0E
31AA:  MOVWF  59
31AB:  MOVLB  0C
31AC:  MOVF   5F,W
31AD:  MOVLB  0E
31AE:  MOVWF  58
31AF:  MOVLB  0C
31B0:  MOVF   5E,W
31B1:  MOVLB  0E
31B2:  MOVWF  57
31B3:  MOVLW  24
31B4:  MOVWF  5C
31B5:  MOVLW  07
31B6:  MOVWF  5B
31B7:  CLRF   5E
31B8:  MOVLW  01
31B9:  MOVWF  5D
31BA:  MOVLP  08
31BB:  MOVLB  00
31BC:  CALL   63F
31BD:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
31BE:  MOVLB  0C
31BF:  MOVF   60,W
31C0:  MOVLB  0E
31C1:  MOVWF  5D
31C2:  MOVLW  01
31C3:  MOVWF  5E
31C4:  MOVWF  60
31C5:  CLRF   5F
31C6:  MOVLP  08
31C7:  MOVLB  00
31C8:  CALL   104
31C9:  MOVLP  30
31CA:  MOVLB  0C
31CB:  MOVF   60,W
31CC:  MOVLB  0E
31CD:  MOVWF  5D
31CE:  CLRF   5E
31CF:  CLRF   60
31D0:  MOVLW  80
31D1:  MOVWF  5F
31D2:  MOVLP  08
31D3:  MOVLB  00
31D4:  CALL   104
31D5:  MOVLP  30
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
31D6:  MOVLB  0C
31D7:  MOVF   60,W
31D8:  MOVLB  0E
31D9:  MOVWF  5D
31DA:  CLRF   5E
31DB:  MOVLW  01
31DC:  MOVWF  60
31DD:  CLRF   5F
31DE:  MOVLP  08
31DF:  MOVLB  00
31E0:  CALL   104
31E1:  MOVLP  30
31E2:  MOVLB  0C
31E3:  MOVF   60,W
31E4:  MOVLB  0E
31E5:  MOVWF  5D
31E6:  CLRF   5E
31E7:  CLRF   60
31E8:  MOVLW  80
31E9:  MOVWF  5F
31EA:  MOVLP  08
31EB:  MOVLB  00
31EC:  CALL   104
31ED:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
31EE:  MOVLB  0C
31EF:  MOVF   61,W
31F0:  MOVLB  0E
31F1:  MOVWF  5A
31F2:  MOVLB  0C
31F3:  MOVF   60,W
31F4:  MOVLB  0E
31F5:  MOVWF  59
31F6:  MOVLB  0C
31F7:  MOVF   5F,W
31F8:  MOVLB  0E
31F9:  MOVWF  58
31FA:  MOVLB  0C
31FB:  MOVF   5E,W
31FC:  MOVLB  0E
31FD:  MOVWF  57
31FE:  MOVLW  24
31FF:  MOVWF  5C
3200:  MOVLW  08
3201:  MOVWF  5B
3202:  CLRF   5E
3203:  MOVLW  05
3204:  MOVWF  5D
3205:  MOVLP  08
3206:  MOVLB  00
3207:  CALL   63F
3208:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
3209:  MOVLW  02
320A:  MOVWF  77
320B:  DECFSZ 77,F
320C:  GOTO   20B
320D:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
320E:  MOVLB  0C
320F:  MOVF   60,W
3210:  MOVLB  0E
3211:  MOVWF  5D
3212:  MOVLW  01
3213:  MOVWF  5E
3214:  MOVWF  60
3215:  CLRF   5F
3216:  MOVLP  08
3217:  MOVLB  00
3218:  CALL   104
3219:  MOVLP  30
321A:  MOVLB  0C
321B:  MOVF   60,W
321C:  MOVLB  0E
321D:  MOVWF  5D
321E:  CLRF   5E
321F:  CLRF   60
3220:  MOVLW  80
3221:  MOVWF  5F
3222:  MOVLP  08
3223:  MOVLB  00
3224:  CALL   104
3225:  MOVLP  30
....................    }
3226:  GOTO   300
3227:  MOVLB  0C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
3228:  DECFSZ 5F,W
3229:  GOTO   301
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
322A:  MOVLW  06
322B:  MOVWF  6D
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
322C:  MOVLW  12
322D:  MOVWF  6E
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
322E:  MOVF   65,W
322F:  MOVLB  0D
3230:  MOVWF  26
3231:  CLRF   27
3232:  CLRF   28
3233:  CLRF   29
3234:  CLRF   78
3235:  CLRF   79
3236:  CLRF   7A
3237:  MOVF   26,W
3238:  MOVLB  0C
3239:  MOVWF  6F
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
323A:  MOVF   64,W
323B:  MOVLB  0D
323C:  MOVWF  26
323D:  MOVLB  0C
323E:  MOVF   65,W
323F:  MOVLB  0D
3240:  MOVWF  27
3241:  CLRF   28
3242:  CLRF   29
3243:  CLRF   78
3244:  CLRF   79
3245:  CLRF   7A
3246:  MOVF   26,W
3247:  MOVWF  20
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
3248:  MOVLB  0C
3249:  MOVF   63,W
324A:  MOVLB  0D
324B:  MOVWF  26
324C:  MOVLB  0C
324D:  MOVF   64,W
324E:  MOVLB  0D
324F:  MOVWF  27
3250:  MOVLB  0C
3251:  MOVF   65,W
3252:  MOVLB  0D
3253:  MOVWF  28
3254:  CLRF   29
3255:  CLRF   78
3256:  CLRF   79
3257:  CLRF   7A
3258:  MOVF   26,W
3259:  MOVWF  21
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
325A:  MOVLB  0C
325B:  CLRF   78
325C:  CLRF   79
325D:  CLRF   7A
325E:  MOVF   62,W
325F:  MOVLB  0D
3260:  MOVWF  22
....................       flash_cmd[5] = write_data;
3261:  MOVLB  0C
3262:  MOVF   66,W
3263:  MOVLB  0D
3264:  MOVWF  23
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
3265:  MOVLB  0C
3266:  MOVF   60,W
3267:  MOVLB  0E
3268:  MOVWF  5D
3269:  CLRF   5E
326A:  MOVLW  01
326B:  MOVWF  60
326C:  CLRF   5F
326D:  MOVLP  08
326E:  MOVLB  00
326F:  CALL   104
3270:  MOVLP  30
3271:  MOVLB  0C
3272:  MOVF   60,W
3273:  MOVLB  0E
3274:  MOVWF  5D
3275:  CLRF   5E
3276:  CLRF   60
3277:  MOVLW  80
3278:  MOVWF  5F
3279:  MOVLP  08
327A:  MOVLB  00
327B:  CALL   104
327C:  MOVLP  30
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
327D:  MOVLB  0C
327E:  MOVF   61,W
327F:  MOVLB  0E
3280:  MOVWF  5A
3281:  MOVLB  0C
3282:  MOVF   60,W
3283:  MOVLB  0E
3284:  MOVWF  59
3285:  MOVLB  0C
3286:  MOVF   5F,W
3287:  MOVLB  0E
3288:  MOVWF  58
3289:  MOVLB  0C
328A:  MOVF   5E,W
328B:  MOVLB  0E
328C:  MOVWF  57
328D:  MOVLW  24
328E:  MOVWF  5C
328F:  MOVLW  0D
3290:  MOVWF  5B
3291:  CLRF   5E
3292:  MOVLW  01
3293:  MOVWF  5D
3294:  MOVLP  08
3295:  MOVLB  00
3296:  CALL   63F
3297:  MOVLP  30
....................       output_high(flash_stream.cs_pin);
3298:  MOVLB  0C
3299:  MOVF   60,W
329A:  MOVLB  0E
329B:  MOVWF  5D
329C:  MOVLW  01
329D:  MOVWF  5E
329E:  MOVWF  60
329F:  CLRF   5F
32A0:  MOVLP  08
32A1:  MOVLB  00
32A2:  CALL   104
32A3:  MOVLP  30
32A4:  MOVLB  0C
32A5:  MOVF   60,W
32A6:  MOVLB  0E
32A7:  MOVWF  5D
32A8:  CLRF   5E
32A9:  CLRF   60
32AA:  MOVLW  80
32AB:  MOVWF  5F
32AC:  MOVLP  08
32AD:  MOVLB  00
32AE:  CALL   104
32AF:  MOVLP  30
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
32B0:  MOVLB  0C
32B1:  MOVF   60,W
32B2:  MOVLB  0E
32B3:  MOVWF  5D
32B4:  CLRF   5E
32B5:  MOVLW  01
32B6:  MOVWF  60
32B7:  CLRF   5F
32B8:  MOVLP  08
32B9:  MOVLB  00
32BA:  CALL   104
32BB:  MOVLP  30
32BC:  MOVLB  0C
32BD:  MOVF   60,W
32BE:  MOVLB  0E
32BF:  MOVWF  5D
32C0:  CLRF   5E
32C1:  CLRF   60
32C2:  MOVLW  80
32C3:  MOVWF  5F
32C4:  MOVLP  08
32C5:  MOVLB  00
32C6:  CALL   104
32C7:  MOVLP  30
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
32C8:  MOVLB  0C
32C9:  MOVF   61,W
32CA:  MOVLB  0E
32CB:  MOVWF  5A
32CC:  MOVLB  0C
32CD:  MOVF   60,W
32CE:  MOVLB  0E
32CF:  MOVWF  59
32D0:  MOVLB  0C
32D1:  MOVF   5F,W
32D2:  MOVLB  0E
32D3:  MOVWF  58
32D4:  MOVLB  0C
32D5:  MOVF   5E,W
32D6:  MOVLB  0E
32D7:  MOVWF  57
32D8:  MOVLW  24
32D9:  MOVWF  5C
32DA:  MOVLW  0E
32DB:  MOVWF  5B
32DC:  CLRF   5E
32DD:  MOVLW  06
32DE:  MOVWF  5D
32DF:  MOVLP  08
32E0:  MOVLB  00
32E1:  CALL   63F
32E2:  MOVLP  30
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
32E3:  MOVLW  02
32E4:  MOVWF  77
32E5:  DECFSZ 77,F
32E6:  GOTO   2E5
32E7:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
32E8:  MOVLB  0C
32E9:  MOVF   60,W
32EA:  MOVLB  0E
32EB:  MOVWF  5D
32EC:  MOVLW  01
32ED:  MOVWF  5E
32EE:  MOVWF  60
32EF:  CLRF   5F
32F0:  MOVLP  08
32F1:  MOVLB  00
32F2:  CALL   104
32F3:  MOVLP  30
32F4:  MOVLB  0C
32F5:  MOVF   60,W
32F6:  MOVLB  0E
32F7:  MOVWF  5D
32F8:  CLRF   5E
32F9:  CLRF   60
32FA:  MOVLW  80
32FB:  MOVWF  5F
32FC:  MOVLP  08
32FD:  MOVLB  00
32FE:  CALL   104
32FF:  MOVLP  30
3300:  MOVLB  0C
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
3301:  MOVLB  0D
3302:  CLRF   24
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
3303:  MOVLB  0C
3304:  MOVF   61,W
3305:  MOVLB  0E
3306:  MOVWF  5A
3307:  MOVLB  0C
3308:  MOVF   60,W
3309:  MOVLB  0E
330A:  MOVWF  59
330B:  MOVLB  0C
330C:  MOVF   5F,W
330D:  MOVLB  0E
330E:  MOVWF  58
330F:  MOVLB  0C
3310:  MOVF   5E,W
3311:  MOVLB  0E
3312:  MOVWF  57
3313:  MOVLP  08
3314:  MOVLB  00
3315:  CALL   73B
3316:  MOVLP  30
3317:  MOVF   78,W
3318:  ANDLW  01
3319:  SUBLW  01
331A:  BTFSS  03.2
331B:  GOTO   33B
....................       if(timeout_counter > 10)
331C:  MOVLB  0D
331D:  MOVF   24,W
331E:  SUBLW  0A
331F:  BTFSC  03.0
3320:  GOTO   32A
....................          delay_ms(200);
3321:  MOVLW  C8
3322:  MOVLB  0E
3323:  MOVWF  57
3324:  MOVLP  08
3325:  MOVLB  00
3326:  CALL   781
3327:  MOVLP  30
3328:  GOTO   331
3329:  MOVLB  0D
....................       else
....................          delay_ms(10);   
332A:  MOVLW  0A
332B:  MOVLB  0E
332C:  MOVWF  57
332D:  MOVLP  08
332E:  MOVLB  00
332F:  CALL   781
3330:  MOVLP  30
....................       
....................       if(timeout_counter > 100){
3331:  MOVLB  0D
3332:  MOVF   24,W
3333:  SUBLW  64
3334:  BTFSC  03.0
3335:  GOTO   339
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
3336:  MOVLB  00
3337:  GOTO   33B
3338:  MOVLB  0D
....................       }  
....................       timeout_counter++;
3339:  INCF   24,F
333A:  GOTO   303
333B:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
333C:  RETURN
.................... }
.................... #Separate 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
1000:  MOVLB  0E
1001:  MOVF   40,F
1002:  BTFSS  03.2
1003:  GOTO   0B1
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
1004:  MOVLW  06
1005:  MOVWF  4B
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
1006:  MOVLW  02
1007:  MOVWF  4C
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
1008:  MOVF   45,W
1009:  MOVWF  58
100A:  MOVF   46,W
100B:  MOVWF  59
100C:  CLRF   5A
100D:  CLRF   5B
100E:  CLRF   78
100F:  CLRF   79
1010:  CLRF   7A
1011:  MOVF   58,W
1012:  MOVWF  4D
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
1013:  MOVF   44,W
1014:  MOVWF  58
1015:  MOVF   45,W
1016:  MOVWF  59
1017:  MOVF   46,W
1018:  MOVWF  5A
1019:  CLRF   5B
101A:  CLRF   78
101B:  CLRF   79
101C:  CLRF   7A
101D:  MOVF   58,W
101E:  MOVWF  4E
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
101F:  CLRF   78
1020:  CLRF   79
1021:  CLRF   7A
1022:  MOVF   43,W
1023:  MOVWF  4F
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
1024:  MOVF   41,W
1025:  MOVWF  5D
1026:  CLRF   5E
1027:  MOVLW  01
1028:  MOVWF  60
1029:  CLRF   5F
102A:  MOVLP  08
102B:  MOVLB  00
102C:  CALL   104
102D:  MOVLP  10
102E:  MOVLB  0E
102F:  MOVF   41,W
1030:  MOVWF  5D
1031:  CLRF   5E
1032:  CLRF   60
1033:  MOVLW  80
1034:  MOVWF  5F
1035:  MOVLP  08
1036:  MOVLB  00
1037:  CALL   104
1038:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
1039:  MOVLB  0E
103A:  MOVF   42,W
103B:  MOVWF  5A
103C:  MOVF   41,W
103D:  MOVWF  59
103E:  MOVF   40,W
103F:  MOVWF  58
1040:  MOVF   3F,W
1041:  MOVWF  57
1042:  MOVLW  24
1043:  MOVWF  5C
1044:  MOVLW  8B
1045:  MOVWF  5B
1046:  CLRF   5E
1047:  MOVLW  01
1048:  MOVWF  5D
1049:  MOVLP  08
104A:  MOVLB  00
104B:  CALL   63F
104C:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
104D:  MOVLB  0E
104E:  MOVF   41,W
104F:  MOVWF  5D
1050:  MOVLW  01
1051:  MOVWF  5E
1052:  MOVWF  60
1053:  CLRF   5F
1054:  MOVLP  08
1055:  MOVLB  00
1056:  CALL   104
1057:  MOVLP  10
1058:  MOVLB  0E
1059:  MOVF   41,W
105A:  MOVWF  5D
105B:  CLRF   5E
105C:  CLRF   60
105D:  MOVLW  80
105E:  MOVWF  5F
105F:  MOVLP  08
1060:  MOVLB  00
1061:  CALL   104
1062:  MOVLP  10
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
1063:  MOVLB  0E
1064:  MOVF   41,W
1065:  MOVWF  5D
1066:  CLRF   5E
1067:  MOVLW  01
1068:  MOVWF  60
1069:  CLRF   5F
106A:  MOVLP  08
106B:  MOVLB  00
106C:  CALL   104
106D:  MOVLP  10
106E:  MOVLB  0E
106F:  MOVF   41,W
1070:  MOVWF  5D
1071:  CLRF   5E
1072:  CLRF   60
1073:  MOVLW  80
1074:  MOVWF  5F
1075:  MOVLP  08
1076:  MOVLB  00
1077:  CALL   104
1078:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
1079:  MOVLB  0E
107A:  MOVF   42,W
107B:  MOVWF  5A
107C:  MOVF   41,W
107D:  MOVWF  59
107E:  MOVF   40,W
107F:  MOVWF  58
1080:  MOVF   3F,W
1081:  MOVWF  57
1082:  MOVLW  24
1083:  MOVWF  5C
1084:  MOVLW  8C
1085:  MOVWF  5B
1086:  MOVLW  04
1087:  MOVWF  5D
1088:  MOVF   48,W
1089:  MOVWF  5F
108A:  MOVF   47,W
108B:  MOVWF  5E
108C:  MOVF   4A,W
108D:  MOVWF  61
108E:  MOVF   49,W
108F:  MOVWF  60
1090:  MOVLP  08
1091:  MOVLB  00
1092:  CALL   69F
1093:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
1094:  MOVLW  02
1095:  MOVWF  77
1096:  DECFSZ 77,F
1097:  GOTO   096
1098:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1099:  MOVLB  0E
109A:  MOVF   41,W
109B:  MOVWF  5D
109C:  MOVLW  01
109D:  MOVWF  5E
109E:  MOVWF  60
109F:  CLRF   5F
10A0:  MOVLP  08
10A1:  MOVLB  00
10A2:  CALL   104
10A3:  MOVLP  10
10A4:  MOVLB  0E
10A5:  MOVF   41,W
10A6:  MOVWF  5D
10A7:  CLRF   5E
10A8:  CLRF   60
10A9:  MOVLW  80
10AA:  MOVWF  5F
10AB:  MOVLP  08
10AC:  MOVLB  00
10AD:  CALL   104
10AE:  MOVLP  10
....................    }
10AF:  GOTO   168
10B0:  MOVLB  0E
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
10B1:  DECFSZ 40,W
10B2:  GOTO   169
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
10B3:  MOVLW  06
10B4:  MOVWF  50
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
10B5:  MOVLW  12
10B6:  MOVWF  51
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
10B7:  MOVF   46,W
10B8:  MOVWF  58
10B9:  CLRF   59
10BA:  CLRF   5A
10BB:  CLRF   5B
10BC:  CLRF   78
10BD:  CLRF   79
10BE:  CLRF   7A
10BF:  MOVF   58,W
10C0:  MOVWF  52
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
10C1:  MOVF   45,W
10C2:  MOVWF  58
10C3:  MOVF   46,W
10C4:  MOVWF  59
10C5:  CLRF   5A
10C6:  CLRF   5B
10C7:  CLRF   78
10C8:  CLRF   79
10C9:  CLRF   7A
10CA:  MOVF   58,W
10CB:  MOVWF  53
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
10CC:  MOVF   44,W
10CD:  MOVWF  58
10CE:  MOVF   45,W
10CF:  MOVWF  59
10D0:  MOVF   46,W
10D1:  MOVWF  5A
10D2:  CLRF   5B
10D3:  CLRF   78
10D4:  CLRF   79
10D5:  CLRF   7A
10D6:  MOVF   58,W
10D7:  MOVWF  54
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
10D8:  CLRF   78
10D9:  CLRF   79
10DA:  CLRF   7A
10DB:  MOVF   43,W
10DC:  MOVWF  55
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
10DD:  MOVF   41,W
10DE:  MOVWF  5D
10DF:  CLRF   5E
10E0:  MOVLW  01
10E1:  MOVWF  60
10E2:  CLRF   5F
10E3:  MOVLP  08
10E4:  MOVLB  00
10E5:  CALL   104
10E6:  MOVLP  10
10E7:  MOVLB  0E
10E8:  MOVF   41,W
10E9:  MOVWF  5D
10EA:  CLRF   5E
10EB:  CLRF   60
10EC:  MOVLW  80
10ED:  MOVWF  5F
10EE:  MOVLP  08
10EF:  MOVLB  00
10F0:  CALL   104
10F1:  MOVLP  10
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
10F2:  MOVLB  0E
10F3:  MOVF   42,W
10F4:  MOVWF  5A
10F5:  MOVF   41,W
10F6:  MOVWF  59
10F7:  MOVF   40,W
10F8:  MOVWF  58
10F9:  MOVF   3F,W
10FA:  MOVWF  57
10FB:  MOVLW  24
10FC:  MOVWF  5C
10FD:  MOVLW  90
10FE:  MOVWF  5B
10FF:  CLRF   5E
1100:  MOVLW  01
1101:  MOVWF  5D
1102:  MOVLP  08
1103:  MOVLB  00
1104:  CALL   63F
1105:  MOVLP  10
....................       output_high(flash_stream.cs_pin);
1106:  MOVLB  0E
1107:  MOVF   41,W
1108:  MOVWF  5D
1109:  MOVLW  01
110A:  MOVWF  5E
110B:  MOVWF  60
110C:  CLRF   5F
110D:  MOVLP  08
110E:  MOVLB  00
110F:  CALL   104
1110:  MOVLP  10
1111:  MOVLB  0E
1112:  MOVF   41,W
1113:  MOVWF  5D
1114:  CLRF   5E
1115:  CLRF   60
1116:  MOVLW  80
1117:  MOVWF  5F
1118:  MOVLP  08
1119:  MOVLB  00
111A:  CALL   104
111B:  MOVLP  10
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
111C:  MOVLB  0E
111D:  MOVF   41,W
111E:  MOVWF  5D
111F:  CLRF   5E
1120:  MOVLW  01
1121:  MOVWF  60
1122:  CLRF   5F
1123:  MOVLP  08
1124:  MOVLB  00
1125:  CALL   104
1126:  MOVLP  10
1127:  MOVLB  0E
1128:  MOVF   41,W
1129:  MOVWF  5D
112A:  CLRF   5E
112B:  CLRF   60
112C:  MOVLW  80
112D:  MOVWF  5F
112E:  MOVLP  08
112F:  MOVLB  00
1130:  CALL   104
1131:  MOVLP  10
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
1132:  MOVLB  0E
1133:  MOVF   42,W
1134:  MOVWF  5A
1135:  MOVF   41,W
1136:  MOVWF  59
1137:  MOVF   40,W
1138:  MOVWF  58
1139:  MOVF   3F,W
113A:  MOVWF  57
113B:  MOVLW  24
113C:  MOVWF  5C
113D:  MOVLW  91
113E:  MOVWF  5B
113F:  MOVLW  05
1140:  MOVWF  5D
1141:  MOVF   48,W
1142:  MOVWF  5F
1143:  MOVF   47,W
1144:  MOVWF  5E
1145:  MOVF   4A,W
1146:  MOVWF  61
1147:  MOVF   49,W
1148:  MOVWF  60
1149:  MOVLP  08
114A:  MOVLB  00
114B:  CALL   69F
114C:  MOVLP  10
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
114D:  MOVLW  02
114E:  MOVWF  77
114F:  DECFSZ 77,F
1150:  GOTO   14F
1151:  NOP
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
1152:  MOVLB  0E
1153:  MOVF   41,W
1154:  MOVWF  5D
1155:  MOVLW  01
1156:  MOVWF  5E
1157:  MOVWF  60
1158:  CLRF   5F
1159:  MOVLP  08
115A:  MOVLB  00
115B:  CALL   104
115C:  MOVLP  10
115D:  MOVLB  0E
115E:  MOVF   41,W
115F:  MOVWF  5D
1160:  CLRF   5E
1161:  CLRF   60
1162:  MOVLW  80
1163:  MOVWF  5F
1164:  MOVLP  08
1165:  MOVLB  00
1166:  CALL   104
1167:  MOVLP  10
1168:  MOVLB  0E
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
1169:  CLRF   56
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
116A:  MOVF   42,W
116B:  MOVWF  5A
116C:  MOVF   41,W
116D:  MOVWF  59
116E:  MOVF   40,W
116F:  MOVWF  58
1170:  MOVF   3F,W
1171:  MOVWF  57
1172:  MOVLP  08
1173:  MOVLB  00
1174:  CALL   73B
1175:  MOVLP  10
1176:  MOVF   78,W
1177:  ANDLW  01
1178:  SUBLW  01
1179:  BTFSS  03.2
117A:  GOTO   198
....................       if(timeout_counter > 10)
117B:  MOVLB  0E
117C:  MOVF   56,W
117D:  SUBLW  0A
117E:  BTFSC  03.0
117F:  GOTO   188
....................          delay_ms(200);
1180:  MOVLW  C8
1181:  MOVWF  57
1182:  MOVLP  08
1183:  MOVLB  00
1184:  CALL   781
1185:  MOVLP  10
1186:  GOTO   18E
1187:  MOVLB  0E
....................       else
....................          delay_ms(10);   
1188:  MOVLW  0A
1189:  MOVWF  57
118A:  MOVLP  08
118B:  MOVLB  00
118C:  CALL   781
118D:  MOVLP  10
....................       
....................       if(timeout_counter > 100){
118E:  MOVLB  0E
118F:  MOVF   56,W
1190:  SUBLW  64
1191:  BTFSC  03.0
1192:  GOTO   196
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
1193:  MOVLB  00
1194:  GOTO   198
1195:  MOVLB  0E
....................       }  
....................       timeout_counter++;
1196:  INCF   56,F
1197:  GOTO   16A
1198:  MOVLB  00
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
1199:  RETURN
.................... }
.................... 
.................... #Separate 
.................... int1 is_connect(Flash flash_stream){
*
0A2E:  MOVLW  9F
0A2F:  MOVLB  0D
0A30:  MOVWF  3C
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
0A31:  MOVF   36,W
0A32:  MOVLB  0E
0A33:  MOVWF  5D
0A34:  CLRF   5E
0A35:  MOVLW  01
0A36:  MOVWF  60
0A37:  CLRF   5F
0A38:  MOVLB  00
0A39:  CALL   104
0A3A:  MOVLB  0D
0A3B:  MOVF   36,W
0A3C:  MOVLB  0E
0A3D:  MOVWF  5D
0A3E:  CLRF   5E
0A3F:  CLRF   60
0A40:  MOVLW  80
0A41:  MOVWF  5F
0A42:  MOVLB  00
0A43:  CALL   104
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
0A44:  MOVLB  0D
0A45:  MOVF   37,W
0A46:  MOVLB  0E
0A47:  MOVWF  60
0A48:  MOVLB  0D
0A49:  MOVF   36,W
0A4A:  MOVLB  0E
0A4B:  MOVWF  5F
0A4C:  MOVLB  0D
0A4D:  MOVF   35,W
0A4E:  MOVLB  0E
0A4F:  MOVWF  5E
0A50:  MOVLB  0D
0A51:  MOVF   34,W
0A52:  MOVLB  0E
0A53:  MOVWF  5D
0A54:  MOVLW  24
0A55:  MOVWF  62
0A56:  MOVLW  2C
0A57:  MOVWF  61
0A58:  CLRF   64
0A59:  MOVLW  01
0A5A:  MOVWF  63
0A5B:  MOVLW  24
0A5C:  MOVWF  66
0A5D:  MOVLW  28
0A5E:  MOVWF  65
0A5F:  CLRF   6A
0A60:  CLRF   69
0A61:  CLRF   68
0A62:  MOVLW  04
0A63:  MOVWF  67
0A64:  MOVLB  00
0A65:  CALL   140
....................    output_high(flash_stream.cs_pin);
0A66:  MOVLB  0D
0A67:  MOVF   36,W
0A68:  MOVLB  0E
0A69:  MOVWF  5D
0A6A:  MOVLW  01
0A6B:  MOVWF  5E
0A6C:  MOVWF  60
0A6D:  CLRF   5F
0A6E:  MOVLB  00
0A6F:  CALL   104
0A70:  MOVLB  0D
0A71:  MOVF   36,W
0A72:  MOVLB  0E
0A73:  MOVWF  5D
0A74:  CLRF   5E
0A75:  CLRF   60
0A76:  MOVLW  80
0A77:  MOVWF  5F
0A78:  MOVLB  00
0A79:  CALL   104
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
0A7A:  MOVLB  0D
0A7B:  MOVF   38,W
0A7C:  SUBLW  20
0A7D:  BTFSS  03.2
0A7E:  GOTO   283
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
0A7F:  MOVLW  01
0A80:  MOVWF  78
0A81:  GOTO   285
....................    }
0A82:  GOTO   285
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
0A83:  MOVLW  00
0A84:  MOVWF  78
....................    }
0A85:  MOVLB  00
0A86:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
0BCF:  MOVLW  92
0BD0:  MOVLB  03
0BD1:  MOVWF  11
0BD2:  MOVLW  00
0BD3:  MOVWF  12
0BD4:  MOVLB  00
0BD5:  CALL   045
....................     output_high(MIS_FM_CS); // Set CS pin high to deselect the flash
0BD6:  MOVLB  01
0BD7:  BCF    0F.1
0BD8:  MOVLB  02
0BD9:  BSF    0F.1
....................     output_high(SMF_CS); // Set CS pin high to deselect the SMF
0BDA:  MOVLB  01
0BDB:  BCF    0F.2
0BDC:  MOVLB  02
0BDD:  BSF    0F.2
....................     
....................     unsigned int8 readdata[PACKET_SIZE];
.................... 
....................     if (!is_connect(mis_fm)) {
0BDE:  MOVLB  08
0BDF:  MOVF   5D,W
0BE0:  MOVLB  0D
0BE1:  MOVWF  37
0BE2:  MOVLB  08
0BE3:  MOVF   5C,W
0BE4:  MOVLB  0D
0BE5:  MOVWF  36
0BE6:  MOVLB  08
0BE7:  MOVF   5B,W
0BE8:  MOVLB  0D
0BE9:  MOVWF  35
0BEA:  MOVLB  08
0BEB:  MOVF   5A,W
0BEC:  MOVLB  0D
0BED:  MOVWF  34
0BEE:  MOVLB  00
0BEF:  CALL   22E
0BF0:  MOVF   78,F
0BF1:  BTFSS  03.2
0BF2:  GOTO   3FB
....................         fprintf(PC, "\tFlash is not connected\r\n");
0BF3:  MOVLW  A0
0BF4:  MOVLB  03
0BF5:  MOVWF  11
0BF6:  MOVLW  00
0BF7:  MOVWF  12
0BF8:  MOVLB  00
0BF9:  CALL   045
....................         return;
0BFA:  GOTO   63E
....................     }else {
....................         //fprintf(PC, "\tFlash is connected\r\n");
....................     }
....................     read_data_bytes(mis_fm, ADDRESS_MANEGE_START, readdata, PACKET_SIZE); // Read the PICLOG data header
0BFB:  MOVLB  08
0BFC:  MOVF   5D,W
0BFD:  MOVLB  0E
0BFE:  MOVWF  42
0BFF:  MOVLB  08
0C00:  MOVF   5C,W
0C01:  MOVLB  0E
0C02:  MOVWF  41
0C03:  MOVLB  08
0C04:  MOVF   5B,W
0C05:  MOVLB  0E
0C06:  MOVWF  40
0C07:  MOVLB  08
0C08:  MOVF   5A,W
0C09:  MOVLB  0E
0C0A:  MOVWF  3F
0C0B:  CLRF   46
0C0C:  CLRF   45
0C0D:  CLRF   44
0C0E:  CLRF   43
0C0F:  MOVLW  23
0C10:  MOVWF  48
0C11:  MOVLW  B7
0C12:  MOVWF  47
0C13:  CLRF   4C
0C14:  CLRF   4B
0C15:  CLRF   4A
0C16:  MOVLW  40
0C17:  MOVWF  49
0C18:  MOVLB  00
0C19:  CALL   287
....................     
....................     // Update the flash data header with the read data
....................     smf_piclog_use_counter = (readdata[0] << 24) | (readdata[1] << 16) | (readdata[2] << 8) | readdata[3];
0C1A:  MOVLB  0C
0C1B:  CLRF   59
0C1C:  MOVLW  00
0C1D:  IORWF  59,F
0C1E:  IORWF  59,W
0C1F:  MOVLB  0B
0C20:  IORWF  6A,W
0C21:  MOVLB  08
0C22:  MOVWF  42
0C23:  CLRF   43
0C24:  CLRF   44
0C25:  CLRF   45
....................     smf_piclog_loop_counter = readdata[4];
0C26:  MOVLB  0B
0C27:  MOVF   6B,W
0C28:  MOVWF  71
....................     smf_meas_use_counter = (readdata[5] << 24) | (readdata[6] << 16) | (readdata[7] << 8) | readdata[8];
0C29:  MOVLB  0C
0C2A:  CLRF   59
0C2B:  MOVLW  00
0C2C:  IORWF  59,F
0C2D:  IORWF  59,W
0C2E:  MOVLB  0B
0C2F:  IORWF  6F,W
0C30:  MOVLB  08
0C31:  MOVWF  46
0C32:  CLRF   47
0C33:  CLRF   48
0C34:  CLRF   49
....................     smf_meas_loop_counter = readdata[9];
0C35:  MOVLB  0C
0C36:  MOVF   20,W
0C37:  MOVWF  72
.................... 
....................     misf_piclog_use_counter = (readdata[10] << 24) | (readdata[11] << 16) | (readdata[12] << 8) | readdata[13];
0C38:  CLRF   59
0C39:  MOVLW  00
0C3A:  IORWF  59,F
0C3B:  IORWF  59,W
0C3C:  IORWF  24,W
0C3D:  MOVLB  08
0C3E:  MOVWF  4A
0C3F:  CLRF   4B
0C40:  CLRF   4C
0C41:  CLRF   4D
....................     misf_piclog_loop_counter = readdata[14];
0C42:  MOVLB  0C
0C43:  MOVF   25,W
0C44:  MOVWF  73
....................     misf_piclog_uncopyed_counter = (readdata[15] << 24) | (readdata[16] << 16) | (readdata[17] << 8) | readdata[18];
0C45:  CLRF   59
0C46:  MOVLW  00
0C47:  IORWF  59,F
0C48:  IORWF  59,W
0C49:  IORWF  29,W
0C4A:  MOVLB  08
0C4B:  MOVWF  4E
0C4C:  CLRF   4F
0C4D:  CLRF   50
0C4E:  CLRF   51
....................     misf_piclog_write_counter = (readdata[19] << 24) | (readdata[20] << 16) | (readdata[21] << 8) | readdata[22];
0C4F:  MOVLB  0C
0C50:  CLRF   58
0C51:  MOVLW  00
0C52:  IORWF  58,F
0C53:  IORWF  58,W
0C54:  IORWF  2D,W
0C55:  MOVWF  74
....................     misf_meas_use_counter = (readdata[23] << 24) | (readdata[24] << 16) | (readdata[25] << 8) | readdata[26];
0C56:  CLRF   59
0C57:  MOVLW  00
0C58:  IORWF  59,F
0C59:  IORWF  59,W
0C5A:  IORWF  31,W
0C5B:  MOVLB  08
0C5C:  MOVWF  52
0C5D:  CLRF   53
0C5E:  CLRF   54
0C5F:  CLRF   55
....................     misf_meas_loop_counter = readdata[27];
0C60:  MOVLB  0C
0C61:  MOVF   32,W
0C62:  MOVWF  75
....................     misf_meas_uncopyed_counter = (readdata[28] << 24) | (readdata[29] << 16) | (readdata[30] << 8) | readdata[31];
0C63:  CLRF   59
0C64:  MOVLW  00
0C65:  IORWF  59,F
0C66:  IORWF  59,W
0C67:  IORWF  36,W
0C68:  MOVLB  08
0C69:  MOVWF  56
0C6A:  CLRF   57
0C6B:  CLRF   58
0C6C:  CLRF   59
.................... 
....................     fprintf(PC, "\tSMF  PICLOG Use Counter      : 0x%08LX\r\n", smf_piclog_use_counter);
0C6D:  MOVLW  AD
0C6E:  MOVLB  03
0C6F:  MOVWF  11
0C70:  MOVLW  00
0C71:  MOVWF  12
0C72:  BCF    03.0
0C73:  MOVLW  22
0C74:  MOVLB  0C
0C75:  MOVWF  6B
0C76:  MOVLB  00
0C77:  CALL   34E
0C78:  MOVLB  08
0C79:  MOVF   45,W
0C7A:  MOVLB  0C
0C7B:  MOVWF  6B
0C7C:  MOVLW  37
0C7D:  MOVWF  6C
0C7E:  MOVLB  00
0C7F:  CALL   3A8
0C80:  MOVLB  08
0C81:  MOVF   44,W
0C82:  MOVLB  0C
0C83:  MOVWF  6B
0C84:  MOVLW  37
0C85:  MOVWF  6C
0C86:  MOVLB  00
0C87:  CALL   3A8
0C88:  MOVLB  08
0C89:  MOVF   43,W
0C8A:  MOVLB  0C
0C8B:  MOVWF  6B
0C8C:  MOVLW  37
0C8D:  MOVWF  6C
0C8E:  MOVLB  00
0C8F:  CALL   3A8
0C90:  MOVLB  08
0C91:  MOVF   42,W
0C92:  MOVLB  0C
0C93:  MOVWF  6B
0C94:  MOVLW  37
0C95:  MOVWF  6C
0C96:  MOVLB  00
0C97:  CALL   3A8
0C98:  MOVLW  0D
0C99:  MOVLB  0E
0C9A:  MOVWF  43
0C9B:  MOVLB  00
0C9C:  CALL   020
0C9D:  MOVLW  0A
0C9E:  MOVLB  0E
0C9F:  MOVWF  43
0CA0:  MOVLB  00
0CA1:  CALL   020
....................     fprintf(PC, "\tSMF  PICLOG Loop Counter     : 0x%02X\r\n", smf_piclog_loop_counter);
0CA2:  MOVLW  C2
0CA3:  MOVLB  03
0CA4:  MOVWF  11
0CA5:  MOVLW  00
0CA6:  MOVWF  12
0CA7:  BCF    03.0
0CA8:  MOVLW  22
0CA9:  MOVLB  0C
0CAA:  MOVWF  6B
0CAB:  MOVLB  00
0CAC:  CALL   34E
0CAD:  MOVF   71,W
0CAE:  MOVLB  0C
0CAF:  MOVWF  6B
0CB0:  MOVLW  37
0CB1:  MOVWF  6C
0CB2:  MOVLB  00
0CB3:  CALL   3A8
0CB4:  MOVLW  0D
0CB5:  MOVLB  0E
0CB6:  MOVWF  43
0CB7:  MOVLB  00
0CB8:  CALL   020
0CB9:  MOVLW  0A
0CBA:  MOVLB  0E
0CBB:  MOVWF  43
0CBC:  MOVLB  00
0CBD:  CALL   020
....................     fprintf(PC, "\tSMF  MEAS   Use Counter      : 0x%08LX\r\n", smf_meas_use_counter);
0CBE:  MOVLW  D7
0CBF:  MOVLB  03
0CC0:  MOVWF  11
0CC1:  MOVLW  00
0CC2:  MOVWF  12
0CC3:  BCF    03.0
0CC4:  MOVLW  22
0CC5:  MOVLB  0C
0CC6:  MOVWF  6B
0CC7:  MOVLB  00
0CC8:  CALL   34E
0CC9:  MOVLB  08
0CCA:  MOVF   49,W
0CCB:  MOVLB  0C
0CCC:  MOVWF  6B
0CCD:  MOVLW  37
0CCE:  MOVWF  6C
0CCF:  MOVLB  00
0CD0:  CALL   3A8
0CD1:  MOVLB  08
0CD2:  MOVF   48,W
0CD3:  MOVLB  0C
0CD4:  MOVWF  6B
0CD5:  MOVLW  37
0CD6:  MOVWF  6C
0CD7:  MOVLB  00
0CD8:  CALL   3A8
0CD9:  MOVLB  08
0CDA:  MOVF   47,W
0CDB:  MOVLB  0C
0CDC:  MOVWF  6B
0CDD:  MOVLW  37
0CDE:  MOVWF  6C
0CDF:  MOVLB  00
0CE0:  CALL   3A8
0CE1:  MOVLB  08
0CE2:  MOVF   46,W
0CE3:  MOVLB  0C
0CE4:  MOVWF  6B
0CE5:  MOVLW  37
0CE6:  MOVWF  6C
0CE7:  MOVLB  00
0CE8:  CALL   3A8
0CE9:  MOVLW  0D
0CEA:  MOVLB  0E
0CEB:  MOVWF  43
0CEC:  MOVLB  00
0CED:  CALL   020
0CEE:  MOVLW  0A
0CEF:  MOVLB  0E
0CF0:  MOVWF  43
0CF1:  MOVLB  00
0CF2:  CALL   020
....................     fprintf(PC, "\tSMF  MEAS   Loop Counter     : 0x%02X\r\n", smf_meas_loop_counter);
0CF3:  MOVLW  EC
0CF4:  MOVLB  03
0CF5:  MOVWF  11
0CF6:  MOVLW  00
0CF7:  MOVWF  12
0CF8:  BCF    03.0
0CF9:  MOVLW  22
0CFA:  MOVLB  0C
0CFB:  MOVWF  6B
0CFC:  MOVLB  00
0CFD:  CALL   34E
0CFE:  MOVF   72,W
0CFF:  MOVLB  0C
0D00:  MOVWF  6B
0D01:  MOVLW  37
0D02:  MOVWF  6C
0D03:  MOVLB  00
0D04:  CALL   3A8
0D05:  MOVLW  0D
0D06:  MOVLB  0E
0D07:  MOVWF  43
0D08:  MOVLB  00
0D09:  CALL   020
0D0A:  MOVLW  0A
0D0B:  MOVLB  0E
0D0C:  MOVWF  43
0D0D:  MOVLB  00
0D0E:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Use Counter      : 0x%08LX\r\n", misf_piclog_use_counter);
0D0F:  MOVLW  01
0D10:  MOVLB  03
0D11:  MOVWF  11
0D12:  MOVLW  01
0D13:  MOVWF  12
0D14:  BCF    03.0
0D15:  MOVLW  22
0D16:  MOVLB  0C
0D17:  MOVWF  6B
0D18:  MOVLB  00
0D19:  CALL   34E
0D1A:  MOVLB  08
0D1B:  MOVF   4D,W
0D1C:  MOVLB  0C
0D1D:  MOVWF  6B
0D1E:  MOVLW  37
0D1F:  MOVWF  6C
0D20:  MOVLB  00
0D21:  CALL   3A8
0D22:  MOVLB  08
0D23:  MOVF   4C,W
0D24:  MOVLB  0C
0D25:  MOVWF  6B
0D26:  MOVLW  37
0D27:  MOVWF  6C
0D28:  MOVLB  00
0D29:  CALL   3A8
0D2A:  MOVLB  08
0D2B:  MOVF   4B,W
0D2C:  MOVLB  0C
0D2D:  MOVWF  6B
0D2E:  MOVLW  37
0D2F:  MOVWF  6C
0D30:  MOVLB  00
0D31:  CALL   3A8
0D32:  MOVLB  08
0D33:  MOVF   4A,W
0D34:  MOVLB  0C
0D35:  MOVWF  6B
0D36:  MOVLW  37
0D37:  MOVWF  6C
0D38:  MOVLB  00
0D39:  CALL   3A8
0D3A:  MOVLW  0D
0D3B:  MOVLB  0E
0D3C:  MOVWF  43
0D3D:  MOVLB  00
0D3E:  CALL   020
0D3F:  MOVLW  0A
0D40:  MOVLB  0E
0D41:  MOVWF  43
0D42:  MOVLB  00
0D43:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Uncopyed Counter : 0x%08LX\r\n", misf_piclog_uncopyed_counter);
0D44:  MOVLW  16
0D45:  MOVLB  03
0D46:  MOVWF  11
0D47:  MOVLW  01
0D48:  MOVWF  12
0D49:  BCF    03.0
0D4A:  MOVLW  22
0D4B:  MOVLB  0C
0D4C:  MOVWF  6B
0D4D:  MOVLB  00
0D4E:  CALL   34E
0D4F:  MOVLB  08
0D50:  MOVF   51,W
0D51:  MOVLB  0C
0D52:  MOVWF  6B
0D53:  MOVLW  37
0D54:  MOVWF  6C
0D55:  MOVLB  00
0D56:  CALL   3A8
0D57:  MOVLB  08
0D58:  MOVF   50,W
0D59:  MOVLB  0C
0D5A:  MOVWF  6B
0D5B:  MOVLW  37
0D5C:  MOVWF  6C
0D5D:  MOVLB  00
0D5E:  CALL   3A8
0D5F:  MOVLB  08
0D60:  MOVF   4F,W
0D61:  MOVLB  0C
0D62:  MOVWF  6B
0D63:  MOVLW  37
0D64:  MOVWF  6C
0D65:  MOVLB  00
0D66:  CALL   3A8
0D67:  MOVLB  08
0D68:  MOVF   4E,W
0D69:  MOVLB  0C
0D6A:  MOVWF  6B
0D6B:  MOVLW  37
0D6C:  MOVWF  6C
0D6D:  MOVLB  00
0D6E:  CALL   3A8
0D6F:  MOVLW  0D
0D70:  MOVLB  0E
0D71:  MOVWF  43
0D72:  MOVLB  00
0D73:  CALL   020
0D74:  MOVLW  0A
0D75:  MOVLB  0E
0D76:  MOVWF  43
0D77:  MOVLB  00
0D78:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Loop Counter     : 0x%02X\r\n", misf_piclog_loop_counter);
0D79:  MOVLW  2B
0D7A:  MOVLB  03
0D7B:  MOVWF  11
0D7C:  MOVLW  01
0D7D:  MOVWF  12
0D7E:  BCF    03.0
0D7F:  MOVLW  22
0D80:  MOVLB  0C
0D81:  MOVWF  6B
0D82:  MOVLB  00
0D83:  CALL   34E
0D84:  MOVF   73,W
0D85:  MOVLB  0C
0D86:  MOVWF  6B
0D87:  MOVLW  37
0D88:  MOVWF  6C
0D89:  MOVLB  00
0D8A:  CALL   3A8
0D8B:  MOVLW  0D
0D8C:  MOVLB  0E
0D8D:  MOVWF  43
0D8E:  MOVLB  00
0D8F:  CALL   020
0D90:  MOVLW  0A
0D91:  MOVLB  0E
0D92:  MOVWF  43
0D93:  MOVLB  00
0D94:  CALL   020
....................     fprintf(PC, "\tMISF PICLOG Write Counter    : 0x%02X\r\n", misf_piclog_write_counter);
0D95:  MOVLW  40
0D96:  MOVLB  03
0D97:  MOVWF  11
0D98:  MOVLW  01
0D99:  MOVWF  12
0D9A:  BCF    03.0
0D9B:  MOVLW  22
0D9C:  MOVLB  0C
0D9D:  MOVWF  6B
0D9E:  MOVLB  00
0D9F:  CALL   34E
0DA0:  MOVF   74,W
0DA1:  MOVLB  0C
0DA2:  MOVWF  6B
0DA3:  MOVLW  37
0DA4:  MOVWF  6C
0DA5:  MOVLB  00
0DA6:  CALL   3A8
0DA7:  MOVLW  0D
0DA8:  MOVLB  0E
0DA9:  MOVWF  43
0DAA:  MOVLB  00
0DAB:  CALL   020
0DAC:  MOVLW  0A
0DAD:  MOVLB  0E
0DAE:  MOVWF  43
0DAF:  MOVLB  00
0DB0:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Use Counter      : 0x%08LX\r\n", misf_meas_use_counter);
0DB1:  MOVLW  55
0DB2:  MOVLB  03
0DB3:  MOVWF  11
0DB4:  MOVLW  01
0DB5:  MOVWF  12
0DB6:  BCF    03.0
0DB7:  MOVLW  22
0DB8:  MOVLB  0C
0DB9:  MOVWF  6B
0DBA:  MOVLB  00
0DBB:  CALL   34E
0DBC:  MOVLB  08
0DBD:  MOVF   55,W
0DBE:  MOVLB  0C
0DBF:  MOVWF  6B
0DC0:  MOVLW  37
0DC1:  MOVWF  6C
0DC2:  MOVLB  00
0DC3:  CALL   3A8
0DC4:  MOVLB  08
0DC5:  MOVF   54,W
0DC6:  MOVLB  0C
0DC7:  MOVWF  6B
0DC8:  MOVLW  37
0DC9:  MOVWF  6C
0DCA:  MOVLB  00
0DCB:  CALL   3A8
0DCC:  MOVLB  08
0DCD:  MOVF   53,W
0DCE:  MOVLB  0C
0DCF:  MOVWF  6B
0DD0:  MOVLW  37
0DD1:  MOVWF  6C
0DD2:  MOVLB  00
0DD3:  CALL   3A8
0DD4:  MOVLB  08
0DD5:  MOVF   52,W
0DD6:  MOVLB  0C
0DD7:  MOVWF  6B
0DD8:  MOVLW  37
0DD9:  MOVWF  6C
0DDA:  MOVLB  00
0DDB:  CALL   3A8
0DDC:  MOVLW  0D
0DDD:  MOVLB  0E
0DDE:  MOVWF  43
0DDF:  MOVLB  00
0DE0:  CALL   020
0DE1:  MOVLW  0A
0DE2:  MOVLB  0E
0DE3:  MOVWF  43
0DE4:  MOVLB  00
0DE5:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Uncopyed Counter : 0x%08LX\r\n", misf_meas_uncopyed_counter);  
0DE6:  MOVLW  6A
0DE7:  MOVLB  03
0DE8:  MOVWF  11
0DE9:  MOVLW  01
0DEA:  MOVWF  12
0DEB:  BCF    03.0
0DEC:  MOVLW  22
0DED:  MOVLB  0C
0DEE:  MOVWF  6B
0DEF:  MOVLB  00
0DF0:  CALL   34E
0DF1:  MOVLB  08
0DF2:  MOVF   59,W
0DF3:  MOVLB  0C
0DF4:  MOVWF  6B
0DF5:  MOVLW  37
0DF6:  MOVWF  6C
0DF7:  MOVLB  00
0DF8:  CALL   3A8
0DF9:  MOVLB  08
0DFA:  MOVF   58,W
0DFB:  MOVLB  0C
0DFC:  MOVWF  6B
0DFD:  MOVLW  37
0DFE:  MOVWF  6C
0DFF:  MOVLB  00
0E00:  CALL   3A8
0E01:  MOVLB  08
0E02:  MOVF   57,W
0E03:  MOVLB  0C
0E04:  MOVWF  6B
0E05:  MOVLW  37
0E06:  MOVWF  6C
0E07:  MOVLB  00
0E08:  CALL   3A8
0E09:  MOVLB  08
0E0A:  MOVF   56,W
0E0B:  MOVLB  0C
0E0C:  MOVWF  6B
0E0D:  MOVLW  37
0E0E:  MOVWF  6C
0E0F:  MOVLB  00
0E10:  CALL   3A8
0E11:  MOVLW  0D
0E12:  MOVLB  0E
0E13:  MOVWF  43
0E14:  MOVLB  00
0E15:  CALL   020
0E16:  MOVLW  0A
0E17:  MOVLB  0E
0E18:  MOVWF  43
0E19:  MOVLB  00
0E1A:  CALL   020
....................     fprintf(PC, "\tMISF MEAS   Loop Counter     : 0x%02X\r\n", misf_meas_loop_counter);    
0E1B:  MOVLW  7F
0E1C:  MOVLB  03
0E1D:  MOVWF  11
0E1E:  MOVLW  01
0E1F:  MOVWF  12
0E20:  BCF    03.0
0E21:  MOVLW  22
0E22:  MOVLB  0C
0E23:  MOVWF  6B
0E24:  MOVLB  00
0E25:  CALL   34E
0E26:  MOVF   75,W
0E27:  MOVLB  0C
0E28:  MOVWF  6B
0E29:  MOVLW  37
0E2A:  MOVWF  6C
0E2B:  MOVLB  00
0E2C:  CALL   3A8
0E2D:  MOVLW  0D
0E2E:  MOVLB  0E
0E2F:  MOVWF  43
0E30:  MOVLB  00
0E31:  CALL   020
0E32:  MOVLW  0A
0E33:  MOVLB  0E
0E34:  MOVWF  43
0E35:  MOVLB  00
0E36:  CALL   020
....................     fprintf(PC, "\tComplete\r\n");
0E37:  MOVLW  94
0E38:  MOVLB  03
0E39:  MOVWF  11
0E3A:  MOVLW  01
0E3B:  MOVWF  12
0E3C:  MOVLB  00
0E3D:  CALL   045
0E3E:  RETURN
.................... }
.................... 
.................... void smf_init()
.................... {
....................    //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... }
.................... 
.................... void write_misf_address_area()
.................... {
....................     //fprintf(PC, "Write MISF Address Area (Big Endian)\r\n");
....................     unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data buffer
*
1440:  MOVLB  0C
1441:  CLRF   43
1442:  CLRF   44
1443:  CLRF   45
1444:  CLRF   46
1445:  CLRF   47
1446:  CLRF   48
1447:  CLRF   49
1448:  CLRF   4A
1449:  CLRF   4B
144A:  CLRF   4C
144B:  CLRF   4D
144C:  CLRF   4E
144D:  CLRF   4F
144E:  CLRF   50
144F:  CLRF   51
1450:  CLRF   52
1451:  CLRF   53
1452:  CLRF   54
1453:  CLRF   55
1454:  CLRF   56
1455:  CLRF   57
1456:  CLRF   58
1457:  CLRF   59
1458:  CLRF   5A
1459:  CLRF   5B
145A:  CLRF   5C
145B:  CLRF   5D
145C:  CLRF   5E
145D:  CLRF   5F
145E:  CLRF   60
145F:  CLRF   61
1460:  CLRF   62
1461:  CLRF   63
1462:  CLRF   64
1463:  CLRF   65
1464:  CLRF   66
1465:  CLRF   67
1466:  CLRF   68
1467:  CLRF   69
1468:  CLRF   6A
1469:  CLRF   6B
146A:  CLRF   6C
146B:  CLRF   6D
146C:  CLRF   6E
146D:  CLRF   6F
146E:  MOVLB  0D
146F:  CLRF   20
1470:  CLRF   21
1471:  CLRF   22
1472:  CLRF   23
1473:  CLRF   24
1474:  CLRF   25
1475:  CLRF   26
1476:  CLRF   27
1477:  CLRF   28
1478:  CLRF   29
1479:  CLRF   2A
147A:  CLRF   2B
147B:  CLRF   2C
147C:  CLRF   2D
147D:  CLRF   2E
147E:  CLRF   2F
147F:  CLRF   30
1480:  CLRF   31
1481:  CLRF   32
.................... 
....................     // 0〜3: smf_piclog_use_counter（MSB→LSB）
....................     writedata[0] = (smf_piclog_use_counter >> 24) & 0xFF;
1482:  MOVLB  08
1483:  MOVF   45,W
1484:  MOVLB  0D
1485:  MOVWF  35
1486:  CLRF   36
1487:  CLRF   37
1488:  CLRF   38
1489:  MOVF   35,W
148A:  MOVLB  0C
148B:  MOVWF  43
....................     writedata[1] = (smf_piclog_use_counter >> 16) & 0xFF;
148C:  MOVLB  08
148D:  MOVF   44,W
148E:  MOVLB  0D
148F:  MOVWF  35
1490:  MOVLB  08
1491:  MOVF   45,W
1492:  MOVLB  0D
1493:  MOVWF  36
1494:  CLRF   37
1495:  CLRF   38
1496:  MOVF   35,W
1497:  MOVLB  0C
1498:  MOVWF  44
....................     writedata[2] = (smf_piclog_use_counter >> 8) & 0xFF;
1499:  MOVLB  08
149A:  MOVF   43,W
149B:  MOVLB  0D
149C:  MOVWF  35
149D:  MOVLB  08
149E:  MOVF   44,W
149F:  MOVLB  0D
14A0:  MOVWF  36
14A1:  MOVLB  08
14A2:  MOVF   45,W
14A3:  MOVLB  0D
14A4:  MOVWF  37
14A5:  CLRF   38
14A6:  MOVF   35,W
14A7:  MOVLB  0C
14A8:  MOVWF  45
....................     writedata[3] = smf_piclog_use_counter & 0xFF;
14A9:  MOVLB  08
14AA:  MOVF   42,W
14AB:  MOVLB  0C
14AC:  MOVWF  46
.................... 
....................     // 4: smf_piclog_loop_counter
....................     writedata[4] = smf_piclog_loop_counter;
14AD:  MOVF   71,W
14AE:  MOVWF  47
.................... 
....................     // 5〜8: smf_meas_use_counter（MSB→LSB）
....................     writedata[5] = (smf_meas_use_counter >> 24) & 0xFF;
14AF:  MOVLB  08
14B0:  MOVF   49,W
14B1:  MOVLB  0D
14B2:  MOVWF  35
14B3:  CLRF   36
14B4:  CLRF   37
14B5:  CLRF   38
14B6:  MOVF   35,W
14B7:  MOVLB  0C
14B8:  MOVWF  48
....................     writedata[6] = (smf_meas_use_counter >> 16) & 0xFF;
14B9:  MOVLB  08
14BA:  MOVF   48,W
14BB:  MOVLB  0D
14BC:  MOVWF  35
14BD:  MOVLB  08
14BE:  MOVF   49,W
14BF:  MOVLB  0D
14C0:  MOVWF  36
14C1:  CLRF   37
14C2:  CLRF   38
14C3:  MOVF   35,W
14C4:  MOVLB  0C
14C5:  MOVWF  49
....................     writedata[7] = (smf_meas_use_counter >> 8) & 0xFF;
14C6:  MOVLB  08
14C7:  MOVF   47,W
14C8:  MOVLB  0D
14C9:  MOVWF  35
14CA:  MOVLB  08
14CB:  MOVF   48,W
14CC:  MOVLB  0D
14CD:  MOVWF  36
14CE:  MOVLB  08
14CF:  MOVF   49,W
14D0:  MOVLB  0D
14D1:  MOVWF  37
14D2:  CLRF   38
14D3:  MOVF   35,W
14D4:  MOVLB  0C
14D5:  MOVWF  4A
....................     writedata[8] = smf_meas_use_counter & 0xFF;
14D6:  MOVLB  08
14D7:  MOVF   46,W
14D8:  MOVLB  0C
14D9:  MOVWF  4B
.................... 
....................     // 9: smf_meas_loop_counter
....................     writedata[9] = smf_meas_loop_counter;
14DA:  MOVF   72,W
14DB:  MOVWF  4C
.................... 
....................     // 10〜13: misf_piclog_use_counter（MSB→LSB）
....................     writedata[10] = (misf_piclog_use_counter >> 24) & 0xFF;
14DC:  MOVLB  08
14DD:  MOVF   4D,W
14DE:  MOVLB  0D
14DF:  MOVWF  35
14E0:  CLRF   36
14E1:  CLRF   37
14E2:  CLRF   38
14E3:  MOVF   35,W
14E4:  MOVLB  0C
14E5:  MOVWF  4D
....................     writedata[11] = (misf_piclog_use_counter >> 16) & 0xFF;
14E6:  MOVLB  08
14E7:  MOVF   4C,W
14E8:  MOVLB  0D
14E9:  MOVWF  35
14EA:  MOVLB  08
14EB:  MOVF   4D,W
14EC:  MOVLB  0D
14ED:  MOVWF  36
14EE:  CLRF   37
14EF:  CLRF   38
14F0:  MOVF   35,W
14F1:  MOVLB  0C
14F2:  MOVWF  4E
....................     writedata[12] = (misf_piclog_use_counter >> 8) & 0xFF;
14F3:  MOVLB  08
14F4:  MOVF   4B,W
14F5:  MOVLB  0D
14F6:  MOVWF  35
14F7:  MOVLB  08
14F8:  MOVF   4C,W
14F9:  MOVLB  0D
14FA:  MOVWF  36
14FB:  MOVLB  08
14FC:  MOVF   4D,W
14FD:  MOVLB  0D
14FE:  MOVWF  37
14FF:  CLRF   38
1500:  MOVF   35,W
1501:  MOVLB  0C
1502:  MOVWF  4F
....................     writedata[13] = misf_piclog_use_counter & 0xFF;
1503:  MOVLB  08
1504:  MOVF   4A,W
1505:  MOVLB  0C
1506:  MOVWF  50
.................... 
....................     // 14: misf_piclog_loop_counter
....................     writedata[14] = misf_piclog_loop_counter;
1507:  MOVF   73,W
1508:  MOVWF  51
.................... 
....................     // 15〜18: misf_piclog_uncopyed_counter（MSB→LSB）
....................     writedata[15] = (misf_piclog_uncopyed_counter >> 24) & 0xFF;
1509:  MOVLB  08
150A:  MOVF   51,W
150B:  MOVLB  0D
150C:  MOVWF  35
150D:  CLRF   36
150E:  CLRF   37
150F:  CLRF   38
1510:  MOVF   35,W
1511:  MOVLB  0C
1512:  MOVWF  52
....................     writedata[16] = (misf_piclog_uncopyed_counter >> 16) & 0xFF;
1513:  MOVLB  08
1514:  MOVF   50,W
1515:  MOVLB  0D
1516:  MOVWF  35
1517:  MOVLB  08
1518:  MOVF   51,W
1519:  MOVLB  0D
151A:  MOVWF  36
151B:  CLRF   37
151C:  CLRF   38
151D:  MOVF   35,W
151E:  MOVLB  0C
151F:  MOVWF  53
....................     writedata[17] = (misf_piclog_uncopyed_counter >> 8) & 0xFF;
1520:  MOVLB  08
1521:  MOVF   4F,W
1522:  MOVLB  0D
1523:  MOVWF  35
1524:  MOVLB  08
1525:  MOVF   50,W
1526:  MOVLB  0D
1527:  MOVWF  36
1528:  MOVLB  08
1529:  MOVF   51,W
152A:  MOVLB  0D
152B:  MOVWF  37
152C:  CLRF   38
152D:  MOVF   35,W
152E:  MOVLB  0C
152F:  MOVWF  54
....................     writedata[18] = misf_piclog_uncopyed_counter & 0xFF;
1530:  MOVLB  08
1531:  MOVF   4E,W
1532:  MOVLB  0C
1533:  MOVWF  55
.................... 
....................     // 19〜22: misf_piclog_write_counter（MSB→LSB）
....................     writedata[19] = (misf_piclog_write_counter >> 24) & 0xFF;
1534:  MOVLW  00
1535:  MOVWF  56
....................     writedata[20] = (misf_piclog_write_counter >> 16) & 0xFF;
1536:  MOVWF  57
....................     writedata[21] = (misf_piclog_write_counter >> 8) & 0xFF;
1537:  MOVWF  58
....................     writedata[22] = misf_piclog_write_counter & 0xFF;
1538:  MOVF   74,W
1539:  MOVWF  59
.................... 
....................     // 23〜26: misf_meas_use_counter（MSB→LSB）
....................     writedata[23] = (misf_meas_use_counter >> 24) & 0xFF;
153A:  MOVLB  08
153B:  MOVF   55,W
153C:  MOVLB  0D
153D:  MOVWF  35
153E:  CLRF   36
153F:  CLRF   37
1540:  CLRF   38
1541:  MOVF   35,W
1542:  MOVLB  0C
1543:  MOVWF  5A
....................     writedata[24] = (misf_meas_use_counter >> 16) & 0xFF;
1544:  MOVLB  08
1545:  MOVF   54,W
1546:  MOVLB  0D
1547:  MOVWF  35
1548:  MOVLB  08
1549:  MOVF   55,W
154A:  MOVLB  0D
154B:  MOVWF  36
154C:  CLRF   37
154D:  CLRF   38
154E:  MOVF   35,W
154F:  MOVLB  0C
1550:  MOVWF  5B
....................     writedata[25] = (misf_meas_use_counter >> 8) & 0xFF;
1551:  MOVLB  08
1552:  MOVF   53,W
1553:  MOVLB  0D
1554:  MOVWF  35
1555:  MOVLB  08
1556:  MOVF   54,W
1557:  MOVLB  0D
1558:  MOVWF  36
1559:  MOVLB  08
155A:  MOVF   55,W
155B:  MOVLB  0D
155C:  MOVWF  37
155D:  CLRF   38
155E:  MOVF   35,W
155F:  MOVLB  0C
1560:  MOVWF  5C
....................     writedata[26] = misf_meas_use_counter & 0xFF;
1561:  MOVLB  08
1562:  MOVF   52,W
1563:  MOVLB  0C
1564:  MOVWF  5D
.................... 
....................     // 27: misf_meas_loop_counter
....................     writedata[27] = misf_meas_loop_counter;
1565:  MOVF   75,W
1566:  MOVWF  5E
.................... 
....................     // 28〜31: misf_meas_uncopyed_counter（MSB→LSB）
....................     writedata[28] = (misf_meas_uncopyed_counter >> 24) & 0xFF;
1567:  MOVLB  08
1568:  MOVF   59,W
1569:  MOVLB  0D
156A:  MOVWF  35
156B:  CLRF   36
156C:  CLRF   37
156D:  CLRF   38
156E:  MOVF   35,W
156F:  MOVLB  0C
1570:  MOVWF  5F
....................     writedata[29] = (misf_meas_uncopyed_counter >> 16) & 0xFF;
1571:  MOVLB  08
1572:  MOVF   58,W
1573:  MOVLB  0D
1574:  MOVWF  35
1575:  MOVLB  08
1576:  MOVF   59,W
1577:  MOVLB  0D
1578:  MOVWF  36
1579:  CLRF   37
157A:  CLRF   38
157B:  MOVF   35,W
157C:  MOVLB  0C
157D:  MOVWF  60
....................     writedata[30] = (misf_meas_uncopyed_counter >> 8) & 0xFF;
157E:  MOVLB  08
157F:  MOVF   57,W
1580:  MOVLB  0D
1581:  MOVWF  35
1582:  MOVLB  08
1583:  MOVF   58,W
1584:  MOVLB  0D
1585:  MOVWF  36
1586:  MOVLB  08
1587:  MOVF   59,W
1588:  MOVLB  0D
1589:  MOVWF  37
158A:  CLRF   38
158B:  MOVF   35,W
158C:  MOVLB  0C
158D:  MOVWF  61
....................     writedata[31] = misf_meas_uncopyed_counter & 0xFF;
158E:  MOVLB  08
158F:  MOVF   56,W
1590:  MOVLB  0C
1591:  MOVWF  62
.................... 
....................     if (!is_connect(mis_fm)) {
1592:  MOVLB  08
1593:  MOVF   5D,W
1594:  MOVLB  0D
1595:  MOVWF  37
1596:  MOVLB  08
1597:  MOVF   5C,W
1598:  MOVLB  0D
1599:  MOVWF  36
159A:  MOVLB  08
159B:  MOVF   5B,W
159C:  MOVLB  0D
159D:  MOVWF  35
159E:  MOVLB  08
159F:  MOVF   5A,W
15A0:  MOVLB  0D
15A1:  MOVWF  34
15A2:  MOVLP  08
15A3:  MOVLB  00
15A4:  CALL   22E
15A5:  MOVLP  10
15A6:  MOVF   78,F
15A7:  BTFSS  03.2
15A8:  GOTO   5B3
....................         fprintf(PC, "Mission Flash is not connected\r\n");
15A9:  MOVLW  9A
15AA:  MOVLB  03
15AB:  MOVWF  11
15AC:  MOVLW  01
15AD:  MOVWF  12
15AE:  MOVLP  08
15AF:  MOVLB  00
15B0:  CALL   045
15B1:  MOVLP  10
....................         return;
15B2:  GOTO   5E6
....................     }
....................     subsector_4kByte_erase(mis_fm, ADDRESS_MANEGE_START); // 4KBサブセクタを消去
15B3:  MOVLB  08
15B4:  MOVF   5D,W
15B5:  MOVLB  0D
15B6:  MOVWF  37
15B7:  MOVLB  08
15B8:  MOVF   5C,W
15B9:  MOVLB  0D
15BA:  MOVWF  36
15BB:  MOVLB  08
15BC:  MOVF   5B,W
15BD:  MOVLB  0D
15BE:  MOVWF  35
15BF:  MOVLB  08
15C0:  MOVF   5A,W
15C1:  MOVLB  0D
15C2:  MOVWF  34
15C3:  CLRF   3B
15C4:  CLRF   3A
15C5:  CLRF   39
15C6:  CLRF   38
15C7:  MOVLB  00
15C8:  CALL   19A
....................     // Flash に書き込む
....................     write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
15C9:  MOVLB  08
15CA:  MOVF   5D,W
15CB:  MOVLB  0E
15CC:  MOVWF  42
15CD:  MOVLB  08
15CE:  MOVF   5C,W
15CF:  MOVLB  0E
15D0:  MOVWF  41
15D1:  MOVLB  08
15D2:  MOVF   5B,W
15D3:  MOVLB  0E
15D4:  MOVWF  40
15D5:  MOVLB  08
15D6:  MOVF   5A,W
15D7:  MOVLB  0E
15D8:  MOVWF  3F
15D9:  CLRF   46
15DA:  CLRF   45
15DB:  CLRF   44
15DC:  CLRF   43
15DD:  MOVLW  23
15DE:  MOVWF  48
15DF:  MOVLW  E3
15E0:  MOVWF  47
15E1:  CLRF   4A
15E2:  MOVLW  40
15E3:  MOVWF  49
15E4:  MOVLB  00
15E5:  CALL   000
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define PICLOG_DEBUG
.................... 
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter)
*
1343:  MOVF   7A,W
1344:  MOVLB  0C
1345:  MOVWF  3A
1346:  MOVF   79,W
1347:  MOVWF  39
1348:  MOVF   78,W
1349:  MOVWF  38
134A:  MOVF   77,W
134B:  MOVWF  37
.................... {
....................     unsigned int8 piclog[PICLOG_PACKET_SIZE];
....................     int32 time = get_current_sec();
....................     piclog[0] = (time >> 24) & 0xFF; // Time high byte
134C:  CLRF   45
134D:  CLRF   46
134E:  CLRF   47
134F:  MOVF   3A,W
1350:  MOVWF  31
....................     piclog[1] = (time >> 16) & 0xFF;
1351:  CLRF   46
1352:  CLRF   47
1353:  MOVF   39,W
1354:  MOVWF  32
....................     piclog[2] = (time >> 8) & 0xFF;  // Time middle byte
1355:  CLRF   47
1356:  MOVF   38,W
1357:  MOVWF  33
....................     piclog[3] = time & 0xFF;         // Time low byte
1358:  MOVF   37,W
1359:  MOVWF  34
....................     piclog[4] = function;            // Function code
135A:  MOVF   2F,W
135B:  MOVWF  35
....................     piclog[5] = parameter;           // Parameter code
135C:  MOVF   30,W
135D:  MOVWF  36
.................... 
....................     #ifdef PICLOG_DEBUG
....................         fprintf(PC, "[PICLOG] : ");
135E:  MOVLW  AB
135F:  MOVLB  03
1360:  MOVWF  11
1361:  MOVLW  01
1362:  MOVWF  12
1363:  MOVLP  08
1364:  MOVLB  00
1365:  CALL   045
1366:  MOVLP  10
....................         for (unsigned int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
1367:  MOVLB  0C
1368:  CLRF   3B
1369:  MOVF   3B,W
136A:  SUBLW  05
136B:  BTFSS  03.0
136C:  GOTO   387
....................             fprintf(PC, "%02X ", piclog[i]);
136D:  MOVLW  D1
136E:  ADDWF  3B,W
136F:  MOVWF  04
1370:  MOVLW  23
1371:  MOVWF  05
1372:  BTFSC  03.0
1373:  INCF   05,F
1374:  MOVF   00,W
1375:  MOVWF  43
1376:  MOVWF  6B
1377:  MOVLW  37
1378:  MOVWF  6C
1379:  MOVLP  08
137A:  MOVLB  00
137B:  CALL   3A8
137C:  MOVLP  10
137D:  MOVLW  20
137E:  MOVLB  0E
137F:  MOVWF  43
1380:  MOVLP  08
1381:  MOVLB  00
1382:  CALL   020
1383:  MOVLP  10
1384:  MOVLB  0C
1385:  INCF   3B,F
1386:  GOTO   369
....................         }
....................         fprintf(PC, "\r\n");
1387:  MOVLW  0D
1388:  MOVLB  0E
1389:  MOVWF  43
138A:  MOVLP  08
138B:  MOVLB  00
138C:  CALL   020
138D:  MOVLP  10
138E:  MOVLW  0A
138F:  MOVLB  0E
1390:  MOVWF  43
1391:  MOVLP  08
1392:  MOVLB  00
1393:  CALL   020
1394:  MOVLP  10
....................     #endif
.................... 
....................     unsigned int32 write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1395:  MOVLB  08
1396:  MOVF   4A,W
1397:  MOVLB  0C
1398:  MOVWF  3C
1399:  MOVLB  08
139A:  MOVF   4B,W
139B:  MOVLB  0C
139C:  MOVWF  3D
139D:  MOVLW  02
139E:  MOVLB  08
139F:  ADDWF  4C,W
13A0:  MOVLB  0C
13A1:  MOVWF  3E
13A2:  MOVLW  00
13A3:  MOVLB  08
13A4:  ADDWFC 4D,W
13A5:  MOVLB  0C
13A6:  MOVWF  3F
....................     //fprintf(PC, "Write PICLOG to address: 0x%08LX\r\n", write_address);
....................     
....................     if(is_connect(mis_fm) == FALSE) {
13A7:  MOVLB  08
13A8:  MOVF   5D,W
13A9:  MOVLB  0D
13AA:  MOVWF  37
13AB:  MOVLB  08
13AC:  MOVF   5C,W
13AD:  MOVLB  0D
13AE:  MOVWF  36
13AF:  MOVLB  08
13B0:  MOVF   5B,W
13B1:  MOVLB  0D
13B2:  MOVWF  35
13B3:  MOVLB  08
13B4:  MOVF   5A,W
13B5:  MOVLB  0D
13B6:  MOVWF  34
13B7:  MOVLP  08
13B8:  MOVLB  00
13B9:  CALL   22E
13BA:  MOVLP  10
13BB:  MOVF   78,F
13BC:  BTFSS  03.2
13BD:  GOTO   3C8
....................         fprintf(PC, "Mission Flash is not connected\r\n");
13BE:  MOVLW  B1
13BF:  MOVLB  03
13C0:  MOVWF  11
13C1:  MOVLW  01
13C2:  MOVWF  12
13C3:  MOVLP  08
13C4:  MOVLB  00
13C5:  CALL   045
13C6:  MOVLP  10
....................         return;
13C7:  GOTO   5E6
....................     }
....................     
....................     write_data_bytes(mis_fm, write_address, piclog, PICLOG_PACKET_SIZE);
13C8:  MOVLB  08
13C9:  MOVF   5D,W
13CA:  MOVLB  0E
13CB:  MOVWF  42
13CC:  MOVLB  08
13CD:  MOVF   5C,W
13CE:  MOVLB  0E
13CF:  MOVWF  41
13D0:  MOVLB  08
13D1:  MOVF   5B,W
13D2:  MOVLB  0E
13D3:  MOVWF  40
13D4:  MOVLB  08
13D5:  MOVF   5A,W
13D6:  MOVLB  0E
13D7:  MOVWF  3F
13D8:  MOVLB  0C
13D9:  MOVF   3F,W
13DA:  MOVLB  0E
13DB:  MOVWF  46
13DC:  MOVLB  0C
13DD:  MOVF   3E,W
13DE:  MOVLB  0E
13DF:  MOVWF  45
13E0:  MOVLB  0C
13E1:  MOVF   3D,W
13E2:  MOVLB  0E
13E3:  MOVWF  44
13E4:  MOVLB  0C
13E5:  MOVF   3C,W
13E6:  MOVLB  0E
13E7:  MOVWF  43
13E8:  MOVLW  23
13E9:  MOVWF  48
13EA:  MOVLW  D1
13EB:  MOVWF  47
13EC:  CLRF   4A
13ED:  MOVLW  06
13EE:  MOVWF  49
13EF:  MOVLB  00
13F0:  CALL   000
....................     
....................     // Update the counters
....................     misf_piclog_use_counter += PICLOG_PACKET_SIZE;
13F1:  MOVLW  06
13F2:  MOVLB  08
13F3:  ADDWF  4A,F
13F4:  MOVLW  00
13F5:  ADDWFC 4B,F
13F6:  ADDWFC 4C,F
13F7:  ADDWFC 4D,F
....................     misf_piclog_uncopyed_counter += PICLOG_PACKET_SIZE;
13F8:  MOVLW  06
13F9:  ADDWF  4E,F
13FA:  MOVLW  00
13FB:  ADDWFC 4F,F
13FC:  ADDWFC 50,F
13FD:  ADDWFC 51,F
....................     misf_piclog_write_counter += PICLOG_PACKET_SIZE;
13FE:  MOVLW  06
13FF:  ADDWF  74,F
.................... 
....................     // Next Packet
....................     if (misf_piclog_write_counter + PICLOG_PACKET_SIZE >=  PACKET_SIZE) {
1400:  ADDWF  74,W
1401:  SUBLW  3F
1402:  BTFSC  03.0
1403:  GOTO   440
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
1404:  MOVF   4A,W
1405:  MOVLB  0C
1406:  MOVWF  3C
1407:  MOVLB  08
1408:  MOVF   4B,W
1409:  MOVLB  0C
140A:  MOVWF  3D
140B:  MOVLW  02
140C:  MOVLB  08
140D:  ADDWF  4C,W
140E:  MOVLB  0C
140F:  MOVWF  3E
1410:  MOVLW  00
1411:  MOVLB  08
1412:  ADDWFC 4D,W
1413:  MOVLB  0C
1414:  MOVWF  3F
....................         write_data_bytes(mis_fm, write_address, PICLOG_BLANK_DATA, PICLOG_PACKET_SIZE);
1415:  MOVLB  08
1416:  MOVF   5D,W
1417:  MOVLB  0E
1418:  MOVWF  42
1419:  MOVLB  08
141A:  MOVF   5C,W
141B:  MOVLB  0E
141C:  MOVWF  41
141D:  MOVLB  08
141E:  MOVF   5B,W
141F:  MOVLB  0E
1420:  MOVWF  40
1421:  MOVLB  08
1422:  MOVF   5A,W
1423:  MOVLB  0E
1424:  MOVWF  3F
1425:  MOVLB  0C
1426:  MOVF   3F,W
1427:  MOVLB  0E
1428:  MOVWF  46
1429:  MOVLB  0C
142A:  MOVF   3E,W
142B:  MOVLB  0E
142C:  MOVWF  45
142D:  MOVLB  0C
142E:  MOVF   3D,W
142F:  MOVLB  0E
1430:  MOVWF  44
1431:  MOVLB  0C
1432:  MOVF   3C,W
1433:  MOVLB  0E
1434:  MOVWF  43
1435:  MOVLW  22
1436:  MOVWF  48
1437:  MOVLW  9E
1438:  MOVWF  47
1439:  CLRF   4A
143A:  MOVLW  06
143B:  MOVWF  49
143C:  MOVLB  00
143D:  CALL   000
....................         misf_piclog_write_counter = 0;
143E:  CLRF   74
143F:  MOVLB  08
....................     }
.................... 
.................... 
....................     write_misf_address_area(); // Update the address area after writing
....................     
....................     /*
....................     // Add CRC Check
....................     if (misf_piclog_write_counter >= MISF_PICLOG_MAX_COUNT) {
....................         write_address = ADDRESS_MISF_PICLOG_DATA_START + misf_piclog_use_counter;
....................         write_data_bytes(mis_fm, write_address, *PICLOG_BLANK_DATA, PICLOG_BLANK_SIZE);
....................         unsigned int8 piclog_data_header[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00}; // Initialize blank data
....................         misf_piclog_write_counter = 0; // Reset if max count reached
....................     }
....................     */
....................     #ifdef PICLOG_DEBUG
....................         //fprintf(PC, "PICLOG written: %02X %02X %02X %02X %02X %02X\r\n", piclog_data.bytes[0], data[1], data[2], data[3], data[4], data[5]);
....................     #endif
*
15E6:  RETURN
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... #include "../ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... union AD7490_RESISTOR reg;
.................... struct AD7490_STREAM adf7490_stream;
.................... 
.................... 
.................... void ad7490_init()
.................... {  
....................     // Set default register values
....................     reg.coding = 0; // 1: Two's complement, 0: Binary
*
07EE:  MOVLB  08
07EF:  BCF    62.0
....................     reg.write = 1;
07F0:  BSF    63.3
....................     reg.seq = 0; 
07F1:  BCF    63.2
....................     reg.randge = 0;
07F2:  BCF    62.1
....................     reg.weak_tri = 0; // 1: Weak trigger, 0: Strong trigger
07F3:  BCF    62.2
....................     reg.shadow = 0; // 1: Shadow register, 0: Direct access
07F4:  BCF    62.3
07F5:  MOVLP  38
07F6:  MOVLB  00
07F7:  GOTO   0BE (RETURN)
.................... 
.................... }
.................... 
.................... unsigned int16 ad7490_read(int16 channel)
.................... {   
....................     set_add(channel);
*
2592:  MOVLB  0B
2593:  MOVF   31,W
2594:  MOVWF  35
2595:  MOVF   30,W
2596:  MOVWF  34
....................     set_pm(AD7490_PM_NORMAL);
*
25D0:  MOVLB  0B
25D1:  CLRF   34
....................     //spi_xfer(adf7490_stream.spi_stream, reg.value); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] << %04X\r\n", reg.value);
....................     #endif
....................     
....................     //unsigned int16 ans = spi_xfer(adf7490_stream.spi_stream);
....................     //unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata = 0;
*
25E2:  MOVLB  0B
25E3:  CLRF   33
25E4:  CLRF   32
....................     
....................     #ifdef AD7490_DEBUG
....................         //fprintf(PC,"\t[ADC] >> %04X\r\n", readdata);
....................     #endif
....................     return readdata;
25E5:  MOVF   32,W
25E6:  MOVWF  78
25E7:  MOVF   33,W
25E8:  MOVWF  79
25E9:  MOVLB  00
25EA:  RETURN
.................... }
.................... 
.................... void set_add(int16 channel)
.................... {
....................     reg.add0 = (channel >> 0) & 0x1;
*
2597:  MOVF   34,W
2598:  ANDLW  01
2599:  MOVWF  77
259A:  CLRF   7A
259B:  MOVLB  08
259C:  BCF    62.6
259D:  BTFSC  77.0
259E:  BSF    62.6
....................     reg.add1 = (channel >> 1) & 0x1;
259F:  BCF    03.0
25A0:  MOVLB  0B
25A1:  RRF    35,W
25A2:  MOVWF  37
25A3:  RRF    34,W
25A4:  MOVWF  36
25A5:  ANDLW  01
25A6:  MOVWF  77
25A7:  CLRF   7A
25A8:  MOVLB  08
25A9:  BCF    62.7
25AA:  BTFSC  77.0
25AB:  BSF    62.7
....................     reg.add2 = (channel >> 2) & 0x1;
25AC:  MOVLB  0B
25AD:  RRF    35,W
25AE:  MOVWF  37
25AF:  RRF    34,W
25B0:  MOVWF  36
25B1:  RRF    37,F
25B2:  RRF    36,F
25B3:  MOVLW  3F
25B4:  ANDWF  37,F
25B5:  MOVF   36,W
25B6:  ANDLW  01
25B7:  MOVWF  77
25B8:  CLRF   7A
25B9:  MOVLB  08
25BA:  BCF    63.0
25BB:  BTFSC  77.0
25BC:  BSF    63.0
....................     reg.add3 = (channel >> 3) & 0x1;
25BD:  MOVLB  0B
25BE:  RRF    35,W
25BF:  MOVWF  37
25C0:  RRF    34,W
25C1:  MOVWF  36
25C2:  RRF    37,F
25C3:  RRF    36,F
25C4:  RRF    37,F
25C5:  RRF    36,F
25C6:  MOVLW  1F
25C7:  ANDWF  37,F
25C8:  MOVF   36,W
25C9:  ANDLW  01
25CA:  MOVWF  77
25CB:  CLRF   7A
25CC:  MOVLB  08
25CD:  BCF    63.1
25CE:  BTFSC  77.0
25CF:  BSF    63.1
.................... }
.................... 
.................... void set_pm(int8 powermode)
.................... {
....................     reg.pm0 = (powermode >> 0) & 0x1;
*
25D2:  MOVF   34,W
25D3:  ANDLW  01
25D4:  MOVWF  78
25D5:  MOVLB  08
25D6:  BCF    62.4
25D7:  BTFSC  78.0
25D8:  BSF    62.4
....................     reg.pm1 = (powermode >> 1) & 0x1;
25D9:  BCF    03.0
25DA:  MOVLB  0B
25DB:  RRF    34,W
25DC:  ANDLW  01
25DD:  MOVWF  78
25DE:  MOVLB  08
25DF:  BCF    62.5
25E0:  BTFSC  78.0
25E1:  BSF    62.5
....................     
.................... }
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... #include "../mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
1800:  MOVLB  0B
1801:  CLRF   25
1802:  CLRF   26
1803:  CLRF   27
1804:  CLRF   28
1805:  CLRF   29
1806:  CLRF   2A
1807:  CLRF   2B
1808:  CLRF   2C
1809:  CLRF   2D
180A:  CLRF   2E
180B:  CLRF   2F
180C:  CLRF   30
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
180D:  MOVLW  C2
180E:  MOVLB  03
180F:  MOVWF  11
1810:  MOVLW  01
1811:  MOVWF  12
1812:  MOVLP  08
1813:  MOVLB  00
1814:  CALL   045
1815:  MOVLP  18
....................    fprintf(PC, "\t[BOSS] >>> ");
1816:  MOVLW  D2
1817:  MOVLB  03
1818:  MOVWF  11
1819:  MOVLW  01
181A:  MOVWF  12
181B:  MOVLP  08
181C:  MOVLB  00
181D:  CALL   045
181E:  MOVLP  18
....................    for (int8 i = 0; i < receive_signal_size; i++)
181F:  MOVLB  0B
1820:  CLRF   31
1821:  MOVF   24,W
1822:  SUBWF  31,W
1823:  BTFSC  03.0
1824:  GOTO   03F
....................       fprintf(PC, "%X ", receive_signal[i]);
1825:  MOVF   31,W
1826:  ADDWF  22,W
1827:  MOVWF  04
1828:  MOVLW  00
1829:  ADDWFC 23,W
182A:  MOVWF  05
182B:  MOVF   00,W
182C:  MOVWF  3A
182D:  MOVLB  0C
182E:  MOVWF  6B
182F:  MOVLW  37
1830:  MOVWF  6C
1831:  MOVLP  08
1832:  MOVLB  00
1833:  CALL   3A8
1834:  MOVLP  18
1835:  MOVLW  20
1836:  MOVLB  0E
1837:  MOVWF  43
1838:  MOVLP  08
1839:  MOVLB  00
183A:  CALL   020
183B:  MOVLP  18
183C:  MOVLB  0B
183D:  INCF   31,F
183E:  GOTO   021
....................    fprintf(PC, "\r\n");
183F:  MOVLW  0D
1840:  MOVLB  0E
1841:  MOVWF  43
1842:  MOVLP  08
1843:  MOVLB  00
1844:  CALL   020
1845:  MOVLP  18
1846:  MOVLW  0A
1847:  MOVLB  0E
1848:  MOVWF  43
1849:  MOVLP  08
184A:  MOVLB  00
184B:  CALL   020
184C:  MOVLP  18
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
184D:  MOVLB  0B
184E:  MOVF   23,W
184F:  MOVWF  3B
1850:  MOVF   22,W
1851:  MOVWF  3A
1852:  MOVF   24,W
1853:  MOVWF  3C
*
1890:  MOVF   78,W
1891:  MOVWF  32
....................    if (frame_start_position == -1)
1892:  MOVF   32,W
1893:  SUBLW  FF
1894:  BTFSS  03.2
1895:  GOTO   09B
....................       return command;
1896:  MOVLW  A5
1897:  MOVWF  78
1898:  MOVLW  05
1899:  MOVWF  79
189A:  GOTO   227
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
189B:  MOVF   32,W
189C:  ADDWF  22,W
189D:  MOVWF  33
189E:  MOVLW  00
189F:  ADDWFC 23,W
18A0:  MOVWF  34
18A1:  MOVF   33,W
18A2:  MOVWF  04
18A3:  MOVF   34,W
18A4:  MOVWF  05
18A5:  ADDFSR 00,FSR0
18A6:  MOVF   00,W
18A7:  ANDLW  0F
18A8:  MOVWF  35
18A9:  MOVF   35,W
18AA:  MOVWF  3A
*
18F2:  MOVF   78,W
18F3:  MOVWF  36
....................    if (content_size == -1)
18F4:  MOVF   36,W
18F5:  SUBLW  FF
18F6:  BTFSS  03.2
18F7:  GOTO   0FD
....................       return command;
18F8:  MOVLW  A5
18F9:  MOVWF  78
18FA:  MOVLW  05
18FB:  MOVWF  79
18FC:  GOTO   227
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
18FD:  MOVF   32,W
18FE:  SUBWF  24,W
18FF:  MOVWF  37
....................    
....................    if (!check_crc(frame, receive_frame_size))
1900:  MOVF   34,W
1901:  MOVWF  3B
1902:  MOVF   33,W
1903:  MOVWF  3A
1904:  MOVF   37,W
1905:  MOVWF  3C
*
197E:  MOVF   78,F
197F:  BTFSS  03.2
1980:  GOTO   186
....................       return command;
1981:  MOVLW  A5
1982:  MOVWF  78
1983:  MOVLW  05
1984:  MOVWF  79
1985:  GOTO   227
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
1986:  MOVF   33,W
1987:  MOVWF  04
1988:  MOVF   34,W
1989:  MOVWF  05
198A:  ADDFSR 00,FSR0
198B:  MOVF   00,W
198C:  ANDLW  F0
198D:  MOVWF  77
198E:  SWAPF  77,W
198F:  MOVWF  3A
1990:  MOVLW  0F
1991:  ANDWF  3A,F
1992:  MOVF   3A,W
1993:  MOVWF  3B
*
19F2:  MOVF   78,F
19F3:  BTFSS  03.2
19F4:  GOTO   1FA
....................       return command;
19F5:  MOVLW  A5
19F6:  MOVWF  78
19F7:  MOVLW  05
19F8:  MOVWF  79
19F9:  GOTO   227
.................... 
....................    command.frame_id = frame_id;
19FA:  MOVF   35,W
19FB:  MOVWF  25
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
19FC:  MOVLW  01
19FD:  ADDWF  33,W
19FE:  MOVWF  3A
19FF:  MOVLW  00
1A00:  ADDWFC 34,W
1A01:  MOVWF  3B
1A02:  MOVLW  02
1A03:  SUBWF  37,W
1A04:  MOVWF  3C
1A05:  MOVF   3B,W
1A06:  MOVWF  05
1A07:  MOVF   3A,W
1A08:  MOVWF  04
1A09:  MOVF   3C,W
1A0A:  MOVWF  78
1A0B:  BTFSC  03.2
1A0C:  GOTO   215
1A0D:  MOVLW  23
1A0E:  MOVWF  07
1A0F:  MOVLW  78
1A10:  MOVWF  06
1A11:  MOVIW  [FSR0++],W
1A12:  MOVWI  W,[FSR1++]
1A13:  DECFSZ 78,F
1A14:  GOTO   211
....................    command.size = receive_frame_size-2;
1A15:  MOVLW  02
1A16:  SUBWF  37,W
1A17:  MOVWF  26
....................    command.is_exist = TRUE;
1A18:  BSF    27.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
1A19:  MOVLW  D9
1A1A:  MOVLB  03
1A1B:  MOVWF  11
1A1C:  MOVLW  01
1A1D:  MOVWF  12
1A1E:  MOVLP  08
1A1F:  MOVLB  00
1A20:  CALL   045
1A21:  MOVLP  18
....................    return command;
1A22:  MOVLW  A5
1A23:  MOVWF  78
1A24:  MOVLW  05
1A25:  MOVWF  79
1A26:  MOVLB  0B
1A27:  MOVLP  38
1A28:  MOVLB  00
1A29:  GOTO   0F1 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
1854:  CLRF   3D
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
1855:  CLRF   3D
1856:  MOVLW  01
1857:  SUBWF  3C,W
1858:  SUBWF  3D,W
1859:  BTFSC  03.0
185A:  GOTO   06B
....................       if(receive_signal[i] == SFD)
185B:  MOVF   3D,W
185C:  ADDWF  3A,W
185D:  MOVWF  04
185E:  MOVLW  00
185F:  ADDWFC 3B,W
1860:  MOVWF  05
1861:  MOVF   00,W
1862:  SUBLW  AA
1863:  BTFSS  03.2
1864:  GOTO   069
....................          return i+1;
1865:  MOVLW  01
1866:  ADDWF  3D,W
1867:  MOVWF  78
1868:  GOTO   090
1869:  INCF   3D,F
186A:  GOTO   056
....................    if (receive_signal[i] == SFD)
186B:  MOVF   3D,W
186C:  ADDWF  3A,W
186D:  MOVWF  04
186E:  MOVLW  00
186F:  ADDWFC 3B,W
1870:  MOVWF  05
1871:  MOVF   00,W
1872:  SUBLW  AA
1873:  BTFSS  03.2
1874:  GOTO   083
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
1875:  MOVLW  E7
1876:  MOVLB  03
1877:  MOVWF  11
1878:  MOVLW  01
1879:  MOVWF  12
187A:  MOVLP  08
187B:  MOVLB  00
187C:  CALL   045
187D:  MOVLP  18
....................       return -1;
187E:  MOVLW  FF
187F:  MOVWF  78
1880:  MOVLB  0B
1881:  GOTO   090
....................    }
1882:  GOTO   090
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
1883:  MOVLW  F2
1884:  MOVLB  03
1885:  MOVWF  11
1886:  MOVLW  01
1887:  MOVWF  12
1888:  MOVLP  08
1889:  MOVLB  00
188A:  CALL   045
188B:  MOVLP  18
....................       return -1;
188C:  MOVLW  FF
188D:  MOVWF  78
188E:  MOVLB  0B
188F:  GOTO   090
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
18AB:  CLRF   3B
18AC:  MOVF   3B,W
18AD:  SUBLW  02
18AE:  BTFSS  03.0
18AF:  GOTO   0CA
....................       if (frame_id == frame_ids[i].id)
18B0:  BCF    03.0
18B1:  RLF    3B,W
18B2:  ADDLW  C7
18B3:  MOVWF  04
18B4:  MOVLW  22
18B5:  MOVWF  05
18B6:  BTFSC  03.0
18B7:  INCF   05,F
18B8:  MOVF   00,W
18B9:  SUBWF  3A,W
18BA:  BTFSS  03.2
18BB:  GOTO   0C8
....................          return frame_ids[i].length;
18BC:  BCF    03.0
18BD:  RLF    3B,W
18BE:  ADDLW  01
18BF:  ADDLW  C7
18C0:  MOVWF  04
18C1:  MOVLW  22
18C2:  MOVWF  05
18C3:  BTFSC  03.0
18C4:  INCF   05,F
18C5:  MOVF   00,W
18C6:  MOVWF  78
18C7:  GOTO   0F2
18C8:  INCF   3B,F
18C9:  GOTO   0AC
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
18CA:  MOVLW  FB
18CB:  MOVLB  03
18CC:  MOVWF  11
18CD:  MOVLW  01
18CE:  MOVWF  12
18CF:  BCF    03.0
18D0:  MOVLW  1F
18D1:  MOVLB  0C
18D2:  MOVWF  6B
18D3:  MOVLP  08
18D4:  MOVLB  00
18D5:  CALL   34E
18D6:  MOVLP  18
18D7:  MOVLB  0B
18D8:  MOVF   3A,W
18D9:  MOVLB  0C
18DA:  MOVWF  6B
18DB:  MOVLW  37
18DC:  MOVWF  6C
18DD:  MOVLP  08
18DE:  MOVLB  00
18DF:  CALL   3A8
18E0:  MOVLP  18
18E1:  MOVLW  0D
18E2:  MOVLB  0E
18E3:  MOVWF  43
18E4:  MOVLP  08
18E5:  MOVLB  00
18E6:  CALL   020
18E7:  MOVLP  18
18E8:  MOVLW  0A
18E9:  MOVLB  0E
18EA:  MOVWF  43
18EB:  MOVLP  08
18EC:  MOVLB  00
18ED:  CALL   020
18EE:  MOVLP  18
....................    return -1;
18EF:  MOVLW  FF
18F0:  MOVWF  78
18F1:  MOVLB  0B
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
1906:  MOVLW  01
1907:  SUBWF  3C,W
1908:  ADDWF  3A,W
1909:  MOVWF  04
190A:  MOVLW  00
190B:  ADDWFC 3B,W
190C:  MOVWF  05
190D:  MOVF   00,W
190E:  MOVWF  3D
190F:  MOVLW  01
1910:  SUBWF  3C,W
1911:  MOVWF  3F
1912:  MOVF   3B,W
1913:  MOVWF  41
1914:  MOVF   3A,W
1915:  MOVWF  40
1916:  MOVF   3F,W
1917:  MOVWF  42
1918:  MOVLP  08
1919:  MOVLB  00
191A:  CALL   797
191B:  MOVLP  18
191C:  MOVF   78,W
191D:  MOVLB  0B
191E:  MOVWF  3E
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
191F:  MOVF   3E,W
1920:  SUBWF  3D,W
1921:  BTFSS  03.2
1922:  GOTO   127
....................       return TRUE;
1923:  MOVLW  01
1924:  MOVWF  78
1925:  GOTO   17E
1926:  GOTO   17E
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
1927:  MOVLW  0D
1928:  MOVLB  03
1929:  MOVWF  11
192A:  MOVLW  02
192B:  MOVWF  12
192C:  MOVLP  08
192D:  MOVLB  00
192E:  CALL   045
192F:  MOVLP  18
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
1930:  MOVLW  16
1931:  MOVLB  03
1932:  MOVWF  11
1933:  MOVLW  02
1934:  MOVWF  12
1935:  BCF    03.0
1936:  MOVLW  13
1937:  MOVLB  0C
1938:  MOVWF  6B
1939:  MOVLP  08
193A:  MOVLB  00
193B:  CALL   34E
193C:  MOVLP  18
193D:  MOVLB  0B
193E:  MOVF   3D,W
193F:  MOVLB  0C
1940:  MOVWF  6B
1941:  MOVLW  37
1942:  MOVWF  6C
1943:  MOVLP  08
1944:  MOVLB  00
1945:  CALL   3A8
1946:  MOVLP  18
1947:  MOVLW  0D
1948:  MOVLB  0E
1949:  MOVWF  43
194A:  MOVLP  08
194B:  MOVLB  00
194C:  CALL   020
194D:  MOVLP  18
194E:  MOVLW  0A
194F:  MOVLB  0E
1950:  MOVWF  43
1951:  MOVLP  08
1952:  MOVLB  00
1953:  CALL   020
1954:  MOVLP  18
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
1955:  MOVLW  22
1956:  MOVLB  03
1957:  MOVWF  11
1958:  MOVLW  02
1959:  MOVWF  12
195A:  BCF    03.0
195B:  MOVLW  13
195C:  MOVLB  0C
195D:  MOVWF  6B
195E:  MOVLP  08
195F:  MOVLB  00
1960:  CALL   34E
1961:  MOVLP  18
1962:  MOVLB  0B
1963:  MOVF   3E,W
1964:  MOVLB  0C
1965:  MOVWF  6B
1966:  MOVLW  37
1967:  MOVWF  6C
1968:  MOVLP  08
1969:  MOVLB  00
196A:  CALL   3A8
196B:  MOVLP  18
196C:  MOVLW  0D
196D:  MOVLB  0E
196E:  MOVWF  43
196F:  MOVLP  08
1970:  MOVLB  00
1971:  CALL   020
1972:  MOVLP  18
1973:  MOVLW  0A
1974:  MOVLB  0E
1975:  MOVWF  43
1976:  MOVLP  08
1977:  MOVLB  00
1978:  CALL   020
1979:  MOVLP  18
....................       return FALSE;
197A:  MOVLW  00
197B:  MOVWF  78
197C:  MOVLB  0B
197D:  GOTO   17E
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
1994:  MOVF   3B,W
1995:  SUBLW  0C
1996:  BTFSS  03.2
1997:  GOTO   19C
....................       return TRUE;
1998:  MOVLW  01
1999:  MOVWF  78
199A:  GOTO   1F2
199B:  GOTO   1F2
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
199C:  MOVLW  2E
199D:  MOVLB  03
199E:  MOVWF  11
199F:  MOVLW  02
19A0:  MOVWF  12
19A1:  MOVLP  08
19A2:  MOVLB  00
19A3:  CALL   045
19A4:  MOVLP  18
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
19A5:  MOVLW  3F
19A6:  MOVLB  03
19A7:  MOVWF  11
19A8:  MOVLW  02
19A9:  MOVWF  12
19AA:  BCF    03.0
19AB:  MOVLW  13
19AC:  MOVLB  0C
19AD:  MOVWF  6B
19AE:  MOVLP  08
19AF:  MOVLB  00
19B0:  CALL   34E
19B1:  MOVLP  18
19B2:  MOVLB  0B
19B3:  MOVF   3B,W
19B4:  MOVLB  0C
19B5:  MOVWF  6B
19B6:  MOVLW  37
19B7:  MOVWF  6C
19B8:  MOVLP  08
19B9:  MOVLB  00
19BA:  CALL   3A8
19BB:  MOVLP  18
19BC:  MOVLW  0D
19BD:  MOVLB  0E
19BE:  MOVWF  43
19BF:  MOVLP  08
19C0:  MOVLB  00
19C1:  CALL   020
19C2:  MOVLP  18
19C3:  MOVLW  0A
19C4:  MOVLB  0E
19C5:  MOVWF  43
19C6:  MOVLP  08
19C7:  MOVLB  00
19C8:  CALL   020
19C9:  MOVLP  18
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
19CA:  MOVLW  4B
19CB:  MOVLB  03
19CC:  MOVWF  11
19CD:  MOVLW  02
19CE:  MOVWF  12
19CF:  BCF    03.0
19D0:  MOVLW  13
19D1:  MOVLB  0C
19D2:  MOVWF  6B
19D3:  MOVLP  08
19D4:  MOVLB  00
19D5:  CALL   34E
19D6:  MOVLP  18
19D7:  MOVLW  0C
19D8:  MOVLB  0C
19D9:  MOVWF  6B
19DA:  MOVLW  37
19DB:  MOVWF  6C
19DC:  MOVLP  08
19DD:  MOVLB  00
19DE:  CALL   3A8
19DF:  MOVLP  18
19E0:  MOVLW  0D
19E1:  MOVLB  0E
19E2:  MOVWF  43
19E3:  MOVLP  08
19E4:  MOVLB  00
19E5:  CALL   020
19E6:  MOVLP  18
19E7:  MOVLW  0A
19E8:  MOVLB  0E
19E9:  MOVWF  43
19EA:  MOVLP  08
19EB:  MOVLB  00
19EC:  CALL   020
19ED:  MOVLP  18
....................       return FALSE;  
19EE:  MOVLW  00
19EF:  MOVWF  78
19F0:  MOVLB  0B
19F1:  GOTO   1F2
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
15E7:  MOVLW  AA
15E8:  MOVLB  0B
15E9:  MOVWF  24
....................    data[1] = (BOSS_PIC << 4) | frame_id;
15EA:  MOVF   20,W
15EB:  IORLW  50
15EC:  MOVWF  25
....................    memcpy(&data[2], content, size);
15ED:  MOVF   22,W
15EE:  MOVWF  05
15EF:  MOVF   21,W
15F0:  MOVWF  04
15F1:  MOVF   23,W
15F2:  MOVWF  78
15F3:  BTFSC  03.2
15F4:  GOTO   5FD
15F5:  MOVLW  23
15F6:  MOVWF  07
15F7:  MOVLW  76
15F8:  MOVWF  06
15F9:  MOVIW  [FSR0++],W
15FA:  MOVWI  W,[FSR1++]
15FB:  DECFSZ 78,F
15FC:  GOTO   5F9
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
15FD:  MOVLW  02
15FE:  ADDWF  23,W
15FF:  MOVWF  34
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
1600:  MOVLW  74
1601:  ADDWF  34,W
1602:  MOVWF  37
1603:  MOVLW  23
1604:  MOVWF  38
1605:  BTFSC  03.0
1606:  INCF   38,F
1607:  MOVLW  01
1608:  SUBWF  34,W
1609:  MOVWF  39
160A:  MOVLW  23
160B:  MOVWF  41
160C:  MOVLW  75
160D:  MOVWF  40
160E:  MOVF   39,W
160F:  MOVWF  42
1610:  MOVLP  08
1611:  MOVLB  00
1612:  CALL   797
1613:  MOVLP  10
1614:  MOVLB  0B
1615:  MOVF   38,W
1616:  MOVWF  05
1617:  MOVF   37,W
1618:  MOVWF  04
1619:  MOVF   78,W
161A:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
161B:  MOVLW  01
161C:  ADDWF  34,W
161D:  MOVWF  35
....................    
....................    transmit(data, data_size);
161E:  MOVLW  23
161F:  MOVWF  38
1620:  MOVLW  74
1621:  MOVWF  37
1622:  MOVF   35,W
1623:  MOVWF  39
*
1671:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
1624:  CLRF   3A
1625:  MOVF   39,W
1626:  SUBWF  3A,W
1627:  BTFSC  03.0
1628:  GOTO   63A
....................       fputc(data[i], BOSS);
1629:  MOVF   3A,W
162A:  ADDWF  37,W
162B:  MOVWF  04
162C:  MOVLW  00
162D:  ADDWFC 38,W
162E:  MOVWF  05
162F:  MOVF   00,W
1630:  MOVWF  3C
1631:  MOVF   3C,W
*
1637:  MOVLB  0B
1638:  INCF   3A,F
1639:  GOTO   625
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
163A:  MOVLW  57
163B:  MOVLB  03
163C:  MOVWF  11
163D:  MOVLW  02
163E:  MOVWF  12
163F:  MOVLP  08
1640:  MOVLB  00
1641:  CALL   045
1642:  MOVLP  10
....................    for(int i = 0; i < data_size; i++)
1643:  MOVLB  0B
1644:  CLRF   3B
1645:  MOVF   39,W
1646:  SUBWF  3B,W
1647:  BTFSC  03.0
1648:  GOTO   663
....................       fprintf(PC, "%X ", data[i]);
1649:  MOVF   3B,W
164A:  ADDWF  37,W
164B:  MOVWF  04
164C:  MOVLW  00
164D:  ADDWFC 38,W
164E:  MOVWF  05
164F:  MOVF   00,W
1650:  MOVWF  3C
1651:  MOVLB  0C
1652:  MOVWF  6B
1653:  MOVLW  37
1654:  MOVWF  6C
1655:  MOVLP  08
1656:  MOVLB  00
1657:  CALL   3A8
1658:  MOVLP  10
1659:  MOVLW  20
165A:  MOVLB  0E
165B:  MOVWF  43
165C:  MOVLP  08
165D:  MOVLB  00
165E:  CALL   020
165F:  MOVLP  10
1660:  MOVLB  0B
1661:  INCF   3B,F
1662:  GOTO   645
....................    fprintf(PC, "\r\n");
1663:  MOVLW  0D
1664:  MOVLB  0E
1665:  MOVWF  43
1666:  MOVLP  08
1667:  MOVLB  00
1668:  CALL   020
1669:  MOVLP  10
166A:  MOVLW  0A
166B:  MOVLB  0E
166C:  MOVWF  43
166D:  MOVLP  08
166E:  MOVLB  00
166F:  CALL   020
1670:  MOVLP  10
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
0F97:  MOVLB  0B
0F98:  MOVF   40,W
0F99:  MOVWF  04
0F9A:  MOVF   41,W
0F9B:  MOVWF  05
0F9C:  MOVIW  [FSR0+00],W
0F9D:  MOVWF  43
0F9E:  MOVLW  01
0F9F:  MOVWF  44
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
0FA0:  MOVF   42,W
0FA1:  SUBWF  44,W
0FA2:  BTFSC  03.0
0FA3:  GOTO   7AE
....................       crc ^= frame[i++];
0FA4:  MOVF   44,W
0FA5:  INCF   44,F
0FA6:  ADDWF  40,W
0FA7:  MOVWF  04
0FA8:  MOVLW  00
0FA9:  ADDWFC 41,W
0FAA:  MOVWF  05
0FAB:  MOVF   00,W
0FAC:  XORWF  43,F
0FAD:  GOTO   7A0
....................    return crc;
0FAE:  MOVF   43,W
0FAF:  MOVWF  78
0FB0:  MOVLB  00
0FB1:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    return command;
.................... }
.................... #Separate
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0FD5:  MOVLW  0F
0FD6:  MOVLB  0B
0FD7:  MOVWF  20
0FD8:  CLRF   22
0FD9:  CLRF   21
0FDA:  CLRF   23
0FDB:  MOVLP  10
0FDC:  MOVLB  00
0FDD:  CALL   5E7
0FDE:  MOVLP  08
0FDF:  RETURN
.................... }
.................... #Separate
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
1FD2:  MOVLW  03
1FD3:  MOVLB  0B
1FD4:  MOVWF  20
1FD5:  MOVLW  20
1FD6:  MOVWF  22
1FD7:  MOVLW  09
1FD8:  MOVWF  21
1FD9:  MOVLW  04
1FDA:  MOVWF  23
1FDB:  MOVLP  10
1FDC:  MOVLB  00
1FDD:  CALL   5E7
1FDE:  MOVLP  18
1FDF:  MOVLP  20
1FE0:  GOTO   7C5 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... /*
.................... unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
....................       crc ^= frame[i++];
....................    return crc;
.................... }
.................... */
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... /*
.................... struct AD7490_STREAM ad7490_stream = {
....................     ADC_STREAM,    // spi_stream
....................     ADC_CS  // cs_pin
.................... };
.................... */
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0893:  MOVLW  F7
0894:  MOVLB  03
0895:  MOVWF  11
0896:  MOVLW  02
0897:  MOVWF  12
0898:  MOVLB  00
0899:  CALL   045
....................     output_low(CONNECT_CIGS);
089A:  MOVLB  01
089B:  BCF    0E.0
089C:  MOVLB  02
089D:  BCF    0E.0
....................     output_low(EN_NPWR);
089E:  MOVLB  01
089F:  BCF    0E.3
08A0:  MOVLB  02
08A1:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
08A2:  MOVLW  FF
08A3:  MOVLB  03
08A4:  MOVWF  11
08A5:  MOVLW  02
08A6:  MOVWF  12
08A7:  MOVLB  00
08A8:  CALL   045
08A9:  MOVLP  38
08AA:  GOTO   0B2 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
08AB:  MOVLW  05
08AC:  MOVLB  03
08AD:  MOVWF  11
08AE:  MOVLW  03
08AF:  MOVWF  12
08B0:  MOVLB  00
08B1:  CALL   045
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
08B2:  MOVLW  78
08B3:  MOVLB  01
08B4:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , DAC_VSS_FVR);
08B5:  BCF    1E.0
08B6:  BCF    1E.1
08B7:  BCF    1E.2
08B8:  MOVLW  00
08B9:  MOVLB  03
08BA:  MOVWF  0C
08BB:  MOVWF  10
08BC:  MOVWF  0D
08BD:  MOVLW  EB
08BE:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
08BF:  MOVLB  01
08C0:  BCF    1E.4
08C1:  BSF    1E.5
08C2:  BSF    1E.6
08C3:  BCF    1E.7
08C4:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT2 | DAC_VSS_FVR);                                        //DAC output at pin DAC output1 from 0-VDD volts  
08C5:  MOVLW  98
08C6:  MOVLB  02
08C7:  MOVWF  18
....................    dac_write(50);                                                               
08C8:  MOVLW  32
08C9:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
08CA:  MOVLW  0E
08CB:  MOVLB  03
08CC:  MOVWF  11
08CD:  MOVLW  03
08CE:  MOVWF  12
08CF:  MOVLB  00
08D0:  CALL   045
08D1:  MOVLP  38
08D2:  GOTO   0B5 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter[])
.................... {
....................     // 
....................     fprintf(PC, "Start SWEEP\r\n");
....................     unsigned int8 measurement_step = parameter[1]; // Get the measurement step from the parameter array
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
....................     output_high(CONNECT_CIGS);
.................... 
....................     // read header data
....................     measured_time = get_current_sec(); // read time from timer0
....................     measured_pd = ad7490_read(ADC_PD); // read PD value
....................     measured_temp_top = ad7490_read(ADC_TEMP_TOP); // read temperature at top
....................     measured_temp_bot = ad7490_read(ADC_TEMP_BOT); // read temperature at bottom
....................     measured_open_voltage = ad7490_read(ADC_CIGS_VOLT); // read open voltage at CIGS
.................... 
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
....................     {    
....................         // set DAC value
....................         dac_write(count);
....................         delay_us(100); // wait for the DAC to stabilize
.................... 
....................         // read CIGS voltage and current      
....................         delay_us(10); // wait for the ADC to stabilize
....................         data_buffer[count*2] = ad7490_read(ADC_CIGS_VOLT);
....................         data_buffer[count*2+1] = ad7490_read(ADC_CIGS_CURR); // read voltage at adc pin
.................... 
....................     }
.................... 
....................     output_low(CONNECT_CIGS);
....................     fprintf(PC, "END SWEEP\r\n");
.................... 
....................     fprintf(PC, "Start CIGS data conversion\r\n");
....................     unsigned int8 packetdata[PACKET_SIZE] = {0x00};
....................     
....................     make_meas_header(packetdata, parameter); // Create measurement header
....................     unsigned int8 packetbytecounter = HEADER_SIZE; // Start after header size
....................     
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
....................     {        
....................         packetdata[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
....................         packetdata[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
....................         packetdata[i*3+2]    = data_buffer[i*2+1] & 0xFF;
....................         packetbytecounter += 3; // Each CIGS data takes 3 bytes
.................... 
....................         if (packetbytecounter == PACKET_SIZE-1) {
....................             // Add CRC
....................             packetdata[PACKET_SIZE-2] = calc_crc8(packetdata, PACKET_SIZE-1);            
....................             
....................             // Flash 書き込み処理
....................             unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................             write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
.................... 
....................             // カウンタ更新
....................             misf_meas_use_counter += PACKET_SIZE;
....................             misf_meas_uncopyed_counter += PACKET_SIZE;
....................             write_misf_address_area();
....................         }
....................     }
.................... 
....................     if (packetbytecounter < PACKET_SIZE) {
....................         // Fill the remaining bytes with 0x00
....................         for (unsigned int8 j = packetbytecounter; j < PACKET_SIZE; j++) {
....................             packetdata[j] = 0x00;
....................         }
....................         // Flash 書き込み処理
....................         unsigned int32 write_address = ADDRESS_MISF_MEASUREMENT_START + misf_meas_use_counter;
....................         write_data_bytes(mis_fm, write_address, packetdata, PACKET_SIZE);
....................         
....................         // カウンタ更新
....................         misf_meas_use_counter += PACKET_SIZE;
....................         misf_meas_uncopyed_counter += PACKET_SIZE;
....................         write_misf_address_area();
....................     }
.................... 
.................... }
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd)
.................... {
....................     packetdata[0] = START_MAKER; // Header start
....................     packetdata[1] = START_MAKER; // Header start
....................     
....................     // Add uplink cmd
....................     packetdata[2]  = cmd[0]; // Command ID
....................     packetdata[3]  = cmd[1]; // Param1
....................     packetdata[4]  = cmd[2]; // Param2
....................     packetdata[5]  = cmd[3]; // Param3 
....................     packetdata[6]  = cmd[4]; // Param4
....................     packetdata[7]  = cmd[5]; // Param5
....................     packetdata[8]  = cmd[6]; // Param6
....................     packetdata[9]  = cmd[7]; // Param7
....................     packetdata[10] = cmd[8]; // Reserved byte
.................... 
....................     // Add timestamp
....................     packetdata[11] = measured_time >> 24 & 0xFF; // Time high byte
....................     packetdata[12] = measured_time >> 16 & 0xFF; //
....................     packetdata[13] = measured_time >> 8 & 0xFF;  // Time middle byte
....................     packetdata[14] = measured_time & 0xFF;         // Time low
....................     
....................     
....................     //cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
.................... 
....................     // Add PD value
....................     packetdata[15] = ( measured_pd >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[16] = ( measured_pd & 0x0F ) << 4 | ( measured_open_voltage >>8 )& 0x0F;
....................     packetdata[17] = measured_open_voltage & 0xFF; // PD end
....................     packetdata[18] = ( measured_temp_top >> 4 ) &  0xFF; // PD start low byte
....................     packetdata[19] = ( measured_temp_top & 0x0F ) << 4 | ( measured_temp_bot >>8 )& 0x0F;
....................     packetdata[20] = measured_temp_bot & 0xFF; // PD end
....................     packetdata[21] = RESERVED_VALUE;
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].mission_type = data->mission_type;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src         = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size        = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... #separate
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
296B:  MOVLB  0A
296C:  MOVF   5E,W
296D:  SUBWF  5D,W
296E:  BTFSS  03.2
296F:  GOTO   17F
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
2970:  MOVLW  48
2971:  MOVLB  03
2972:  MOVWF  11
2973:  MOVLW  03
2974:  MOVWF  12
2975:  MOVLP  08
2976:  MOVLB  00
2977:  CALL   045
2978:  MOVLP  28
....................       return 0x00;
2979:  MOVLW  00
297A:  MOVWF  78
297B:  MOVWF  79
297C:  GOTO   1BA
....................    }
297D:  GOTO   1BA
297E:  MOVLB  0A
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
297F:  MOVF   5D,W
2980:  MOVLB  0C
2981:  MOVWF  44
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
2982:  MOVLW  01
2983:  MOVLB  0A
2984:  ADDWF  5D,W
2985:  ANDLW  0F
2986:  MOVWF  5D
....................       return &smf_queue.smf_data[current_head];
2987:  MOVLB  0C
2988:  MOVF   44,W
2989:  MOVWF  45
298A:  MOVLW  09
298B:  MOVWF  46
*
29B0:  MOVF   78,W
29B1:  ADDLW  CD
29B2:  MOVWF  78
29B3:  MOVLW  22
29B4:  MOVWF  7A
29B5:  BTFSC  03.0
29B6:  INCF   7A,F
29B7:  MOVF   7A,W
29B8:  MOVWF  79
29B9:  MOVLB  00
....................    }
29BA:  MOVLP  30
29BB:  GOTO   58C (RETURN)
.................... }
.................... #separate
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0FF3:  MOVLB  0A
0FF4:  MOVF   5E,W
0FF5:  SUBWF  5D,W
0FF6:  BTFSC  03.2
0FF7:  GOTO   7FA
0FF8:  MOVLW  00
0FF9:  GOTO   7FB
0FFA:  MOVLW  01
0FFB:  MOVWF  78
0FFC:  MOVLB  00
0FFD:  RETURN
.................... }
.................... 
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type)
.................... {
....................    MissionTypeStruct mis_struct = {0};
*
29BC:  MOVLB  0C
29BD:  CLRF   6D
29BE:  CLRF   6E
29BF:  CLRF   6F
29C0:  MOVLB  0D
29C1:  CLRF   20
29C2:  CLRF   21
29C3:  CLRF   22
29C4:  CLRF   23
29C5:  CLRF   24
29C6:  CLRF   25
....................    
....................    if (mis_type == APRS_DATA)
29C7:  MOVLB  0C
29C8:  MOVF   6C,F
29C9:  BTFSS  03.2
29CA:  GOTO   1E0
....................    {
....................       mis_struct.start_address   = 0x02400000;
29CB:  MOVLW  02
29CC:  MOVLB  0D
29CD:  MOVWF  20
29CE:  MOVLW  40
29CF:  MOVLB  0C
29D0:  MOVWF  6F
29D1:  CLRF   6E
29D2:  CLRF   6D
....................       mis_struct.end_address     = 0x02500FFF;
29D3:  MOVLW  02
29D4:  MOVLB  0D
29D5:  MOVWF  24
29D6:  MOVLW  50
29D7:  MOVWF  23
29D8:  MOVLW  0F
29D9:  MOVWF  22
29DA:  MOVLW  FF
29DB:  MOVWF  21
....................       mis_struct.mission_flag    = 0b10000000;
29DC:  MOVLW  80
29DD:  MOVWF  25
....................    }
29DE:  GOTO   239
29DF:  MOVLB  0C
....................    else if (mis_type == IN_VEHICLE)
29E0:  DECFSZ 6C,W
29E1:  GOTO   1F8
....................    {
....................       mis_struct.start_address   = 0x02501000;
29E2:  MOVLW  02
29E3:  MOVLB  0D
29E4:  MOVWF  20
29E5:  MOVLW  50
29E6:  MOVLB  0C
29E7:  MOVWF  6F
29E8:  MOVLW  10
29E9:  MOVWF  6E
29EA:  CLRF   6D
....................       mis_struct.end_address     = 0x02501FFF;
29EB:  MOVLW  02
29EC:  MOVLB  0D
29ED:  MOVWF  24
29EE:  MOVLW  50
29EF:  MOVWF  23
29F0:  MOVLW  1F
29F1:  MOVWF  22
29F2:  MOVLW  FF
29F3:  MOVWF  21
....................       mis_struct.mission_flag    = 0b10000001;  
29F4:  MOVLW  81
29F5:  MOVWF  25
....................    }
29F6:  GOTO   239
29F7:  MOVLB  0C
....................    else if (mis_type == ECOSYSTEM_DATA)
29F8:  MOVF   6C,W
29F9:  SUBLW  02
29FA:  BTFSS  03.2
29FB:  GOTO   212
....................    {
....................       mis_struct.start_address   = 0x02506000;
29FC:  MOVLW  02
29FD:  MOVLB  0D
29FE:  MOVWF  20
29FF:  MOVLW  50
2A00:  MOVLB  0C
2A01:  MOVWF  6F
2A02:  MOVLW  60
2A03:  MOVWF  6E
2A04:  CLRF   6D
....................       mis_struct.end_address     = 0x02516FFF;
2A05:  MOVLW  02
2A06:  MOVLB  0D
2A07:  MOVWF  24
2A08:  MOVLW  51
2A09:  MOVWF  23
2A0A:  MOVLW  6F
2A0B:  MOVWF  22
2A0C:  MOVLW  FF
2A0D:  MOVWF  21
....................       mis_struct.mission_flag    = 0b10000011;  
2A0E:  MOVLW  83
2A0F:  MOVWF  25
....................    }
2A10:  GOTO   239
2A11:  MOVLB  0C
....................    else if (mis_type == APRS_PIC_LOG)
2A12:  MOVF   6C,W
2A13:  SUBLW  03
2A14:  BTFSS  03.2
2A15:  GOTO   22C
....................    {
....................       mis_struct.start_address   = 0x02517000;
2A16:  MOVLW  02
2A17:  MOVLB  0D
2A18:  MOVWF  20
2A19:  MOVLW  51
2A1A:  MOVLB  0C
2A1B:  MOVWF  6F
2A1C:  MOVLW  70
2A1D:  MOVWF  6E
2A1E:  CLRF   6D
....................       mis_struct.end_address     = 0x02517FFF;
2A1F:  MOVLW  02
2A20:  MOVLB  0D
2A21:  MOVWF  24
2A22:  MOVLW  51
2A23:  MOVWF  23
2A24:  MOVLW  7F
2A25:  MOVWF  22
2A26:  MOVLW  FF
2A27:  MOVWF  21
....................       mis_struct.mission_flag    = 0b10000100;  
2A28:  MOVLW  84
2A29:  MOVWF  25
....................    }
2A2A:  GOTO   239
2A2B:  MOVLB  0C
....................    else
....................    {
....................       // undefined mission type. output `ff` as default
....................       mis_struct.start_address   = 0xFFFFFFFF;
2A2C:  MOVLW  FF
2A2D:  MOVLB  0D
2A2E:  MOVWF  20
2A2F:  MOVLB  0C
2A30:  MOVWF  6F
2A31:  MOVWF  6E
2A32:  MOVWF  6D
....................       mis_struct.end_address     = 0xFFFFFFFF;
2A33:  MOVLB  0D
2A34:  MOVWF  24
2A35:  MOVWF  23
2A36:  MOVWF  22
2A37:  MOVWF  21
....................       mis_struct.mission_flag    = 0b11111111; 
2A38:  MOVWF  25
....................    }
....................    
....................    return mis_struct;
2A39:  MOVLW  6D
2A3A:  MOVWF  78
2A3B:  MOVLW  06
2A3C:  MOVWF  79
2A3D:  MOVLP  28
2A3E:  MOVLB  00
2A3F:  GOTO   3B6 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // ___________________ Mode Functions ______________________
.................... void mode_dummy(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start MODE DUMMY\r\n");
*
1672:  MOVLW  55
1673:  MOVLB  03
1674:  MOVWF  11
1675:  MOVLW  03
1676:  MOVWF  12
1677:  MOVLP  08
1678:  MOVLB  00
1679:  CALL   045
167A:  MOVLP  10
.................... 
....................    DUMMY_CMD dummy_cmd;
....................    dummy_cmd.id = uplinkcmd[0]; // Get the command ID from the uplink command
167B:  MOVLB  0B
167C:  MOVF   25,W
167D:  MOVWF  04
167E:  MOVF   26,W
167F:  MOVWF  05
1680:  MOVIW  [FSR0+00],W
1681:  MOVWF  27
....................    dummy_cmd.param1 = 
....................       ((unsigned int32)uplinkcmd[1] << 24) |
....................       ((unsigned int32)uplinkcmd[2] << 16) |
....................       ((unsigned int32)uplinkcmd[3] << 8)  |
....................       ((unsigned int32)uplinkcmd[4]);
1682:  MOVF   25,W
1683:  MOVWF  04
1684:  MOVF   26,W
1685:  MOVWF  05
1686:  ADDFSR 01,FSR0
1687:  MOVF   00,W
1688:  CLRF   31
1689:  CLRF   30
168A:  CLRF   2F
168B:  MOVWF  2E
168C:  MOVWF  31
168D:  CLRF   2E
168E:  CLRF   2F
168F:  CLRF   30
1690:  MOVF   25,W
1691:  MOVWF  04
1692:  MOVF   26,W
1693:  MOVWF  05
1694:  ADDFSR 02,FSR0
1695:  MOVF   00,W
1696:  CLRF   36
1697:  CLRF   35
1698:  CLRF   34
1699:  MOVWF  33
169A:  MOVF   34,W
169B:  MOVWF  7A
169C:  MOVF   33,W
169D:  MOVWF  79
169E:  CLRF   77
169F:  CLRF   78
16A0:  MOVF   77,W
16A1:  IORWF  2E,F
16A2:  MOVF   78,W
16A3:  IORWF  2F,F
16A4:  MOVF   33,W
16A5:  IORWF  30,F
16A6:  MOVF   34,W
16A7:  IORWF  31,F
16A8:  MOVF   25,W
16A9:  MOVWF  04
16AA:  MOVF   26,W
16AB:  MOVWF  05
16AC:  ADDFSR 03,FSR0
16AD:  MOVF   00,W
16AE:  CLRF   36
16AF:  CLRF   35
16B0:  CLRF   34
16B1:  MOVWF  33
16B2:  MOVF   35,W
16B3:  MOVWF  7A
16B4:  MOVF   34,W
16B5:  MOVWF  79
16B6:  MOVF   33,W
16B7:  MOVWF  78
16B8:  CLRF   77
16B9:  MOVF   77,W
16BA:  IORWF  2E,F
16BB:  MOVF   33,W
16BC:  IORWF  2F,F
16BD:  MOVF   34,W
16BE:  IORWF  30,F
16BF:  MOVF   35,W
16C0:  IORWF  31,F
16C1:  MOVF   25,W
16C2:  MOVWF  04
16C3:  MOVF   26,W
16C4:  MOVWF  05
16C5:  MOVIW  [FSR0+04],W
16C6:  MOVWF  77
16C7:  CLRF   78
16C8:  CLRF   79
16C9:  CLRF   7A
16CA:  MOVF   77,W
16CB:  IORWF  2E,W
16CC:  MOVWF  28
16CD:  MOVF   78,W
16CE:  IORWF  2F,W
16CF:  MOVWF  29
16D0:  MOVF   79,W
16D1:  IORWF  30,W
16D2:  MOVWF  2A
16D3:  MOVF   7A,W
16D4:  IORWF  31,W
16D5:  MOVWF  2B
....................    dummy_cmd.param2 = 
....................       ((unsigned int16)uplinkcmd[5] << 8) |
....................       ((unsigned int16)uplinkcmd[6]);
16D6:  MOVF   25,W
16D7:  MOVWF  04
16D8:  MOVF   26,W
16D9:  MOVWF  05
16DA:  ADDFSR 05,FSR0
16DB:  MOVF   00,W
16DC:  CLRF   2F
16DD:  MOVWF  2E
16DE:  MOVWF  2F
16DF:  CLRF   2E
16E0:  MOVF   25,W
16E1:  MOVWF  04
16E2:  MOVF   26,W
16E3:  MOVWF  05
16E4:  MOVIW  [FSR0+06],W
16E5:  CLRF   7A
16E6:  IORWF  2E,W
16E7:  MOVWF  2C
16E8:  MOVF   7A,W
16E9:  IORWF  2F,W
16EA:  MOVWF  2D
....................    fprintf(PC, "\tMODE     : %02X\r\n", dummy_cmd.id);
16EB:  MOVLW  5F
16EC:  MOVLB  03
16ED:  MOVWF  11
16EE:  MOVLW  03
16EF:  MOVWF  12
16F0:  BCF    03.0
16F1:  MOVLW  0C
16F2:  MOVLB  0C
16F3:  MOVWF  6B
16F4:  MOVLP  08
16F5:  MOVLB  00
16F6:  CALL   34E
16F7:  MOVLP  10
16F8:  MOVLB  0B
16F9:  MOVF   27,W
16FA:  MOVLB  0C
16FB:  MOVWF  6B
16FC:  MOVLW  37
16FD:  MOVWF  6C
16FE:  MOVLP  08
16FF:  MOVLB  00
1700:  CALL   3A8
1701:  MOVLP  10
1702:  MOVLW  0D
1703:  MOVLB  0E
1704:  MOVWF  43
1705:  MOVLP  08
1706:  MOVLB  00
1707:  CALL   020
1708:  MOVLP  10
1709:  MOVLW  0A
170A:  MOVLB  0E
170B:  MOVWF  43
170C:  MOVLP  08
170D:  MOVLB  00
170E:  CALL   020
170F:  MOVLP  10
....................    fprintf(PC, "\tParam1   : 0x%08LX\r\n", dummy_cmd.param1);
1710:  MOVLW  69
1711:  MOVLB  03
1712:  MOVWF  11
1713:  MOVLW  03
1714:  MOVWF  12
1715:  BCF    03.0
1716:  MOVLW  0E
1717:  MOVLB  0C
1718:  MOVWF  6B
1719:  MOVLP  08
171A:  MOVLB  00
171B:  CALL   34E
171C:  MOVLP  10
171D:  MOVLB  0B
171E:  MOVF   2B,W
171F:  MOVLB  0C
1720:  MOVWF  6B
1721:  MOVLW  37
1722:  MOVWF  6C
1723:  MOVLP  08
1724:  MOVLB  00
1725:  CALL   3A8
1726:  MOVLP  10
1727:  MOVLB  0B
1728:  MOVF   2A,W
1729:  MOVLB  0C
172A:  MOVWF  6B
172B:  MOVLW  37
172C:  MOVWF  6C
172D:  MOVLP  08
172E:  MOVLB  00
172F:  CALL   3A8
1730:  MOVLP  10
1731:  MOVLB  0B
1732:  MOVF   29,W
1733:  MOVLB  0C
1734:  MOVWF  6B
1735:  MOVLW  37
1736:  MOVWF  6C
1737:  MOVLP  08
1738:  MOVLB  00
1739:  CALL   3A8
173A:  MOVLP  10
173B:  MOVLB  0B
173C:  MOVF   28,W
173D:  MOVLB  0C
173E:  MOVWF  6B
173F:  MOVLW  37
1740:  MOVWF  6C
1741:  MOVLP  08
1742:  MOVLB  00
1743:  CALL   3A8
1744:  MOVLP  10
1745:  MOVLW  0D
1746:  MOVLB  0E
1747:  MOVWF  43
1748:  MOVLP  08
1749:  MOVLB  00
174A:  CALL   020
174B:  MOVLP  10
174C:  MOVLW  0A
174D:  MOVLB  0E
174E:  MOVWF  43
174F:  MOVLP  08
1750:  MOVLB  00
1751:  CALL   020
1752:  MOVLP  10
....................    fprintf(PC, "\tParam2   : 0x%04LX\r\n", dummy_cmd.param2);
1753:  MOVLW  74
1754:  MOVLB  03
1755:  MOVWF  11
1756:  MOVLW  03
1757:  MOVWF  12
1758:  BCF    03.0
1759:  MOVLW  0E
175A:  MOVLB  0C
175B:  MOVWF  6B
175C:  MOVLP  08
175D:  MOVLB  00
175E:  CALL   34E
175F:  MOVLP  10
1760:  MOVLB  0B
1761:  MOVF   2D,W
1762:  MOVLB  0C
1763:  MOVWF  6B
1764:  MOVLW  37
1765:  MOVWF  6C
1766:  MOVLP  08
1767:  MOVLB  00
1768:  CALL   3A8
1769:  MOVLP  10
176A:  MOVLB  0B
176B:  MOVF   2C,W
176C:  MOVLB  0C
176D:  MOVWF  6B
176E:  MOVLW  37
176F:  MOVWF  6C
1770:  MOVLP  08
1771:  MOVLB  00
1772:  CALL   3A8
1773:  MOVLP  10
1774:  MOVLW  0D
1775:  MOVLB  0E
1776:  MOVWF  43
1777:  MOVLP  08
1778:  MOVLB  00
1779:  CALL   020
177A:  MOVLP  10
177B:  MOVLW  0A
177C:  MOVLB  0E
177D:  MOVWF  43
177E:  MOVLP  08
177F:  MOVLB  00
1780:  CALL   020
1781:  MOVLP  10
.................... 
....................    piclog_make(dummy_cmd.id, 0x00); // Log the command execution
1782:  MOVLB  0B
1783:  MOVF   27,W
1784:  MOVLB  0C
1785:  MOVWF  2F
1786:  CLRF   30
1787:  MOVLB  00
1788:  CALL   33B
.................... 
....................    // This is a dummy function for testing purposes
....................    // You can add your own code here
....................    fprintf(PC, "End MODE DUMMY\r\n");
1789:  MOVLW  7F
178A:  MOVLB  03
178B:  MOVWF  11
178C:  MOVLW  03
178D:  MOVWF  12
178E:  MOVLP  08
178F:  MOVLB  00
1790:  CALL   045
1791:  MOVLP  10
1792:  MOVLP  28
1793:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
.................... 
.................... 
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
....................    piclog_make(parameter[0], sweep_step); // Log the command execution
....................    //adc_init();
....................    sweep(parameter);
....................    
....................    
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... #Separate
.................... void mode_iv_meas_adc()
.................... {
.................... 
....................    fprintf(PC, "Start SWEEP\r\n");
*
2639:  MOVLW  A2
263A:  MOVLB  03
263B:  MOVWF  11
263C:  MOVLW  03
263D:  MOVWF  12
263E:  MOVLP  08
263F:  MOVLB  00
2640:  CALL   045
2641:  MOVLP  20
....................    unsigned int8 measurement_step = 100; // Get the measurement step from the parameter array
2642:  MOVLW  64
2643:  MOVLB  0B
2644:  MOVWF  25
....................    fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
2645:  MOVLW  A9
2646:  MOVLB  03
2647:  MOVWF  11
2648:  MOVLW  03
2649:  MOVWF  12
264A:  BCF    03.0
264B:  MOVLW  0E
264C:  MOVLB  0C
264D:  MOVWF  6B
264E:  MOVLP  08
264F:  MOVLB  00
2650:  CALL   34E
2651:  MOVLP  20
2652:  MOVLB  0B
2653:  MOVF   25,W
2654:  MOVLB  0C
2655:  MOVWF  55
2656:  MOVLW  1B
2657:  MOVWF  56
2658:  MOVLP  18
2659:  MOVLB  00
265A:  CALL   784
265B:  MOVLP  20
265C:  MOVLW  0D
265D:  MOVLB  0E
265E:  MOVWF  43
265F:  MOVLP  08
2660:  MOVLB  00
2661:  CALL   020
2662:  MOVLP  20
2663:  MOVLW  0A
2664:  MOVLB  0E
2665:  MOVWF  43
2666:  MOVLP  08
2667:  MOVLB  00
2668:  CALL   020
2669:  MOVLP  20
....................    output_high(CONNECT_CIGS);
266A:  MOVLB  01
266B:  BCF    0E.0
266C:  MOVLB  02
266D:  BSF    0E.0
.................... 
....................    // read temperature
....................    set_adc_channel(TEMP_TOP);
266E:  MOVLW  20
266F:  MOVWF  78
2670:  MOVLB  01
2671:  MOVF   1D,W
2672:  ANDLW  83
2673:  IORWF  78,W
2674:  MOVWF  1D
2675:  MOVLW  0F
2676:  MOVWF  78
2677:  MOVF   1F,W
2678:  ANDLW  F0
2679:  IORWF  78,W
267A:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
267B:  MOVLW  0D
267C:  MOVWF  77
267D:  DECFSZ 77,F
267E:  GOTO   67D
....................    measured_temp_top = ad7490_read(AD7490_VIN0); // read voltage at adc pin
267F:  MOVLB  0B
2680:  CLRF   31
2681:  CLRF   30
2682:  MOVLB  00
2683:  CALL   592
2684:  MOVF   79,W
2685:  MOVLB  08
2686:  MOVWF  3B
2687:  MOVF   78,W
2688:  MOVWF  3A
....................    set_adc_channel(TEMP_BOT);
2689:  MOVLW  0C
268A:  MOVWF  78
268B:  MOVLB  01
268C:  MOVF   1D,W
268D:  ANDLW  83
268E:  IORWF  78,W
268F:  MOVWF  1D
2690:  MOVLW  0F
2691:  MOVWF  78
2692:  MOVF   1F,W
2693:  ANDLW  F0
2694:  IORWF  78,W
2695:  MOVWF  1F
....................    delay_us(10); // wait for the ADC to stabilize
2696:  MOVLW  0D
2697:  MOVWF  77
2698:  DECFSZ 77,F
2699:  GOTO   698
....................    measured_temp_bot = ad7490_read(AD7490_VIN0); // read voltage at adc pin
269A:  MOVLB  0B
269B:  CLRF   31
269C:  CLRF   30
269D:  MOVLB  00
269E:  CALL   592
269F:  MOVF   79,W
26A0:  MOVLB  08
26A1:  MOVWF  3D
26A2:  MOVF   78,W
26A3:  MOVWF  3C
....................    unsigned int32 current;   
....................     // read PD value
....................     set_adc_channel(PD);
26A4:  MOVLW  00
26A5:  MOVWF  78
26A6:  MOVLB  01
26A7:  MOVF   1D,W
26A8:  ANDLW  83
26A9:  IORWF  78,W
26AA:  MOVWF  1D
26AB:  MOVLW  0F
26AC:  MOVWF  78
26AD:  MOVF   1F,W
26AE:  ANDLW  F0
26AF:  IORWF  78,W
26B0:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
26B1:  MOVLW  0D
26B2:  MOVWF  77
26B3:  DECFSZ 77,F
26B4:  GOTO   6B3
....................     // = ad7490_read(AD7490_VIN0); // voltage at adc pin
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................    // CIGS value
....................    for (unsigned int16 count = 0; count < measurement_step; count++)
26B5:  MOVLB  0B
26B6:  CLRF   2B
26B7:  CLRF   2A
26B8:  MOVF   2B,F
26B9:  BTFSS  03.2
26BA:  GOTO   761
26BB:  MOVF   25,W
26BC:  SUBWF  2A,W
26BD:  BTFSC  03.0
26BE:  GOTO   761
....................    {    
....................       // set DAC value
....................       dac_write(count);
26BF:  MOVF   2A,W
26C0:  MOVLB  02
26C1:  MOVWF  19
....................       delay_us(100); // wait for the DAC to stabilize
26C2:  MOVLW  85
26C3:  MOVWF  77
26C4:  DECFSZ 77,F
26C5:  GOTO   6C4
.................... 
....................       // read CIGS voltage and current
....................       set_adc_channel(CIGS_VOLT);       
26C6:  MOVLW  00
26C7:  MOVWF  78
26C8:  MOVLB  01
26C9:  MOVF   1D,W
26CA:  ANDLW  83
26CB:  IORWF  78,W
26CC:  MOVWF  1D
26CD:  MOVLW  0F
26CE:  MOVWF  78
26CF:  MOVF   1F,W
26D0:  ANDLW  F0
26D1:  IORWF  78,W
26D2:  MOVWF  1F
....................       delay_us(10); // wait for the ADC to stabilize
26D3:  MOVLW  0D
26D4:  MOVWF  77
26D5:  DECFSZ 77,F
26D6:  GOTO   6D5
....................       data_buffer[count*2] =ad7490_read(AD7490_VIN0);  // read voltage at adc pin
26D7:  BCF    03.0
26D8:  MOVLB  0B
26D9:  RLF    2A,W
26DA:  MOVWF  2E
26DB:  RLF    2B,W
26DC:  MOVWF  2F
26DD:  BCF    03.0
26DE:  RLF    2E,W
26DF:  MOVWF  79
26E0:  RLF    2F,W
26E1:  MOVWF  7A
26E2:  MOVF   79,W
26E3:  ADDLW  3A
26E4:  MOVWF  78
26E5:  MOVLW  20
26E6:  ADDWFC 7A,F
26E7:  MOVF   78,W
26E8:  MOVWF  2E
26E9:  MOVF   7A,W
26EA:  MOVWF  2F
26EB:  CLRF   31
26EC:  CLRF   30
26ED:  MOVLB  00
26EE:  CALL   592
26EF:  MOVLB  0B
26F0:  MOVF   2F,W
26F1:  MOVWF  05
26F2:  MOVF   2E,W
26F3:  MOVWF  04
26F4:  MOVF   78,W
26F5:  MOVWF  00
26F6:  MOVF   79,W
26F7:  MOVWI  W,[FSR0+01]
....................       
....................       set_adc_channel(CIGS_CURR);
26F8:  MOVLW  04
26F9:  MOVWF  78
26FA:  MOVLB  01
26FB:  MOVF   1D,W
26FC:  ANDLW  83
26FD:  IORWF  78,W
26FE:  MOVWF  1D
26FF:  MOVLW  0F
2700:  MOVWF  78
2701:  MOVF   1F,W
2702:  ANDLW  F0
2703:  IORWF  78,W
2704:  MOVWF  1F
....................       current = 0; // reset current value
2705:  MOVLB  0B
2706:  CLRF   29
2707:  CLRF   28
2708:  CLRF   27
2709:  CLRF   26
....................       for(int k=0; k<10; k++)
270A:  CLRF   2C
270B:  MOVF   2C,W
270C:  SUBLW  09
270D:  BTFSS  03.0
270E:  GOTO   721
....................       {
....................                                           //  routing nth channel to adc//verYOMOGI 20220214update,byUCHIDA
....................             delay_us(10);
270F:  MOVLW  0D
2710:  MOVWF  77
2711:  DECFSZ 77,F
2712:  GOTO   711
....................             current = current + ad7490_read(AD7490_VIN0); 
2713:  CLRF   31
2714:  CLRF   30
2715:  MOVLB  00
2716:  CALL   592
2717:  MOVF   78,W
2718:  MOVLB  0B
2719:  ADDWF  26,F
271A:  MOVF   79,W
271B:  ADDWFC 27,F
271C:  MOVLW  00
271D:  ADDWFC 28,F
271E:  ADDWFC 29,F
271F:  INCF   2C,F
2720:  GOTO   70B
....................       }    
....................       
....................       current = current / 10; // average the current value
2721:  BCF    03.1
2722:  MOVF   29,W
2723:  MOVLB  0D
2724:  MOVWF  2B
2725:  MOVLB  0B
2726:  MOVF   28,W
2727:  MOVLB  0D
2728:  MOVWF  2A
2729:  MOVLB  0B
272A:  MOVF   27,W
272B:  MOVLB  0D
272C:  MOVWF  29
272D:  MOVLB  0B
272E:  MOVF   26,W
272F:  MOVLB  0D
2730:  MOVWF  28
2731:  CLRF   2F
2732:  CLRF   2E
2733:  CLRF   2D
2734:  MOVLW  0A
2735:  MOVWF  2C
2736:  MOVLB  00
2737:  CALL   5EB
2738:  MOVF   7A,W
2739:  MOVLB  0B
273A:  MOVWF  29
273B:  MOVF   79,W
273C:  MOVWF  28
273D:  MOVF   78,W
273E:  MOVWF  27
273F:  MOVF   77,W
2740:  MOVWF  26
.................... 
....................       delay_us(10); // wait for the ADC to stabilize
2741:  MOVLW  0D
2742:  MOVWF  77
2743:  DECFSZ 77,F
2744:  GOTO   743
....................       data_buffer[count*2+1] = current; // store the current value in the buffer
2745:  BCF    03.0
2746:  RLF    2A,W
2747:  MOVWF  2E
2748:  RLF    2B,W
2749:  MOVWF  2F
274A:  MOVLW  01
274B:  ADDWF  2E,F
274C:  MOVLW  00
274D:  ADDWFC 2F,F
274E:  BCF    03.0
274F:  RLF    2E,W
2750:  MOVWF  79
2751:  RLF    2F,W
2752:  MOVWF  7A
2753:  MOVF   79,W
2754:  ADDLW  3A
2755:  MOVWF  04
2756:  MOVLW  20
2757:  ADDWFC 7A,W
2758:  MOVWF  05
2759:  MOVF   26,W
275A:  MOVWF  00
275B:  MOVF   27,W
275C:  MOVWI  W,[FSR0+01]
275D:  INCF   2A,F
275E:  BTFSC  03.2
275F:  INCF   2B,F
2760:  GOTO   6B8
....................       //data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    }
.................... 
....................    fprintf(PC, "END SWEEP\r\n");
2761:  MOVLW  B3
2762:  MOVLB  03
2763:  MOVWF  11
2764:  MOVLW  03
2765:  MOVWF  12
2766:  MOVLP  08
2767:  MOVLB  00
2768:  CALL   045
2769:  MOVLP  20
....................    // read PD value
....................    set_adc_channel(PD);
276A:  MOVLW  00
276B:  MOVWF  78
276C:  MOVLB  01
276D:  MOVF   1D,W
276E:  ANDLW  83
276F:  IORWF  78,W
2770:  MOVWF  1D
2771:  MOVLW  0F
2772:  MOVWF  78
2773:  MOVF   1F,W
2774:  ANDLW  F0
2775:  IORWF  78,W
2776:  MOVWF  1F
....................    //measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
.................... 
....................    //convert_cigs_data(measurement_step);
....................    //convert_header_data();    
....................    output_low(CONNECT_CIGS);
2777:  BCF    0E.0
2778:  MOVLB  02
2779:  BCF    0E.0
277A:  MOVLB  00
277B:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ========================== Flash command ============================
.................... 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
*
1794:  MOVLW  EE
1795:  MOVLB  03
1796:  MOVWF  11
1797:  MOVLW  03
1798:  MOVWF  12
1799:  MOVLP  08
179A:  MOVLB  00
179B:  CALL   045
179C:  MOVLP  10
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
179D:  MOVLB  0B
179E:  MOVF   25,W
179F:  MOVWF  04
17A0:  MOVF   26,W
17A1:  MOVWF  05
17A2:  MOVIW  [FSR0+00],W
17A3:  MOVWF  27
....................    piclog_make(cmd, 0x00); // Log the command execution
17A4:  MOVF   27,W
17A5:  MOVLB  0C
17A6:  MOVWF  2F
17A7:  CLRF   30
17A8:  MOVLB  00
17A9:  CALL   33B
....................    for (unsigned int32 address = ADDRESS_MISF_START; address < ADDRESS_MISF_END; address += SECTOR_64K_BYTE) {
17AA:  MOVLB  0B
17AB:  CLRF   2B
17AC:  CLRF   2A
17AD:  CLRF   29
17AE:  CLRF   28
17AF:  MOVF   2B,F
17B0:  BTFSS  03.2
17B1:  GOTO   7DE
17B2:  MOVF   2A,W
17B3:  SUBLW  F4
17B4:  BTFSS  03.0
17B5:  GOTO   7DE
17B6:  BTFSS  03.2
17B7:  GOTO   7BC
17B8:  MOVF   29,W
17B9:  SUBLW  23
17BA:  BTFSS  03.0
17BB:  GOTO   7DE
....................       sector_erase(mis_fm, address); // Erase each sector
17BC:  MOVLB  08
17BD:  MOVF   5D,W
17BE:  MOVLB  0B
17BF:  MOVWF  31
17C0:  MOVLB  08
17C1:  MOVF   5C,W
17C2:  MOVLB  0B
17C3:  MOVWF  30
17C4:  MOVLB  08
17C5:  MOVF   5B,W
17C6:  MOVLB  0B
17C7:  MOVWF  2F
17C8:  MOVLB  08
17C9:  MOVF   5A,W
17CA:  MOVLB  0B
17CB:  MOVWF  2E
17CC:  MOVF   2B,W
17CD:  MOVWF  35
17CE:  MOVF   2A,W
17CF:  MOVWF  34
17D0:  MOVF   29,W
17D1:  MOVWF  33
17D2:  MOVF   28,W
17D3:  MOVWF  32
17D4:  MOVLP  18
17D5:  MOVLB  00
17D6:  CALL   22A
17D7:  MOVLP  10
17D8:  MOVLW  01
17D9:  MOVLB  0B
17DA:  ADDWF  2A,F
17DB:  MOVLW  00
17DC:  ADDWFC 2B,F
17DD:  GOTO   7AF
....................    }
....................    fprintf(PC, "End Flash Erase All\r\n");
17DE:  MOVLW  FA
17DF:  MOVLB  03
17E0:  MOVWF  11
17E1:  MOVLW  03
17E2:  MOVWF  12
17E3:  MOVLP  08
17E4:  MOVLB  00
17E5:  CALL   045
17E6:  MOVLP  10
17E7:  MOVLP  28
17E8:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
*
1BE1:  MOVLW  05
1BE2:  MOVLB  03
1BE3:  MOVWF  11
1BE4:  MOVLW  04
1BE5:  MOVWF  12
1BE6:  MOVLP  08
1BE7:  MOVLB  00
1BE8:  CALL   045
1BE9:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 sector_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1BEA:  MOVLB  0B
1BEB:  MOVF   25,W
1BEC:  MOVWF  04
1BED:  MOVF   26,W
1BEE:  MOVWF  05
1BEF:  ADDFSR 00,FSR0
1BF0:  MOVF   00,W
1BF1:  MOVWF  27
1BF2:  MOVF   25,W
1BF3:  MOVWF  04
1BF4:  MOVF   26,W
1BF5:  MOVWF  05
1BF6:  ADDFSR 01,FSR0
1BF7:  MOVF   00,W
1BF8:  CLRF   31
1BF9:  CLRF   30
1BFA:  CLRF   2F
1BFB:  MOVWF  2E
1BFC:  MOVWF  31
1BFD:  CLRF   2E
1BFE:  CLRF   2F
1BFF:  CLRF   30
1C00:  MOVF   25,W
1C01:  MOVWF  04
1C02:  MOVF   26,W
1C03:  MOVWF  05
1C04:  ADDFSR 02,FSR0
1C05:  MOVF   00,W
1C06:  CLRF   36
1C07:  CLRF   35
1C08:  CLRF   34
1C09:  MOVWF  33
1C0A:  MOVF   34,W
1C0B:  MOVWF  7A
1C0C:  MOVF   33,W
1C0D:  MOVWF  79
1C0E:  CLRF   77
1C0F:  CLRF   78
1C10:  MOVF   77,W
1C11:  IORWF  2E,F
1C12:  MOVF   78,W
1C13:  IORWF  2F,F
1C14:  MOVF   33,W
1C15:  IORWF  30,F
1C16:  MOVF   34,W
1C17:  IORWF  31,F
1C18:  MOVF   25,W
1C19:  MOVWF  04
1C1A:  MOVF   26,W
1C1B:  MOVWF  05
1C1C:  ADDFSR 03,FSR0
1C1D:  MOVF   00,W
1C1E:  CLRF   36
1C1F:  CLRF   35
1C20:  CLRF   34
1C21:  MOVWF  33
1C22:  MOVF   35,W
1C23:  MOVWF  7A
1C24:  MOVF   34,W
1C25:  MOVWF  79
1C26:  MOVF   33,W
1C27:  MOVWF  78
1C28:  CLRF   77
1C29:  MOVF   77,W
1C2A:  IORWF  2E,F
1C2B:  MOVF   33,W
1C2C:  IORWF  2F,F
1C2D:  MOVF   34,W
1C2E:  IORWF  30,F
1C2F:  MOVF   35,W
1C30:  IORWF  31,F
1C31:  MOVF   25,W
1C32:  MOVWF  04
1C33:  MOVF   26,W
1C34:  MOVWF  05
1C35:  MOVIW  [FSR0+04],W
1C36:  MOVWF  77
1C37:  CLRF   78
1C38:  CLRF   79
1C39:  CLRF   7A
1C3A:  MOVF   77,W
1C3B:  IORWF  2E,W
1C3C:  MOVWF  28
1C3D:  MOVF   78,W
1C3E:  IORWF  2F,W
1C3F:  MOVWF  29
1C40:  MOVF   79,W
1C41:  IORWF  30,W
1C42:  MOVWF  2A
1C43:  MOVF   7A,W
1C44:  IORWF  31,W
1C45:  MOVWF  2B
.................... 
....................    fprintf(PC, "\tSector Address: 0x%08LX\r\n", sector_address);
1C46:  MOVLW  14
1C47:  MOVLB  03
1C48:  MOVWF  11
1C49:  MOVLW  04
1C4A:  MOVWF  12
1C4B:  BCF    03.0
1C4C:  MOVLW  13
1C4D:  MOVLB  0C
1C4E:  MOVWF  6B
1C4F:  MOVLP  08
1C50:  MOVLB  00
1C51:  CALL   34E
1C52:  MOVLP  18
1C53:  MOVLB  0B
1C54:  MOVF   2B,W
1C55:  MOVLB  0C
1C56:  MOVWF  6B
1C57:  MOVLW  37
1C58:  MOVWF  6C
1C59:  MOVLP  08
1C5A:  MOVLB  00
1C5B:  CALL   3A8
1C5C:  MOVLP  18
1C5D:  MOVLB  0B
1C5E:  MOVF   2A,W
1C5F:  MOVLB  0C
1C60:  MOVWF  6B
1C61:  MOVLW  37
1C62:  MOVWF  6C
1C63:  MOVLP  08
1C64:  MOVLB  00
1C65:  CALL   3A8
1C66:  MOVLP  18
1C67:  MOVLB  0B
1C68:  MOVF   29,W
1C69:  MOVLB  0C
1C6A:  MOVWF  6B
1C6B:  MOVLW  37
1C6C:  MOVWF  6C
1C6D:  MOVLP  08
1C6E:  MOVLB  00
1C6F:  CALL   3A8
1C70:  MOVLP  18
1C71:  MOVLB  0B
1C72:  MOVF   28,W
1C73:  MOVLB  0C
1C74:  MOVWF  6B
1C75:  MOVLW  37
1C76:  MOVWF  6C
1C77:  MOVLP  08
1C78:  MOVLB  00
1C79:  CALL   3A8
1C7A:  MOVLP  18
1C7B:  MOVLW  0D
1C7C:  MOVLB  0E
1C7D:  MOVWF  43
1C7E:  MOVLP  08
1C7F:  MOVLB  00
1C80:  CALL   020
1C81:  MOVLP  18
1C82:  MOVLW  0A
1C83:  MOVLB  0E
1C84:  MOVWF  43
1C85:  MOVLP  08
1C86:  MOVLB  00
1C87:  CALL   020
1C88:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1C89:  MOVLB  0B
1C8A:  MOVF   27,W
1C8B:  MOVLB  0C
1C8C:  MOVWF  2F
1C8D:  CLRF   30
1C8E:  MOVLP  10
1C8F:  MOVLB  00
1C90:  CALL   33B
1C91:  MOVLP  18
....................    
....................    sector_erase(mis_fm, sector_address);
1C92:  MOVLB  08
1C93:  MOVF   5D,W
1C94:  MOVLB  0B
1C95:  MOVWF  31
1C96:  MOVLB  08
1C97:  MOVF   5C,W
1C98:  MOVLB  0B
1C99:  MOVWF  30
1C9A:  MOVLB  08
1C9B:  MOVF   5B,W
1C9C:  MOVLB  0B
1C9D:  MOVWF  2F
1C9E:  MOVLB  08
1C9F:  MOVF   5A,W
1CA0:  MOVLB  0B
1CA1:  MOVWF  2E
1CA2:  MOVF   2B,W
1CA3:  MOVWF  35
1CA4:  MOVF   2A,W
1CA5:  MOVWF  34
1CA6:  MOVF   29,W
1CA7:  MOVWF  33
1CA8:  MOVF   28,W
1CA9:  MOVWF  32
1CAA:  MOVLB  00
1CAB:  CALL   22A
....................    
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
1CAC:  MOVLW  22
1CAD:  MOVLB  03
1CAE:  MOVWF  11
1CAF:  MOVLW  04
1CB0:  MOVWF  12
1CB1:  MOVLP  08
1CB2:  MOVLB  00
1CB3:  CALL   045
1CB4:  MOVLP  18
1CB5:  MOVLP  28
1CB6:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
1CB7:  MOVLW  30
1CB8:  MOVLB  03
1CB9:  MOVWF  11
1CBA:  MOVLW  04
1CBB:  MOVWF  12
1CBC:  MOVLP  08
1CBD:  MOVLB  00
1CBE:  CALL   045
1CBF:  MOVLP  18
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
1CC0:  MOVLB  0B
1CC1:  MOVF   25,W
1CC2:  MOVWF  04
1CC3:  MOVF   26,W
1CC4:  MOVWF  05
1CC5:  ADDFSR 00,FSR0
1CC6:  MOVF   00,W
1CC7:  MOVWF  27
1CC8:  MOVF   25,W
1CC9:  MOVWF  04
1CCA:  MOVF   26,W
1CCB:  MOVWF  05
1CCC:  ADDFSR 01,FSR0
1CCD:  MOVF   00,W
1CCE:  CLRF   31
1CCF:  CLRF   30
1CD0:  CLRF   2F
1CD1:  MOVWF  2E
1CD2:  MOVWF  31
1CD3:  CLRF   2E
1CD4:  CLRF   2F
1CD5:  CLRF   30
1CD6:  MOVF   25,W
1CD7:  MOVWF  04
1CD8:  MOVF   26,W
1CD9:  MOVWF  05
1CDA:  ADDFSR 02,FSR0
1CDB:  MOVF   00,W
1CDC:  CLRF   36
1CDD:  CLRF   35
1CDE:  CLRF   34
1CDF:  MOVWF  33
1CE0:  MOVF   34,W
1CE1:  MOVWF  7A
1CE2:  MOVF   33,W
1CE3:  MOVWF  79
1CE4:  CLRF   77
1CE5:  CLRF   78
1CE6:  MOVF   77,W
1CE7:  IORWF  2E,F
1CE8:  MOVF   78,W
1CE9:  IORWF  2F,F
1CEA:  MOVF   33,W
1CEB:  IORWF  30,F
1CEC:  MOVF   34,W
1CED:  IORWF  31,F
1CEE:  MOVF   25,W
1CEF:  MOVWF  04
1CF0:  MOVF   26,W
1CF1:  MOVWF  05
1CF2:  ADDFSR 03,FSR0
1CF3:  MOVF   00,W
1CF4:  CLRF   36
1CF5:  CLRF   35
1CF6:  CLRF   34
1CF7:  MOVWF  33
1CF8:  MOVF   35,W
1CF9:  MOVWF  7A
1CFA:  MOVF   34,W
1CFB:  MOVWF  79
1CFC:  MOVF   33,W
1CFD:  MOVWF  78
1CFE:  CLRF   77
1CFF:  MOVF   77,W
1D00:  IORWF  2E,F
1D01:  MOVF   33,W
1D02:  IORWF  2F,F
1D03:  MOVF   34,W
1D04:  IORWF  30,F
1D05:  MOVF   35,W
1D06:  IORWF  31,F
1D07:  MOVF   25,W
1D08:  MOVWF  04
1D09:  MOVF   26,W
1D0A:  MOVWF  05
1D0B:  MOVIW  [FSR0+04],W
1D0C:  MOVWF  77
1D0D:  CLRF   78
1D0E:  CLRF   79
1D0F:  CLRF   7A
1D10:  MOVF   77,W
1D11:  IORWF  2E,W
1D12:  MOVWF  28
1D13:  MOVF   78,W
1D14:  IORWF  2F,W
1D15:  MOVWF  29
1D16:  MOVF   79,W
1D17:  IORWF  30,W
1D18:  MOVWF  2A
1D19:  MOVF   7A,W
1D1A:  IORWF  31,W
1D1B:  MOVWF  2B
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
1D1C:  MOVLW  3E
1D1D:  MOVLB  03
1D1E:  MOVWF  11
1D1F:  MOVLW  04
1D20:  MOVWF  12
1D21:  BCF    03.0
1D22:  MOVLW  16
1D23:  MOVLB  0C
1D24:  MOVWF  6B
1D25:  MOVLP  08
1D26:  MOVLB  00
1D27:  CALL   34E
1D28:  MOVLP  18
1D29:  MOVLB  0B
1D2A:  MOVF   2B,W
1D2B:  MOVLB  0C
1D2C:  MOVWF  6B
1D2D:  MOVLW  37
1D2E:  MOVWF  6C
1D2F:  MOVLP  08
1D30:  MOVLB  00
1D31:  CALL   3A8
1D32:  MOVLP  18
1D33:  MOVLB  0B
1D34:  MOVF   2A,W
1D35:  MOVLB  0C
1D36:  MOVWF  6B
1D37:  MOVLW  37
1D38:  MOVWF  6C
1D39:  MOVLP  08
1D3A:  MOVLB  00
1D3B:  CALL   3A8
1D3C:  MOVLP  18
1D3D:  MOVLB  0B
1D3E:  MOVF   29,W
1D3F:  MOVLB  0C
1D40:  MOVWF  6B
1D41:  MOVLW  37
1D42:  MOVWF  6C
1D43:  MOVLP  08
1D44:  MOVLB  00
1D45:  CALL   3A8
1D46:  MOVLP  18
1D47:  MOVLB  0B
1D48:  MOVF   28,W
1D49:  MOVLB  0C
1D4A:  MOVWF  6B
1D4B:  MOVLW  37
1D4C:  MOVWF  6C
1D4D:  MOVLP  08
1D4E:  MOVLB  00
1D4F:  CALL   3A8
1D50:  MOVLP  18
1D51:  MOVLW  0D
1D52:  MOVLB  0E
1D53:  MOVWF  43
1D54:  MOVLP  08
1D55:  MOVLB  00
1D56:  CALL   020
1D57:  MOVLP  18
1D58:  MOVLW  0A
1D59:  MOVLB  0E
1D5A:  MOVWF  43
1D5B:  MOVLP  08
1D5C:  MOVLB  00
1D5D:  CALL   020
1D5E:  MOVLP  18
....................    piclog_make(cmd, 0x00); // Log the command execution
1D5F:  MOVLB  0B
1D60:  MOVF   27,W
1D61:  MOVLB  0C
1D62:  MOVWF  2F
1D63:  CLRF   30
1D64:  MOVLP  10
1D65:  MOVLB  00
1D66:  CALL   33B
1D67:  MOVLP  18
....................    
....................    subsector_4kByte_erase(mis_fm, 0x00000000);
1D68:  MOVLB  08
1D69:  MOVF   5D,W
1D6A:  MOVLB  0D
1D6B:  MOVWF  37
1D6C:  MOVLB  08
1D6D:  MOVF   5C,W
1D6E:  MOVLB  0D
1D6F:  MOVWF  36
1D70:  MOVLB  08
1D71:  MOVF   5B,W
1D72:  MOVLB  0D
1D73:  MOVWF  35
1D74:  MOVLB  08
1D75:  MOVF   5A,W
1D76:  MOVLB  0D
1D77:  MOVWF  34
1D78:  CLRF   3B
1D79:  CLRF   3A
1D7A:  CLRF   39
1D7B:  CLRF   38
1D7C:  MOVLP  10
1D7D:  MOVLB  00
1D7E:  CALL   19A
1D7F:  MOVLP  18
....................    
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
1D80:  MOVLW  4D
1D81:  MOVLB  03
1D82:  MOVWF  11
1D83:  MOVLW  04
1D84:  MOVWF  12
1D85:  MOVLP  08
1D86:  MOVLB  00
1D87:  CALL   045
1D88:  MOVLP  18
1D89:  MOVLP  28
1D8A:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
1D8B:  MOVLW  5A
1D8C:  MOVLB  03
1D8D:  MOVWF  11
1D8E:  MOVLW  04
1D8F:  MOVWF  12
1D90:  MOVLP  08
1D91:  MOVLB  00
1D92:  CALL   045
1D93:  MOVLP  18
....................    FLASH_WRITE_PARAM flash_write_param = {0};
1D94:  MOVLB  0B
1D95:  CLRF   27
1D96:  CLRF   28
1D97:  CLRF   29
1D98:  CLRF   2A
1D99:  CLRF   2B
1D9A:  CLRF   2C
1D9B:  CLRF   2D
....................    
....................    flash_write_param.id = parameter[0];
1D9C:  MOVF   25,W
1D9D:  MOVWF  04
1D9E:  MOVF   26,W
1D9F:  MOVWF  05
1DA0:  MOVIW  [FSR0+00],W
1DA1:  MOVWF  27
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
1DA2:  MOVF   25,W
1DA3:  MOVWF  04
1DA4:  MOVF   26,W
1DA5:  MOVWF  05
1DA6:  ADDFSR 01,FSR0
1DA7:  MOVF   00,W
1DA8:  MOVLB  0C
1DA9:  CLRF   31
1DAA:  CLRF   30
1DAB:  CLRF   2F
1DAC:  MOVWF  2E
1DAD:  MOVWF  31
1DAE:  CLRF   2E
1DAF:  CLRF   2F
1DB0:  CLRF   30
1DB1:  MOVLB  0B
1DB2:  MOVF   25,W
1DB3:  MOVWF  04
1DB4:  MOVF   26,W
1DB5:  MOVWF  05
1DB6:  ADDFSR 02,FSR0
1DB7:  MOVF   00,W
1DB8:  MOVLB  0C
1DB9:  CLRF   36
1DBA:  CLRF   35
1DBB:  CLRF   34
1DBC:  MOVWF  33
1DBD:  MOVF   34,W
1DBE:  MOVWF  7A
1DBF:  MOVF   33,W
1DC0:  MOVWF  79
1DC1:  CLRF   77
1DC2:  CLRF   78
1DC3:  MOVF   77,W
1DC4:  IORWF  2E,F
1DC5:  MOVF   78,W
1DC6:  IORWF  2F,F
1DC7:  MOVF   33,W
1DC8:  IORWF  30,F
1DC9:  MOVF   34,W
1DCA:  IORWF  31,F
1DCB:  MOVLB  0B
1DCC:  MOVF   25,W
1DCD:  MOVWF  04
1DCE:  MOVF   26,W
1DCF:  MOVWF  05
1DD0:  ADDFSR 03,FSR0
1DD1:  MOVF   00,W
1DD2:  MOVLB  0C
1DD3:  CLRF   36
1DD4:  CLRF   35
1DD5:  CLRF   34
1DD6:  MOVWF  33
1DD7:  MOVF   35,W
1DD8:  MOVWF  7A
1DD9:  MOVF   34,W
1DDA:  MOVWF  79
1DDB:  MOVF   33,W
1DDC:  MOVWF  78
1DDD:  CLRF   77
1DDE:  MOVF   77,W
1DDF:  IORWF  2E,F
1DE0:  MOVF   33,W
1DE1:  IORWF  2F,F
1DE2:  MOVF   34,W
1DE3:  IORWF  30,F
1DE4:  MOVF   35,W
1DE5:  IORWF  31,F
1DE6:  MOVLB  0B
1DE7:  MOVF   25,W
1DE8:  MOVWF  04
1DE9:  MOVF   26,W
1DEA:  MOVWF  05
1DEB:  MOVIW  [FSR0+04],W
1DEC:  MOVWF  77
1DED:  CLRF   78
1DEE:  CLRF   79
1DEF:  CLRF   7A
1DF0:  MOVF   77,W
1DF1:  MOVLB  0C
1DF2:  IORWF  2E,W
1DF3:  MOVLB  0B
1DF4:  MOVWF  28
1DF5:  MOVF   78,W
1DF6:  MOVLB  0C
1DF7:  IORWF  2F,W
1DF8:  MOVLB  0B
1DF9:  MOVWF  29
1DFA:  MOVF   79,W
1DFB:  MOVLB  0C
1DFC:  IORWF  30,W
1DFD:  MOVLB  0B
1DFE:  MOVWF  2A
1DFF:  MOVF   7A,W
1E00:  MOVLB  0C
1E01:  IORWF  31,W
1E02:  MOVLB  0B
1E03:  MOVWF  2B
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
1E04:  MOVF   25,W
1E05:  MOVWF  04
1E06:  MOVF   26,W
1E07:  MOVWF  05
1E08:  ADDFSR 07,FSR0
1E09:  MOVF   00,W
1E0A:  MOVLB  0C
1E0B:  CLRF   2F
1E0C:  MOVWF  2E
1E0D:  MOVWF  2F
1E0E:  CLRF   2E
1E0F:  MOVLB  0B
1E10:  MOVF   25,W
1E11:  MOVWF  04
1E12:  MOVF   26,W
1E13:  MOVWF  05
1E14:  MOVIW  [FSR0+08],W
1E15:  CLRF   7A
1E16:  MOVLB  0C
1E17:  IORWF  2E,W
1E18:  MOVLB  0B
1E19:  MOVWF  2C
1E1A:  MOVF   7A,W
1E1B:  MOVLB  0C
1E1C:  IORWF  2F,W
1E1D:  MOVLB  0B
1E1E:  MOVWF  2D
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
1E1F:  MOVLW  67
1E20:  MOVLB  03
1E21:  MOVWF  11
1E22:  MOVLW  04
1E23:  MOVWF  12
1E24:  BCF    03.0
1E25:  MOVLW  0C
1E26:  MOVLB  0C
1E27:  MOVWF  6B
1E28:  MOVLP  08
1E29:  MOVLB  00
1E2A:  CALL   34E
1E2B:  MOVLP  18
1E2C:  MOVLB  0B
1E2D:  MOVF   27,W
1E2E:  MOVLB  0C
1E2F:  MOVWF  6B
1E30:  MOVLW  37
1E31:  MOVWF  6C
1E32:  MOVLP  08
1E33:  MOVLB  00
1E34:  CALL   3A8
1E35:  MOVLP  18
1E36:  MOVLW  0D
1E37:  MOVLB  0E
1E38:  MOVWF  43
1E39:  MOVLP  08
1E3A:  MOVLB  00
1E3B:  CALL   020
1E3C:  MOVLP  18
1E3D:  MOVLW  0A
1E3E:  MOVLB  0E
1E3F:  MOVWF  43
1E40:  MOVLP  08
1E41:  MOVLB  00
1E42:  CALL   020
1E43:  MOVLP  18
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
1E44:  MOVLW  71
1E45:  MOVLB  03
1E46:  MOVWF  11
1E47:  MOVLW  04
1E48:  MOVWF  12
1E49:  BCF    03.0
1E4A:  MOVLW  0E
1E4B:  MOVLB  0C
1E4C:  MOVWF  6B
1E4D:  MOVLP  08
1E4E:  MOVLB  00
1E4F:  CALL   34E
1E50:  MOVLP  18
1E51:  MOVLB  0B
1E52:  MOVF   2B,W
1E53:  MOVLB  0C
1E54:  MOVWF  6B
1E55:  MOVLW  37
1E56:  MOVWF  6C
1E57:  MOVLP  08
1E58:  MOVLB  00
1E59:  CALL   3A8
1E5A:  MOVLP  18
1E5B:  MOVLB  0B
1E5C:  MOVF   2A,W
1E5D:  MOVLB  0C
1E5E:  MOVWF  6B
1E5F:  MOVLW  37
1E60:  MOVWF  6C
1E61:  MOVLP  08
1E62:  MOVLB  00
1E63:  CALL   3A8
1E64:  MOVLP  18
1E65:  MOVLB  0B
1E66:  MOVF   29,W
1E67:  MOVLB  0C
1E68:  MOVWF  6B
1E69:  MOVLW  37
1E6A:  MOVWF  6C
1E6B:  MOVLP  08
1E6C:  MOVLB  00
1E6D:  CALL   3A8
1E6E:  MOVLP  18
1E6F:  MOVLB  0B
1E70:  MOVF   28,W
1E71:  MOVLB  0C
1E72:  MOVWF  6B
1E73:  MOVLW  37
1E74:  MOVWF  6C
1E75:  MOVLP  08
1E76:  MOVLB  00
1E77:  CALL   3A8
1E78:  MOVLP  18
1E79:  MOVLW  0D
1E7A:  MOVLB  0E
1E7B:  MOVWF  43
1E7C:  MOVLP  08
1E7D:  MOVLB  00
1E7E:  CALL   020
1E7F:  MOVLP  18
1E80:  MOVLW  0A
1E81:  MOVLB  0E
1E82:  MOVWF  43
1E83:  MOVLP  08
1E84:  MOVLB  00
1E85:  CALL   020
1E86:  MOVLP  18
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
1E87:  MOVLW  7C
1E88:  MOVLB  03
1E89:  MOVWF  11
1E8A:  MOVLW  04
1E8B:  MOVWF  12
1E8C:  BCF    03.0
1E8D:  MOVLW  0E
1E8E:  MOVLB  0C
1E8F:  MOVWF  6B
1E90:  MOVLP  08
1E91:  MOVLB  00
1E92:  CALL   34E
1E93:  MOVLP  18
1E94:  MOVLB  0B
1E95:  MOVF   2D,W
1E96:  MOVLB  0C
1E97:  MOVWF  6B
1E98:  MOVLW  37
1E99:  MOVWF  6C
1E9A:  MOVLP  08
1E9B:  MOVLB  00
1E9C:  CALL   3A8
1E9D:  MOVLP  18
1E9E:  MOVLB  0B
1E9F:  MOVF   2C,W
1EA0:  MOVLB  0C
1EA1:  MOVWF  6B
1EA2:  MOVLW  37
1EA3:  MOVWF  6C
1EA4:  MOVLP  08
1EA5:  MOVLB  00
1EA6:  CALL   3A8
1EA7:  MOVLP  18
1EA8:  MOVLW  0D
1EA9:  MOVLB  0E
1EAA:  MOVWF  43
1EAB:  MOVLP  08
1EAC:  MOVLB  00
1EAD:  CALL   020
1EAE:  MOVLP  18
1EAF:  MOVLW  0A
1EB0:  MOVLB  0E
1EB1:  MOVWF  43
1EB2:  MOVLP  08
1EB3:  MOVLB  00
1EB4:  CALL   020
1EB5:  MOVLP  18
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
1EB6:  MOVLB  0B
1EB7:  MOVF   27,W
1EB8:  MOVLB  0C
1EB9:  MOVWF  2F
1EBA:  CLRF   30
1EBB:  MOVLP  10
1EBC:  MOVLB  00
1EBD:  CALL   33B
1EBE:  MOVLP  18
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
1EBF:  MOVLW  87
1EC0:  MOVLB  03
1EC1:  MOVWF  11
1EC2:  MOVLW  04
1EC3:  MOVWF  12
1EC4:  MOVLP  08
1EC5:  MOVLB  00
1EC6:  CALL   045
1EC7:  MOVLP  18
....................    for (p = 0; p < flash_write_param.packetnum; p++)
1EC8:  MOVLB  0B
1EC9:  CLRF   6F
1ECA:  CLRF   6E
1ECB:  MOVF   6F,W
1ECC:  SUBWF  2D,W
1ECD:  BTFSS  03.0
1ECE:  GOTO   76B
1ECF:  BTFSS  03.2
1ED0:  GOTO   6D5
1ED1:  MOVF   2C,W
1ED2:  SUBWF  6E,W
1ED3:  BTFSC  03.0
1ED4:  GOTO   76B
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
1ED5:  RLF    6E,W
1ED6:  MOVLB  0C
1ED7:  MOVWF  20
1ED8:  MOVLB  0B
1ED9:  RLF    6F,W
1EDA:  MOVLB  0C
1EDB:  MOVWF  21
1EDC:  RLF    20,F
1EDD:  RLF    21,F
1EDE:  RLF    20,F
1EDF:  RLF    21,F
1EE0:  RLF    20,F
1EE1:  RLF    21,F
1EE2:  RLF    20,F
1EE3:  RLF    21,F
1EE4:  RLF    20,F
1EE5:  RLF    21,F
1EE6:  MOVLW  C0
1EE7:  ANDWF  20,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
1EE8:  CLRF   22
1EE9:  MOVF   22,W
1EEA:  SUBLW  3F
1EEB:  BTFSS  03.0
1EEC:  GOTO   717
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
1EED:  MOVLW  7E
1EEE:  ADDWF  22,W
1EEF:  MOVWF  04
1EF0:  MOVLW  23
1EF1:  MOVWF  05
1EF2:  BTFSC  03.0
1EF3:  INCF   05,F
1EF4:  MOVF   22,W
1EF5:  ADDWF  20,W
1EF6:  MOVWF  30
1EF7:  MOVLW  00
1EF8:  ADDWFC 21,W
1EF9:  MOVWF  31
1EFA:  CLRF   7A
1EFB:  MOVF   30,W
1EFC:  MOVWF  00
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
1EFD:  MOVLW  7E
1EFE:  ADDWF  22,W
1EFF:  MOVWF  04
1F00:  MOVLW  23
1F01:  MOVWF  05
1F02:  BTFSC  03.0
1F03:  INCF   05,F
1F04:  MOVF   00,W
1F05:  MOVWF  2E
1F06:  MOVWF  6B
1F07:  MOVLW  37
1F08:  MOVWF  6C
1F09:  MOVLP  08
1F0A:  MOVLB  00
1F0B:  CALL   3A8
1F0C:  MOVLP  18
1F0D:  MOVLW  20
1F0E:  MOVLB  0E
1F0F:  MOVWF  43
1F10:  MOVLP  08
1F11:  MOVLB  00
1F12:  CALL   020
1F13:  MOVLP  18
1F14:  MOVLB  0C
1F15:  INCF   22,F
1F16:  GOTO   6E9
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
1F17:  MOVLB  0B
1F18:  RLF    6E,W
1F19:  MOVWF  79
1F1A:  RLF    6F,W
1F1B:  MOVWF  7A
1F1C:  RLF    79,F
1F1D:  RLF    7A,F
1F1E:  RLF    79,F
1F1F:  RLF    7A,F
1F20:  RLF    79,F
1F21:  RLF    7A,F
1F22:  RLF    79,F
1F23:  RLF    7A,F
1F24:  RLF    79,F
1F25:  RLF    7A,F
1F26:  MOVLW  C0
1F27:  ANDWF  79,F
1F28:  MOVF   79,W
1F29:  ADDWF  28,W
1F2A:  MOVLB  0C
1F2B:  MOVWF  23
1F2C:  MOVF   7A,W
1F2D:  MOVLB  0B
1F2E:  ADDWFC 29,W
1F2F:  MOVLB  0C
1F30:  MOVWF  24
1F31:  MOVLW  00
1F32:  MOVLB  0B
1F33:  ADDWFC 2A,W
1F34:  MOVLB  0C
1F35:  MOVWF  25
1F36:  MOVLW  00
1F37:  MOVLB  0B
1F38:  ADDWFC 2B,W
1F39:  MOVLB  0C
1F3A:  MOVWF  26
.................... 
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
1F3B:  MOVLB  08
1F3C:  MOVF   5D,W
1F3D:  MOVLB  0E
1F3E:  MOVWF  42
1F3F:  MOVLB  08
1F40:  MOVF   5C,W
1F41:  MOVLB  0E
1F42:  MOVWF  41
1F43:  MOVLB  08
1F44:  MOVF   5B,W
1F45:  MOVLB  0E
1F46:  MOVWF  40
1F47:  MOVLB  08
1F48:  MOVF   5A,W
1F49:  MOVLB  0E
1F4A:  MOVWF  3F
1F4B:  MOVLB  0C
1F4C:  MOVF   26,W
1F4D:  MOVLB  0E
1F4E:  MOVWF  46
1F4F:  MOVLB  0C
1F50:  MOVF   25,W
1F51:  MOVLB  0E
1F52:  MOVWF  45
1F53:  MOVLB  0C
1F54:  MOVF   24,W
1F55:  MOVLB  0E
1F56:  MOVWF  44
1F57:  MOVLB  0C
1F58:  MOVF   23,W
1F59:  MOVLB  0E
1F5A:  MOVWF  43
1F5B:  MOVLW  23
1F5C:  MOVWF  48
1F5D:  MOVLW  7E
1F5E:  MOVWF  47
1F5F:  CLRF   4A
1F60:  MOVLW  40
1F61:  MOVWF  49
1F62:  MOVLP  10
1F63:  MOVLB  00
1F64:  CALL   000
1F65:  MOVLP  18
1F66:  MOVLB  0B
1F67:  INCF   6E,F
1F68:  BTFSC  03.2
1F69:  INCF   6F,F
1F6A:  GOTO   6CB
....................    }
....................    fprintf(PC, "\r\n");
1F6B:  MOVLW  0D
1F6C:  MOVLB  0E
1F6D:  MOVWF  43
1F6E:  MOVLP  08
1F6F:  MOVLB  00
1F70:  CALL   020
1F71:  MOVLP  18
1F72:  MOVLW  0A
1F73:  MOVLB  0E
1F74:  MOVWF  43
1F75:  MOVLP  08
1F76:  MOVLB  00
1F77:  CALL   020
1F78:  MOVLP  18
....................    fprintf(PC, "End Flash Write Demo\r\n");
1F79:  MOVLW  8E
1F7A:  MOVLB  03
1F7B:  MOVWF  11
1F7C:  MOVLW  04
1F7D:  MOVWF  12
1F7E:  MOVLP  08
1F7F:  MOVLB  00
1F80:  CALL   045
1F81:  MOVLP  18
1F82:  MOVLP  28
1F83:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
2000:  MOVLW  9A
2001:  MOVLB  03
2002:  MOVWF  11
2003:  MOVLW  04
2004:  MOVWF  12
2005:  MOVLP  08
2006:  MOVLB  00
2007:  CALL   045
2008:  MOVLP  20
....................    flash_setting(mis_fm);
2009:  MOVLB  08
200A:  MOVF   5D,W
200B:  MOVLB  0E
200C:  MOVWF  42
200D:  MOVLB  08
200E:  MOVF   5C,W
200F:  MOVLB  0E
2010:  MOVWF  41
2011:  MOVLB  08
2012:  MOVF   5B,W
2013:  MOVLB  0E
2014:  MOVWF  40
2015:  MOVLB  08
2016:  MOVF   5A,W
2017:  MOVLB  0E
2018:  MOVWF  3F
2019:  MOVLP  08
201A:  MOVLB  00
201B:  CALL   7E0
201C:  MOVLP  20
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
201D:  MOVLB  0B
201E:  CLRF   2A
201F:  CLRF   29
2020:  CLRF   28
2021:  CLRF   27
2022:  MOVLW  01
2023:  MOVWF  2B
2024:  MOVLW  02
2025:  MOVWF  2C
2026:  MOVLW  03
2027:  MOVWF  2D
2028:  MOVLW  04
2029:  MOVWF  2E
202A:  CLRF   2F
202B:  CLRF   30
202C:  CLRF   31
202D:  CLRF   32
202E:  CLRF   33
202F:  CLRF   34
2030:  CLRF   35
2031:  CLRF   36
2032:  CLRF   37
2033:  CLRF   38
2034:  CLRF   39
2035:  CLRF   3A
2036:  CLRF   3B
2037:  CLRF   3C
2038:  CLRF   3D
2039:  CLRF   3E
203A:  CLRF   3F
203B:  CLRF   40
203C:  CLRF   41
203D:  CLRF   42
203E:  CLRF   43
203F:  CLRF   44
2040:  CLRF   45
2041:  CLRF   46
2042:  CLRF   47
2043:  CLRF   48
2044:  CLRF   49
2045:  CLRF   4A
2046:  CLRF   4B
2047:  CLRF   4C
2048:  CLRF   4D
2049:  CLRF   4E
204A:  CLRF   4F
204B:  CLRF   50
204C:  CLRF   51
204D:  CLRF   52
204E:  CLRF   53
204F:  CLRF   54
2050:  CLRF   55
2051:  CLRF   56
2052:  CLRF   57
2053:  CLRF   58
2054:  CLRF   59
2055:  CLRF   5A
2056:  CLRF   5B
2057:  CLRF   5C
2058:  CLRF   5D
2059:  CLRF   5E
205A:  CLRF   5F
205B:  CLRF   60
205C:  CLRF   61
205D:  CLRF   62
205E:  CLRF   63
205F:  CLRF   64
2060:  CLRF   65
2061:  CLRF   66
2062:  CLRF   67
2063:  CLRF   68
2064:  CLRF   69
2065:  CLRF   6A
2066:  CLRF   6B
2067:  CLRF   6C
2068:  CLRF   6D
2069:  CLRF   6E
206A:  CLRF   6F
206B:  MOVLB  0C
206C:  CLRF   20
206D:  CLRF   21
206E:  CLRF   22
206F:  CLRF   23
2070:  CLRF   24
2071:  CLRF   25
2072:  CLRF   26
2073:  CLRF   27
2074:  CLRF   28
2075:  CLRF   29
2076:  CLRF   2A
2077:  CLRF   2B
2078:  CLRF   2C
2079:  CLRF   2D
207A:  CLRF   2E
207B:  CLRF   2F
207C:  CLRF   30
207D:  CLRF   31
207E:  CLRF   32
207F:  CLRF   33
2080:  CLRF   34
2081:  CLRF   35
2082:  CLRF   36
2083:  CLRF   37
2084:  CLRF   38
2085:  CLRF   39
2086:  CLRF   3A
2087:  CLRF   3B
2088:  CLRF   3C
2089:  CLRF   3D
208A:  CLRF   3E
208B:  CLRF   3F
208C:  CLRF   40
208D:  CLRF   41
208E:  CLRF   42
208F:  CLRF   43
2090:  CLRF   44
2091:  CLRF   45
2092:  CLRF   46
2093:  CLRF   47
2094:  CLRF   48
2095:  CLRF   49
2096:  CLRF   4A
2097:  CLRF   4B
2098:  CLRF   4C
2099:  CLRF   4D
209A:  CLRF   4E
209B:  CLRF   4F
209C:  CLRF   50
209D:  CLRF   51
209E:  CLRF   52
209F:  CLRF   53
20A0:  CLRF   54
20A1:  CLRF   55
20A2:  CLRF   56
20A3:  CLRF   57
20A4:  CLRF   58
20A5:  CLRF   59
20A6:  CLRF   5A
20A7:  CLRF   5B
20A8:  CLRF   5C
20A9:  CLRF   5D
20AA:  CLRF   5E
20AB:  CLRF   5F
20AC:  CLRF   60
20AD:  CLRF   61
20AE:  CLRF   62
20AF:  CLRF   63
20B0:  CLRF   64
20B1:  CLRF   65
20B2:  CLRF   66
20B3:  CLRF   67
20B4:  CLRF   68
20B5:  CLRF   69
20B6:  CLRF   6A
20B7:  CLRF   6B
20B8:  CLRF   6C
20B9:  CLRF   6D
20BA:  CLRF   6E
20BB:  CLRF   6F
20BC:  MOVLB  0D
20BD:  CLRF   20
20BE:  CLRF   21
20BF:  CLRF   22
20C0:  CLRF   23
20C1:  CLRF   24
20C2:  CLRF   25
20C3:  CLRF   26
20C4:  CLRF   27
20C5:  CLRF   28
20C6:  CLRF   29
20C7:  CLRF   2A
20C8:  CLRF   2B
20C9:  CLRF   2C
20CA:  CLRF   2D
20CB:  CLRF   2E
20CC:  CLRF   2F
20CD:  CLRF   30
20CE:  CLRF   31
20CF:  CLRF   32
20D0:  CLRF   33
20D1:  CLRF   34
20D2:  CLRF   35
20D3:  CLRF   36
20D4:  CLRF   37
20D5:  CLRF   38
20D6:  CLRF   39
20D7:  CLRF   3A
20D8:  CLRF   3B
20D9:  CLRF   3C
20DA:  CLRF   3D
20DB:  CLRF   3E
20DC:  CLRF   3F
20DD:  CLRF   40
20DE:  CLRF   41
20DF:  CLRF   42
20E0:  CLRF   43
20E1:  CLRF   44
20E2:  CLRF   45
20E3:  CLRF   46
20E4:  CLRF   47
20E5:  CLRF   48
20E6:  CLRF   49
20E7:  CLRF   4A
20E8:  CLRF   4B
20E9:  CLRF   4C
20EA:  CLRF   4D
20EB:  CLRF   4E
20EC:  CLRF   4F
20ED:  CLRF   50
20EE:  CLRF   51
20EF:  CLRF   52
20F0:  CLRF   53
20F1:  CLRF   54
20F2:  CLRF   55
20F3:  CLRF   56
20F4:  CLRF   57
20F5:  CLRF   58
20F6:  CLRF   59
20F7:  CLRF   5A
20F8:  CLRF   5B
20F9:  CLRF   5C
20FA:  CLRF   5D
20FB:  CLRF   5E
20FC:  CLRF   5F
20FD:  CLRF   60
20FE:  CLRF   61
20FF:  CLRF   62
2100:  CLRF   63
2101:  CLRF   64
2102:  CLRF   65
2103:  CLRF   66
2104:  CLRF   67
2105:  CLRF   68
2106:  CLRF   69
2107:  CLRF   6A
2108:  CLRF   6B
2109:  CLRF   6C
210A:  CLRF   6D
210B:  CLRF   6E
210C:  CLRF   6F
210D:  MOVLB  0E
210E:  CLRF   20
210F:  CLRF   21
2110:  CLRF   22
2111:  CLRF   23
2112:  CLRF   24
2113:  CLRF   25
2114:  CLRF   26
2115:  CLRF   27
2116:  CLRF   28
2117:  CLRF   29
2118:  CLRF   2A
2119:  CLRF   2B
211A:  CLRF   2C
211B:  CLRF   2D
211C:  CLRF   2E
211D:  CLRF   2F
211E:  CLRF   30
211F:  CLRF   31
2120:  CLRF   32
2121:  CLRF   33
2122:  CLRF   34
2123:  CLRF   35
2124:  CLRF   36
2125:  CLRF   37
2126:  CLRF   38
2127:  CLRF   39
2128:  CLRF   3A
....................    write_data_bytes(mis_fm, write_address, write_data, 256);
2129:  MOVLB  08
212A:  MOVF   5D,W
212B:  MOVLB  0E
212C:  MOVWF  42
212D:  MOVLB  08
212E:  MOVF   5C,W
212F:  MOVLB  0E
2130:  MOVWF  41
2131:  MOVLB  08
2132:  MOVF   5B,W
2133:  MOVLB  0E
2134:  MOVWF  40
2135:  MOVLB  08
2136:  MOVF   5A,W
2137:  MOVLB  0E
2138:  MOVWF  3F
2139:  MOVLB  0B
213A:  MOVF   2A,W
213B:  MOVLB  0E
213C:  MOVWF  46
213D:  MOVLB  0B
213E:  MOVF   29,W
213F:  MOVLB  0E
2140:  MOVWF  45
2141:  MOVLB  0B
2142:  MOVF   28,W
2143:  MOVLB  0E
2144:  MOVWF  44
2145:  MOVLB  0B
2146:  MOVF   27,W
2147:  MOVLB  0E
2148:  MOVWF  43
2149:  MOVLW  23
214A:  MOVWF  48
214B:  MOVLW  7B
214C:  MOVWF  47
214D:  MOVLW  01
214E:  MOVWF  4A
214F:  CLRF   49
2150:  MOVLP  10
2151:  MOVLB  00
2152:  CALL   000
2153:  MOVLP  20
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
2154:  MOVLW  AD
2155:  MOVLB  03
2156:  MOVWF  11
2157:  MOVLW  04
2158:  MOVWF  12
2159:  MOVLP  08
215A:  MOVLB  00
215B:  CALL   045
215C:  MOVLP  20
215D:  MOVLP  28
215E:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read(unsigned int8 uplinkcmd[])
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
215F:  MOVLW  BF
2160:  MOVLB  03
2161:  MOVWF  11
2162:  MOVLW  04
2163:  MOVWF  12
2164:  MOVLP  08
2165:  MOVLB  00
2166:  CALL   045
2167:  MOVLP  20
....................    FLASH_PARAM flash_param = {0};
2168:  MOVLB  0B
2169:  CLRF   27
216A:  CLRF   28
216B:  CLRF   29
216C:  CLRF   2A
216D:  CLRF   2B
216E:  CLRF   2C
216F:  CLRF   2D
....................    // for(unsigned int8 i = 0; i < PARAMETER_LENGTH; i++)
....................    // {
....................    //    fprintf(PC, "Parameter[%d]: %02X\r\n", i, parameter[i]);
....................    // }
....................    flash_param.id = uplinkcmd[0];
2170:  MOVF   25,W
2171:  MOVWF  04
2172:  MOVF   26,W
2173:  MOVWF  05
2174:  MOVIW  [FSR0+00],W
2175:  MOVWF  27
....................    flash_param.readaddress = 
....................    ((unsigned int32)uplinkcmd[1] << 24) |
....................    ((unsigned int32)uplinkcmd[2] << 16) |
....................    ((unsigned int32)uplinkcmd[3] << 8)  |
....................    ((unsigned int32)uplinkcmd[4]);
2176:  MOVF   25,W
2177:  MOVWF  04
2178:  MOVF   26,W
2179:  MOVWF  05
217A:  ADDFSR 01,FSR0
217B:  MOVF   00,W
217C:  MOVLB  0C
217D:  CLRF   31
217E:  CLRF   30
217F:  CLRF   2F
2180:  MOVWF  2E
2181:  MOVWF  31
2182:  CLRF   2E
2183:  CLRF   2F
2184:  CLRF   30
2185:  MOVLB  0B
2186:  MOVF   25,W
2187:  MOVWF  04
2188:  MOVF   26,W
2189:  MOVWF  05
218A:  ADDFSR 02,FSR0
218B:  MOVF   00,W
218C:  MOVLB  0C
218D:  CLRF   36
218E:  CLRF   35
218F:  CLRF   34
2190:  MOVWF  33
2191:  MOVF   34,W
2192:  MOVWF  7A
2193:  MOVF   33,W
2194:  MOVWF  79
2195:  CLRF   77
2196:  CLRF   78
2197:  MOVF   77,W
2198:  IORWF  2E,F
2199:  MOVF   78,W
219A:  IORWF  2F,F
219B:  MOVF   33,W
219C:  IORWF  30,F
219D:  MOVF   34,W
219E:  IORWF  31,F
219F:  MOVLB  0B
21A0:  MOVF   25,W
21A1:  MOVWF  04
21A2:  MOVF   26,W
21A3:  MOVWF  05
21A4:  ADDFSR 03,FSR0
21A5:  MOVF   00,W
21A6:  MOVLB  0C
21A7:  CLRF   36
21A8:  CLRF   35
21A9:  CLRF   34
21AA:  MOVWF  33
21AB:  MOVF   35,W
21AC:  MOVWF  7A
21AD:  MOVF   34,W
21AE:  MOVWF  79
21AF:  MOVF   33,W
21B0:  MOVWF  78
21B1:  CLRF   77
21B2:  MOVF   77,W
21B3:  IORWF  2E,F
21B4:  MOVF   33,W
21B5:  IORWF  2F,F
21B6:  MOVF   34,W
21B7:  IORWF  30,F
21B8:  MOVF   35,W
21B9:  IORWF  31,F
21BA:  MOVLB  0B
21BB:  MOVF   25,W
21BC:  MOVWF  04
21BD:  MOVF   26,W
21BE:  MOVWF  05
21BF:  MOVIW  [FSR0+04],W
21C0:  MOVWF  77
21C1:  CLRF   78
21C2:  CLRF   79
21C3:  CLRF   7A
21C4:  MOVF   77,W
21C5:  MOVLB  0C
21C6:  IORWF  2E,W
21C7:  MOVLB  0B
21C8:  MOVWF  2A
21C9:  MOVF   78,W
21CA:  MOVLB  0C
21CB:  IORWF  2F,W
21CC:  MOVLB  0B
21CD:  MOVWF  2B
21CE:  MOVF   79,W
21CF:  MOVLB  0C
21D0:  IORWF  30,W
21D1:  MOVLB  0B
21D2:  MOVWF  2C
21D3:  MOVF   7A,W
21D4:  MOVLB  0C
21D5:  IORWF  31,W
21D6:  MOVLB  0B
21D7:  MOVWF  2D
.................... 
....................    flash_param.readpacketnum =
....................     ((unsigned int16)uplinkcmd[7] << 8) |
....................     ((unsigned int16)uplinkcmd[8]);
21D8:  MOVF   25,W
21D9:  MOVWF  04
21DA:  MOVF   26,W
21DB:  MOVWF  05
21DC:  ADDFSR 07,FSR0
21DD:  MOVF   00,W
21DE:  MOVLB  0C
21DF:  CLRF   2F
21E0:  MOVWF  2E
21E1:  MOVWF  2F
21E2:  CLRF   2E
21E3:  MOVLB  0B
21E4:  MOVF   25,W
21E5:  MOVWF  04
21E6:  MOVF   26,W
21E7:  MOVWF  05
21E8:  MOVIW  [FSR0+08],W
21E9:  CLRF   7A
21EA:  MOVLB  0C
21EB:  IORWF  2E,W
21EC:  MOVLB  0B
21ED:  MOVWF  28
21EE:  MOVF   7A,W
21EF:  MOVLB  0C
21F0:  IORWF  2F,W
21F1:  MOVLB  0B
21F2:  MOVWF  29
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
21F3:  MOVLW  C9
21F4:  MOVLB  03
21F5:  MOVWF  11
21F6:  MOVLW  04
21F7:  MOVWF  12
21F8:  BCF    03.0
21F9:  MOVLW  0C
21FA:  MOVLB  0C
21FB:  MOVWF  6B
21FC:  MOVLP  08
21FD:  MOVLB  00
21FE:  CALL   34E
21FF:  MOVLP  20
2200:  MOVLB  0B
2201:  MOVF   27,W
2202:  MOVLB  0C
2203:  MOVWF  6B
2204:  MOVLW  37
2205:  MOVWF  6C
2206:  MOVLP  08
2207:  MOVLB  00
2208:  CALL   3A8
2209:  MOVLP  20
220A:  MOVLW  0D
220B:  MOVLB  0E
220C:  MOVWF  43
220D:  MOVLP  08
220E:  MOVLB  00
220F:  CALL   020
2210:  MOVLP  20
2211:  MOVLW  0A
2212:  MOVLB  0E
2213:  MOVWF  43
2214:  MOVLP  08
2215:  MOVLB  00
2216:  CALL   020
2217:  MOVLP  20
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
2218:  MOVLW  D3
2219:  MOVLB  03
221A:  MOVWF  11
221B:  MOVLW  04
221C:  MOVWF  12
221D:  BCF    03.0
221E:  MOVLW  0E
221F:  MOVLB  0C
2220:  MOVWF  6B
2221:  MOVLP  08
2222:  MOVLB  00
2223:  CALL   34E
2224:  MOVLP  20
2225:  MOVLB  0B
2226:  MOVF   2D,W
2227:  MOVLB  0C
2228:  MOVWF  6B
2229:  MOVLW  37
222A:  MOVWF  6C
222B:  MOVLP  08
222C:  MOVLB  00
222D:  CALL   3A8
222E:  MOVLP  20
222F:  MOVLB  0B
2230:  MOVF   2C,W
2231:  MOVLB  0C
2232:  MOVWF  6B
2233:  MOVLW  37
2234:  MOVWF  6C
2235:  MOVLP  08
2236:  MOVLB  00
2237:  CALL   3A8
2238:  MOVLP  20
2239:  MOVLB  0B
223A:  MOVF   2B,W
223B:  MOVLB  0C
223C:  MOVWF  6B
223D:  MOVLW  37
223E:  MOVWF  6C
223F:  MOVLP  08
2240:  MOVLB  00
2241:  CALL   3A8
2242:  MOVLP  20
2243:  MOVLB  0B
2244:  MOVF   2A,W
2245:  MOVLB  0C
2246:  MOVWF  6B
2247:  MOVLW  37
2248:  MOVWF  6C
2249:  MOVLP  08
224A:  MOVLB  00
224B:  CALL   3A8
224C:  MOVLP  20
224D:  MOVLW  0D
224E:  MOVLB  0E
224F:  MOVWF  43
2250:  MOVLP  08
2251:  MOVLB  00
2252:  CALL   020
2253:  MOVLP  20
2254:  MOVLW  0A
2255:  MOVLB  0E
2256:  MOVWF  43
2257:  MOVLP  08
2258:  MOVLB  00
2259:  CALL   020
225A:  MOVLP  20
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
225B:  MOVLW  DE
225C:  MOVLB  03
225D:  MOVWF  11
225E:  MOVLW  04
225F:  MOVWF  12
2260:  BCF    03.0
2261:  MOVLW  0E
2262:  MOVLB  0C
2263:  MOVWF  6B
2264:  MOVLP  08
2265:  MOVLB  00
2266:  CALL   34E
2267:  MOVLP  20
2268:  MOVLB  0B
2269:  MOVF   29,W
226A:  MOVLB  0C
226B:  MOVWF  6B
226C:  MOVLW  37
226D:  MOVWF  6C
226E:  MOVLP  08
226F:  MOVLB  00
2270:  CALL   3A8
2271:  MOVLP  20
2272:  MOVLB  0B
2273:  MOVF   28,W
2274:  MOVLB  0C
2275:  MOVWF  6B
2276:  MOVLW  37
2277:  MOVWF  6C
2278:  MOVLP  08
2279:  MOVLB  00
227A:  CALL   3A8
227B:  MOVLP  20
227C:  MOVLW  0D
227D:  MOVLB  0E
227E:  MOVWF  43
227F:  MOVLP  08
2280:  MOVLB  00
2281:  CALL   020
2282:  MOVLP  20
2283:  MOVLW  0A
2284:  MOVLB  0E
2285:  MOVWF  43
2286:  MOVLP  08
2287:  MOVLB  00
2288:  CALL   020
2289:  MOVLP  20
....................    
....................    piclog_make(flash_param.id, 0x00);
228A:  MOVLB  0B
228B:  MOVF   27,W
228C:  MOVLB  0C
228D:  MOVWF  2F
228E:  CLRF   30
228F:  MOVLP  10
2290:  MOVLB  00
2291:  CALL   33B
2292:  MOVLP  20
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
2293:  MOVLB  0B
2294:  CLRF   2E
2295:  CLRF   2F
2296:  CLRF   30
2297:  CLRF   31
2298:  CLRF   32
2299:  CLRF   33
229A:  CLRF   34
229B:  CLRF   35
229C:  CLRF   36
229D:  CLRF   37
229E:  CLRF   38
229F:  CLRF   39
22A0:  CLRF   3A
22A1:  CLRF   3B
22A2:  CLRF   3C
22A3:  CLRF   3D
22A4:  CLRF   3E
22A5:  CLRF   3F
22A6:  CLRF   40
22A7:  CLRF   41
22A8:  CLRF   42
22A9:  CLRF   43
22AA:  CLRF   44
22AB:  CLRF   45
22AC:  CLRF   46
22AD:  CLRF   47
22AE:  CLRF   48
22AF:  CLRF   49
22B0:  CLRF   4A
22B1:  CLRF   4B
22B2:  CLRF   4C
22B3:  CLRF   4D
22B4:  CLRF   4E
22B5:  CLRF   4F
22B6:  CLRF   50
22B7:  CLRF   51
22B8:  CLRF   52
22B9:  CLRF   53
22BA:  CLRF   54
22BB:  CLRF   55
22BC:  CLRF   56
22BD:  CLRF   57
22BE:  CLRF   58
22BF:  CLRF   59
22C0:  CLRF   5A
22C1:  CLRF   5B
22C2:  CLRF   5C
22C3:  CLRF   5D
22C4:  CLRF   5E
22C5:  CLRF   5F
22C6:  CLRF   60
22C7:  CLRF   61
22C8:  CLRF   62
22C9:  CLRF   63
22CA:  CLRF   64
22CB:  CLRF   65
22CC:  CLRF   66
22CD:  CLRF   67
22CE:  CLRF   68
22CF:  CLRF   69
22D0:  CLRF   6A
22D1:  CLRF   6B
22D2:  CLRF   6C
22D3:  CLRF   6D
....................    unsigned int32 read_address;
....................    fprintf(PC, "READ DATA\r\n");
22D4:  MOVLW  E9
22D5:  MOVLB  03
22D6:  MOVWF  11
22D7:  MOVLW  04
22D8:  MOVWF  12
22D9:  MOVLP  08
22DA:  MOVLB  00
22DB:  CALL   045
22DC:  MOVLP  20
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
22DD:  MOVLB  08
22DE:  MOVF   5D,W
22DF:  MOVLB  0D
22E0:  MOVWF  37
22E1:  MOVLB  08
22E2:  MOVF   5C,W
22E3:  MOVLB  0D
22E4:  MOVWF  36
22E5:  MOVLB  08
22E6:  MOVF   5B,W
22E7:  MOVLB  0D
22E8:  MOVWF  35
22E9:  MOVLB  08
22EA:  MOVF   5A,W
22EB:  MOVLB  0D
22EC:  MOVWF  34
22ED:  MOVLP  08
22EE:  MOVLB  00
22EF:  CALL   22E
22F0:  MOVLP  20
22F1:  MOVF   78,F
22F2:  BTFSS  03.2
22F3:  GOTO   2FE
....................       fprintf(PC, "Mission Flash is not connected\r\n");
22F4:  MOVLW  EF
22F5:  MOVLB  03
22F6:  MOVWF  11
22F7:  MOVLW  04
22F8:  MOVWF  12
22F9:  MOVLP  08
22FA:  MOVLB  00
22FB:  CALL   045
22FC:  MOVLP  20
....................       return;
22FD:  GOTO   3BA
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
22FE:  MOVLB  0C
22FF:  CLRF   27
2300:  CLRF   26
2301:  CLRF   25
2302:  CLRF   24
2303:  MOVF   27,F
2304:  BTFSS  03.2
2305:  GOTO   3B1
2306:  MOVF   26,F
2307:  BTFSS  03.2
2308:  GOTO   3B1
2309:  MOVF   25,W
230A:  MOVLB  0B
230B:  SUBWF  29,W
230C:  BTFSC  03.0
230D:  GOTO   310
230E:  MOVLB  0C
230F:  GOTO   3B1
2310:  BTFSS  03.2
2311:  GOTO   318
2312:  MOVF   28,W
2313:  MOVLB  0C
2314:  SUBWF  24,W
2315:  BTFSC  03.0
2316:  GOTO   3B1
2317:  MOVLB  0B
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
2318:  MOVLB  0C
2319:  RLF    24,W
231A:  MOVWF  77
231B:  RLF    25,W
231C:  MOVWF  78
231D:  RLF    26,W
231E:  MOVWF  79
231F:  RLF    27,W
2320:  MOVWF  7A
2321:  RLF    77,F
2322:  RLF    78,F
2323:  RLF    79,F
2324:  RLF    7A,F
2325:  RLF    77,F
2326:  RLF    78,F
2327:  RLF    79,F
2328:  RLF    7A,F
2329:  RLF    77,F
232A:  RLF    78,F
232B:  RLF    79,F
232C:  RLF    7A,F
232D:  RLF    77,F
232E:  RLF    78,F
232F:  RLF    79,F
2330:  RLF    7A,F
2331:  RLF    77,F
2332:  RLF    78,F
2333:  RLF    79,F
2334:  RLF    7A,F
2335:  MOVLW  C0
2336:  ANDWF  77,F
2337:  MOVF   77,W
2338:  MOVLB  0B
2339:  ADDWF  2A,W
233A:  MOVLB  0C
233B:  MOVWF  20
233C:  MOVF   78,W
233D:  MOVLB  0B
233E:  ADDWFC 2B,W
233F:  MOVLB  0C
2340:  MOVWF  21
2341:  MOVF   79,W
2342:  MOVLB  0B
2343:  ADDWFC 2C,W
2344:  MOVLB  0C
2345:  MOVWF  22
2346:  MOVF   7A,W
2347:  MOVLB  0B
2348:  ADDWFC 2D,W
2349:  MOVLB  0C
234A:  MOVWF  23
.................... 
....................       //fprintf(PC, "Packet %lu: Address 0x%08LX\r\n", packetcount, read_address);
....................       
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
234B:  MOVLB  08
234C:  MOVF   5D,W
234D:  MOVLB  0E
234E:  MOVWF  42
234F:  MOVLB  08
2350:  MOVF   5C,W
2351:  MOVLB  0E
2352:  MOVWF  41
2353:  MOVLB  08
2354:  MOVF   5B,W
2355:  MOVLB  0E
2356:  MOVWF  40
2357:  MOVLB  08
2358:  MOVF   5A,W
2359:  MOVLB  0E
235A:  MOVWF  3F
235B:  MOVLB  0C
235C:  MOVF   23,W
235D:  MOVLB  0E
235E:  MOVWF  46
235F:  MOVLB  0C
2360:  MOVF   22,W
2361:  MOVLB  0E
2362:  MOVWF  45
2363:  MOVLB  0C
2364:  MOVF   21,W
2365:  MOVLB  0E
2366:  MOVWF  44
2367:  MOVLB  0C
2368:  MOVF   20,W
2369:  MOVLB  0E
236A:  MOVWF  43
236B:  MOVLW  23
236C:  MOVWF  48
236D:  MOVLW  7E
236E:  MOVWF  47
236F:  CLRF   4C
2370:  CLRF   4B
2371:  CLRF   4A
2372:  MOVLW  40
2373:  MOVWF  49
2374:  MOVLP  08
2375:  MOVLB  00
2376:  CALL   287
2377:  MOVLP  20
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
2378:  MOVLB  0B
2379:  CLRF   6E
237A:  MOVF   6E,W
237B:  SUBLW  3F
237C:  BTFSS  03.0
237D:  GOTO   399
....................          fprintf(PC,"%02X ",readdata[bytecount]);
237E:  MOVLW  7E
237F:  ADDWF  6E,W
2380:  MOVWF  04
2381:  MOVLW  23
2382:  MOVWF  05
2383:  BTFSC  03.0
2384:  INCF   05,F
2385:  MOVF   00,W
2386:  MOVLB  0C
2387:  MOVWF  2E
2388:  MOVWF  6B
2389:  MOVLW  37
238A:  MOVWF  6C
238B:  MOVLP  08
238C:  MOVLB  00
238D:  CALL   3A8
238E:  MOVLP  20
238F:  MOVLW  20
2390:  MOVLB  0E
2391:  MOVWF  43
2392:  MOVLP  08
2393:  MOVLB  00
2394:  CALL   020
2395:  MOVLP  20
2396:  MOVLB  0B
2397:  INCF   6E,F
2398:  GOTO   37A
....................       }
....................       fprintf(PC,"\r\n");
2399:  MOVLW  0D
239A:  MOVLB  0E
239B:  MOVWF  43
239C:  MOVLP  08
239D:  MOVLB  00
239E:  CALL   020
239F:  MOVLP  20
23A0:  MOVLW  0A
23A1:  MOVLB  0E
23A2:  MOVWF  43
23A3:  MOVLP  08
23A4:  MOVLB  00
23A5:  CALL   020
23A6:  MOVLP  20
23A7:  MOVLW  01
23A8:  MOVLB  0C
23A9:  ADDWF  24,F
23AA:  BTFSC  03.0
23AB:  INCF   25,F
23AC:  BTFSC  03.2
23AD:  INCF   26,F
23AE:  BTFSC  03.2
23AF:  INCF   27,F
23B0:  GOTO   303
....................    }
....................    fprintf(PC, "End Flash Read\r\n");
23B1:  MOVLW  00
23B2:  MOVLB  03
23B3:  MOVWF  11
23B4:  MOVLW  05
23B5:  MOVWF  12
23B6:  MOVLP  08
23B7:  MOVLB  00
23B8:  CALL   045
23B9:  MOVLP  20
23BA:  MOVLP  28
23BB:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
23BC:  MOVLW  09
23BD:  MOVLB  03
23BE:  MOVWF  11
23BF:  MOVLW  05
23C0:  MOVWF  12
23C1:  MOVLP  08
23C2:  MOVLB  00
23C3:  CALL   045
23C4:  MOVLP  20
....................    flash_setting(mis_fm);
23C5:  MOVLB  08
23C6:  MOVF   5D,W
23C7:  MOVLB  0E
23C8:  MOVWF  42
23C9:  MOVLB  08
23CA:  MOVF   5C,W
23CB:  MOVLB  0E
23CC:  MOVWF  41
23CD:  MOVLB  08
23CE:  MOVF   5B,W
23CF:  MOVLB  0E
23D0:  MOVWF  40
23D1:  MOVLB  08
23D2:  MOVF   5A,W
23D3:  MOVLB  0E
23D4:  MOVWF  3F
23D5:  MOVLP  08
23D6:  MOVLB  00
23D7:  CALL   7E0
23D8:  MOVLP  20
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
23D9:  MOVLB  0B
23DA:  CLRF   2A
23DB:  CLRF   29
23DC:  CLRF   28
23DD:  CLRF   27
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
23DE:  MOVLB  08
23DF:  MOVF   5D,W
23E0:  MOVLB  0E
23E1:  MOVWF  42
23E2:  MOVLB  08
23E3:  MOVF   5C,W
23E4:  MOVLB  0E
23E5:  MOVWF  41
23E6:  MOVLB  08
23E7:  MOVF   5B,W
23E8:  MOVLB  0E
23E9:  MOVWF  40
23EA:  MOVLB  08
23EB:  MOVF   5A,W
23EC:  MOVLB  0E
23ED:  MOVWF  3F
23EE:  MOVLB  0B
23EF:  MOVF   2A,W
23F0:  MOVLB  0E
23F1:  MOVWF  46
23F2:  MOVLB  0B
23F3:  MOVF   29,W
23F4:  MOVLB  0E
23F5:  MOVWF  45
23F6:  MOVLB  0B
23F7:  MOVF   28,W
23F8:  MOVLB  0E
23F9:  MOVWF  44
23FA:  MOVLB  0B
23FB:  MOVF   27,W
23FC:  MOVLB  0E
23FD:  MOVWF  43
23FE:  MOVLW  23
23FF:  MOVWF  48
2400:  MOVLW  7B
2401:  MOVWF  47
2402:  CLRF   4C
2403:  CLRF   4B
2404:  CLRF   4A
2405:  MOVLW  04
2406:  MOVWF  49
2407:  MOVLP  08
2408:  MOVLB  00
2409:  CALL   287
240A:  MOVLP  20
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
240B:  MOVLW  17
240C:  MOVLB  03
240D:  MOVWF  11
240E:  MOVLW  05
240F:  MOVWF  12
2410:  BCF    03.0
2411:  MOVLW  0B
2412:  MOVLB  0C
2413:  MOVWF  6B
2414:  MOVLP  08
2415:  MOVLB  00
2416:  CALL   34E
2417:  MOVLP  20
2418:  MOVLB  0B
2419:  MOVF   2B,W
241A:  MOVLB  0C
241B:  MOVWF  6B
241C:  MOVLW  37
241D:  MOVWF  6C
241E:  MOVLP  08
241F:  MOVLB  00
2420:  CALL   3A8
2421:  MOVLP  20
2422:  MOVLW  20
2423:  MOVLB  0E
2424:  MOVWF  43
2425:  MOVLP  08
2426:  MOVLB  00
2427:  CALL   020
2428:  MOVLP  20
2429:  MOVLB  0B
242A:  MOVF   2C,W
242B:  MOVLB  0C
242C:  MOVWF  6B
242D:  MOVLW  37
242E:  MOVWF  6C
242F:  MOVLP  08
2430:  MOVLB  00
2431:  CALL   3A8
2432:  MOVLP  20
2433:  MOVLW  20
2434:  MOVLB  0E
2435:  MOVWF  43
2436:  MOVLP  08
2437:  MOVLB  00
2438:  CALL   020
2439:  MOVLP  20
243A:  MOVLB  0B
243B:  MOVF   2D,W
243C:  MOVLB  0C
243D:  MOVWF  6B
243E:  MOVLW  37
243F:  MOVWF  6C
2440:  MOVLP  08
2441:  MOVLB  00
2442:  CALL   3A8
2443:  MOVLP  20
2444:  MOVLW  20
2445:  MOVLB  0E
2446:  MOVWF  43
2447:  MOVLP  08
2448:  MOVLB  00
2449:  CALL   020
244A:  MOVLP  20
244B:  MOVLB  0B
244C:  MOVF   2E,W
244D:  MOVLB  0C
244E:  MOVWF  6B
244F:  MOVLW  37
2450:  MOVWF  6C
2451:  MOVLP  08
2452:  MOVLB  00
2453:  CALL   3A8
2454:  MOVLP  20
2455:  MOVLW  0D
2456:  MOVLB  0E
2457:  MOVWF  43
2458:  MOVLP  08
2459:  MOVLB  00
245A:  CALL   020
245B:  MOVLP  20
245C:  MOVLW  0A
245D:  MOVLB  0E
245E:  MOVWF  43
245F:  MOVLP  08
2460:  MOVLB  00
2461:  CALL   020
2462:  MOVLP  20
....................    fprintf(PC, "End Flash Read Address\r\n");
2463:  MOVLW  28
2464:  MOVLB  03
2465:  MOVWF  11
2466:  MOVLW  05
2467:  MOVWF  12
2468:  MOVLP  08
2469:  MOVLB  00
246A:  CALL   045
246B:  MOVLP  20
246C:  MOVLP  28
246D:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Copy\r\n");
246E:  MOVLW  35
246F:  MOVLB  03
2470:  MOVWF  11
2471:  MOVLW  05
2472:  MOVWF  12
2473:  MOVLP  08
2474:  MOVLB  00
2475:  CALL   045
2476:  MOVLP  20
....................    flash_setting(mis_fm);
2477:  MOVLB  08
2478:  MOVF   5D,W
2479:  MOVLB  0E
247A:  MOVWF  42
247B:  MOVLB  08
247C:  MOVF   5C,W
247D:  MOVLB  0E
247E:  MOVWF  41
247F:  MOVLB  08
2480:  MOVF   5B,W
2481:  MOVLB  0E
2482:  MOVWF  40
2483:  MOVLB  08
2484:  MOVF   5A,W
2485:  MOVLB  0E
2486:  MOVWF  3F
2487:  MOVLP  08
2488:  MOVLB  00
2489:  CALL   7E0
248A:  MOVLP  20
....................    flash_setting(smf);
248B:  MOVLB  08
248C:  MOVF   61,W
248D:  MOVLB  0E
248E:  MOVWF  42
248F:  MOVLB  08
2490:  MOVF   60,W
2491:  MOVLB  0E
2492:  MOVWF  41
2493:  MOVLB  08
2494:  MOVF   5F,W
2495:  MOVLB  0E
2496:  MOVWF  40
2497:  MOVLB  08
2498:  MOVF   5E,W
2499:  MOVLB  0E
249A:  MOVWF  3F
249B:  MOVLP  08
249C:  MOVLB  00
249D:  CALL   7E0
249E:  MOVLP  20
....................    
....................    // Example copy operation
....................    unsigned int32 src_address = 0x00000000;
....................    unsigned int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
249F:  MOVLB  0B
24A0:  CLRF   2A
24A1:  CLRF   29
24A2:  CLRF   28
24A3:  CLRF   27
24A4:  CLRF   2E
24A5:  CLRF   2D
24A6:  MOVLW  10
24A7:  MOVWF  2C
24A8:  CLRF   2B
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
24A9:  MOVLB  08
24AA:  MOVF   5D,W
24AB:  MOVLB  0E
24AC:  MOVWF  42
24AD:  MOVLB  08
24AE:  MOVF   5C,W
24AF:  MOVLB  0E
24B0:  MOVWF  41
24B1:  MOVLB  08
24B2:  MOVF   5B,W
24B3:  MOVLB  0E
24B4:  MOVWF  40
24B5:  MOVLB  08
24B6:  MOVF   5A,W
24B7:  MOVLB  0E
24B8:  MOVWF  3F
24B9:  MOVLB  0B
24BA:  MOVF   2A,W
24BB:  MOVLB  0E
24BC:  MOVWF  46
24BD:  MOVLB  0B
24BE:  MOVF   29,W
24BF:  MOVLB  0E
24C0:  MOVWF  45
24C1:  MOVLB  0B
24C2:  MOVF   28,W
24C3:  MOVLB  0E
24C4:  MOVWF  44
24C5:  MOVLB  0B
24C6:  MOVF   27,W
24C7:  MOVLB  0E
24C8:  MOVWF  43
24C9:  MOVLW  23
24CA:  MOVWF  48
24CB:  MOVLW  7F
24CC:  MOVWF  47
24CD:  CLRF   4C
24CE:  CLRF   4B
24CF:  MOVLW  01
24D0:  MOVWF  4A
24D1:  CLRF   49
24D2:  MOVLP  08
24D3:  MOVLB  00
24D4:  CALL   287
24D5:  MOVLP  20
....................    write_data_bytes(smf, dest_address, read_data, 256);
24D6:  MOVLB  08
24D7:  MOVF   61,W
24D8:  MOVLB  0E
24D9:  MOVWF  42
24DA:  MOVLB  08
24DB:  MOVF   60,W
24DC:  MOVLB  0E
24DD:  MOVWF  41
24DE:  MOVLB  08
24DF:  MOVF   5F,W
24E0:  MOVLB  0E
24E1:  MOVWF  40
24E2:  MOVLB  08
24E3:  MOVF   5E,W
24E4:  MOVLB  0E
24E5:  MOVWF  3F
24E6:  MOVLB  0B
24E7:  MOVF   2E,W
24E8:  MOVLB  0E
24E9:  MOVWF  46
24EA:  MOVLB  0B
24EB:  MOVF   2D,W
24EC:  MOVLB  0E
24ED:  MOVWF  45
24EE:  MOVLB  0B
24EF:  MOVF   2C,W
24F0:  MOVLB  0E
24F1:  MOVWF  44
24F2:  MOVLB  0B
24F3:  MOVF   2B,W
24F4:  MOVLB  0E
24F5:  MOVWF  43
24F6:  MOVLW  23
24F7:  MOVWF  48
24F8:  MOVLW  7F
24F9:  MOVWF  47
24FA:  MOVLW  01
24FB:  MOVWF  4A
24FC:  CLRF   49
24FD:  MOVLP  10
24FE:  MOVLB  00
24FF:  CALL   000
2500:  MOVLP  20
....................    
....................    fprintf(PC, "End Flash SMF Copy\r\n");
2501:  MOVLW  41
2502:  MOVLB  03
2503:  MOVWF  11
2504:  MOVLW  05
2505:  MOVWF  12
2506:  MOVLP  08
2507:  MOVLB  00
2508:  CALL   045
2509:  MOVLP  20
250A:  MOVLP  28
250B:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
....................    int8 read_data[256];
....................    //read_data_bytes(smf, read_address, read_data, 256);
....................    fprintf(PC, "Read Data: ");
....................    for (int i = 0; i < 256; i++)
....................    {
....................       fprintf(PC, "%02X ", read_data[i]);
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_smf_write(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Write\r\n");
....................    flash_setting(smf);
....................    unsigned int32 write_address = 0x00000000;
....................    int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    write_data_bytes(smf, write_address, write_data, 256);
....................    fprintf(PC, "End Flash SMF Write\r\n");
.................... }
....................   
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
250C:  MOVLW  81
250D:  MOVLB  03
250E:  MOVWF  11
250F:  MOVLW  05
2510:  MOVWF  12
2511:  MOVLP  08
2512:  MOVLB  00
2513:  CALL   045
2514:  MOVLP  20
....................    unsigned int8 writedata[PACKET_SIZE] = {0x00}; // Initialize write data to zero
2515:  MOVLB  0B
2516:  CLRF   27
2517:  CLRF   28
2518:  CLRF   29
2519:  CLRF   2A
251A:  CLRF   2B
251B:  CLRF   2C
251C:  CLRF   2D
251D:  CLRF   2E
251E:  CLRF   2F
251F:  CLRF   30
2520:  CLRF   31
2521:  CLRF   32
2522:  CLRF   33
2523:  CLRF   34
2524:  CLRF   35
2525:  CLRF   36
2526:  CLRF   37
2527:  CLRF   38
2528:  CLRF   39
2529:  CLRF   3A
252A:  CLRF   3B
252B:  CLRF   3C
252C:  CLRF   3D
252D:  CLRF   3E
252E:  CLRF   3F
252F:  CLRF   40
2530:  CLRF   41
2531:  CLRF   42
2532:  CLRF   43
2533:  CLRF   44
2534:  CLRF   45
2535:  CLRF   46
2536:  CLRF   47
2537:  CLRF   48
2538:  CLRF   49
2539:  CLRF   4A
253A:  CLRF   4B
253B:  CLRF   4C
253C:  CLRF   4D
253D:  CLRF   4E
253E:  CLRF   4F
253F:  CLRF   50
2540:  CLRF   51
2541:  CLRF   52
2542:  CLRF   53
2543:  CLRF   54
2544:  CLRF   55
2545:  CLRF   56
2546:  CLRF   57
2547:  CLRF   58
2548:  CLRF   59
2549:  CLRF   5A
254A:  CLRF   5B
254B:  CLRF   5C
254C:  CLRF   5D
254D:  CLRF   5E
254E:  CLRF   5F
254F:  CLRF   60
2550:  CLRF   61
2551:  CLRF   62
2552:  CLRF   63
2553:  CLRF   64
2554:  CLRF   65
2555:  CLRF   66
....................    
....................    write_data_bytes(mis_fm, ADDRESS_MANEGE_START, writedata, PACKET_SIZE);
2556:  MOVLB  08
2557:  MOVF   5D,W
2558:  MOVLB  0E
2559:  MOVWF  42
255A:  MOVLB  08
255B:  MOVF   5C,W
255C:  MOVLB  0E
255D:  MOVWF  41
255E:  MOVLB  08
255F:  MOVF   5B,W
2560:  MOVLB  0E
2561:  MOVWF  40
2562:  MOVLB  08
2563:  MOVF   5A,W
2564:  MOVLB  0E
2565:  MOVWF  3F
2566:  CLRF   46
2567:  CLRF   45
2568:  CLRF   44
2569:  CLRF   43
256A:  MOVLW  23
256B:  MOVWF  48
256C:  MOVLW  77
256D:  MOVWF  47
256E:  CLRF   4A
256F:  MOVLW  40
2570:  MOVWF  49
2571:  MOVLP  10
2572:  MOVLB  00
2573:  CALL   000
2574:  MOVLP  20
....................    misf_init(); // Update the address area after writing
2575:  MOVLP  08
2576:  CALL   3CF
2577:  MOVLP  20
.................... 
....................    piclog_make(parameter[0], 0x00); // Log the command execution
2578:  MOVLB  0B
2579:  MOVF   25,W
257A:  MOVWF  04
257B:  MOVF   26,W
257C:  MOVWF  05
257D:  ADDFSR 00,FSR0
257E:  MOVF   00,W
257F:  MOVWF  67
2580:  MOVLB  0C
2581:  MOVWF  2F
2582:  CLRF   30
2583:  MOVLP  10
2584:  MOVLB  00
2585:  CALL   33B
2586:  MOVLP  20
.................... 
....................    fprintf(PC, "End Flash Address Reset\r\n");
2587:  MOVLW  8F
2588:  MOVLB  03
2589:  MOVWF  11
258A:  MOVLW  05
258B:  MOVWF  12
258C:  MOVLP  08
258D:  MOVLB  00
258E:  CALL   045
258F:  MOVLP  20
2590:  MOVLP  28
2591:  GOTO   0EB (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "../lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... #Separate
.................... void transmit_ack();
.................... #Separate
.................... void transmit_status();
.................... #Separate
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // Copy to SMF
.................... #include "../lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... //#include "flash.h"
.................... 
.................... #Separate
.................... void copy_data(void);
.................... #Separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size);
.................... #Separate
.................... void check_and_erase_if_wrap(unsigned int32 data_region_start, unsigned int32 data_region_end);
.................... #Separate
.................... void erase_write_area(unsigned int32 data_write_addr, unsigned int32 write_size, unsigned int32 mis_end_address);
.................... #Separate
.................... void write_mission_data(unsigned int32 write_src, unsigned int32 write_size, unsigned int32 data_write_addr, int8* buffer, unsigned int32* used_size);
.................... #Separate
.................... void update_size_area(unsigned int32 mis_start_address, unsigned int32 used_size, unsigned int8 loop_count);
.................... 
.................... #include "./src/data_copy.c"
.................... //#include "../../cigs/mmj_cigs_config.h"
.................... #include "../mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... 
.................... #Separate
.................... #separate
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
354B:  MOVLW  9C
354C:  MOVLB  03
354D:  MOVWF  11
354E:  MOVLW  05
354F:  MOVWF  12
3550:  MOVLP  08
3551:  MOVLB  00
3552:  CALL   045
3553:  MOVLP  30
....................     fprintf(PC, "___Start copy_data__\r\n");
3554:  MOVLW  A9
3555:  MOVLB  03
3556:  MOVWF  11
3557:  MOVLW  05
3558:  MOVWF  12
3559:  MOVLP  08
355A:  MOVLB  00
355B:  CALL   045
355C:  MOVLP  30
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
355D:  MOVLB  0B
355E:  CLRF   60
355F:  MOVLP  08
3560:  MOVLB  00
3561:  CALL   7F3
3562:  MOVLP  30
3563:  MOVF   78,F
3564:  BTFSS  03.2
3565:  GOTO   697
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
3566:  MOVLW  B5
3567:  MOVLB  03
3568:  MOVWF  11
3569:  MOVLW  05
356A:  MOVWF  12
356B:  BCF    03.0
356C:  MOVLW  07
356D:  MOVLB  0C
356E:  MOVWF  6B
356F:  MOVLP  08
3570:  MOVLB  00
3571:  CALL   34E
3572:  MOVLP  30
3573:  MOVLB  0B
3574:  MOVF   60,W
3575:  MOVLB  0C
3576:  MOVWF  68
3577:  MOVLW  18
3578:  MOVWF  69
3579:  MOVLP  28
357A:  MOVLB  00
357B:  CALL   0F6
357C:  MOVLP  30
357D:  MOVLW  B9
357E:  MOVLB  03
357F:  MOVWF  11
3580:  MOVLW  05
3581:  MOVWF  12
3582:  BSF    03.0
3583:  MOVLW  12
3584:  MOVLB  0C
3585:  MOVWF  6B
3586:  MOVLP  08
3587:  MOVLB  00
3588:  CALL   34E
3589:  MOVLP  30
.................... 
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type;
....................         unsigned int32 mis_start_address, mis_end_address, write_src, write_size;
....................         uint8_t loop_count;
....................         unsigned int32 used_size;
358A:  MOVLP  28
358B:  GOTO   16B
358C:  MOVLP  30
358D:  MOVF   79,W
358E:  MOVLB  0B
358F:  MOVWF  62
3590:  MOVF   78,W
3591:  MOVWF  61
.................... 
....................         initialize_mission(smf_data, &mission_type, &mis_start_address, &mis_end_address, &write_src, &write_size, &loop_count, &used_size);
3592:  MOVF   62,W
3593:  MOVLB  0C
3594:  MOVWF  45
3595:  MOVLB  0B
3596:  MOVF   61,W
3597:  MOVLB  0C
3598:  MOVWF  44
3599:  MOVLW  23
359A:  MOVWF  47
359B:  MOVLW  B3
359C:  MOVWF  46
359D:  MOVLW  23
359E:  MOVWF  49
359F:  MOVLW  BC
35A0:  MOVWF  48
35A1:  MOVLW  23
35A2:  MOVWF  4B
35A3:  MOVLW  C0
35A4:  MOVWF  4A
35A5:  MOVLW  23
35A6:  MOVWF  4D
35A7:  MOVLW  C4
35A8:  MOVWF  4C
35A9:  MOVLW  23
35AA:  MOVWF  4F
35AB:  MOVLW  C8
35AC:  MOVWF  4E
35AD:  MOVLW  23
35AE:  MOVWF  51
35AF:  MOVLW  CC
35B0:  MOVWF  50
35B1:  MOVLW  23
35B2:  MOVWF  53
35B3:  MOVLW  CD
35B4:  MOVWF  52
35B5:  MOVLP  28
35B6:  MOVLB  00
35B7:  GOTO   3A5
35B8:  MOVLP  30
....................         status[i+1] = mission_type.mission_flag;
35B9:  MOVLW  01
35BA:  MOVLB  0B
35BB:  ADDWF  60,W
35BC:  ADDLW  09
35BD:  MOVWF  04
35BE:  MOVLW  20
35BF:  MOVWF  05
35C0:  BTFSC  03.0
35C1:  INCF   05,F
35C2:  MOVF   6B,W
35C3:  MOVWF  00
.................... 
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
35C4:  MOVF   6C,W
35C5:  MOVLB  0C
35C6:  MOVWF  31
35C7:  MOVLW  10
35C8:  MOVLB  0B
35C9:  ADDWF  6D,W
35CA:  MOVLB  0C
35CB:  MOVWF  32
35CC:  MOVLW  00
35CD:  MOVLB  0B
35CE:  ADDWFC 6E,W
35CF:  MOVLB  0C
35D0:  MOVWF  33
35D1:  MOVLW  00
35D2:  MOVLB  0B
35D3:  ADDWFC 6F,W
35D4:  MOVLB  0C
35D5:  MOVWF  34
35D6:  MOVF   23,W
35D7:  MOVWF  38
35D8:  MOVF   22,W
35D9:  MOVWF  37
35DA:  MOVF   21,W
35DB:  MOVWF  36
35DC:  MOVF   20,W
35DD:  MOVWF  35
35DE:  MOVF   31,W
35DF:  SUBWF  35,W
35E0:  MOVWF  39
35E1:  MOVF   32,W
35E2:  SUBWFC 36,W
35E3:  MOVWF  3A
35E4:  MOVF   33,W
35E5:  SUBWFC 37,W
35E6:  MOVWF  3B
35E7:  MOVF   34,W
35E8:  SUBWFC 38,W
35E9:  MOVWF  3C
35EA:  MOVF   2D,W
35EB:  ADDWF  31,W
35EC:  MOVWF  3D
35ED:  MOVF   2E,W
35EE:  ADDWFC 32,W
35EF:  MOVWF  3E
35F0:  MOVF   2F,W
35F1:  ADDWFC 33,W
35F2:  MOVWF  3F
35F3:  MOVF   30,W
35F4:  ADDWFC 34,W
35F5:  MOVWF  40
.................... 
....................         if ((used_size + write_size) > data_region_size)
35F6:  MOVF   28,W
35F7:  ADDWF  2D,W
35F8:  MOVWF  44
35F9:  MOVF   29,W
35FA:  ADDWFC 2E,W
35FB:  MOVWF  45
35FC:  MOVF   2A,W
35FD:  ADDWFC 2F,W
35FE:  MOVWF  46
35FF:  MOVF   2B,W
3600:  ADDWFC 30,W
3601:  MOVWF  47
3602:  MOVF   3C,W
3603:  SUBWF  47,W
3604:  BTFSS  03.0
3605:  GOTO   63A
3606:  BTFSS  03.2
3607:  GOTO   618
3608:  MOVF   3B,W
3609:  SUBWF  46,W
360A:  BTFSS  03.0
360B:  GOTO   63A
360C:  BTFSS  03.2
360D:  GOTO   618
360E:  MOVF   3A,W
360F:  SUBWF  45,W
3610:  BTFSS  03.0
3611:  GOTO   63A
3612:  BTFSS  03.2
3613:  GOTO   618
3614:  MOVF   44,W
3615:  SUBWF  39,W
3616:  BTFSC  03.0
3617:  GOTO   63A
....................         {
....................             check_and_erase_if_wrap(data_region_start, data_region_end);
3618:  MOVF   34,W
3619:  MOVWF  47
361A:  MOVF   33,W
361B:  MOVWF  46
361C:  MOVF   32,W
361D:  MOVWF  45
361E:  MOVF   31,W
361F:  MOVWF  44
3620:  MOVF   38,W
3621:  MOVWF  4B
3622:  MOVF   37,W
3623:  MOVWF  4A
3624:  MOVF   36,W
3625:  MOVWF  49
3626:  MOVF   35,W
3627:  MOVWF  48
3628:  MOVLP  28
3629:  MOVLB  00
362A:  GOTO   757
362B:  MOVLP  30
....................             loop_count++;
362C:  MOVLB  0C
362D:  INCF   2C,F
....................             used_size = 0;
362E:  CLRF   30
362F:  CLRF   2F
3630:  CLRF   2E
3631:  CLRF   2D
....................             data_write_addr = data_region_start;
3632:  MOVF   34,W
3633:  MOVWF  40
3634:  MOVF   33,W
3635:  MOVWF  3F
3636:  MOVF   32,W
3637:  MOVWF  3E
3638:  MOVF   31,W
3639:  MOVWF  3D
....................         }
.................... 
....................         erase_write_area(data_write_addr, write_size, mis_end_address);
363A:  MOVF   40,W
363B:  MOVWF  47
363C:  MOVF   3F,W
363D:  MOVWF  46
363E:  MOVF   3E,W
363F:  MOVWF  45
3640:  MOVF   3D,W
3641:  MOVWF  44
3642:  MOVF   2B,W
3643:  MOVWF  4B
3644:  MOVF   2A,W
3645:  MOVWF  4A
3646:  MOVF   29,W
3647:  MOVWF  49
3648:  MOVF   28,W
3649:  MOVWF  48
364A:  MOVF   23,W
364B:  MOVWF  4F
364C:  MOVF   22,W
364D:  MOVWF  4E
364E:  MOVF   21,W
364F:  MOVWF  4D
3650:  MOVF   20,W
3651:  MOVWF  4C
3652:  MOVLB  00
3653:  GOTO   000
.................... 
....................         write_mission_data(write_src, write_size, data_write_addr, buffer, &used_size);
3654:  MOVLB  0C
3655:  MOVF   27,W
3656:  MOVWF  47
3657:  MOVF   26,W
3658:  MOVWF  46
3659:  MOVF   25,W
365A:  MOVWF  45
365B:  MOVF   24,W
365C:  MOVWF  44
365D:  MOVF   2B,W
365E:  MOVWF  4B
365F:  MOVF   2A,W
3660:  MOVWF  4A
3661:  MOVF   29,W
3662:  MOVWF  49
3663:  MOVF   28,W
3664:  MOVWF  48
3665:  MOVF   40,W
3666:  MOVWF  4F
3667:  MOVF   3F,W
3668:  MOVWF  4E
3669:  MOVF   3E,W
366A:  MOVWF  4D
366B:  MOVF   3D,W
366C:  MOVWF  4C
366D:  MOVLW  23
366E:  MOVWF  51
366F:  MOVLW  70
3670:  MOVWF  50
3671:  MOVLW  23
3672:  MOVWF  53
3673:  MOVLW  CD
3674:  MOVWF  52
3675:  MOVLB  00
3676:  GOTO   082
.................... 
....................         update_size_area(mis_start_address, used_size, loop_count);
3677:  MOVLB  0B
3678:  MOVF   6F,W
3679:  MOVLB  0C
367A:  MOVWF  47
367B:  MOVLB  0B
367C:  MOVF   6E,W
367D:  MOVLB  0C
367E:  MOVWF  46
367F:  MOVLB  0B
3680:  MOVF   6D,W
3681:  MOVLB  0C
3682:  MOVWF  45
3683:  MOVLB  0B
3684:  MOVF   6C,W
3685:  MOVLB  0C
3686:  MOVWF  44
3687:  MOVF   30,W
3688:  MOVWF  4B
3689:  MOVF   2F,W
368A:  MOVWF  4A
368B:  MOVF   2E,W
368C:  MOVWF  49
368D:  MOVF   2D,W
368E:  MOVWF  48
368F:  MOVF   2C,W
3690:  MOVWF  4C
3691:  MOVLB  00
3692:  GOTO   33D
3693:  MOVLB  0B
3694:  INCF   60,F
3695:  GOTO   55F
3696:  MOVLB  00
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
3697:  MOVLW  C3
3698:  MOVLB  03
3699:  MOVWF  11
369A:  MOVLW  05
369B:  MOVWF  12
369C:  MOVLP  08
369D:  MOVLB  00
369E:  CALL   045
369F:  MOVLP  30
....................     fprintf(PC, "____________________\r\n\r\n");
36A0:  MOVLW  D0
36A1:  MOVLB  03
36A2:  MOVWF  11
36A3:  MOVLW  05
36A4:  MOVWF  12
36A5:  MOVLP  08
36A6:  MOVLB  00
36A7:  CALL   045
36A8:  MOVLP  30
36A9:  MOVLP  28
36AA:  GOTO   7D8 (RETURN)
.................... }
.................... 
.................... #separate
.................... void initialize_mission(smfDataStruct* smf_data, MissionTypeStruct* mission_type,
....................                         unsigned int32* mis_start_address, unsigned int32* mis_end_address,
....................                         unsigned int32* write_src, unsigned int32* write_size,
....................                         unsigned int8* loop_count, unsigned int32* used_size)
.................... {
....................     *mission_type = getMissionTypeStruct(smf_data->mission_type);
*
2BA5:  MOVLB  0C
2BA6:  MOVF   47,W
2BA7:  MOVWF  7A
2BA8:  MOVF   46,W
2BA9:  MOVWF  63
2BAA:  MOVF   7A,W
2BAB:  MOVWF  64
2BAC:  MOVF   44,W
2BAD:  MOVWF  04
2BAE:  MOVF   45,W
2BAF:  MOVWF  05
2BB0:  ADDFSR 00,FSR0
2BB1:  MOVF   00,W
2BB2:  MOVWF  65
2BB3:  MOVWF  6C
2BB4:  MOVLB  00
2BB5:  GOTO   1BC
2BB6:  MOVF   79,W
2BB7:  MOVWF  7A
2BB8:  MOVF   78,W
2BB9:  MOVWF  04
2BBA:  MOVF   7A,W
2BBB:  MOVWF  05
2BBC:  MOVLW  09
2BBD:  MOVWF  78
2BBE:  MOVLB  0C
2BBF:  MOVF   64,W
2BC0:  MOVWF  07
2BC1:  MOVF   63,W
2BC2:  MOVWF  06
2BC3:  MOVIW  [FSR0++],W
2BC4:  MOVWI  W,[FSR1++]
2BC5:  DECFSZ 78,F
2BC6:  GOTO   3C3
....................     *mis_start_address = mission_type->start_address;
2BC7:  MOVF   49,W
2BC8:  MOVWF  7A
2BC9:  MOVF   7A,W
2BCA:  MOVWF  64
2BCB:  MOVF   46,W
2BCC:  MOVWF  04
2BCD:  MOVF   47,W
2BCE:  MOVWF  05
2BCF:  ADDFSR 00,FSR0
2BD0:  MOVF   00,W
2BD1:  MOVWF  77
2BD2:  ADDFSR 01,FSR0
2BD3:  MOVF   00,W
2BD4:  MOVWF  78
2BD5:  ADDFSR 01,FSR0
2BD6:  MOVF   00,W
2BD7:  MOVWF  79
2BD8:  ADDFSR 01,FSR0
2BD9:  MOVF   00,W
2BDA:  MOVWF  7A
2BDB:  ADDFSR 3D,FSR0
2BDC:  MOVF   7A,W
2BDD:  MOVWF  68
2BDE:  MOVF   79,W
2BDF:  MOVWF  67
2BE0:  MOVF   78,W
2BE1:  MOVWF  66
2BE2:  MOVF   77,W
2BE3:  MOVWF  65
2BE4:  MOVF   64,W
2BE5:  MOVWF  05
2BE6:  MOVF   48,W
2BE7:  MOVWF  04
2BE8:  MOVF   65,W
2BE9:  MOVWF  00
2BEA:  MOVF   66,W
2BEB:  MOVWI  W,[FSR0+01]
2BEC:  MOVF   67,W
2BED:  MOVWI  W,[FSR0+02]
2BEE:  MOVF   68,W
2BEF:  MOVWI  W,[FSR0+03]
....................     *mis_end_address = mission_type->end_address;
2BF0:  MOVF   46,W
2BF1:  MOVWF  04
2BF2:  MOVF   47,W
2BF3:  MOVWF  05
2BF4:  ADDFSR 04,FSR0
2BF5:  MOVF   00,W
2BF6:  MOVWF  77
2BF7:  ADDFSR 01,FSR0
2BF8:  MOVF   00,W
2BF9:  MOVWF  78
2BFA:  ADDFSR 01,FSR0
2BFB:  MOVF   00,W
2BFC:  MOVWF  79
2BFD:  ADDFSR 01,FSR0
2BFE:  MOVF   00,W
2BFF:  MOVWF  7A
2C00:  ADDFSR 3D,FSR0
2C01:  MOVF   7A,W
2C02:  MOVWF  68
2C03:  MOVF   79,W
2C04:  MOVWF  67
2C05:  MOVF   78,W
2C06:  MOVWF  66
2C07:  MOVF   77,W
2C08:  MOVWF  65
2C09:  MOVF   4B,W
2C0A:  MOVWF  05
2C0B:  MOVF   4A,W
2C0C:  MOVWF  04
2C0D:  MOVF   65,W
2C0E:  MOVWF  00
2C0F:  MOVF   66,W
2C10:  MOVWI  W,[FSR0+01]
2C11:  MOVF   67,W
2C12:  MOVWI  W,[FSR0+02]
2C13:  MOVF   68,W
2C14:  MOVWI  W,[FSR0+03]
....................     *write_src = smf_data->src;
2C15:  MOVF   44,W
2C16:  MOVWF  04
2C17:  MOVF   45,W
2C18:  MOVWF  05
2C19:  ADDFSR 01,FSR0
2C1A:  MOVF   00,W
2C1B:  MOVWF  77
2C1C:  ADDFSR 01,FSR0
2C1D:  MOVF   00,W
2C1E:  MOVWF  78
2C1F:  ADDFSR 01,FSR0
2C20:  MOVF   00,W
2C21:  MOVWF  79
2C22:  ADDFSR 01,FSR0
2C23:  MOVF   00,W
2C24:  MOVWF  7A
2C25:  ADDFSR 3D,FSR0
2C26:  MOVF   7A,W
2C27:  MOVWF  68
2C28:  MOVF   79,W
2C29:  MOVWF  67
2C2A:  MOVF   78,W
2C2B:  MOVWF  66
2C2C:  MOVF   77,W
2C2D:  MOVWF  65
2C2E:  MOVF   4D,W
2C2F:  MOVWF  05
2C30:  MOVF   4C,W
2C31:  MOVWF  04
2C32:  MOVF   65,W
2C33:  MOVWF  00
2C34:  MOVF   66,W
2C35:  MOVWI  W,[FSR0+01]
2C36:  MOVF   67,W
2C37:  MOVWI  W,[FSR0+02]
2C38:  MOVF   68,W
2C39:  MOVWI  W,[FSR0+03]
....................     *write_size = smf_data->size;
2C3A:  MOVF   44,W
2C3B:  MOVWF  04
2C3C:  MOVF   45,W
2C3D:  MOVWF  05
2C3E:  ADDFSR 05,FSR0
2C3F:  MOVF   00,W
2C40:  MOVWF  77
2C41:  ADDFSR 01,FSR0
2C42:  MOVF   00,W
2C43:  MOVWF  78
2C44:  ADDFSR 01,FSR0
2C45:  MOVF   00,W
2C46:  MOVWF  79
2C47:  ADDFSR 01,FSR0
2C48:  MOVF   00,W
2C49:  MOVWF  7A
2C4A:  ADDFSR 3D,FSR0
2C4B:  MOVF   7A,W
2C4C:  MOVWF  68
2C4D:  MOVF   79,W
2C4E:  MOVWF  67
2C4F:  MOVF   78,W
2C50:  MOVWF  66
2C51:  MOVF   77,W
2C52:  MOVWF  65
2C53:  MOVF   4F,W
2C54:  MOVWF  05
2C55:  MOVF   4E,W
2C56:  MOVWF  04
2C57:  MOVF   65,W
2C58:  MOVWF  00
2C59:  MOVF   66,W
2C5A:  MOVWI  W,[FSR0+01]
2C5B:  MOVF   67,W
2C5C:  MOVWI  W,[FSR0+02]
2C5D:  MOVF   68,W
2C5E:  MOVWI  W,[FSR0+03]
.................... 
....................     fprintf(PC, "In smf mission data start   address: %LX\r\n", *mis_start_address);
2C5F:  MOVF   49,W
2C60:  MOVWF  7A
2C61:  MOVF   48,W
2C62:  MOVWF  04
2C63:  MOVF   49,W
2C64:  MOVWF  05
2C65:  MOVF   00,W
2C66:  MOVWF  63
2C67:  ADDFSR 01,FSR0
2C68:  MOVF   00,W
2C69:  MOVWF  64
2C6A:  ADDFSR 01,FSR0
2C6B:  MOVF   00,W
2C6C:  MOVWF  65
2C6D:  ADDFSR 01,FSR0
2C6E:  MOVF   00,W
2C6F:  MOVWF  66
2C70:  ADDFSR 3D,FSR0
2C71:  MOVLW  DD
2C72:  MOVLB  03
2C73:  MOVWF  11
2C74:  MOVLW  05
2C75:  MOVWF  12
2C76:  BCF    03.0
2C77:  MOVLW  25
2C78:  MOVLB  0C
2C79:  MOVWF  6B
2C7A:  MOVLP  08
2C7B:  MOVLB  00
2C7C:  CALL   34E
2C7D:  MOVLP  28
2C7E:  MOVLB  0C
2C7F:  MOVF   66,W
2C80:  MOVWF  6B
2C81:  MOVLW  37
2C82:  MOVWF  6C
2C83:  MOVLP  08
2C84:  MOVLB  00
2C85:  CALL   3A8
2C86:  MOVLP  28
2C87:  MOVLB  0C
2C88:  MOVF   65,W
2C89:  MOVWF  6B
2C8A:  MOVLW  37
2C8B:  MOVWF  6C
2C8C:  MOVLP  08
2C8D:  MOVLB  00
2C8E:  CALL   3A8
2C8F:  MOVLP  28
2C90:  MOVLB  0C
2C91:  MOVF   64,W
2C92:  MOVWF  6B
2C93:  MOVLW  37
2C94:  MOVWF  6C
2C95:  MOVLP  08
2C96:  MOVLB  00
2C97:  CALL   3A8
2C98:  MOVLP  28
2C99:  MOVLB  0C
2C9A:  MOVF   63,W
2C9B:  MOVWF  6B
2C9C:  MOVLW  37
2C9D:  MOVWF  6C
2C9E:  MOVLP  08
2C9F:  MOVLB  00
2CA0:  CALL   3A8
2CA1:  MOVLP  28
2CA2:  MOVLW  0D
2CA3:  MOVLB  0E
2CA4:  MOVWF  43
2CA5:  MOVLP  08
2CA6:  MOVLB  00
2CA7:  CALL   020
2CA8:  MOVLP  28
2CA9:  MOVLW  0A
2CAA:  MOVLB  0E
2CAB:  MOVWF  43
2CAC:  MOVLP  08
2CAD:  MOVLB  00
2CAE:  CALL   020
2CAF:  MOVLP  28
....................     fprintf(PC, "In smf mission data end     address: %LX\r\n", *mis_end_address);
2CB0:  MOVLB  0C
2CB1:  MOVF   4B,W
2CB2:  MOVWF  7A
2CB3:  MOVF   4A,W
2CB4:  MOVWF  04
2CB5:  MOVF   4B,W
2CB6:  MOVWF  05
2CB7:  MOVF   00,W
2CB8:  MOVWF  63
2CB9:  ADDFSR 01,FSR0
2CBA:  MOVF   00,W
2CBB:  MOVWF  64
2CBC:  ADDFSR 01,FSR0
2CBD:  MOVF   00,W
2CBE:  MOVWF  65
2CBF:  ADDFSR 01,FSR0
2CC0:  MOVF   00,W
2CC1:  MOVWF  66
2CC2:  ADDFSR 3D,FSR0
2CC3:  MOVLW  F3
2CC4:  MOVLB  03
2CC5:  MOVWF  11
2CC6:  MOVLW  05
2CC7:  MOVWF  12
2CC8:  BCF    03.0
2CC9:  MOVLW  25
2CCA:  MOVLB  0C
2CCB:  MOVWF  6B
2CCC:  MOVLP  08
2CCD:  MOVLB  00
2CCE:  CALL   34E
2CCF:  MOVLP  28
2CD0:  MOVLB  0C
2CD1:  MOVF   66,W
2CD2:  MOVWF  6B
2CD3:  MOVLW  37
2CD4:  MOVWF  6C
2CD5:  MOVLP  08
2CD6:  MOVLB  00
2CD7:  CALL   3A8
2CD8:  MOVLP  28
2CD9:  MOVLB  0C
2CDA:  MOVF   65,W
2CDB:  MOVWF  6B
2CDC:  MOVLW  37
2CDD:  MOVWF  6C
2CDE:  MOVLP  08
2CDF:  MOVLB  00
2CE0:  CALL   3A8
2CE1:  MOVLP  28
2CE2:  MOVLB  0C
2CE3:  MOVF   64,W
2CE4:  MOVWF  6B
2CE5:  MOVLW  37
2CE6:  MOVWF  6C
2CE7:  MOVLP  08
2CE8:  MOVLB  00
2CE9:  CALL   3A8
2CEA:  MOVLP  28
2CEB:  MOVLB  0C
2CEC:  MOVF   63,W
2CED:  MOVWF  6B
2CEE:  MOVLW  37
2CEF:  MOVWF  6C
2CF0:  MOVLP  08
2CF1:  MOVLB  00
2CF2:  CALL   3A8
2CF3:  MOVLP  28
2CF4:  MOVLW  0D
2CF5:  MOVLB  0E
2CF6:  MOVWF  43
2CF7:  MOVLP  08
2CF8:  MOVLB  00
2CF9:  CALL   020
2CFA:  MOVLP  28
2CFB:  MOVLW  0A
2CFC:  MOVLB  0E
2CFD:  MOVWF  43
2CFE:  MOVLP  08
2CFF:  MOVLB  00
2D00:  CALL   020
2D01:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write source data address: %LX\r\n", *write_src);
2D02:  MOVLB  0C
2D03:  MOVF   4D,W
2D04:  MOVWF  7A
2D05:  MOVF   4C,W
2D06:  MOVWF  04
2D07:  MOVF   4D,W
2D08:  MOVWF  05
2D09:  MOVF   00,W
2D0A:  MOVWF  63
2D0B:  ADDFSR 01,FSR0
2D0C:  MOVF   00,W
2D0D:  MOVWF  64
2D0E:  ADDFSR 01,FSR0
2D0F:  MOVF   00,W
2D10:  MOVWF  65
2D11:  ADDFSR 01,FSR0
2D12:  MOVF   00,W
2D13:  MOVWF  66
2D14:  ADDFSR 3D,FSR0
2D15:  MOVLW  09
2D16:  MOVLB  03
2D17:  MOVWF  11
2D18:  MOVLW  06
2D19:  MOVWF  12
2D1A:  BCF    03.0
2D1B:  MOVLW  25
2D1C:  MOVLB  0C
2D1D:  MOVWF  6B
2D1E:  MOVLP  08
2D1F:  MOVLB  00
2D20:  CALL   34E
2D21:  MOVLP  28
2D22:  MOVLB  0C
2D23:  MOVF   66,W
2D24:  MOVWF  6B
2D25:  MOVLW  37
2D26:  MOVWF  6C
2D27:  MOVLP  08
2D28:  MOVLB  00
2D29:  CALL   3A8
2D2A:  MOVLP  28
2D2B:  MOVLB  0C
2D2C:  MOVF   65,W
2D2D:  MOVWF  6B
2D2E:  MOVLW  37
2D2F:  MOVWF  6C
2D30:  MOVLP  08
2D31:  MOVLB  00
2D32:  CALL   3A8
2D33:  MOVLP  28
2D34:  MOVLB  0C
2D35:  MOVF   64,W
2D36:  MOVWF  6B
2D37:  MOVLW  37
2D38:  MOVWF  6C
2D39:  MOVLP  08
2D3A:  MOVLB  00
2D3B:  CALL   3A8
2D3C:  MOVLP  28
2D3D:  MOVLB  0C
2D3E:  MOVF   63,W
2D3F:  MOVWF  6B
2D40:  MOVLW  37
2D41:  MOVWF  6C
2D42:  MOVLP  08
2D43:  MOVLB  00
2D44:  CALL   3A8
2D45:  MOVLP  28
2D46:  MOVLW  0D
2D47:  MOVLB  0E
2D48:  MOVWF  43
2D49:  MOVLP  08
2D4A:  MOVLB  00
2D4B:  CALL   020
2D4C:  MOVLP  28
2D4D:  MOVLW  0A
2D4E:  MOVLB  0E
2D4F:  MOVWF  43
2D50:  MOVLP  08
2D51:  MOVLB  00
2D52:  CALL   020
2D53:  MOVLP  28
....................     fprintf(PC, "In MIS FM Write data size          : %lu\r\n\r\n", *write_size);
2D54:  MOVLB  0C
2D55:  MOVF   4F,W
2D56:  MOVWF  7A
2D57:  MOVF   4E,W
2D58:  MOVWF  04
2D59:  MOVF   4F,W
2D5A:  MOVWF  05
2D5B:  MOVF   00,W
2D5C:  MOVWF  63
2D5D:  ADDFSR 01,FSR0
2D5E:  MOVF   00,W
2D5F:  MOVWF  64
2D60:  ADDFSR 01,FSR0
2D61:  MOVF   00,W
2D62:  MOVWF  65
2D63:  ADDFSR 01,FSR0
2D64:  MOVF   00,W
2D65:  MOVWF  66
2D66:  ADDFSR 3D,FSR0
2D67:  MOVLW  1F
2D68:  MOVLB  03
2D69:  MOVWF  11
2D6A:  MOVLW  06
2D6B:  MOVWF  12
2D6C:  BCF    03.0
2D6D:  MOVLW  25
2D6E:  MOVLB  0C
2D6F:  MOVWF  6B
2D70:  MOVLP  08
2D71:  MOVLB  00
2D72:  CALL   34E
2D73:  MOVLP  28
2D74:  MOVLW  41
2D75:  MOVWF  04
2D76:  MOVLB  0C
2D77:  MOVF   66,W
2D78:  MOVWF  6E
2D79:  MOVF   65,W
2D7A:  MOVWF  6D
2D7B:  MOVF   64,W
2D7C:  MOVWF  6C
2D7D:  MOVF   63,W
2D7E:  MOVWF  6B
2D7F:  MOVLB  00
2D80:  CALL   240
2D81:  MOVLW  33
2D82:  MOVLB  03
2D83:  MOVWF  11
2D84:  MOVLW  06
2D85:  MOVWF  12
2D86:  BCF    03.0
2D87:  MOVLW  04
2D88:  MOVLB  0C
2D89:  MOVWF  6B
2D8A:  MOVLP  08
2D8B:  MOVLB  00
2D8C:  CALL   34E
2D8D:  MOVLP  28
.................... 
....................     unsigned int8 used_size_bytes[4];
....................     read_data_bytes(smf, *mis_start_address, used_size_bytes, 4);
2D8E:  MOVLB  0C
2D8F:  MOVF   49,W
2D90:  MOVWF  7A
2D91:  MOVF   48,W
2D92:  MOVWF  04
2D93:  MOVF   49,W
2D94:  MOVWF  05
2D95:  MOVF   00,W
2D96:  MOVWF  63
2D97:  ADDFSR 01,FSR0
2D98:  MOVF   00,W
2D99:  MOVWF  64
2D9A:  ADDFSR 01,FSR0
2D9B:  MOVF   00,W
2D9C:  MOVWF  65
2D9D:  ADDFSR 01,FSR0
2D9E:  MOVF   00,W
2D9F:  MOVWF  66
2DA0:  ADDFSR 3D,FSR0
2DA1:  MOVLB  08
2DA2:  MOVF   61,W
2DA3:  MOVLB  0E
2DA4:  MOVWF  42
2DA5:  MOVLB  08
2DA6:  MOVF   60,W
2DA7:  MOVLB  0E
2DA8:  MOVWF  41
2DA9:  MOVLB  08
2DAA:  MOVF   5F,W
2DAB:  MOVLB  0E
2DAC:  MOVWF  40
2DAD:  MOVLB  08
2DAE:  MOVF   5E,W
2DAF:  MOVLB  0E
2DB0:  MOVWF  3F
2DB1:  MOVLB  0C
2DB2:  MOVF   66,W
2DB3:  MOVLB  0E
2DB4:  MOVWF  46
2DB5:  MOVLB  0C
2DB6:  MOVF   65,W
2DB7:  MOVLB  0E
2DB8:  MOVWF  45
2DB9:  MOVLB  0C
2DBA:  MOVF   64,W
2DBB:  MOVLB  0E
2DBC:  MOVWF  44
2DBD:  MOVLB  0C
2DBE:  MOVF   63,W
2DBF:  MOVLB  0E
2DC0:  MOVWF  43
2DC1:  MOVLW  23
2DC2:  MOVWF  48
2DC3:  MOVLW  F4
2DC4:  MOVWF  47
2DC5:  CLRF   4C
2DC6:  CLRF   4B
2DC7:  CLRF   4A
2DC8:  MOVLW  04
2DC9:  MOVWF  49
2DCA:  MOVLP  08
2DCB:  MOVLB  00
2DCC:  CALL   287
2DCD:  MOVLP  28
....................     *used_size = 
....................        ((unsigned int32)used_size_bytes[3] << 24) |
....................        ((unsigned int32)used_size_bytes[2] << 16) |
....................        ((unsigned int32)used_size_bytes[1] << 8)  |
....................        ((unsigned int32)used_size_bytes[0]);
2DCE:  MOVLB  0C
2DCF:  MOVF   52,W
2DD0:  MOVWF  04
2DD1:  MOVF   53,W
2DD2:  MOVWF  05
2DD3:  CLRF   68
2DD4:  CLRF   67
2DD5:  CLRF   66
2DD6:  MOVF   57,W
2DD7:  MOVWF  65
2DD8:  MOVWF  68
2DD9:  CLRF   65
2DDA:  CLRF   66
2DDB:  CLRF   67
2DDC:  CLRF   6D
2DDD:  CLRF   6C
2DDE:  CLRF   6B
2DDF:  MOVF   6B,W
2DE0:  MOVWF  7A
2DE1:  CLRF   77
2DE2:  CLRF   78
2DE3:  MOVF   77,W
2DE4:  IORWF  65,F
2DE5:  MOVF   78,W
2DE6:  IORWF  66,F
2DE7:  MOVF   56,W
2DE8:  IORWF  67,F
2DE9:  MOVF   6B,W
2DEA:  IORWF  68,F
2DEB:  CLRF   6D
2DEC:  CLRF   6C
2DED:  CLRF   6B
2DEE:  MOVF   6C,W
2DEF:  MOVWF  7A
2DF0:  MOVF   6B,W
2DF1:  MOVWF  79
2DF2:  MOVF   55,W
2DF3:  MOVWF  78
2DF4:  CLRF   77
2DF5:  MOVF   77,W
2DF6:  IORWF  65,F
2DF7:  MOVF   55,W
2DF8:  IORWF  66,F
2DF9:  MOVF   6B,W
2DFA:  IORWF  67,F
2DFB:  MOVF   6C,W
2DFC:  IORWF  68,F
2DFD:  CLRF   78
2DFE:  CLRF   79
2DFF:  CLRF   7A
2E00:  MOVF   54,W
2E01:  IORWF  65,W
2E02:  MOVWF  77
2E03:  MOVF   78,W
2E04:  IORWF  66,W
2E05:  MOVWF  78
2E06:  MOVF   79,W
2E07:  IORWF  67,W
2E08:  MOVWF  79
2E09:  MOVF   7A,W
2E0A:  IORWF  68,W
2E0B:  MOVWF  7A
2E0C:  MOVF   77,W
2E0D:  MOVWF  00
2E0E:  MOVF   78,W
2E0F:  MOVWI  W,[FSR0+01]
2E10:  MOVF   79,W
2E11:  MOVWI  W,[FSR0+02]
2E12:  MOVF   7A,W
2E13:  MOVWI  W,[FSR0+03]
....................     *loop_count = read_data_byte(smf, *mis_start_address + 4);
2E14:  MOVF   50,W
2E15:  MOVWF  63
2E16:  MOVF   51,W
2E17:  MOVWF  64
2E18:  MOVF   49,W
2E19:  MOVWF  7A
2E1A:  MOVF   48,W
2E1B:  MOVWF  04
2E1C:  MOVF   49,W
2E1D:  MOVWF  05
2E1E:  MOVF   00,W
2E1F:  MOVWF  65
2E20:  ADDFSR 01,FSR0
2E21:  MOVF   00,W
2E22:  MOVWF  66
2E23:  ADDFSR 01,FSR0
2E24:  MOVF   00,W
2E25:  MOVWF  67
2E26:  ADDFSR 01,FSR0
2E27:  MOVF   00,W
2E28:  MOVWF  68
2E29:  ADDFSR 3D,FSR0
2E2A:  MOVLW  04
2E2B:  ADDWF  65,F
2E2C:  MOVLW  00
2E2D:  ADDWFC 66,F
2E2E:  ADDWFC 67,F
2E2F:  ADDWFC 68,F
2E30:  MOVLB  08
2E31:  MOVF   61,W
2E32:  MOVLB  0C
2E33:  MOVWF  6C
2E34:  MOVLB  08
2E35:  MOVF   60,W
2E36:  MOVLB  0C
2E37:  MOVWF  6B
2E38:  MOVLB  08
2E39:  MOVF   5F,W
2E3A:  MOVLB  0C
2E3B:  MOVWF  6A
2E3C:  MOVLB  08
2E3D:  MOVF   5E,W
2E3E:  MOVLB  0C
2E3F:  MOVWF  69
2E40:  MOVF   68,W
2E41:  MOVLB  0D
2E42:  MOVWF  23
2E43:  MOVLB  0C
2E44:  MOVF   67,W
2E45:  MOVLB  0D
2E46:  MOVWF  22
2E47:  MOVLB  0C
2E48:  MOVF   66,W
2E49:  MOVLB  0D
2E4A:  MOVWF  21
2E4B:  MOVLB  0C
2E4C:  MOVF   65,W
2E4D:  MOVLB  0D
2E4E:  MOVWF  20
2E4F:  MOVLB  00
2E50:  GOTO   2B3
2E51:  MOVLB  0C
2E52:  MOVF   64,W
2E53:  MOVWF  05
2E54:  MOVF   63,W
2E55:  MOVWF  04
2E56:  MOVF   78,W
2E57:  MOVWF  00
.................... 
....................     fprintf(PC, "Size area read\r\n");
2E58:  MOVLW  36
2E59:  MOVLB  03
2E5A:  MOVWF  11
2E5B:  MOVLW  06
2E5C:  MOVWF  12
2E5D:  MOVLP  08
2E5E:  MOVLB  00
2E5F:  CALL   045
2E60:  MOVLP  28
....................     fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", *used_size, *mis_start_address);
2E61:  MOVLB  0C
2E62:  MOVF   52,W
2E63:  MOVWF  04
2E64:  MOVF   53,W
2E65:  MOVWF  05
2E66:  MOVF   00,W
2E67:  MOVWF  63
2E68:  ADDFSR 01,FSR0
2E69:  MOVF   00,W
2E6A:  MOVWF  64
2E6B:  ADDFSR 01,FSR0
2E6C:  MOVF   00,W
2E6D:  MOVWF  65
2E6E:  ADDFSR 01,FSR0
2E6F:  MOVF   00,W
2E70:  MOVWF  66
2E71:  ADDFSR 3D,FSR0
2E72:  MOVF   49,W
2E73:  MOVWF  7A
2E74:  MOVF   48,W
2E75:  MOVWF  04
2E76:  MOVF   49,W
2E77:  MOVWF  05
2E78:  MOVF   00,W
2E79:  MOVWF  67
2E7A:  ADDFSR 01,FSR0
2E7B:  MOVF   00,W
2E7C:  MOVWF  68
2E7D:  ADDFSR 01,FSR0
2E7E:  MOVF   00,W
2E7F:  MOVWF  69
2E80:  ADDFSR 01,FSR0
2E81:  MOVF   00,W
2E82:  MOVWF  6A
2E83:  ADDFSR 3D,FSR0
2E84:  MOVLW  3F
2E85:  MOVLB  03
2E86:  MOVWF  11
2E87:  MOVLW  06
2E88:  MOVWF  12
2E89:  BCF    03.0
2E8A:  MOVLW  0C
2E8B:  MOVLB  0C
2E8C:  MOVWF  6B
2E8D:  MOVLP  08
2E8E:  MOVLB  00
2E8F:  CALL   34E
2E90:  MOVLP  28
2E91:  MOVLW  41
2E92:  MOVWF  04
2E93:  MOVLB  0C
2E94:  MOVF   66,W
2E95:  MOVWF  6E
2E96:  MOVF   65,W
2E97:  MOVWF  6D
2E98:  MOVF   64,W
2E99:  MOVWF  6C
2E9A:  MOVF   63,W
2E9B:  MOVWF  6B
2E9C:  MOVLB  00
2E9D:  CALL   240
2E9E:  MOVLW  46
2E9F:  MOVLB  03
2EA0:  MOVWF  11
2EA1:  MOVLW  06
2EA2:  MOVWF  12
2EA3:  BSF    03.0
2EA4:  MOVLW  08
2EA5:  MOVLB  0C
2EA6:  MOVWF  6B
2EA7:  MOVLP  08
2EA8:  MOVLB  00
2EA9:  CALL   34E
2EAA:  MOVLP  28
2EAB:  MOVLB  0C
2EAC:  MOVF   6A,W
2EAD:  MOVWF  6B
2EAE:  MOVLW  37
2EAF:  MOVWF  6C
2EB0:  MOVLP  08
2EB1:  MOVLB  00
2EB2:  CALL   3A8
2EB3:  MOVLP  28
2EB4:  MOVLB  0C
2EB5:  MOVF   69,W
2EB6:  MOVWF  6B
2EB7:  MOVLW  37
2EB8:  MOVWF  6C
2EB9:  MOVLP  08
2EBA:  MOVLB  00
2EBB:  CALL   3A8
2EBC:  MOVLP  28
2EBD:  MOVLB  0C
2EBE:  MOVF   68,W
2EBF:  MOVWF  6B
2EC0:  MOVLW  37
2EC1:  MOVWF  6C
2EC2:  MOVLP  08
2EC3:  MOVLB  00
2EC4:  CALL   3A8
2EC5:  MOVLP  28
2EC6:  MOVLB  0C
2EC7:  MOVF   67,W
2EC8:  MOVWF  6B
2EC9:  MOVLW  37
2ECA:  MOVWF  6C
2ECB:  MOVLP  08
2ECC:  MOVLB  00
2ECD:  CALL   3A8
2ECE:  MOVLP  28
2ECF:  MOVLW  29
2ED0:  MOVLB  0E
2ED1:  MOVWF  43
2ED2:  MOVLP  08
2ED3:  MOVLB  00
2ED4:  CALL   020
2ED5:  MOVLP  28
2ED6:  MOVLW  0D
2ED7:  MOVLB  0E
2ED8:  MOVWF  43
2ED9:  MOVLP  08
2EDA:  MOVLB  00
2EDB:  CALL   020
2EDC:  MOVLP  28
2EDD:  MOVLW  0A
2EDE:  MOVLB  0E
2EDF:  MOVWF  43
2EE0:  MOVLP  08
2EE1:  MOVLB  00
2EE2:  CALL   020
2EE3:  MOVLP  28
....................     fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", *loop_count, *mis_start_address + 4);
2EE4:  MOVLB  0C
2EE5:  MOVF   50,W
2EE6:  MOVWF  04
2EE7:  MOVF   51,W
2EE8:  MOVWF  05
2EE9:  MOVF   00,W
2EEA:  MOVWF  63
2EEB:  MOVF   49,W
2EEC:  MOVWF  7A
2EED:  MOVF   48,W
2EEE:  MOVWF  04
2EEF:  MOVF   49,W
2EF0:  MOVWF  05
2EF1:  MOVF   00,W
2EF2:  MOVWF  64
2EF3:  ADDFSR 01,FSR0
2EF4:  MOVF   00,W
2EF5:  MOVWF  65
2EF6:  ADDFSR 01,FSR0
2EF7:  MOVF   00,W
2EF8:  MOVWF  66
2EF9:  ADDFSR 01,FSR0
2EFA:  MOVF   00,W
2EFB:  MOVWF  67
2EFC:  ADDFSR 3D,FSR0
2EFD:  MOVLW  04
2EFE:  ADDWF  64,F
2EFF:  MOVLW  00
2F00:  ADDWFC 65,F
2F01:  ADDWFC 66,F
2F02:  ADDWFC 67,F
2F03:  MOVLW  4F
2F04:  MOVLB  03
2F05:  MOVWF  11
2F06:  MOVLW  06
2F07:  MOVWF  12
2F08:  BCF    03.0
2F09:  MOVLW  0C
2F0A:  MOVLB  0C
2F0B:  MOVWF  6B
2F0C:  MOVLP  08
2F0D:  MOVLB  00
2F0E:  CALL   34E
2F0F:  MOVLP  28
2F10:  MOVLB  0C
2F11:  MOVF   63,W
2F12:  MOVWF  68
2F13:  MOVLW  18
2F14:  MOVWF  69
2F15:  MOVLB  00
2F16:  CALL   0F6
2F17:  MOVLW  56
2F18:  MOVLB  03
2F19:  MOVWF  11
2F1A:  MOVLW  06
2F1B:  MOVWF  12
2F1C:  BCF    03.0
2F1D:  MOVLW  09
2F1E:  MOVLB  0C
2F1F:  MOVWF  6B
2F20:  MOVLP  08
2F21:  MOVLB  00
2F22:  CALL   34E
2F23:  MOVLP  28
2F24:  MOVLB  0C
2F25:  MOVF   67,W
2F26:  MOVWF  6B
2F27:  MOVLW  37
2F28:  MOVWF  6C
2F29:  MOVLP  08
2F2A:  MOVLB  00
2F2B:  CALL   3A8
2F2C:  MOVLP  28
2F2D:  MOVLB  0C
2F2E:  MOVF   66,W
2F2F:  MOVWF  6B
2F30:  MOVLW  37
2F31:  MOVWF  6C
2F32:  MOVLP  08
2F33:  MOVLB  00
2F34:  CALL   3A8
2F35:  MOVLP  28
2F36:  MOVLB  0C
2F37:  MOVF   65,W
2F38:  MOVWF  6B
2F39:  MOVLW  37
2F3A:  MOVWF  6C
2F3B:  MOVLP  08
2F3C:  MOVLB  00
2F3D:  CALL   3A8
2F3E:  MOVLP  28
2F3F:  MOVLB  0C
2F40:  MOVF   64,W
2F41:  MOVWF  6B
2F42:  MOVLW  37
2F43:  MOVWF  6C
2F44:  MOVLP  08
2F45:  MOVLB  00
2F46:  CALL   3A8
2F47:  MOVLP  28
2F48:  MOVLW  5D
2F49:  MOVLB  03
2F4A:  MOVWF  11
2F4B:  MOVLW  06
2F4C:  MOVWF  12
2F4D:  BCF    03.0
2F4E:  MOVLW  05
2F4F:  MOVLB  0C
2F50:  MOVWF  6B
2F51:  MOVLP  08
2F52:  MOVLB  00
2F53:  CALL   34E
2F54:  MOVLP  28
2F55:  MOVLP  30
2F56:  GOTO   5B8 (RETURN)
.................... }
.................... 
.................... #separate
.................... void check_and_erase_if_wrap(unsigned int32 start_addr, unsigned int32 end_addr)
.................... {
....................     fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
2F57:  MOVLW  60
2F58:  MOVLB  03
2F59:  MOVWF  11
2F5A:  MOVLW  06
2F5B:  MOVWF  12
2F5C:  MOVLP  08
2F5D:  MOVLB  00
2F5E:  CALL   045
2F5F:  MOVLP  28
....................     for (unsigned int32 addr = start_addr; addr < end_addr; addr += SUBSECTOR_SIZE)
2F60:  MOVLB  0C
2F61:  MOVF   47,W
2F62:  MOVWF  4F
2F63:  MOVF   46,W
2F64:  MOVWF  4E
2F65:  MOVF   45,W
2F66:  MOVWF  4D
2F67:  MOVF   44,W
2F68:  MOVWF  4C
2F69:  MOVF   4F,W
2F6A:  SUBWF  4B,W
2F6B:  BTFSS  03.0
2F6C:  GOTO   7AA
2F6D:  BTFSS  03.2
2F6E:  GOTO   77F
2F6F:  MOVF   4E,W
2F70:  SUBWF  4A,W
2F71:  BTFSS  03.0
2F72:  GOTO   7AA
2F73:  BTFSS  03.2
2F74:  GOTO   77F
2F75:  MOVF   4D,W
2F76:  SUBWF  49,W
2F77:  BTFSS  03.0
2F78:  GOTO   7AA
2F79:  BTFSS  03.2
2F7A:  GOTO   77F
2F7B:  MOVF   48,W
2F7C:  SUBWF  4C,W
2F7D:  BTFSC  03.0
2F7E:  GOTO   7AA
....................         subsector_4kByte_erase(smf, addr);
2F7F:  MOVLB  08
2F80:  MOVF   61,W
2F81:  MOVLB  0D
2F82:  MOVWF  37
2F83:  MOVLB  08
2F84:  MOVF   60,W
2F85:  MOVLB  0D
2F86:  MOVWF  36
2F87:  MOVLB  08
2F88:  MOVF   5F,W
2F89:  MOVLB  0D
2F8A:  MOVWF  35
2F8B:  MOVLB  08
2F8C:  MOVF   5E,W
2F8D:  MOVLB  0D
2F8E:  MOVWF  34
2F8F:  MOVLB  0C
2F90:  MOVF   4F,W
2F91:  MOVLB  0D
2F92:  MOVWF  3B
2F93:  MOVLB  0C
2F94:  MOVF   4E,W
2F95:  MOVLB  0D
2F96:  MOVWF  3A
2F97:  MOVLB  0C
2F98:  MOVF   4D,W
2F99:  MOVLB  0D
2F9A:  MOVWF  39
2F9B:  MOVLB  0C
2F9C:  MOVF   4C,W
2F9D:  MOVLB  0D
2F9E:  MOVWF  38
2F9F:  MOVLP  10
2FA0:  MOVLB  00
2FA1:  CALL   19A
2FA2:  MOVLP  28
2FA3:  MOVLW  10
2FA4:  MOVLB  0C
2FA5:  ADDWF  4D,F
2FA6:  MOVLW  00
2FA7:  ADDWFC 4E,F
2FA8:  ADDWFC 4F,F
2FA9:  GOTO   769
2FAA:  MOVLP  30
2FAB:  MOVLB  00
2FAC:  GOTO   62B (RETURN)
.................... }
.................... 
.................... #separate
.................... void erase_write_area(unsigned int32 start_addr, unsigned int32 size, unsigned int32 max_addr)
*
3000:  MOVLB  0C
3001:  CLRF   50
3002:  MOVF   45,W
3003:  ANDLW  F0
3004:  MOVWF  51
3005:  CLRF   52
3006:  CLRF   53
3007:  MOVF   48,W
3008:  ADDWF  44,W
3009:  MOVWF  5C
300A:  MOVF   49,W
300B:  ADDWFC 45,W
300C:  MOVWF  5D
300D:  MOVF   4A,W
300E:  ADDWFC 46,W
300F:  MOVWF  5E
3010:  MOVF   4B,W
3011:  ADDWFC 47,W
3012:  MOVWF  5F
3013:  MOVLW  FF
3014:  ADDWF  5C,F
3015:  MOVLW  0F
3016:  ADDWFC 5D,F
3017:  MOVLW  00
3018:  ADDWFC 5E,F
3019:  ADDWFC 5F,F
301A:  CLRF   54
301B:  MOVF   5D,W
301C:  ANDLW  F0
301D:  MOVWF  55
301E:  CLRF   56
301F:  CLRF   57
.................... {
....................     unsigned int32 erase_start = start_addr & ~0xFFF;
....................     unsigned int32 erase_end = (start_addr + size + 0xFFF) & ~0xFFF;
.................... 
....................     for (unsigned int32 addr = erase_start; addr < erase_end && addr < max_addr; addr += SUBSECTOR_SIZE)
3020:  MOVF   53,W
3021:  MOVWF  5B
3022:  MOVF   52,W
3023:  MOVWF  5A
3024:  MOVF   51,W
3025:  MOVWF  59
3026:  MOVF   50,W
3027:  MOVWF  58
3028:  MOVF   5B,W
3029:  SUBWF  57,W
302A:  BTFSS  03.0
302B:  GOTO   07F
302C:  BTFSS  03.2
302D:  GOTO   03E
302E:  MOVF   5A,W
302F:  SUBWF  56,W
3030:  BTFSS  03.0
3031:  GOTO   07F
3032:  BTFSS  03.2
3033:  GOTO   03E
3034:  MOVF   59,W
3035:  SUBWF  55,W
3036:  BTFSS  03.0
3037:  GOTO   07F
3038:  BTFSS  03.2
3039:  GOTO   03E
303A:  MOVF   54,W
303B:  SUBWF  58,W
303C:  BTFSC  03.0
303D:  GOTO   07F
303E:  MOVF   5B,W
303F:  SUBWF  4F,W
3040:  BTFSS  03.0
3041:  GOTO   07F
3042:  BTFSS  03.2
3043:  GOTO   054
3044:  MOVF   5A,W
3045:  SUBWF  4E,W
3046:  BTFSS  03.0
3047:  GOTO   07F
3048:  BTFSS  03.2
3049:  GOTO   054
304A:  MOVF   59,W
304B:  SUBWF  4D,W
304C:  BTFSS  03.0
304D:  GOTO   07F
304E:  BTFSS  03.2
304F:  GOTO   054
3050:  MOVF   4C,W
3051:  SUBWF  58,W
3052:  BTFSC  03.0
3053:  GOTO   07F
....................         subsector_4kByte_erase(smf, addr);
3054:  MOVLB  08
3055:  MOVF   61,W
3056:  MOVLB  0D
3057:  MOVWF  37
3058:  MOVLB  08
3059:  MOVF   60,W
305A:  MOVLB  0D
305B:  MOVWF  36
305C:  MOVLB  08
305D:  MOVF   5F,W
305E:  MOVLB  0D
305F:  MOVWF  35
3060:  MOVLB  08
3061:  MOVF   5E,W
3062:  MOVLB  0D
3063:  MOVWF  34
3064:  MOVLB  0C
3065:  MOVF   5B,W
3066:  MOVLB  0D
3067:  MOVWF  3B
3068:  MOVLB  0C
3069:  MOVF   5A,W
306A:  MOVLB  0D
306B:  MOVWF  3A
306C:  MOVLB  0C
306D:  MOVF   59,W
306E:  MOVLB  0D
306F:  MOVWF  39
3070:  MOVLB  0C
3071:  MOVF   58,W
3072:  MOVLB  0D
3073:  MOVWF  38
3074:  MOVLP  10
3075:  MOVLB  00
3076:  CALL   19A
3077:  MOVLP  30
3078:  MOVLW  10
3079:  MOVLB  0C
307A:  ADDWF  59,F
307B:  MOVLW  00
307C:  ADDWFC 5A,F
307D:  ADDWFC 5B,F
307E:  GOTO   028
307F:  MOVLP  30
3080:  MOVLB  00
3081:  GOTO   654 (RETURN)
.................... }
.................... 
.................... #separate
.................... void write_mission_data(unsigned int32 src, unsigned int32 size, unsigned int32 dst,
....................                         int8* buffer, unsigned int32* used_size)
3082:  MOVLB  0C
3083:  MOVF   4B,W
3084:  MOVWF  57
3085:  MOVF   4A,W
3086:  MOVWF  56
3087:  MOVF   49,W
3088:  MOVWF  55
3089:  MOVF   48,W
308A:  MOVWF  54
308B:  MOVF   47,W
308C:  MOVWF  5B
308D:  MOVF   46,W
308E:  MOVWF  5A
308F:  MOVF   45,W
3090:  MOVWF  59
3091:  MOVF   44,W
3092:  MOVWF  58
3093:  MOVF   4F,W
3094:  MOVWF  5F
3095:  MOVF   4E,W
3096:  MOVWF  5E
3097:  MOVF   4D,W
3098:  MOVWF  5D
3099:  MOVF   4C,W
309A:  MOVWF  5C
.................... {
....................     unsigned int32 remaining = size;
....................     unsigned int32 src_addr = src;
....................     unsigned int32 data_write_addr = dst;
.................... 
....................     while (remaining > 0)
309B:  MOVF   54,F
309C:  BTFSS  03.2
309D:  GOTO   0A7
309E:  MOVF   55,F
309F:  BTFSS  03.2
30A0:  GOTO   0A7
30A1:  MOVF   56,F
30A2:  BTFSS  03.2
30A3:  GOTO   0A7
30A4:  MOVF   57,F
30A5:  BTFSC  03.2
30A6:  GOTO   159
....................     {
....................         unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining;
30A7:  MOVF   57,F
30A8:  BTFSS  03.2
30A9:  GOTO   0B4
30AA:  MOVF   56,F
30AB:  BTFSS  03.2
30AC:  GOTO   0B4
30AD:  MOVF   55,F
30AE:  BTFSS  03.2
30AF:  GOTO   0B4
30B0:  MOVF   54,W
30B1:  SUBLW  40
30B2:  BTFSC  03.0
30B3:  GOTO   0B7
30B4:  CLRF   7A
30B5:  MOVLW  40
30B6:  GOTO   0BA
30B7:  MOVF   55,W
30B8:  MOVWF  7A
30B9:  MOVF   54,W
30BA:  MOVWF  60
30BB:  MOVF   7A,W
30BC:  MOVWF  61
.................... 
....................         read_data_bytes(mis_fm, src_addr, buffer, chunk);
30BD:  MOVLB  08
30BE:  MOVF   5D,W
30BF:  MOVLB  0E
30C0:  MOVWF  42
30C1:  MOVLB  08
30C2:  MOVF   5C,W
30C3:  MOVLB  0E
30C4:  MOVWF  41
30C5:  MOVLB  08
30C6:  MOVF   5B,W
30C7:  MOVLB  0E
30C8:  MOVWF  40
30C9:  MOVLB  08
30CA:  MOVF   5A,W
30CB:  MOVLB  0E
30CC:  MOVWF  3F
30CD:  MOVLB  0C
30CE:  MOVF   5B,W
30CF:  MOVLB  0E
30D0:  MOVWF  46
30D1:  MOVLB  0C
30D2:  MOVF   5A,W
30D3:  MOVLB  0E
30D4:  MOVWF  45
30D5:  MOVLB  0C
30D6:  MOVF   59,W
30D7:  MOVLB  0E
30D8:  MOVWF  44
30D9:  MOVLB  0C
30DA:  MOVF   58,W
30DB:  MOVLB  0E
30DC:  MOVWF  43
30DD:  MOVLB  0C
30DE:  MOVF   51,W
30DF:  MOVLB  0E
30E0:  MOVWF  48
30E1:  MOVLB  0C
30E2:  MOVF   50,W
30E3:  MOVLB  0E
30E4:  MOVWF  47
30E5:  CLRF   4C
30E6:  CLRF   4B
30E7:  MOVLB  0C
30E8:  MOVF   61,W
30E9:  MOVLB  0E
30EA:  MOVWF  4A
30EB:  MOVLB  0C
30EC:  MOVF   60,W
30ED:  MOVLB  0E
30EE:  MOVWF  49
30EF:  MOVLP  08
30F0:  MOVLB  00
30F1:  CALL   287
30F2:  MOVLP  30
....................         write_data_bytes(smf, data_write_addr, buffer, chunk);
30F3:  MOVLB  08
30F4:  MOVF   61,W
30F5:  MOVLB  0E
30F6:  MOVWF  42
30F7:  MOVLB  08
30F8:  MOVF   60,W
30F9:  MOVLB  0E
30FA:  MOVWF  41
30FB:  MOVLB  08
30FC:  MOVF   5F,W
30FD:  MOVLB  0E
30FE:  MOVWF  40
30FF:  MOVLB  08
3100:  MOVF   5E,W
3101:  MOVLB  0E
3102:  MOVWF  3F
3103:  MOVLB  0C
3104:  MOVF   5F,W
3105:  MOVLB  0E
3106:  MOVWF  46
3107:  MOVLB  0C
3108:  MOVF   5E,W
3109:  MOVLB  0E
310A:  MOVWF  45
310B:  MOVLB  0C
310C:  MOVF   5D,W
310D:  MOVLB  0E
310E:  MOVWF  44
310F:  MOVLB  0C
3110:  MOVF   5C,W
3111:  MOVLB  0E
3112:  MOVWF  43
3113:  MOVLB  0C
3114:  MOVF   51,W
3115:  MOVLB  0E
3116:  MOVWF  48
3117:  MOVLB  0C
3118:  MOVF   50,W
3119:  MOVLB  0E
311A:  MOVWF  47
311B:  MOVLB  0C
311C:  MOVF   61,W
311D:  MOVLB  0E
311E:  MOVWF  4A
311F:  MOVLB  0C
3120:  MOVF   60,W
3121:  MOVLB  0E
3122:  MOVWF  49
3123:  MOVLP  10
3124:  MOVLB  00
3125:  CALL   000
3126:  MOVLP  30
.................... 
....................         src_addr += chunk;
3127:  MOVLB  0C
3128:  MOVF   60,W
3129:  ADDWF  58,F
312A:  MOVF   61,W
312B:  ADDWFC 59,F
312C:  MOVLW  00
312D:  ADDWFC 5A,F
312E:  ADDWFC 5B,F
....................         data_write_addr += chunk;
312F:  MOVF   60,W
3130:  ADDWF  5C,F
3131:  MOVF   61,W
3132:  ADDWFC 5D,F
3133:  MOVLW  00
3134:  ADDWFC 5E,F
3135:  ADDWFC 5F,F
....................         *used_size += chunk;
3136:  MOVF   52,W
3137:  MOVWF  04
3138:  MOVF   53,W
3139:  MOVWF  05
313A:  MOVF   60,W
313B:  ADDWF  00,W
313C:  MOVWF  77
313D:  ADDFSR 01,FSR0
313E:  MOVF   61,W
313F:  ADDWFC 00,W
3140:  MOVWF  78
3141:  ADDFSR 01,FSR0
3142:  MOVLW  00
3143:  ADDWFC 00,W
3144:  MOVWF  79
3145:  ADDFSR 01,FSR0
3146:  MOVLW  00
3147:  ADDWFC 00,W
3148:  MOVWF  7A
3149:  MOVF   77,W
314A:  MOVWI  W,[FSR0-03]
314B:  MOVF   78,W
314C:  MOVWI  W,[FSR0-02]
314D:  MOVF   79,W
314E:  MOVWI  W,[FSR0-01]
314F:  MOVF   7A,W
3150:  MOVWI  W,[FSR0+00]
....................         remaining -= chunk;
3151:  MOVF   60,W
3152:  SUBWF  54,F
3153:  MOVF   61,W
3154:  SUBWFC 55,F
3155:  MOVLW  00
3156:  SUBWFC 56,F
3157:  SUBWFC 57,F
3158:  GOTO   09B
....................     }
3159:  MOVLP  30
315A:  MOVLB  00
315B:  GOTO   677 (RETURN)
.................... }
.................... 
.................... #separate
.................... void update_size_area(unsigned int32 base_addr, unsigned int32 used_size, unsigned int8 loop_count)
.................... {
....................     fprintf(PC, "Update size area\r\n");
*
333D:  MOVLW  7B
333E:  MOVLB  03
333F:  MOVWF  11
3340:  MOVLW  06
3341:  MOVWF  12
3342:  MOVLP  08
3343:  MOVLB  00
3344:  CALL   045
3345:  MOVLP  30
....................     subsector_4kByte_erase(smf, base_addr);
3346:  MOVLB  08
3347:  MOVF   61,W
3348:  MOVLB  0D
3349:  MOVWF  37
334A:  MOVLB  08
334B:  MOVF   60,W
334C:  MOVLB  0D
334D:  MOVWF  36
334E:  MOVLB  08
334F:  MOVF   5F,W
3350:  MOVLB  0D
3351:  MOVWF  35
3352:  MOVLB  08
3353:  MOVF   5E,W
3354:  MOVLB  0D
3355:  MOVWF  34
3356:  MOVLB  0C
3357:  MOVF   47,W
3358:  MOVLB  0D
3359:  MOVWF  3B
335A:  MOVLB  0C
335B:  MOVF   46,W
335C:  MOVLB  0D
335D:  MOVWF  3A
335E:  MOVLB  0C
335F:  MOVF   45,W
3360:  MOVLB  0D
3361:  MOVWF  39
3362:  MOVLB  0C
3363:  MOVF   44,W
3364:  MOVLB  0D
3365:  MOVWF  38
3366:  MOVLP  10
3367:  MOVLB  00
3368:  CALL   19A
3369:  MOVLP  30
.................... 
....................     write_data_byte(smf, base_addr + 0, (used_size >> 0)  & 0xFF);
336A:  MOVLB  0C
336B:  MOVF   4B,W
336C:  MOVWF  59
336D:  MOVF   4A,W
336E:  MOVWF  58
336F:  MOVF   49,W
3370:  MOVWF  57
3371:  MOVF   48,W
3372:  MOVWF  56
3373:  CLRF   57
3374:  CLRF   58
3375:  CLRF   59
3376:  MOVLB  08
3377:  MOVF   61,W
3378:  MOVLB  0C
3379:  MOVWF  61
337A:  MOVLB  08
337B:  MOVF   60,W
337C:  MOVLB  0C
337D:  MOVWF  60
337E:  MOVLB  08
337F:  MOVF   5F,W
3380:  MOVLB  0C
3381:  MOVWF  5F
3382:  MOVLB  08
3383:  MOVF   5E,W
3384:  MOVLB  0C
3385:  MOVWF  5E
3386:  MOVF   47,W
3387:  MOVWF  65
3388:  MOVF   46,W
3389:  MOVWF  64
338A:  MOVF   45,W
338B:  MOVWF  63
338C:  MOVF   44,W
338D:  MOVWF  62
338E:  MOVF   48,W
338F:  MOVWF  66
3390:  MOVLB  00
3391:  CALL   15C
....................     write_data_byte(smf, base_addr + 1, (used_size >> 8)  & 0xFF);
3392:  MOVLW  01
3393:  MOVLB  0C
3394:  ADDWF  44,W
3395:  MOVWF  55
3396:  MOVLW  00
3397:  ADDWFC 45,W
3398:  MOVWF  56
3399:  MOVLW  00
339A:  ADDWFC 46,W
339B:  MOVWF  57
339C:  MOVLW  00
339D:  ADDWFC 47,W
339E:  MOVWF  58
339F:  MOVF   49,W
33A0:  MOVWF  5A
33A1:  MOVF   4A,W
33A2:  MOVWF  5B
33A3:  MOVF   4B,W
33A4:  MOVWF  5C
33A5:  CLRF   5D
33A6:  CLRF   5B
33A7:  CLRF   5C
33A8:  CLRF   5D
33A9:  MOVLB  08
33AA:  MOVF   61,W
33AB:  MOVLB  0C
33AC:  MOVWF  61
33AD:  MOVLB  08
33AE:  MOVF   60,W
33AF:  MOVLB  0C
33B0:  MOVWF  60
33B1:  MOVLB  08
33B2:  MOVF   5F,W
33B3:  MOVLB  0C
33B4:  MOVWF  5F
33B5:  MOVLB  08
33B6:  MOVF   5E,W
33B7:  MOVLB  0C
33B8:  MOVWF  5E
33B9:  MOVF   58,W
33BA:  MOVWF  65
33BB:  MOVF   57,W
33BC:  MOVWF  64
33BD:  MOVF   56,W
33BE:  MOVWF  63
33BF:  MOVF   55,W
33C0:  MOVWF  62
33C1:  MOVF   49,W
33C2:  MOVWF  66
33C3:  MOVLB  00
33C4:  CALL   15C
....................     write_data_byte(smf, base_addr + 2, (used_size >> 16) & 0xFF);
33C5:  MOVLW  02
33C6:  MOVLB  0C
33C7:  ADDWF  44,W
33C8:  MOVWF  55
33C9:  MOVLW  00
33CA:  ADDWFC 45,W
33CB:  MOVWF  56
33CC:  MOVLW  00
33CD:  ADDWFC 46,W
33CE:  MOVWF  57
33CF:  MOVLW  00
33D0:  ADDWFC 47,W
33D1:  MOVWF  58
33D2:  MOVF   4A,W
33D3:  MOVWF  5A
33D4:  MOVF   4B,W
33D5:  MOVWF  5B
33D6:  CLRF   5C
33D7:  CLRF   5D
33D8:  CLRF   5B
33D9:  CLRF   5C
33DA:  CLRF   5D
33DB:  MOVLB  08
33DC:  MOVF   61,W
33DD:  MOVLB  0C
33DE:  MOVWF  61
33DF:  MOVLB  08
33E0:  MOVF   60,W
33E1:  MOVLB  0C
33E2:  MOVWF  60
33E3:  MOVLB  08
33E4:  MOVF   5F,W
33E5:  MOVLB  0C
33E6:  MOVWF  5F
33E7:  MOVLB  08
33E8:  MOVF   5E,W
33E9:  MOVLB  0C
33EA:  MOVWF  5E
33EB:  MOVF   58,W
33EC:  MOVWF  65
33ED:  MOVF   57,W
33EE:  MOVWF  64
33EF:  MOVF   56,W
33F0:  MOVWF  63
33F1:  MOVF   55,W
33F2:  MOVWF  62
33F3:  MOVF   4A,W
33F4:  MOVWF  66
33F5:  MOVLB  00
33F6:  CALL   15C
....................     write_data_byte(smf, base_addr + 3, (used_size >> 24) & 0xFF);
33F7:  MOVLW  03
33F8:  MOVLB  0C
33F9:  ADDWF  44,W
33FA:  MOVWF  55
33FB:  MOVLW  00
33FC:  ADDWFC 45,W
33FD:  MOVWF  56
33FE:  MOVLW  00
33FF:  ADDWFC 46,W
3400:  MOVWF  57
3401:  MOVLW  00
3402:  ADDWFC 47,W
3403:  MOVWF  58
3404:  MOVF   4B,W
3405:  MOVWF  5A
3406:  CLRF   5B
3407:  CLRF   5C
3408:  CLRF   5D
3409:  CLRF   5B
340A:  CLRF   5C
340B:  CLRF   5D
340C:  MOVLB  08
340D:  MOVF   61,W
340E:  MOVLB  0C
340F:  MOVWF  61
3410:  MOVLB  08
3411:  MOVF   60,W
3412:  MOVLB  0C
3413:  MOVWF  60
3414:  MOVLB  08
3415:  MOVF   5F,W
3416:  MOVLB  0C
3417:  MOVWF  5F
3418:  MOVLB  08
3419:  MOVF   5E,W
341A:  MOVLB  0C
341B:  MOVWF  5E
341C:  MOVF   58,W
341D:  MOVWF  65
341E:  MOVF   57,W
341F:  MOVWF  64
3420:  MOVF   56,W
3421:  MOVWF  63
3422:  MOVF   55,W
3423:  MOVWF  62
3424:  MOVF   4B,W
3425:  MOVWF  66
3426:  MOVLB  00
3427:  CALL   15C
....................     write_data_byte(smf, base_addr + 4, loop_count);
3428:  MOVLW  04
3429:  MOVLB  0C
342A:  ADDWF  44,W
342B:  MOVWF  55
342C:  MOVLW  00
342D:  ADDWFC 45,W
342E:  MOVWF  56
342F:  MOVLW  00
3430:  ADDWFC 46,W
3431:  MOVWF  57
3432:  MOVLW  00
3433:  ADDWFC 47,W
3434:  MOVWF  58
3435:  MOVLB  08
3436:  MOVF   61,W
3437:  MOVLB  0C
3438:  MOVWF  61
3439:  MOVLB  08
343A:  MOVF   60,W
343B:  MOVLB  0C
343C:  MOVWF  60
343D:  MOVLB  08
343E:  MOVF   5F,W
343F:  MOVLB  0C
3440:  MOVWF  5F
3441:  MOVLB  08
3442:  MOVF   5E,W
3443:  MOVLB  0C
3444:  MOVWF  5E
3445:  MOVF   58,W
3446:  MOVWF  65
3447:  MOVF   57,W
3448:  MOVWF  64
3449:  MOVF   56,W
344A:  MOVWF  63
344B:  MOVF   55,W
344C:  MOVWF  62
344D:  MOVF   4C,W
344E:  MOVWF  66
344F:  MOVLB  00
3450:  CALL   15C
.................... 
....................     fprintf(PC, "used_size = %ld\r\n", used_size);
3451:  MOVLW  85
3452:  MOVLB  03
3453:  MOVWF  11
3454:  MOVLW  06
3455:  MOVWF  12
3456:  BCF    03.0
3457:  MOVLW  0C
3458:  MOVLB  0C
3459:  MOVWF  6B
345A:  MOVLP  08
345B:  MOVLB  00
345C:  CALL   34E
345D:  MOVLP  30
345E:  MOVLW  41
345F:  MOVWF  04
3460:  MOVLB  0C
3461:  MOVF   4B,W
3462:  MOVWF  58
3463:  MOVF   4A,W
3464:  MOVWF  57
3465:  MOVF   49,W
3466:  MOVWF  56
3467:  MOVF   48,W
3468:  MOVWF  55
*
3518:  MOVLW  0D
3519:  MOVLB  0E
351A:  MOVWF  43
351B:  MOVLP  08
351C:  MOVLB  00
351D:  CALL   020
351E:  MOVLP  30
351F:  MOVLW  0A
3520:  MOVLB  0E
3521:  MOVWF  43
3522:  MOVLP  08
3523:  MOVLB  00
3524:  CALL   020
3525:  MOVLP  30
....................     fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
3526:  MOVLW  8E
3527:  MOVLB  03
3528:  MOVWF  11
3529:  MOVLW  06
352A:  MOVWF  12
352B:  BCF    03.0
352C:  MOVLW  0D
352D:  MOVLB  0C
352E:  MOVWF  6B
352F:  MOVLP  08
3530:  MOVLB  00
3531:  CALL   34E
3532:  MOVLP  30
3533:  MOVLB  0C
3534:  MOVF   4C,W
3535:  MOVWF  55
3536:  MOVLW  1B
3537:  MOVWF  56
3538:  MOVLP  18
3539:  MOVLB  00
353A:  CALL   784
353B:  MOVLP  30
353C:  MOVLW  95
353D:  MOVLB  03
353E:  MOVWF  11
353F:  MOVLW  06
3540:  MOVWF  12
3541:  BSF    03.0
3542:  MOVLW  04
3543:  MOVLB  0C
3544:  MOVWF  6B
3545:  MOVLP  08
3546:  MOVLB  00
3547:  CALL   34E
3548:  MOVLP  30
3549:  MOVLP  30
354A:  GOTO   693 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /*
.................... void copy_data()
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
....................     fprintf(PC, "___Start copy_data__\r\n");
.................... 
....................     int8 buffer[MAX_READ_SIZE];
.................... 
....................     for (int8 i = 0; !is_empty_smf_data(); i++)
....................     {
....................         fprintf(PC, "Start [%d th] data copy\r\n\r\n", i);
....................         
....................         // value initialize
....................         smfDataStruct *smf_data = dequeue_smf_data();
....................         MissionTypeStruct mission_type = getMissionTypeStruct(smf_data->mission_type);
....................         status[i+1] = mission_type.mission_flag; // `i` is assigned mis mcu status flag. so mission_flag start `i+1`
....................         unsigned int32 mis_start_address = mission_type.start_address;
....................         unsigned int32 mis_end_address = mission_type.end_address;
....................         unsigned int32 write_src = smf_data->src;
....................         unsigned int32 write_size = smf_data->size;
....................         fprintf(PC, "In smf mission data start   address: %LX\r\n", mis_start_address);
....................         fprintf(PC, "In smf mission data end     address: %LX\r\n", mis_end_address);
....................         fprintf(PC, "In MIS FM Write source data address: %LX\r\n", write_src);
....................         fprintf(PC, "In MIS FM Write data size          : %lu (0x%lx)\r\n\r\n", write_size, write_size);
....................       
....................       
....................         // flash setting
....................         //flash_setting(mis_fm);
....................         //flash_setting(smf);
.................... 
.................... 
....................         // read size area
....................         uint8_t used_size_bytes[4];
....................         read_data_bytes(smf, mis_start_address, used_size_bytes, 4);
....................         unsigned int32 used_size = 
....................            ((unsigned int32)used_size_bytes[3] << 24) |
....................            ((unsigned int32)used_size_bytes[2] << 16) |
....................            ((unsigned int32)used_size_bytes[1] << 8)  |
....................            ((unsigned int32)used_size_bytes[0]);
....................         int8 loop_count = read_data_byte(smf, mis_start_address + 4);
....................         fprintf(PC, "Size area read\r\n");
....................         fprintf(PC, "used_size = %lu (src 0x%08LX)\r\n", used_size, mis_start_address);
....................         fprintf(PC, "loop count= %d  (src 0x%08LX)\r\n\r\n", loop_count, mis_start_address + 4);
....................         
.................... 
....................         // Calculate data write address and check for wrap-around
....................         unsigned int32 data_region_start = mis_start_address + SUBSECTOR_SIZE;
....................         unsigned int32 data_region_end = mis_end_address;
....................         unsigned int32 data_region_size = data_region_end - data_region_start;
....................         unsigned int32 data_write_addr = data_region_start + used_size;
.................... 
.................... 
....................         // Delete the first part in advance in case of looping
....................         if ((used_size + write_size) > data_region_size)
....................         {
....................             fprintf(PC, "Wrap triggered: Resetting data_write_addr to start\r\n");
....................             loop_count++;
....................             used_size = 0;
....................             data_write_addr = data_region_start;
....................             unsigned int32 erase_ptr = data_region_start;
....................             while (erase_ptr < data_region_end)
....................             {
....................                 subsector_4kByte_erase(smf, erase_ptr);
....................                 erase_ptr += SUBSECTOR_SIZE;     // tips: `value += 0x1000` means add up 4KB (0x1000 = 0d4096)
....................             }
....................         }
.................... 
.................... 
....................         // Erase the space you will be writing in now
....................         unsigned int32 erase_start = data_write_addr & ~0xFFF;       // tips: `value & ~0xFFF` means alignment 4KB.
....................         unsigned int32 erase_end = (data_write_addr + write_size + 0xFFF) & ~0xFFF;
....................         for (unsigned int32 addr = erase_start; addr < erase_end && addr < mis_end_address; addr += SUBSECTOR_SIZE)
....................             subsector_4kByte_erase(smf, addr);
.................... 
....................         unsigned int32 remaining = write_size;
....................         unsigned int32 src_addr = write_src;
....................         while (remaining > 0)
....................         {
....................             unsigned int16 chunk = (remaining > MAX_READ_SIZE) ? MAX_READ_SIZE : remaining; //  = max(MAX_READ_SIZE, rest write_size)
.................... 
....................             read_data_bytes(mis_fm, src_addr, buffer, chunk);
....................             write_data_bytes(smf, data_write_addr, buffer, chunk);
.................... 
....................             src_addr += chunk;
....................             data_write_addr += chunk;
....................             used_size += chunk;
....................             remaining -= chunk;
....................         }
.................... 
.................... 
....................        // write size area
....................         fprintf(PC, "Update size area\r\n");
....................         subsector_4kByte_erase(smf, mis_start_address);
....................         write_data_byte(smf, mis_start_address + 0, (used_size >> 0)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 1, (used_size >> 8)  & 0xFF);
....................         write_data_byte(smf, mis_start_address + 2, (used_size >> 16) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 3, (used_size >> 24) & 0xFF);
....................         write_data_byte(smf, mis_start_address + 4, loop_count);
....................         fprintf(PC, "used_size = %ld\r\n", used_size);
....................         fprintf(PC, "loop_count = %u\r\n\r\n", loop_count);
....................     }
.................... 
....................     fprintf(PC, "\r\n___End copy_data____\r\n");
....................     fprintf(PC, "____________________\r\n\r\n");
.................... }
.................... */
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... #include "../mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... #Separate
.................... void handle_uplink_command(Command *command);
.................... #Separate
.................... int1 handle_status_check(Command *command);
.................... #Separate
.................... void handle_smf_available(Command *command);
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... unsigned int8 duration_sec = 30; // duration sec for mission
.................... 
.................... #include "src/mmj_cigs_excute_mission.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... #define PARAMETER_LENGTH 9
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_dummy(unsigned int8 uplinkcmd[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 param1;
....................     unsigned int16 param2;
.................... } DUMMY_CMD;
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_1sector(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... 
.................... #separate
.................... void mode_flash_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_write_4kbyte_subsecotr(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_read(unsigned int8 parameter[]);
.................... 
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... 
.................... #Separate
.................... void mode_flash_read_address(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_smf_copy(unsigned int8 parameter[]);
.................... #Separate
.................... void mode_flash_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... #Separate
.................... void mode_iv_meas_adc();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_DUMMY 0x00
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0x90
.................... #define ID_FLASH_ERASE_1SECTOR 0x91
.................... #define ID_FLASH_ERASE_4kByte_SUBSECTOR 0x92
.................... #define ID_FALSH_WRITE_DEMO 0x93
.................... #define ID_FLASH_4kByte_SUBSECTOR 0x94
.................... #define ID_FLASH_READ 0x96
.................... #define ID_FLASH_READ_ADDRESS 0x97
.................... #define ID_FLASH_SMF_COPY 0x9A
.................... #define ID_FLASH_ADDRESS_RESET 0x9F
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... //#opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... //#device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... // -------------SPI--------------------
.................... // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
.................... // Shared Mission Flash
.................... #define MIS_FM_CS  PIN_D1
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
.................... // Mission Flash
.................... #define SMF_CS PIN_D2
.................... #use spi(MASTER, SPI1, BAUD = 400000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
.................... 
.................... // Analog to Digital Converter 
.................... #define ADC_CS PIN_D3
.................... #use spi(MASTER, SPI1, BAUD = 100000, MODE=2, BITS = 8, STREAM = ADC_STREAM)
.................... 
.................... 
.................... 
.................... 
.................... /* DEMO
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
.................... #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
.................... #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
.................... */
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... 
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_B0
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... #define VREF PIN_A4
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A5
.................... 
.................... // DI/O___
.................... #define CONNECT_CIGS PIN_C0
.................... #define EN_NPWR PIN_C3  
.................... 
.................... 
.................... // ADC Settings
.................... #define ADC_TEMP_TOP    AD7490_VIN0
.................... #define ADC_TEMP_BOT    AD7490_VIN1
.................... #define ADC_CIGS_VOLT   AD7490_VIN2
.................... #define ADC_CIGS_CURR   AD7490_VIN3
.................... #define ADC_PD          AD7490_VIN4
.................... 
.................... // Flasj Settings
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... 
.................... 
.................... typedef enum {
....................    APRS_DATA,  // <- assign your missoins
....................    IN_VEHICLE, 
....................    ECOSYSTEM_DATA, 
....................    APRS_PIC_LOG
.................... } MissionType;
.................... 
.................... typedef struct {
....................    unsigned int32 start_address;
....................    unsigned int32 end_address;
....................    int8 mission_flag;
.................... } MissionTypeStruct;
.................... 
.................... typedef struct {
....................     MissionType   mission_type;
....................     unsigned int32 src;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... #separate
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... #separate
.................... SmfDataStruct *dequeue_smf_data();
.................... #separate
.................... int1 is_empty_smf_data(void);
.................... #separate
.................... MissionTypeStruct getMissionTypeStruct(MissionType mis_type);
.................... 
.................... #include "./src/smf_queue.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../lib/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =====-====
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................     SPI_0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3,
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... #Separate
.................... int1 is_connect(Flash flash_stream);
.................... #Separate
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);      
.................... #Separate
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);  
.................... #Separate
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... #Separate
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
.................... #Separate                               
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
.................... #Separate 
.................... void flash_setting(Flash flash_stream);
.................... #Separate 
.................... int8 status_register(Flash flash_stream);
.................... #Separate 
.................... int8 read_id(Flash flash_stream);
.................... #Separate 
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... #Separate 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
....................         //
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 4 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
.................... unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
.................... struct {
....................     unsigned int8 manufacturer_id; // 1 byte
....................     unsigned int8 memory_type;     // 1 byte
....................     unsigned int8 capacity;        // 1 byte
....................     unsigned int8 reserved;    
.................... } fields;
.................... }READ_ID_DATA;
.................... 
.................... #include "./src/mt25q.c"
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../../lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/mission_tools.c"
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... void execute_mission(unsigned int8 *content)
*
2800:  MOVLB  0B
2801:  MOVF   22,W
2802:  MOVWF  04
2803:  MOVF   23,W
2804:  MOVWF  05
2805:  MOVIW  [FSR0+00],W
2806:  MOVWF  24
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
2807:  MOVLW  98
2808:  MOVLB  03
2809:  MOVWF  11
280A:  MOVLW  06
280B:  MOVWF  12
280C:  MOVLP  08
280D:  MOVLB  00
280E:  CALL   045
280F:  MOVLP  28
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
2810:  MOVLW  BB
2811:  MOVLB  03
2812:  MOVWF  11
2813:  MOVLW  06
2814:  MOVWF  12
2815:  BCF    03.0
2816:  MOVLW  0C
2817:  MOVLB  0C
2818:  MOVWF  6B
2819:  MOVLP  08
281A:  MOVLB  00
281B:  CALL   34E
281C:  MOVLP  28
281D:  MOVLB  0B
281E:  MOVF   24,W
281F:  MOVLB  0C
2820:  MOVWF  6B
2821:  MOVLW  37
2822:  MOVWF  6C
2823:  MOVLP  08
2824:  MOVLB  00
2825:  CALL   3A8
2826:  MOVLP  28
2827:  MOVLW  C2
2828:  MOVLB  03
2829:  MOVWF  11
282A:  MOVLW  06
282B:  MOVWF  12
282C:  BCF    03.0
282D:  MOVLW  04
282E:  MOVLB  0C
282F:  MOVWF  6B
2830:  MOVLP  08
2831:  MOVLB  00
2832:  CALL   34E
2833:  MOVLP  28
....................    switch(command_id)
2834:  MOVLB  0B
2835:  MOVF   24,W
2836:  XORLW  00
2837:  MOVLB  00
2838:  BTFSC  03.2
2839:  GOTO   06B
283A:  XORLW  10
283B:  BTFSC  03.2
283C:  GOTO   075
283D:  XORLW  11
283E:  BTFSC  03.2
283F:  GOTO   076
2840:  XORLW  03
2841:  BTFSC  03.2
2842:  GOTO   077
2843:  XORLW  92
2844:  BTFSC  03.2
2845:  GOTO   078
2846:  XORLW  01
2847:  BTFSC  03.2
2848:  GOTO   082
2849:  XORLW  03
284A:  BTFSC  03.2
284B:  GOTO   08C
284C:  XORLW  01
284D:  BTFSC  03.2
284E:  GOTO   096
284F:  XORLW  07
2850:  BTFSC  03.2
2851:  GOTO   0A0
2852:  XORLW  02
2853:  BTFSC  03.2
2854:  GOTO   0AA
2855:  XORLW  01
2856:  BTFSC  03.2
2857:  GOTO   0B4
2858:  XORLW  0D
2859:  BTFSC  03.2
285A:  GOTO   0BE
285B:  XORLW  05
285C:  BTFSC  03.2
285D:  GOTO   0C8
285E:  XORLW  EE
285F:  BTFSC  03.2
2860:  GOTO   0D2
2861:  XORLW  03
2862:  BTFSC  03.2
2863:  GOTO   0D6
2864:  XORLW  01
2865:  BTFSC  03.2
2866:  GOTO   0DA
2867:  XORLW  03
2868:  BTFSC  03.2
2869:  GOTO   0DE
286A:  GOTO   0E2
....................    {
....................       case ID_DUMMY: // example command
....................          mode_dummy(content);
286B:  MOVLB  0B
286C:  MOVF   23,W
286D:  MOVWF  26
286E:  MOVF   22,W
286F:  MOVWF  25
2870:  MOVLP  10
2871:  MOVLB  00
2872:  GOTO   672
2873:  MOVLP  28
....................          //mode_iv_meas_adc();
....................          break;
2874:  GOTO   0EB
....................       case 0x10:
....................          //mode_measure(parameter);
....................          break;
2875:  GOTO   0EB
....................       case 0x01:
....................          //example_01(parameter);
....................          break;
2876:  GOTO   0EB
....................       case 0x02:
....................          //example_02(parameter);
....................          break;
2877:  GOTO   0EB
....................       case ID_FLASH_ERASE_ALL:
....................          mode_flash_erase_all(content);
2878:  MOVLB  0B
2879:  MOVF   23,W
287A:  MOVWF  26
287B:  MOVF   22,W
287C:  MOVWF  25
287D:  MOVLP  10
287E:  MOVLB  00
287F:  GOTO   794
2880:  MOVLP  28
....................          break;
2881:  GOTO   0EB
....................       case ID_FLASH_ERASE_1SECTOR:
....................          mode_flash_erase_1sector(content);
2882:  MOVLB  0B
2883:  MOVF   23,W
2884:  MOVWF  26
2885:  MOVF   22,W
2886:  MOVWF  25
2887:  MOVLP  18
2888:  MOVLB  00
2889:  GOTO   3E1
288A:  MOVLP  28
....................          break;
288B:  GOTO   0EB
....................       case ID_FLASH_ERASE_4kByte_SUBSECTOR:
....................          mode_flash_erase_4kbyte_subsector(content);
288C:  MOVLB  0B
288D:  MOVF   23,W
288E:  MOVWF  26
288F:  MOVF   22,W
2890:  MOVWF  25
2891:  MOVLP  18
2892:  MOVLB  00
2893:  GOTO   4B7
2894:  MOVLP  28
....................          break;
2895:  GOTO   0EB
....................       case ID_FALSH_WRITE_DEMO:
....................          mode_flash_write_demo(content);
2896:  MOVLB  0B
2897:  MOVF   23,W
2898:  MOVWF  26
2899:  MOVF   22,W
289A:  MOVWF  25
289B:  MOVLP  18
289C:  MOVLB  00
289D:  GOTO   58B
289E:  MOVLP  28
....................          break;
289F:  GOTO   0EB
....................       case ID_FLASH_4kByte_SUBSECTOR:
....................          mode_flash_write_4kbyte_subsecotr(content);
28A0:  MOVLB  0B
28A1:  MOVF   23,W
28A2:  MOVWF  26
28A3:  MOVF   22,W
28A4:  MOVWF  25
28A5:  MOVLP  20
28A6:  MOVLB  00
28A7:  GOTO   000
28A8:  MOVLP  28
....................          break;
28A9:  GOTO   0EB
....................       case ID_FLASH_READ:
....................          mode_flash_read(content);
28AA:  MOVLB  0B
28AB:  MOVF   23,W
28AC:  MOVWF  26
28AD:  MOVF   22,W
28AE:  MOVWF  25
28AF:  MOVLP  20
28B0:  MOVLB  00
28B1:  GOTO   15F
28B2:  MOVLP  28
....................          break;
28B3:  GOTO   0EB
....................       case ID_FLASH_READ_ADDRESS:
....................          mode_flash_read_address(content);
28B4:  MOVLB  0B
28B5:  MOVF   23,W
28B6:  MOVWF  26
28B7:  MOVF   22,W
28B8:  MOVWF  25
28B9:  MOVLP  20
28BA:  MOVLB  00
28BB:  GOTO   3BC
28BC:  MOVLP  28
....................          break;
28BD:  GOTO   0EB
....................       case ID_FLASH_SMF_COPY:
....................          mode_flash_smf_copy(content);
28BE:  MOVLB  0B
28BF:  MOVF   23,W
28C0:  MOVWF  26
28C1:  MOVF   22,W
28C2:  MOVWF  25
28C3:  MOVLP  20
28C4:  MOVLB  00
28C5:  GOTO   46E
28C6:  MOVLP  28
....................          break;
28C7:  GOTO   0EB
....................       case ID_FLASH_ADDRESS_RESET:
....................          mode_flash_address_reset(content);
28C8:  MOVLB  0B
28C9:  MOVF   23,W
28CA:  MOVWF  26
28CB:  MOVF   22,W
28CC:  MOVWF  25
28CD:  MOVLP  20
28CE:  MOVLB  00
28CF:  GOTO   50C
28D0:  MOVLP  28
....................          break;
28D1:  GOTO   0EB
....................       case 0x71: // example command
....................          mode_iv_meas_adc();
28D2:  MOVLP  20
28D3:  CALL   639
28D4:  MOVLP  28
....................          break;
28D5:  GOTO   0EB
....................       case 0x72: // example command
....................          mode_iv_meas_adc();
28D6:  MOVLP  20
28D7:  CALL   639
28D8:  MOVLP  28
....................          break;
28D9:  GOTO   0EB
....................       case 0x73: // example command
....................          mode_iv_meas_adc();
28DA:  MOVLP  20
28DB:  CALL   639
28DC:  MOVLP  28
....................          break;
28DD:  GOTO   0EB
.................... 
....................       case 0x70: // example command
....................          mode_iv_meas_adc();
28DE:  MOVLP  20
28DF:  CALL   639
28E0:  MOVLP  28
....................          break;
28E1:  GOTO   0EB
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
28E2:  MOVLW  C5
28E3:  MOVLB  03
28E4:  MOVWF  11
28E5:  MOVLW  06
28E6:  MOVWF  12
28E7:  MOVLP  08
28E8:  MOVLB  00
28E9:  CALL   045
28EA:  MOVLP  28
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
28EB:  MOVLW  D1
28EC:  MOVLB  03
28ED:  MOVWF  11
28EE:  MOVLW  06
28EF:  MOVWF  12
28F0:  MOVLP  08
28F1:  MOVLB  00
28F2:  CALL   045
28F3:  MOVLP  28
28F4:  MOVLP  20
28F5:  GOTO   7A3 (RETURN)
.................... }
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
36AB:  MOVLW  F4
36AC:  MOVLB  03
36AD:  MOVWF  11
36AE:  MOVLW  06
36AF:  MOVWF  12
36B0:  MOVLP  08
36B1:  MOVLB  00
36B2:  CALL   045
36B3:  MOVLP  30
....................    
....................    switch(command->frame_id)
36B4:  MOVLB  0A
36B5:  MOVF   6C,W
36B6:  MOVWF  04
36B7:  MOVF   6D,W
36B8:  MOVWF  05
36B9:  ADDFSR 00,FSR0
36BA:  MOVF   00,W
36BB:  XORLW  00
36BC:  MOVLB  00
36BD:  BTFSC  03.2
36BE:  GOTO   6C6
36BF:  XORLW  01
36C0:  BTFSC  03.2
36C1:  GOTO   6D0
36C2:  XORLW  03
36C3:  BTFSC  03.2
36C4:  GOTO   6E0
36C5:  GOTO   6E9
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
36C6:  MOVLB  0A
36C7:  MOVF   6D,W
36C8:  MOVWF  6F
36C9:  MOVF   6C,W
36CA:  MOVWF  6E
36CB:  MOVLP  20
36CC:  MOVLB  00
36CD:  GOTO   77C
36CE:  MOVLP  30
....................          break;
36CF:  GOTO   6E9
....................       
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
36D0:  MOVLB  0A
36D1:  MOVF   6D,W
36D2:  MOVWF  6F
36D3:  MOVF   6C,W
36D4:  MOVWF  6E
36D5:  MOVLP  20
36D6:  MOVLB  00
36D7:  GOTO   7B1
36D8:  MOVLP  30
36D9:  MOVF   78,F
36DA:  BTFSC  03.2
36DB:  GOTO   6DF
....................             return TRUE; // if status is finished, return TRUE
36DC:  MOVLW  01
36DD:  MOVWF  78
36DE:  GOTO   6EB
....................          }        
....................          break;
36DF:  GOTO   6E9
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
36E0:  MOVLB  0A
36E1:  MOVF   6D,W
36E2:  MOVWF  6F
36E3:  MOVF   6C,W
36E4:  MOVWF  6E
36E5:  MOVLP  28
36E6:  MOVLB  00
36E7:  GOTO   7AD
36E8:  MOVLP  30
....................          break;
....................    }
....................    return FALSE;
36E9:  MOVLW  00
36EA:  MOVWF  78
36EB:  MOVLP  38
36EC:  GOTO   119 (RETURN)
.................... }
.................... 
.................... 
.................... #Separate
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
277C:  MOVLW  00
277D:  MOVLB  03
277E:  MOVWF  11
277F:  MOVLW  07
2780:  MOVWF  12
2781:  MOVLP  08
2782:  MOVLB  00
2783:  CALL   045
2784:  MOVLP  20
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
2785:  MOVLW  0B
2786:  MOVLB  03
2787:  MOVWF  11
2788:  MOVLW  07
2789:  MOVWF  12
278A:  MOVLP  08
278B:  MOVLB  00
278C:  CALL   045
278D:  MOVLP  20
....................    transmit_ack();
278E:  MOVLP  08
278F:  CALL   7D5
2790:  MOVLP  20
.................... 
....................    status[0] = EXECUTING_MISSION;
2791:  MOVLW  02
2792:  MOVWF  29
....................    execute_mission(command->content);
2793:  MOVLW  03
2794:  MOVLB  0A
2795:  ADDWF  6E,W
2796:  MOVLB  0B
2797:  MOVWF  20
2798:  MOVLW  00
2799:  MOVLB  0A
279A:  ADDWFC 6F,W
279B:  MOVLB  0B
279C:  MOVWF  21
279D:  MOVWF  23
279E:  MOVF   20,W
279F:  MOVWF  22
27A0:  MOVLP  28
27A1:  MOVLB  00
27A2:  GOTO   000
27A3:  MOVLP  20
....................    if (is_empty_smf_data())
27A4:  MOVLP  08
27A5:  CALL   7F3
27A6:  MOVLP  20
27A7:  MOVF   78,F
27A8:  BTFSC  03.2
27A9:  GOTO   7AD
....................       status[0] = FINISHED;
27AA:  MOVLW  06
27AB:  MOVWF  29
27AC:  GOTO   7AF
....................    else
....................       status[0] = SMF_USE_REQ;
27AD:  MOVLW  04
27AE:  MOVWF  29
27AF:  MOVLP  30
27B0:  GOTO   6E9 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... #Separate
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
27B1:  MOVLW  18
27B2:  MOVLB  03
27B3:  MOVWF  11
27B4:  MOVLW  07
27B5:  MOVWF  12
27B6:  MOVLP  08
27B7:  MOVLB  00
27B8:  CALL   045
27B9:  MOVLP  20
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
27BA:  MOVLW  22
27BB:  MOVLB  03
27BC:  MOVWF  11
27BD:  MOVLW  07
27BE:  MOVWF  12
27BF:  MOVLP  08
27C0:  MOVLB  00
27C1:  CALL   045
27C2:  MOVLP  20
....................    transmit_status();
27C3:  MOVLP  18
27C4:  GOTO   7D2
27C5:  MOVLP  20
....................    if (status[0] == FINISHED)
27C6:  MOVF   29,W
27C7:  SUBLW  06
27C8:  BTFSS  03.2
27C9:  GOTO   7D7
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
27CA:  MOVLW  31
27CB:  MOVLB  03
27CC:  MOVWF  11
27CD:  MOVLW  07
27CE:  MOVWF  12
27CF:  MOVLP  08
27D0:  MOVLB  00
27D1:  CALL   045
27D2:  MOVLP  20
....................       return TRUE;
27D3:  MOVLW  01
27D4:  MOVWF  78
27D5:  GOTO   7D9
....................    }
27D6:  GOTO   7D9
....................    else{
....................       return FALSE;
27D7:  MOVLW  00
27D8:  MOVWF  78
....................    }
27D9:  MOVLP  30
27DA:  GOTO   6D8 (RETURN)
.................... 
.................... }
.................... 
.................... #Separate
.................... void handle_smf_available(Command *command) {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
2FAD:  MOVLW  3F
2FAE:  MOVLB  03
2FAF:  MOVWF  11
2FB0:  MOVLW  07
2FB1:  MOVWF  12
2FB2:  MOVLP  08
2FB3:  MOVLB  00
2FB4:  CALL   045
2FB5:  MOVLP  28
....................     fprintf(PC, "\t   Transmit Acknolegde\r\n");
2FB6:  MOVLW  4C
2FB7:  MOVLB  03
2FB8:  MOVWF  11
2FB9:  MOVLW  07
2FBA:  MOVWF  12
2FBB:  MOVLP  08
2FBC:  MOVLB  00
2FBD:  CALL   045
2FBE:  MOVLP  28
....................     transmit_ack();
2FBF:  MOVLP  08
2FC0:  CALL   7D5
2FC1:  MOVLP  28
....................     
....................     if (command->content[0] == ALLOW) {
2FC2:  MOVLB  0A
2FC3:  MOVF   6E,W
2FC4:  MOVWF  04
2FC5:  MOVF   6F,W
2FC6:  MOVWF  05
2FC7:  ADDFSR 03,FSR0
2FC8:  MOVF   00,F
2FC9:  BTFSS  03.2
2FCA:  GOTO   7DD
....................         fprintf(PC, "\t\t-> allowd\r\n");
2FCB:  MOVLW  59
2FCC:  MOVLB  03
2FCD:  MOVWF  11
2FCE:  MOVLW  07
2FCF:  MOVWF  12
2FD0:  MOVLP  08
2FD1:  MOVLB  00
2FD2:  CALL   045
2FD3:  MOVLP  28
....................         status[0] = COPYING;
2FD4:  MOVLW  05
2FD5:  MOVWF  29
....................         copy_data();
2FD6:  MOVLP  30
2FD7:  GOTO   54B
2FD8:  MOVLP  28
....................         status[0] = FINISHED;
2FD9:  MOVLW  06
2FDA:  MOVWF  29
....................     } else {
2FDB:  GOTO   7E6
2FDC:  MOVLB  0A
....................         fprintf(PC, "\t\t-> denyed\r\n");
2FDD:  MOVLW  60
2FDE:  MOVLB  03
2FDF:  MOVWF  11
2FE0:  MOVLW  07
2FE1:  MOVWF  12
2FE2:  MOVLP  08
2FE3:  MOVLB  00
2FE4:  CALL   045
2FE5:  MOVLP  28
....................     }
2FE6:  MOVLP  30
2FE7:  GOTO   6E9 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... unsigned int8 PICLOG_STARTUP = 0x00;
.................... 
.................... // PICLOG
.................... typedef union {
....................     struct {
....................         unsigned int32  time;
....................         unsigned int8   function;
....................         unsigned int8   parameter;
....................     };
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];  
.................... } PICLOG;
.................... 
.................... // extern宣言を追加（実体は.cファイルで定義）
.................... #define PICLOG_BLANK_SIZE 4 // PICLOGの空データサイズ
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE] = {0x00, 0x00, 0x00, 0x00}; // PICLOGの空データ
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... void piclog_write(unsigned int8 *data);
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_piclog.c"
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... 
.................... 
.................... // _________ values ____________
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer [DATA_BUFFER_SIZE*2] = {0x00} ;
.................... volatile unsigned int32 measured_time = 0 ;
.................... volatile unsigned int16 measured_open_voltage = 0 ;
.................... volatile unsigned int16 measured_pd = 0 ;
.................... volatile unsigned int16 measured_temp_top = 0 ;
.................... volatile unsigned int16 measured_temp_bot = 0 ;     
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_func.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_flash.h"
.................... #ifndef  MMJ_CIGS_FLASH_H
.................... #define  MMJ_CIGS_FLASH_H
.................... 
.................... 
.................... 
.................... 
.................... // MIS_FM Function
.................... void misf_init(void);
.................... void update_misf_data_header(void);
.................... void write_misf_address_area(void);
.................... 
.................... 
.................... 
.................... #define PACKET_SIZE 64
.................... #define MISF_DATA_HEADER_SIZE 64 // MISFデータヘッダーのサイズ
.................... #define MISF_PICLOG_MAX_COUNT 60
.................... 
.................... 
.................... 
.................... 
.................... // __________MISF-ADDRESS__________
.................... #define ADDRESS_MISF_START              0x000000
.................... #define ADDRESS_MISF_END                0xF42400
.................... #define ADDRESS_MANEGE_START            0x000000
.................... #define ADDRESS_MANEGE_END              0x00FFFF
.................... #define ADDRESS_MISF_PICLOG_INDEX_START 0x010000
.................... #define ADDRESS_MISF_PICLOG_INDEX_END   0x01FFFF
.................... #define ADDRESS_MISF_PICLOG_DATA_START  0x020000
.................... #define ADDRESS_MISF_PICLOG_DATA_END    0x15FFFF
.................... #define ADDRESS_MISF_MEASUREMENT_START  0x160000
.................... #define ADDRESS_MISF_MEASUREMENT_END    0x95FFFF
.................... 
.................... //
.................... #define SECTOR_64K_BYTE 0x10000 // 64KByte
.................... #define SECTOR_32K_BYTE 0x8000  // 32KByte
.................... #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... 
.................... // Counter
.................... unsigned int32  smf_piclog_use_counter;
.................... unsigned int8   smf_piclog_loop_counter;
.................... unsigned int32  smf_meas_use_counter;
.................... unsigned int8   smf_meas_loop_counter;
.................... 
.................... unsigned int32  misf_piclog_use_counter;
.................... unsigned int8   misf_piclog_loop_counter;
.................... unsigned int32  misf_piclog_uncopyed_counter;
.................... unsigned int8   misf_piclog_write_counter;
.................... unsigned int32  misf_meas_use_counter;
.................... unsigned int8   misf_meas_loop_counter;
.................... unsigned int32  misf_meas_uncopyed_counter;
.................... 
.................... 
.................... #define DATA_HEADER_SIZE 64 
.................... 
.................... 
.................... 
.................... // Packet format
.................... //unsigned int8 HEADER_SIZE 0x12
.................... 
.................... typedef union{
....................     struct {
....................         unsigned int8  header_start; // Header start byte
....................         unsigned int8  header_end;   // Header end byte
....................         unsigned int32 measurement_time; // Measurement time in milliseconds
....................         unsigned int16 measured_pd_start; // Start PD value
....................         unsigned int16 measured_pd_end;   // End PD value
....................         unsigned int16 measured_temp_top;  // Top temperature value
....................         unsigned int16 measured_temp_bot;  // Bottom temperature value
....................         unsigned int8  mode_data;          // Mode data
....................         unsigned int8  crc;                // CRC for error checking
....................     } fields;
....................     unsigned int8 bytes[PACKET_SIZE];
.................... }MEAS_PACKET;
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ___________SMF-ADDRESS___________
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #include "src/mmj_cigs_flash.c"
.................... 
.................... #endif // MMJ_CIGS_FLASH_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "lib/ad7490.h"
.................... #ifndef     AD7490_H
.................... #define     AD7490_H
.................... 
.................... #ifdef AD7490_DEBUG
....................    #define DEBUG_PORT PC
.................... #endif
.................... 
.................... struct AD7490_STREAM
.................... {
....................     int8 spi_stream; // SPI stream number
....................     int16 cs_pin;    // Chip Select pin number
.................... };
.................... 
.................... 
.................... union AD7490_RESISTOR
.................... {
....................     struct 
....................     {
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 randge;   // 0: 0~VREF, 1: 0~2xVREF
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow;   // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; 
....................         int1 add0;
....................         int1 add1;    
....................         int1 add2;    
....................         int1 add3;
....................         int1 seq;     // 1: Sequential, 0: Non-sequential
....................         int1 write;   // 1: Write
....................         int1 blank0; // 1: Blank, 0: Not blank
....................         int1 blank1; // 1: Blank, 0: Not blank
....................         int1 blank2; // 1: Blank, 0: Not blank
....................         int1 blank3; // 1: Blank, 0: Not blank
....................     };
....................     unsigned int16 value; // 16-bit value for direct access
.................... };
.................... 
.................... // Public Function 
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int16 channel);
.................... 
.................... // Private Functions
.................... void set_add(int16 channel);
.................... void set_pm(int8 powermode);
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00
.................... #define AD7490_PM_SHUTDOWN 0b01
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b10
.................... #define AD7490_PM_AUTO_STANDBY 0b11
.................... 
.................... 
.................... // ADC Channel Register
.................... #define AD7490_VIN0 0b0000
.................... #define AD7490_VIN1 0b0001
.................... #define AD7490_VIN2 0b0010
.................... #define AD7490_VIN3 0b0011
.................... #define AD7490_VIN4 0b0100
.................... #define AD7490_VIN5 0b0101
.................... #define AD7490_VIN6 0b0110
.................... #define AD7490_VIN7 0b0111
.................... #define AD7490_VIN8 0b1000
.................... #define AD7490_VIN9 0b1001
.................... #define AD7490_VIN10 0b1010
.................... #define AD7490_VIN11 0b1011
.................... #define AD7490_VIN12 0b1100
.................... #define AD7490_VIN13 0b1101
.................... #define AD7490_VIN14 0b1110
.................... #define AD7490_VIN15 0b1111
.................... 
.................... 
.................... #include "src/ad7490.c"
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
3800:  MOVLB  03
3801:  BSF    1F.3
3802:  MOVLW  A0
3803:  MOVWF  1B
3804:  MOVLW  01
3805:  MOVWF  1C
3806:  MOVLW  A6
3807:  MOVWF  1E
3808:  MOVLW  90
3809:  MOVWF  1D
380A:  MOVLB  01
380B:  BCF    0D.4
380C:  MOVLB  02
380D:  BSF    0D.4
380E:  MOVLB  04
380F:  BCF    15.5
3810:  MOVLW  40
3811:  MOVWF  14
3812:  MOVLW  09
3813:  MOVWF  12
3814:  MOVLW  2A
3815:  MOVWF  15
3816:  MOVLB  02
3817:  BCF    1D.5
3818:  BCF    1D.3
3819:  BCF    1D.4
381A:  MOVLB  01
381B:  BCF    0E.5
381C:  BSF    0E.4
381D:  BCF    0E.3
381E:  MOVLB  00
381F:  BCF    28.0
3820:  CLRF   30
3821:  CLRF   2F
3822:  CLRF   2E
3823:  CLRF   2D
3824:  CLRF   34
3825:  CLRF   33
3826:  CLRF   32
3827:  CLRF   31
3828:  CLRF   36
3829:  CLRF   35
382A:  CLRF   38
382B:  CLRF   37
382C:  CLRF   59
382D:  MOVLB  08
382E:  CLRF   35
382F:  CLRF   34
3830:  CLRF   33
3831:  CLRF   32
3832:  CLRF   37
3833:  CLRF   36
3834:  CLRF   39
3835:  CLRF   38
3836:  CLRF   3B
3837:  CLRF   3A
3838:  CLRF   3D
3839:  CLRF   3C
383A:  CLRF   70
383B:  MOVLW  1E
383C:  MOVWF  76
383D:  MOVLB  03
383E:  CLRF   0C
383F:  CLRF   0D
3840:  CLRF   0E
3841:  CLRF   0F
3842:  CLRF   10
3843:  MOVLB  02
3844:  CLRF   12
3845:  CLRF   11
3846:  GOTO   07B
3847:  DATA 04,34
3848:  DATA 20,34
3849:  DATA 09,34
384A:  DATA 03,34
384B:  DATA 00,34
384C:  DATA 00,34
384D:  DATA 00,34
384E:  DATA 20,34
384F:  DATA 60,34
3850:  DATA 19,34
3851:  DATA 00,34
3852:  DATA FF,34
3853:  DATA 60,34
3854:  DATA 3A,34
3855:  DATA 00,34
3856:  DATA FF,34
3857:  DATA C0,34
3858:  DATA 00,34
3859:  DATA 5A,34
385A:  DATA C0,34
385B:  DATA 00,34
385C:  DATA 04,34
385D:  DATA 22,34
385E:  DATA 9E,34
385F:  DATA 00,34
3860:  DATA 00,34
3861:  DATA 00,34
3862:  DATA 00,34
3863:  DATA 08,34
3864:  DATA 22,34
3865:  DATA BA,34
3866:  DATA 00,34
3867:  DATA 00,34
3868:  DATA 79,34
3869:  DATA 00,34
386A:  DATA 01,34
386B:  DATA 01,34
386C:  DATA 7A,34
386D:  DATA 00,34
386E:  DATA 06,34
386F:  DATA 22,34
3870:  DATA C7,34
3871:  DATA 00,34
3872:  DATA 09,34
3873:  DATA 01,34
3874:  DATA 00,34
3875:  DATA 02,34
3876:  DATA 01,34
3877:  DATA 92,34
3878:  DATA C0,34
3879:  DATA 00,34
387A:  DATA 00,34
387B:  MOVLW  38
387C:  MOVWF  05
387D:  MOVLW  47
387E:  MOVWF  04
387F:  BSF    05.7
3880:  MOVIW  [FSR0++],W
3881:  MOVWF  77
3882:  XORLW  00
3883:  BTFSC  03.2
3884:  GOTO   095
3885:  MOVIW  [FSR0++],W
3886:  MOVWF  78
3887:  BTFSC  78.7
3888:  GOTO   08D
3889:  ANDLW  3F
388A:  MOVWF  07
388B:  MOVIW  [FSR0++],W
388C:  MOVWF  06
388D:  BTFSC  78.6
388E:  MOVIW  [FSR0++],W
388F:  BTFSS  78.6
3890:  MOVIW  [FSR0++],W
3891:  MOVWI  W,[FSR1++]
3892:  DECFSZ 77,F
3893:  GOTO   08F
3894:  GOTO   080
.................... { 
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
3895:  MOVLW  67
3896:  MOVLB  03
3897:  MOVWF  11
3898:  MOVLW  07
3899:  MOVWF  12
389A:  MOVLP  08
389B:  MOVLB  00
389C:  CALL   045
389D:  MOVLP  38
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
389E:  MOVLW  8A
389F:  MOVLB  03
38A0:  MOVWF  11
38A1:  MOVLW  07
38A2:  MOVWF  12
38A3:  MOVLP  08
38A4:  MOVLB  00
38A5:  CALL   045
38A6:  MOVLP  38
....................    fprintf(PC,"Last updated on 2025/06/15, by Inoue.\r\n\r\n");  
38A7:  MOVLW  A1
38A8:  MOVLB  03
38A9:  MOVWF  11
38AA:  MOVLW  07
38AB:  MOVWF  12
38AC:  MOVLP  08
38AD:  MOVLB  00
38AE:  CALL   045
38AF:  MOVLP  38
.................... 
....................    
....................    io_init();
38B0:  MOVLP  08
38B1:  GOTO   093
38B2:  MOVLP  38
....................    adc_init();
38B3:  MOVLP  08
38B4:  GOTO   0AB
38B5:  MOVLP  38
....................    setup_uart_to_boss();
38B6:  MOVLP  08
38B7:  GOTO   0D3
38B8:  MOVLP  38
....................    setup_timer();
38B9:  MOVLP  08
38BA:  GOTO   0E7
38BB:  MOVLP  38
....................    ad7490_init();
38BC:  MOVLP  00
38BD:  GOTO   7EE
38BE:  MOVLP  38
....................    misf_init();
38BF:  MOVLP  08
38C0:  CALL   3CF
38C1:  MOVLP  38
....................    piclog_make(PICLOG_STARTUP,0x00);
38C2:  MOVF   70,W
38C3:  MOVLB  0C
38C4:  MOVWF  2F
38C5:  CLRF   30
38C6:  MOVLP  10
38C7:  MOVLB  00
38C8:  CALL   33B
38C9:  MOVLP  38
.................... 
....................    int1 is_finished = FALSE;
38CA:  MOVLB  0A
38CB:  BCF    5F.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
38CC:  MOVLW  B6
38CD:  MOVLB  03
38CE:  MOVWF  11
38CF:  MOVLW  07
38D0:  MOVWF  12
38D1:  MOVLP  08
38D2:  MOVLB  00
38D3:  CALL   045
38D4:  MOVLP  38
....................    
....................    
....................    
....................    
....................    
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
38D5:  MOVLW  C9
38D6:  MOVLB  03
38D7:  MOVWF  11
38D8:  MOVLW  07
38D9:  MOVWF  12
38DA:  MOVLP  08
38DB:  MOVLB  00
38DC:  CALL   045
38DD:  MOVLP  38
....................    
....................    //Start loop
....................    while(!is_finished)
38DE:  MOVLB  0A
38DF:  BTFSC  5F.0
38E0:  GOTO   140
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
38E1:  MOVLB  00
38E2:  MOVF   59,F
38E3:  BTFSC  03.2
38E4:  GOTO   127
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
38E5:  MOVLW  20
38E6:  MOVLB  0B
38E7:  MOVWF  23
38E8:  MOVLW  19
38E9:  MOVWF  22
38EA:  MOVLB  00
38EB:  MOVF   59,W
38EC:  MOVLB  0B
38ED:  MOVWF  24
38EE:  MOVLP  18
38EF:  MOVLB  00
38F0:  GOTO   000
38F1:  MOVLP  38
38F2:  MOVF   79,W
38F3:  MOVWF  7A
38F4:  MOVF   78,W
38F5:  MOVWF  04
38F6:  MOVF   7A,W
38F7:  MOVWF  05
38F8:  MOVLW  0C
38F9:  MOVWF  78
38FA:  MOVLW  23
38FB:  MOVWF  07
38FC:  MOVLW  60
38FD:  MOVWF  06
38FE:  MOVIW  [FSR0++],W
38FF:  MOVWI  W,[FSR1++]
3900:  DECFSZ 78,F
3901:  GOTO   0FE
....................          /*
....................          fprintf(PC, "Frame ID: %X\r\n", recieve_cmd.frame_id);
....................          fprintf(PC, "Content size: %u\r\n", recieve_cmd.size);
....................          fprintf(PC, "payload: ");
....................          for(int8 i = 0; i < recieve_cmd.size; i++)
....................             fprintf(PC, "%X ", recieve_cmd.content[i]);
....................          fprintf(PC, "\r\n\r\n");
....................          fprintf(PC, "is_exist: %d\r\n", recieve_cmd.is_exist);
....................          */
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
3902:  MOVLW  20
3903:  MOVLB  0A
3904:  MOVWF  6D
3905:  MOVLW  19
3906:  MOVWF  6C
3907:  MOVLW  20
3908:  MOVWF  6F
3909:  MOVLW  39
390A:  MOVWF  6E
390B:  MOVLP  08
390C:  MOVLB  00
390D:  GOTO   7B2
390E:  MOVLP  38
....................          
....................          if(recieve_cmd.is_exist)
390F:  MOVLB  0A
3910:  BTFSS  62.0
3911:  GOTO   11E
....................             is_finished = execute_command(&recieve_cmd); 
3912:  MOVLW  23
3913:  MOVWF  6D
3914:  MOVLW  60
3915:  MOVWF  6C
3916:  MOVLP  30
3917:  MOVLB  00
3918:  GOTO   6AB
3919:  MOVLP  38
391A:  MOVLB  0A
391B:  BCF    5F.0
391C:  BTFSC  78.0
391D:  BSF    5F.0
....................             fprintf(PC,"\r\nwaiting for BOSS PIC command");
391E:  MOVLW  D8
391F:  MOVLB  03
3920:  MOVWF  11
3921:  MOVLW  07
3922:  MOVWF  12
3923:  MOVLP  08
3924:  MOVLB  00
3925:  CALL   045
3926:  MOVLP  38
....................       }
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
3927:  MOVLB  0A
3928:  BTFSS  5F.0
3929:  GOTO   12B
....................          break;
392A:  GOTO   140
....................          
....................       delay_ms(400);
392B:  MOVLW  02
392C:  MOVWF  6C
392D:  MOVLW  C8
392E:  MOVLB  0E
392F:  MOVWF  57
3930:  MOVLP  08
3931:  MOVLB  00
3932:  CALL   781
3933:  MOVLP  38
3934:  MOVLB  0A
3935:  DECFSZ 6C,F
3936:  GOTO   12D
....................       //fprintf(PC,"0x%08LX\r\n", get_current_sec());
....................       fprintf(PC, ".");
3937:  MOVLW  2E
3938:  MOVLB  0E
3939:  MOVWF  43
393A:  MOVLP  08
393B:  MOVLB  00
393C:  CALL   020
393D:  MOVLP  38
393E:  GOTO   0DE
393F:  MOVLB  0A
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
3940:  MOVLW  00
3941:  MOVLB  03
3942:  MOVWF  11
3943:  MOVLW  08
3944:  MOVWF  12
3945:  MOVLP  08
3946:  MOVLB  00
3947:  CALL   045
3948:  MOVLP  38
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
3949:  MOVLW  2E
394A:  MOVLB  0E
394B:  MOVWF  43
394C:  MOVLP  08
394D:  MOVLB  00
394E:  CALL   020
394F:  MOVLP  38
....................       delay_ms(1000);
3950:  MOVLW  04
3951:  MOVLB  0A
3952:  MOVWF  6C
3953:  MOVLW  FA
3954:  MOVLB  0E
3955:  MOVWF  57
3956:  MOVLP  08
3957:  MOVLB  00
3958:  CALL   781
3959:  MOVLP  38
395A:  MOVLB  0A
395B:  DECFSZ 6C,F
395C:  GOTO   153
395D:  MOVLB  00
395E:  GOTO   149
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
395F:  MOVLW  E8
3960:  MOVLB  03
3961:  MOVWF  11
3962:  MOVLW  07
3963:  MOVWF  12
3964:  MOVLP  08
3965:  MOVLB  00
3966:  CALL   045
3967:  MOVLP  38
....................    
.................... }
.................... 
3968:  SLEEP
.................... // Enf of files

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
