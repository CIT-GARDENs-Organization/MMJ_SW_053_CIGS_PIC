CCS PCM C Compiler, Version 5.104, 57077               09-5-25 19:56

               Filename:   build\mmj_cigs_pic_main.lst

               ROM used:   4870 words (30%)
                           Largest free fragment is 2048
               RAM used:   1305 (64%) at main() level
                           1381 (67%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  08
0001:  GOTO   5AA
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   043
0023:  CLRF   05
0024:  MOVLW  91
0025:  MOVWF  04
0026:  BTFSS  00.5
0027:  GOTO   02A
0028:  BTFSC  11.5
0029:  GOTO   045
002A:  MOVF   20,W
002B:  MOVWF  77
002C:  MOVF   21,W
002D:  MOVWF  78
002E:  MOVF   22,W
002F:  MOVWF  79
0030:  MOVF   23,W
0031:  MOVWF  7A
0032:  MOVF   24,W
0033:  MOVLB  03
0034:  MOVWF  11
0035:  MOVLB  00
0036:  MOVF   25,W
0037:  MOVLB  03
0038:  MOVWF  12
0039:  MOVLB  00
003A:  MOVF   26,W
003B:  MOVLB  03
003C:  MOVWF  13
003D:  MOVLB  00
003E:  MOVF   27,W
003F:  MOVLB  03
0040:  MOVWF  14
0041:  RETFIE
0042:  MOVLB  00
0043:  MOVLP  00
0044:  GOTO   047
0045:  MOVLP  00
0046:  GOTO   09C
.................... #include "include/mmj_cigs_pic_main.h"
.................... #ifndef MMJ_CIGS_PIC_MAIN_H
.................... #define MMJ_CIGS_PIC_MAIN_H
.................... 
.................... 
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_pic_config.h"
.................... #ifndef MMJ_CIGS_PIC_CONFIG_H
.................... #define MMJ_CIGS_PIC_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
008D:  DATA 09,2A
008E:  DATA E9,36
008F:  DATA 65,39
0090:  DATA A0,34
0091:  DATA EE,34
0092:  DATA F4,34
0093:  DATA 61,36
0094:  DATA 69,3D
0095:  DATA 65,10
0096:  DATA E3,37
0097:  DATA 6D,38
0098:  DATA EC,32
0099:  DATA F4,32
009A:  DATA 0D,05
009B:  DATA 00,00
*
00BC:  DATA 89,2A
00BD:  DATA 41,29
00BE:  DATA 54,10
00BF:  DATA 69,37
00C0:  DATA 69,3A
00C1:  DATA E9,30
00C2:  DATA EC,34
00C3:  DATA FA,32
00C4:  DATA A0,31
00C5:  DATA EF,36
00C6:  DATA 70,36
00C7:  DATA 65,3A
00C8:  DATA E5,06
00C9:  DATA 0A,00
00CA:  DATA D3,3B
00CB:  DATA E5,32
00CC:  DATA 70,10
00CD:  DATA 69,37
00CE:  DATA 69,3A
00CF:  DATA E9,30
00D0:  DATA EC,34
00D1:  DATA FA,32
00D2:  DATA A0,31
00D3:  DATA EF,36
00D4:  DATA 70,36
00D5:  DATA 65,3A
00D6:  DATA E5,06
00D7:  DATA 0A,00
00D8:  DATA 53,3A
00D9:  DATA 61,39
00DA:  DATA 74,10
00DB:  DATA D3,2B
00DC:  DATA C5,22
00DD:  DATA D0,06
00DE:  DATA 0A,00
00DF:  DATA 89,29
00E0:  DATA F7,32
00E1:  DATA 65,38
00E2:  DATA A0,39
00E3:  DATA F4,32
00E4:  DATA 70,10
00E5:  DATA 3A,10
00E6:  DATA A5,3A
00E7:  DATA 0D,05
00E8:  DATA 00,00
00E9:  DATA 45,27
00EA:  DATA 44,10
00EB:  DATA D3,2B
00EC:  DATA C5,22
00ED:  DATA D0,06
00EE:  DATA 0A,00
00EF:  DATA CC,37
00F0:  DATA E7,33
00F1:  DATA 65,32
00F2:  DATA A0,21
00F3:  DATA C9,23
00F4:  DATA 53,10
00F5:  DATA E4,30
00F6:  DATA F4,30
00F7:  DATA 0D,05
00F8:  DATA 80,00
00F9:  DATA D3,26
00FA:  DATA 46,10
00FB:  DATA E4,30
00FC:  DATA F4,30
00FD:  DATA 20,36
00FE:  DATA E9,39
00FF:  DATA 74,10
0100:  DATA E9,39
0101:  DATA 20,33
0102:  DATA 75,36
0103:  DATA EC,10
0104:  DATA A1,10
0105:  DATA 0D,05
0106:  DATA 00,00
0107:  DATA D3,26
0108:  DATA 46,10
0109:  DATA E4,30
010A:  DATA F4,30
010B:  DATA 20,36
010C:  DATA E9,39
010D:  DATA 74,10
010E:  DATA E9,39
010F:  DATA A0,32
0110:  DATA 6D,38
0111:  DATA F4,3C
0112:  DATA 0D,05
0113:  DATA 00,00
0114:  DATA 66,36
0115:  DATA E1,39
0116:  DATA 68,10
0117:  DATA E2,3A
0118:  DATA F3,3C
0119:  DATA 8A,06
011A:  DATA 00,00
011B:  DATA D2,32
011C:  DATA 61,32
011D:  DATA A0,24
011E:  DATA 44,1D
011F:  DATA 00,01
0120:  DATA 66,36
0121:  DATA E1,39
0122:  DATA 68,10
0123:  DATA E3,37
0124:  DATA 6E,37
0125:  DATA E5,31
0126:  DATA 74,10
0127:  DATA CF,25
0128:  DATA 0D,05
0129:  DATA 00,01
012A:  DATA 66,36
012B:  DATA E1,39
012C:  DATA 68,10
012D:  DATA EE,37
012E:  DATA 74,10
012F:  DATA E3,37
0130:  DATA 6E,37
0131:  DATA E5,31
0132:  DATA F4,06
0133:  DATA 0A,00
0134:  DATA 65,39
0135:  DATA F2,37
0136:  DATA 72,1D
0137:  DATA 66,36
0138:  DATA E1,39
0139:  DATA 68,10
013A:  DATA ED,37
013B:  DATA E4,32
013C:  DATA 6C,10
013D:  DATA E9,39
013E:  DATA A0,34
013F:  DATA 6E,3B
0140:  DATA 61,36
0141:  DATA 69,32
0142:  DATA 0D,05
0143:  DATA 00,01
0144:  DATA 66,36
0145:  DATA E1,39
0146:  DATA 68,10
0147:  DATA F4,34
0148:  DATA ED,32
0149:  DATA EF,3A
014A:  DATA F4,06
014B:  DATA 0A,00
014C:  DATA 66,36
014D:  DATA E1,39
014E:  DATA 68,10
014F:  DATA F3,32
0150:  DATA 63,3A
0151:  DATA 6F,39
0152:  DATA A0,32
0153:  DATA F2,30
0154:  DATA F3,32
0155:  DATA A0,31
0156:  DATA EF,36
0157:  DATA 70,36
0158:  DATA 65,3A
0159:  DATA E5,06
015A:  DATA 0A,00
015B:  DATA 65,39
015C:  DATA F2,37
015D:  DATA 72,1D
015E:  DATA 66,36
015F:  DATA E1,39
0160:  DATA 68,10
0161:  DATA ED,37
0162:  DATA E4,32
0163:  DATA 6C,10
0164:  DATA E9,39
0165:  DATA A0,34
0166:  DATA 6E,3B
0167:  DATA 61,36
0168:  DATA 69,32
0169:  DATA 0D,05
016A:  DATA 00,01
016B:  DATA 66,36
016C:  DATA E1,39
016D:  DATA 68,10
016E:  DATA F4,34
016F:  DATA ED,32
0170:  DATA EF,3A
0171:  DATA F4,06
0172:  DATA 0A,00
0173:  DATA 66,36
0174:  DATA E1,39
0175:  DATA 68,10
0176:  DATA 33,19
0177:  DATA 6B,21
0178:  DATA 79,3A
0179:  DATA 65,10
017A:  DATA F3,3A
017B:  DATA E2,39
017C:  DATA E5,31
017D:  DATA F4,37
017E:  DATA 72,10
017F:  DATA 65,39
0180:  DATA E1,39
0181:  DATA 65,10
0182:  DATA E3,37
0183:  DATA 6D,38
0184:  DATA EC,32
0185:  DATA F4,32
0186:  DATA 0D,05
0187:  DATA 00,00
0188:  DATA 65,39
0189:  DATA F2,37
018A:  DATA 72,1D
018B:  DATA 66,36
018C:  DATA E1,39
018D:  DATA 68,10
018E:  DATA ED,37
018F:  DATA E4,32
0190:  DATA 6C,10
0191:  DATA E9,39
0192:  DATA A0,34
0193:  DATA 6E,3B
0194:  DATA 61,36
0195:  DATA 69,32
0196:  DATA 0D,05
0197:  DATA 00,01
0198:  DATA 66,36
0199:  DATA E1,39
019A:  DATA 68,10
019B:  DATA F4,34
019C:  DATA ED,32
019D:  DATA EF,3A
019E:  DATA F4,06
019F:  DATA 0A,00
01A0:  DATA 66,36
01A1:  DATA E1,39
01A2:  DATA 68,10
01A3:  DATA B4,35
01A4:  DATA C2,3C
01A5:  DATA F4,32
01A6:  DATA A0,39
01A7:  DATA 75,31
01A8:  DATA F3,32
01A9:  DATA 63,3A
01AA:  DATA 6F,39
01AB:  DATA A0,32
01AC:  DATA F2,30
01AD:  DATA F3,32
01AE:  DATA A0,31
01AF:  DATA EF,36
01B0:  DATA 70,36
01B1:  DATA 65,3A
01B2:  DATA E5,06
01B3:  DATA 0A,00
01B4:  DATA 66,36
01B5:  DATA E1,39
01B6:  DATA 68,10
01B7:  DATA F4,34
01B8:  DATA ED,32
01B9:  DATA EF,3A
01BA:  DATA F4,06
01BB:  DATA 0A,00
01BC:  DATA 66,36
01BD:  DATA E1,39
01BE:  DATA 68,10
01BF:  DATA 77,39
01C0:  DATA 69,3A
01C1:  DATA 65,10
01C2:  DATA E3,37
01C3:  DATA 6D,38
01C4:  DATA EC,32
01C5:  DATA F4,32
01C6:  DATA 0D,05
01C7:  DATA 00,00
01C8:  DATA 66,36
01C9:  DATA E1,39
01CA:  DATA 68,10
01CB:  DATA F4,34
01CC:  DATA ED,32
01CD:  DATA EF,3A
01CE:  DATA F4,06
01CF:  DATA 0A,00
01D0:  DATA 66,36
01D1:  DATA E1,39
01D2:  DATA 68,10
01D3:  DATA 77,39
01D4:  DATA 69,3A
01D5:  DATA 65,10
01D6:  DATA E3,37
01D7:  DATA 6D,38
01D8:  DATA EC,32
01D9:  DATA F4,32
01DA:  DATA 0D,05
01DB:  DATA 00,00
01DC:  DATA 53,3A
01DD:  DATA 61,39
01DE:  DATA 74,10
01DF:  DATA ED,30
01E0:  DATA EB,32
01E1:  DATA 5F,39
01E2:  DATA E5,31
01E3:  DATA E5,34
01E4:  DATA F6,32
01E5:  DATA DF,31
01E6:  DATA EF,36
01E7:  DATA ED,30
01E8:  DATA 6E,32
01E9:  DATA 0D,05
01EA:  DATA 89,16
01EB:  DATA 3E,10
01EC:  DATA 00,01
01ED:  DATA 45,37
01EE:  DATA 64,10
01EF:  DATA ED,30
01F0:  DATA EB,32
01F1:  DATA 5F,39
01F2:  DATA E5,31
01F3:  DATA 69,3B
01F4:  DATA E5,2F
01F5:  DATA E3,37
01F6:  DATA ED,36
01F7:  DATA 61,37
01F8:  DATA E4,06
01F9:  DATA 8A,06
01FA:  DATA 0A,00
01FB:  DATA F3,34
01FC:  DATA 67,37
01FD:  DATA 61,36
01FE:  DATA A0,32
01FF:  DATA 6E,32
0200:  DATA A0,3B
0201:  DATA 69,3A
0202:  DATA 68,10
0203:  DATA 53,23
0204:  DATA C4,06
0205:  DATA 0A,00
0206:  DATA E4,37
0207:  DATA EE,13
0208:  DATA 74,10
0209:  DATA E6,34
020A:  DATA 6E,32
020B:  DATA A0,29
020C:  DATA 46,22
020D:  DATA 0D,05
020E:  DATA 00,00
020F:  DATA 89,16
0210:  DATA 3E,10
0211:  DATA 49,37
0212:  DATA F6,30
0213:  DATA EC,34
0214:  DATA 64,10
0215:  DATA 46,39
0216:  DATA E1,36
0217:  DATA 65,10
0218:  DATA 49,22
0219:  DATA 20,39
021A:  DATA E5,31
021B:  DATA E5,34
021C:  DATA F6,32
021D:  DATA 64,1D
021E:  DATA A0,12
021F:  DATA D8,06
0220:  DATA 0A,00
0221:  DATA 89,16
0222:  DATA 3E,10
0223:  DATA 43,29
0224:  DATA 43,10
0225:  DATA 65,39
0226:  DATA F2,37
0227:  DATA F2,10
0228:  DATA 0D,05
0229:  DATA 00,01
022A:  DATA 89,04
022B:  DATA 2D,1F
022C:  DATA 20,39
022D:  DATA E5,31
022E:  DATA E5,34
022F:  DATA F6,32
0230:  DATA 64,10
0231:  DATA 43,29
0232:  DATA 43,1D
0233:  DATA A0,12
0234:  DATA D8,06
0235:  DATA 0A,00
0236:  DATA 89,04
0237:  DATA 20,10
0238:  DATA A0,31
0239:  DATA 6F,36
023A:  DATA EC,32
023B:  DATA 63,3A
023C:  DATA A0,21
023D:  DATA D2,21
023E:  DATA 20,1D
023F:  DATA A0,12
0240:  DATA D8,06
0241:  DATA 0A,00
0242:  DATA 89,16
0243:  DATA 3E,10
0244:  DATA 49,37
0245:  DATA F6,30
0246:  DATA EC,34
0247:  DATA 64,10
0248:  DATA E4,32
0249:  DATA F6,34
024A:  DATA E3,32
024B:  DATA A0,24
024C:  DATA 44,10
024D:  DATA F2,32
024E:  DATA E3,32
024F:  DATA 69,3B
0250:  DATA 65,32
0251:  DATA 0D,05
0252:  DATA 00,01
0253:  DATA 89,04
0254:  DATA 2D,1F
0255:  DATA 20,39
0256:  DATA E5,31
0257:  DATA E5,34
0258:  DATA F6,32
0259:  DATA 64,1D
025A:  DATA 20,10
025B:  DATA 20,10
025C:  DATA A0,12
025D:  DATA D8,06
025E:  DATA 0A,00
025F:  DATA 89,04
0260:  DATA 20,10
0261:  DATA A0,26
0262:  DATA 79,10
0263:  DATA E4,32
0264:  DATA F6,34
0265:  DATA E3,32
0266:  DATA A0,24
0267:  DATA 44,1D
0268:  DATA A0,12
0269:  DATA D8,06
026A:  DATA 0A,00
026B:  DATA 54,39
026C:  DATA 61,37
026D:  DATA F3,34
026E:  DATA 74,10
026F:  DATA E3,37
0270:  DATA ED,36
0271:  DATA 61,37
0272:  DATA E4,06
0273:  DATA 8A,04
0274:  DATA 2D,1F
0275:  DATA 20,00
0276:  DATA A1,10
0277:  DATA A1,37
0278:  DATA F6,32
0279:  DATA 72,33
027A:  DATA EC,37
027B:  DATA 77,10
027C:  DATA 65,3C
027D:  DATA E5,31
027E:  DATA 75,3A
027F:  DATA 65,32
0280:  DATA DF,36
0281:  DATA E9,39
0282:  DATA F3,34
0283:  DATA 6F,37
0284:  DATA 20,36
0285:  DATA E9,39
0286:  DATA F4,06
0287:  DATA 0A,00
0288:  DATA 53,3A
0289:  DATA 61,39
028A:  DATA 74,10
028B:  DATA D3,26
028C:  DATA 46,10
028D:  DATA F5,39
028E:  DATA 69,37
028F:  DATA 67,10
0290:  DATA F2,32
0291:  DATA F1,32
0292:  DATA 73,3A
0293:  DATA A0,39
0294:  DATA E5,30
0295:  DATA F1,3A
0296:  DATA 65,37
0297:  DATA E3,32
0298:  DATA 0D,05
0299:  DATA 00,01
029A:  DATA 45,39
029B:  DATA F2,37
029C:  DATA F2,10
029D:  DATA 20,29
029E:  DATA E5,31
029F:  DATA E5,34
02A0:  DATA F6,34
02A1:  DATA EE,33
02A2:  DATA A0,31
02A3:  DATA EF,36
02A4:  DATA ED,30
02A5:  DATA 6E,32
02A6:  DATA A0,34
02A7:  DATA EE,31
02A8:  DATA 6F,37
02A9:  DATA F3,34
02AA:  DATA 73,3A
02AB:  DATA 65,37
02AC:  DATA 74,10
02AD:  DATA F7,34
02AE:  DATA 74,34
02AF:  DATA 20,3A
02B0:  DATA E8,32
02B1:  DATA 20,32
02B2:  DATA E5,39
02B3:  DATA E9,33
02B4:  DATA EE,06
02B5:  DATA 0A,00
02B6:  DATA D3,26
02B7:  DATA 46,10
02B8:  DATA F5,39
02B9:  DATA 65,10
02BA:  DATA F2,32
02BB:  DATA F1,3A
02BC:  DATA E5,39
02BD:  DATA 74,10
02BE:  DATA 61,36
02BF:  DATA EC,37
02C0:  DATA F7,32
02C1:  DATA E4,06
02C2:  DATA 0A,00
02C3:  DATA D3,26
02C4:  DATA 46,10
02C5:  DATA F5,39
02C6:  DATA 65,10
02C7:  DATA F2,32
02C8:  DATA F1,3A
02C9:  DATA E5,39
02CA:  DATA 74,10
02CB:  DATA E4,32
02CC:  DATA EE,3C
02CD:  DATA 65,32
02CE:  DATA 0D,05
02CF:  DATA 00,01
02D0:  DATA D2,32
02D1:  DATA 74,39
02D2:  DATA 79,10
02D3:  DATA F2,32
02D4:  DATA F1,3A
02D5:  DATA E5,39
02D6:  DATA 74,10
02D7:  DATA F4,37
02D8:  DATA 20,21
02D9:  DATA CF,29
02DA:  DATA 53,10
02DB:  DATA D0,24
02DC:  DATA C3,06
02DD:  DATA 0A,00
02DE:  DATA 45,39
02DF:  DATA F2,37
02E0:  DATA F2,10
02E1:  DATA 20,29
02E2:  DATA E5,31
02E3:  DATA E5,34
02E4:  DATA F6,34
02E5:  DATA EE,33
02E6:  DATA A0,31
02E7:  DATA EF,36
02E8:  DATA ED,30
02E9:  DATA 6E,32
02EA:  DATA A0,34
02EB:  DATA EE,31
02EC:  DATA 6F,37
02ED:  DATA F3,34
02EE:  DATA 73,3A
02EF:  DATA 65,37
02F0:  DATA 74,10
02F1:  DATA F7,34
02F2:  DATA 74,34
02F3:  DATA 20,3A
02F4:  DATA E8,32
02F5:  DATA 20,32
02F6:  DATA E5,39
02F7:  DATA E9,33
02F8:  DATA EE,06
02F9:  DATA 0A,00
02FA:  DATA 45,37
02FB:  DATA 64,10
02FC:  DATA D3,26
02FD:  DATA 46,10
02FE:  DATA F5,39
02FF:  DATA 69,37
0300:  DATA 67,10
0301:  DATA F2,32
0302:  DATA F1,32
0303:  DATA 73,3A
0304:  DATA A0,39
0305:  DATA E5,30
0306:  DATA F1,3A
0307:  DATA 65,37
0308:  DATA E3,32
0309:  DATA 0D,05
030A:  DATA 00,00
030B:  DATA 53,3A
030C:  DATA 61,39
030D:  DATA 74,10
030E:  DATA CD,27
030F:  DATA C4,22
0310:  DATA A0,26
0311:  DATA C5,20
0312:  DATA D3,2A
0313:  DATA D2,22
0314:  DATA 0D,05
0315:  DATA 00,00
0316:  DATA 53,3A
0317:  DATA 61,39
0318:  DATA 74,10
0319:  DATA CD,27
031A:  DATA C4,22
031B:  DATA A0,26
031C:  DATA C5,20
031D:  DATA D3,2A
031E:  DATA D2,22
031F:  DATA 20,2B
0320:  DATA 6F,36
0321:  DATA F4,30
0322:  DATA E7,32
0323:  DATA 0D,05
0324:  DATA 00,00
0325:  DATA F4,32
0326:  DATA 6D,38
0327:  DATA 5F,3A
0328:  DATA 6F,38
0329:  DATA 3A,10
032A:  DATA 25,2C
032B:  DATA 0D,05
032C:  DATA 00,01
032D:  DATA F4,32
032E:  DATA 6D,38
032F:  DATA 5F,31
0330:  DATA 6F,3A
0331:  DATA 3A,10
0332:  DATA 25,2C
0333:  DATA 0D,05
0334:  DATA 00,00
0335:  DATA 70,32
0336:  DATA 5F,3B
0337:  DATA 61,36
0338:  DATA F5,32
0339:  DATA 3A,10
033A:  DATA 25,2C
033B:  DATA 0D,05
033C:  DATA 00,00
033D:  DATA E3,34
033E:  DATA E7,39
033F:  DATA 5F,3B
0340:  DATA 61,36
0341:  DATA F5,32
0342:  DATA 3A,10
0343:  DATA 25,2C
0344:  DATA 0D,05
0345:  DATA 00,00
0346:  DATA E3,3A
0347:  DATA 72,39
0348:  DATA 65,37
0349:  DATA F4,2F
034A:  DATA F6,30
034B:  DATA EC,3A
034C:  DATA 65,1D
034D:  DATA A0,12
034E:  DATA D8,06
034F:  DATA 0A,00
0350:  DATA F6,37
0351:  DATA 6C,3A
0352:  DATA E1,33
0353:  DATA E5,2F
0354:  DATA F6,30
0355:  DATA EC,3A
0356:  DATA 65,1D
0357:  DATA A0,12
0358:  DATA D8,06
0359:  DATA 0A,00
035A:  DATA 53,3A
035B:  DATA 61,39
035C:  DATA 74,10
035D:  DATA 46,36
035E:  DATA E1,39
035F:  DATA 68,10
0360:  DATA 45,39
0361:  DATA E1,39
0362:  DATA 65,10
0363:  DATA 41,36
0364:  DATA EC,06
0365:  DATA 0A,00
0366:  DATA 45,37
0367:  DATA 64,10
0368:  DATA 46,36
0369:  DATA E1,39
036A:  DATA 68,10
036B:  DATA 45,39
036C:  DATA E1,39
036D:  DATA 65,10
036E:  DATA 41,36
036F:  DATA EC,06
0370:  DATA 0A,00
0371:  DATA 53,3A
0372:  DATA 61,39
0373:  DATA 74,10
0374:  DATA 46,36
0375:  DATA E1,39
0376:  DATA 68,10
0377:  DATA 45,39
0378:  DATA E1,39
0379:  DATA 65,10
037A:  DATA 31,10
037B:  DATA D3,32
037C:  DATA 63,3A
037D:  DATA 6F,39
037E:  DATA 0D,05
037F:  DATA 00,01
0380:  DATA 45,37
0381:  DATA 64,10
0382:  DATA 46,36
0383:  DATA E1,39
0384:  DATA 68,10
0385:  DATA 45,39
0386:  DATA E1,39
0387:  DATA 65,10
0388:  DATA 31,10
0389:  DATA D3,32
038A:  DATA 63,3A
038B:  DATA 6F,39
038C:  DATA 0D,05
038D:  DATA 00,00
038E:  DATA 53,3A
038F:  DATA 61,39
0390:  DATA 74,10
0391:  DATA 46,36
0392:  DATA E1,39
0393:  DATA 68,10
0394:  DATA C3,37
0395:  DATA F0,3C
0396:  DATA A0,18
0397:  DATA A0,29
0398:  DATA E5,31
0399:  DATA F4,37
039A:  DATA F2,06
039B:  DATA 0A,00
039C:  DATA 45,37
039D:  DATA 64,10
039E:  DATA 46,36
039F:  DATA E1,39
03A0:  DATA 68,10
03A1:  DATA C3,37
03A2:  DATA F0,3C
03A3:  DATA A0,18
03A4:  DATA A0,29
03A5:  DATA E5,31
03A6:  DATA F4,37
03A7:  DATA F2,06
03A8:  DATA 0A,00
03A9:  DATA C4,32
03AA:  DATA 73,3A
03AB:  DATA 69,37
03AC:  DATA 61,3A
03AD:  DATA E9,37
03AE:  DATA 6E,10
03AF:  DATA 61,32
03B0:  DATA 64,39
03B1:  DATA E5,39
03B2:  DATA 73,1D
03B3:  DATA A0,04
03B4:  DATA 30,3C
03B5:  DATA 25,18
03B6:  DATA 38,26
03B7:  DATA D8,06
03B8:  DATA 0A,00
03B9:  DATA D3,37
03BA:  DATA 75,39
03BB:  DATA E3,32
03BC:  DATA A0,30
03BD:  DATA 64,32
03BE:  DATA F2,32
03BF:  DATA F3,39
03C0:  DATA 3A,10
03C1:  DATA 09,18
03C2:  DATA F8,12
03C3:  DATA 30,1C
03C4:  DATA 4C,2C
03C5:  DATA 0D,05
03C6:  DATA 00,01
03C7:  DATA C4,30
03C8:  DATA F4,30
03C9:  DATA A0,39
03CA:  DATA 69,3D
03CB:  DATA 65,1D
03CC:  DATA A0,04
03CD:  DATA 09,10
03CE:  DATA A0,12
03CF:  DATA 30,1C
03D0:  DATA 4C,2C
03D1:  DATA 0D,05
03D2:  DATA 00,01
03D3:  DATA C3,37
03D4:  DATA F0,3C
03D5:  DATA 69,37
03D6:  DATA 67,17
03D7:  DATA 00,01
03D8:  DATA DF,2F
03D9:  DATA DF,2F
03DA:  DATA DF,2F
03DB:  DATA DF,2F
03DC:  DATA DF,22
03DD:  DATA 6E,32
03DE:  DATA A0,31
03DF:  DATA 6F,38
03E0:  DATA F9,2F
03E1:  DATA E4,30
03E2:  DATA F4,30
03E3:  DATA DF,2F
03E4:  DATA DF,2F
03E5:  DATA DF,2F
03E6:  DATA DF,2F
03E7:  DATA DF,06
03E8:  DATA 8A,2F
03E9:  DATA DF,2F
03EA:  DATA DF,2F
03EB:  DATA DF,2F
03EC:  DATA DF,2F
03ED:  DATA DF,2F
03EE:  DATA DF,2F
03EF:  DATA DF,2F
03F0:  DATA DF,2F
03F1:  DATA DF,2F
03F2:  DATA DF,2F
03F3:  DATA DF,2F
03F4:  DATA DF,2F
03F5:  DATA DF,2F
03F6:  DATA DF,2F
03F7:  DATA DF,06
03F8:  DATA 8A,06
03F9:  DATA 0A,00
03FA:  DATA 53,3A
03FB:  DATA 61,39
03FC:  DATA 74,10
03FD:  DATA 65,3C
03FE:  DATA E5,31
03FF:  DATA 75,3A
0400:  DATA E5,2F
0401:  DATA E3,37
0402:  DATA ED,36
0403:  DATA 61,37
0404:  DATA E4,06
0405:  DATA 0A,00
0406:  DATA 89,16
0407:  DATA 3E,10
0408:  DATA 55,38
0409:  DATA EC,34
040A:  DATA EE,35
040B:  DATA A0,31
040C:  DATA EF,36
040D:  DATA ED,30
040E:  DATA 6E,32
040F:  DATA 0D,05
0410:  DATA 00,01
0411:  DATA 09,10
0412:  DATA 20,10
0413:  DATA 54,39
0414:  DATA 61,37
0415:  DATA F3,36
0416:  DATA 69,3A
0417:  DATA A0,20
0418:  DATA E3,35
0419:  DATA EE,37
041A:  DATA 77,36
041B:  DATA 65,32
041C:  DATA E7,32
041D:  DATA 0D,05
041E:  DATA 00,00
041F:  DATA 89,16
0420:  DATA 3E,10
0421:  DATA 53,3A
0422:  DATA 61,3A
0423:  DATA F5,39
0424:  DATA A0,31
0425:  DATA E8,32
0426:  DATA E3,35
0427:  DATA 0D,05
0428:  DATA 00,01
0429:  DATA 89,04
042A:  DATA 2D,1F
042B:  DATA A0,26
042C:  DATA 79,10
042D:  DATA 73,3A
042E:  DATA 61,3A
042F:  DATA F5,39
0430:  DATA A0,34
0431:  DATA 73,10
0432:  DATA 25,32
0433:  DATA 0D,05
0434:  DATA 00,10
0435:  DATA 09,10
0436:  DATA 20,10
0437:  DATA 54,39
0438:  DATA 61,37
0439:  DATA F3,36
043A:  DATA 69,3A
043B:  DATA A0,26
043C:  DATA C9,29
043D:  DATA A0,26
043E:  DATA C3,2A
043F:  DATA A0,29
0440:  DATA F4,30
0441:  DATA F4,3A
0442:  DATA F3,06
0443:  DATA 0A,00
0444:  DATA E6,34
0445:  DATA EE,34
0446:  DATA 73,34
0447:  DATA 65,32
0448:  DATA A0,34
0449:  DATA 6E,10
044A:  DATA 73,3A
044B:  DATA 61,3A
044C:  DATA F5,39
044D:  DATA DF,31
044E:  DATA E8,32
044F:  DATA E3,35
0450:  DATA 0D,05
0451:  DATA 00,00
0452:  DATA 89,16
0453:  DATA 3E,10
0454:  DATA E9,39
0455:  DATA A0,29
0456:  DATA 4D,23
0457:  DATA A0,30
0458:  DATA F6,30
0459:  DATA 69,36
045A:  DATA 61,31
045B:  DATA EC,32
045C:  DATA 0D,05
045D:  DATA 00,01
045E:  DATA 09,10
045F:  DATA 20,10
0460:  DATA 54,39
0461:  DATA 61,37
0462:  DATA F3,36
0463:  DATA 69,3A
0464:  DATA A0,20
0465:  DATA E3,35
0466:  DATA EE,37
0467:  DATA 77,36
0468:  DATA 65,32
0469:  DATA E7,32
046A:  DATA 0D,05
046B:  DATA 00,01
046C:  DATA 89,04
046D:  DATA 2D,1F
046E:  DATA A0,30
046F:  DATA 6C,36
0470:  DATA EF,3B
0471:  DATA 65,32
0472:  DATA 0D,05
0473:  DATA 00,01
0474:  DATA 89,04
0475:  DATA 2D,1F
0476:  DATA 20,32
0477:  DATA 65,37
0478:  DATA E9,32
0479:  DATA E4,06
047A:  DATA 0A,00
047B:  DATA 0D,05
047C:  DATA 54,34
047D:  DATA E9,39
047E:  DATA 20,10
047F:  DATA ED,34
0480:  DATA F3,39
0481:  DATA E9,37
0482:  DATA 6E,10
0483:  DATA E9,39
0484:  DATA A0,32
0485:  DATA F8,32
0486:  DATA E3,3A
0487:  DATA F4,32
0488:  DATA E4,06
0489:  DATA 8A,04
048A:  DATA 2D,1F
048B:  DATA 20,18
048C:  DATA F8,12
048D:  DATA E4,06
048E:  DATA 0A,00
048F:  DATA 0D,05
0490:  DATA DF,2F
0491:  DATA DF,2F
0492:  DATA DF,2F
0493:  DATA DF,2F
0494:  DATA DF,2F
0495:  DATA DF,2F
0496:  DATA DF,2F
0497:  DATA DF,2F
0498:  DATA DF,2F
0499:  DATA DF,2F
049A:  DATA DF,2F
049B:  DATA DF,2F
049C:  DATA DF,2F
049D:  DATA DF,2F
049E:  DATA DF,2F
049F:  DATA DF,2F
04A0:  DATA DF,2F
04A1:  DATA DF,2F
04A2:  DATA 0D,05
04A3:  DATA DF,2F
04A4:  DATA DF,2F
04A5:  DATA DF,2F
04A6:  DATA DF,2F
04A7:  DATA 53,3A
04A8:  DATA 61,39
04A9:  DATA 74,10
04AA:  DATA 65,3C
04AB:  DATA E5,31
04AC:  DATA 75,3A
04AD:  DATA E5,2F
04AE:  DATA ED,34
04AF:  DATA F3,39
04B0:  DATA E9,37
04B1:  DATA EE,2F
04B2:  DATA DF,2F
04B3:  DATA DF,2F
04B4:  DATA DF,2F
04B5:  DATA DF,06
04B6:  DATA 8A,06
04B7:  DATA 0A,00
04B8:  DATA C3,37
04B9:  DATA ED,36
04BA:  DATA 61,37
04BB:  DATA 64,10
04BC:  DATA 49,22
04BD:  DATA 3A,10
04BE:  DATA 25,2C
04BF:  DATA 0D,05
04C0:  DATA 0D,05
04C1:  DATA 00,01
04C2:  DATA 89,04
04C3:  DATA 2D,1F
04C4:  DATA A0,24
04C5:  DATA 6E,3B
04C6:  DATA 61,36
04C7:  DATA 69,32
04C8:  DATA A0,21
04C9:  DATA 4D,22
04CA:  DATA A0,24
04CB:  DATA C4,10
04CC:  DATA 0D,05
04CD:  DATA 00,01
04CE:  DATA 0D,05
04CF:  DATA DF,2F
04D0:  DATA DF,2F
04D1:  DATA DF,2F
04D2:  DATA DF,2F
04D3:  DATA DF,22
04D4:  DATA 6E,32
04D5:  DATA A0,32
04D6:  DATA F8,32
04D7:  DATA E3,3A
04D8:  DATA F4,32
04D9:  DATA DF,36
04DA:  DATA E9,39
04DB:  DATA F3,34
04DC:  DATA 6F,37
04DD:  DATA DF,2F
04DE:  DATA DF,2F
04DF:  DATA DF,2F
04E0:  DATA DF,2F
04E1:  DATA DF,06
04E2:  DATA 8A,2F
04E3:  DATA DF,2F
04E4:  DATA DF,2F
04E5:  DATA DF,2F
04E6:  DATA DF,2F
04E7:  DATA DF,2F
04E8:  DATA DF,2F
04E9:  DATA DF,2F
04EA:  DATA DF,2F
04EB:  DATA DF,2F
04EC:  DATA DF,2F
04ED:  DATA DF,2F
04EE:  DATA DF,2F
04EF:  DATA DF,2F
04F0:  DATA DF,2F
04F1:  DATA DF,2F
04F2:  DATA DF,2F
04F3:  DATA DF,2F
04F4:  DATA DF,06
04F5:  DATA 0A,00
04F6:  DATA 0D,05
04F7:  DATA BD,1E
04F8:  DATA BD,1E
04F9:  DATA BD,1E
04FA:  DATA BD,1E
04FB:  DATA BD,1E
04FC:  DATA BD,1E
04FD:  DATA BD,1E
04FE:  DATA BD,1E
04FF:  DATA BD,1E
0500:  DATA BD,1E
0501:  DATA BD,1E
0502:  DATA BD,1E
0503:  DATA BD,1E
0504:  DATA BD,1E
0505:  DATA BD,1E
0506:  DATA BD,1E
0507:  DATA BD,1E
0508:  DATA BD,1E
0509:  DATA BD,1E
050A:  DATA BD,1E
050B:  DATA BD,1E
050C:  DATA BD,1E
050D:  DATA BD,1E
050E:  DATA BD,1E
050F:  DATA BD,1E
0510:  DATA BD,1E
0511:  DATA BD,1E
0512:  DATA BD,1E
0513:  DATA BD,1E
0514:  DATA BD,1E
0515:  DATA 0D,05
0516:  DATA 00,01
0517:  DATA 54,34
0518:  DATA E9,39
0519:  DATA A0,34
051A:  DATA 73,10
051B:  DATA CD,27
051C:  DATA CD,24
051D:  DATA CA,24
051E:  DATA A0,21
051F:  DATA C9,23
0520:  DATA 53,10
0521:  DATA D0,24
0522:  DATA 43,10
0523:  DATA 42,21
0524:  DATA 4D,10
0525:  DATA E6,37
0526:  DATA 72,10
0527:  DATA CD,24
0528:  DATA D3,1B
0529:  DATA 5F,21
052A:  DATA C2,26
052B:  DATA 31,17
052C:  DATA 20,26
052D:  DATA E1,39
052E:  DATA 74,10
052F:  DATA 75,38
0530:  DATA E4,30
0531:  DATA F4,32
0532:  DATA 64,10
0533:  DATA 6F,37
0534:  DATA 20,19
0535:  DATA 30,19
0536:  DATA B5,17
0537:  DATA 30,1A
0538:  DATA 2F,19
0539:  DATA 35,16
053A:  DATA 20,31
053B:  DATA 79,10
053C:  DATA 49,37
053D:  DATA EF,3A
053E:  DATA 65,17
053F:  DATA 0D,05
0540:  DATA 00,01
0541:  DATA D3,32
0542:  DATA 65,10
0543:  DATA 74,34
0544:  DATA 65,10
0545:  DATA 63,34
0546:  DATA 61,37
0547:  DATA E7,32
0548:  DATA EC,37
0549:  DATA 67,10
054A:  DATA E6,37
054B:  DATA 72,10
054C:  DATA 74,34
054D:  DATA 65,10
054E:  DATA 63,34
054F:  DATA 61,37
0550:  DATA E7,32
0551:  DATA 73,10
0552:  DATA 69,37
0553:  DATA 20,3A
0554:  DATA E8,34
0555:  DATA 73,10
0556:  DATA F2,32
0557:  DATA EC,32
0558:  DATA E1,39
0559:  DATA 65,05
055A:  DATA 0D,00
055B:  DATA C3,24
055C:  DATA C7,29
055D:  DATA 20,28
055E:  DATA C9,21
055F:  DATA A0,29
0560:  DATA F4,30
0561:  DATA 72,3A
0562:  DATA A0,27
0563:  DATA F0,32
0564:  DATA F2,30
0565:  DATA F4,34
0566:  DATA 6F,37
0567:  DATA 0D,05
0568:  DATA 0D,05
0569:  DATA 00,01
056A:  DATA 46,39
056B:  DATA E1,36
056C:  DATA E5,24
056D:  DATA 44,1D
056E:  DATA A0,12
056F:  DATA 31,2C
0570:  DATA 0D,05
0571:  DATA 00,01
0572:  DATA F0,30
0573:  DATA 79,36
0574:  DATA EF,30
0575:  DATA 64,10
0576:  DATA F3,34
0577:  DATA FA,32
0578:  DATA 3A,10
0579:  DATA 25,32
057A:  DATA 0D,05
057B:  DATA 00,01
057C:  DATA F0,30
057D:  DATA 79,36
057E:  DATA EF,30
057F:  DATA 64,1D
0580:  DATA 20,00
0581:  DATA 0D,05
0582:  DATA 0D,05
0583:  DATA 00,01
0584:  DATA 89,16
0585:  DATA 3E,10
0586:  DATA 49,37
0587:  DATA F6,30
0588:  DATA EC,34
0589:  DATA 64,10
058A:  DATA E3,37
058B:  DATA ED,36
058C:  DATA 61,37
058D:  DATA E4,06
058E:  DATA 0A,00
058F:  DATA 0D,05
0590:  DATA 0D,05
0591:  DATA BD,1E
0592:  DATA BD,1E
0593:  DATA BD,1E
0594:  DATA 0D,05
0595:  DATA 0D,05
0596:  DATA C6,34
0597:  DATA EE,34
0598:  DATA 73,34
0599:  DATA 65,32
059A:  DATA 20,38
059B:  DATA F2,37
059C:  DATA E3,32
059D:  DATA F3,39
059E:  DATA AE,06
059F:  DATA 8A,2B
05A0:  DATA E1,34
05A1:  DATA 74,10
05A2:  DATA E6,37
05A3:  DATA 72,10
05A4:  DATA C2,27
05A5:  DATA D3,29
05A6:  DATA 20,28
05A7:  DATA C9,21
05A8:  DATA 20,3A
05A9:  DATA 75,39
05AA:  DATA 6E,10
05AB:  DATA 6F,33
05AC:  DATA 66,10
05AD:  DATA ED,32
05AE:  DATA 00,01
05AF:  DATA 45,37
05B0:  DATA 64,10
05B1:  DATA ED,30
05B2:  DATA 69,37
05B3:  DATA 0D,05
05B4:  DATA 00,00
*
05DA:  MOVF   0B,W
05DB:  BCF    0B.7
05DC:  MOVLB  03
05DD:  BSF    15.7
05DE:  BSF    15.0
05DF:  NOP
05E0:  NOP
05E1:  BTFSC  09.7
05E2:  BSF    0B.7
05E3:  MOVF   13,W
05E4:  ANDLW  7F
05E5:  BTFSC  03.2
05E6:  GOTO   628
05E7:  MOVLB  10
05E8:  MOVWF  6D
05E9:  MOVLB  03
05EA:  MOVF   11,W
05EB:  MOVLB  10
05EC:  MOVWF  6E
05ED:  MOVLB  03
05EE:  MOVF   12,W
05EF:  MOVLB  10
05F0:  MOVWF  6F
05F1:  MOVF   6D,W
05F2:  MOVLB  11
05F3:  MOVWF  20
05F4:  MOVLB  00
05F5:  CALL   5B5
05F6:  MOVLB  10
05F7:  MOVF   6E,W
05F8:  MOVLB  03
05F9:  MOVWF  11
05FA:  MOVLB  10
05FB:  MOVF   6F,W
05FC:  MOVLB  03
05FD:  MOVWF  12
05FE:  MOVF   0B,W
05FF:  BCF    0B.7
0600:  BSF    15.7
0601:  BSF    15.0
0602:  NOP
0603:  NOP
0604:  BTFSC  09.7
0605:  BSF    0B.7
0606:  RLF    13,W
0607:  RLF    14,W
0608:  ANDLW  7F
0609:  BTFSC  03.2
060A:  GOTO   628
060B:  MOVLB  10
060C:  MOVWF  6D
060D:  MOVLB  03
060E:  MOVF   11,W
060F:  MOVLB  10
0610:  MOVWF  6E
0611:  MOVLB  03
0612:  MOVF   12,W
0613:  MOVLB  10
0614:  MOVWF  6F
0615:  MOVF   6D,W
0616:  MOVLB  11
0617:  MOVWF  20
0618:  MOVLB  00
0619:  CALL   5B5
061A:  MOVLB  10
061B:  MOVF   6E,W
061C:  MOVLB  03
061D:  MOVWF  11
061E:  MOVLB  10
061F:  MOVF   6F,W
0620:  MOVLB  03
0621:  MOVWF  12
0622:  INCF   11,F
0623:  BTFSC  03.2
0624:  INCF   12,F
0625:  MOVLB  00
0626:  GOTO   5DA
0627:  MOVLB  03
0628:  MOVLB  00
0629:  RETURN
*
0658:  MOVLB  10
0659:  BTFSC  6D.7
065A:  GOTO   66E
065B:  MOVLW  0F
065C:  MOVWF  77
065D:  SWAPF  6C,W
065E:  ANDWF  77,F
065F:  MOVLW  0A
0660:  SUBWF  77,W
0661:  BTFSC  03.0
0662:  GOTO   666
0663:  MOVLW  30
0664:  ADDWF  77,F
0665:  GOTO   668
0666:  MOVF   6D,W
0667:  ADDWF  77,F
0668:  MOVF   77,W
0669:  MOVLB  11
066A:  MOVWF  20
066B:  MOVLB  00
066C:  CALL   5B5
066D:  MOVLB  10
066E:  MOVLW  0F
066F:  ANDWF  6C,F
0670:  MOVLW  0A
0671:  SUBWF  6C,W
0672:  BTFSC  03.0
0673:  GOTO   676
0674:  MOVLW  30
0675:  GOTO   678
0676:  BCF    6D.7
0677:  MOVF   6D,W
0678:  ADDWF  6C,F
0679:  MOVF   6C,W
067A:  MOVLB  11
067B:  MOVWF  20
067C:  MOVLB  00
067D:  CALL   5B5
067E:  RETURN
067F:  MOVF   0B,W
0680:  BCF    0B.7
0681:  MOVLB  03
0682:  BSF    15.7
0683:  BSF    15.0
0684:  NOP
0685:  NOP
0686:  BTFSC  09.7
0687:  BSF    0B.7
0688:  BTFSC  03.0
0689:  GOTO   6B3
068A:  MOVF   13,W
068B:  ANDLW  7F
068C:  MOVLB  10
068D:  MOVWF  6D
068E:  MOVLB  03
068F:  MOVF   11,W
0690:  MOVLB  10
0691:  MOVWF  6E
0692:  MOVLB  03
0693:  MOVF   12,W
0694:  MOVLB  10
0695:  MOVWF  6F
0696:  MOVF   6D,W
0697:  MOVLB  11
0698:  MOVWF  20
0699:  MOVLB  00
069A:  CALL   5B5
069B:  MOVLB  10
069C:  MOVF   6E,W
069D:  MOVLB  03
069E:  MOVWF  11
069F:  MOVLB  10
06A0:  MOVF   6F,W
06A1:  MOVLB  03
06A2:  MOVWF  12
06A3:  MOVF   0B,W
06A4:  BCF    0B.7
06A5:  BSF    15.7
06A6:  BSF    15.0
06A7:  NOP
06A8:  NOP
06A9:  BTFSC  09.7
06AA:  BSF    0B.7
06AB:  MOVLB  10
06AC:  DECFSZ 6C,F
06AD:  GOTO   6AF
06AE:  GOTO   6B1
06AF:  MOVLB  03
06B0:  GOTO   6B3
06B1:  GOTO   6D7
06B2:  MOVLB  03
06B3:  RLF    13,W
06B4:  RLF    14,W
06B5:  ANDLW  7F
06B6:  MOVLB  10
06B7:  MOVWF  6D
06B8:  MOVLB  03
06B9:  MOVF   11,W
06BA:  MOVLB  10
06BB:  MOVWF  6E
06BC:  MOVLB  03
06BD:  MOVF   12,W
06BE:  MOVLB  10
06BF:  MOVWF  6F
06C0:  MOVF   6D,W
06C1:  MOVLB  11
06C2:  MOVWF  20
06C3:  MOVLB  00
06C4:  CALL   5B5
06C5:  MOVLB  10
06C6:  MOVF   6E,W
06C7:  MOVLB  03
06C8:  MOVWF  11
06C9:  MOVLB  10
06CA:  MOVF   6F,W
06CB:  MOVLB  03
06CC:  MOVWF  12
06CD:  INCF   11,F
06CE:  BTFSC  03.2
06CF:  INCF   12,F
06D0:  BCF    03.0
06D1:  MOVLB  10
06D2:  DECFSZ 6C,F
06D3:  GOTO   6D5
06D4:  GOTO   6D7
06D5:  MOVLB  00
06D6:  GOTO   67F
06D7:  MOVLB  00
06D8:  RETURN
*
06F9:  MOVLB  10
06FA:  MOVF   49,W
06FB:  CLRF   78
06FC:  SUBWF  48,W
06FD:  BTFSC  03.0
06FE:  GOTO   702
06FF:  MOVF   48,W
0700:  MOVWF  77
0701:  GOTO   70E
0702:  CLRF   77
0703:  MOVLW  08
0704:  MOVWF  4A
0705:  RLF    48,F
0706:  RLF    77,F
0707:  MOVF   49,W
0708:  SUBWF  77,W
0709:  BTFSC  03.0
070A:  MOVWF  77
070B:  RLF    78,F
070C:  DECFSZ 4A,F
070D:  GOTO   705
070E:  MOVLB  00
070F:  RETURN
0710:  MOVLW  20
0711:  MOVLB  10
0712:  BTFSS  40.4
0713:  MOVLW  30
0714:  MOVWF  44
0715:  MOVF   3F,W
0716:  MOVWF  77
0717:  BTFSS  3F.7
0718:  GOTO   721
0719:  COMF   77,F
071A:  INCF   77,F
071B:  MOVF   77,W
071C:  MOVWF  3F
071D:  MOVLW  2D
071E:  MOVWF  44
071F:  BSF    40.7
0720:  BSF    40.0
0721:  MOVF   3F,W
0722:  MOVWF  48
0723:  MOVLW  64
0724:  MOVWF  49
0725:  MOVLB  00
0726:  CALL   6F9
0727:  MOVF   77,W
0728:  MOVLB  10
0729:  MOVWF  3F
072A:  MOVLW  30
072B:  ADDWF  78,W
072C:  MOVWF  45
072D:  MOVF   3F,W
072E:  MOVWF  48
072F:  MOVLW  0A
0730:  MOVWF  49
0731:  MOVLB  00
0732:  CALL   6F9
0733:  MOVLW  30
0734:  ADDWF  77,W
0735:  MOVLB  10
0736:  MOVWF  47
0737:  MOVLW  30
0738:  ADDWF  78,W
0739:  MOVWF  46
073A:  MOVF   44,W
073B:  MOVWF  77
073C:  MOVLW  30
073D:  SUBWF  45,W
073E:  BTFSC  03.2
073F:  GOTO   744
0740:  BSF    40.1
0741:  BTFSC  40.7
0742:  BSF    40.2
0743:  GOTO   758
0744:  MOVF   44,W
0745:  MOVWF  45
0746:  MOVLW  20
0747:  MOVWF  44
0748:  MOVLW  30
0749:  SUBWF  46,W
074A:  BTFSC  03.2
074B:  GOTO   750
074C:  BSF    40.0
074D:  BTFSC  40.7
074E:  BSF    40.1
074F:  GOTO   758
0750:  BTFSS  03.2
0751:  BSF    40.0
0752:  BTFSS  03.2
0753:  GOTO   758
0754:  MOVF   45,W
0755:  MOVWF  46
0756:  MOVLW  20
0757:  MOVWF  45
0758:  BTFSC  40.2
0759:  GOTO   75F
075A:  BTFSC  40.1
075B:  GOTO   765
075C:  BTFSC  40.0
075D:  GOTO   76B
075E:  GOTO   771
075F:  MOVF   44,W
0760:  MOVLB  11
0761:  MOVWF  20
0762:  MOVLB  00
0763:  CALL   5B5
0764:  MOVLB  10
0765:  MOVF   45,W
0766:  MOVLB  11
0767:  MOVWF  20
0768:  MOVLB  00
0769:  CALL   5B5
076A:  MOVLB  10
076B:  MOVF   46,W
076C:  MOVLB  11
076D:  MOVWF  20
076E:  MOVLB  00
076F:  CALL   5B5
0770:  MOVLB  10
0771:  MOVF   47,W
0772:  MOVLB  11
0773:  MOVWF  20
0774:  MOVLB  00
0775:  CALL   5B5
0776:  RETURN
*
0787:  MOVF   78,W
0788:  BTFSC  03.2
0789:  GOTO   78E
078A:  MOVF   77,W
078B:  MOVWI  W,[FSR0++]
078C:  DECFSZ 78,F
078D:  GOTO   78A
*
07A6:  CLRF   77
07A7:  CLRF   78
07A8:  MOVLB  10
07A9:  MOVF   4C,W
07AA:  BCF    03.0
07AB:  BTFSC  4D.0
07AC:  ADDWF  77,F
07AD:  RRF    77,F
07AE:  RRF    78,F
07AF:  BTFSC  4D.1
07B0:  ADDWF  77,F
07B1:  RRF    77,F
07B2:  RRF    78,F
07B3:  BTFSC  4D.2
07B4:  ADDWF  77,F
07B5:  RRF    77,F
07B6:  RRF    78,F
07B7:  BTFSC  4D.3
07B8:  ADDWF  77,F
07B9:  RRF    77,F
07BA:  RRF    78,F
07BB:  BTFSC  4D.4
07BC:  ADDWF  77,F
07BD:  RRF    77,F
07BE:  RRF    78,F
07BF:  BTFSC  4D.5
07C0:  ADDWF  77,F
07C1:  RRF    77,F
07C2:  RRF    78,F
07C3:  BTFSC  4D.6
07C4:  ADDWF  77,F
07C5:  RRF    77,F
07C6:  RRF    78,F
07C7:  BTFSC  4D.7
07C8:  ADDWF  77,F
07C9:  RRF    77,F
07CA:  RRF    78,F
07CB:  MOVLB  00
07CC:  RETURN
*
0ADB:  MOVF   46,W
0ADC:  MOVWF  48
0ADD:  MOVLW  64
0ADE:  MOVWF  49
0ADF:  MOVLP  00
0AE0:  MOVLB  00
0AE1:  CALL   6F9
0AE2:  MOVLP  08
0AE3:  MOVF   77,W
0AE4:  MOVLB  10
0AE5:  MOVWF  46
0AE6:  MOVF   78,W
0AE7:  MOVLW  30
0AE8:  BTFSS  03.2
0AE9:  GOTO   2F1
0AEA:  BTFSS  47.1
0AEB:  GOTO   2FD
0AEC:  BTFSC  47.3
0AED:  GOTO   2FD
0AEE:  BTFSC  47.4
0AEF:  MOVLW  20
0AF0:  GOTO   2F4
0AF1:  BCF    47.3
0AF2:  BCF    47.4
0AF3:  BSF    47.0
0AF4:  ADDWF  78,F
0AF5:  MOVF   78,W
0AF6:  MOVLB  11
0AF7:  MOVWF  20
0AF8:  MOVLP  00
0AF9:  MOVLB  00
0AFA:  CALL   5B5
0AFB:  MOVLP  08
0AFC:  MOVLB  10
0AFD:  MOVF   46,W
0AFE:  MOVWF  48
0AFF:  MOVLW  0A
0B00:  MOVWF  49
0B01:  MOVLP  00
0B02:  MOVLB  00
0B03:  CALL   6F9
0B04:  MOVLP  08
0B05:  MOVF   77,W
0B06:  MOVLB  10
0B07:  MOVWF  46
0B08:  MOVF   78,W
0B09:  MOVLW  30
0B0A:  BTFSS  03.2
0B0B:  GOTO   312
0B0C:  BTFSC  47.3
0B0D:  GOTO   31B
0B0E:  BTFSS  47.0
0B0F:  GOTO   31B
0B10:  BTFSC  47.4
0B11:  MOVLW  20
0B12:  ADDWF  78,F
0B13:  MOVF   78,W
0B14:  MOVLB  11
0B15:  MOVWF  20
0B16:  MOVLP  00
0B17:  MOVLB  00
0B18:  CALL   5B5
0B19:  MOVLP  08
0B1A:  MOVLB  10
0B1B:  MOVLW  30
0B1C:  ADDWF  46,F
0B1D:  MOVF   46,W
0B1E:  MOVLB  11
0B1F:  MOVWF  20
0B20:  MOVLP  00
0B21:  MOVLB  00
0B22:  CALL   5B5
0B23:  MOVLP  08
.................... 
.................... #list
.................... 
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
*
07D8:  MOVLW  25
07D9:  MOVWF  05
07DA:  MOVLW  1D
07DB:  MOVWF  04
07DC:  MOVF   00,W
07DD:  BTFSC  03.2
07DE:  GOTO   7ED
07DF:  MOVLW  05
07E0:  MOVWF  78
07E1:  CLRF   77
07E2:  DECFSZ 77,F
07E3:  GOTO   7E2
07E4:  DECFSZ 78,F
07E5:  GOTO   7E1
07E6:  MOVLW  2E
07E7:  MOVWF  77
07E8:  DECFSZ 77,F
07E9:  GOTO   7E8
07EA:  GOTO   7EB
07EB:  DECFSZ 00,F
07EC:  GOTO   7DF
07ED:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
0A7E:  MOVLB  00
0A7F:  BTFSS  11.4
0A80:  GOTO   27F
0A81:  MOVLB  03
0A82:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
05B5:  MOVLB  01
05B6:  BCF    0D.4
05B7:  MOVLB  02
05B8:  BCF    0D.4
05B9:  MOVLW  08
05BA:  MOVWF  78
05BB:  GOTO   5BC
05BC:  NOP
05BD:  BSF    78.7
05BE:  GOTO   5CF
05BF:  BCF    78.7
05C0:  MOVLB  11
05C1:  RRF    20,F
05C2:  MOVLB  02
05C3:  BTFSC  03.0
05C4:  BSF    0D.4
05C5:  BTFSS  03.0
05C6:  BCF    0D.4
05C7:  BSF    78.6
05C8:  GOTO   5CF
05C9:  BCF    78.6
05CA:  DECFSZ 78,F
05CB:  GOTO   5C0
05CC:  GOTO   5CD
05CD:  NOP
05CE:  BSF    0D.4
05CF:  MOVLW  84
05D0:  MOVWF  04
05D1:  DECFSZ 04,F
05D2:  GOTO   5D1
05D3:  NOP
05D4:  BTFSC  78.7
05D5:  GOTO   5BF
05D6:  BTFSC  78.6
05D7:  GOTO   5C9
05D8:  MOVLB  00
05D9:  RETURN
.................... 
.................... 
.................... #define SPI0_CS  PIN_C1
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... #define SPI1_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_A5
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A2
.................... 
.................... // DI/O___
.................... #define CIGS_CONNECT PIN_C0
.................... #define EN_NPWR PIN_C3  //Negative Power
.................... 
.................... 
.................... #endif // MMJ_CIGS_PIC_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #include "./lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... #include "./lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile unsigned int16 duration_sec = 0;
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status = IDLE;
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... #include "./lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... volatile unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER0
.................... static void TIMER0_isr(void)
.................... {
....................    // every 0.01 sec interrupts
....................    set_timer0(100);
*
0047:  MOVLW  64
0048:  MOVWF  15
.................... 
....................    if (++subsec >= 100)
0049:  MOVLW  01
004A:  ADDWF  2C,F
004B:  BTFSC  03.0
004C:  INCF   2D,F
004D:  BTFSC  03.2
004E:  INCF   2E,F
004F:  BTFSC  03.2
0050:  INCF   2F,F
0051:  MOVF   2F,F
0052:  BTFSS  03.2
0053:  GOTO   05E
0054:  MOVF   2E,F
0055:  BTFSS  03.2
0056:  GOTO   05E
0057:  MOVF   2D,F
0058:  BTFSS  03.2
0059:  GOTO   05E
005A:  MOVF   2C,W
005B:  SUBLW  63
005C:  BTFSC  03.0
005D:  GOTO   08A
....................    {
....................       subsec = 0;
005E:  CLRF   2F
005F:  CLRF   2E
0060:  CLRF   2D
0061:  CLRF   2C
....................       sec++;
0062:  MOVLW  01
0063:  ADDWF  30,F
0064:  BTFSC  03.0
0065:  INCF   31,F
0066:  BTFSC  03.2
0067:  INCF   32,F
0068:  BTFSC  03.2
0069:  INCF   33,F
.................... 
....................       if (sec >= SEC_IN_A_DAY)
006A:  MOVF   33,F
006B:  BTFSS  03.2
006C:  GOTO   07F
006D:  MOVF   32,W
006E:  SUBLW  00
006F:  BTFSC  03.0
0070:  GOTO   08A
0071:  XORLW  FF
0072:  BTFSS  03.2
0073:  GOTO   07F
0074:  MOVF   31,W
0075:  SUBLW  50
0076:  BTFSC  03.0
0077:  GOTO   08A
0078:  XORLW  FF
0079:  BTFSS  03.2
007A:  GOTO   07F
007B:  MOVF   30,W
007C:  SUBLW  7F
007D:  BTFSC  03.0
007E:  GOTO   08A
....................       {
....................          sec -= SEC_IN_A_DAY;
007F:  MOVLW  80
0080:  SUBWF  30,F
0081:  MOVLW  51
0082:  SUBWFC 31,F
0083:  MOVLW  01
0084:  SUBWFC 32,F
0085:  MOVLW  00
0086:  SUBWFC 33,F
....................          day++;
0087:  INCF   34,F
0088:  BTFSC  03.2
0089:  INCF   35,F
....................       }
....................    }
008A:  BCF    0B.2
008B:  MOVLP  00
008C:  GOTO   02A
.................... }
.................... 
.................... void initialize_timer()
.................... {
....................    clear_interrupt(INT_TIMER1);
*
0642:  BCF    11.0
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1); //Config TMR1, external clock, prescaler=1
0643:  MOVLW  87
0644:  MOVWF  18
0645:  CLRF   19
....................    set_timer1(0x8000); //timer1 for 1 second interruption
0646:  CLRF   16
0647:  MOVLW  80
0648:  MOVWF  17
0649:  CLRF   16
064A:  NOP
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);
064B:  MOVLB  01
064C:  BSF    11.0
....................    enable_interrupts(GLOBAL);
064D:  MOVLW  C0
064E:  IORWF  0B,F
....................    fprintf(PC, "\tTimer initialize complete\r\n");
064F:  MOVLW  8D
0650:  MOVLB  03
0651:  MOVWF  11
0652:  MOVLW  00
0653:  MOVWF  12
0654:  MOVLB  00
0655:  CALL   5DA
0656:  MOVLP  08
0657:  GOTO   659 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "./lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void initialize_uart();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
009C:  MOVF   2B,W
009D:  SUBLW  02
009E:  BTFSC  03.2
009F:  GOTO   0A4
00A0:  MOVF   2B,W
00A1:  SUBLW  05
00A2:  BTFSS  03.2
00A3:  GOTO   0A6
00A4:  BTFSS  2A.0
00A5:  GOTO   0B9
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00A6:  MOVF   58,W
00A7:  SUBLW  1F
00A8:  BTFSS  03.0
00A9:  GOTO   0B9
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00AA:  MOVF   58,W
00AB:  INCF   58,F
00AC:  ANDLW  1F
00AD:  ADDLW  18
00AE:  MOVWF  04
00AF:  MOVLW  20
00B0:  MOVWF  05
00B1:  BTFSC  03.0
00B2:  INCF   05,F
00B3:  BTFSS  11.5
00B4:  GOTO   0B3
00B5:  MOVLB  03
00B6:  MOVF   19,W
00B7:  MOVWF  00
00B8:  MOVLB  00
00B9:  BCF    11.5
00BA:  MOVLP  00
00BB:  GOTO   02A
.................... }
.................... 
.................... void initialize_uart()
.................... {
....................    enable_interrupts(INT_RDA);
*
0635:  MOVLB  01
0636:  BSF    11.5
....................    enable_interrupts(global);
0637:  MOVLW  C0
0638:  IORWF  0B,F
....................    fprintf(PC, "\tUART initialize complete\r\n");
0639:  MOVLW  BC
063A:  MOVLB  03
063B:  MOVWF  11
063C:  MOVLW  00
063D:  MOVWF  12
063E:  MOVLB  00
063F:  CALL   5DA
0640:  MOVLP  08
0641:  GOTO   656 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0777:  MOVLB  10
0778:  MOVF   36,W
0779:  MOVWF  7A
077A:  MOVF   35,W
077B:  MOVWF  04
077C:  MOVF   7A,W
077D:  MOVWF  05
077E:  MOVF   00,W
077F:  MOVWF  38
0780:  MOVF   34,W
0781:  MOVWF  05
0782:  MOVF   33,W
0783:  MOVWF  04
0784:  CLRF   77
0785:  MOVF   38,W
0786:  MOVWF  78
....................    *receive_signal_size = 0;
*
078E:  MOVF   35,W
078F:  MOVWF  04
0790:  MOVF   36,W
0791:  MOVWF  05
0792:  CLRF   00
0793:  MOVLP  08
0794:  MOVLB  00
0795:  GOTO   70E (RETURN)
.................... }
.................... 
.................... // EOF
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_pic_mode.h"
.................... #ifndef MMJ_CIGS_PIC_MODE_H
.................... #define MMJ_CIGS_PIC_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "../mmj_cigs_pic_mode.c"
.................... #include "include/mmj_cigs_pic_func.h"
.................... #ifndef MMJ_CIGS_PIC_FUNC_H
.................... #define MMJ_CIGS_PIC_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... /*
.................... 
.................... // Packet format
.................... #define PACKET_SIZE 64
.................... #define CHECKSUM
.................... //volatile unsigned int8 PACKET_DATA[MISSION_DATA_SIZE] = {0x00};
.................... */
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer[DATA_BUFFER_SIZE*2] = {0x00};
.................... volatile unsigned int8 cigs_data[DATA_BUFFER_SIZE*2] = {0x00};
.................... volatile unsigned int8 cigs_data_header[HEADER_SIZE] = {0x00};
.................... volatile unsigned int32 measured_time = 0;
.................... volatile unsigned int16 measured_pd_start = 0;
.................... volatile unsigned int16 measured_pd_end = 0;
.................... volatile unsigned int16 measured_temp_top = 0;
.................... volatile unsigned int16 measured_temp_bot = 0;
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "../mmj_cigs_pic_func.c"
.................... #include "include/mmj_cigs_pic_config.h"
.................... #ifndef MMJ_CIGS_PIC_CONFIG_H
.................... #define MMJ_CIGS_PIC_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... #define SPI0_CS  PIN_C1
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... #define SPI1_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_A5
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A2
.................... 
.................... // DI/O___
.................... #define CIGS_CONNECT PIN_C0
.................... #define EN_NPWR PIN_C3  //Negative Power
.................... 
.................... 
.................... #endif // MMJ_CIGS_PIC_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... //#include "include/mmj_cigs_pic_func.h"
.................... 
.................... void initialize_pic()
.................... {
....................     output_low(CIGS_CONNECT);
*
062A:  MOVLB  01
062B:  BCF    0E.0
062C:  MOVLB  02
062D:  BCF    0E.0
....................     output_low(EN_NPWR);
062E:  MOVLB  01
062F:  BCF    0E.3
0630:  MOVLB  02
0631:  BCF    0E.3
0632:  MOVLP  08
0633:  MOVLB  00
0634:  GOTO   653 (RETURN)
.................... }
.................... 
.................... void initialize_sweep()
.................... {
....................    //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
*
0D82:  MOVLW  78
0D83:  MOVLB  01
0D84:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , VSS_VDD);
0D85:  BCF    1E.0
0D86:  BCF    1E.1
0D87:  BCF    1E.2
0D88:  MOVLW  00
0D89:  MOVLB  03
0D8A:  MOVWF  0C
0D8B:  MOVWF  10
0D8C:  MOVWF  0D
0D8D:  MOVLW  E7
0D8E:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
0D8F:  MOVLB  01
0D90:  BCF    1E.4
0D91:  BSF    1E.5
0D92:  BSF    1E.6
0D93:  BSF    1E.7
0D94:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
0D95:  MOVLW  A0
0D96:  MOVLB  02
0D97:  MOVWF  18
....................    dac_write(50);                                                               
0D98:  MOVLW  32
0D99:  MOVWF  19
....................    fprintf(PC, "\Sweep initialize complete\r\n");
0D9A:  MOVLW  CA
0D9B:  MOVLB  03
0D9C:  MOVWF  11
0D9D:  MOVLW  00
0D9E:  MOVWF  12
0D9F:  MOVLP  00
0DA0:  MOVLB  00
0DA1:  CALL   5DA
0DA2:  MOVLP  08
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
0ABD:  MOVLW  D8
0ABE:  MOVLB  03
0ABF:  MOVWF  11
0AC0:  MOVLW  00
0AC1:  MOVWF  12
0AC2:  MOVLP  00
0AC3:  MOVLB  00
0AC4:  CALL   5DA
0AC5:  MOVLP  08
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
0AC6:  MOVLB  10
0AC7:  MOVF   42,W
0AC8:  MOVWF  43
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
0AC9:  MOVLW  DF
0ACA:  MOVLB  03
0ACB:  MOVWF  11
0ACC:  MOVLW  00
0ACD:  MOVWF  12
0ACE:  BCF    03.0
0ACF:  MOVLW  0E
0AD0:  MOVLB  10
0AD1:  MOVWF  6C
0AD2:  MOVLP  00
0AD3:  MOVLB  00
0AD4:  CALL   67F
0AD5:  MOVLP  08
0AD6:  MOVLB  10
0AD7:  MOVF   43,W
0AD8:  MOVWF  46
0AD9:  MOVLW  1B
0ADA:  MOVWF  47
*
0B24:  MOVLW  0D
0B25:  MOVLB  11
0B26:  MOVWF  20
0B27:  MOVLP  00
0B28:  MOVLB  00
0B29:  CALL   5B5
0B2A:  MOVLP  08
0B2B:  MOVLW  0A
0B2C:  MOVLB  11
0B2D:  MOVWF  20
0B2E:  MOVLP  00
0B2F:  MOVLB  00
0B30:  CALL   5B5
0B31:  MOVLP  08
....................     output_high(CIGS_CONNECT);
0B32:  MOVLB  01
0B33:  BCF    0E.0
0B34:  MOVLB  02
0B35:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
0B36:  MOVLW  14
0B37:  MOVWF  78
0B38:  MOVLB  01
0B39:  MOVF   1D,W
0B3A:  ANDLW  83
0B3B:  IORWF  78,W
0B3C:  MOVWF  1D
0B3D:  MOVLW  0F
0B3E:  MOVWF  78
0B3F:  MOVF   1F,W
0B40:  ANDLW  F0
0B41:  IORWF  78,W
0B42:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0B43:  MOVLW  0D
0B44:  MOVWF  77
0B45:  DECFSZ 77,F
0B46:  GOTO   345
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0B47:  BSF    1D.1
0B48:  BTFSC  1D.1
0B49:  GOTO   348
0B4A:  MOVF   1B,W
0B4B:  MOVWF  78
0B4C:  MOVF   1C,W
0B4D:  MOVLB  0C
0B4E:  MOVWF  32
0B4F:  MOVF   78,W
0B50:  MOVWF  31
....................     set_adc_channel(TEMP_BOT);
0B51:  MOVLW  0C
0B52:  MOVWF  78
0B53:  MOVLB  01
0B54:  MOVF   1D,W
0B55:  ANDLW  83
0B56:  IORWF  78,W
0B57:  MOVWF  1D
0B58:  MOVLW  0F
0B59:  MOVWF  78
0B5A:  MOVF   1F,W
0B5B:  ANDLW  F0
0B5C:  IORWF  78,W
0B5D:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0B5E:  MOVLW  0D
0B5F:  MOVWF  77
0B60:  DECFSZ 77,F
0B61:  GOTO   360
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0B62:  BSF    1D.1
0B63:  BTFSC  1D.1
0B64:  GOTO   363
0B65:  MOVF   1B,W
0B66:  MOVWF  78
0B67:  MOVF   1C,W
0B68:  MOVLB  0C
0B69:  MOVWF  34
0B6A:  MOVF   78,W
0B6B:  MOVWF  33
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
0B6C:  MOVLW  00
0B6D:  MOVWF  78
0B6E:  MOVLB  01
0B6F:  MOVF   1D,W
0B70:  ANDLW  83
0B71:  IORWF  78,W
0B72:  MOVWF  1D
0B73:  MOVLW  0F
0B74:  MOVWF  78
0B75:  MOVF   1F,W
0B76:  ANDLW  F0
0B77:  IORWF  78,W
0B78:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0B79:  MOVLW  0D
0B7A:  MOVWF  77
0B7B:  DECFSZ 77,F
0B7C:  GOTO   37B
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0B7D:  BSF    1D.1
0B7E:  BTFSC  1D.1
0B7F:  GOTO   37E
0B80:  MOVF   1B,W
0B81:  MOVWF  78
0B82:  MOVF   1C,W
0B83:  MOVLB  0C
0B84:  MOVWF  2E
0B85:  MOVF   78,W
0B86:  MOVWF  2D
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
....................     //dac_write3(20);
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
0B87:  MOVLB  10
0B88:  CLRF   45
0B89:  CLRF   44
0B8A:  MOVF   45,F
0B8B:  BTFSS  03.2
0B8C:  GOTO   3F4
0B8D:  MOVF   43,W
0B8E:  SUBWF  44,W
0B8F:  BTFSC  03.0
0B90:  GOTO   3F4
....................     {    
....................         // set DAC value
....................         dac_write(count);
0B91:  MOVF   44,W
0B92:  MOVLB  02
0B93:  MOVWF  19
....................         delay_us(100); // wait for the DAC to stabilize
0B94:  MOVLW  85
0B95:  MOVWF  77
0B96:  DECFSZ 77,F
0B97:  GOTO   396
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
0B98:  MOVLW  00
0B99:  MOVWF  78
0B9A:  MOVLB  01
0B9B:  MOVF   1D,W
0B9C:  ANDLW  83
0B9D:  IORWF  78,W
0B9E:  MOVWF  1D
0B9F:  MOVLW  0F
0BA0:  MOVWF  78
0BA1:  MOVF   1F,W
0BA2:  ANDLW  F0
0BA3:  IORWF  78,W
0BA4:  MOVWF  1F
....................         delay_us(10); // wait for the ADC to stabilize
0BA5:  MOVLW  0D
0BA6:  MOVWF  77
0BA7:  DECFSZ 77,F
0BA8:  GOTO   3A7
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
0BA9:  BCF    03.0
0BAA:  MOVLB  10
0BAB:  RLF    44,W
0BAC:  MOVWF  46
0BAD:  RLF    45,W
0BAE:  MOVWF  47
0BAF:  BCF    03.0
0BB0:  RLF    46,W
0BB1:  MOVWF  79
0BB2:  RLF    47,W
0BB3:  MOVWF  7A
0BB4:  MOVF   79,W
0BB5:  ADDLW  39
0BB6:  MOVWF  04
0BB7:  MOVLW  20
0BB8:  ADDWFC 7A,W
0BB9:  MOVWF  05
0BBA:  MOVLB  01
0BBB:  BSF    1D.1
0BBC:  BTFSC  1D.1
0BBD:  GOTO   3BC
0BBE:  MOVF   1B,W
0BBF:  MOVWF  00
0BC0:  MOVF   1C,W
0BC1:  MOVWI  W,[FSR0+01]
....................         set_adc_channel(CIGS_CURR);
0BC2:  MOVLW  04
0BC3:  MOVWF  78
0BC4:  MOVF   1D,W
0BC5:  ANDLW  83
0BC6:  IORWF  78,W
0BC7:  MOVWF  1D
0BC8:  MOVLW  0F
0BC9:  MOVWF  78
0BCA:  MOVF   1F,W
0BCB:  ANDLW  F0
0BCC:  IORWF  78,W
0BCD:  MOVWF  1F
....................         delay_us(10); // wait for the ADC to stabilize
0BCE:  MOVLW  0D
0BCF:  MOVWF  77
0BD0:  DECFSZ 77,F
0BD1:  GOTO   3D0
....................         data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0BD2:  BCF    03.0
0BD3:  MOVLB  10
0BD4:  RLF    44,W
0BD5:  MOVWF  46
0BD6:  RLF    45,W
0BD7:  MOVWF  47
0BD8:  MOVLW  01
0BD9:  ADDWF  46,F
0BDA:  MOVLW  00
0BDB:  ADDWFC 47,F
0BDC:  BCF    03.0
0BDD:  RLF    46,W
0BDE:  MOVWF  79
0BDF:  RLF    47,W
0BE0:  MOVWF  7A
0BE1:  MOVF   79,W
0BE2:  ADDLW  39
0BE3:  MOVWF  04
0BE4:  MOVLW  20
0BE5:  ADDWFC 7A,W
0BE6:  MOVWF  05
0BE7:  MOVLB  01
0BE8:  BSF    1D.1
0BE9:  BTFSC  1D.1
0BEA:  GOTO   3E9
0BEB:  MOVF   1B,W
0BEC:  MOVWF  00
0BED:  MOVF   1C,W
0BEE:  MOVWI  W,[FSR0+01]
0BEF:  MOVLB  10
0BF0:  INCF   44,F
0BF1:  BTFSC  03.2
0BF2:  INCF   45,F
0BF3:  GOTO   38A
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
0BF4:  MOVLW  E9
0BF5:  MOVLB  03
0BF6:  MOVWF  11
0BF7:  MOVLW  00
0BF8:  MOVWF  12
0BF9:  MOVLP  00
0BFA:  MOVLB  00
0BFB:  CALL   5DA
0BFC:  MOVLP  08
....................     // read PD value
....................     set_adc_channel(PD);
0BFD:  MOVLW  00
0BFE:  MOVWF  78
0BFF:  MOVLB  01
0C00:  MOVF   1D,W
0C01:  ANDLW  83
0C02:  IORWF  78,W
0C03:  MOVWF  1D
0C04:  MOVLW  0F
0C05:  MOVWF  78
0C06:  MOVF   1F,W
0C07:  ANDLW  F0
0C08:  IORWF  78,W
0C09:  MOVWF  1F
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0C0A:  BSF    1D.1
0C0B:  BTFSC  1D.1
0C0C:  GOTO   40B
0C0D:  MOVF   1B,W
0C0E:  MOVWF  78
0C0F:  MOVF   1C,W
0C10:  MOVLB  0C
0C11:  MOVWF  30
0C12:  MOVF   78,W
0C13:  MOVWF  2F
.................... 
....................     convert_cigs_data(measurement_step);
0C14:  MOVLB  10
0C15:  MOVF   43,W
0C16:  MOVWF  46
....................     //convert_header_data();    
....................     output_low(CIGS_CONNECT);
*
0D6B:  MOVLB  01
0D6C:  BCF    0E.0
0D6D:  MOVLB  02
0D6E:  BCF    0E.0
0D6F:  MOVLP  08
0D70:  MOVLB  00
0D71:  GOTO   5A8 (RETURN)
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
0C17:  MOVLW  EF
0C18:  MOVLB  03
0C19:  MOVWF  11
0C1A:  MOVLW  00
0C1B:  MOVWF  12
0C1C:  MOVLP  00
0C1D:  MOVLB  00
0C1E:  CALL   5DA
0C1F:  MOVLP  08
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
0C20:  MOVLB  10
0C21:  CLRF   47
0C22:  MOVF   46,W
0C23:  SUBWF  47,W
0C24:  BTFSC  03.0
0C25:  GOTO   55D
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
0C26:  MOVF   47,W
0C27:  MOVWF  4C
0C28:  MOVLW  03
0C29:  MOVWF  4D
0C2A:  MOVLP  00
0C2B:  MOVLB  00
0C2C:  CALL   7A6
0C2D:  MOVLP  08
0C2E:  MOVLW  91
0C2F:  ADDWF  78,W
0C30:  MOVWF  78
0C31:  MOVLW  22
0C32:  MOVWF  7A
0C33:  BTFSC  03.0
0C34:  INCF   7A,F
0C35:  MOVF   78,W
0C36:  MOVLB  10
0C37:  MOVWF  4C
0C38:  MOVF   7A,W
0C39:  MOVWF  4D
0C3A:  BCF    03.0
0C3B:  RLF    47,W
0C3C:  CLRF   7A
0C3D:  MOVWF  79
0C3E:  BCF    03.0
0C3F:  RLF    79,F
0C40:  RLF    7A,F
0C41:  MOVF   79,W
0C42:  ADDLW  39
0C43:  MOVWF  04
0C44:  MOVLW  20
0C45:  ADDWFC 7A,W
0C46:  MOVWF  05
0C47:  MOVF   00,W
0C48:  MOVWF  4E
0C49:  ADDFSR 01,FSR0
0C4A:  MOVF   00,W
0C4B:  MOVWF  4F
0C4C:  ADDFSR 3F,FSR0
0C4D:  RRF    4F,F
0C4E:  RRF    4E,F
0C4F:  RRF    4F,F
0C50:  RRF    4E,F
0C51:  RRF    4F,F
0C52:  RRF    4E,F
0C53:  RRF    4F,F
0C54:  RRF    4E,F
0C55:  MOVLW  0F
0C56:  ANDWF  4F,F
0C57:  MOVF   4E,W
0C58:  MOVWF  77
0C59:  CLRF   7A
0C5A:  MOVF   7A,W
0C5B:  MOVWF  4F
0C5C:  MOVF   4D,W
0C5D:  MOVWF  05
0C5E:  MOVF   4C,W
0C5F:  MOVWF  04
0C60:  MOVF   4E,W
0C61:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
0C62:  MOVF   47,W
0C63:  MOVWF  4C
0C64:  MOVLW  03
0C65:  MOVWF  4D
0C66:  MOVLP  00
0C67:  MOVLB  00
0C68:  CALL   7A6
0C69:  MOVLP  08
0C6A:  MOVLW  91
0C6B:  ADDWF  78,W
0C6C:  MOVWF  04
0C6D:  MOVLW  22
0C6E:  MOVWF  05
0C6F:  BTFSC  03.0
0C70:  INCF   05,F
0C71:  MOVF   00,W
0C72:  MOVLB  10
0C73:  MOVWF  4C
0C74:  MOVWF  6C
0C75:  MOVLW  37
0C76:  MOVWF  6D
0C77:  MOVLP  00
0C78:  MOVLB  00
0C79:  CALL   658
0C7A:  MOVLP  08
0C7B:  MOVLW  20
0C7C:  MOVLB  11
0C7D:  MOVWF  20
0C7E:  MOVLP  00
0C7F:  MOVLB  00
0C80:  CALL   5B5
0C81:  MOVLP  08
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
0C82:  MOVLB  10
0C83:  MOVF   47,W
0C84:  MOVWF  4C
0C85:  MOVLW  03
0C86:  MOVWF  4D
0C87:  MOVLP  00
0C88:  MOVLB  00
0C89:  CALL   7A6
0C8A:  MOVLP  08
0C8B:  MOVLW  01
0C8C:  ADDWF  78,W
0C8D:  ADDLW  91
0C8E:  MOVWF  78
0C8F:  MOVLW  22
0C90:  MOVWF  7A
0C91:  BTFSC  03.0
0C92:  INCF   7A,F
0C93:  MOVF   78,W
0C94:  MOVLB  10
0C95:  MOVWF  4C
0C96:  MOVF   7A,W
0C97:  MOVWF  4D
0C98:  BCF    03.0
0C99:  RLF    47,W
0C9A:  CLRF   7A
0C9B:  MOVWF  79
0C9C:  BCF    03.0
0C9D:  RLF    79,F
0C9E:  RLF    7A,F
0C9F:  MOVF   79,W
0CA0:  ADDLW  39
0CA1:  MOVWF  04
0CA2:  MOVLW  20
0CA3:  ADDWFC 7A,W
0CA4:  MOVWF  05
0CA5:  MOVF   00,W
0CA6:  MOVWF  4E
0CA7:  ADDFSR 01,FSR0
0CA8:  MOVF   00,W
0CA9:  MOVWF  4F
0CAA:  ADDFSR 3F,FSR0
0CAB:  MOVLW  0F
0CAC:  ANDWF  4E,F
0CAD:  CLRF   4F
0CAE:  RLF    4E,F
0CAF:  RLF    4F,F
0CB0:  RLF    4E,F
0CB1:  RLF    4F,F
0CB2:  RLF    4E,F
0CB3:  RLF    4F,F
0CB4:  RLF    4E,F
0CB5:  RLF    4F,F
0CB6:  MOVLW  F0
0CB7:  ANDWF  4E,F
0CB8:  BCF    03.0
0CB9:  RLF    47,W
0CBA:  ADDLW  01
0CBB:  CLRF   7A
0CBC:  MOVWF  79
0CBD:  BCF    03.0
0CBE:  RLF    79,F
0CBF:  RLF    7A,F
0CC0:  MOVF   79,W
0CC1:  ADDLW  39
0CC2:  MOVWF  04
0CC3:  MOVLW  20
0CC4:  ADDWFC 7A,W
0CC5:  MOVWF  05
0CC6:  MOVF   00,W
0CC7:  MOVWF  50
0CC8:  ADDFSR 01,FSR0
0CC9:  MOVF   00,W
0CCA:  MOVWF  51
0CCB:  ADDFSR 3F,FSR0
0CCC:  MOVF   51,W
0CCD:  MOVWF  50
0CCE:  CLRF   51
0CCF:  MOVF   50,W
0CD0:  ANDLW  0F
0CD1:  MOVWF  77
0CD2:  CLRF   7A
0CD3:  MOVF   77,W
0CD4:  IORWF  4E,W
0CD5:  MOVWF  77
0CD6:  MOVF   7A,W
0CD7:  IORWF  4F,W
0CD8:  MOVWF  7A
0CD9:  MOVF   77,W
0CDA:  MOVWF  4E
0CDB:  MOVF   7A,W
0CDC:  MOVWF  4F
0CDD:  MOVF   4D,W
0CDE:  MOVWF  05
0CDF:  MOVF   4C,W
0CE0:  MOVWF  04
0CE1:  MOVF   4E,W
0CE2:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
0CE3:  MOVF   47,W
0CE4:  MOVWF  4C
0CE5:  MOVLW  03
0CE6:  MOVWF  4D
0CE7:  MOVLP  00
0CE8:  MOVLB  00
0CE9:  CALL   7A6
0CEA:  MOVLP  08
0CEB:  MOVLW  01
0CEC:  ADDWF  78,W
0CED:  ADDLW  91
0CEE:  MOVWF  04
0CEF:  MOVLW  22
0CF0:  MOVWF  05
0CF1:  BTFSC  03.0
0CF2:  INCF   05,F
0CF3:  MOVF   00,W
0CF4:  MOVLB  10
0CF5:  MOVWF  4C
0CF6:  MOVWF  6C
0CF7:  MOVLW  37
0CF8:  MOVWF  6D
0CF9:  MOVLP  00
0CFA:  MOVLB  00
0CFB:  CALL   658
0CFC:  MOVLP  08
0CFD:  MOVLW  20
0CFE:  MOVLB  11
0CFF:  MOVWF  20
0D00:  MOVLP  00
0D01:  MOVLB  00
0D02:  CALL   5B5
0D03:  MOVLP  08
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
0D04:  MOVLB  10
0D05:  MOVF   47,W
0D06:  MOVWF  4C
0D07:  MOVLW  03
0D08:  MOVWF  4D
0D09:  MOVLP  00
0D0A:  MOVLB  00
0D0B:  CALL   7A6
0D0C:  MOVLP  08
0D0D:  MOVLW  02
0D0E:  ADDWF  78,W
0D0F:  ADDLW  91
0D10:  MOVWF  78
0D11:  MOVLW  22
0D12:  MOVWF  7A
0D13:  BTFSC  03.0
0D14:  INCF   7A,F
0D15:  MOVF   78,W
0D16:  MOVLB  10
0D17:  MOVWF  4C
0D18:  MOVF   7A,W
0D19:  MOVWF  4D
0D1A:  BCF    03.0
0D1B:  RLF    47,W
0D1C:  ADDLW  01
0D1D:  CLRF   7A
0D1E:  MOVWF  79
0D1F:  BCF    03.0
0D20:  RLF    79,F
0D21:  RLF    7A,F
0D22:  MOVF   79,W
0D23:  ADDLW  39
0D24:  MOVWF  04
0D25:  MOVLW  20
0D26:  ADDWFC 7A,W
0D27:  MOVWF  05
0D28:  MOVF   00,W
0D29:  MOVWF  4E
0D2A:  ADDFSR 01,FSR0
0D2B:  MOVF   00,W
0D2C:  MOVWF  4F
0D2D:  ADDFSR 3F,FSR0
0D2E:  MOVF   4E,W
0D2F:  MOVWF  77
0D30:  CLRF   7A
0D31:  MOVF   7A,W
0D32:  MOVWF  4F
0D33:  MOVF   4D,W
0D34:  MOVWF  05
0D35:  MOVF   4C,W
0D36:  MOVWF  04
0D37:  MOVF   4E,W
0D38:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
0D39:  MOVF   47,W
0D3A:  MOVWF  4C
0D3B:  MOVLW  03
0D3C:  MOVWF  4D
0D3D:  MOVLP  00
0D3E:  MOVLB  00
0D3F:  CALL   7A6
0D40:  MOVLP  08
0D41:  MOVLW  02
0D42:  ADDWF  78,W
0D43:  ADDLW  91
0D44:  MOVWF  04
0D45:  MOVLW  22
0D46:  MOVWF  05
0D47:  BTFSC  03.0
0D48:  INCF   05,F
0D49:  MOVF   00,W
0D4A:  MOVLB  10
0D4B:  MOVWF  4C
0D4C:  MOVWF  6C
0D4D:  MOVLW  37
0D4E:  MOVWF  6D
0D4F:  MOVLP  00
0D50:  MOVLB  00
0D51:  CALL   658
0D52:  MOVLP  08
0D53:  MOVLW  20
0D54:  MOVLB  11
0D55:  MOVWF  20
0D56:  MOVLP  00
0D57:  MOVLB  00
0D58:  CALL   5B5
0D59:  MOVLP  08
0D5A:  MOVLB  10
0D5B:  INCF   47,F
0D5C:  GOTO   422
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
0D5D:  MOVLW  0D
0D5E:  MOVLB  11
0D5F:  MOVWF  20
0D60:  MOVLP  00
0D61:  MOVLB  00
0D62:  CALL   5B5
0D63:  MOVLP  08
0D64:  MOVLW  0A
0D65:  MOVLB  11
0D66:  MOVWF  20
0D67:  MOVLP  00
0D68:  MOVLB  00
0D69:  CALL   5B5
0D6A:  MOVLP  08
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].dest = data->dest;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
11E2:  MOVLB  0F
11E3:  MOVF   46,W
11E4:  SUBWF  45,W
11E5:  BTFSS  03.2
11E6:  GOTO   1F6
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
11E7:  MOVLW  07
11E8:  MOVLB  03
11E9:  MOVWF  11
11EA:  MOVLW  01
11EB:  MOVWF  12
11EC:  MOVLP  00
11ED:  MOVLB  00
11EE:  CALL   5DA
11EF:  MOVLP  10
....................       return 0x00;
11F0:  MOVLW  00
11F1:  MOVWF  78
11F2:  MOVWF  79
11F3:  GOTO   211
....................    }
11F4:  GOTO   211
11F5:  MOVLB  0F
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
11F6:  MOVF   45,W
11F7:  MOVLB  10
11F8:  MOVWF  3C
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
11F9:  MOVLW  01
11FA:  MOVLB  0F
11FB:  ADDWF  45,W
11FC:  ANDLW  0F
11FD:  MOVWF  45
....................       return &smf_queue.smf_data[current_head];
11FE:  MOVLB  10
11FF:  MOVF   3C,W
1200:  MOVWF  4C
1201:  MOVLW  0C
1202:  MOVWF  4D
1203:  MOVLP  00
1204:  MOVLB  00
1205:  CALL   7A6
1206:  MOVLP  10
1207:  MOVF   78,W
1208:  ADDLW  15
1209:  MOVWF  78
120A:  MOVLW  24
120B:  MOVWF  7A
120C:  BTFSC  03.0
120D:  INCF   7A,F
120E:  MOVF   7A,W
120F:  MOVWF  79
1210:  GOTO   211
....................    }
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
07CD:  MOVLB  0F
07CE:  MOVF   46,W
07CF:  SUBWF  45,W
07D0:  BTFSC  03.2
07D1:  GOTO   7D4
07D2:  MOVLW  00
07D3:  GOTO   7D5
07D4:  MOVLW  01
07D5:  MOVWF  78
07D6:  MOVLB  00
07D7:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "./src/flash.c"
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////GDNS_226_FlashOperation.c////////////////////////////
.................... //////////////////////////////////ver 2.2//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////redefinition of spi communication///////////////////////
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
....................          break;
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2,write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3,write_data[spi_xfer_num]);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
....................          break;
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM2);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM3);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
....................          break;
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, write_data[spi_xfer_num]);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
.................... }
.................... 
.................... int8 status_register(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
....................    #ifdef DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(DEBUG_PORT,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(DEBUG_PORT,"%x ",chip_id[print_counter]);
....................       fprintf(DEBUG_PORT,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef DEBUG
.................... //!      fprintf(DEBUG_PORT,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
.................... //!      #ifdef DEBUG
.................... //!         fprintf(DEBUG_PORT,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
.................... //!      #ifdef DEBUG
.................... //!         fprintf(DEBUG_PORT,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash sector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................    
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................    
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return;
.................... }
....................    
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define MAIN_PIC  0x00
.................... #define COM_PIC   0x01
.................... #define RESET_PIC 0x02
.................... #define FAB_PIC   0x03
.................... #define BOSS_PIC  0x04
.................... #define APRS_PIC  0x05
.................... #define CAM_MCU   0x06
.................... #define CHO_MCU   0x07
.................... #define NAKA_PIC  0x08
.................... #define SATO_PIC  0x09
.................... #define BHU_MCU   0x0A
.................... #define CIGS_PIC  0x0B
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 32
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 content[CONTENT_MAX];
....................     int8 size;
....................     int1 is_exist;
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x01,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, {0x00}, 0, FALSE};
*
0800:  MOVLB  10
0801:  CLRF   3C
0802:  CLRF   3D
0803:  CLRF   3E
0804:  CLRF   3F
0805:  CLRF   40
0806:  CLRF   41
0807:  CLRF   42
0808:  CLRF   43
0809:  CLRF   44
080A:  CLRF   45
080B:  CLRF   46
080C:  CLRF   47
080D:  CLRF   48
080E:  CLRF   49
080F:  CLRF   4A
0810:  CLRF   4B
0811:  CLRF   4C
0812:  CLRF   4D
0813:  CLRF   4E
0814:  CLRF   4F
0815:  CLRF   50
0816:  CLRF   51
0817:  CLRF   52
0818:  CLRF   53
0819:  CLRF   54
081A:  CLRF   55
081B:  CLRF   56
081C:  CLRF   57
081D:  CLRF   58
081E:  CLRF   59
081F:  CLRF   5A
0820:  CLRF   5B
0821:  CLRF   5C
0822:  CLRF   5D
0823:  CLRF   5E
....................    fprintf(PC, "Start make_receive_command\r\n\t-> ");
0824:  MOVLW  DC
0825:  MOVLB  03
0826:  MOVWF  11
0827:  MOVLW  01
0828:  MOVWF  12
0829:  MOVLP  00
082A:  MOVLB  00
082B:  CALL   5DA
082C:  MOVLP  08
....................    for (int8 i = 0; i < receive_signal_size; i++)
082D:  MOVLB  10
082E:  CLRF   5F
082F:  MOVF   3B,W
0830:  SUBWF  5F,W
0831:  BTFSC  03.0
0832:  GOTO   04C
....................       fprintf(PC, "%X ", receive_signal[i]);
0833:  MOVF   5F,W
0834:  ADDWF  39,W
0835:  MOVWF  04
0836:  MOVLW  00
0837:  ADDWFC 3A,W
0838:  MOVWF  05
0839:  MOVF   00,W
083A:  MOVWF  67
083B:  MOVWF  6C
083C:  MOVLW  37
083D:  MOVWF  6D
083E:  MOVLP  00
083F:  MOVLB  00
0840:  CALL   658
0841:  MOVLP  08
0842:  MOVLW  20
0843:  MOVLB  11
0844:  MOVWF  20
0845:  MOVLP  00
0846:  MOVLB  00
0847:  CALL   5B5
0848:  MOVLP  08
0849:  MOVLB  10
084A:  INCF   5F,F
084B:  GOTO   02F
....................    fprintf(PC, "\r\n");
084C:  MOVLW  0D
084D:  MOVLB  11
084E:  MOVWF  20
084F:  MOVLP  00
0850:  MOVLB  00
0851:  CALL   5B5
0852:  MOVLP  08
0853:  MOVLW  0A
0854:  MOVLB  11
0855:  MOVWF  20
0856:  MOVLP  00
0857:  MOVLB  00
0858:  CALL   5B5
0859:  MOVLP  08
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
085A:  MOVLB  10
085B:  MOVF   3A,W
085C:  MOVWF  68
085D:  MOVF   39,W
085E:  MOVWF  67
085F:  MOVF   3B,W
0860:  MOVWF  69
*
089D:  MOVF   78,W
089E:  MOVWF  60
....................    if (frame_start_position == -1)
089F:  MOVF   60,W
08A0:  SUBLW  FF
08A1:  BTFSS  03.2
08A2:  GOTO   0A8
....................       return command;
08A3:  MOVLW  3C
08A4:  MOVWF  78
08A5:  MOVLW  08
08A6:  MOVWF  79
08A7:  GOTO   230
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
08A8:  MOVF   60,W
08A9:  ADDWF  39,W
08AA:  MOVWF  61
08AB:  MOVLW  00
08AC:  ADDWFC 3A,W
08AD:  MOVWF  62
08AE:  MOVF   61,W
08AF:  MOVWF  04
08B0:  MOVF   62,W
08B1:  MOVWF  05
08B2:  ADDFSR 00,FSR0
08B3:  MOVF   00,W
08B4:  ANDLW  0F
08B5:  MOVWF  63
08B6:  MOVF   63,W
08B7:  MOVWF  67
*
08FE:  MOVF   78,W
08FF:  MOVWF  64
....................    if (content_size == -1)
0900:  MOVF   64,W
0901:  SUBLW  FF
0902:  BTFSS  03.2
0903:  GOTO   109
....................       return command;
0904:  MOVLW  3C
0905:  MOVWF  78
0906:  MOVLW  08
0907:  MOVWF  79
0908:  GOTO   230
....................       
....................    int8 receive_frame_size = receive_signal_size - frame_start_position;
0909:  MOVF   60,W
090A:  SUBWF  3B,W
090B:  MOVWF  65
....................    
....................    if (!check_crc(frame, receive_frame_size))
090C:  MOVF   62,W
090D:  MOVWF  68
090E:  MOVF   61,W
090F:  MOVWF  67
0910:  MOVF   65,W
0911:  MOVWF  69
*
0988:  MOVF   78,F
0989:  BTFSS  03.2
098A:  GOTO   190
....................       return command;
098B:  MOVLW  3C
098C:  MOVWF  78
098D:  MOVLW  08
098E:  MOVWF  79
098F:  GOTO   230
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
0990:  MOVF   61,W
0991:  MOVWF  04
0992:  MOVF   62,W
0993:  MOVWF  05
0994:  ADDFSR 00,FSR0
0995:  MOVF   00,W
0996:  ANDLW  F0
0997:  MOVWF  77
0998:  SWAPF  77,W
0999:  MOVWF  67
099A:  MOVLW  0F
099B:  ANDWF  67,F
099C:  MOVF   67,W
099D:  MOVWF  68
*
09FB:  MOVF   78,F
09FC:  BTFSS  03.2
09FD:  GOTO   203
....................       return command;
09FE:  MOVLW  3C
09FF:  MOVWF  78
0A00:  MOVLW  08
0A01:  MOVWF  79
0A02:  GOTO   230
.................... 
....................    command.frame_id = frame_id;
0A03:  MOVF   63,W
0A04:  MOVWF  3C
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0A05:  MOVLW  01
0A06:  ADDWF  61,W
0A07:  MOVWF  67
0A08:  MOVLW  00
0A09:  ADDWFC 62,W
0A0A:  MOVWF  68
0A0B:  MOVLW  02
0A0C:  SUBWF  65,W
0A0D:  MOVWF  69
0A0E:  MOVF   68,W
0A0F:  MOVWF  05
0A10:  MOVF   67,W
0A11:  MOVWF  04
0A12:  MOVF   69,W
0A13:  MOVWF  78
0A14:  BTFSC  03.2
0A15:  GOTO   21E
0A16:  MOVLW  25
0A17:  MOVWF  07
0A18:  MOVLW  1D
0A19:  MOVWF  06
0A1A:  MOVIW  [FSR0++],W
0A1B:  MOVWI  W,[FSR1++]
0A1C:  DECFSZ 78,F
0A1D:  GOTO   21A
....................    command.size = receive_frame_size-2;
0A1E:  MOVLW  02
0A1F:  SUBWF  65,W
0A20:  MOVWF  5D
....................    //fprintf(PC, "\tcommand.size: %d\r\n", command.size);
....................    command.is_exist = TRUE;
0A21:  BSF    5E.0
....................    //fprintf(PC, "\tcommand.is_exist: %X\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
0A22:  MOVLW  ED
0A23:  MOVLB  03
0A24:  MOVWF  11
0A25:  MOVLW  01
0A26:  MOVWF  12
0A27:  MOVLP  00
0A28:  MOVLB  00
0A29:  CALL   5DA
0A2A:  MOVLP  08
....................    return command;
0A2B:  MOVLW  3C
0A2C:  MOVWF  78
0A2D:  MOVLW  08
0A2E:  MOVWF  79
0A2F:  MOVLB  10
0A30:  MOVLP  08
0A31:  MOVLB  00
0A32:  GOTO   677 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
0861:  CLRF   6A
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0862:  CLRF   6A
0863:  MOVLW  01
0864:  SUBWF  69,W
0865:  SUBWF  6A,W
0866:  BTFSC  03.0
0867:  GOTO   078
....................       if(receive_signal[i] == SFD)
0868:  MOVF   6A,W
0869:  ADDWF  67,W
086A:  MOVWF  04
086B:  MOVLW  00
086C:  ADDWFC 68,W
086D:  MOVWF  05
086E:  MOVF   00,W
086F:  SUBLW  AA
0870:  BTFSS  03.2
0871:  GOTO   076
....................          return i+1;
0872:  MOVLW  01
0873:  ADDWF  6A,W
0874:  MOVWF  78
0875:  GOTO   09D
0876:  INCF   6A,F
0877:  GOTO   063
....................    if (receive_signal[i] == SFD)
0878:  MOVF   6A,W
0879:  ADDWF  67,W
087A:  MOVWF  04
087B:  MOVLW  00
087C:  ADDWFC 68,W
087D:  MOVWF  05
087E:  MOVF   00,W
087F:  SUBLW  AA
0880:  BTFSS  03.2
0881:  GOTO   090
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
0882:  MOVLW  FB
0883:  MOVLB  03
0884:  MOVWF  11
0885:  MOVLW  01
0886:  MOVWF  12
0887:  MOVLP  00
0888:  MOVLB  00
0889:  CALL   5DA
088A:  MOVLP  08
....................       return -1;
088B:  MOVLW  FF
088C:  MOVWF  78
088D:  MOVLB  10
088E:  GOTO   09D
....................    }
088F:  GOTO   09D
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
0890:  MOVLW  06
0891:  MOVLB  03
0892:  MOVWF  11
0893:  MOVLW  02
0894:  MOVWF  12
0895:  MOVLP  00
0896:  MOVLB  00
0897:  CALL   5DA
0898:  MOVLP  08
....................       return -1;
0899:  MOVLW  FF
089A:  MOVWF  78
089B:  MOVLB  10
089C:  GOTO   09D
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
08B8:  CLRF   68
08B9:  MOVF   68,W
08BA:  SUBLW  02
08BB:  BTFSS  03.0
08BC:  GOTO   0D7
....................       if (frame_id == frame_ids[i].id)
08BD:  BCF    03.0
08BE:  RLF    68,W
08BF:  ADDLW  DF
08C0:  MOVWF  04
08C1:  MOVLW  24
08C2:  MOVWF  05
08C3:  BTFSC  03.0
08C4:  INCF   05,F
08C5:  MOVF   00,W
08C6:  SUBWF  67,W
08C7:  BTFSS  03.2
08C8:  GOTO   0D5
....................          return frame_ids[i].length;
08C9:  BCF    03.0
08CA:  RLF    68,W
08CB:  ADDLW  01
08CC:  ADDLW  DF
08CD:  MOVWF  04
08CE:  MOVLW  24
08CF:  MOVWF  05
08D0:  BTFSC  03.0
08D1:  INCF   05,F
08D2:  MOVF   00,W
08D3:  MOVWF  78
08D4:  GOTO   0FE
08D5:  INCF   68,F
08D6:  GOTO   0B9
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
08D7:  MOVLW  0F
08D8:  MOVLB  03
08D9:  MOVWF  11
08DA:  MOVLW  02
08DB:  MOVWF  12
08DC:  BCF    03.0
08DD:  MOVLW  1F
08DE:  MOVLB  10
08DF:  MOVWF  6C
08E0:  MOVLP  00
08E1:  MOVLB  00
08E2:  CALL   67F
08E3:  MOVLP  08
08E4:  MOVLB  10
08E5:  MOVF   67,W
08E6:  MOVWF  6C
08E7:  MOVLW  37
08E8:  MOVWF  6D
08E9:  MOVLP  00
08EA:  MOVLB  00
08EB:  CALL   658
08EC:  MOVLP  08
08ED:  MOVLW  0D
08EE:  MOVLB  11
08EF:  MOVWF  20
08F0:  MOVLP  00
08F1:  MOVLB  00
08F2:  CALL   5B5
08F3:  MOVLP  08
08F4:  MOVLW  0A
08F5:  MOVLB  11
08F6:  MOVWF  20
08F7:  MOVLP  00
08F8:  MOVLB  00
08F9:  CALL   5B5
08FA:  MOVLP  08
....................    return -1;
08FB:  MOVLW  FF
08FC:  MOVWF  78
08FD:  MOVLB  10
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
0912:  MOVLW  01
0913:  SUBWF  69,W
0914:  ADDWF  67,W
0915:  MOVWF  04
0916:  MOVLW  00
0917:  ADDWFC 68,W
0918:  MOVWF  05
0919:  MOVF   00,W
091A:  MOVWF  6A
091B:  MOVLW  01
091C:  SUBWF  69,W
091D:  MOVWF  6C
091E:  MOVF   68,W
091F:  MOVWF  6E
0920:  MOVF   67,W
0921:  MOVWF  6D
0922:  MOVF   6C,W
0923:  MOVWF  6F
0924:  MOVLP  00
0925:  MOVLB  00
0926:  CALL   6D9
0927:  MOVLP  08
0928:  MOVF   78,W
0929:  MOVLB  10
092A:  MOVWF  6B
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
092B:  MOVF   6B,W
092C:  SUBWF  6A,W
092D:  BTFSS  03.2
092E:  GOTO   133
....................       return TRUE;
092F:  MOVLW  01
0930:  MOVWF  78
0931:  GOTO   188
0932:  GOTO   188
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
0933:  MOVLW  21
0934:  MOVLB  03
0935:  MOVWF  11
0936:  MOVLW  02
0937:  MOVWF  12
0938:  MOVLP  00
0939:  MOVLB  00
093A:  CALL   5DA
093B:  MOVLP  08
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
093C:  MOVLW  2A
093D:  MOVLB  03
093E:  MOVWF  11
093F:  MOVLW  02
0940:  MOVWF  12
0941:  BCF    03.0
0942:  MOVLW  13
0943:  MOVLB  10
0944:  MOVWF  6C
0945:  MOVLP  00
0946:  MOVLB  00
0947:  CALL   67F
0948:  MOVLP  08
0949:  MOVLB  10
094A:  MOVF   6A,W
094B:  MOVWF  6C
094C:  MOVLW  37
094D:  MOVWF  6D
094E:  MOVLP  00
094F:  MOVLB  00
0950:  CALL   658
0951:  MOVLP  08
0952:  MOVLW  0D
0953:  MOVLB  11
0954:  MOVWF  20
0955:  MOVLP  00
0956:  MOVLB  00
0957:  CALL   5B5
0958:  MOVLP  08
0959:  MOVLW  0A
095A:  MOVLB  11
095B:  MOVWF  20
095C:  MOVLP  00
095D:  MOVLB  00
095E:  CALL   5B5
095F:  MOVLP  08
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
0960:  MOVLW  36
0961:  MOVLB  03
0962:  MOVWF  11
0963:  MOVLW  02
0964:  MOVWF  12
0965:  BCF    03.0
0966:  MOVLW  13
0967:  MOVLB  10
0968:  MOVWF  6C
0969:  MOVLP  00
096A:  MOVLB  00
096B:  CALL   67F
096C:  MOVLP  08
096D:  MOVLB  10
096E:  MOVF   6B,W
096F:  MOVWF  6C
0970:  MOVLW  37
0971:  MOVWF  6D
0972:  MOVLP  00
0973:  MOVLB  00
0974:  CALL   658
0975:  MOVLP  08
0976:  MOVLW  0D
0977:  MOVLB  11
0978:  MOVWF  20
0979:  MOVLP  00
097A:  MOVLB  00
097B:  CALL   5B5
097C:  MOVLP  08
097D:  MOVLW  0A
097E:  MOVLB  11
097F:  MOVWF  20
0980:  MOVLP  00
0981:  MOVLB  00
0982:  CALL   5B5
0983:  MOVLP  08
....................       return FALSE;
0984:  MOVLW  00
0985:  MOVWF  78
0986:  MOVLB  10
0987:  GOTO   188
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
099E:  MOVF   68,W
099F:  SUBLW  0B
09A0:  BTFSS  03.2
09A1:  GOTO   1A6
....................       return TRUE;
09A2:  MOVLW  01
09A3:  MOVWF  78
09A4:  GOTO   1FB
09A5:  GOTO   1FB
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
09A6:  MOVLW  42
09A7:  MOVLB  03
09A8:  MOVWF  11
09A9:  MOVLW  02
09AA:  MOVWF  12
09AB:  MOVLP  00
09AC:  MOVLB  00
09AD:  CALL   5DA
09AE:  MOVLP  08
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
09AF:  MOVLW  53
09B0:  MOVLB  03
09B1:  MOVWF  11
09B2:  MOVLW  02
09B3:  MOVWF  12
09B4:  BCF    03.0
09B5:  MOVLW  13
09B6:  MOVLB  10
09B7:  MOVWF  6C
09B8:  MOVLP  00
09B9:  MOVLB  00
09BA:  CALL   67F
09BB:  MOVLP  08
09BC:  MOVLB  10
09BD:  MOVF   68,W
09BE:  MOVWF  6C
09BF:  MOVLW  37
09C0:  MOVWF  6D
09C1:  MOVLP  00
09C2:  MOVLB  00
09C3:  CALL   658
09C4:  MOVLP  08
09C5:  MOVLW  0D
09C6:  MOVLB  11
09C7:  MOVWF  20
09C8:  MOVLP  00
09C9:  MOVLB  00
09CA:  CALL   5B5
09CB:  MOVLP  08
09CC:  MOVLW  0A
09CD:  MOVLB  11
09CE:  MOVWF  20
09CF:  MOVLP  00
09D0:  MOVLB  00
09D1:  CALL   5B5
09D2:  MOVLP  08
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
09D3:  MOVLW  5F
09D4:  MOVLB  03
09D5:  MOVWF  11
09D6:  MOVLW  02
09D7:  MOVWF  12
09D8:  BCF    03.0
09D9:  MOVLW  13
09DA:  MOVLB  10
09DB:  MOVWF  6C
09DC:  MOVLP  00
09DD:  MOVLB  00
09DE:  CALL   67F
09DF:  MOVLP  08
09E0:  MOVLW  0B
09E1:  MOVLB  10
09E2:  MOVWF  6C
09E3:  MOVLW  37
09E4:  MOVWF  6D
09E5:  MOVLP  00
09E6:  MOVLB  00
09E7:  CALL   658
09E8:  MOVLP  08
09E9:  MOVLW  0D
09EA:  MOVLB  11
09EB:  MOVWF  20
09EC:  MOVLP  00
09ED:  MOVLB  00
09EE:  CALL   5B5
09EF:  MOVLP  08
09F0:  MOVLW  0A
09F1:  MOVLB  11
09F2:  MOVWF  20
09F3:  MOVLP  00
09F4:  MOVLB  00
09F5:  CALL   5B5
09F6:  MOVLP  08
....................       return FALSE;  
09F7:  MOVLW  00
09F8:  MOVWF  78
09F9:  MOVLB  10
09FA:  GOTO   1FB
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0A33:  MOVLW  AA
0A34:  MOVLB  10
0A35:  MOVWF  3C
....................    data[1] = (BOSS_PIC << 4) | frame_id;
0A36:  MOVF   38,W
0A37:  IORLW  40
0A38:  MOVWF  3D
....................    memcpy(&data[2], content, size);
0A39:  MOVF   3A,W
0A3A:  MOVWF  05
0A3B:  MOVF   39,W
0A3C:  MOVWF  04
0A3D:  MOVF   3B,W
0A3E:  MOVWF  78
0A3F:  BTFSC  03.2
0A40:  GOTO   249
0A41:  MOVLW  25
0A42:  MOVWF  07
0A43:  MOVLW  1E
0A44:  MOVWF  06
0A45:  MOVIW  [FSR0++],W
0A46:  MOVWI  W,[FSR1++]
0A47:  DECFSZ 78,F
0A48:  GOTO   245
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0A49:  MOVLW  02
0A4A:  ADDWF  3B,W
0A4B:  MOVWF  4C
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
0A4C:  MOVLW  1C
0A4D:  ADDWF  4C,W
0A4E:  MOVWF  4F
0A4F:  MOVLW  25
0A50:  MOVWF  50
0A51:  BTFSC  03.0
0A52:  INCF   50,F
0A53:  MOVLW  01
0A54:  SUBWF  4C,W
0A55:  MOVWF  51
0A56:  MOVLW  25
0A57:  MOVWF  6E
0A58:  MOVLW  1D
0A59:  MOVWF  6D
0A5A:  MOVF   51,W
0A5B:  MOVWF  6F
0A5C:  MOVLP  00
0A5D:  MOVLB  00
0A5E:  CALL   6D9
0A5F:  MOVLP  08
0A60:  MOVLB  10
0A61:  MOVF   50,W
0A62:  MOVWF  05
0A63:  MOVF   4F,W
0A64:  MOVWF  04
0A65:  MOVF   78,W
0A66:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0A67:  MOVLW  01
0A68:  ADDWF  4C,W
0A69:  MOVWF  4D
....................    
....................    transmit(data, data_size);
0A6A:  MOVLW  25
0A6B:  MOVWF  50
0A6C:  MOVLW  1C
0A6D:  MOVWF  4F
0A6E:  MOVF   4D,W
0A6F:  MOVWF  51
*
0ABC:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0A70:  CLRF   52
0A71:  MOVF   51,W
0A72:  SUBWF  52,W
0A73:  BTFSC  03.0
0A74:  GOTO   286
....................       fputc(data[i], BOSS);
0A75:  MOVF   52,W
0A76:  ADDWF  4F,W
0A77:  MOVWF  04
0A78:  MOVLW  00
0A79:  ADDWFC 50,W
0A7A:  MOVWF  05
0A7B:  MOVF   00,W
0A7C:  MOVWF  54
0A7D:  MOVF   54,W
*
0A83:  MOVLB  10
0A84:  INCF   52,F
0A85:  GOTO   271
....................       
....................    fprintf(PC, "Transit command\r\n\t-> ");
0A86:  MOVLW  6B
0A87:  MOVLB  03
0A88:  MOVWF  11
0A89:  MOVLW  02
0A8A:  MOVWF  12
0A8B:  MOVLP  00
0A8C:  MOVLB  00
0A8D:  CALL   5DA
0A8E:  MOVLP  08
....................    for(int i = 0; i < data_size; i++)
0A8F:  MOVLB  10
0A90:  CLRF   53
0A91:  MOVF   51,W
0A92:  SUBWF  53,W
0A93:  BTFSC  03.0
0A94:  GOTO   2AE
....................       fprintf(PC, "%X ", data[i]);
0A95:  MOVF   53,W
0A96:  ADDWF  4F,W
0A97:  MOVWF  04
0A98:  MOVLW  00
0A99:  ADDWFC 50,W
0A9A:  MOVWF  05
0A9B:  MOVF   00,W
0A9C:  MOVWF  54
0A9D:  MOVWF  6C
0A9E:  MOVLW  37
0A9F:  MOVWF  6D
0AA0:  MOVLP  00
0AA1:  MOVLB  00
0AA2:  CALL   658
0AA3:  MOVLP  08
0AA4:  MOVLW  20
0AA5:  MOVLB  11
0AA6:  MOVWF  20
0AA7:  MOVLP  00
0AA8:  MOVLB  00
0AA9:  CALL   5B5
0AAA:  MOVLP  08
0AAB:  MOVLB  10
0AAC:  INCF   53,F
0AAD:  GOTO   291
....................    fprintf(PC, "\r\n");
0AAE:  MOVLW  0D
0AAF:  MOVLB  11
0AB0:  MOVWF  20
0AB1:  MOVLP  00
0AB2:  MOVLB  00
0AB3:  CALL   5B5
0AB4:  MOVLP  08
0AB5:  MOVLW  0A
0AB6:  MOVLB  11
0AB7:  MOVWF  20
0AB8:  MOVLP  00
0AB9:  MOVLB  00
0ABA:  CALL   5B5
0ABB:  MOVLP  08
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
06D9:  MOVLB  10
06DA:  MOVF   6D,W
06DB:  MOVWF  04
06DC:  MOVF   6E,W
06DD:  MOVWF  05
06DE:  MOVIW  [FSR0+00],W
06DF:  MOVLB  11
06E0:  MOVWF  20
06E1:  MOVLW  01
06E2:  MOVWF  21
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
06E3:  MOVLB  10
06E4:  MOVF   6F,W
06E5:  MOVLB  11
06E6:  SUBWF  21,W
06E7:  BTFSC  03.0
06E8:  GOTO   6F5
....................       crc ^= frame[i++];
06E9:  MOVF   21,W
06EA:  INCF   21,F
06EB:  MOVLB  10
06EC:  ADDWF  6D,W
06ED:  MOVWF  04
06EE:  MOVLW  00
06EF:  ADDWFC 6E,W
06F0:  MOVWF  05
06F1:  MOVF   00,W
06F2:  MOVLB  11
06F3:  XORWF  20,F
06F4:  GOTO   6E3
....................    return crc;
06F5:  MOVF   20,W
06F6:  MOVWF  78
06F7:  MOVLB  00
06F8:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack();
.................... 
.................... void transmit_status();
.................... 
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    volatile Command command = make_receive_command(receive_signal, receive_signal_size);
....................    //fprintf(PC, "--Communication drier--\r\n");
....................    //fprintf(PC, "command.size: %d\r\n", command.size);
....................    //fprintf(PC, "command.frame_id: %X\r\n", command.frame_id);
....................    //fprintf(PC, "command.content: ");
....................    for (int8 i = 0; i < command.size; i++)
....................       //fprintf(PC, "%X ", command.content[i]);
....................    //fprintf(PC, "\r\n");
....................    //fprintf(PC, "command.is_exist: %X\r\n", command.is_exist);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0796:  MOVLW  0F
0797:  MOVLB  10
0798:  MOVWF  38
0799:  CLRF   3A
079A:  CLRF   39
079B:  CLRF   3B
079C:  MOVLP  08
079D:  MOVLB  00
079E:  CALL   233
079F:  MOVLP  00
07A0:  RETURN
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 1);
*
118D:  MOVLW  01
118E:  MOVLB  10
118F:  MOVWF  38
1190:  MOVLW  20
1191:  MOVWF  3A
1192:  MOVLW  0B
1193:  MOVWF  39
1194:  MOVLW  01
1195:  MOVWF  3B
1196:  MOVLP  08
1197:  MOVLB  00
1198:  CALL   233
1199:  MOVLP  10
.................... }
.................... 
.................... // EOF
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... 
.................... // _____________ define _______________
.................... 
.................... #define EXECUTED_MISSION_SIZE 8
.................... 
.................... 
.................... // _____________ typedef ________________
.................... 
.................... typedef struct {
....................    unsigned int8 executed_mission[EXECUTED_MISSION_SIZE];
....................    int8 executed_mission_count;
.................... } ExecutedMission;
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Value management using the Singleton pattern
.................... ExecutedMission get_executed_mission();
.................... 
.................... int1 is_executed_mission(unsigned int8 command_id);
.................... 
.................... void add_executed_mission(unsigned int8 command_id);
.................... 
.................... // Use in missions you want to execute consecutively
.................... void executed_mission_pop(void);
.................... 
.................... 
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // MIS MCU will be up and running duration_second seconds after mission completion
.................... void continue_mis_mcu(int16 duration_second);
.................... 
.................... 
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... 
.................... #include "./src/mission_tools.c"
.................... ExecutedMission get_executed_mission()
.................... {
....................    static ExecutedMission executed_mission = {0};
....................    return executed_mission;
*
07A1:  MOVLW  D5
07A2:  MOVWF  78
07A3:  MOVLW  07
07A4:  MOVWF  79
07A5:  RETURN
.................... }
.................... 
.................... int1 is_executed_mission(unsigned int8 command_id)
*
1058:  MOVLP  00
1059:  MOVLB  00
105A:  CALL   7A1
105B:  MOVLP  10
105C:  MOVF   79,W
105D:  MOVWF  7A
105E:  MOVF   78,W
105F:  MOVWF  04
1060:  MOVF   7A,W
1061:  MOVWF  05
1062:  MOVLW  09
1063:  MOVWF  78
1064:  MOVLW  25
1065:  MOVWF  07
1066:  MOVLW  20
1067:  MOVWF  06
1068:  MOVIW  [FSR0++],W
1069:  MOVWI  W,[FSR1++]
106A:  DECFSZ 78,F
106B:  GOTO   068
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    
....................    for (int i = 0; i < executed_mission.executed_mission_count; i++)
106C:  MOVLB  10
106D:  CLRF   49
106E:  MOVF   48,W
106F:  SUBWF  49,W
1070:  BTFSC  03.0
1071:  GOTO   082
....................       if (command_id == executed_mission.executed_mission[i])
1072:  MOVLW  20
1073:  ADDWF  49,W
1074:  MOVWF  04
1075:  MOVLW  25
1076:  MOVWF  05
1077:  BTFSC  03.0
1078:  INCF   05,F
1079:  MOVF   00,W
107A:  SUBWF  3F,W
107B:  BTFSS  03.2
107C:  GOTO   080
....................          return TRUE;
107D:  MOVLW  01
107E:  MOVWF  78
107F:  GOTO   084
1080:  INCF   49,F
1081:  GOTO   06E
....................       
....................    return FALSE;
1082:  MOVLW  00
1083:  MOVWF  78
.................... }
.................... 
.................... void add_executed_mission(unsigned int8 command_id)
*
10AF:  MOVLP  00
10B0:  MOVLB  00
10B1:  CALL   7A1
10B2:  MOVLP  10
10B3:  MOVF   79,W
10B4:  MOVWF  7A
10B5:  MOVF   78,W
10B6:  MOVWF  04
10B7:  MOVF   7A,W
10B8:  MOVWF  05
10B9:  MOVLW  09
10BA:  MOVWF  78
10BB:  MOVLW  25
10BC:  MOVWF  07
10BD:  MOVLW  20
10BE:  MOVWF  06
10BF:  MOVIW  [FSR0++],W
10C0:  MOVWI  W,[FSR1++]
10C1:  DECFSZ 78,F
10C2:  GOTO   0BF
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    
....................    if (executed_mission.executed_mission_count != EXECUTED_MISSION_SIZE)
10C3:  MOVLB  10
10C4:  MOVF   48,W
10C5:  SUBLW  08
10C6:  BTFSC  03.2
10C7:  GOTO   0D3
....................       executed_mission.executed_mission[executed_mission.executed_mission_count++] = command_id;
10C8:  MOVF   48,W
10C9:  INCF   48,F
10CA:  ADDLW  20
10CB:  MOVWF  04
10CC:  MOVLW  25
10CD:  MOVWF  05
10CE:  BTFSC  03.0
10CF:  INCF   05,F
10D0:  MOVF   3F,W
10D1:  MOVWF  00
10D2:  GOTO   0DD
....................    else
....................       fprintf(PC, "!!!overflow executed_mission list\r\n");
10D3:  MOVLW  76
10D4:  MOVLB  03
10D5:  MOVWF  11
10D6:  MOVLW  02
10D7:  MOVWF  12
10D8:  MOVLP  00
10D9:  MOVLB  00
10DA:  CALL   5DA
10DB:  MOVLP  10
10DC:  MOVLB  10
.................... }
.................... 
.................... 
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status = EXECUTING_MISSION;
.................... }
.................... 
.................... void executed_mission_pop(void)
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    executed_mission.executed_mission[executed_mission.executed_mission_count--] = 0x00;
.................... }
.................... 
.................... void continue_mis_mcu(int16 duration_second)
.................... {  
....................    duration_sec = duration_second + sec;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
0D72:  MOVLW  0B
0D73:  MOVLB  03
0D74:  MOVWF  11
0D75:  MOVLW  03
0D76:  MOVWF  12
0D77:  MOVLP  00
0D78:  MOVLB  00
0D79:  CALL   5DA
0D7A:  MOVLP  08
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
0D7B:  MOVLB  10
0D7C:  MOVF   3F,W
0D7D:  MOVWF  04
0D7E:  MOVF   40,W
0D7F:  MOVWF  05
0D80:  MOVIW  [FSR0+00],W
0D81:  MOVWF  41
....................    
....................    initialize_sweep();
....................    sweep(sweep_step);
*
0DA3:  MOVLB  10
0DA4:  MOVF   41,W
0DA5:  MOVWF  42
0DA6:  MOVLB  00
0DA7:  GOTO   2BD
0DA8:  MOVLP  10
0DA9:  GOTO   127 (RETURN)
....................    //copy_data();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all()
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase All\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector()
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_copy_1sector()
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_PIC_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "./lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack();
.................... 
.................... void transmit_status();
.................... 
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... // Copy to SMF
.................... #include "./lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "./src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... void copy_data();
.................... 
.................... 
.................... #include "./src/data_copy.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "./src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void copy_data()
.................... {   
....................    while (!is_empty_smf_data())
*
11DC:  MOVLP  00
11DD:  CALL   7CD
11DE:  MOVLP  10
11DF:  MOVF   78,F
11E0:  BTFSS  03.2
11E1:  GOTO   379
....................    {
....................       SmfDataStruct *smf_data = dequeue_smf_data();
*
1211:  MOVF   79,W
1212:  MOVLB  10
1213:  MOVWF  38
1214:  MOVF   78,W
1215:  MOVWF  37
....................       fprintf(PC, "Destination address: \t0x%08LX\r\n", smf_data->dest);
1216:  MOVF   37,W
1217:  MOVWF  04
1218:  MOVF   38,W
1219:  MOVWF  05
121A:  ADDFSR 04,FSR0
121B:  MOVF   00,W
121C:  MOVWF  3C
121D:  ADDFSR 01,FSR0
121E:  MOVF   00,W
121F:  MOVWF  3D
1220:  ADDFSR 01,FSR0
1221:  MOVF   00,W
1222:  MOVWF  3E
1223:  ADDFSR 01,FSR0
1224:  MOVF   00,W
1225:  MOVWF  3F
1226:  ADDFSR 3D,FSR0
1227:  MOVLW  A9
1228:  MOVLB  03
1229:  MOVWF  11
122A:  MOVLW  03
122B:  MOVWF  12
122C:  BCF    03.0
122D:  MOVLW  18
122E:  MOVLB  10
122F:  MOVWF  6C
1230:  MOVLP  00
1231:  MOVLB  00
1232:  CALL   67F
1233:  MOVLP  10
1234:  MOVLB  10
1235:  MOVF   3F,W
1236:  MOVWF  6C
1237:  MOVLW  37
1238:  MOVWF  6D
1239:  MOVLP  00
123A:  MOVLB  00
123B:  CALL   658
123C:  MOVLP  10
123D:  MOVLB  10
123E:  MOVF   3E,W
123F:  MOVWF  6C
1240:  MOVLW  37
1241:  MOVWF  6D
1242:  MOVLP  00
1243:  MOVLB  00
1244:  CALL   658
1245:  MOVLP  10
1246:  MOVLB  10
1247:  MOVF   3D,W
1248:  MOVWF  6C
1249:  MOVLW  37
124A:  MOVWF  6D
124B:  MOVLP  00
124C:  MOVLB  00
124D:  CALL   658
124E:  MOVLP  10
124F:  MOVLB  10
1250:  MOVF   3C,W
1251:  MOVWF  6C
1252:  MOVLW  37
1253:  MOVWF  6D
1254:  MOVLP  00
1255:  MOVLB  00
1256:  CALL   658
1257:  MOVLP  10
1258:  MOVLW  0D
1259:  MOVLB  11
125A:  MOVWF  20
125B:  MOVLP  00
125C:  MOVLB  00
125D:  CALL   5B5
125E:  MOVLP  10
125F:  MOVLW  0A
1260:  MOVLB  11
1261:  MOVWF  20
1262:  MOVLP  00
1263:  MOVLB  00
1264:  CALL   5B5
1265:  MOVLP  10
....................       fprintf(PC, "Source address: \t0x%08LX\r\n", smf_data->src);
1266:  MOVLB  10
1267:  MOVF   37,W
1268:  MOVWF  04
1269:  MOVF   38,W
126A:  MOVWF  05
126B:  ADDFSR 00,FSR0
126C:  MOVF   00,W
126D:  MOVWF  3C
126E:  ADDFSR 01,FSR0
126F:  MOVF   00,W
1270:  MOVWF  3D
1271:  ADDFSR 01,FSR0
1272:  MOVF   00,W
1273:  MOVWF  3E
1274:  ADDFSR 01,FSR0
1275:  MOVF   00,W
1276:  MOVWF  3F
1277:  ADDFSR 3D,FSR0
1278:  MOVLW  B9
1279:  MOVLB  03
127A:  MOVWF  11
127B:  MOVLW  03
127C:  MOVWF  12
127D:  BCF    03.0
127E:  MOVLW  13
127F:  MOVLB  10
1280:  MOVWF  6C
1281:  MOVLP  00
1282:  MOVLB  00
1283:  CALL   67F
1284:  MOVLP  10
1285:  MOVLB  10
1286:  MOVF   3F,W
1287:  MOVWF  6C
1288:  MOVLW  37
1289:  MOVWF  6D
128A:  MOVLP  00
128B:  MOVLB  00
128C:  CALL   658
128D:  MOVLP  10
128E:  MOVLB  10
128F:  MOVF   3E,W
1290:  MOVWF  6C
1291:  MOVLW  37
1292:  MOVWF  6D
1293:  MOVLP  00
1294:  MOVLB  00
1295:  CALL   658
1296:  MOVLP  10
1297:  MOVLB  10
1298:  MOVF   3D,W
1299:  MOVWF  6C
129A:  MOVLW  37
129B:  MOVWF  6D
129C:  MOVLP  00
129D:  MOVLB  00
129E:  CALL   658
129F:  MOVLP  10
12A0:  MOVLB  10
12A1:  MOVF   3C,W
12A2:  MOVWF  6C
12A3:  MOVLW  37
12A4:  MOVWF  6D
12A5:  MOVLP  00
12A6:  MOVLB  00
12A7:  CALL   658
12A8:  MOVLP  10
12A9:  MOVLW  0D
12AA:  MOVLB  11
12AB:  MOVWF  20
12AC:  MOVLP  00
12AD:  MOVLB  00
12AE:  CALL   5B5
12AF:  MOVLP  10
12B0:  MOVLW  0A
12B1:  MOVLB  11
12B2:  MOVWF  20
12B3:  MOVLP  00
12B4:  MOVLB  00
12B5:  CALL   5B5
12B6:  MOVLP  10
....................       fprintf(PC, "Data size: \t\t  %08LX\r\n", smf_data->size);
12B7:  MOVLB  10
12B8:  MOVF   37,W
12B9:  MOVWF  04
12BA:  MOVF   38,W
12BB:  MOVWF  05
12BC:  ADDFSR 08,FSR0
12BD:  MOVF   00,W
12BE:  MOVWF  3C
12BF:  ADDFSR 01,FSR0
12C0:  MOVF   00,W
12C1:  MOVWF  3D
12C2:  ADDFSR 01,FSR0
12C3:  MOVF   00,W
12C4:  MOVWF  3E
12C5:  ADDFSR 01,FSR0
12C6:  MOVF   00,W
12C7:  MOVWF  3F
12C8:  ADDFSR 3D,FSR0
12C9:  MOVLW  C7
12CA:  MOVLB  03
12CB:  MOVWF  11
12CC:  MOVLW  03
12CD:  MOVWF  12
12CE:  BCF    03.0
12CF:  MOVLW  0F
12D0:  MOVLB  10
12D1:  MOVWF  6C
12D2:  MOVLP  00
12D3:  MOVLB  00
12D4:  CALL   67F
12D5:  MOVLP  10
12D6:  MOVLB  10
12D7:  MOVF   3F,W
12D8:  MOVWF  6C
12D9:  MOVLW  37
12DA:  MOVWF  6D
12DB:  MOVLP  00
12DC:  MOVLB  00
12DD:  CALL   658
12DE:  MOVLP  10
12DF:  MOVLB  10
12E0:  MOVF   3E,W
12E1:  MOVWF  6C
12E2:  MOVLW  37
12E3:  MOVWF  6D
12E4:  MOVLP  00
12E5:  MOVLB  00
12E6:  CALL   658
12E7:  MOVLP  10
12E8:  MOVLB  10
12E9:  MOVF   3D,W
12EA:  MOVWF  6C
12EB:  MOVLW  37
12EC:  MOVWF  6D
12ED:  MOVLP  00
12EE:  MOVLB  00
12EF:  CALL   658
12F0:  MOVLP  10
12F1:  MOVLB  10
12F2:  MOVF   3C,W
12F3:  MOVWF  6C
12F4:  MOVLW  37
12F5:  MOVWF  6D
12F6:  MOVLP  00
12F7:  MOVLB  00
12F8:  CALL   658
12F9:  MOVLP  10
12FA:  MOVLW  0D
12FB:  MOVLB  11
12FC:  MOVWF  20
12FD:  MOVLP  00
12FE:  MOVLB  00
12FF:  CALL   5B5
1300:  MOVLP  10
1301:  MOVLW  0A
1302:  MOVLB  11
1303:  MOVWF  20
1304:  MOVLP  00
1305:  MOVLB  00
1306:  CALL   5B5
1307:  MOVLP  10
....................       fprintf(PC, "Copying.");
1308:  MOVLW  D3
1309:  MOVLB  03
130A:  MOVWF  11
130B:  MOVLW  03
130C:  MOVWF  12
130D:  MOVLP  00
130E:  MOVLB  00
130F:  CALL   5DA
1310:  MOVLP  10
....................       delay_ms(1000);
1311:  MOVLW  04
1312:  MOVLB  10
1313:  MOVWF  3C
1314:  MOVLW  FA
1315:  MOVWF  3D
1316:  MOVLP  00
1317:  MOVLB  00
1318:  CALL   7D8
1319:  MOVLP  10
131A:  MOVLB  10
131B:  DECFSZ 3C,F
131C:  GOTO   314
....................       fprintf(PC, ".");
131D:  MOVLW  2E
131E:  MOVLB  11
131F:  MOVWF  20
1320:  MOVLP  00
1321:  MOVLB  00
1322:  CALL   5B5
1323:  MOVLP  10
....................       delay_ms(1000);
1324:  MOVLW  04
1325:  MOVLB  10
1326:  MOVWF  3C
1327:  MOVLW  FA
1328:  MOVWF  3D
1329:  MOVLP  00
132A:  MOVLB  00
132B:  CALL   7D8
132C:  MOVLP  10
132D:  MOVLB  10
132E:  DECFSZ 3C,F
132F:  GOTO   327
....................       fprintf(PC, ".");
1330:  MOVLW  2E
1331:  MOVLB  11
1332:  MOVWF  20
1333:  MOVLP  00
1334:  MOVLB  00
1335:  CALL   5B5
1336:  MOVLP  10
....................       delay_ms(1000);
1337:  MOVLW  04
1338:  MOVLB  10
1339:  MOVWF  3C
133A:  MOVLW  FA
133B:  MOVWF  3D
133C:  MOVLP  00
133D:  MOVLB  00
133E:  CALL   7D8
133F:  MOVLP  10
1340:  MOVLB  10
1341:  DECFSZ 3C,F
1342:  GOTO   33A
....................       fprintf(PC, ".");   
1343:  MOVLW  2E
1344:  MOVLB  11
1345:  MOVWF  20
1346:  MOVLP  00
1347:  MOVLB  00
1348:  CALL   5B5
1349:  MOVLP  10
....................       delay_ms(1000);
134A:  MOVLW  04
134B:  MOVLB  10
134C:  MOVWF  3C
134D:  MOVLW  FA
134E:  MOVWF  3D
134F:  MOVLP  00
1350:  MOVLB  00
1351:  CALL   7D8
1352:  MOVLP  10
1353:  MOVLB  10
1354:  DECFSZ 3C,F
1355:  GOTO   34D
....................       fprintf(PC, ".\r\n");   
1356:  MOVLW  2E
1357:  MOVLB  11
1358:  MOVWF  20
1359:  MOVLP  00
135A:  MOVLB  00
135B:  CALL   5B5
135C:  MOVLP  10
135D:  MOVLW  0D
135E:  MOVLB  11
135F:  MOVWF  20
1360:  MOVLP  00
1361:  MOVLB  00
1362:  CALL   5B5
1363:  MOVLP  10
1364:  MOVLW  0A
1365:  MOVLB  11
1366:  MOVWF  20
1367:  MOVLP  00
1368:  MOVLB  00
1369:  CALL   5B5
136A:  MOVLP  10
....................       delay_ms(1000);
136B:  MOVLW  04
136C:  MOVLB  10
136D:  MOVWF  3C
136E:  MOVLW  FA
136F:  MOVWF  3D
1370:  MOVLP  00
1371:  MOVLB  00
1372:  CALL   7D8
1373:  MOVLP  10
1374:  MOVLB  10
1375:  DECFSZ 3C,F
1376:  GOTO   36E
1377:  MOVLB  00
1378:  GOTO   1DC
....................    }
....................    fprintf(PC, "_________End copy_data_________\r\n______________________________\r\n\r\n");
1379:  MOVLW  D8
137A:  MOVLB  03
137B:  MOVWF  11
137C:  MOVLW  03
137D:  MOVWF  12
137E:  MOVLP  00
137F:  MOVLB  00
1380:  CALL   5DA
1381:  MOVLP  10
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_pic_excute_mission.h"
.................... #ifndef MMJ_CIGS_PIC_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_PIC_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... #define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... int1 handle_uplink_command(Command *command);
.................... int1 handle_status_check(Command *command);
.................... int1 handle_smf_available(Command *command);
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... #include "../mmj_cigs_pic_excute_mission.c"
.................... #include "mmj_cigs_pic_mode.h"
.................... #ifndef MMJ_CIGS_PIC_MODE_H
.................... #define MMJ_CIGS_PIC_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "../mmj_cigs_pic_mode.c"
.................... 
.................... #endif // MMJ_CIGS_PIC_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
1000:  MOVLW  FA
1001:  MOVLB  03
1002:  MOVWF  11
1003:  MOVLW  03
1004:  MOVWF  12
1005:  MOVLP  00
1006:  MOVLB  00
1007:  CALL   5DA
1008:  MOVLP  10
.................... 
....................    switch (command->frame_id)
1009:  MOVLB  10
100A:  MOVF   33,W
100B:  MOVWF  04
100C:  MOVF   34,W
100D:  MOVWF  05
100E:  ADDFSR 00,FSR0
100F:  MOVF   00,W
1010:  XORLW  00
1011:  MOVLB  00
1012:  BTFSC  03.2
1013:  GOTO   01B
1014:  XORLW  01
1015:  BTFSC  03.2
1016:  GOTO   152
1017:  XORLW  03
1018:  BTFSC  03.2
1019:  GOTO   1AE
101A:  GOTO   393
....................    {
....................       case UPLINK_COMMAND:
....................          return handle_uplink_command(command);
101B:  MOVLB  10
101C:  MOVF   34,W
101D:  MOVWF  36
101E:  MOVF   33,W
101F:  MOVWF  35
*
1150:  MOVF   78,W
1151:  GOTO   395
....................       
....................       case STATUS_CHECK:
....................          return handle_status_check(command);
1152:  MOVLB  10
1153:  MOVF   34,W
1154:  MOVWF  36
1155:  MOVF   33,W
1156:  MOVWF  35
*
11AC:  MOVF   78,W
11AD:  GOTO   395
....................       
....................       case IS_SMF_AVAILABLE:
....................          return handle_smf_available(command);
11AE:  MOVLB  10
11AF:  MOVF   34,W
11B0:  MOVWF  36
11B1:  MOVF   33,W
11B2:  MOVWF  35
*
1391:  MOVF   78,W
1392:  GOTO   395
....................    }
.................... 
....................    return FALSE;
1393:  MOVLW  00
1394:  MOVWF  78
1395:  MOVLP  08
1396:  GOTO   719 (RETURN)
.................... }
.................... 
.................... 
.................... // ___________ command execution ___________
.................... int1 handle_uplink_command(Command *command)
.................... {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
1020:  MOVLW  06
1021:  MOVLB  03
1022:  MOVWF  11
1023:  MOVLW  04
1024:  MOVWF  12
1025:  MOVLP  00
1026:  MOVLB  00
1027:  CALL   5DA
1028:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknowledge\r\n");
1029:  MOVLW  11
102A:  MOVLB  03
102B:  MOVWF  11
102C:  MOVLW  04
102D:  MOVWF  12
102E:  MOVLP  00
102F:  MOVLB  00
1030:  CALL   5DA
1031:  MOVLP  10
....................    transmit_ack();
1032:  MOVLP  00
1033:  CALL   796
1034:  MOVLP  10
.................... 
....................    status = EXECUTING_MISSION;
1035:  MOVLW  02
1036:  MOVWF  2B
....................    execute_mission(command->content);
1037:  MOVLW  01
1038:  MOVLB  10
1039:  ADDWF  35,W
103A:  MOVWF  78
103B:  MOVLW  00
103C:  ADDWFC 36,W
103D:  MOVWF  7A
103E:  MOVF   78,W
103F:  MOVWF  38
1040:  MOVF   7A,W
1041:  MOVWF  39
1042:  MOVF   39,W
1043:  MOVWF  3B
1044:  MOVF   38,W
1045:  MOVWF  3A
.................... 
....................    if (is_empty_smf_data())
*
1130:  MOVLP  00
1131:  CALL   7CD
1132:  MOVLP  10
1133:  MOVF   78,F
1134:  BTFSC  03.2
1135:  GOTO   14C
....................    {
....................       if (duration_sec < sec)
1136:  MOVF   33,F
1137:  BTFSS  03.2
1138:  GOTO   146
1139:  MOVF   32,F
113A:  BTFSS  03.2
113B:  GOTO   146
113C:  MOVF   29,W
113D:  SUBWF  31,W
113E:  BTFSS  03.0
113F:  GOTO   149
1140:  BTFSS  03.2
1141:  GOTO   146
1142:  MOVF   30,W
1143:  SUBWF  28,W
1144:  BTFSC  03.0
1145:  GOTO   149
....................          status = FINISHED;
1146:  MOVLW  06
1147:  MOVWF  2B
1148:  GOTO   14B
....................       else
....................          status = IDLE;
1149:  MOVLW  03
114A:  MOVWF  2B
....................    }
114B:  GOTO   14E
....................    else
....................    {
....................       status = SMF_USE_REQ;
114C:  MOVLW  04
114D:  MOVWF  2B
....................    }
.................... 
....................    return FALSE;
114E:  MOVLW  00
114F:  MOVWF  78
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command)
.................... {
....................    fprintf(PC, "\t-> Status check\r\n");
*
1157:  MOVLW  1F
1158:  MOVLB  03
1159:  MOVWF  11
115A:  MOVLW  04
115B:  MOVWF  12
115C:  MOVLP  00
115D:  MOVLB  00
115E:  CALL   5DA
115F:  MOVLP  10
....................    fprintf(PC, "\t\t-> My status is %d\r\n", status);
1160:  MOVLW  29
1161:  MOVLB  03
1162:  MOVWF  11
1163:  MOVLW  04
1164:  MOVWF  12
1165:  BCF    03.0
1166:  MOVLW  12
1167:  MOVLB  10
1168:  MOVWF  6C
1169:  MOVLP  00
116A:  MOVLB  00
116B:  CALL   67F
116C:  MOVLP  10
116D:  MOVF   2B,W
116E:  MOVLB  10
116F:  MOVWF  3F
1170:  MOVLW  18
1171:  MOVWF  40
1172:  MOVLP  00
1173:  MOVLB  00
1174:  CALL   710
1175:  MOVLP  10
1176:  MOVLW  0D
1177:  MOVLB  11
1178:  MOVWF  20
1179:  MOVLP  00
117A:  MOVLB  00
117B:  CALL   5B5
117C:  MOVLP  10
117D:  MOVLW  0A
117E:  MOVLB  11
117F:  MOVWF  20
1180:  MOVLP  00
1181:  MOVLB  00
1182:  CALL   5B5
1183:  MOVLP  10
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
1184:  MOVLW  35
1185:  MOVLB  03
1186:  MOVWF  11
1187:  MOVLW  04
1188:  MOVWF  12
1189:  MOVLP  00
118A:  MOVLB  00
118B:  CALL   5DA
118C:  MOVLP  10
....................    transmit_status();
.................... 
....................    if (status == FINISHED)
*
119A:  MOVF   2B,W
119B:  SUBLW  06
119C:  BTFSS  03.2
119D:  GOTO   1AA
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
119E:  MOVLW  44
119F:  MOVLB  03
11A0:  MOVWF  11
11A1:  MOVLW  04
11A2:  MOVWF  12
11A3:  MOVLP  00
11A4:  MOVLB  00
11A5:  CALL   5DA
11A6:  MOVLP  10
....................       return TRUE;
11A7:  MOVLW  01
11A8:  MOVWF  78
11A9:  GOTO   1AC
....................    }
.................... 
....................    return FALSE;
11AA:  MOVLW  00
11AB:  MOVWF  78
.................... }
.................... 
.................... int1 handle_smf_available(Command *command)
.................... {
....................    fprintf(PC, "\t-> is SMF available\r\n");
*
11B3:  MOVLW  52
11B4:  MOVLB  03
11B5:  MOVWF  11
11B6:  MOVLW  04
11B7:  MOVWF  12
11B8:  MOVLP  00
11B9:  MOVLB  00
11BA:  CALL   5DA
11BB:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknowledge\r\n");
11BC:  MOVLW  5E
11BD:  MOVLB  03
11BE:  MOVWF  11
11BF:  MOVLW  04
11C0:  MOVWF  12
11C1:  MOVLP  00
11C2:  MOVLB  00
11C3:  CALL   5DA
11C4:  MOVLP  10
....................    transmit_ack();
11C5:  MOVLP  00
11C6:  CALL   796
11C7:  MOVLP  10
.................... 
....................    if (command->content[0] == ALLOW)
11C8:  MOVLB  10
11C9:  MOVF   35,W
11CA:  MOVWF  04
11CB:  MOVF   36,W
11CC:  MOVWF  05
11CD:  ADDFSR 01,FSR0
11CE:  MOVF   00,F
11CF:  BTFSS  03.2
11D0:  GOTO   386
....................    {
....................       fprintf(PC, "\t\t-> allowed\r\n");
11D1:  MOVLW  6C
11D2:  MOVLB  03
11D3:  MOVWF  11
11D4:  MOVLW  04
11D5:  MOVWF  12
11D6:  MOVLP  00
11D7:  MOVLB  00
11D8:  CALL   5DA
11D9:  MOVLP  10
....................       status = COPYING;
11DA:  MOVLW  05
11DB:  MOVWF  2B
....................       copy_data();
....................       status = FINISHED;
*
1382:  MOVLW  06
1383:  MOVWF  2B
....................    }
1384:  GOTO   38F
1385:  MOVLB  10
....................    else
....................    {
....................       fprintf(PC, "\t\t-> denied\r\n");
1386:  MOVLW  74
1387:  MOVLB  03
1388:  MOVWF  11
1389:  MOVLW  04
138A:  MOVWF  12
138B:  MOVLP  00
138C:  MOVLB  00
138D:  CALL   5DA
138E:  MOVLP  10
....................    }
.................... 
....................    return FALSE;
138F:  MOVLW  00
1390:  MOVWF  78
.................... }
.................... 
.................... void execute_mission(unsigned int8 *content)
*
1046:  MOVF   3A,W
1047:  MOVWF  04
1048:  MOVF   3B,W
1049:  MOVWF  05
104A:  MOVIW  [FSR0+00],W
104B:  MOVWF  3C
104C:  MOVLW  01
104D:  ADDWF  3A,W
104E:  MOVWF  78
104F:  MOVLW  00
1050:  ADDWFC 3B,W
1051:  MOVWF  7A
1052:  MOVF   78,W
1053:  MOVWF  3D
1054:  MOVF   7A,W
1055:  MOVWF  3E
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    unsigned int8 *parameter = &content[1];
....................    
....................    if (is_executed_mission(command_id))
1056:  MOVF   3C,W
1057:  MOVWF  3F
*
1084:  MOVF   78,F
1085:  BTFSC  03.2
1086:  GOTO   0AD
....................    {
....................       fprintf(PC, "\r\nThis  mission is executed\r\n\t-> 0x%d\r\n", command_id);
1087:  MOVLW  7B
1088:  MOVLB  03
1089:  MOVWF  11
108A:  MOVLW  04
108B:  MOVWF  12
108C:  BCF    03.0
108D:  MOVLW  23
108E:  MOVLB  10
108F:  MOVWF  6C
1090:  MOVLP  00
1091:  MOVLB  00
1092:  CALL   67F
1093:  MOVLP  10
1094:  MOVLB  10
1095:  MOVF   3C,W
1096:  MOVWF  3F
1097:  MOVLW  18
1098:  MOVWF  40
1099:  MOVLP  00
109A:  MOVLB  00
109B:  CALL   710
109C:  MOVLP  10
109D:  MOVLW  0D
109E:  MOVLB  11
109F:  MOVWF  20
10A0:  MOVLP  00
10A1:  MOVLB  00
10A2:  CALL   5B5
10A3:  MOVLP  10
10A4:  MOVLW  0A
10A5:  MOVLB  11
10A6:  MOVWF  20
10A7:  MOVLP  00
10A8:  MOVLB  00
10A9:  CALL   5B5
10AA:  MOVLP  10
....................       return;
10AB:  GOTO   130
10AC:  MOVLB  10
....................    }
....................    
....................    add_executed_mission(command_id);
10AD:  MOVF   3C,W
10AE:  MOVWF  3F
....................    
....................    // execution mission
....................    fprintf(PC, "\r\n____________________________________\r\n________Start execute_mission________\r\n\r\n");
*
10DD:  MOVLW  8F
10DE:  MOVLB  03
10DF:  MOVWF  11
10E0:  MOVLW  04
10E1:  MOVWF  12
10E2:  MOVLP  00
10E3:  MOVLB  00
10E4:  CALL   5DA
10E5:  MOVLP  10
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
10E6:  MOVLW  B8
10E7:  MOVLB  03
10E8:  MOVWF  11
10E9:  MOVLW  04
10EA:  MOVWF  12
10EB:  BCF    03.0
10EC:  MOVLW  0C
10ED:  MOVLB  10
10EE:  MOVWF  6C
10EF:  MOVLP  00
10F0:  MOVLB  00
10F1:  CALL   67F
10F2:  MOVLP  10
10F3:  MOVLB  10
10F4:  MOVF   3C,W
10F5:  MOVWF  6C
10F6:  MOVLW  37
10F7:  MOVWF  6D
10F8:  MOVLP  00
10F9:  MOVLB  00
10FA:  CALL   658
10FB:  MOVLP  10
10FC:  MOVLW  BF
10FD:  MOVLB  03
10FE:  MOVWF  11
10FF:  MOVLW  04
1100:  MOVWF  12
1101:  BCF    03.0
1102:  MOVLW  04
1103:  MOVLB  10
1104:  MOVWF  6C
1105:  MOVLP  00
1106:  MOVLB  00
1107:  CALL   67F
1108:  MOVLP  10
....................    switch(command_id)
1109:  MOVLB  10
110A:  MOVF   3C,W
110B:  XORLW  01
110C:  MOVLB  00
110D:  BTFSC  03.2
110E:  GOTO   113
110F:  XORLW  A1
1110:  BTFSC  03.2
1111:  GOTO   11D
1112:  GOTO   11E
....................    {
....................       case ID_SWEEP:
....................          mode_measure(parameter);
1113:  MOVLB  10
1114:  MOVF   3E,W
1115:  MOVWF  40
1116:  MOVF   3D,W
1117:  MOVWF  3F
1118:  MOVLP  08
1119:  MOVLB  00
111A:  GOTO   572
111B:  MOVLP  10
....................          break;
111C:  GOTO   127
....................       case ID_FLASH_ERASE_ALL:
....................          break;
111D:  GOTO   127
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
111E:  MOVLW  C2
111F:  MOVLB  03
1120:  MOVWF  11
1121:  MOVLW  04
1122:  MOVWF  12
1123:  MOVLP  00
1124:  MOVLB  00
1125:  CALL   5DA
1126:  MOVLP  10
....................    }
....................    fprintf(PC, "\r\n_________End execute_mission_________\r\n____________________________________\r\n");
1127:  MOVLW  CE
1128:  MOVLB  03
1129:  MOVWF  11
112A:  MOVLW  04
112B:  MOVWF  12
112C:  MOVLP  00
112D:  MOVLB  00
112E:  CALL   5DA
112F:  MOVLP  10
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_PIC_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
0DAA:  MOVLB  03
0DAB:  BSF    1F.3
0DAC:  MOVLW  A0
0DAD:  MOVWF  1B
0DAE:  MOVLW  01
0DAF:  MOVWF  1C
0DB0:  MOVLW  A6
0DB1:  MOVWF  1E
0DB2:  MOVLW  90
0DB3:  MOVWF  1D
0DB4:  MOVLB  01
0DB5:  BCF    0D.4
0DB6:  MOVLB  02
0DB7:  BSF    0D.4
0DB8:  MOVLB  04
0DB9:  BCF    15.5
0DBA:  MOVLW  40
0DBB:  MOVWF  14
0DBC:  MOVLW  09
0DBD:  MOVWF  12
0DBE:  MOVLW  2A
0DBF:  MOVWF  15
0DC0:  MOVLB  02
0DC1:  BCF    1D.5
0DC2:  BCF    1D.3
0DC3:  BCF    1D.4
0DC4:  MOVLB  01
0DC5:  BCF    0E.5
0DC6:  BSF    0E.4
0DC7:  BCF    0E.3
0DC8:  MOVLB  00
0DC9:  CLRF   29
0DCA:  CLRF   28
0DCB:  BCF    2A.0
0DCC:  MOVLW  03
0DCD:  MOVWF  2B
0DCE:  CLRF   2F
0DCF:  CLRF   2E
0DD0:  CLRF   2D
0DD1:  CLRF   2C
0DD2:  CLRF   33
0DD3:  CLRF   32
0DD4:  CLRF   31
0DD5:  CLRF   30
0DD6:  CLRF   35
0DD7:  CLRF   34
0DD8:  CLRF   37
0DD9:  CLRF   36
0DDA:  CLRF   58
0DDB:  MOVLB  0C
0DDC:  CLRF   2C
0DDD:  CLRF   2B
0DDE:  CLRF   2A
0DDF:  CLRF   29
0DE0:  CLRF   2E
0DE1:  CLRF   2D
0DE2:  CLRF   30
0DE3:  CLRF   2F
0DE4:  CLRF   32
0DE5:  CLRF   31
0DE6:  CLRF   34
0DE7:  CLRF   33
0DE8:  MOVLB  03
0DE9:  CLRF   0C
0DEA:  CLRF   0D
0DEB:  CLRF   0E
0DEC:  CLRF   0F
0DED:  CLRF   10
0DEE:  MOVLB  02
0DEF:  CLRF   12
0DF0:  CLRF   11
0DF1:  GOTO   61C
0DF2:  DATA 20,34
0DF3:  DATA 60,34
0DF4:  DATA 18,34
0DF5:  DATA 00,34
0DF6:  DATA FF,34
0DF7:  DATA 60,34
0DF8:  DATA 39,34
0DF9:  DATA 00,34
0DFA:  DATA FF,34
0DFB:  DATA C0,34
0DFC:  DATA 00,34
0DFD:  DATA FF,34
0DFE:  DATA C0,34
0DFF:  DATA 00,34
0E00:  DATA 93,34
0E01:  DATA C0,34
0E02:  DATA 00,34
0E03:  DATA FF,34
0E04:  DATA 63,34
0E05:  DATA D5,34
0E06:  DATA 00,34
0E07:  DATA 05,34
0E08:  DATA C0,34
0E09:  DATA 00,34
0E0A:  DATA 0C,34
0E0B:  DATA 80,34
0E0C:  DATA 71,34
0E0D:  DATA 00,34
0E0E:  DATA 01,34
0E0F:  DATA 01,34
0E10:  DATA 72,34
0E11:  DATA 00,34
0E12:  DATA 00,34
0E13:  DATA 09,34
0E14:  DATA 01,34
0E15:  DATA 00,34
0E16:  DATA 02,34
0E17:  DATA 01,34
0E18:  DATA 09,34
0E19:  DATA C0,34
0E1A:  DATA 00,34
0E1B:  DATA 00,34
0E1C:  MOVLW  0D
0E1D:  MOVWF  05
0E1E:  MOVLW  F2
0E1F:  MOVWF  04
0E20:  BSF    05.7
0E21:  MOVIW  [FSR0++],W
0E22:  MOVWF  77
0E23:  XORLW  00
0E24:  BTFSC  03.2
0E25:  GOTO   636
0E26:  MOVIW  [FSR0++],W
0E27:  MOVWF  78
0E28:  BTFSC  78.7
0E29:  GOTO   62E
0E2A:  ANDLW  3F
0E2B:  MOVWF  07
0E2C:  MOVIW  [FSR0++],W
0E2D:  MOVWF  06
0E2E:  BTFSC  78.6
0E2F:  MOVIW  [FSR0++],W
0E30:  BTFSS  78.6
0E31:  MOVIW  [FSR0++],W
0E32:  MOVWI  W,[FSR1++]
0E33:  DECFSZ 77,F
0E34:  GOTO   630
0E35:  GOTO   621
.................... { 
....................    fprintf(PC,"\r\n============================================================\r\n");
0E36:  MOVLW  F6
0E37:  MOVLB  03
0E38:  MOVWF  11
0E39:  MOVLW  04
0E3A:  MOVWF  12
0E3B:  MOVLP  00
0E3C:  MOVLB  00
0E3D:  CALL   5DA
0E3E:  MOVLP  08
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1. Last updated on 2025/04/25, by Inoue.\r\n");  
0E3F:  MOVLW  17
0E40:  MOVLB  03
0E41:  MOVWF  11
0E42:  MOVLW  05
0E43:  MOVWF  12
0E44:  MOVLP  00
0E45:  MOVLB  00
0E46:  CALL   5DA
0E47:  MOVLP  08
....................    fprintf(PC,"See the changelog for the changes in this release\n\r");
0E48:  MOVLW  41
0E49:  MOVLB  03
0E4A:  MOVWF  11
0E4B:  MOVLW  05
0E4C:  MOVWF  12
0E4D:  MOVLP  00
0E4E:  MOVLB  00
0E4F:  CALL   5DA
0E50:  MOVLP  08
.................... 
....................    initialize_pic();
0E51:  MOVLP  00
0E52:  GOTO   62A
0E53:  MOVLP  08
....................    initialize_uart();
0E54:  MOVLP  00
0E55:  GOTO   635
0E56:  MOVLP  08
....................    initialize_timer();
0E57:  MOVLP  00
0E58:  GOTO   642
0E59:  MOVLP  08
....................    //initialize_flash();
.................... 
.................... 
....................    int1 is_finished = FALSE;
0E5A:  MOVLB  0F
0E5B:  BCF    5E.0
....................    fprintf(PC,"CIGS PIC Start Operation\r\n\r\n");
0E5C:  MOVLW  5B
0E5D:  MOVLB  03
0E5E:  MOVWF  11
0E5F:  MOVLW  05
0E60:  MOVWF  12
0E61:  MOVLP  00
0E62:  MOVLB  00
0E63:  CALL   5DA
0E64:  MOVLP  08
....................    //Start loop
....................    while(!is_finished)
0E65:  MOVLB  0F
0E66:  BTFSC  5E.0
0E67:  GOTO   75A
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
0E68:  MOVLB  00
0E69:  MOVF   58,F
0E6A:  BTFSC  03.2
0E6B:  GOTO   72A
....................       {
....................          volatile Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
0E6C:  MOVLW  20
0E6D:  MOVLB  10
0E6E:  MOVWF  3A
0E6F:  MOVLW  18
0E70:  MOVWF  39
0E71:  MOVLB  00
0E72:  MOVF   58,W
0E73:  MOVLB  10
0E74:  MOVWF  3B
0E75:  MOVLB  00
0E76:  GOTO   000
0E77:  MOVF   79,W
0E78:  MOVWF  7A
0E79:  MOVF   78,W
0E7A:  MOVWF  04
0E7B:  MOVF   7A,W
0E7C:  MOVWF  05
0E7D:  MOVLW  23
0E7E:  MOVWF  78
0E7F:  MOVLW  24
0E80:  MOVWF  07
0E81:  MOVLW  EF
0E82:  MOVWF  06
0E83:  MOVIW  [FSR0++],W
0E84:  MOVWI  W,[FSR1++]
0E85:  DECFSZ 78,F
0E86:  GOTO   683
....................          
....................          fprintf(PC, "FrameID: %1X\r\n", command.frame_id);
0E87:  MOVLW  6A
0E88:  MOVLB  03
0E89:  MOVWF  11
0E8A:  MOVLW  05
0E8B:  MOVWF  12
0E8C:  BCF    03.0
0E8D:  MOVLW  09
0E8E:  MOVLB  10
0E8F:  MOVWF  6C
0E90:  MOVLP  00
0E91:  MOVLB  00
0E92:  CALL   67F
0E93:  MOVLP  08
0E94:  MOVLB  0F
0E95:  MOVF   5F,W
0E96:  MOVLB  10
0E97:  MOVWF  6C
0E98:  MOVLW  B7
0E99:  MOVWF  6D
0E9A:  MOVLP  00
0E9B:  MOVLB  00
0E9C:  CALL   658
0E9D:  MOVLP  08
0E9E:  MOVLW  0D
0E9F:  MOVLB  11
0EA0:  MOVWF  20
0EA1:  MOVLP  00
0EA2:  MOVLB  00
0EA3:  CALL   5B5
0EA4:  MOVLP  08
0EA5:  MOVLW  0A
0EA6:  MOVLB  11
0EA7:  MOVWF  20
0EA8:  MOVLP  00
0EA9:  MOVLB  00
0EAA:  CALL   5B5
0EAB:  MOVLP  08
....................          fprintf(PC, "payload size: %d\r\n", command.size);
0EAC:  MOVLW  72
0EAD:  MOVLB  03
0EAE:  MOVWF  11
0EAF:  MOVLW  05
0EB0:  MOVWF  12
0EB1:  BCF    03.0
0EB2:  MOVLW  0E
0EB3:  MOVLB  10
0EB4:  MOVWF  6C
0EB5:  MOVLP  00
0EB6:  MOVLB  00
0EB7:  CALL   67F
0EB8:  MOVLP  08
0EB9:  MOVLB  10
0EBA:  MOVF   30,W
0EBB:  MOVWF  3F
0EBC:  MOVLW  18
0EBD:  MOVWF  40
0EBE:  MOVLP  00
0EBF:  MOVLB  00
0EC0:  CALL   710
0EC1:  MOVLP  08
0EC2:  MOVLW  0D
0EC3:  MOVLB  11
0EC4:  MOVWF  20
0EC5:  MOVLP  00
0EC6:  MOVLB  00
0EC7:  CALL   5B5
0EC8:  MOVLP  08
0EC9:  MOVLW  0A
0ECA:  MOVLB  11
0ECB:  MOVWF  20
0ECC:  MOVLP  00
0ECD:  MOVLB  00
0ECE:  CALL   5B5
0ECF:  MOVLP  08
....................          fprintf(PC, "payload: ");
0ED0:  MOVLW  7C
0ED1:  MOVLB  03
0ED2:  MOVWF  11
0ED3:  MOVLW  05
0ED4:  MOVWF  12
0ED5:  MOVLP  00
0ED6:  MOVLB  00
0ED7:  CALL   5DA
0ED8:  MOVLP  08
....................          for(int8 i = 0; i < command.size; i++)
0ED9:  MOVLB  10
0EDA:  CLRF   32
0EDB:  MOVF   30,W
0EDC:  SUBWF  32,W
0EDD:  BTFSC  03.0
0EDE:  GOTO   6F9
....................             fprintf(PC, "%X ", command.content[i]);
0EDF:  MOVLW  F0
0EE0:  ADDWF  32,W
0EE1:  MOVWF  04
0EE2:  MOVLW  24
0EE3:  MOVWF  05
0EE4:  BTFSC  03.0
0EE5:  INCF   05,F
0EE6:  MOVF   00,W
0EE7:  MOVWF  33
0EE8:  MOVWF  6C
0EE9:  MOVLW  37
0EEA:  MOVWF  6D
0EEB:  MOVLP  00
0EEC:  MOVLB  00
0EED:  CALL   658
0EEE:  MOVLP  08
0EEF:  MOVLW  20
0EF0:  MOVLB  11
0EF1:  MOVWF  20
0EF2:  MOVLP  00
0EF3:  MOVLB  00
0EF4:  CALL   5B5
0EF5:  MOVLP  08
0EF6:  MOVLB  10
0EF7:  INCF   32,F
0EF8:  GOTO   6DB
....................          fprintf(PC, "\r\n\r\n");
0EF9:  MOVLW  81
0EFA:  MOVLB  03
0EFB:  MOVWF  11
0EFC:  MOVLW  05
0EFD:  MOVWF  12
0EFE:  MOVLP  00
0EFF:  MOVLB  00
0F00:  CALL   5DA
0F01:  MOVLP  08
....................          
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0F02:  MOVLW  20
0F03:  MOVLB  10
0F04:  MOVWF  34
0F05:  MOVLW  18
0F06:  MOVWF  33
0F07:  MOVLW  20
0F08:  MOVWF  36
0F09:  MOVLW  38
0F0A:  MOVWF  35
0F0B:  MOVLP  00
0F0C:  MOVLB  00
0F0D:  GOTO   777
0F0E:  MOVLP  08
....................             
....................          if(command.is_exist)
0F0F:  MOVLB  10
0F10:  BTFSS  31.0
0F11:  GOTO   720
....................             is_finished = execute_command(&command);
0F12:  MOVLW  24
0F13:  MOVWF  34
0F14:  MOVLW  EF
0F15:  MOVWF  33
0F16:  MOVLP  10
0F17:  MOVLB  00
0F18:  GOTO   000
0F19:  MOVLP  08
0F1A:  MOVLB  0F
0F1B:  BCF    5E.0
0F1C:  BTFSC  78.0
0F1D:  BSF    5E.0
0F1E:  GOTO   72B
0F1F:  MOVLB  10
....................          else
....................          {
....................             fprintf(PC, "\t-> Invalid command\r\n");
0F20:  MOVLW  84
0F21:  MOVLB  03
0F22:  MOVWF  11
0F23:  MOVLW  05
0F24:  MOVWF  12
0F25:  MOVLP  00
0F26:  MOVLB  00
0F27:  CALL   5DA
0F28:  MOVLP  08
....................             continue;
0F29:  GOTO   665
0F2A:  MOVLB  0F
....................          }
....................       }   // check if the command is valid
....................       
....................       // check mis mcu duration seconds (used in mission.c \ void continue_mis_mcu(int16 duration_sec))
....................       if (status == IDLE)
0F2B:  MOVLB  00
0F2C:  MOVF   2B,W
0F2D:  SUBLW  03
0F2E:  BTFSS  03.2
0F2F:  GOTO   748
....................          if (duration_sec < sec && is_empty_smf_data())
0F30:  MOVF   33,F
0F31:  BTFSS  03.2
0F32:  GOTO   740
0F33:  MOVF   32,F
0F34:  BTFSS  03.2
0F35:  GOTO   740
0F36:  MOVF   29,W
0F37:  SUBWF  31,W
0F38:  BTFSS  03.0
0F39:  GOTO   748
0F3A:  BTFSS  03.2
0F3B:  GOTO   740
0F3C:  MOVF   30,W
0F3D:  SUBWF  28,W
0F3E:  BTFSC  03.0
0F3F:  GOTO   748
0F40:  MOVLP  00
0F41:  CALL   7CD
0F42:  MOVLP  08
0F43:  MOVF   78,F
0F44:  BTFSC  03.2
0F45:  GOTO   748
....................             status = FINISHED;
0F46:  MOVLW  06
0F47:  MOVWF  2B
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
0F48:  MOVLB  0F
0F49:  BTFSC  5E.0
....................          break;
0F4A:  GOTO   75A
....................          
....................       delay_ms(400);
0F4B:  MOVLW  02
0F4C:  MOVLB  10
0F4D:  MOVWF  33
0F4E:  MOVLW  C8
0F4F:  MOVWF  3D
0F50:  MOVLP  00
0F51:  MOVLB  00
0F52:  CALL   7D8
0F53:  MOVLP  08
0F54:  MOVLB  10
0F55:  DECFSZ 33,F
0F56:  GOTO   74E
0F57:  MOVLB  00
0F58:  GOTO   665
0F59:  MOVLB  0F
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
0F5A:  MOVLW  8F
0F5B:  MOVLB  03
0F5C:  MOVWF  11
0F5D:  MOVLW  05
0F5E:  MOVWF  12
0F5F:  MOVLP  00
0F60:  MOVLB  00
0F61:  CALL   5DA
0F62:  MOVLP  08
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
0F63:  MOVLW  2E
0F64:  MOVLB  11
0F65:  MOVWF  20
0F66:  MOVLP  00
0F67:  MOVLB  00
0F68:  CALL   5B5
0F69:  MOVLP  08
....................       delay_ms(1000);
0F6A:  MOVLW  04
0F6B:  MOVLB  10
0F6C:  MOVWF  33
0F6D:  MOVLW  FA
0F6E:  MOVWF  3D
0F6F:  MOVLP  00
0F70:  MOVLB  00
0F71:  CALL   7D8
0F72:  MOVLP  08
0F73:  MOVLB  10
0F74:  DECFSZ 33,F
0F75:  GOTO   76D
0F76:  MOVLB  00
0F77:  GOTO   763
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
0F78:  MOVLW  AF
0F79:  MOVLB  03
0F7A:  MOVWF  11
0F7B:  MOVLW  05
0F7C:  MOVWF  12
0F7D:  MOVLP  00
0F7E:  MOVLB  00
0F7F:  CALL   5DA
0F80:  MOVLP  08
....................    
.................... }
.................... 
0F81:  SLEEP
.................... //

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
