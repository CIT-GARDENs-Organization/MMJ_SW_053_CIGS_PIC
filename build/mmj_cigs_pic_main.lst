CCS PCM C Compiler, Version 5.104, 57077               01-6-25 16:58

               Filename:   build\mmj_cigs_main.lst

               ROM used:   5099 words (31%)
                           Largest free fragment is 2048
               RAM used:   1305 (64%) at main() level
                           1381 (67%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 16

*
0000:  MOVLP  10
0001:  GOTO   397
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  MOVLB  03
0010:  MOVF   11,W
0011:  MOVLB  00
0012:  MOVWF  24
0013:  MOVLB  03
0014:  MOVF   12,W
0015:  MOVLB  00
0016:  MOVWF  25
0017:  MOVLB  03
0018:  MOVF   13,W
0019:  MOVLB  00
001A:  MOVWF  26
001B:  MOVLB  03
001C:  MOVF   14,W
001D:  MOVLB  00
001E:  MOVWF  27
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   043
0023:  CLRF   05
0024:  MOVLW  91
0025:  MOVWF  04
0026:  BTFSS  00.5
0027:  GOTO   02A
0028:  BTFSC  11.5
0029:  GOTO   045
002A:  MOVF   20,W
002B:  MOVWF  77
002C:  MOVF   21,W
002D:  MOVWF  78
002E:  MOVF   22,W
002F:  MOVWF  79
0030:  MOVF   23,W
0031:  MOVWF  7A
0032:  MOVF   24,W
0033:  MOVLB  03
0034:  MOVWF  11
0035:  MOVLB  00
0036:  MOVF   25,W
0037:  MOVLB  03
0038:  MOVWF  12
0039:  MOVLB  00
003A:  MOVF   26,W
003B:  MOVLB  03
003C:  MOVWF  13
003D:  MOVLB  00
003E:  MOVF   27,W
003F:  MOVLB  03
0040:  MOVWF  14
0041:  RETFIE
0042:  MOVLB  00
0043:  MOVLP  00
0044:  GOTO   047
0045:  MOVLP  00
0046:  GOTO   09D
.................... #include "include/mmj_cigs_main.h"
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... 
.................... // pin assignment etc
.................... #include "mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... //////////// Standard Header file for the PIC16F1789 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1789
*
008D:  DATA D4,34
008E:  DATA ED,32
008F:  DATA 72,10
0090:  DATA 49,37
0091:  DATA 69,3A
0092:  DATA E9,30
0093:  DATA EC,34
0094:  DATA FA,32
0095:  DATA 0D,05
0096:  DATA 00,00
0097:  DATA 89,21
0098:  DATA EF,36
0099:  DATA 70,36
009A:  DATA 65,3A
009B:  DATA E5,06
009C:  DATA 0A,00
*
00BD:  DATA D5,20
00BE:  DATA 52,2A
00BF:  DATA A0,24
00C0:  DATA EE,34
00C1:  DATA F4,34
00C2:  DATA 61,36
00C3:  DATA 69,3D
00C4:  DATA E5,06
00C5:  DATA 0A,00
00C6:  DATA 89,21
00C7:  DATA EF,36
00C8:  DATA 70,36
00C9:  DATA 65,3A
00CA:  DATA E5,06
00CB:  DATA 0A,00
00CC:  DATA C9,27
00CD:  DATA A0,24
00CE:  DATA EE,34
00CF:  DATA F4,34
00D0:  DATA 61,36
00D1:  DATA 69,3D
00D2:  DATA E5,06
00D3:  DATA 0A,00
00D4:  DATA 89,21
00D5:  DATA EF,36
00D6:  DATA 70,36
00D7:  DATA 65,3A
00D8:  DATA E5,06
00D9:  DATA 0A,00
00DA:  DATA 41,22
00DB:  DATA 43,10
00DC:  DATA 49,37
00DD:  DATA 69,3A
00DE:  DATA E9,30
00DF:  DATA EC,34
00E0:  DATA FA,32
00E1:  DATA 0D,05
00E2:  DATA 00,01
00E3:  DATA 89,21
00E4:  DATA EF,36
00E5:  DATA 70,36
00E6:  DATA 65,3A
00E7:  DATA E5,06
00E8:  DATA 0A,00
00E9:  DATA 53,3A
00EA:  DATA 61,39
00EB:  DATA 74,10
00EC:  DATA D3,2B
00ED:  DATA C5,22
00EE:  DATA D0,06
00EF:  DATA 0A,00
00F0:  DATA 89,29
00F1:  DATA F7,32
00F2:  DATA 65,38
00F3:  DATA A0,39
00F4:  DATA F4,32
00F5:  DATA 70,10
00F6:  DATA 3A,10
00F7:  DATA A5,3A
00F8:  DATA 0D,05
00F9:  DATA 00,00
00FA:  DATA 45,27
00FB:  DATA 44,10
00FC:  DATA D3,2B
00FD:  DATA C5,22
00FE:  DATA D0,06
00FF:  DATA 0A,00
0100:  DATA CC,37
0101:  DATA E7,33
0102:  DATA 65,32
0103:  DATA A0,21
0104:  DATA C9,23
0105:  DATA 53,10
0106:  DATA E4,30
0107:  DATA F4,30
0108:  DATA 0D,05
0109:  DATA 80,00
010A:  DATA D3,26
010B:  DATA 46,10
010C:  DATA E4,30
010D:  DATA F4,30
010E:  DATA 20,36
010F:  DATA E9,39
0110:  DATA 74,10
0111:  DATA E9,39
0112:  DATA 20,33
0113:  DATA 75,36
0114:  DATA EC,10
0115:  DATA A1,10
0116:  DATA 0D,05
0117:  DATA 00,00
0118:  DATA D3,26
0119:  DATA 46,10
011A:  DATA E4,30
011B:  DATA F4,30
011C:  DATA 20,36
011D:  DATA E9,39
011E:  DATA 74,10
011F:  DATA E9,39
0120:  DATA A0,32
0121:  DATA 6D,38
0122:  DATA F4,3C
0123:  DATA 0D,05
0124:  DATA 00,00
0125:  DATA 0D,05
0126:  DATA 09,1E
0127:  DATA 2D,00
0128:  DATA 66,36
0129:  DATA E1,39
012A:  DATA 68,10
012B:  DATA E2,3A
012C:  DATA F3,3C
012D:  DATA 0D,05
012E:  DATA 00,00
012F:  DATA 09,29
0130:  DATA E5,30
0131:  DATA 64,10
0132:  DATA 49,22
0133:  DATA 3A,00
0134:  DATA 09,33
0135:  DATA EC,30
0136:  DATA 73,34
0137:  DATA A0,31
0138:  DATA 6F,37
0139:  DATA EE,32
013A:  DATA 63,3A
013B:  DATA A0,27
013C:  DATA CB,06
013D:  DATA 0A,00
013E:  DATA 09,33
013F:  DATA EC,30
0140:  DATA 73,34
0141:  DATA 20,37
0142:  DATA 6F,3A
0143:  DATA A0,31
0144:  DATA 6F,37
0145:  DATA EE,32
0146:  DATA 63,3A
0147:  DATA 0D,05
0148:  DATA 00,00
0149:  DATA 65,39
014A:  DATA F2,37
014B:  DATA 72,1D
014C:  DATA 66,36
014D:  DATA E1,39
014E:  DATA 68,10
014F:  DATA ED,37
0150:  DATA E4,32
0151:  DATA 6C,10
0152:  DATA E9,39
0153:  DATA A0,34
0154:  DATA 6E,3B
0155:  DATA 61,36
0156:  DATA 69,32
0157:  DATA 0D,05
0158:  DATA 00,01
0159:  DATA 66,36
015A:  DATA E1,39
015B:  DATA 68,10
015C:  DATA F4,34
015D:  DATA ED,32
015E:  DATA EF,3A
015F:  DATA F4,06
0160:  DATA 0A,00
0161:  DATA 66,36
0162:  DATA E1,39
0163:  DATA 68,10
0164:  DATA F3,32
0165:  DATA 63,3A
0166:  DATA 6F,39
0167:  DATA A0,32
0168:  DATA F2,30
0169:  DATA F3,32
016A:  DATA A0,31
016B:  DATA EF,36
016C:  DATA 70,36
016D:  DATA 65,3A
016E:  DATA E5,06
016F:  DATA 0A,00
0170:  DATA 65,39
0171:  DATA F2,37
0172:  DATA 72,1D
0173:  DATA 66,36
0174:  DATA E1,39
0175:  DATA 68,10
0176:  DATA ED,37
0177:  DATA E4,32
0178:  DATA 6C,10
0179:  DATA E9,39
017A:  DATA A0,34
017B:  DATA 6E,3B
017C:  DATA 61,36
017D:  DATA 69,32
017E:  DATA 0D,05
017F:  DATA 00,01
0180:  DATA 66,36
0181:  DATA E1,39
0182:  DATA 68,10
0183:  DATA F4,34
0184:  DATA ED,32
0185:  DATA EF,3A
0186:  DATA F4,06
0187:  DATA 0A,00
0188:  DATA 66,36
0189:  DATA E1,39
018A:  DATA 68,10
018B:  DATA 33,19
018C:  DATA 6B,21
018D:  DATA 79,3A
018E:  DATA 65,10
018F:  DATA F3,3A
0190:  DATA E2,39
0191:  DATA E5,31
0192:  DATA F4,37
0193:  DATA 72,10
0194:  DATA 65,39
0195:  DATA E1,39
0196:  DATA 65,10
0197:  DATA E3,37
0198:  DATA 6D,38
0199:  DATA EC,32
019A:  DATA F4,32
019B:  DATA 0D,05
019C:  DATA 00,00
019D:  DATA 65,39
019E:  DATA F2,37
019F:  DATA 72,1D
01A0:  DATA 66,36
01A1:  DATA E1,39
01A2:  DATA 68,10
01A3:  DATA ED,37
01A4:  DATA E4,32
01A5:  DATA 6C,10
01A6:  DATA E9,39
01A7:  DATA A0,34
01A8:  DATA 6E,3B
01A9:  DATA 61,36
01AA:  DATA 69,32
01AB:  DATA 0D,05
01AC:  DATA 00,01
01AD:  DATA 66,36
01AE:  DATA E1,39
01AF:  DATA 68,10
01B0:  DATA F4,34
01B1:  DATA ED,32
01B2:  DATA EF,3A
01B3:  DATA F4,06
01B4:  DATA 0A,00
01B5:  DATA 66,36
01B6:  DATA E1,39
01B7:  DATA 68,10
01B8:  DATA B4,35
01B9:  DATA C2,3C
01BA:  DATA F4,32
01BB:  DATA A0,39
01BC:  DATA 75,31
01BD:  DATA F3,32
01BE:  DATA 63,3A
01BF:  DATA 6F,39
01C0:  DATA A0,32
01C1:  DATA F2,30
01C2:  DATA F3,32
01C3:  DATA A0,31
01C4:  DATA EF,36
01C5:  DATA 70,36
01C6:  DATA 65,3A
01C7:  DATA E5,06
01C8:  DATA 0A,00
01C9:  DATA 66,36
01CA:  DATA E1,39
01CB:  DATA 68,10
01CC:  DATA F4,34
01CD:  DATA ED,32
01CE:  DATA EF,3A
01CF:  DATA F4,06
01D0:  DATA 0A,00
01D1:  DATA 66,36
01D2:  DATA E1,39
01D3:  DATA 68,10
01D4:  DATA 77,39
01D5:  DATA 69,3A
01D6:  DATA 65,10
01D7:  DATA E3,37
01D8:  DATA 6D,38
01D9:  DATA EC,32
01DA:  DATA F4,32
01DB:  DATA 0D,05
01DC:  DATA 00,00
01DD:  DATA 66,36
01DE:  DATA E1,39
01DF:  DATA 68,10
01E0:  DATA F4,34
01E1:  DATA ED,32
01E2:  DATA EF,3A
01E3:  DATA F4,06
01E4:  DATA 0A,00
01E5:  DATA 66,36
01E6:  DATA E1,39
01E7:  DATA 68,10
01E8:  DATA 77,39
01E9:  DATA 69,3A
01EA:  DATA 65,10
01EB:  DATA E3,37
01EC:  DATA 6D,38
01ED:  DATA EC,32
01EE:  DATA F4,32
01EF:  DATA 0D,05
01F0:  DATA 00,00
01F1:  DATA 53,3A
01F2:  DATA 61,39
01F3:  DATA 74,10
01F4:  DATA ED,30
01F5:  DATA EB,32
01F6:  DATA 5F,39
01F7:  DATA E5,31
01F8:  DATA E5,34
01F9:  DATA F6,32
01FA:  DATA DF,31
01FB:  DATA EF,36
01FC:  DATA ED,30
01FD:  DATA 6E,32
01FE:  DATA 0D,05
01FF:  DATA 89,16
0200:  DATA 3E,10
0201:  DATA 00,01
0202:  DATA 45,37
0203:  DATA 64,10
0204:  DATA ED,30
0205:  DATA EB,32
0206:  DATA 5F,39
0207:  DATA E5,31
0208:  DATA 69,3B
0209:  DATA E5,2F
020A:  DATA E3,37
020B:  DATA ED,36
020C:  DATA 61,37
020D:  DATA E4,06
020E:  DATA 8A,06
020F:  DATA 0A,00
0210:  DATA F3,34
0211:  DATA 67,37
0212:  DATA 61,36
0213:  DATA A0,32
0214:  DATA 6E,32
0215:  DATA A0,3B
0216:  DATA 69,3A
0217:  DATA 68,10
0218:  DATA 53,23
0219:  DATA C4,06
021A:  DATA 0A,00
021B:  DATA E4,37
021C:  DATA EE,13
021D:  DATA 74,10
021E:  DATA E6,34
021F:  DATA 6E,32
0220:  DATA A0,29
0221:  DATA 46,22
0222:  DATA 0D,05
0223:  DATA 00,00
0224:  DATA 89,16
0225:  DATA 3E,10
0226:  DATA 49,37
0227:  DATA F6,30
0228:  DATA EC,34
0229:  DATA 64,10
022A:  DATA 46,39
022B:  DATA E1,36
022C:  DATA 65,10
022D:  DATA 49,22
022E:  DATA 20,39
022F:  DATA E5,31
0230:  DATA E5,34
0231:  DATA F6,32
0232:  DATA 64,1D
0233:  DATA A0,12
0234:  DATA D8,06
0235:  DATA 0A,00
0236:  DATA 89,16
0237:  DATA 3E,10
0238:  DATA 43,29
0239:  DATA 43,10
023A:  DATA 65,39
023B:  DATA F2,37
023C:  DATA F2,10
023D:  DATA 0D,05
023E:  DATA 00,01
023F:  DATA 89,04
0240:  DATA 2D,1F
0241:  DATA 20,39
0242:  DATA E5,31
0243:  DATA E5,34
0244:  DATA F6,32
0245:  DATA 64,10
0246:  DATA 43,29
0247:  DATA 43,1D
0248:  DATA A0,12
0249:  DATA D8,06
024A:  DATA 0A,00
024B:  DATA 89,04
024C:  DATA 20,10
024D:  DATA A0,31
024E:  DATA 6F,36
024F:  DATA EC,32
0250:  DATA 63,3A
0251:  DATA A0,21
0252:  DATA D2,21
0253:  DATA 20,1D
0254:  DATA A0,12
0255:  DATA D8,06
0256:  DATA 0A,00
0257:  DATA 89,16
0258:  DATA 3E,10
0259:  DATA 49,37
025A:  DATA F6,30
025B:  DATA EC,34
025C:  DATA 64,10
025D:  DATA E4,32
025E:  DATA F6,34
025F:  DATA E3,32
0260:  DATA A0,24
0261:  DATA 44,10
0262:  DATA F2,32
0263:  DATA E3,32
0264:  DATA 69,3B
0265:  DATA 65,32
0266:  DATA 0D,05
0267:  DATA 00,01
0268:  DATA 89,04
0269:  DATA 2D,1F
026A:  DATA 20,39
026B:  DATA E5,31
026C:  DATA E5,34
026D:  DATA F6,32
026E:  DATA 64,1D
026F:  DATA 20,10
0270:  DATA 20,10
0271:  DATA A0,12
0272:  DATA D8,06
0273:  DATA 0A,00
0274:  DATA 89,04
0275:  DATA 20,10
0276:  DATA A0,26
0277:  DATA 79,10
0278:  DATA E4,32
0279:  DATA F6,34
027A:  DATA E3,32
027B:  DATA A0,24
027C:  DATA 44,1D
027D:  DATA A0,12
027E:  DATA D8,06
027F:  DATA 0A,00
0280:  DATA 54,39
0281:  DATA 61,37
0282:  DATA F3,34
0283:  DATA 74,10
0284:  DATA E3,37
0285:  DATA ED,36
0286:  DATA 61,37
0287:  DATA E4,06
0288:  DATA 8A,04
0289:  DATA 2D,1F
028A:  DATA 20,00
028B:  DATA A1,10
028C:  DATA A1,37
028D:  DATA F6,32
028E:  DATA 72,33
028F:  DATA EC,37
0290:  DATA 77,10
0291:  DATA 65,3C
0292:  DATA E5,31
0293:  DATA 75,3A
0294:  DATA 65,32
0295:  DATA DF,36
0296:  DATA E9,39
0297:  DATA F3,34
0298:  DATA 6F,37
0299:  DATA 20,36
029A:  DATA E9,39
029B:  DATA F4,06
029C:  DATA 0A,00
029D:  DATA 53,3A
029E:  DATA 61,39
029F:  DATA 74,10
02A0:  DATA D3,26
02A1:  DATA 46,10
02A2:  DATA F5,39
02A3:  DATA 69,37
02A4:  DATA 67,10
02A5:  DATA F2,32
02A6:  DATA F1,32
02A7:  DATA 73,3A
02A8:  DATA A0,39
02A9:  DATA E5,30
02AA:  DATA F1,3A
02AB:  DATA 65,37
02AC:  DATA E3,32
02AD:  DATA 0D,05
02AE:  DATA 00,01
02AF:  DATA 45,39
02B0:  DATA F2,37
02B1:  DATA F2,10
02B2:  DATA 20,29
02B3:  DATA E5,31
02B4:  DATA E5,34
02B5:  DATA F6,34
02B6:  DATA EE,33
02B7:  DATA A0,31
02B8:  DATA EF,36
02B9:  DATA ED,30
02BA:  DATA 6E,32
02BB:  DATA A0,34
02BC:  DATA EE,31
02BD:  DATA 6F,37
02BE:  DATA F3,34
02BF:  DATA 73,3A
02C0:  DATA 65,37
02C1:  DATA 74,10
02C2:  DATA F7,34
02C3:  DATA 74,34
02C4:  DATA 20,3A
02C5:  DATA E8,32
02C6:  DATA 20,32
02C7:  DATA E5,39
02C8:  DATA E9,33
02C9:  DATA EE,06
02CA:  DATA 0A,00
02CB:  DATA D3,26
02CC:  DATA 46,10
02CD:  DATA F5,39
02CE:  DATA 65,10
02CF:  DATA F2,32
02D0:  DATA F1,3A
02D1:  DATA E5,39
02D2:  DATA 74,10
02D3:  DATA 61,36
02D4:  DATA EC,37
02D5:  DATA F7,32
02D6:  DATA E4,06
02D7:  DATA 0A,00
02D8:  DATA D3,26
02D9:  DATA 46,10
02DA:  DATA F5,39
02DB:  DATA 65,10
02DC:  DATA F2,32
02DD:  DATA F1,3A
02DE:  DATA E5,39
02DF:  DATA 74,10
02E0:  DATA E4,32
02E1:  DATA EE,3C
02E2:  DATA 65,32
02E3:  DATA 0D,05
02E4:  DATA 00,01
02E5:  DATA D2,32
02E6:  DATA 74,39
02E7:  DATA 79,10
02E8:  DATA F2,32
02E9:  DATA F1,3A
02EA:  DATA E5,39
02EB:  DATA 74,10
02EC:  DATA F4,37
02ED:  DATA 20,21
02EE:  DATA CF,29
02EF:  DATA 53,10
02F0:  DATA D0,24
02F1:  DATA C3,06
02F2:  DATA 0A,00
02F3:  DATA 45,39
02F4:  DATA F2,37
02F5:  DATA F2,10
02F6:  DATA 20,29
02F7:  DATA E5,31
02F8:  DATA E5,34
02F9:  DATA F6,34
02FA:  DATA EE,33
02FB:  DATA A0,31
02FC:  DATA EF,36
02FD:  DATA ED,30
02FE:  DATA 6E,32
02FF:  DATA A0,34
0300:  DATA EE,31
0301:  DATA 6F,37
0302:  DATA F3,34
0303:  DATA 73,3A
0304:  DATA 65,37
0305:  DATA 74,10
0306:  DATA F7,34
0307:  DATA 74,34
0308:  DATA 20,3A
0309:  DATA E8,32
030A:  DATA 20,32
030B:  DATA E5,39
030C:  DATA E9,33
030D:  DATA EE,06
030E:  DATA 0A,00
030F:  DATA 45,37
0310:  DATA 64,10
0311:  DATA D3,26
0312:  DATA 46,10
0313:  DATA F5,39
0314:  DATA 69,37
0315:  DATA 67,10
0316:  DATA F2,32
0317:  DATA F1,32
0318:  DATA 73,3A
0319:  DATA A0,39
031A:  DATA E5,30
031B:  DATA F1,3A
031C:  DATA 65,37
031D:  DATA E3,32
031E:  DATA 0D,05
031F:  DATA 00,00
0320:  DATA 53,3A
0321:  DATA 61,39
0322:  DATA 74,10
0323:  DATA CD,27
0324:  DATA C4,22
0325:  DATA A0,26
0326:  DATA C5,20
0327:  DATA D3,2A
0328:  DATA D2,22
0329:  DATA 0D,05
032A:  DATA 00,00
032B:  DATA 53,3A
032C:  DATA 61,39
032D:  DATA 74,10
032E:  DATA CD,27
032F:  DATA C4,22
0330:  DATA A0,26
0331:  DATA C5,20
0332:  DATA D3,2A
0333:  DATA D2,22
0334:  DATA 20,2B
0335:  DATA 6F,36
0336:  DATA F4,30
0337:  DATA E7,32
0338:  DATA 0D,05
0339:  DATA 00,00
033A:  DATA F4,32
033B:  DATA 6D,38
033C:  DATA 5F,3A
033D:  DATA 6F,38
033E:  DATA 3A,10
033F:  DATA 25,2C
0340:  DATA 0D,05
0341:  DATA 00,01
0342:  DATA F4,32
0343:  DATA 6D,38
0344:  DATA 5F,31
0345:  DATA 6F,3A
0346:  DATA 3A,10
0347:  DATA 25,2C
0348:  DATA 0D,05
0349:  DATA 00,00
034A:  DATA 70,32
034B:  DATA 5F,3B
034C:  DATA 61,36
034D:  DATA F5,32
034E:  DATA 3A,10
034F:  DATA 25,2C
0350:  DATA 0D,05
0351:  DATA 00,00
0352:  DATA E3,34
0353:  DATA E7,39
0354:  DATA 5F,3B
0355:  DATA 61,36
0356:  DATA F5,32
0357:  DATA 3A,10
0358:  DATA 25,2C
0359:  DATA 0D,05
035A:  DATA 00,00
035B:  DATA E3,3A
035C:  DATA 72,39
035D:  DATA 65,37
035E:  DATA F4,2F
035F:  DATA F6,30
0360:  DATA EC,3A
0361:  DATA 65,1D
0362:  DATA A0,12
0363:  DATA D8,06
0364:  DATA 0A,00
0365:  DATA F6,37
0366:  DATA 6C,3A
0367:  DATA E1,33
0368:  DATA E5,2F
0369:  DATA F6,30
036A:  DATA EC,3A
036B:  DATA 65,1D
036C:  DATA A0,12
036D:  DATA D8,06
036E:  DATA 0A,00
036F:  DATA 53,3A
0370:  DATA 61,39
0371:  DATA 74,10
0372:  DATA 46,36
0373:  DATA E1,39
0374:  DATA 68,10
0375:  DATA 45,39
0376:  DATA E1,39
0377:  DATA 65,10
0378:  DATA 41,36
0379:  DATA EC,06
037A:  DATA 0A,00
037B:  DATA 45,37
037C:  DATA 64,10
037D:  DATA 46,36
037E:  DATA E1,39
037F:  DATA 68,10
0380:  DATA 45,39
0381:  DATA E1,39
0382:  DATA 65,10
0383:  DATA 41,36
0384:  DATA EC,06
0385:  DATA 0A,00
0386:  DATA 53,3A
0387:  DATA 61,39
0388:  DATA 74,10
0389:  DATA 46,36
038A:  DATA E1,39
038B:  DATA 68,10
038C:  DATA 45,39
038D:  DATA E1,39
038E:  DATA 65,10
038F:  DATA 31,10
0390:  DATA D3,32
0391:  DATA 63,3A
0392:  DATA 6F,39
0393:  DATA 0D,05
0394:  DATA 00,01
0395:  DATA 45,37
0396:  DATA 64,10
0397:  DATA 46,36
0398:  DATA E1,39
0399:  DATA 68,10
039A:  DATA 45,39
039B:  DATA E1,39
039C:  DATA 65,10
039D:  DATA 31,10
039E:  DATA D3,32
039F:  DATA 63,3A
03A0:  DATA 6F,39
03A1:  DATA 0D,05
03A2:  DATA 00,00
03A3:  DATA 53,3A
03A4:  DATA 61,39
03A5:  DATA 74,10
03A6:  DATA 46,36
03A7:  DATA E1,39
03A8:  DATA 68,10
03A9:  DATA C3,37
03AA:  DATA F0,3C
03AB:  DATA A0,18
03AC:  DATA A0,29
03AD:  DATA E5,31
03AE:  DATA F4,37
03AF:  DATA F2,06
03B0:  DATA 0A,00
03B1:  DATA 45,37
03B2:  DATA 64,10
03B3:  DATA 46,36
03B4:  DATA E1,39
03B5:  DATA 68,10
03B6:  DATA C3,37
03B7:  DATA F0,3C
03B8:  DATA A0,18
03B9:  DATA A0,29
03BA:  DATA E5,31
03BB:  DATA F4,37
03BC:  DATA F2,06
03BD:  DATA 0A,00
03BE:  DATA C4,32
03BF:  DATA 73,3A
03C0:  DATA 69,37
03C1:  DATA 61,3A
03C2:  DATA E9,37
03C3:  DATA 6E,10
03C4:  DATA 61,32
03C5:  DATA 64,39
03C6:  DATA E5,39
03C7:  DATA 73,1D
03C8:  DATA A0,04
03C9:  DATA 30,3C
03CA:  DATA 25,18
03CB:  DATA 38,26
03CC:  DATA D8,06
03CD:  DATA 0A,00
03CE:  DATA D3,37
03CF:  DATA 75,39
03D0:  DATA E3,32
03D1:  DATA A0,30
03D2:  DATA 64,32
03D3:  DATA F2,32
03D4:  DATA F3,39
03D5:  DATA 3A,10
03D6:  DATA 09,18
03D7:  DATA F8,12
03D8:  DATA 30,1C
03D9:  DATA 4C,2C
03DA:  DATA 0D,05
03DB:  DATA 00,01
03DC:  DATA C4,30
03DD:  DATA F4,30
03DE:  DATA A0,39
03DF:  DATA 69,3D
03E0:  DATA 65,1D
03E1:  DATA A0,04
03E2:  DATA 09,10
03E3:  DATA A0,12
03E4:  DATA 30,1C
03E5:  DATA 4C,2C
03E6:  DATA 0D,05
03E7:  DATA 00,01
03E8:  DATA C3,37
03E9:  DATA F0,3C
03EA:  DATA 69,37
03EB:  DATA 67,17
03EC:  DATA 00,01
03ED:  DATA DF,2F
03EE:  DATA DF,2F
03EF:  DATA DF,2F
03F0:  DATA DF,2F
03F1:  DATA DF,22
03F2:  DATA 6E,32
03F3:  DATA A0,31
03F4:  DATA 6F,38
03F5:  DATA F9,2F
03F6:  DATA E4,30
03F7:  DATA F4,30
03F8:  DATA DF,2F
03F9:  DATA DF,2F
03FA:  DATA DF,2F
03FB:  DATA DF,2F
03FC:  DATA DF,06
03FD:  DATA 8A,2F
03FE:  DATA DF,2F
03FF:  DATA DF,2F
0400:  DATA DF,2F
0401:  DATA DF,2F
0402:  DATA DF,2F
0403:  DATA DF,2F
0404:  DATA DF,2F
0405:  DATA DF,2F
0406:  DATA DF,2F
0407:  DATA DF,2F
0408:  DATA DF,2F
0409:  DATA DF,2F
040A:  DATA DF,2F
040B:  DATA DF,2F
040C:  DATA DF,06
040D:  DATA 8A,06
040E:  DATA 0A,00
040F:  DATA 53,3A
0410:  DATA 61,39
0411:  DATA 74,10
0412:  DATA 65,3C
0413:  DATA E5,31
0414:  DATA 75,3A
0415:  DATA E5,2F
0416:  DATA E3,37
0417:  DATA ED,36
0418:  DATA 61,37
0419:  DATA E4,06
041A:  DATA 0A,00
041B:  DATA 89,16
041C:  DATA 3E,10
041D:  DATA 55,38
041E:  DATA EC,34
041F:  DATA EE,35
0420:  DATA A0,31
0421:  DATA EF,36
0422:  DATA ED,30
0423:  DATA 6E,32
0424:  DATA 0D,05
0425:  DATA 00,01
0426:  DATA 09,10
0427:  DATA 20,10
0428:  DATA 54,39
0429:  DATA 61,37
042A:  DATA F3,36
042B:  DATA 69,3A
042C:  DATA A0,20
042D:  DATA E3,35
042E:  DATA EE,37
042F:  DATA 77,36
0430:  DATA 65,32
0431:  DATA E7,32
0432:  DATA 0D,05
0433:  DATA 00,00
0434:  DATA 89,16
0435:  DATA 3E,10
0436:  DATA 53,3A
0437:  DATA 61,3A
0438:  DATA F5,39
0439:  DATA A0,31
043A:  DATA E8,32
043B:  DATA E3,35
043C:  DATA 0D,05
043D:  DATA 00,01
043E:  DATA 89,04
043F:  DATA 2D,1F
0440:  DATA A0,26
0441:  DATA 79,10
0442:  DATA 73,3A
0443:  DATA 61,3A
0444:  DATA F5,39
0445:  DATA A0,34
0446:  DATA 73,10
0447:  DATA 25,32
0448:  DATA 0D,05
0449:  DATA 00,10
044A:  DATA 09,10
044B:  DATA 20,10
044C:  DATA 54,39
044D:  DATA 61,37
044E:  DATA F3,36
044F:  DATA 69,3A
0450:  DATA A0,26
0451:  DATA C9,29
0452:  DATA A0,26
0453:  DATA C3,2A
0454:  DATA A0,29
0455:  DATA F4,30
0456:  DATA F4,3A
0457:  DATA F3,06
0458:  DATA 0A,00
0459:  DATA E6,34
045A:  DATA EE,34
045B:  DATA 73,34
045C:  DATA 65,32
045D:  DATA A0,34
045E:  DATA 6E,10
045F:  DATA 73,3A
0460:  DATA 61,3A
0461:  DATA F5,39
0462:  DATA DF,31
0463:  DATA E8,32
0464:  DATA E3,35
0465:  DATA 0D,05
0466:  DATA 00,00
0467:  DATA 89,16
0468:  DATA 3E,10
0469:  DATA E9,39
046A:  DATA A0,29
046B:  DATA 4D,23
046C:  DATA A0,30
046D:  DATA F6,30
046E:  DATA 69,36
046F:  DATA 61,31
0470:  DATA EC,32
0471:  DATA 0D,05
0472:  DATA 00,01
0473:  DATA 09,10
0474:  DATA 20,10
0475:  DATA 54,39
0476:  DATA 61,37
0477:  DATA F3,36
0478:  DATA 69,3A
0479:  DATA A0,20
047A:  DATA E3,35
047B:  DATA EE,37
047C:  DATA 77,36
047D:  DATA 65,32
047E:  DATA E7,32
047F:  DATA 0D,05
0480:  DATA 00,01
0481:  DATA 89,04
0482:  DATA 2D,1F
0483:  DATA A0,30
0484:  DATA 6C,36
0485:  DATA EF,3B
0486:  DATA 65,32
0487:  DATA 0D,05
0488:  DATA 00,01
0489:  DATA 89,04
048A:  DATA 2D,1F
048B:  DATA 20,32
048C:  DATA 65,37
048D:  DATA E9,32
048E:  DATA E4,06
048F:  DATA 0A,00
0490:  DATA 0D,05
0491:  DATA 54,34
0492:  DATA E9,39
0493:  DATA 20,10
0494:  DATA ED,34
0495:  DATA F3,39
0496:  DATA E9,37
0497:  DATA 6E,10
0498:  DATA E9,39
0499:  DATA A0,32
049A:  DATA F8,32
049B:  DATA E3,3A
049C:  DATA F4,32
049D:  DATA E4,06
049E:  DATA 8A,04
049F:  DATA 2D,1F
04A0:  DATA 20,18
04A1:  DATA F8,12
04A2:  DATA E4,06
04A3:  DATA 0A,00
04A4:  DATA 0D,05
04A5:  DATA DF,2F
04A6:  DATA DF,2F
04A7:  DATA DF,2F
04A8:  DATA DF,2F
04A9:  DATA DF,2F
04AA:  DATA DF,2F
04AB:  DATA DF,2F
04AC:  DATA DF,2F
04AD:  DATA DF,2F
04AE:  DATA DF,2F
04AF:  DATA DF,2F
04B0:  DATA DF,2F
04B1:  DATA DF,2F
04B2:  DATA DF,2F
04B3:  DATA DF,2F
04B4:  DATA DF,2F
04B5:  DATA DF,2F
04B6:  DATA DF,2F
04B7:  DATA 0D,05
04B8:  DATA DF,2F
04B9:  DATA DF,2F
04BA:  DATA DF,2F
04BB:  DATA DF,2F
04BC:  DATA 53,3A
04BD:  DATA 61,39
04BE:  DATA 74,10
04BF:  DATA 65,3C
04C0:  DATA E5,31
04C1:  DATA 75,3A
04C2:  DATA E5,2F
04C3:  DATA ED,34
04C4:  DATA F3,39
04C5:  DATA E9,37
04C6:  DATA EE,2F
04C7:  DATA DF,2F
04C8:  DATA DF,2F
04C9:  DATA DF,2F
04CA:  DATA DF,06
04CB:  DATA 8A,06
04CC:  DATA 0A,00
04CD:  DATA C3,37
04CE:  DATA ED,36
04CF:  DATA 61,37
04D0:  DATA 64,10
04D1:  DATA 49,22
04D2:  DATA 3A,10
04D3:  DATA 25,2C
04D4:  DATA 0D,05
04D5:  DATA 0D,05
04D6:  DATA 00,01
04D7:  DATA 89,04
04D8:  DATA 2D,1F
04D9:  DATA A0,24
04DA:  DATA 6E,3B
04DB:  DATA 61,36
04DC:  DATA 69,32
04DD:  DATA A0,21
04DE:  DATA 4D,22
04DF:  DATA A0,24
04E0:  DATA C4,10
04E1:  DATA 0D,05
04E2:  DATA 00,01
04E3:  DATA 0D,05
04E4:  DATA DF,2F
04E5:  DATA DF,2F
04E6:  DATA DF,2F
04E7:  DATA DF,2F
04E8:  DATA DF,22
04E9:  DATA 6E,32
04EA:  DATA A0,32
04EB:  DATA F8,32
04EC:  DATA E3,3A
04ED:  DATA F4,32
04EE:  DATA DF,36
04EF:  DATA E9,39
04F0:  DATA F3,34
04F1:  DATA 6F,37
04F2:  DATA DF,2F
04F3:  DATA DF,2F
04F4:  DATA DF,2F
04F5:  DATA DF,2F
04F6:  DATA DF,06
04F7:  DATA 8A,2F
04F8:  DATA DF,2F
04F9:  DATA DF,2F
04FA:  DATA DF,2F
04FB:  DATA DF,2F
04FC:  DATA DF,2F
04FD:  DATA DF,2F
04FE:  DATA DF,2F
04FF:  DATA DF,2F
0500:  DATA DF,2F
0501:  DATA DF,2F
0502:  DATA DF,2F
0503:  DATA DF,2F
0504:  DATA DF,2F
0505:  DATA DF,2F
0506:  DATA DF,2F
0507:  DATA DF,2F
0508:  DATA DF,2F
0509:  DATA DF,06
050A:  DATA 0A,00
050B:  DATA 46,36
050C:  DATA E1,39
050D:  DATA 68,10
050E:  DATA 49,37
050F:  DATA 69,3A
0510:  DATA E9,30
0511:  DATA EC,34
0512:  DATA FA,32
0513:  DATA 0D,05
0514:  DATA 00,01
0515:  DATA 89,29
0516:  DATA 4D,23
0517:  DATA 20,1E
0518:  DATA 2D,00
0519:  DATA 30,3C
051A:  DATA B9,22
051B:  DATA 00,01
051C:  DATA 0D,05
051D:  DATA 89,29
051E:  DATA 4D,23
051F:  DATA A0,16
0520:  DATA 3E,00
0521:  DATA 0D,05
0522:  DATA 89,21
0523:  DATA EF,36
0524:  DATA 70,36
0525:  DATA 65,3A
0526:  DATA E5,06
0527:  DATA 0A,00
0528:  DATA 0D,05
0529:  DATA BD,1E
052A:  DATA BD,1E
052B:  DATA BD,1E
052C:  DATA BD,1E
052D:  DATA BD,1E
052E:  DATA BD,1E
052F:  DATA BD,1E
0530:  DATA BD,1E
0531:  DATA BD,1E
0532:  DATA BD,1E
0533:  DATA BD,1E
0534:  DATA BD,1E
0535:  DATA BD,1E
0536:  DATA BD,1E
0537:  DATA BD,1E
0538:  DATA BD,1E
0539:  DATA BD,1E
053A:  DATA BD,1E
053B:  DATA BD,1E
053C:  DATA BD,1E
053D:  DATA BD,1E
053E:  DATA BD,1E
053F:  DATA BD,1E
0540:  DATA BD,1E
0541:  DATA BD,1E
0542:  DATA BD,1E
0543:  DATA BD,1E
0544:  DATA BD,1E
0545:  DATA BD,1E
0546:  DATA BD,1E
0547:  DATA 0D,05
0548:  DATA 00,01
0549:  DATA 54,34
054A:  DATA E9,39
054B:  DATA A0,34
054C:  DATA 73,10
054D:  DATA CD,27
054E:  DATA CD,24
054F:  DATA CA,24
0550:  DATA A0,21
0551:  DATA C9,23
0552:  DATA 53,10
0553:  DATA D0,24
0554:  DATA 43,10
0555:  DATA 42,21
0556:  DATA 4D,10
0557:  DATA E6,37
0558:  DATA 72,10
0559:  DATA CD,24
055A:  DATA D3,1B
055B:  DATA 5F,21
055C:  DATA C2,26
055D:  DATA 31,17
055E:  DATA 0D,05
055F:  DATA 00,01
0560:  DATA CC,30
0561:  DATA 73,3A
0562:  DATA A0,3A
0563:  DATA 70,32
0564:  DATA 61,3A
0565:  DATA 65,32
0566:  DATA A0,37
0567:  DATA 6E,10
0568:  DATA 32,18
0569:  DATA B2,1A
056A:  DATA 2F,18
056B:  DATA B4,17
056C:  DATA B2,1A
056D:  DATA 2C,10
056E:  DATA E2,3C
056F:  DATA A0,24
0570:  DATA EE,37
0571:  DATA F5,32
0572:  DATA AE,06
0573:  DATA 8A,06
0574:  DATA 0A,00
0575:  DATA C3,24
0576:  DATA C7,29
0577:  DATA 20,28
0578:  DATA C9,21
0579:  DATA A0,29
057A:  DATA F4,30
057B:  DATA 72,3A
057C:  DATA A0,27
057D:  DATA F0,32
057E:  DATA F2,30
057F:  DATA F4,34
0580:  DATA 6F,37
0581:  DATA 0D,05
0582:  DATA 0D,05
0583:  DATA 00,01
0584:  DATA F7,30
0585:  DATA 69,3A
0586:  DATA 69,37
0587:  DATA 67,10
0588:  DATA E6,37
0589:  DATA 72,10
058A:  DATA C2,27
058B:  DATA D3,29
058C:  DATA 20,28
058D:  DATA C9,21
058E:  DATA A0,31
058F:  DATA EF,36
0590:  DATA ED,30
0591:  DATA 6E,32
0592:  DATA 2E,17
0593:  DATA 2E,00
0594:  DATA 46,39
0595:  DATA E1,36
0596:  DATA E5,24
0597:  DATA 44,1D
0598:  DATA A0,12
0599:  DATA 31,2C
059A:  DATA 0D,05
059B:  DATA 00,01
059C:  DATA F0,30
059D:  DATA 79,36
059E:  DATA EF,30
059F:  DATA 64,10
05A0:  DATA F3,34
05A1:  DATA FA,32
05A2:  DATA 3A,10
05A3:  DATA 25,32
05A4:  DATA 0D,05
05A5:  DATA 00,01
05A6:  DATA F0,30
05A7:  DATA 79,36
05A8:  DATA EF,30
05A9:  DATA 64,1D
05AA:  DATA 20,00
05AB:  DATA 0D,05
05AC:  DATA 0D,05
05AD:  DATA 00,01
05AE:  DATA 89,16
05AF:  DATA 3E,10
05B0:  DATA 49,37
05B1:  DATA F6,30
05B2:  DATA EC,34
05B3:  DATA 64,10
05B4:  DATA E3,37
05B5:  DATA ED,36
05B6:  DATA 61,37
05B7:  DATA E4,06
05B8:  DATA 0A,00
05B9:  DATA 0D,05
05BA:  DATA 0D,05
05BB:  DATA BD,1E
05BC:  DATA BD,1E
05BD:  DATA BD,1E
05BE:  DATA 0D,05
05BF:  DATA 0D,05
05C0:  DATA C6,34
05C1:  DATA EE,34
05C2:  DATA 73,34
05C3:  DATA 65,32
05C4:  DATA 20,38
05C5:  DATA F2,37
05C6:  DATA E3,32
05C7:  DATA F3,39
05C8:  DATA AE,06
05C9:  DATA 8A,2B
05CA:  DATA E1,34
05CB:  DATA 74,10
05CC:  DATA E6,37
05CD:  DATA 72,10
05CE:  DATA C2,27
05CF:  DATA D3,29
05D0:  DATA 20,28
05D1:  DATA C9,21
05D2:  DATA 20,3A
05D3:  DATA 75,39
05D4:  DATA 6E,10
05D5:  DATA 6F,33
05D6:  DATA 66,10
05D7:  DATA ED,32
05D8:  DATA 00,01
05D9:  DATA 45,37
05DA:  DATA 64,10
05DB:  DATA ED,30
05DC:  DATA 69,37
05DD:  DATA 0D,05
05DE:  DATA 00,00
*
0604:  MOVF   0B,W
0605:  BCF    0B.7
0606:  MOVLB  03
0607:  BSF    15.7
0608:  BSF    15.0
0609:  NOP
060A:  NOP
060B:  BTFSC  09.7
060C:  BSF    0B.7
060D:  MOVF   13,W
060E:  ANDLW  7F
060F:  BTFSC  03.2
0610:  GOTO   652
0611:  MOVLB  10
0612:  MOVWF  6D
0613:  MOVLB  03
0614:  MOVF   11,W
0615:  MOVLB  10
0616:  MOVWF  6E
0617:  MOVLB  03
0618:  MOVF   12,W
0619:  MOVLB  10
061A:  MOVWF  6F
061B:  MOVF   6D,W
061C:  MOVLB  11
061D:  MOVWF  20
061E:  MOVLB  00
061F:  CALL   5DF
0620:  MOVLB  10
0621:  MOVF   6E,W
0622:  MOVLB  03
0623:  MOVWF  11
0624:  MOVLB  10
0625:  MOVF   6F,W
0626:  MOVLB  03
0627:  MOVWF  12
0628:  MOVF   0B,W
0629:  BCF    0B.7
062A:  BSF    15.7
062B:  BSF    15.0
062C:  NOP
062D:  NOP
062E:  BTFSC  09.7
062F:  BSF    0B.7
0630:  RLF    13,W
0631:  RLF    14,W
0632:  ANDLW  7F
0633:  BTFSC  03.2
0634:  GOTO   652
0635:  MOVLB  10
0636:  MOVWF  6D
0637:  MOVLB  03
0638:  MOVF   11,W
0639:  MOVLB  10
063A:  MOVWF  6E
063B:  MOVLB  03
063C:  MOVF   12,W
063D:  MOVLB  10
063E:  MOVWF  6F
063F:  MOVF   6D,W
0640:  MOVLB  11
0641:  MOVWF  20
0642:  MOVLB  00
0643:  CALL   5DF
0644:  MOVLB  10
0645:  MOVF   6E,W
0646:  MOVLB  03
0647:  MOVWF  11
0648:  MOVLB  10
0649:  MOVF   6F,W
064A:  MOVLB  03
064B:  MOVWF  12
064C:  INCF   11,F
064D:  BTFSC  03.2
064E:  INCF   12,F
064F:  MOVLB  00
0650:  GOTO   604
0651:  MOVLB  03
0652:  MOVLB  00
0653:  RETURN
*
06D2:  MOVLB  10
06D3:  BTFSC  6D.7
06D4:  GOTO   6E8
06D5:  MOVLW  0F
06D6:  MOVWF  77
06D7:  SWAPF  6C,W
06D8:  ANDWF  77,F
06D9:  MOVLW  0A
06DA:  SUBWF  77,W
06DB:  BTFSC  03.0
06DC:  GOTO   6E0
06DD:  MOVLW  30
06DE:  ADDWF  77,F
06DF:  GOTO   6E2
06E0:  MOVF   6D,W
06E1:  ADDWF  77,F
06E2:  MOVF   77,W
06E3:  MOVLB  11
06E4:  MOVWF  20
06E5:  MOVLB  00
06E6:  CALL   5DF
06E7:  MOVLB  10
06E8:  MOVLW  0F
06E9:  ANDWF  6C,F
06EA:  MOVLW  0A
06EB:  SUBWF  6C,W
06EC:  BTFSC  03.0
06ED:  GOTO   6F0
06EE:  MOVLW  30
06EF:  GOTO   6F2
06F0:  BCF    6D.7
06F1:  MOVF   6D,W
06F2:  ADDWF  6C,F
06F3:  MOVF   6C,W
06F4:  MOVLB  11
06F5:  MOVWF  20
06F6:  MOVLB  00
06F7:  CALL   5DF
06F8:  RETURN
*
0775:  MOVF   0B,W
0776:  BCF    0B.7
0777:  MOVLB  03
0778:  BSF    15.7
0779:  BSF    15.0
077A:  NOP
077B:  NOP
077C:  BTFSC  09.7
077D:  BSF    0B.7
077E:  BTFSC  03.0
077F:  GOTO   7A9
0780:  MOVF   13,W
0781:  ANDLW  7F
0782:  MOVLB  10
0783:  MOVWF  6D
0784:  MOVLB  03
0785:  MOVF   11,W
0786:  MOVLB  10
0787:  MOVWF  6E
0788:  MOVLB  03
0789:  MOVF   12,W
078A:  MOVLB  10
078B:  MOVWF  6F
078C:  MOVF   6D,W
078D:  MOVLB  11
078E:  MOVWF  20
078F:  MOVLB  00
0790:  CALL   5DF
0791:  MOVLB  10
0792:  MOVF   6E,W
0793:  MOVLB  03
0794:  MOVWF  11
0795:  MOVLB  10
0796:  MOVF   6F,W
0797:  MOVLB  03
0798:  MOVWF  12
0799:  MOVF   0B,W
079A:  BCF    0B.7
079B:  BSF    15.7
079C:  BSF    15.0
079D:  NOP
079E:  NOP
079F:  BTFSC  09.7
07A0:  BSF    0B.7
07A1:  MOVLB  10
07A2:  DECFSZ 6C,F
07A3:  GOTO   7A5
07A4:  GOTO   7A7
07A5:  MOVLB  03
07A6:  GOTO   7A9
07A7:  GOTO   7CD
07A8:  MOVLB  03
07A9:  RLF    13,W
07AA:  RLF    14,W
07AB:  ANDLW  7F
07AC:  MOVLB  10
07AD:  MOVWF  6D
07AE:  MOVLB  03
07AF:  MOVF   11,W
07B0:  MOVLB  10
07B1:  MOVWF  6E
07B2:  MOVLB  03
07B3:  MOVF   12,W
07B4:  MOVLB  10
07B5:  MOVWF  6F
07B6:  MOVF   6D,W
07B7:  MOVLB  11
07B8:  MOVWF  20
07B9:  MOVLB  00
07BA:  CALL   5DF
07BB:  MOVLB  10
07BC:  MOVF   6E,W
07BD:  MOVLB  03
07BE:  MOVWF  11
07BF:  MOVLB  10
07C0:  MOVF   6F,W
07C1:  MOVLB  03
07C2:  MOVWF  12
07C3:  INCF   11,F
07C4:  BTFSC  03.2
07C5:  INCF   12,F
07C6:  BCF    03.0
07C7:  MOVLB  10
07C8:  DECFSZ 6C,F
07C9:  GOTO   7CB
07CA:  GOTO   7CD
07CB:  MOVLB  00
07CC:  GOTO   775
07CD:  MOVLB  00
07CE:  RETURN
*
0A33:  MOVLB  10
0A34:  MOVF   49,W
0A35:  CLRF   78
0A36:  SUBWF  48,W
0A37:  BTFSC  03.0
0A38:  GOTO   23C
0A39:  MOVF   48,W
0A3A:  MOVWF  77
0A3B:  GOTO   248
0A3C:  CLRF   77
0A3D:  MOVLW  08
0A3E:  MOVWF  4A
0A3F:  RLF    48,F
0A40:  RLF    77,F
0A41:  MOVF   49,W
0A42:  SUBWF  77,W
0A43:  BTFSC  03.0
0A44:  MOVWF  77
0A45:  RLF    78,F
0A46:  DECFSZ 4A,F
0A47:  GOTO   23F
0A48:  MOVLB  00
0A49:  RETURN
0A4A:  MOVLW  20
0A4B:  MOVLB  10
0A4C:  BTFSS  40.4
0A4D:  MOVLW  30
0A4E:  MOVWF  44
0A4F:  MOVF   3F,W
0A50:  MOVWF  77
0A51:  BTFSS  3F.7
0A52:  GOTO   25B
0A53:  COMF   77,F
0A54:  INCF   77,F
0A55:  MOVF   77,W
0A56:  MOVWF  3F
0A57:  MOVLW  2D
0A58:  MOVWF  44
0A59:  BSF    40.7
0A5A:  BSF    40.0
0A5B:  MOVF   3F,W
0A5C:  MOVWF  48
0A5D:  MOVLW  64
0A5E:  MOVWF  49
0A5F:  MOVLB  00
0A60:  CALL   233
0A61:  MOVF   77,W
0A62:  MOVLB  10
0A63:  MOVWF  3F
0A64:  MOVLW  30
0A65:  ADDWF  78,W
0A66:  MOVWF  45
0A67:  MOVF   3F,W
0A68:  MOVWF  48
0A69:  MOVLW  0A
0A6A:  MOVWF  49
0A6B:  MOVLB  00
0A6C:  CALL   233
0A6D:  MOVLW  30
0A6E:  ADDWF  77,W
0A6F:  MOVLB  10
0A70:  MOVWF  47
0A71:  MOVLW  30
0A72:  ADDWF  78,W
0A73:  MOVWF  46
0A74:  MOVF   44,W
0A75:  MOVWF  77
0A76:  MOVLW  30
0A77:  SUBWF  45,W
0A78:  BTFSC  03.2
0A79:  GOTO   27E
0A7A:  BSF    40.1
0A7B:  BTFSC  40.7
0A7C:  BSF    40.2
0A7D:  GOTO   292
0A7E:  MOVF   44,W
0A7F:  MOVWF  45
0A80:  MOVLW  20
0A81:  MOVWF  44
0A82:  MOVLW  30
0A83:  SUBWF  46,W
0A84:  BTFSC  03.2
0A85:  GOTO   28A
0A86:  BSF    40.0
0A87:  BTFSC  40.7
0A88:  BSF    40.1
0A89:  GOTO   292
0A8A:  BTFSS  03.2
0A8B:  BSF    40.0
0A8C:  BTFSS  03.2
0A8D:  GOTO   292
0A8E:  MOVF   45,W
0A8F:  MOVWF  46
0A90:  MOVLW  20
0A91:  MOVWF  45
0A92:  BTFSC  40.2
0A93:  GOTO   299
0A94:  BTFSC  40.1
0A95:  GOTO   2A1
0A96:  BTFSC  40.0
0A97:  GOTO   2A9
0A98:  GOTO   2B1
0A99:  MOVF   44,W
0A9A:  MOVLB  11
0A9B:  MOVWF  20
0A9C:  MOVLP  00
0A9D:  MOVLB  00
0A9E:  CALL   5DF
0A9F:  MOVLP  08
0AA0:  MOVLB  10
0AA1:  MOVF   45,W
0AA2:  MOVLB  11
0AA3:  MOVWF  20
0AA4:  MOVLP  00
0AA5:  MOVLB  00
0AA6:  CALL   5DF
0AA7:  MOVLP  08
0AA8:  MOVLB  10
0AA9:  MOVF   46,W
0AAA:  MOVLB  11
0AAB:  MOVWF  20
0AAC:  MOVLP  00
0AAD:  MOVLB  00
0AAE:  CALL   5DF
0AAF:  MOVLP  08
0AB0:  MOVLB  10
0AB1:  MOVF   47,W
0AB2:  MOVLB  11
0AB3:  MOVWF  20
0AB4:  MOVLP  00
0AB5:  MOVLB  00
0AB6:  CALL   5DF
0AB7:  MOVLP  08
0AB8:  RETURN
*
0AC9:  MOVF   78,W
0ACA:  BTFSC  03.2
0ACB:  GOTO   2D0
0ACC:  MOVF   77,W
0ACD:  MOVWI  W,[FSR0++]
0ACE:  DECFSZ 78,F
0ACF:  GOTO   2CC
*
0B66:  CLRF   77
0B67:  CLRF   78
0B68:  MOVLB  10
0B69:  MOVF   4C,W
0B6A:  BCF    03.0
0B6B:  BTFSC  4D.0
0B6C:  ADDWF  77,F
0B6D:  RRF    77,F
0B6E:  RRF    78,F
0B6F:  BTFSC  4D.1
0B70:  ADDWF  77,F
0B71:  RRF    77,F
0B72:  RRF    78,F
0B73:  BTFSC  4D.2
0B74:  ADDWF  77,F
0B75:  RRF    77,F
0B76:  RRF    78,F
0B77:  BTFSC  4D.3
0B78:  ADDWF  77,F
0B79:  RRF    77,F
0B7A:  RRF    78,F
0B7B:  BTFSC  4D.4
0B7C:  ADDWF  77,F
0B7D:  RRF    77,F
0B7E:  RRF    78,F
0B7F:  BTFSC  4D.5
0B80:  ADDWF  77,F
0B81:  RRF    77,F
0B82:  RRF    78,F
0B83:  BTFSC  4D.6
0B84:  ADDWF  77,F
0B85:  RRF    77,F
0B86:  RRF    78,F
0B87:  BTFSC  4D.7
0B88:  ADDWF  77,F
0B89:  RRF    77,F
0B8A:  RRF    78,F
0B8B:  MOVLB  00
0B8C:  RETURN
*
0BAB:  MOVF   46,W
0BAC:  MOVWF  48
0BAD:  MOVLW  64
0BAE:  MOVWF  49
0BAF:  MOVLB  00
0BB0:  CALL   233
0BB1:  MOVF   77,W
0BB2:  MOVLB  10
0BB3:  MOVWF  46
0BB4:  MOVF   78,W
0BB5:  MOVLW  30
0BB6:  BTFSS  03.2
0BB7:  GOTO   3BF
0BB8:  BTFSS  47.1
0BB9:  GOTO   3CB
0BBA:  BTFSC  47.3
0BBB:  GOTO   3CB
0BBC:  BTFSC  47.4
0BBD:  MOVLW  20
0BBE:  GOTO   3C2
0BBF:  BCF    47.3
0BC0:  BCF    47.4
0BC1:  BSF    47.0
0BC2:  ADDWF  78,F
0BC3:  MOVF   78,W
0BC4:  MOVLB  11
0BC5:  MOVWF  20
0BC6:  MOVLP  00
0BC7:  MOVLB  00
0BC8:  CALL   5DF
0BC9:  MOVLP  08
0BCA:  MOVLB  10
0BCB:  MOVF   46,W
0BCC:  MOVWF  48
0BCD:  MOVLW  0A
0BCE:  MOVWF  49
0BCF:  MOVLB  00
0BD0:  CALL   233
0BD1:  MOVF   77,W
0BD2:  MOVLB  10
0BD3:  MOVWF  46
0BD4:  MOVF   78,W
0BD5:  MOVLW  30
0BD6:  BTFSS  03.2
0BD7:  GOTO   3DE
0BD8:  BTFSC  47.3
0BD9:  GOTO   3E7
0BDA:  BTFSS  47.0
0BDB:  GOTO   3E7
0BDC:  BTFSC  47.4
0BDD:  MOVLW  20
0BDE:  ADDWF  78,F
0BDF:  MOVF   78,W
0BE0:  MOVLB  11
0BE1:  MOVWF  20
0BE2:  MOVLP  00
0BE3:  MOVLB  00
0BE4:  CALL   5DF
0BE5:  MOVLP  08
0BE6:  MOVLB  10
0BE7:  MOVLW  30
0BE8:  ADDWF  46,F
0BE9:  MOVF   46,W
0BEA:  MOVLB  11
0BEB:  MOVWF  20
0BEC:  MOVLP  00
0BED:  MOVLB  00
0BEE:  CALL   5DF
0BEF:  MOVLP  08
.................... 
.................... #list
.................... 
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
*
0E53:  MOVLW  25
0E54:  MOVWF  05
0E55:  MOVLW  1D
0E56:  MOVWF  04
0E57:  MOVF   00,W
0E58:  BTFSC  03.2
0E59:  GOTO   668
0E5A:  MOVLW  05
0E5B:  MOVWF  78
0E5C:  CLRF   77
0E5D:  DECFSZ 77,F
0E5E:  GOTO   65D
0E5F:  DECFSZ 78,F
0E60:  GOTO   65C
0E61:  MOVLW  2E
0E62:  MOVWF  77
0E63:  DECFSZ 77,F
0E64:  GOTO   663
0E65:  GOTO   666
0E66:  DECFSZ 00,F
0E67:  GOTO   65A
0E68:  RETURN
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
*
0B27:  MOVLB  00
0B28:  BTFSS  11.4
0B29:  GOTO   328
0B2A:  MOVLB  03
0B2B:  MOVWF  1A
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
*
05DF:  MOVLB  01
05E0:  BCF    0D.4
05E1:  MOVLB  02
05E2:  BCF    0D.4
05E3:  MOVLW  08
05E4:  MOVWF  78
05E5:  GOTO   5E6
05E6:  NOP
05E7:  BSF    78.7
05E8:  GOTO   5F9
05E9:  BCF    78.7
05EA:  MOVLB  11
05EB:  RRF    20,F
05EC:  MOVLB  02
05ED:  BTFSC  03.0
05EE:  BSF    0D.4
05EF:  BTFSS  03.0
05F0:  BCF    0D.4
05F1:  BSF    78.6
05F2:  GOTO   5F9
05F3:  BCF    78.6
05F4:  DECFSZ 78,F
05F5:  GOTO   5EA
05F6:  GOTO   5F7
05F7:  NOP
05F8:  BSF    0D.4
05F9:  MOVLW  84
05FA:  MOVWF  04
05FB:  DECFSZ 04,F
05FC:  GOTO   5FB
05FD:  NOP
05FE:  BTFSC  78.7
05FF:  GOTO   5E9
0600:  BTFSC  78.6
0601:  GOTO   5F3
0602:  MOVLB  00
0603:  RETURN
.................... 
.................... 
.................... #define SPI0_CS  PIN_D1
.................... #use spi(MASTER, CLK=PIN_C3, DI=PIN_C4, DO=PIN_C5, BAUD=400000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
06C5:  MOVLB  04
06C6:  MOVF   11,W
06C7:  MOVLB  10
06C8:  MOVF   3A,W
06C9:  MOVLB  04
06CA:  MOVWF  11
06CB:  RRF    14,W
06CC:  BTFSS  03.0
06CD:  GOTO   6CB
06CE:  MOVF   11,W
06CF:  MOVWF  77
06D0:  MOVLB  00
06D1:  RETURN
.................... // MISO PIN_C5, MOSI PIN_C4, SCK PIN_C3
.................... 
.................... 
.................... #define SPI1_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_A5
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A2
.................... 
.................... // DI/O___
.................... #define CIGS_CONNECT PIN_C0
.................... #define EN_NPWR PIN_C3  //Negative Power
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #include "./lib/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x00,
....................     DENY  = 0x01
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... #include "./lib/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile unsigned int16 duration_sec = 0;
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status = IDLE;
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... #include "./lib/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... 
.................... 
.................... // __________ values _________
.................... 
.................... volatile unsigned int32 subsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... 
.................... // __________ functions _________
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... 
.................... #include "./src/timer.c"
.................... #INT_TIMER0
.................... static void TIMER0_isr(void)
.................... {
....................    // every 0.01 sec interrupts
....................    set_timer0(100);
*
0047:  MOVLW  64
0048:  MOVWF  15
.................... 
....................    if (++subsec >= 100)
0049:  MOVLW  01
004A:  ADDWF  2C,F
004B:  BTFSC  03.0
004C:  INCF   2D,F
004D:  BTFSC  03.2
004E:  INCF   2E,F
004F:  BTFSC  03.2
0050:  INCF   2F,F
0051:  MOVF   2F,F
0052:  BTFSS  03.2
0053:  GOTO   05E
0054:  MOVF   2E,F
0055:  BTFSS  03.2
0056:  GOTO   05E
0057:  MOVF   2D,F
0058:  BTFSS  03.2
0059:  GOTO   05E
005A:  MOVF   2C,W
005B:  SUBLW  63
005C:  BTFSC  03.0
005D:  GOTO   08A
....................    {
....................       subsec = 0;
005E:  CLRF   2F
005F:  CLRF   2E
0060:  CLRF   2D
0061:  CLRF   2C
....................       sec++;
0062:  MOVLW  01
0063:  ADDWF  30,F
0064:  BTFSC  03.0
0065:  INCF   31,F
0066:  BTFSC  03.2
0067:  INCF   32,F
0068:  BTFSC  03.2
0069:  INCF   33,F
.................... 
....................       if (sec >= SEC_IN_A_DAY)
006A:  MOVF   33,F
006B:  BTFSS  03.2
006C:  GOTO   07F
006D:  MOVF   32,W
006E:  SUBLW  00
006F:  BTFSC  03.0
0070:  GOTO   08A
0071:  XORLW  FF
0072:  BTFSS  03.2
0073:  GOTO   07F
0074:  MOVF   31,W
0075:  SUBLW  50
0076:  BTFSC  03.0
0077:  GOTO   08A
0078:  XORLW  FF
0079:  BTFSS  03.2
007A:  GOTO   07F
007B:  MOVF   30,W
007C:  SUBLW  7F
007D:  BTFSC  03.0
007E:  GOTO   08A
....................       {
....................          sec -= SEC_IN_A_DAY;
007F:  MOVLW  80
0080:  SUBWF  30,F
0081:  MOVLW  51
0082:  SUBWFC 31,F
0083:  MOVLW  01
0084:  SUBWFC 32,F
0085:  MOVLW  00
0086:  SUBWFC 33,F
....................          day++;
0087:  INCF   34,F
0088:  BTFSC  03.2
0089:  INCF   35,F
....................       }
....................    }
008A:  BCF    0B.2
008B:  MOVLP  00
008C:  GOTO   02A
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
06A8:  MOVLW  8D
06A9:  MOVLB  03
06AA:  MOVWF  11
06AB:  MOVLW  00
06AC:  MOVWF  12
06AD:  MOVLB  00
06AE:  CALL   604
....................    clear_interrupt(INT_TIMER1);
06AF:  BCF    11.0
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1); //Config TMR1, external clock, prescaler=1
06B0:  MOVLW  87
06B1:  MOVWF  18
06B2:  CLRF   19
....................    set_timer1(0x8000); //timer1 for 1 second interruption
06B3:  CLRF   16
06B4:  MOVLW  80
06B5:  MOVWF  17
06B6:  CLRF   16
06B7:  NOP
....................    //T1OSCEN = 1; //Enable TMR1 Oscillator
....................    enable_interrupts(INT_TIMER1);
06B8:  MOVLB  01
06B9:  BSF    11.0
....................    enable_interrupts(GLOBAL);
06BA:  MOVLW  C0
06BB:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
06BC:  MOVLW  97
06BD:  MOVLB  03
06BE:  MOVWF  11
06BF:  MOVLW  00
06C0:  MOVWF  12
06C1:  MOVLB  00
06C2:  CALL   604
06C3:  MOVLP  10
06C4:  GOTO   449 (RETURN)
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "./lib/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA
.................... static void RDA_isr(void);
.................... 
.................... void initialize_uart();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... #include "./src/uart.c"
.................... #INT_RDA
.................... static void RDA_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
009D:  MOVF   2B,W
009E:  SUBLW  02
009F:  BTFSC  03.2
00A0:  GOTO   0A5
00A1:  MOVF   2B,W
00A2:  SUBLW  05
00A3:  BTFSS  03.2
00A4:  GOTO   0A7
00A5:  BTFSS  2A.0
00A6:  GOTO   0BA
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
00A7:  MOVF   58,W
00A8:  SUBLW  1F
00A9:  BTFSS  03.0
00AA:  GOTO   0BA
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
00AB:  MOVF   58,W
00AC:  INCF   58,F
00AD:  ANDLW  1F
00AE:  ADDLW  18
00AF:  MOVWF  04
00B0:  MOVLW  20
00B1:  MOVWF  05
00B2:  BTFSC  03.0
00B3:  INCF   05,F
00B4:  BTFSS  11.5
00B5:  GOTO   0B4
00B6:  MOVLB  03
00B7:  MOVF   19,W
00B8:  MOVWF  00
00B9:  MOVLB  00
00BA:  BCF    11.5
00BB:  MOVLP  00
00BC:  GOTO   02A
.................... }
.................... 
.................... void uart_init()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
0694:  MOVLW  BD
0695:  MOVLB  03
0696:  MOVWF  11
0697:  MOVLW  00
0698:  MOVWF  12
0699:  MOVLB  00
069A:  CALL   604
....................    enable_interrupts(INT_RDA);
069B:  MOVLB  01
069C:  BSF    11.5
....................    enable_interrupts(global);
069D:  MOVLW  C0
069E:  IORWF  0B,F
....................    fprintf(PC, "\tComplete\r\n");
069F:  MOVLW  C6
06A0:  MOVLB  03
06A1:  MOVWF  11
06A2:  MOVLW  00
06A3:  MOVWF  12
06A4:  MOVLB  00
06A5:  CALL   604
06A6:  MOVLP  10
06A7:  GOTO   446 (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
0AB9:  MOVLB  10
0ABA:  MOVF   36,W
0ABB:  MOVWF  7A
0ABC:  MOVF   35,W
0ABD:  MOVWF  04
0ABE:  MOVF   7A,W
0ABF:  MOVWF  05
0AC0:  MOVF   00,W
0AC1:  MOVWF  38
0AC2:  MOVF   34,W
0AC3:  MOVWF  05
0AC4:  MOVF   33,W
0AC5:  MOVWF  04
0AC6:  CLRF   77
0AC7:  MOVF   38,W
0AC8:  MOVWF  78
....................    *receive_signal_size = 0;
*
0AD0:  MOVF   35,W
0AD1:  MOVWF  04
0AD2:  MOVF   36,W
0AD3:  MOVWF  05
0AD4:  CLRF   00
0AD5:  MOVLP  10
0AD6:  MOVLB  00
0AD7:  GOTO   50C (RETURN)
.................... }
.................... 
.................... // EOF
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... // Missions
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "../mmj_cigs_mode.c"
.................... #include "include/mmj_cigs_func.h"
.................... #ifndef MMJ_CIGS_FUNC_H
.................... #define MMJ_CIGS_FUNC_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... /*
.................... 
.................... // Packet format
.................... #define PACKET_SIZE 64
.................... #define CHECKSUM
.................... //volatile unsigned int8 PACKET_DATA[MISSION_DATA_SIZE] = {0x00};
.................... */
.................... 
.................... 
.................... 
.................... // _________ functions ____________
.................... #define DATA_BUFFER_SIZE 150
.................... #define HEADER_SIZE 12
.................... volatile unsigned int16 data_buffer[DATA_BUFFER_SIZE*2] = {0x00};
.................... volatile unsigned int8 cigs_data[DATA_BUFFER_SIZE*2] = {0x00};
.................... volatile unsigned int8 cigs_data_header[HEADER_SIZE] = {0x00};
.................... volatile unsigned int32 measured_time = 0;
.................... volatile unsigned int16 measured_pd_start = 0;
.................... volatile unsigned int16 measured_pd_end = 0;
.................... volatile unsigned int16 measured_temp_top = 0;
.................... volatile unsigned int16 measured_temp_bot = 0;
.................... 
.................... volatile unsigned int8 packet_data[64] = {0x00};
.................... 
.................... #separate
.................... void sweep(unsigned int8 parameter[]);
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step);
.................... void convert_header_data(void); 
.................... 
.................... 
.................... #include "../mmj_cigs_func.c"
.................... #include "include/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... #define SPI0_CS  PIN_D1
.................... #use spi(MASTER, CLK=PIN_C3, DI=PIN_C4, DO=PIN_C5, BAUD=400000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... // MISO PIN_C5, MOSI PIN_C4, SCK PIN_C3
.................... 
.................... 
.................... #define SPI1_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_A5
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A2
.................... 
.................... // DI/O___
.................... #define CIGS_CONNECT PIN_C0
.................... #define EN_NPWR PIN_C3  //Negative Power
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... //#include "include/mmj_cigs_func.h"
.................... 
.................... void io_init()
.................... {
....................     fprintf(PC, "IO Initialize\r\n");
*
0654:  MOVLW  CC
0655:  MOVLB  03
0656:  MOVWF  11
0657:  MOVLW  00
0658:  MOVWF  12
0659:  MOVLB  00
065A:  CALL   604
....................     output_low(CIGS_CONNECT);
065B:  MOVLB  01
065C:  BCF    0E.0
065D:  MOVLB  02
065E:  BCF    0E.0
....................     output_low(EN_NPWR);
065F:  MOVLB  01
0660:  BCF    0E.3
0661:  MOVLB  02
0662:  BCF    0E.3
....................     fprintf(PC, "\tComplete\r\n");
0663:  MOVLW  D4
0664:  MOVLB  03
0665:  MOVWF  11
0666:  MOVLW  00
0667:  MOVWF  12
0668:  MOVLB  00
0669:  CALL   604
066A:  MOVLP  10
066B:  GOTO   440 (RETURN)
.................... }
.................... 
.................... void adc_init()
.................... {
....................    fprintf(PC, "ADC Initialize\r\n");
066C:  MOVLW  DA
066D:  MOVLB  03
066E:  MOVWF  11
066F:  MOVLW  00
0670:  MOVWF  12
0671:  MOVLB  00
0672:  CALL   604
....................     //setup ADC
....................    setup_oscillator(OSC_16MHZ);   //oscillator speed (crystal)
0673:  MOVLW  78
0674:  MOVLB  01
0675:  MOVWF  19
....................    setup_adc_ports(CIGS_VOLT | CIGS_CURR | TEMP_BOT | TEMP_TOP | PD , VSS_VDD);
0676:  BCF    1E.0
0677:  BCF    1E.1
0678:  BCF    1E.2
0679:  MOVLW  00
067A:  MOVLB  03
067B:  MOVWF  0C
067C:  MOVWF  10
067D:  MOVWF  0D
067E:  MOVLW  E7
067F:  MOVWF  0F
....................    setup_adc(ADC_CLOCK_DIV_64);
0680:  MOVLB  01
0681:  BCF    1E.4
0682:  BSF    1E.5
0683:  BSF    1E.6
0684:  BSF    1E.7
0685:  BSF    1D.0
.................... 
....................    //setup DAC
....................    setup_dac(DAC_OUTPUT1 | DAC_VSS_VDD);                                        //DAC output at pin DAC output1 from 0-VDD volts  
0686:  MOVLW  A0
0687:  MOVLB  02
0688:  MOVWF  18
....................    dac_write(50);                                                               
0689:  MOVLW  32
068A:  MOVWF  19
....................    fprintf(PC, "\tComplete\r\n");
068B:  MOVLW  E3
068C:  MOVLB  03
068D:  MOVWF  11
068E:  MOVLW  00
068F:  MOVWF  12
0690:  MOVLB  00
0691:  CALL   604
0692:  MOVLP  10
0693:  GOTO   443 (RETURN)
.................... }
.................... 
.................... #Separate
.................... void sweep(unsigned int8 parameter)
.................... {
.................... 
....................     fprintf(PC, "Start SWEEP\r\n");
*
0B8D:  MOVLW  E9
0B8E:  MOVLB  03
0B8F:  MOVWF  11
0B90:  MOVLW  00
0B91:  MOVWF  12
0B92:  MOVLP  00
0B93:  MOVLB  00
0B94:  CALL   604
0B95:  MOVLP  08
....................     unsigned int8 measurement_step = parameter; // Get the measurement step from the parameter array
0B96:  MOVLB  10
0B97:  MOVF   42,W
0B98:  MOVWF  43
....................     fprintf(PC, "\tSweep step : %u\r\n", measurement_step);
0B99:  MOVLW  F0
0B9A:  MOVLB  03
0B9B:  MOVWF  11
0B9C:  MOVLW  00
0B9D:  MOVWF  12
0B9E:  BCF    03.0
0B9F:  MOVLW  0E
0BA0:  MOVLB  10
0BA1:  MOVWF  6C
0BA2:  MOVLP  00
0BA3:  MOVLB  00
0BA4:  CALL   775
0BA5:  MOVLP  08
0BA6:  MOVLB  10
0BA7:  MOVF   43,W
0BA8:  MOVWF  46
0BA9:  MOVLW  1B
0BAA:  MOVWF  47
*
0BF0:  MOVLW  0D
0BF1:  MOVLB  11
0BF2:  MOVWF  20
0BF3:  MOVLP  00
0BF4:  MOVLB  00
0BF5:  CALL   5DF
0BF6:  MOVLP  08
0BF7:  MOVLW  0A
0BF8:  MOVLB  11
0BF9:  MOVWF  20
0BFA:  MOVLP  00
0BFB:  MOVLB  00
0BFC:  CALL   5DF
0BFD:  MOVLP  08
....................     output_high(CIGS_CONNECT);
0BFE:  MOVLB  01
0BFF:  BCF    0E.0
0C00:  MOVLB  02
0C01:  BSF    0E.0
.................... 
....................     // read temperature
....................     set_adc_channel(TEMP_TOP);
0C02:  MOVLW  14
0C03:  MOVWF  78
0C04:  MOVLB  01
0C05:  MOVF   1D,W
0C06:  ANDLW  83
0C07:  IORWF  78,W
0C08:  MOVWF  1D
0C09:  MOVLW  0F
0C0A:  MOVWF  78
0C0B:  MOVF   1F,W
0C0C:  ANDLW  F0
0C0D:  IORWF  78,W
0C0E:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0C0F:  MOVLW  0D
0C10:  MOVWF  77
0C11:  DECFSZ 77,F
0C12:  GOTO   411
....................     measured_temp_top = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0C13:  BSF    1D.1
0C14:  BTFSC  1D.1
0C15:  GOTO   414
0C16:  MOVF   1B,W
0C17:  MOVWF  78
0C18:  MOVF   1C,W
0C19:  MOVLB  0C
0C1A:  MOVWF  32
0C1B:  MOVF   78,W
0C1C:  MOVWF  31
....................     set_adc_channel(TEMP_BOT);
0C1D:  MOVLW  0C
0C1E:  MOVWF  78
0C1F:  MOVLB  01
0C20:  MOVF   1D,W
0C21:  ANDLW  83
0C22:  IORWF  78,W
0C23:  MOVWF  1D
0C24:  MOVLW  0F
0C25:  MOVWF  78
0C26:  MOVF   1F,W
0C27:  ANDLW  F0
0C28:  IORWF  78,W
0C29:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0C2A:  MOVLW  0D
0C2B:  MOVWF  77
0C2C:  DECFSZ 77,F
0C2D:  GOTO   42C
....................     measured_temp_bot = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0C2E:  BSF    1D.1
0C2F:  BTFSC  1D.1
0C30:  GOTO   42F
0C31:  MOVF   1B,W
0C32:  MOVWF  78
0C33:  MOVF   1C,W
0C34:  MOVLB  0C
0C35:  MOVWF  34
0C36:  MOVF   78,W
0C37:  MOVWF  33
.................... 
....................     // read PD value
....................     set_adc_channel(PD);
0C38:  MOVLW  00
0C39:  MOVWF  78
0C3A:  MOVLB  01
0C3B:  MOVF   1D,W
0C3C:  ANDLW  83
0C3D:  IORWF  78,W
0C3E:  MOVWF  1D
0C3F:  MOVLW  0F
0C40:  MOVWF  78
0C41:  MOVF   1F,W
0C42:  ANDLW  F0
0C43:  IORWF  78,W
0C44:  MOVWF  1F
....................     delay_us(10); // wait for the ADC to stabilize
0C45:  MOVLW  0D
0C46:  MOVWF  77
0C47:  DECFSZ 77,F
0C48:  GOTO   447
....................     measured_pd_start = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0C49:  BSF    1D.1
0C4A:  BTFSC  1D.1
0C4B:  GOTO   44A
0C4C:  MOVF   1B,W
0C4D:  MOVWF  78
0C4E:  MOVF   1C,W
0C4F:  MOVLB  0C
0C50:  MOVWF  2E
0C51:  MOVF   78,W
0C52:  MOVWF  2D
....................     
....................     // read timestamp
....................     //measured_time = timer0_get_time(); // read time from timer0
.................... 
....................     // CIGS value
....................     for (unsigned int16 count = 0; count < measurement_step; count++)
0C53:  MOVLB  10
0C54:  CLRF   45
0C55:  CLRF   44
0C56:  MOVF   45,F
0C57:  BTFSS  03.2
0C58:  GOTO   4C0
0C59:  MOVF   43,W
0C5A:  SUBWF  44,W
0C5B:  BTFSC  03.0
0C5C:  GOTO   4C0
....................     {    
....................         // set DAC value
....................         dac_write(count);
0C5D:  MOVF   44,W
0C5E:  MOVLB  02
0C5F:  MOVWF  19
....................         delay_us(100); // wait for the DAC to stabilize
0C60:  MOVLW  85
0C61:  MOVWF  77
0C62:  DECFSZ 77,F
0C63:  GOTO   462
.................... 
....................         // read CIGS voltage and current
....................         set_adc_channel(CIGS_VOLT);       
0C64:  MOVLW  00
0C65:  MOVWF  78
0C66:  MOVLB  01
0C67:  MOVF   1D,W
0C68:  ANDLW  83
0C69:  IORWF  78,W
0C6A:  MOVWF  1D
0C6B:  MOVLW  0F
0C6C:  MOVWF  78
0C6D:  MOVF   1F,W
0C6E:  ANDLW  F0
0C6F:  IORWF  78,W
0C70:  MOVWF  1F
....................         delay_us(10); // wait for the ADC to stabilize
0C71:  MOVLW  0D
0C72:  MOVWF  77
0C73:  DECFSZ 77,F
0C74:  GOTO   473
....................         data_buffer[count*2] = read_adc(ADC_START_AND_READ);  // read voltage at adc pin
0C75:  BCF    03.0
0C76:  MOVLB  10
0C77:  RLF    44,W
0C78:  MOVWF  46
0C79:  RLF    45,W
0C7A:  MOVWF  47
0C7B:  BCF    03.0
0C7C:  RLF    46,W
0C7D:  MOVWF  79
0C7E:  RLF    47,W
0C7F:  MOVWF  7A
0C80:  MOVF   79,W
0C81:  ADDLW  39
0C82:  MOVWF  04
0C83:  MOVLW  20
0C84:  ADDWFC 7A,W
0C85:  MOVWF  05
0C86:  MOVLB  01
0C87:  BSF    1D.1
0C88:  BTFSC  1D.1
0C89:  GOTO   488
0C8A:  MOVF   1B,W
0C8B:  MOVWF  00
0C8C:  MOVF   1C,W
0C8D:  MOVWI  W,[FSR0+01]
....................         set_adc_channel(CIGS_CURR);
0C8E:  MOVLW  04
0C8F:  MOVWF  78
0C90:  MOVF   1D,W
0C91:  ANDLW  83
0C92:  IORWF  78,W
0C93:  MOVWF  1D
0C94:  MOVLW  0F
0C95:  MOVWF  78
0C96:  MOVF   1F,W
0C97:  ANDLW  F0
0C98:  IORWF  78,W
0C99:  MOVWF  1F
....................         delay_us(10); // wait for the ADC to stabilize
0C9A:  MOVLW  0D
0C9B:  MOVWF  77
0C9C:  DECFSZ 77,F
0C9D:  GOTO   49C
....................         data_buffer[count*2+1] = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0C9E:  BCF    03.0
0C9F:  MOVLB  10
0CA0:  RLF    44,W
0CA1:  MOVWF  46
0CA2:  RLF    45,W
0CA3:  MOVWF  47
0CA4:  MOVLW  01
0CA5:  ADDWF  46,F
0CA6:  MOVLW  00
0CA7:  ADDWFC 47,F
0CA8:  BCF    03.0
0CA9:  RLF    46,W
0CAA:  MOVWF  79
0CAB:  RLF    47,W
0CAC:  MOVWF  7A
0CAD:  MOVF   79,W
0CAE:  ADDLW  39
0CAF:  MOVWF  04
0CB0:  MOVLW  20
0CB1:  ADDWFC 7A,W
0CB2:  MOVWF  05
0CB3:  MOVLB  01
0CB4:  BSF    1D.1
0CB5:  BTFSC  1D.1
0CB6:  GOTO   4B5
0CB7:  MOVF   1B,W
0CB8:  MOVWF  00
0CB9:  MOVF   1C,W
0CBA:  MOVWI  W,[FSR0+01]
0CBB:  MOVLB  10
0CBC:  INCF   44,F
0CBD:  BTFSC  03.2
0CBE:  INCF   45,F
0CBF:  GOTO   456
....................     }
.................... 
....................     fprintf(PC, "END SWEEP\r\n");
0CC0:  MOVLW  FA
0CC1:  MOVLB  03
0CC2:  MOVWF  11
0CC3:  MOVLW  00
0CC4:  MOVWF  12
0CC5:  MOVLP  00
0CC6:  MOVLB  00
0CC7:  CALL   604
0CC8:  MOVLP  08
....................     // read PD value
....................     set_adc_channel(PD);
0CC9:  MOVLW  00
0CCA:  MOVWF  78
0CCB:  MOVLB  01
0CCC:  MOVF   1D,W
0CCD:  ANDLW  83
0CCE:  IORWF  78,W
0CCF:  MOVWF  1D
0CD0:  MOVLW  0F
0CD1:  MOVWF  78
0CD2:  MOVF   1F,W
0CD3:  ANDLW  F0
0CD4:  IORWF  78,W
0CD5:  MOVWF  1F
....................     measured_pd_end = read_adc(ADC_START_AND_READ); // read voltage at adc pin
0CD6:  BSF    1D.1
0CD7:  BTFSC  1D.1
0CD8:  GOTO   4D7
0CD9:  MOVF   1B,W
0CDA:  MOVWF  78
0CDB:  MOVF   1C,W
0CDC:  MOVLB  0C
0CDD:  MOVWF  30
0CDE:  MOVF   78,W
0CDF:  MOVWF  2F
.................... 
....................     convert_cigs_data(measurement_step);
0CE0:  MOVLB  10
0CE1:  MOVF   43,W
0CE2:  MOVWF  46
....................     //convert_header_data();    
....................     output_low(CIGS_CONNECT);
*
0E2B:  MOVLB  01
0E2C:  BCF    0E.0
0E2D:  MOVLB  02
0E2E:  BCF    0E.0
0E2F:  MOVLP  08
0E30:  MOVLB  00
0E31:  GOTO   646 (RETURN)
.................... }
.................... 
.................... 
.................... void convert_cigs_data(unsigned int8 measurement_step)
.................... {
....................     fprintf(PC, "Logged CIGS data\r\n");
*
0CE3:  MOVLW  00
0CE4:  MOVLB  03
0CE5:  MOVWF  11
0CE6:  MOVLW  01
0CE7:  MOVWF  12
0CE8:  MOVLP  00
0CE9:  MOVLB  00
0CEA:  CALL   604
0CEB:  MOVLP  08
....................     // unsigned int8 measurement_step = 100;
....................     // Save CIGS data to memory
....................     for (unsigned int8 i = 0; i < measurement_step; i++)
0CEC:  MOVLB  10
0CED:  CLRF   47
0CEE:  MOVF   46,W
0CEF:  SUBWF  47,W
0CF0:  BTFSC  03.0
0CF1:  GOTO   61D
....................     {
....................         cigs_data[i*3]      = (data_buffer[i*2] >> 4) & 0xFF;
0CF2:  MOVF   47,W
0CF3:  MOVWF  4C
0CF4:  MOVLW  03
0CF5:  MOVWF  4D
0CF6:  MOVLB  00
0CF7:  CALL   366
0CF8:  MOVLW  91
0CF9:  ADDWF  78,W
0CFA:  MOVWF  78
0CFB:  MOVLW  22
0CFC:  MOVWF  7A
0CFD:  BTFSC  03.0
0CFE:  INCF   7A,F
0CFF:  MOVF   78,W
0D00:  MOVLB  10
0D01:  MOVWF  4C
0D02:  MOVF   7A,W
0D03:  MOVWF  4D
0D04:  BCF    03.0
0D05:  RLF    47,W
0D06:  CLRF   7A
0D07:  MOVWF  79
0D08:  BCF    03.0
0D09:  RLF    79,F
0D0A:  RLF    7A,F
0D0B:  MOVF   79,W
0D0C:  ADDLW  39
0D0D:  MOVWF  04
0D0E:  MOVLW  20
0D0F:  ADDWFC 7A,W
0D10:  MOVWF  05
0D11:  MOVF   00,W
0D12:  MOVWF  4E
0D13:  ADDFSR 01,FSR0
0D14:  MOVF   00,W
0D15:  MOVWF  4F
0D16:  ADDFSR 3F,FSR0
0D17:  RRF    4F,F
0D18:  RRF    4E,F
0D19:  RRF    4F,F
0D1A:  RRF    4E,F
0D1B:  RRF    4F,F
0D1C:  RRF    4E,F
0D1D:  RRF    4F,F
0D1E:  RRF    4E,F
0D1F:  MOVLW  0F
0D20:  ANDWF  4F,F
0D21:  MOVF   4E,W
0D22:  MOVWF  77
0D23:  CLRF   7A
0D24:  MOVF   7A,W
0D25:  MOVWF  4F
0D26:  MOVF   4D,W
0D27:  MOVWF  05
0D28:  MOVF   4C,W
0D29:  MOVWF  04
0D2A:  MOVF   4E,W
0D2B:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3]);
0D2C:  MOVF   47,W
0D2D:  MOVWF  4C
0D2E:  MOVLW  03
0D2F:  MOVWF  4D
0D30:  MOVLB  00
0D31:  CALL   366
0D32:  MOVLW  91
0D33:  ADDWF  78,W
0D34:  MOVWF  04
0D35:  MOVLW  22
0D36:  MOVWF  05
0D37:  BTFSC  03.0
0D38:  INCF   05,F
0D39:  MOVF   00,W
0D3A:  MOVLB  10
0D3B:  MOVWF  4C
0D3C:  MOVWF  6C
0D3D:  MOVLW  37
0D3E:  MOVWF  6D
0D3F:  MOVLP  00
0D40:  MOVLB  00
0D41:  CALL   6D2
0D42:  MOVLP  08
0D43:  MOVLW  20
0D44:  MOVLB  11
0D45:  MOVWF  20
0D46:  MOVLP  00
0D47:  MOVLB  00
0D48:  CALL   5DF
0D49:  MOVLP  08
....................         cigs_data[i*3+1]    = (data_buffer[i*2] & 0x0F) << 4 | (data_buffer[i*2+1] >>8 )& 0x0F;
0D4A:  MOVLB  10
0D4B:  MOVF   47,W
0D4C:  MOVWF  4C
0D4D:  MOVLW  03
0D4E:  MOVWF  4D
0D4F:  MOVLB  00
0D50:  CALL   366
0D51:  MOVLW  01
0D52:  ADDWF  78,W
0D53:  ADDLW  91
0D54:  MOVWF  78
0D55:  MOVLW  22
0D56:  MOVWF  7A
0D57:  BTFSC  03.0
0D58:  INCF   7A,F
0D59:  MOVF   78,W
0D5A:  MOVLB  10
0D5B:  MOVWF  4C
0D5C:  MOVF   7A,W
0D5D:  MOVWF  4D
0D5E:  BCF    03.0
0D5F:  RLF    47,W
0D60:  CLRF   7A
0D61:  MOVWF  79
0D62:  BCF    03.0
0D63:  RLF    79,F
0D64:  RLF    7A,F
0D65:  MOVF   79,W
0D66:  ADDLW  39
0D67:  MOVWF  04
0D68:  MOVLW  20
0D69:  ADDWFC 7A,W
0D6A:  MOVWF  05
0D6B:  MOVF   00,W
0D6C:  MOVWF  4E
0D6D:  ADDFSR 01,FSR0
0D6E:  MOVF   00,W
0D6F:  MOVWF  4F
0D70:  ADDFSR 3F,FSR0
0D71:  MOVLW  0F
0D72:  ANDWF  4E,F
0D73:  CLRF   4F
0D74:  RLF    4E,F
0D75:  RLF    4F,F
0D76:  RLF    4E,F
0D77:  RLF    4F,F
0D78:  RLF    4E,F
0D79:  RLF    4F,F
0D7A:  RLF    4E,F
0D7B:  RLF    4F,F
0D7C:  MOVLW  F0
0D7D:  ANDWF  4E,F
0D7E:  BCF    03.0
0D7F:  RLF    47,W
0D80:  ADDLW  01
0D81:  CLRF   7A
0D82:  MOVWF  79
0D83:  BCF    03.0
0D84:  RLF    79,F
0D85:  RLF    7A,F
0D86:  MOVF   79,W
0D87:  ADDLW  39
0D88:  MOVWF  04
0D89:  MOVLW  20
0D8A:  ADDWFC 7A,W
0D8B:  MOVWF  05
0D8C:  MOVF   00,W
0D8D:  MOVWF  50
0D8E:  ADDFSR 01,FSR0
0D8F:  MOVF   00,W
0D90:  MOVWF  51
0D91:  ADDFSR 3F,FSR0
0D92:  MOVF   51,W
0D93:  MOVWF  50
0D94:  CLRF   51
0D95:  MOVF   50,W
0D96:  ANDLW  0F
0D97:  MOVWF  77
0D98:  CLRF   7A
0D99:  MOVF   77,W
0D9A:  IORWF  4E,W
0D9B:  MOVWF  77
0D9C:  MOVF   7A,W
0D9D:  IORWF  4F,W
0D9E:  MOVWF  7A
0D9F:  MOVF   77,W
0DA0:  MOVWF  4E
0DA1:  MOVF   7A,W
0DA2:  MOVWF  4F
0DA3:  MOVF   4D,W
0DA4:  MOVWF  05
0DA5:  MOVF   4C,W
0DA6:  MOVWF  04
0DA7:  MOVF   4E,W
0DA8:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+1]);
0DA9:  MOVF   47,W
0DAA:  MOVWF  4C
0DAB:  MOVLW  03
0DAC:  MOVWF  4D
0DAD:  MOVLB  00
0DAE:  CALL   366
0DAF:  MOVLW  01
0DB0:  ADDWF  78,W
0DB1:  ADDLW  91
0DB2:  MOVWF  04
0DB3:  MOVLW  22
0DB4:  MOVWF  05
0DB5:  BTFSC  03.0
0DB6:  INCF   05,F
0DB7:  MOVF   00,W
0DB8:  MOVLB  10
0DB9:  MOVWF  4C
0DBA:  MOVWF  6C
0DBB:  MOVLW  37
0DBC:  MOVWF  6D
0DBD:  MOVLP  00
0DBE:  MOVLB  00
0DBF:  CALL   6D2
0DC0:  MOVLP  08
0DC1:  MOVLW  20
0DC2:  MOVLB  11
0DC3:  MOVWF  20
0DC4:  MOVLP  00
0DC5:  MOVLB  00
0DC6:  CALL   5DF
0DC7:  MOVLP  08
....................         cigs_data[i*3+2]    = data_buffer[i*2+1] & 0xFF;
0DC8:  MOVLB  10
0DC9:  MOVF   47,W
0DCA:  MOVWF  4C
0DCB:  MOVLW  03
0DCC:  MOVWF  4D
0DCD:  MOVLB  00
0DCE:  CALL   366
0DCF:  MOVLW  02
0DD0:  ADDWF  78,W
0DD1:  ADDLW  91
0DD2:  MOVWF  78
0DD3:  MOVLW  22
0DD4:  MOVWF  7A
0DD5:  BTFSC  03.0
0DD6:  INCF   7A,F
0DD7:  MOVF   78,W
0DD8:  MOVLB  10
0DD9:  MOVWF  4C
0DDA:  MOVF   7A,W
0DDB:  MOVWF  4D
0DDC:  BCF    03.0
0DDD:  RLF    47,W
0DDE:  ADDLW  01
0DDF:  CLRF   7A
0DE0:  MOVWF  79
0DE1:  BCF    03.0
0DE2:  RLF    79,F
0DE3:  RLF    7A,F
0DE4:  MOVF   79,W
0DE5:  ADDLW  39
0DE6:  MOVWF  04
0DE7:  MOVLW  20
0DE8:  ADDWFC 7A,W
0DE9:  MOVWF  05
0DEA:  MOVF   00,W
0DEB:  MOVWF  4E
0DEC:  ADDFSR 01,FSR0
0DED:  MOVF   00,W
0DEE:  MOVWF  4F
0DEF:  ADDFSR 3F,FSR0
0DF0:  MOVF   4E,W
0DF1:  MOVWF  77
0DF2:  CLRF   7A
0DF3:  MOVF   7A,W
0DF4:  MOVWF  4F
0DF5:  MOVF   4D,W
0DF6:  MOVWF  05
0DF7:  MOVF   4C,W
0DF8:  MOVWF  04
0DF9:  MOVF   4E,W
0DFA:  MOVWF  00
....................         fprintf(PC, "%X ", cigs_data[i*3+2]);
0DFB:  MOVF   47,W
0DFC:  MOVWF  4C
0DFD:  MOVLW  03
0DFE:  MOVWF  4D
0DFF:  MOVLB  00
0E00:  CALL   366
0E01:  MOVLW  02
0E02:  ADDWF  78,W
0E03:  ADDLW  91
0E04:  MOVWF  04
0E05:  MOVLW  22
0E06:  MOVWF  05
0E07:  BTFSC  03.0
0E08:  INCF   05,F
0E09:  MOVF   00,W
0E0A:  MOVLB  10
0E0B:  MOVWF  4C
0E0C:  MOVWF  6C
0E0D:  MOVLW  37
0E0E:  MOVWF  6D
0E0F:  MOVLP  00
0E10:  MOVLB  00
0E11:  CALL   6D2
0E12:  MOVLP  08
0E13:  MOVLW  20
0E14:  MOVLB  11
0E15:  MOVWF  20
0E16:  MOVLP  00
0E17:  MOVLB  00
0E18:  CALL   5DF
0E19:  MOVLP  08
0E1A:  MOVLB  10
0E1B:  INCF   47,F
0E1C:  GOTO   4EE
....................     }
....................     /*
....................     fprintf(PC, "Logging CIGS data\r\n");
....................     for (unsigned int16 j = 0; j < measurement_step*3; j++)
....................     {
....................         fprintf(PC, "%X ", cigs_data[j]);
....................     }
....................     */
....................    fprintf(PC, "\r\n");
0E1D:  MOVLW  0D
0E1E:  MOVLB  11
0E1F:  MOVWF  20
0E20:  MOVLP  00
0E21:  MOVLB  00
0E22:  CALL   5DF
0E23:  MOVLP  08
0E24:  MOVLW  0A
0E25:  MOVLB  11
0E26:  MOVWF  20
0E27:  MOVLP  00
0E28:  MOVLB  00
0E29:  CALL   5DF
0E2A:  MOVLP  08
.................... }
.................... 
.................... 
.................... void convert_header_data()
.................... {    
....................     // Save CIGS data header
....................     cigs_data_header[0] = 0xFF; // Header start
....................     cigs_data_header[1] = 0x0F; // Header start
.................... 
....................     // Save measurement start time
....................     cigs_data_header[2] = measured_time & 0xFF;         // Extract the lower 8 bits
....................     cigs_data_header[3] = (measured_time >> 8) & 0xFF;  //
....................     cigs_data_header[4] = (measured_time >> 16) & 0xFF;
.................... 
.................... 
....................     // Save measurement PD value & Mode Data 
....................     cigs_data_header[5] = measured_pd_start & 0xFF;
....................     cigs_data_header[6] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[7] = measured_pd_end >> 4 & 0xFF;
....................     
....................     // Save measurement Temp value
....................     cigs_data_header[8] = measured_pd_start & 0xFF;
....................     cigs_data_header[9] = ((measured_pd_start & 0x0F) << 4) | ((measured_pd_end >> 8) & 0x0F);
....................     cigs_data_header[10] = measured_pd_end >> 4 & 0xFF;
.................... 
....................     cigs_data_header[11] = 0x00; // Header end
.................... }
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... void enqueue_smf_data(SmfDataStruct *data)
.................... {   
....................    int8 next_tail = (smf_queue.smf_data_tail + 1) % SMF_DATA_SIZE;
.................... 
....................    if(next_tail == smf_queue.smf_data_head)
....................       fprintf(PC, "SMF data list is full!!!\r\n");
....................       
....................    else
....................    {
....................       smf_queue.smf_data[smf_queue.smf_data_tail].dest = data->dest;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].src = data->src;
....................       smf_queue.smf_data[smf_queue.smf_data_tail].size = data->size;
.................... 
....................       smf_queue.smf_data_tail = next_tail;
....................    }
.................... }
.................... 
.................... SmfDataStruct *dequeue_smf_data()
.................... {
....................    if (smf_queue.smf_data_head == smf_queue.smf_data_tail)
*
11E2:  MOVLB  0F
11E3:  MOVF   46,W
11E4:  SUBWF  45,W
11E5:  BTFSS  03.2
11E6:  GOTO   1F6
....................    {
....................       fprintf(PC, "SMF data list is empty\r\n");
11E7:  MOVLW  18
11E8:  MOVLB  03
11E9:  MOVWF  11
11EA:  MOVLW  01
11EB:  MOVWF  12
11EC:  MOVLP  00
11ED:  MOVLB  00
11EE:  CALL   604
11EF:  MOVLP  10
....................       return 0x00;
11F0:  MOVLW  00
11F1:  MOVWF  78
11F2:  MOVWF  79
11F3:  GOTO   211
....................    }
11F4:  GOTO   211
11F5:  MOVLB  0F
....................    else
....................    {
....................       int8 current_head = smf_queue.smf_data_head;
11F6:  MOVF   45,W
11F7:  MOVLB  10
11F8:  MOVWF  3C
....................       smf_queue.smf_data_head = (smf_queue.smf_data_head + 1) % SMF_DATA_SIZE;
11F9:  MOVLW  01
11FA:  MOVLB  0F
11FB:  ADDWF  45,W
11FC:  ANDLW  0F
11FD:  MOVWF  45
....................       return &smf_queue.smf_data[current_head];
11FE:  MOVLB  10
11FF:  MOVF   3C,W
1200:  MOVWF  4C
1201:  MOVLW  0C
1202:  MOVWF  4D
1203:  MOVLP  08
1204:  MOVLB  00
1205:  CALL   366
1206:  MOVLP  10
1207:  MOVF   78,W
1208:  ADDLW  15
1209:  MOVWF  78
120A:  MOVLW  24
120B:  MOVWF  7A
120C:  BTFSC  03.0
120D:  INCF   7A,F
120E:  MOVF   7A,W
120F:  MOVWF  79
1210:  GOTO   211
....................    }
.................... }
.................... 
.................... int1 is_empty_smf_data(void)
.................... {
....................    return smf_queue.smf_data_head == smf_queue.smf_data_tail;
*
0E48:  MOVLB  0F
0E49:  MOVF   46,W
0E4A:  SUBWF  45,W
0E4B:  BTFSC  03.2
0E4C:  GOTO   64F
0E4D:  MOVLW  00
0E4E:  GOTO   650
0E4F:  MOVLW  01
0E50:  MOVWF  78
0E51:  MOVLB  00
0E52:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... #include "../flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////GDNS_226_FlashOperation.c////////////////////////////
.................... //////////////////////////////////ver 2.2//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////redefinition of spi communication///////////////////////
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
....................          break;
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2,write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3,write_data[spi_xfer_num]);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, int8 *write_data, unsigned int16 write_amount, int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................          fprintf(PC, "\t->");
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................          {
....................             spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
....................             fprintf(PC, "%X ", write_data[spi_xfer_num]);
....................          }   
....................          fprintf(PC, "\r\n\t<-");
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................          {
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
....................             fprintf(PC, "%X ", read_data[spi_rcv_num]);
....................          }
....................          fprintf(PC, "\r\n");
....................          break;
....................             
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM2);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, write_data[spi_xfer_num]);
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM3);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, int8 *cmd_data, unsigned int8 cmd_amount, int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
....................          break;
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_2:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM2, write_data[spi_xfer_num]);
....................          break;
....................    
....................       case SPI_3:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, cmd_data[spi_xfer_num]);
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
....................             spi_xfer(FLASH_STREAM3, write_data[spi_xfer_num]);
....................          break;
....................          
....................       default:
....................          break;
....................    }
....................    return;
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
.................... }
.................... 
.................... int8 status_register(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
....................    #ifdef DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(DEBUG_PORT,"flash busy\r\n");
....................    #endif
....................    return status_reg;  
.................... }
.................... 
.................... //
.................... //->success:True,fail:false
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 20);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"\tRead ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(DEBUG_PORT,"%x ",chip_id[print_counter]);
....................       fprintf(DEBUG_PORT,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == 0x20){  
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"\tflash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"\tflash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef DEBUG
.................... //!      fprintf(DEBUG_PORT,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
.................... //!      #ifdef DEBUG
.................... //!         fprintf(DEBUG_PORT,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
.................... //!      #ifdef DEBUG
.................... //!         fprintf(DEBUG_PORT,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash sector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef DEBUG
....................          fprintf(DEBUG_PORT,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................    
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address){
....................    int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................    
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return;
.................... }
....................    
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef DEBUG
....................             fprintf(DEBUG_PORT,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef DEBUG
....................       fprintf(DEBUG_PORT,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "./lib/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define MAIN_PIC  0x00
.................... #define COM_PIC   0x01
.................... #define RESET_PIC 0x02
.................... #define FAB_PIC   0x03
.................... #define BOSS_PIC  0x04
.................... #define APRS_PIC  0x05
.................... #define CAM_MCU   0x06
.................... #define CHO_MCU   0x07
.................... #define NAKA_PIC  0x08
.................... #define SATO_PIC  0x09
.................... #define BHU_MCU   0x0A
.................... #define CIGS_PIC  0x0B
.................... 
.................... #define SELF_DEVICE_ID CIGS_PIC // <- change to your device name
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 32
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 content[CONTENT_MAX];
....................     int8 size;
....................     int1 is_exist;
.................... } Command;
.................... 
.................... #include "./frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x01,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... #include "./src/communication.c"
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, {0x00}, 0, FALSE};
*
0800:  MOVLB  10
0801:  CLRF   3C
0802:  CLRF   3D
0803:  CLRF   3E
0804:  CLRF   3F
0805:  CLRF   40
0806:  CLRF   41
0807:  CLRF   42
0808:  CLRF   43
0809:  CLRF   44
080A:  CLRF   45
080B:  CLRF   46
080C:  CLRF   47
080D:  CLRF   48
080E:  CLRF   49
080F:  CLRF   4A
0810:  CLRF   4B
0811:  CLRF   4C
0812:  CLRF   4D
0813:  CLRF   4E
0814:  CLRF   4F
0815:  CLRF   50
0816:  CLRF   51
0817:  CLRF   52
0818:  CLRF   53
0819:  CLRF   54
081A:  CLRF   55
081B:  CLRF   56
081C:  CLRF   57
081D:  CLRF   58
081E:  CLRF   59
081F:  CLRF   5A
0820:  CLRF   5B
0821:  CLRF   5C
0822:  CLRF   5D
0823:  CLRF   5E
....................    fprintf(PC, "Start make_receive_command\r\n\t-> ");
0824:  MOVLW  F1
0825:  MOVLB  03
0826:  MOVWF  11
0827:  MOVLW  01
0828:  MOVWF  12
0829:  MOVLP  00
082A:  MOVLB  00
082B:  CALL   604
082C:  MOVLP  08
....................    for (int8 i = 0; i < receive_signal_size; i++)
082D:  MOVLB  10
082E:  CLRF   5F
082F:  MOVF   3B,W
0830:  SUBWF  5F,W
0831:  BTFSC  03.0
0832:  GOTO   04C
....................       fprintf(PC, "%X ", receive_signal[i]);
0833:  MOVF   5F,W
0834:  ADDWF  39,W
0835:  MOVWF  04
0836:  MOVLW  00
0837:  ADDWFC 3A,W
0838:  MOVWF  05
0839:  MOVF   00,W
083A:  MOVWF  67
083B:  MOVWF  6C
083C:  MOVLW  37
083D:  MOVWF  6D
083E:  MOVLP  00
083F:  MOVLB  00
0840:  CALL   6D2
0841:  MOVLP  08
0842:  MOVLW  20
0843:  MOVLB  11
0844:  MOVWF  20
0845:  MOVLP  00
0846:  MOVLB  00
0847:  CALL   5DF
0848:  MOVLP  08
0849:  MOVLB  10
084A:  INCF   5F,F
084B:  GOTO   02F
....................    fprintf(PC, "\r\n");
084C:  MOVLW  0D
084D:  MOVLB  11
084E:  MOVWF  20
084F:  MOVLP  00
0850:  MOVLB  00
0851:  CALL   5DF
0852:  MOVLP  08
0853:  MOVLW  0A
0854:  MOVLB  11
0855:  MOVWF  20
0856:  MOVLP  00
0857:  MOVLB  00
0858:  CALL   5DF
0859:  MOVLP  08
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
085A:  MOVLB  10
085B:  MOVF   3A,W
085C:  MOVWF  68
085D:  MOVF   39,W
085E:  MOVWF  67
085F:  MOVF   3B,W
0860:  MOVWF  69
*
089D:  MOVF   78,W
089E:  MOVWF  60
....................    if (frame_start_position == -1)
089F:  MOVF   60,W
08A0:  SUBLW  FF
08A1:  BTFSS  03.2
08A2:  GOTO   0A8
....................       return command;
08A3:  MOVLW  3C
08A4:  MOVWF  78
08A5:  MOVLW  08
08A6:  MOVWF  79
08A7:  GOTO   230
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
08A8:  MOVF   60,W
08A9:  ADDWF  39,W
08AA:  MOVWF  61
08AB:  MOVLW  00
08AC:  ADDWFC 3A,W
08AD:  MOVWF  62
08AE:  MOVF   61,W
08AF:  MOVWF  04
08B0:  MOVF   62,W
08B1:  MOVWF  05
08B2:  ADDFSR 00,FSR0
08B3:  MOVF   00,W
08B4:  ANDLW  0F
08B5:  MOVWF  63
08B6:  MOVF   63,W
08B7:  MOVWF  67
*
08FE:  MOVF   78,W
08FF:  MOVWF  64
....................    if (content_size == -1)
0900:  MOVF   64,W
0901:  SUBLW  FF
0902:  BTFSS  03.2
0903:  GOTO   109
....................       return command;
0904:  MOVLW  3C
0905:  MOVWF  78
0906:  MOVLW  08
0907:  MOVWF  79
0908:  GOTO   230
....................       
....................    int8 receive_frame_size = receive_signal_size - frame_start_position;
0909:  MOVF   60,W
090A:  SUBWF  3B,W
090B:  MOVWF  65
....................    
....................    if (!check_crc(frame, receive_frame_size))
090C:  MOVF   62,W
090D:  MOVWF  68
090E:  MOVF   61,W
090F:  MOVWF  67
0910:  MOVF   65,W
0911:  MOVWF  69
*
0988:  MOVF   78,F
0989:  BTFSS  03.2
098A:  GOTO   190
....................       return command;
098B:  MOVLW  3C
098C:  MOVWF  78
098D:  MOVLW  08
098E:  MOVWF  79
098F:  GOTO   230
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
0990:  MOVF   61,W
0991:  MOVWF  04
0992:  MOVF   62,W
0993:  MOVWF  05
0994:  ADDFSR 00,FSR0
0995:  MOVF   00,W
0996:  ANDLW  F0
0997:  MOVWF  77
0998:  SWAPF  77,W
0999:  MOVWF  67
099A:  MOVLW  0F
099B:  ANDWF  67,F
099C:  MOVF   67,W
099D:  MOVWF  68
*
09FB:  MOVF   78,F
09FC:  BTFSS  03.2
09FD:  GOTO   203
....................       return command;
09FE:  MOVLW  3C
09FF:  MOVWF  78
0A00:  MOVLW  08
0A01:  MOVWF  79
0A02:  GOTO   230
.................... 
....................    command.frame_id = frame_id;
0A03:  MOVF   63,W
0A04:  MOVWF  3C
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0A05:  MOVLW  01
0A06:  ADDWF  61,W
0A07:  MOVWF  67
0A08:  MOVLW  00
0A09:  ADDWFC 62,W
0A0A:  MOVWF  68
0A0B:  MOVLW  02
0A0C:  SUBWF  65,W
0A0D:  MOVWF  69
0A0E:  MOVF   68,W
0A0F:  MOVWF  05
0A10:  MOVF   67,W
0A11:  MOVWF  04
0A12:  MOVF   69,W
0A13:  MOVWF  78
0A14:  BTFSC  03.2
0A15:  GOTO   21E
0A16:  MOVLW  25
0A17:  MOVWF  07
0A18:  MOVLW  1D
0A19:  MOVWF  06
0A1A:  MOVIW  [FSR0++],W
0A1B:  MOVWI  W,[FSR1++]
0A1C:  DECFSZ 78,F
0A1D:  GOTO   21A
....................    command.size = receive_frame_size-2;
0A1E:  MOVLW  02
0A1F:  SUBWF  65,W
0A20:  MOVWF  5D
....................    //fprintf(PC, "\tcommand.size: %d\r\n", command.size);
....................    command.is_exist = TRUE;
0A21:  BSF    5E.0
....................    //fprintf(PC, "\tcommand.is_exist: %X\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
0A22:  MOVLW  02
0A23:  MOVLB  03
0A24:  MOVWF  11
0A25:  MOVLW  02
0A26:  MOVWF  12
0A27:  MOVLP  00
0A28:  MOVLB  00
0A29:  CALL   604
0A2A:  MOVLP  08
....................    return command;
0A2B:  MOVLW  3C
0A2C:  MOVWF  78
0A2D:  MOVLW  08
0A2E:  MOVWF  79
0A2F:  MOVLB  10
0A30:  MOVLP  10
0A31:  MOVLB  00
0A32:  GOTO   474 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
0861:  CLRF   6A
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
0862:  CLRF   6A
0863:  MOVLW  01
0864:  SUBWF  69,W
0865:  SUBWF  6A,W
0866:  BTFSC  03.0
0867:  GOTO   078
....................       if(receive_signal[i] == SFD)
0868:  MOVF   6A,W
0869:  ADDWF  67,W
086A:  MOVWF  04
086B:  MOVLW  00
086C:  ADDWFC 68,W
086D:  MOVWF  05
086E:  MOVF   00,W
086F:  SUBLW  AA
0870:  BTFSS  03.2
0871:  GOTO   076
....................          return i+1;
0872:  MOVLW  01
0873:  ADDWF  6A,W
0874:  MOVWF  78
0875:  GOTO   09D
0876:  INCF   6A,F
0877:  GOTO   063
....................    if (receive_signal[i] == SFD)
0878:  MOVF   6A,W
0879:  ADDWF  67,W
087A:  MOVWF  04
087B:  MOVLW  00
087C:  ADDWFC 68,W
087D:  MOVWF  05
087E:  MOVF   00,W
087F:  SUBLW  AA
0880:  BTFSS  03.2
0881:  GOTO   090
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
0882:  MOVLW  10
0883:  MOVLB  03
0884:  MOVWF  11
0885:  MOVLW  02
0886:  MOVWF  12
0887:  MOVLP  00
0888:  MOVLB  00
0889:  CALL   604
088A:  MOVLP  08
....................       return -1;
088B:  MOVLW  FF
088C:  MOVWF  78
088D:  MOVLB  10
088E:  GOTO   09D
....................    }
088F:  GOTO   09D
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
0890:  MOVLW  1B
0891:  MOVLB  03
0892:  MOVWF  11
0893:  MOVLW  02
0894:  MOVWF  12
0895:  MOVLP  00
0896:  MOVLB  00
0897:  CALL   604
0898:  MOVLP  08
....................       return -1;
0899:  MOVLW  FF
089A:  MOVWF  78
089B:  MOVLB  10
089C:  GOTO   09D
....................    }
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
*
08B8:  CLRF   68
08B9:  MOVF   68,W
08BA:  SUBLW  02
08BB:  BTFSS  03.0
08BC:  GOTO   0D7
....................       if (frame_id == frame_ids[i].id)
08BD:  BCF    03.0
08BE:  RLF    68,W
08BF:  ADDLW  DF
08C0:  MOVWF  04
08C1:  MOVLW  24
08C2:  MOVWF  05
08C3:  BTFSC  03.0
08C4:  INCF   05,F
08C5:  MOVF   00,W
08C6:  SUBWF  67,W
08C7:  BTFSS  03.2
08C8:  GOTO   0D5
....................          return frame_ids[i].length;
08C9:  BCF    03.0
08CA:  RLF    68,W
08CB:  ADDLW  01
08CC:  ADDLW  DF
08CD:  MOVWF  04
08CE:  MOVLW  24
08CF:  MOVWF  05
08D0:  BTFSC  03.0
08D1:  INCF   05,F
08D2:  MOVF   00,W
08D3:  MOVWF  78
08D4:  GOTO   0FE
08D5:  INCF   68,F
08D6:  GOTO   0B9
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
08D7:  MOVLW  24
08D8:  MOVLB  03
08D9:  MOVWF  11
08DA:  MOVLW  02
08DB:  MOVWF  12
08DC:  BCF    03.0
08DD:  MOVLW  1F
08DE:  MOVLB  10
08DF:  MOVWF  6C
08E0:  MOVLP  00
08E1:  MOVLB  00
08E2:  CALL   775
08E3:  MOVLP  08
08E4:  MOVLB  10
08E5:  MOVF   67,W
08E6:  MOVWF  6C
08E7:  MOVLW  37
08E8:  MOVWF  6D
08E9:  MOVLP  00
08EA:  MOVLB  00
08EB:  CALL   6D2
08EC:  MOVLP  08
08ED:  MOVLW  0D
08EE:  MOVLB  11
08EF:  MOVWF  20
08F0:  MOVLP  00
08F1:  MOVLB  00
08F2:  CALL   5DF
08F3:  MOVLP  08
08F4:  MOVLW  0A
08F5:  MOVLB  11
08F6:  MOVWF  20
08F7:  MOVLP  00
08F8:  MOVLB  00
08F9:  CALL   5DF
08FA:  MOVLP  08
....................    return -1;
08FB:  MOVLW  FF
08FC:  MOVWF  78
08FD:  MOVLB  10
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
*
0912:  MOVLW  01
0913:  SUBWF  69,W
0914:  ADDWF  67,W
0915:  MOVWF  04
0916:  MOVLW  00
0917:  ADDWFC 68,W
0918:  MOVWF  05
0919:  MOVF   00,W
091A:  MOVWF  6A
091B:  MOVLW  01
091C:  SUBWF  69,W
091D:  MOVWF  6C
091E:  MOVF   68,W
091F:  MOVWF  6E
0920:  MOVF   67,W
0921:  MOVWF  6D
0922:  MOVF   6C,W
0923:  MOVWF  6F
0924:  MOVLP  00
0925:  MOVLB  00
0926:  CALL   7CF
0927:  MOVLP  08
0928:  MOVF   78,W
0929:  MOVLB  10
092A:  MOVWF  6B
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
092B:  MOVF   6B,W
092C:  SUBWF  6A,W
092D:  BTFSS  03.2
092E:  GOTO   133
....................       return TRUE;
092F:  MOVLW  01
0930:  MOVWF  78
0931:  GOTO   188
0932:  GOTO   188
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
0933:  MOVLW  36
0934:  MOVLB  03
0935:  MOVWF  11
0936:  MOVLW  02
0937:  MOVWF  12
0938:  MOVLP  00
0939:  MOVLB  00
093A:  CALL   604
093B:  MOVLP  08
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
093C:  MOVLW  3F
093D:  MOVLB  03
093E:  MOVWF  11
093F:  MOVLW  02
0940:  MOVWF  12
0941:  BCF    03.0
0942:  MOVLW  13
0943:  MOVLB  10
0944:  MOVWF  6C
0945:  MOVLP  00
0946:  MOVLB  00
0947:  CALL   775
0948:  MOVLP  08
0949:  MOVLB  10
094A:  MOVF   6A,W
094B:  MOVWF  6C
094C:  MOVLW  37
094D:  MOVWF  6D
094E:  MOVLP  00
094F:  MOVLB  00
0950:  CALL   6D2
0951:  MOVLP  08
0952:  MOVLW  0D
0953:  MOVLB  11
0954:  MOVWF  20
0955:  MOVLP  00
0956:  MOVLB  00
0957:  CALL   5DF
0958:  MOVLP  08
0959:  MOVLW  0A
095A:  MOVLB  11
095B:  MOVWF  20
095C:  MOVLP  00
095D:  MOVLB  00
095E:  CALL   5DF
095F:  MOVLP  08
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
0960:  MOVLW  4B
0961:  MOVLB  03
0962:  MOVWF  11
0963:  MOVLW  02
0964:  MOVWF  12
0965:  BCF    03.0
0966:  MOVLW  13
0967:  MOVLB  10
0968:  MOVWF  6C
0969:  MOVLP  00
096A:  MOVLB  00
096B:  CALL   775
096C:  MOVLP  08
096D:  MOVLB  10
096E:  MOVF   6B,W
096F:  MOVWF  6C
0970:  MOVLW  37
0971:  MOVWF  6D
0972:  MOVLP  00
0973:  MOVLB  00
0974:  CALL   6D2
0975:  MOVLP  08
0976:  MOVLW  0D
0977:  MOVLB  11
0978:  MOVWF  20
0979:  MOVLP  00
097A:  MOVLB  00
097B:  CALL   5DF
097C:  MOVLP  08
097D:  MOVLW  0A
097E:  MOVLB  11
097F:  MOVWF  20
0980:  MOVLP  00
0981:  MOVLB  00
0982:  CALL   5DF
0983:  MOVLP  08
....................       return FALSE;
0984:  MOVLW  00
0985:  MOVWF  78
0986:  MOVLB  10
0987:  GOTO   188
....................    }
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
*
099E:  MOVF   68,W
099F:  SUBLW  0B
09A0:  BTFSS  03.2
09A1:  GOTO   1A6
....................       return TRUE;
09A2:  MOVLW  01
09A3:  MOVWF  78
09A4:  GOTO   1FB
09A5:  GOTO   1FB
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
09A6:  MOVLW  57
09A7:  MOVLB  03
09A8:  MOVWF  11
09A9:  MOVLW  02
09AA:  MOVWF  12
09AB:  MOVLP  00
09AC:  MOVLB  00
09AD:  CALL   604
09AE:  MOVLP  08
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
09AF:  MOVLW  68
09B0:  MOVLB  03
09B1:  MOVWF  11
09B2:  MOVLW  02
09B3:  MOVWF  12
09B4:  BCF    03.0
09B5:  MOVLW  13
09B6:  MOVLB  10
09B7:  MOVWF  6C
09B8:  MOVLP  00
09B9:  MOVLB  00
09BA:  CALL   775
09BB:  MOVLP  08
09BC:  MOVLB  10
09BD:  MOVF   68,W
09BE:  MOVWF  6C
09BF:  MOVLW  37
09C0:  MOVWF  6D
09C1:  MOVLP  00
09C2:  MOVLB  00
09C3:  CALL   6D2
09C4:  MOVLP  08
09C5:  MOVLW  0D
09C6:  MOVLB  11
09C7:  MOVWF  20
09C8:  MOVLP  00
09C9:  MOVLB  00
09CA:  CALL   5DF
09CB:  MOVLP  08
09CC:  MOVLW  0A
09CD:  MOVLB  11
09CE:  MOVWF  20
09CF:  MOVLP  00
09D0:  MOVLB  00
09D1:  CALL   5DF
09D2:  MOVLP  08
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
09D3:  MOVLW  74
09D4:  MOVLB  03
09D5:  MOVWF  11
09D6:  MOVLW  02
09D7:  MOVWF  12
09D8:  BCF    03.0
09D9:  MOVLW  13
09DA:  MOVLB  10
09DB:  MOVWF  6C
09DC:  MOVLP  00
09DD:  MOVLB  00
09DE:  CALL   775
09DF:  MOVLP  08
09E0:  MOVLW  0B
09E1:  MOVLB  10
09E2:  MOVWF  6C
09E3:  MOVLW  37
09E4:  MOVWF  6D
09E5:  MOVLP  00
09E6:  MOVLB  00
09E7:  CALL   6D2
09E8:  MOVLP  08
09E9:  MOVLW  0D
09EA:  MOVLB  11
09EB:  MOVWF  20
09EC:  MOVLP  00
09ED:  MOVLB  00
09EE:  CALL   5DF
09EF:  MOVLP  08
09F0:  MOVLW  0A
09F1:  MOVLB  11
09F2:  MOVWF  20
09F3:  MOVLP  00
09F4:  MOVLB  00
09F5:  CALL   5DF
09F6:  MOVLP  08
....................       return FALSE;  
09F7:  MOVLW  00
09F8:  MOVWF  78
09F9:  MOVLB  10
09FA:  GOTO   1FB
....................    }
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
0AD8:  MOVLW  AA
0AD9:  MOVLB  10
0ADA:  MOVWF  3C
....................    data[1] = (BOSS_PIC << 4) | frame_id;
0ADB:  MOVF   38,W
0ADC:  IORLW  40
0ADD:  MOVWF  3D
....................    memcpy(&data[2], content, size);
0ADE:  MOVF   3A,W
0ADF:  MOVWF  05
0AE0:  MOVF   39,W
0AE1:  MOVWF  04
0AE2:  MOVF   3B,W
0AE3:  MOVWF  78
0AE4:  BTFSC  03.2
0AE5:  GOTO   2EE
0AE6:  MOVLW  25
0AE7:  MOVWF  07
0AE8:  MOVLW  1E
0AE9:  MOVWF  06
0AEA:  MOVIW  [FSR0++],W
0AEB:  MOVWI  W,[FSR1++]
0AEC:  DECFSZ 78,F
0AED:  GOTO   2EA
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0AEE:  MOVLW  02
0AEF:  ADDWF  3B,W
0AF0:  MOVWF  4C
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
0AF1:  MOVLW  1C
0AF2:  ADDWF  4C,W
0AF3:  MOVWF  78
0AF4:  MOVLW  25
0AF5:  MOVWF  7A
0AF6:  BTFSC  03.0
0AF7:  INCF   7A,F
0AF8:  MOVF   78,W
0AF9:  MOVWF  4F
0AFA:  MOVF   7A,W
0AFB:  MOVWF  50
0AFC:  MOVLW  01
0AFD:  SUBWF  4C,W
0AFE:  MOVWF  51
0AFF:  MOVLW  25
0B00:  MOVWF  6E
0B01:  MOVLW  1D
0B02:  MOVWF  6D
0B03:  MOVF   51,W
0B04:  MOVWF  6F
0B05:  MOVLP  00
0B06:  MOVLB  00
0B07:  CALL   7CF
0B08:  MOVLP  08
0B09:  MOVLB  10
0B0A:  MOVF   50,W
0B0B:  MOVWF  05
0B0C:  MOVF   4F,W
0B0D:  MOVWF  04
0B0E:  MOVF   78,W
0B0F:  MOVWF  00
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0B10:  MOVLW  01
0B11:  ADDWF  4C,W
0B12:  MOVWF  4D
....................    
....................    transmit(data, data_size);
0B13:  MOVLW  25
0B14:  MOVWF  50
0B15:  MOVLW  1C
0B16:  MOVWF  4F
0B17:  MOVF   4D,W
0B18:  MOVWF  51
*
0B65:  RETURN
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
0B19:  CLRF   52
0B1A:  MOVF   51,W
0B1B:  SUBWF  52,W
0B1C:  BTFSC  03.0
0B1D:  GOTO   32F
....................       fputc(data[i], BOSS);
0B1E:  MOVF   52,W
0B1F:  ADDWF  4F,W
0B20:  MOVWF  04
0B21:  MOVLW  00
0B22:  ADDWFC 50,W
0B23:  MOVWF  05
0B24:  MOVF   00,W
0B25:  MOVWF  54
0B26:  MOVF   54,W
*
0B2C:  MOVLB  10
0B2D:  INCF   52,F
0B2E:  GOTO   31A
....................       
....................    fprintf(PC, "Transit command\r\n\t-> ");
0B2F:  MOVLW  80
0B30:  MOVLB  03
0B31:  MOVWF  11
0B32:  MOVLW  02
0B33:  MOVWF  12
0B34:  MOVLP  00
0B35:  MOVLB  00
0B36:  CALL   604
0B37:  MOVLP  08
....................    for(int i = 0; i < data_size; i++)
0B38:  MOVLB  10
0B39:  CLRF   53
0B3A:  MOVF   51,W
0B3B:  SUBWF  53,W
0B3C:  BTFSC  03.0
0B3D:  GOTO   357
....................       fprintf(PC, "%X ", data[i]);
0B3E:  MOVF   53,W
0B3F:  ADDWF  4F,W
0B40:  MOVWF  04
0B41:  MOVLW  00
0B42:  ADDWFC 50,W
0B43:  MOVWF  05
0B44:  MOVF   00,W
0B45:  MOVWF  54
0B46:  MOVWF  6C
0B47:  MOVLW  37
0B48:  MOVWF  6D
0B49:  MOVLP  00
0B4A:  MOVLB  00
0B4B:  CALL   6D2
0B4C:  MOVLP  08
0B4D:  MOVLW  20
0B4E:  MOVLB  11
0B4F:  MOVWF  20
0B50:  MOVLP  00
0B51:  MOVLB  00
0B52:  CALL   5DF
0B53:  MOVLP  08
0B54:  MOVLB  10
0B55:  INCF   53,F
0B56:  GOTO   33A
....................    fprintf(PC, "\r\n");
0B57:  MOVLW  0D
0B58:  MOVLB  11
0B59:  MOVWF  20
0B5A:  MOVLP  00
0B5B:  MOVLB  00
0B5C:  CALL   5DF
0B5D:  MOVLP  08
0B5E:  MOVLW  0A
0B5F:  MOVLB  11
0B60:  MOVWF  20
0B61:  MOVLP  00
0B62:  MOVLB  00
0B63:  CALL   5DF
0B64:  MOVLP  08
.................... }
.................... 
.................... 
.................... // ______ Common _______
.................... 
.................... static unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size)
*
07CF:  MOVLB  10
07D0:  MOVF   6D,W
07D1:  MOVWF  04
07D2:  MOVF   6E,W
07D3:  MOVWF  05
07D4:  MOVIW  [FSR0+00],W
07D5:  MOVLB  11
07D6:  MOVWF  20
07D7:  MOVLW  01
07D8:  MOVWF  21
.................... {
....................    unsigned int8 crc = frame[0], i = 1;
....................    while(i < payload_size)
07D9:  MOVLB  10
07DA:  MOVF   6F,W
07DB:  MOVLB  11
07DC:  SUBWF  21,W
07DD:  BTFSC  03.0
07DE:  GOTO   7EB
....................       crc ^= frame[i++];
07DF:  MOVF   21,W
07E0:  INCF   21,F
07E1:  MOVLB  10
07E2:  ADDWF  6D,W
07E3:  MOVWF  04
07E4:  MOVLW  00
07E5:  ADDWFC 6E,W
07E6:  MOVWF  05
07E7:  MOVF   00,W
07E8:  MOVLB  11
07E9:  XORWF  20,F
07EA:  GOTO   7D9
....................    return crc;
07EB:  MOVF   20,W
07EC:  MOVWF  78
07ED:  MOVLB  00
07EE:  RETURN
.................... }
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack();
.................... 
.................... void transmit_status();
.................... 
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    volatile Command command = make_receive_command(receive_signal, receive_signal_size);
....................    //fprintf(PC, "--Communication drier--\r\n");
....................    //fprintf(PC, "command.size: %d\r\n", command.size);
....................    //fprintf(PC, "command.frame_id: %X\r\n", command.frame_id);
....................    //fprintf(PC, "command.content: ");
....................    for (int8 i = 0; i < command.size; i++)
....................       //fprintf(PC, "%X ", command.content[i]);
....................    //fprintf(PC, "\r\n");
....................    //fprintf(PC, "command.is_exist: %X\r\n", command.is_exist);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
07EF:  MOVLW  0F
07F0:  MOVLB  10
07F1:  MOVWF  38
07F2:  CLRF   3A
07F3:  CLRF   39
07F4:  CLRF   3B
07F5:  MOVLP  08
07F6:  MOVLB  00
07F7:  CALL   2D8
07F8:  MOVLP  00
07F9:  RETURN
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 1);
*
118D:  MOVLW  01
118E:  MOVLB  10
118F:  MOVWF  38
1190:  MOVLW  20
1191:  MOVWF  3A
1192:  MOVLW  0B
1193:  MOVWF  39
1194:  MOVLW  01
1195:  MOVWF  3B
1196:  MOVLP  08
1197:  MOVLB  00
1198:  CALL   2D8
1199:  MOVLP  10
.................... }
.................... 
.................... // EOF
.................... 
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... 
.................... // _____________ define _______________
.................... 
.................... #define EXECUTED_MISSION_SIZE 8
.................... 
.................... 
.................... // _____________ typedef ________________
.................... 
.................... typedef struct {
....................    unsigned int8 executed_mission[EXECUTED_MISSION_SIZE];
....................    int8 executed_mission_count;
.................... } ExecutedMission;
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Value management using the Singleton pattern
.................... ExecutedMission get_executed_mission();
.................... 
.................... int1 is_executed_mission(unsigned int8 command_id);
.................... 
.................... void add_executed_mission(unsigned int8 command_id);
.................... 
.................... // Use in missions you want to execute consecutively
.................... void executed_mission_pop(void);
.................... 
.................... 
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // MIS MCU will be up and running duration_second seconds after mission completion
.................... void continue_mis_mcu(int16 duration_second);
.................... 
.................... 
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... 
.................... 
.................... #include "./src/mission_tools.c"
.................... ExecutedMission get_executed_mission()
.................... {
....................    static ExecutedMission executed_mission = {0};
....................    return executed_mission;
*
07FA:  MOVLW  D5
07FB:  MOVWF  78
07FC:  MOVLW  07
07FD:  MOVWF  79
07FE:  RETURN
.................... }
.................... 
.................... int1 is_executed_mission(unsigned int8 command_id)
*
1058:  MOVLP  00
1059:  MOVLB  00
105A:  CALL   7FA
105B:  MOVLP  10
105C:  MOVF   79,W
105D:  MOVWF  7A
105E:  MOVF   78,W
105F:  MOVWF  04
1060:  MOVF   7A,W
1061:  MOVWF  05
1062:  MOVLW  09
1063:  MOVWF  78
1064:  MOVLW  25
1065:  MOVWF  07
1066:  MOVLW  20
1067:  MOVWF  06
1068:  MOVIW  [FSR0++],W
1069:  MOVWI  W,[FSR1++]
106A:  DECFSZ 78,F
106B:  GOTO   068
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    
....................    for (int i = 0; i < executed_mission.executed_mission_count; i++)
106C:  MOVLB  10
106D:  CLRF   49
106E:  MOVF   48,W
106F:  SUBWF  49,W
1070:  BTFSC  03.0
1071:  GOTO   082
....................       if (command_id == executed_mission.executed_mission[i])
1072:  MOVLW  20
1073:  ADDWF  49,W
1074:  MOVWF  04
1075:  MOVLW  25
1076:  MOVWF  05
1077:  BTFSC  03.0
1078:  INCF   05,F
1079:  MOVF   00,W
107A:  SUBWF  3F,W
107B:  BTFSS  03.2
107C:  GOTO   080
....................          return TRUE;
107D:  MOVLW  01
107E:  MOVWF  78
107F:  GOTO   084
1080:  INCF   49,F
1081:  GOTO   06E
....................       
....................    return FALSE;
1082:  MOVLW  00
1083:  MOVWF  78
.................... }
.................... 
.................... void add_executed_mission(unsigned int8 command_id)
*
10AF:  MOVLP  00
10B0:  MOVLB  00
10B1:  CALL   7FA
10B2:  MOVLP  10
10B3:  MOVF   79,W
10B4:  MOVWF  7A
10B5:  MOVF   78,W
10B6:  MOVWF  04
10B7:  MOVF   7A,W
10B8:  MOVWF  05
10B9:  MOVLW  09
10BA:  MOVWF  78
10BB:  MOVLW  25
10BC:  MOVWF  07
10BD:  MOVLW  20
10BE:  MOVWF  06
10BF:  MOVIW  [FSR0++],W
10C0:  MOVWI  W,[FSR1++]
10C1:  DECFSZ 78,F
10C2:  GOTO   0BF
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    
....................    if (executed_mission.executed_mission_count != EXECUTED_MISSION_SIZE)
10C3:  MOVLB  10
10C4:  MOVF   48,W
10C5:  SUBLW  08
10C6:  BTFSC  03.2
10C7:  GOTO   0D3
....................       executed_mission.executed_mission[executed_mission.executed_mission_count++] = command_id;
10C8:  MOVF   48,W
10C9:  INCF   48,F
10CA:  ADDLW  20
10CB:  MOVWF  04
10CC:  MOVLW  25
10CD:  MOVWF  05
10CE:  BTFSC  03.0
10CF:  INCF   05,F
10D0:  MOVF   3F,W
10D1:  MOVWF  00
10D2:  GOTO   0DD
....................    else
....................       fprintf(PC, "!!!overflow executed_mission list\r\n");
10D3:  MOVLW  8B
10D4:  MOVLB  03
10D5:  MOVWF  11
10D6:  MOVLW  02
10D7:  MOVWF  12
10D8:  MOVLP  00
10D9:  MOVLB  00
10DA:  CALL   604
10DB:  MOVLP  10
10DC:  MOVLB  10
.................... }
.................... 
.................... 
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status = EXECUTING_MISSION;
.................... }
.................... 
.................... void executed_mission_pop(void)
.................... {
....................    ExecutedMission executed_mission = get_executed_mission();
....................    executed_mission.executed_mission[executed_mission.executed_mission_count--] = 0x00;
.................... }
.................... 
.................... void continue_mis_mcu(int16 duration_second)
.................... {  
....................    duration_sec = duration_second + sec;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (kbhit())
....................    {
....................       fgetc(BOSS);
....................       transmit_status();
....................    }
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... // _________________ Oparation Mode ______________________
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start MODE MEASURE\r\n");
*
0E32:  MOVLW  20
0E33:  MOVLB  03
0E34:  MOVWF  11
0E35:  MOVLW  03
0E36:  MOVWF  12
0E37:  MOVLP  00
0E38:  MOVLB  00
0E39:  CALL   604
0E3A:  MOVLP  08
....................    unsigned int8 sweep_step = parameter[0]; // Get the measurement step from the parameter array
0E3B:  MOVLB  10
0E3C:  MOVF   3F,W
0E3D:  MOVWF  04
0E3E:  MOVF   40,W
0E3F:  MOVWF  05
0E40:  MOVIW  [FSR0+00],W
0E41:  MOVWF  41
....................    
....................    //adc_init();
....................    sweep(sweep_step);
0E42:  MOVF   41,W
0E43:  MOVWF  42
0E44:  MOVLB  00
0E45:  GOTO   38D
0E46:  MOVLP  10
0E47:  GOTO   127 (RETURN)
....................    //smf_write();
.................... 
.................... }
.................... 
.................... #Separate
.................... void mode_measure_voltage()
.................... {
....................    fprintf(PC, "Start MODE MEASURE Voltage\r\n");
....................    while(TRUE)
....................    {
....................       unsigned int16 cigs_value;
....................       set_adc_channel(CIGS_VOLT);
....................       cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       //fprintf(PC, "cigs_value: %04X\r\n", cigs_value);
....................       delay_ms(1000); // wait for the ADC to stabilize
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_copy_SMF()
.................... {
....................    /*
....................    unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};
....................    unsigned int32 src = 0x00000000;
....................    unsigned int32 dest = 0x00000000;
....................    unsigned int32 size = 0x00000000;
....................    for (int i = 0; i < SMF_DATA_SIZE; i++)
....................    {
....................       smf_data[i] = read_data_byte_spi_id(src + i);
....................       fprintf(PC, "smf_data[%d]: %X\r\n", i, smf_data[i]);
....................    }
....................    enqueue_smf_data(src, dest, size);
....................    fprintf(PC, "enqueue_smf_data\r\n");
....................    */
.................... }
.................... 
.................... 
.................... //___________________ Debug Mode _______________
.................... #Separate
.................... void mode_test_temp()
.................... {
....................    while (TRUE)
....................    {   
....................       set_adc_channel(TEMP_TOP);
....................       unsigned int16 temp_top_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       set_adc_channel(TEMP_BOT);
....................       unsigned int16 temp_bot_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "temp_top: %X\r\n", temp_top_value);
....................       fprintf(PC, "temp_bot: %X\r\n", temp_bot_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_PD()
.................... {
....................    while (TRUE)
....................    {
....................       unsigned int16 pd_value;
....................       set_adc_channel(PD);
....................       pd_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................       fprintf(PC, "pd_value: %X\r\n", pd_value);
....................       delay_ms(1000);
....................    }
.................... }
.................... 
.................... #Separate
.................... void mode_test_CIGS()
.................... {
....................    unsigned int16 cigs_value = 0;
....................    set_adc_channel(3);
....................    cigs_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "cigs_value: %X\r\n", cigs_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_current()
.................... {
....................    unsigned int16 current_value = 0;
....................    set_adc_channel(3);
....................    current_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "current_value: %X\r\n", current_value);
.................... }
.................... 
.................... #Separate
.................... void mode_test_voltage()
.................... {
....................    unsigned int16 voltage_value = 0;
....................    set_adc_channel(3);
....................    voltage_value = read_adc(ADC_START_AND_READ); // read voltage at adc pin
....................    fprintf(PC, "voltage_value: %X\r\n", voltage_value);
.................... }
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all()
.................... {
....................    fprintf(PC, "Start Flash Erase All\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase All\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_erase_1sector()
.................... {
....................    fprintf(PC, "Start Flash Erase 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Erase 1 Sector\r\n");
.................... }
.................... 
.................... #Separate
.................... void mode_flash_copy_1sector()
.................... {
....................    fprintf(PC, "Start Flash Copy 1 Sector\r\n");
....................    flash_setting(mis_fm);
....................    sector_erase(mis_fm, 0x00000000);
....................    fprintf(PC, "End Flash Copy 1 Sector\r\n");
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // SerialCommunication
.................... #include "./lib/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack();
.................... 
.................... void transmit_status();
.................... 
.................... int1 req_use_smf();
.................... 
.................... 
.................... #include "./src/communication_driver.c"
.................... 
.................... #endif
.................... 
.................... // EOF
.................... 
.................... 
.................... // Copy to SMF
.................... #include "./lib/data_copy.h"
.................... #ifndef DATA_COPY_H
.................... #define DATA_COPY_H
.................... 
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... void smf_write();
.................... 
.................... 
.................... #include "./src/data_copy.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... // ______________ defines (typedef) ____________
.................... 
.................... typedef struct {
....................     unsigned int32 src;
....................     unsigned int32 dest;
....................     unsigned int32 size;
.................... } SmfDataStruct;
.................... 
.................... #define SMF_DATA_SIZE 16
.................... typedef struct {
....................    SmfDataStruct smf_data[SMF_DATA_SIZE];
....................    int8 smf_data_head;
....................    int8 smf_data_tail;
.................... } SmfQueueStruct;
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile SmfQueueStruct smf_queue = {0};
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... void enqueue_smf_data(SmfDataStruct *data);
.................... 
.................... SmfDataStruct *dequeue_smf_data();
.................... 
.................... int1 is_empty_smf_data(void);
.................... 
.................... 
.................... 
.................... #include "src/smf_queue.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void smf_write()
.................... {   
....................    while (!is_empty_smf_data())
*
11DC:  MOVLP  08
11DD:  CALL   648
11DE:  MOVLP  10
11DF:  MOVF   78,F
11E0:  BTFSS  03.2
11E1:  GOTO   379
....................    {
....................       SmfDataStruct *smf_data = dequeue_smf_data();
*
1211:  MOVF   79,W
1212:  MOVLB  10
1213:  MOVWF  38
1214:  MOVF   78,W
1215:  MOVWF  37
....................       fprintf(PC, "Destination address: \t0x%08LX\r\n", smf_data->dest);
1216:  MOVF   37,W
1217:  MOVWF  04
1218:  MOVF   38,W
1219:  MOVWF  05
121A:  ADDFSR 04,FSR0
121B:  MOVF   00,W
121C:  MOVWF  3C
121D:  ADDFSR 01,FSR0
121E:  MOVF   00,W
121F:  MOVWF  3D
1220:  ADDFSR 01,FSR0
1221:  MOVF   00,W
1222:  MOVWF  3E
1223:  ADDFSR 01,FSR0
1224:  MOVF   00,W
1225:  MOVWF  3F
1226:  ADDFSR 3D,FSR0
1227:  MOVLW  BE
1228:  MOVLB  03
1229:  MOVWF  11
122A:  MOVLW  03
122B:  MOVWF  12
122C:  BCF    03.0
122D:  MOVLW  18
122E:  MOVLB  10
122F:  MOVWF  6C
1230:  MOVLP  00
1231:  MOVLB  00
1232:  CALL   775
1233:  MOVLP  10
1234:  MOVLB  10
1235:  MOVF   3F,W
1236:  MOVWF  6C
1237:  MOVLW  37
1238:  MOVWF  6D
1239:  MOVLP  00
123A:  MOVLB  00
123B:  CALL   6D2
123C:  MOVLP  10
123D:  MOVLB  10
123E:  MOVF   3E,W
123F:  MOVWF  6C
1240:  MOVLW  37
1241:  MOVWF  6D
1242:  MOVLP  00
1243:  MOVLB  00
1244:  CALL   6D2
1245:  MOVLP  10
1246:  MOVLB  10
1247:  MOVF   3D,W
1248:  MOVWF  6C
1249:  MOVLW  37
124A:  MOVWF  6D
124B:  MOVLP  00
124C:  MOVLB  00
124D:  CALL   6D2
124E:  MOVLP  10
124F:  MOVLB  10
1250:  MOVF   3C,W
1251:  MOVWF  6C
1252:  MOVLW  37
1253:  MOVWF  6D
1254:  MOVLP  00
1255:  MOVLB  00
1256:  CALL   6D2
1257:  MOVLP  10
1258:  MOVLW  0D
1259:  MOVLB  11
125A:  MOVWF  20
125B:  MOVLP  00
125C:  MOVLB  00
125D:  CALL   5DF
125E:  MOVLP  10
125F:  MOVLW  0A
1260:  MOVLB  11
1261:  MOVWF  20
1262:  MOVLP  00
1263:  MOVLB  00
1264:  CALL   5DF
1265:  MOVLP  10
....................       fprintf(PC, "Source address: \t0x%08LX\r\n", smf_data->src);
1266:  MOVLB  10
1267:  MOVF   37,W
1268:  MOVWF  04
1269:  MOVF   38,W
126A:  MOVWF  05
126B:  ADDFSR 00,FSR0
126C:  MOVF   00,W
126D:  MOVWF  3C
126E:  ADDFSR 01,FSR0
126F:  MOVF   00,W
1270:  MOVWF  3D
1271:  ADDFSR 01,FSR0
1272:  MOVF   00,W
1273:  MOVWF  3E
1274:  ADDFSR 01,FSR0
1275:  MOVF   00,W
1276:  MOVWF  3F
1277:  ADDFSR 3D,FSR0
1278:  MOVLW  CE
1279:  MOVLB  03
127A:  MOVWF  11
127B:  MOVLW  03
127C:  MOVWF  12
127D:  BCF    03.0
127E:  MOVLW  13
127F:  MOVLB  10
1280:  MOVWF  6C
1281:  MOVLP  00
1282:  MOVLB  00
1283:  CALL   775
1284:  MOVLP  10
1285:  MOVLB  10
1286:  MOVF   3F,W
1287:  MOVWF  6C
1288:  MOVLW  37
1289:  MOVWF  6D
128A:  MOVLP  00
128B:  MOVLB  00
128C:  CALL   6D2
128D:  MOVLP  10
128E:  MOVLB  10
128F:  MOVF   3E,W
1290:  MOVWF  6C
1291:  MOVLW  37
1292:  MOVWF  6D
1293:  MOVLP  00
1294:  MOVLB  00
1295:  CALL   6D2
1296:  MOVLP  10
1297:  MOVLB  10
1298:  MOVF   3D,W
1299:  MOVWF  6C
129A:  MOVLW  37
129B:  MOVWF  6D
129C:  MOVLP  00
129D:  MOVLB  00
129E:  CALL   6D2
129F:  MOVLP  10
12A0:  MOVLB  10
12A1:  MOVF   3C,W
12A2:  MOVWF  6C
12A3:  MOVLW  37
12A4:  MOVWF  6D
12A5:  MOVLP  00
12A6:  MOVLB  00
12A7:  CALL   6D2
12A8:  MOVLP  10
12A9:  MOVLW  0D
12AA:  MOVLB  11
12AB:  MOVWF  20
12AC:  MOVLP  00
12AD:  MOVLB  00
12AE:  CALL   5DF
12AF:  MOVLP  10
12B0:  MOVLW  0A
12B1:  MOVLB  11
12B2:  MOVWF  20
12B3:  MOVLP  00
12B4:  MOVLB  00
12B5:  CALL   5DF
12B6:  MOVLP  10
....................       fprintf(PC, "Data size: \t\t  %08LX\r\n", smf_data->size);
12B7:  MOVLB  10
12B8:  MOVF   37,W
12B9:  MOVWF  04
12BA:  MOVF   38,W
12BB:  MOVWF  05
12BC:  ADDFSR 08,FSR0
12BD:  MOVF   00,W
12BE:  MOVWF  3C
12BF:  ADDFSR 01,FSR0
12C0:  MOVF   00,W
12C1:  MOVWF  3D
12C2:  ADDFSR 01,FSR0
12C3:  MOVF   00,W
12C4:  MOVWF  3E
12C5:  ADDFSR 01,FSR0
12C6:  MOVF   00,W
12C7:  MOVWF  3F
12C8:  ADDFSR 3D,FSR0
12C9:  MOVLW  DC
12CA:  MOVLB  03
12CB:  MOVWF  11
12CC:  MOVLW  03
12CD:  MOVWF  12
12CE:  BCF    03.0
12CF:  MOVLW  0F
12D0:  MOVLB  10
12D1:  MOVWF  6C
12D2:  MOVLP  00
12D3:  MOVLB  00
12D4:  CALL   775
12D5:  MOVLP  10
12D6:  MOVLB  10
12D7:  MOVF   3F,W
12D8:  MOVWF  6C
12D9:  MOVLW  37
12DA:  MOVWF  6D
12DB:  MOVLP  00
12DC:  MOVLB  00
12DD:  CALL   6D2
12DE:  MOVLP  10
12DF:  MOVLB  10
12E0:  MOVF   3E,W
12E1:  MOVWF  6C
12E2:  MOVLW  37
12E3:  MOVWF  6D
12E4:  MOVLP  00
12E5:  MOVLB  00
12E6:  CALL   6D2
12E7:  MOVLP  10
12E8:  MOVLB  10
12E9:  MOVF   3D,W
12EA:  MOVWF  6C
12EB:  MOVLW  37
12EC:  MOVWF  6D
12ED:  MOVLP  00
12EE:  MOVLB  00
12EF:  CALL   6D2
12F0:  MOVLP  10
12F1:  MOVLB  10
12F2:  MOVF   3C,W
12F3:  MOVWF  6C
12F4:  MOVLW  37
12F5:  MOVWF  6D
12F6:  MOVLP  00
12F7:  MOVLB  00
12F8:  CALL   6D2
12F9:  MOVLP  10
12FA:  MOVLW  0D
12FB:  MOVLB  11
12FC:  MOVWF  20
12FD:  MOVLP  00
12FE:  MOVLB  00
12FF:  CALL   5DF
1300:  MOVLP  10
1301:  MOVLW  0A
1302:  MOVLB  11
1303:  MOVWF  20
1304:  MOVLP  00
1305:  MOVLB  00
1306:  CALL   5DF
1307:  MOVLP  10
....................       fprintf(PC, "Copying.");
1308:  MOVLW  E8
1309:  MOVLB  03
130A:  MOVWF  11
130B:  MOVLW  03
130C:  MOVWF  12
130D:  MOVLP  00
130E:  MOVLB  00
130F:  CALL   604
1310:  MOVLP  10
....................       delay_ms(1000);
1311:  MOVLW  04
1312:  MOVLB  10
1313:  MOVWF  3C
1314:  MOVLW  FA
1315:  MOVWF  3D
1316:  MOVLP  08
1317:  MOVLB  00
1318:  CALL   653
1319:  MOVLP  10
131A:  MOVLB  10
131B:  DECFSZ 3C,F
131C:  GOTO   314
....................       fprintf(PC, ".");
131D:  MOVLW  2E
131E:  MOVLB  11
131F:  MOVWF  20
1320:  MOVLP  00
1321:  MOVLB  00
1322:  CALL   5DF
1323:  MOVLP  10
....................       delay_ms(1000);
1324:  MOVLW  04
1325:  MOVLB  10
1326:  MOVWF  3C
1327:  MOVLW  FA
1328:  MOVWF  3D
1329:  MOVLP  08
132A:  MOVLB  00
132B:  CALL   653
132C:  MOVLP  10
132D:  MOVLB  10
132E:  DECFSZ 3C,F
132F:  GOTO   327
....................       fprintf(PC, ".");
1330:  MOVLW  2E
1331:  MOVLB  11
1332:  MOVWF  20
1333:  MOVLP  00
1334:  MOVLB  00
1335:  CALL   5DF
1336:  MOVLP  10
....................       delay_ms(1000);
1337:  MOVLW  04
1338:  MOVLB  10
1339:  MOVWF  3C
133A:  MOVLW  FA
133B:  MOVWF  3D
133C:  MOVLP  08
133D:  MOVLB  00
133E:  CALL   653
133F:  MOVLP  10
1340:  MOVLB  10
1341:  DECFSZ 3C,F
1342:  GOTO   33A
....................       fprintf(PC, ".");   
1343:  MOVLW  2E
1344:  MOVLB  11
1345:  MOVWF  20
1346:  MOVLP  00
1347:  MOVLB  00
1348:  CALL   5DF
1349:  MOVLP  10
....................       delay_ms(1000);
134A:  MOVLW  04
134B:  MOVLB  10
134C:  MOVWF  3C
134D:  MOVLW  FA
134E:  MOVWF  3D
134F:  MOVLP  08
1350:  MOVLB  00
1351:  CALL   653
1352:  MOVLP  10
1353:  MOVLB  10
1354:  DECFSZ 3C,F
1355:  GOTO   34D
....................       fprintf(PC, ".\r\n");   
1356:  MOVLW  2E
1357:  MOVLB  11
1358:  MOVWF  20
1359:  MOVLP  00
135A:  MOVLB  00
135B:  CALL   5DF
135C:  MOVLP  10
135D:  MOVLW  0D
135E:  MOVLB  11
135F:  MOVWF  20
1360:  MOVLP  00
1361:  MOVLB  00
1362:  CALL   5DF
1363:  MOVLP  10
1364:  MOVLW  0A
1365:  MOVLB  11
1366:  MOVWF  20
1367:  MOVLP  00
1368:  MOVLB  00
1369:  CALL   5DF
136A:  MOVLP  10
....................       delay_ms(1000);
136B:  MOVLW  04
136C:  MOVLB  10
136D:  MOVWF  3C
136E:  MOVLW  FA
136F:  MOVWF  3D
1370:  MOVLP  08
1371:  MOVLB  00
1372:  CALL   653
1373:  MOVLP  10
1374:  MOVLB  10
1375:  DECFSZ 3C,F
1376:  GOTO   36E
1377:  MOVLB  00
1378:  GOTO   1DC
....................    }
....................    fprintf(PC, "_________End smf_write_________\r\n______________________________\r\n\r\n");
1379:  MOVLW  ED
137A:  MOVLB  03
137B:  MOVWF  11
137C:  MOVLW  03
137D:  MOVWF  12
137E:  MOVLP  00
137F:  MOVLB  00
1380:  CALL   604
1381:  MOVLP  10
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "mmj_cigs_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... #define PARAMETER_LENGTH 8
.................... 
.................... #Separate
.................... int1 execute_command(Command *command);
.................... int1 handle_uplink_command(Command *command);
.................... int1 handle_status_check(Command *command);
.................... int1 handle_smf_available(Command *command);
.................... void execute_mission(unsigned int8 *content);
.................... 
.................... #include "../mmj_cigs_excute_mission.c"
.................... #include "mmj_cigs_mode.h"
.................... #ifndef MMJ_CIGS_MODE_H
.................... #define MMJ_CIGS_MODE_H
.................... 
.................... 
.................... // ___________MODE FUNCTIONS____________
.................... 
.................... #Separate
.................... void mode_measure(unsigned int8 parameter[]);
.................... 
.................... // Flash command 
.................... #Separate
.................... void mode_flash_erase_all();
.................... #Separate
.................... void mode_flash_erase_1sector();
.................... #Separate
.................... void mode_flash_copy_1sector();
.................... #Separate
.................... void mode_flash_write_1sector();
.................... #Separate
.................... void mode_flash_func2();
.................... #Separate
.................... void mode_flash_read();
.................... #Separate
.................... void mode_flash_read_address();
.................... 
.................... // IV command
.................... #Separate
.................... void mode_iv_measure();
.................... #Separate
.................... void mode_iv_measure_voltage();
.................... 
.................... 
.................... 
.................... // Development command
.................... #Separate
.................... void mode_dev_vol();
.................... #Separate
.................... void mode_dev_cur();
.................... #Separate
.................... void mode_dev_temp();   
.................... #Separate
.................... void mode_dev_pd();
.................... #Separate
.................... void mode_dev_cigs();
.................... #Separate
.................... void mode_dev_time();
.................... #Separate
.................... void mode_dev_sweep();
.................... 
.................... // ______________CMD ID________________
.................... #define ID_SWEEP 0x01
.................... 
.................... // Flash command 
.................... #define ID_FLASH_ERASE_ALL 0xA0
.................... #define ID_FLASH_ERASE_1SECTOR 0xA1
.................... #define ID_FLASH_COPY_1SECTOR 0xA2
.................... #define ID_FLASH_WRITE_1SECTOR 0xA3
.................... #define ID_FLASH_FUNC2 0xA4
.................... #define ID_FLASH_READ 0xA5
.................... #define ID_FLASH_READ_ADDRESS 0xA6
.................... 
.................... // IV command
.................... #define ID_IV_MEASURE 0xB0
.................... #define ID_IV_MEASURE_VOLTAGE 0xB1
.................... 
.................... // Development command
.................... #define ID_DEV_VOL 0xC0
.................... #define ID_DEV_CUR 0xC1
.................... #define ID_DEV_TEMP 0xC1
.................... #define ID_DEV_PD 0xC2
.................... #define ID_DEV_CIGS 0xC3
.................... #define ID_DEV_TIME 0xC4
.................... #define ID_DEV_SWEEP 0xC5
.................... 
.................... #include "../mmj_cigs_mode.c"
.................... 
.................... #endif // MMJ_CIGS_MODE_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #separate
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
1000:  MOVLW  0F
1001:  MOVLB  03
1002:  MOVWF  11
1003:  MOVLW  04
1004:  MOVWF  12
1005:  MOVLP  00
1006:  MOVLB  00
1007:  CALL   604
1008:  MOVLP  10
.................... 
....................    switch (command->frame_id)
1009:  MOVLB  10
100A:  MOVF   33,W
100B:  MOVWF  04
100C:  MOVF   34,W
100D:  MOVWF  05
100E:  ADDFSR 00,FSR0
100F:  MOVF   00,W
1010:  XORLW  00
1011:  MOVLB  00
1012:  BTFSC  03.2
1013:  GOTO   01B
1014:  XORLW  01
1015:  BTFSC  03.2
1016:  GOTO   152
1017:  XORLW  03
1018:  BTFSC  03.2
1019:  GOTO   1AE
101A:  GOTO   393
....................    {
....................       case UPLINK_COMMAND:
....................          return handle_uplink_command(command);
101B:  MOVLB  10
101C:  MOVF   34,W
101D:  MOVWF  36
101E:  MOVF   33,W
101F:  MOVWF  35
*
1150:  MOVF   78,W
1151:  GOTO   395
....................       
....................       case STATUS_CHECK:
....................          return handle_status_check(command);
1152:  MOVLB  10
1153:  MOVF   34,W
1154:  MOVWF  36
1155:  MOVF   33,W
1156:  MOVWF  35
*
11AC:  MOVF   78,W
11AD:  GOTO   395
....................       
....................       case IS_SMF_AVAILABLE:
....................          return handle_smf_available(command);
11AE:  MOVLB  10
11AF:  MOVF   34,W
11B0:  MOVWF  36
11B1:  MOVF   33,W
11B2:  MOVWF  35
*
1391:  MOVF   78,W
1392:  GOTO   395
....................    }
.................... 
....................    return FALSE;
1393:  MOVLW  00
1394:  MOVWF  78
1395:  MOVLP  10
1396:  GOTO   516 (RETURN)
.................... }
.................... 
.................... 
.................... // ___________ command execution ___________
.................... int1 handle_uplink_command(Command *command)
.................... {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
1020:  MOVLW  1B
1021:  MOVLB  03
1022:  MOVWF  11
1023:  MOVLW  04
1024:  MOVWF  12
1025:  MOVLP  00
1026:  MOVLB  00
1027:  CALL   604
1028:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknowledge\r\n");
1029:  MOVLW  26
102A:  MOVLB  03
102B:  MOVWF  11
102C:  MOVLW  04
102D:  MOVWF  12
102E:  MOVLP  00
102F:  MOVLB  00
1030:  CALL   604
1031:  MOVLP  10
....................    transmit_ack();
1032:  MOVLP  00
1033:  CALL   7EF
1034:  MOVLP  10
.................... 
....................    status = EXECUTING_MISSION;
1035:  MOVLW  02
1036:  MOVWF  2B
....................    execute_mission(command->content);
1037:  MOVLW  01
1038:  MOVLB  10
1039:  ADDWF  35,W
103A:  MOVWF  78
103B:  MOVLW  00
103C:  ADDWFC 36,W
103D:  MOVWF  7A
103E:  MOVF   78,W
103F:  MOVWF  38
1040:  MOVF   7A,W
1041:  MOVWF  39
1042:  MOVF   39,W
1043:  MOVWF  3B
1044:  MOVF   38,W
1045:  MOVWF  3A
.................... 
....................    if (is_empty_smf_data())
*
1130:  MOVLP  08
1131:  CALL   648
1132:  MOVLP  10
1133:  MOVF   78,F
1134:  BTFSC  03.2
1135:  GOTO   14C
....................    {
....................       if (duration_sec < sec)
1136:  MOVF   33,F
1137:  BTFSS  03.2
1138:  GOTO   146
1139:  MOVF   32,F
113A:  BTFSS  03.2
113B:  GOTO   146
113C:  MOVF   29,W
113D:  SUBWF  31,W
113E:  BTFSS  03.0
113F:  GOTO   149
1140:  BTFSS  03.2
1141:  GOTO   146
1142:  MOVF   30,W
1143:  SUBWF  28,W
1144:  BTFSC  03.0
1145:  GOTO   149
....................          status = FINISHED;
1146:  MOVLW  06
1147:  MOVWF  2B
1148:  GOTO   14B
....................       else
....................          status = IDLE;
1149:  MOVLW  03
114A:  MOVWF  2B
....................    }
114B:  GOTO   14E
....................    else
....................    {
....................       status = SMF_USE_REQ;
114C:  MOVLW  04
114D:  MOVWF  2B
....................    }
.................... 
....................    return FALSE;
114E:  MOVLW  00
114F:  MOVWF  78
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command)
.................... {
....................    fprintf(PC, "\t-> Status check\r\n");
*
1157:  MOVLW  34
1158:  MOVLB  03
1159:  MOVWF  11
115A:  MOVLW  04
115B:  MOVWF  12
115C:  MOVLP  00
115D:  MOVLB  00
115E:  CALL   604
115F:  MOVLP  10
....................    fprintf(PC, "\t\t-> My status is %d\r\n", status);
1160:  MOVLW  3E
1161:  MOVLB  03
1162:  MOVWF  11
1163:  MOVLW  04
1164:  MOVWF  12
1165:  BCF    03.0
1166:  MOVLW  12
1167:  MOVLB  10
1168:  MOVWF  6C
1169:  MOVLP  00
116A:  MOVLB  00
116B:  CALL   775
116C:  MOVLP  10
116D:  MOVF   2B,W
116E:  MOVLB  10
116F:  MOVWF  3F
1170:  MOVLW  18
1171:  MOVWF  40
1172:  MOVLP  08
1173:  MOVLB  00
1174:  CALL   24A
1175:  MOVLP  10
1176:  MOVLW  0D
1177:  MOVLB  11
1178:  MOVWF  20
1179:  MOVLP  00
117A:  MOVLB  00
117B:  CALL   5DF
117C:  MOVLP  10
117D:  MOVLW  0A
117E:  MOVLB  11
117F:  MOVWF  20
1180:  MOVLP  00
1181:  MOVLB  00
1182:  CALL   5DF
1183:  MOVLP  10
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
1184:  MOVLW  4A
1185:  MOVLB  03
1186:  MOVWF  11
1187:  MOVLW  04
1188:  MOVWF  12
1189:  MOVLP  00
118A:  MOVLB  00
118B:  CALL   604
118C:  MOVLP  10
....................    transmit_status();
.................... 
....................    if (status == FINISHED)
*
119A:  MOVF   2B,W
119B:  SUBLW  06
119C:  BTFSS  03.2
119D:  GOTO   1AA
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
119E:  MOVLW  59
119F:  MOVLB  03
11A0:  MOVWF  11
11A1:  MOVLW  04
11A2:  MOVWF  12
11A3:  MOVLP  00
11A4:  MOVLB  00
11A5:  CALL   604
11A6:  MOVLP  10
....................       return TRUE;
11A7:  MOVLW  01
11A8:  MOVWF  78
11A9:  GOTO   1AC
....................    }
.................... 
....................    return FALSE;
11AA:  MOVLW  00
11AB:  MOVWF  78
.................... }
.................... 
.................... int1 handle_smf_available(Command *command)
.................... {
....................    fprintf(PC, "\t-> is SMF available\r\n");
*
11B3:  MOVLW  67
11B4:  MOVLB  03
11B5:  MOVWF  11
11B6:  MOVLW  04
11B7:  MOVWF  12
11B8:  MOVLP  00
11B9:  MOVLB  00
11BA:  CALL   604
11BB:  MOVLP  10
....................    fprintf(PC, "\t   Transmit Acknowledge\r\n");
11BC:  MOVLW  73
11BD:  MOVLB  03
11BE:  MOVWF  11
11BF:  MOVLW  04
11C0:  MOVWF  12
11C1:  MOVLP  00
11C2:  MOVLB  00
11C3:  CALL   604
11C4:  MOVLP  10
....................    transmit_ack();
11C5:  MOVLP  00
11C6:  CALL   7EF
11C7:  MOVLP  10
.................... 
....................    if (command->content[0] == ALLOW)
11C8:  MOVLB  10
11C9:  MOVF   35,W
11CA:  MOVWF  04
11CB:  MOVF   36,W
11CC:  MOVWF  05
11CD:  ADDFSR 01,FSR0
11CE:  MOVF   00,F
11CF:  BTFSS  03.2
11D0:  GOTO   386
....................    {
....................       fprintf(PC, "\t\t-> allowed\r\n");
11D1:  MOVLW  81
11D2:  MOVLB  03
11D3:  MOVWF  11
11D4:  MOVLW  04
11D5:  MOVWF  12
11D6:  MOVLP  00
11D7:  MOVLB  00
11D8:  CALL   604
11D9:  MOVLP  10
....................       status = COPYING;
11DA:  MOVLW  05
11DB:  MOVWF  2B
....................       smf_write();
....................       status = FINISHED;
*
1382:  MOVLW  06
1383:  MOVWF  2B
....................    }
1384:  GOTO   38F
1385:  MOVLB  10
....................    else
....................    {
....................       fprintf(PC, "\t\t-> denied\r\n");
1386:  MOVLW  89
1387:  MOVLB  03
1388:  MOVWF  11
1389:  MOVLW  04
138A:  MOVWF  12
138B:  MOVLP  00
138C:  MOVLB  00
138D:  CALL   604
138E:  MOVLP  10
....................    }
.................... 
....................    return FALSE;
138F:  MOVLW  00
1390:  MOVWF  78
.................... }
.................... 
.................... void execute_mission(unsigned int8 *content)
*
1046:  MOVF   3A,W
1047:  MOVWF  04
1048:  MOVF   3B,W
1049:  MOVWF  05
104A:  MOVIW  [FSR0+00],W
104B:  MOVWF  3C
104C:  MOVLW  01
104D:  ADDWF  3A,W
104E:  MOVWF  78
104F:  MOVLW  00
1050:  ADDWFC 3B,W
1051:  MOVWF  7A
1052:  MOVF   78,W
1053:  MOVWF  3D
1054:  MOVF   7A,W
1055:  MOVWF  3E
.................... {
....................    // record to executed mission list
....................    unsigned int8 command_id = content[0];
....................    unsigned int8 *parameter = &content[1];
....................    
....................    if (is_executed_mission(command_id))
1056:  MOVF   3C,W
1057:  MOVWF  3F
*
1084:  MOVF   78,F
1085:  BTFSC  03.2
1086:  GOTO   0AD
....................    {
....................       fprintf(PC, "\r\nThis  mission is executed\r\n\t-> 0x%d\r\n", command_id);
1087:  MOVLW  90
1088:  MOVLB  03
1089:  MOVWF  11
108A:  MOVLW  04
108B:  MOVWF  12
108C:  BCF    03.0
108D:  MOVLW  23
108E:  MOVLB  10
108F:  MOVWF  6C
1090:  MOVLP  00
1091:  MOVLB  00
1092:  CALL   775
1093:  MOVLP  10
1094:  MOVLB  10
1095:  MOVF   3C,W
1096:  MOVWF  3F
1097:  MOVLW  18
1098:  MOVWF  40
1099:  MOVLP  08
109A:  MOVLB  00
109B:  CALL   24A
109C:  MOVLP  10
109D:  MOVLW  0D
109E:  MOVLB  11
109F:  MOVWF  20
10A0:  MOVLP  00
10A1:  MOVLB  00
10A2:  CALL   5DF
10A3:  MOVLP  10
10A4:  MOVLW  0A
10A5:  MOVLB  11
10A6:  MOVWF  20
10A7:  MOVLP  00
10A8:  MOVLB  00
10A9:  CALL   5DF
10AA:  MOVLP  10
....................       return;
10AB:  GOTO   130
10AC:  MOVLB  10
....................    }
....................    
....................    add_executed_mission(command_id);
10AD:  MOVF   3C,W
10AE:  MOVWF  3F
....................    
....................    // execution mission
....................    fprintf(PC, "\r\n____________________________________\r\n________Start execute_mission________\r\n\r\n");
*
10DD:  MOVLW  A4
10DE:  MOVLB  03
10DF:  MOVWF  11
10E0:  MOVLW  04
10E1:  MOVWF  12
10E2:  MOVLP  00
10E3:  MOVLB  00
10E4:  CALL   604
10E5:  MOVLP  10
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
10E6:  MOVLW  CD
10E7:  MOVLB  03
10E8:  MOVWF  11
10E9:  MOVLW  04
10EA:  MOVWF  12
10EB:  BCF    03.0
10EC:  MOVLW  0C
10ED:  MOVLB  10
10EE:  MOVWF  6C
10EF:  MOVLP  00
10F0:  MOVLB  00
10F1:  CALL   775
10F2:  MOVLP  10
10F3:  MOVLB  10
10F4:  MOVF   3C,W
10F5:  MOVWF  6C
10F6:  MOVLW  37
10F7:  MOVWF  6D
10F8:  MOVLP  00
10F9:  MOVLB  00
10FA:  CALL   6D2
10FB:  MOVLP  10
10FC:  MOVLW  D4
10FD:  MOVLB  03
10FE:  MOVWF  11
10FF:  MOVLW  04
1100:  MOVWF  12
1101:  BCF    03.0
1102:  MOVLW  04
1103:  MOVLB  10
1104:  MOVWF  6C
1105:  MOVLP  00
1106:  MOVLB  00
1107:  CALL   775
1108:  MOVLP  10
....................    switch(command_id)
1109:  MOVLB  10
110A:  MOVF   3C,W
110B:  XORLW  01
110C:  MOVLB  00
110D:  BTFSC  03.2
110E:  GOTO   113
110F:  XORLW  A1
1110:  BTFSC  03.2
1111:  GOTO   11D
1112:  GOTO   11E
....................    {
....................       case ID_SWEEP:
....................          mode_measure(parameter);
1113:  MOVLB  10
1114:  MOVF   3E,W
1115:  MOVWF  40
1116:  MOVF   3D,W
1117:  MOVWF  3F
1118:  MOVLP  08
1119:  MOVLB  00
111A:  GOTO   632
111B:  MOVLP  10
....................          break;
111C:  GOTO   127
....................       case ID_FLASH_ERASE_ALL:
....................          break;
111D:  GOTO   127
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
111E:  MOVLW  D7
111F:  MOVLB  03
1120:  MOVWF  11
1121:  MOVLW  04
1122:  MOVWF  12
1123:  MOVLP  00
1124:  MOVLB  00
1125:  CALL   604
1126:  MOVLP  10
....................    }
....................    fprintf(PC, "\r\n_________End execute_mission_________\r\n____________________________________\r\n");
1127:  MOVLW  E3
1128:  MOVLB  03
1129:  MOVWF  11
112A:  MOVLW  04
112B:  MOVWF  12
112C:  MOVLP  00
112D:  MOVLB  00
112E:  CALL   604
112F:  MOVLP  10
.................... }
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "./lib/flash_function.h"
.................... #ifndef FLASH_FUNCTION_H
.................... #define FLASH_FUNCTION_H
.................... 
.................... #include "flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define DEVICE_ID_DATA_SIZE 20
.................... 
.................... 
.................... void flash_init(Flash flash_stream);
.................... 
.................... 
.................... #include "./src/flash_function.c"
.................... #include "../flash.h"
.................... #ifndef FLASH_H
.................... #define FLASH_H
.................... ///////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////GDNS_226_FlashOperation.h/////////////////////////////
.................... //////////////////////////////////ver 2.0//////////////////////////////////////
.................... /////////////////////////////last editor:T Kawai///////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define DEBUG
.................... //////////////////////////////port select//////////////////////////////////////
.................... #ifdef DEBUG
....................    #define DEBUG_PORT pc
.................... #endif
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define SPI STREAM////////////////////////////////
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... typedef enum spi_stream{
....................    SPI_0,
....................    SPI_1,
....................    SPI_2,
....................    SPI_3,
.................... }SpiStreamId;
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////define Model name////////////////////////////////
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////define structure member/////////////////////////////
.................... typedef struct select_stream_to_flash{
....................    SpiStreamId spi_stream_id;
....................    unsigned int8 flash_model;
....................    int16 cs_pin;
.................... }Flash;
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////    values    //////////////////////////////////////
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, SPI0_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS};
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////CMD List///////////////////////////////////////
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////function List///////////////////////////////////////
.................... //higher all spi csPINs
.................... void flash_setting(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready
.................... int8 status_register(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //T:Flash id read successfully(connect OK),F:Flash id read failed
.................... int8 read_id(Flash flash_stream);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //64kByte erase
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //32kByte erase
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //4kByte erase
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);                                  
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read 1 Byte data
.................... int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);                                               
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //read multi Bytes data(max 128 MByte) and store to "read_data"
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, int8 *read_data, unsigned int32 read_amount);        
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write 1 Byte data to flash
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address,int8 write_data);                             
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //write multi Bytes data(max256 Byte) in "write_data" to flash
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, int8 *write_data, unsigned int16 write_amount);              
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////////////////////end of GDNS_226_FlashOperation.h///////////////////////////
.................... #include "src/flash.c"
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../../src/include/mmj_cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... #include <16F1789.h>
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz, clock=16MHz)
.................... #fuses NOMCLR
.................... 
.................... 
.................... 
.................... //#define SELF_DEVICE_ID CIGS_PIC
.................... 
.................... 
.................... //-------------Serial--------------------
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
.................... #define SPI0_CS  PIN_D1
.................... #use spi(MASTER, CLK=PIN_C3, DI=PIN_C4, DO=PIN_C5, BAUD=400000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... // MISO PIN_C5, MOSI PIN_C4, SCK PIN_C3
.................... 
.................... 
.................... #define SPI1_CS PIN_C2
.................... #use spi(MASTER, SPI1, BAUD=400000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
.................... 
.................... //-------------I/O port--------------------
.................... // AI/O___ADC
.................... #define TEMP_TOP PIN_A5
.................... #define TEMP_BOT PIN_A3
.................... #define CIGS_VOLT PIN_A0 //PIN_A0
.................... #define CIGS_CURR PIN_A1
.................... #define PD PIN_E0
.................... 
.................... // AI/O___DAC
.................... #define LOAD PIN_A2
.................... 
.................... // DI/O___
.................... #define CIGS_CONNECT PIN_C0
.................... #define EN_NPWR PIN_C3  //Negative Power
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... 
.................... void flash_init()
.................... {
....................     //Flash smf = {SPI_1, MT25QL01GBBB, SPI1_CS}; // Define the SMF flash stream
....................     output_high(SPI0_CS); // Set CS pin high to deselect the flash chip
*
06F9:  MOVLB  01
06FA:  BCF    0F.1
06FB:  MOVLB  02
06FC:  BSF    0F.1
....................     fprintf(PC, "Flash Initialize\r\n");
06FD:  MOVLW  0B
06FE:  MOVLB  03
06FF:  MOVWF  11
0700:  MOVLW  05
0701:  MOVWF  12
0702:  MOVLB  00
0703:  CALL   604
....................     unsigned int8 chip_id[3] = {0}; // Array to store chip ID
0704:  MOVLB  10
0705:  CLRF   33
0706:  CLRF   34
0707:  CLRF   35
.................... 
....................     output_low(SPI0_CS);                                                  //lower the CS PIN
0708:  MOVLB  01
0709:  BCF    0F.1
070A:  MOVLB  02
070B:  BCF    0F.1
....................     spi_xfer(MIS_FM_STREAM,0x9F);                                           //READ ID COMAND   (0x9F)
070C:  MOVLB  04
070D:  BCF    15.5
070E:  MOVLW  40
070F:  MOVWF  14
0710:  MOVLW  09
0711:  MOVWF  12
0712:  MOVLW  2A
0713:  MOVWF  15
0714:  MOVLW  9F
0715:  MOVLB  10
0716:  MOVWF  3A
0717:  MOVLB  00
0718:  CALL   6C5
....................     fprintf(PC, "\tSMF <-");
0719:  MOVLW  15
071A:  MOVLB  03
071B:  MOVWF  11
071C:  MOVLW  05
071D:  MOVWF  12
071E:  MOVLB  00
071F:  CALL   604
....................     fprintf(PC, "0x9E");
0720:  MOVLW  19
0721:  MOVLB  03
0722:  MOVWF  11
0723:  MOVLW  05
0724:  MOVWF  12
0725:  MOVLB  00
0726:  CALL   604
....................     for (unsigned int8 i = 0; i < 2; i++) {
0727:  MOVLB  10
0728:  CLRF   36
0729:  MOVF   36,W
072A:  SUBLW  01
072B:  BTFSS  03.0
072C:  GOTO   745
....................         chip_id[i] = spi_xfer(MIS_FM_STREAM,0x00);                                  //read chip ID
072D:  MOVLW  13
072E:  ADDWF  36,W
072F:  MOVWF  04
0730:  MOVLW  25
0731:  MOVWF  05
0732:  BTFSC  03.0
0733:  INCF   05,F
0734:  MOVLB  04
0735:  BCF    15.5
0736:  MOVLW  40
0737:  MOVWF  14
0738:  MOVLW  09
0739:  MOVWF  12
073A:  MOVLW  2A
073B:  MOVWF  15
073C:  MOVLB  10
073D:  CLRF   3A
073E:  MOVLB  00
073F:  CALL   6C5
0740:  MOVF   77,W
0741:  MOVWF  00
0742:  MOVLB  10
0743:  INCF   36,F
0744:  GOTO   729
....................         
....................     }
....................     fprintf(PC, "\r\n\tSMF ->");
0745:  MOVLW  1C
0746:  MOVLB  03
0747:  MOVWF  11
0748:  MOVLW  05
0749:  MOVWF  12
074A:  MOVLB  00
074B:  CALL   604
.................... 
....................     for (unsigned int8 i = 0; i < 3; i++) {
074C:  MOVLB  10
074D:  CLRF   37
074E:  MOVF   37,W
074F:  SUBLW  02
0750:  BTFSS  03.0
0751:  GOTO   768
....................         fprintf(PC, "%02X ", chip_id[i]);                                         //print chip ID
0752:  MOVLW  13
0753:  ADDWF  37,W
0754:  MOVWF  04
0755:  MOVLW  25
0756:  MOVWF  05
0757:  BTFSC  03.0
0758:  INCF   05,F
0759:  MOVF   00,W
075A:  MOVWF  38
075B:  MOVWF  6C
075C:  MOVLW  37
075D:  MOVWF  6D
075E:  MOVLB  00
075F:  CALL   6D2
0760:  MOVLW  20
0761:  MOVLB  11
0762:  MOVWF  20
0763:  MOVLB  00
0764:  CALL   5DF
0765:  MOVLB  10
0766:  INCF   37,F
0767:  GOTO   74E
....................     }
.................... 
....................     output_high(SPI0_CS);                                                 //take CS PIN higher back       
0768:  MOVLB  01
0769:  BCF    0F.1
076A:  MOVLB  02
076B:  BSF    0F.1
.................... 
....................     
....................     fprintf(PC, "\r\n\tComplete\r\n");
076C:  MOVLW  21
076D:  MOVLB  03
076E:  MOVWF  11
076F:  MOVLW  05
0770:  MOVWF  12
0771:  MOVLB  00
0772:  CALL   604
0773:  MOVLP  10
0774:  GOTO   44C (RETURN)
.................... }
.................... 
.................... 
.................... #endif // FLASH_FUNCTION_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
1397:  MOVLB  03
1398:  BSF    1F.3
1399:  MOVLW  A0
139A:  MOVWF  1B
139B:  MOVLW  01
139C:  MOVWF  1C
139D:  MOVLW  A6
139E:  MOVWF  1E
139F:  MOVLW  90
13A0:  MOVWF  1D
13A1:  MOVLB  01
13A2:  BCF    0D.4
13A3:  MOVLB  02
13A4:  BSF    0D.4
13A5:  MOVLB  04
13A6:  BCF    15.5
13A7:  MOVLW  40
13A8:  MOVWF  14
13A9:  MOVLW  09
13AA:  MOVWF  12
13AB:  MOVLW  2A
13AC:  MOVWF  15
13AD:  MOVLB  02
13AE:  BCF    1D.5
13AF:  BCF    1D.3
13B0:  BCF    1D.4
13B1:  MOVLB  01
13B2:  BCF    0E.5
13B3:  BSF    0E.4
13B4:  BCF    0E.3
13B5:  MOVLB  00
13B6:  CLRF   29
13B7:  CLRF   28
13B8:  BCF    2A.0
13B9:  MOVLW  03
13BA:  MOVWF  2B
13BB:  CLRF   2F
13BC:  CLRF   2E
13BD:  CLRF   2D
13BE:  CLRF   2C
13BF:  CLRF   33
13C0:  CLRF   32
13C1:  CLRF   31
13C2:  CLRF   30
13C3:  CLRF   35
13C4:  CLRF   34
13C5:  CLRF   37
13C6:  CLRF   36
13C7:  CLRF   58
13C8:  MOVLB  0C
13C9:  CLRF   2C
13CA:  CLRF   2B
13CB:  CLRF   2A
13CC:  CLRF   29
13CD:  CLRF   2E
13CE:  CLRF   2D
13CF:  CLRF   30
13D0:  CLRF   2F
13D1:  CLRF   32
13D2:  CLRF   31
13D3:  CLRF   34
13D4:  CLRF   33
13D5:  MOVLB  03
13D6:  CLRF   0C
13D7:  CLRF   0D
13D8:  CLRF   0E
13D9:  CLRF   0F
13DA:  CLRF   10
13DB:  MOVLB  02
13DC:  CLRF   12
13DD:  CLRF   11
13DE:  GOTO   409
13DF:  DATA 20,34
13E0:  DATA 60,34
13E1:  DATA 18,34
13E2:  DATA 00,34
13E3:  DATA FF,34
13E4:  DATA 60,34
13E5:  DATA 39,34
13E6:  DATA 00,34
13E7:  DATA FF,34
13E8:  DATA C0,34
13E9:  DATA 00,34
13EA:  DATA FF,34
13EB:  DATA C0,34
13EC:  DATA 00,34
13ED:  DATA 93,34
13EE:  DATA C0,34
13EF:  DATA 00,34
13F0:  DATA FF,34
13F1:  DATA 63,34
13F2:  DATA D5,34
13F3:  DATA 00,34
13F4:  DATA 05,34
13F5:  DATA C0,34
13F6:  DATA 00,34
13F7:  DATA 0C,34
13F8:  DATA 80,34
13F9:  DATA 79,34
13FA:  DATA 00,34
13FB:  DATA 01,34
13FC:  DATA 01,34
13FD:  DATA 72,34
13FE:  DATA 00,34
13FF:  DATA 00,34
1400:  DATA 09,34
1401:  DATA 01,34
1402:  DATA 00,34
1403:  DATA 02,34
1404:  DATA 01,34
1405:  DATA 09,34
1406:  DATA C0,34
1407:  DATA 00,34
1408:  DATA 00,34
1409:  MOVLW  13
140A:  MOVWF  05
140B:  MOVLW  DF
140C:  MOVWF  04
140D:  BSF    05.7
140E:  MOVIW  [FSR0++],W
140F:  MOVWF  77
1410:  XORLW  00
1411:  BTFSC  03.2
1412:  GOTO   423
1413:  MOVIW  [FSR0++],W
1414:  MOVWF  78
1415:  BTFSC  78.7
1416:  GOTO   41B
1417:  ANDLW  3F
1418:  MOVWF  07
1419:  MOVIW  [FSR0++],W
141A:  MOVWF  06
141B:  BTFSC  78.6
141C:  MOVIW  [FSR0++],W
141D:  BTFSS  78.6
141E:  MOVIW  [FSR0++],W
141F:  MOVWI  W,[FSR1++]
1420:  DECFSZ 77,F
1421:  GOTO   41D
1422:  GOTO   40E
.................... { 
....................    fprintf(PC,"\r\n============================================================\r\n");
1423:  MOVLW  28
1424:  MOVLB  03
1425:  MOVWF  11
1426:  MOVLW  05
1427:  MOVWF  12
1428:  MOVLP  00
1429:  MOVLB  00
142A:  CALL   604
142B:  MOVLP  10
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM1.\r\n");
142C:  MOVLW  49
142D:  MOVLB  03
142E:  MOVWF  11
142F:  MOVLW  05
1430:  MOVWF  12
1431:  MOVLP  00
1432:  MOVLB  00
1433:  CALL   604
1434:  MOVLP  10
....................    fprintf(PC,"Last updated on 2025/04/25, by Inoue.\r\n\r\n");  
1435:  MOVLW  60
1436:  MOVLB  03
1437:  MOVWF  11
1438:  MOVLW  05
1439:  MOVWF  12
143A:  MOVLP  00
143B:  MOVLB  00
143C:  CALL   604
143D:  MOVLP  10
.................... 
....................    
....................    io_init();
143E:  MOVLP  00
143F:  GOTO   654
1440:  MOVLP  10
....................    adc_init();
1441:  MOVLP  00
1442:  GOTO   66C
1443:  MOVLP  10
....................    uart_init();
1444:  MOVLP  00
1445:  GOTO   694
1446:  MOVLP  10
....................    timer_init();
1447:  MOVLP  00
1448:  GOTO   6A8
1449:  MOVLP  10
....................    flash_init();
144A:  MOVLP  00
144B:  GOTO   6F9
144C:  MOVLP  10
.................... 
.................... 
....................    int1 is_finished = FALSE;
144D:  MOVLB  0F
144E:  BCF    5E.0
....................    fprintf(PC,"CIGS PIC Start Operation\r\n\r\n");
144F:  MOVLW  75
1450:  MOVLB  03
1451:  MOVWF  11
1452:  MOVLW  05
1453:  MOVWF  12
1454:  MOVLP  00
1455:  MOVLB  00
1456:  CALL   604
1457:  MOVLP  10
....................    fprintf(PC,"waiting for BOSS PIC command...");
1458:  MOVLW  84
1459:  MOVLB  03
145A:  MOVWF  11
145B:  MOVLW  05
145C:  MOVWF  12
145D:  MOVLP  00
145E:  MOVLB  00
145F:  CALL   604
1460:  MOVLP  10
....................    //Start loop
....................    while(!is_finished)
1461:  MOVLB  0F
1462:  BTFSC  5E.0
1463:  GOTO   55C
....................    {
....................       // handle from boss commands
....................       if(boss_receive_buffer_size > 0)
1464:  MOVLB  00
1465:  MOVF   58,F
1466:  BTFSC  03.2
1467:  GOTO   526
....................       {
....................          volatile Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
1468:  MOVLW  20
1469:  MOVLB  10
146A:  MOVWF  3A
146B:  MOVLW  18
146C:  MOVWF  39
146D:  MOVLB  00
146E:  MOVF   58,W
146F:  MOVLB  10
1470:  MOVWF  3B
1471:  MOVLP  08
1472:  MOVLB  00
1473:  GOTO   000
1474:  MOVLP  10
1475:  MOVF   79,W
1476:  MOVWF  7A
1477:  MOVF   78,W
1478:  MOVWF  04
1479:  MOVF   7A,W
147A:  MOVWF  05
147B:  MOVLW  23
147C:  MOVWF  78
147D:  MOVLW  24
147E:  MOVWF  07
147F:  MOVLW  EF
1480:  MOVWF  06
1481:  MOVIW  [FSR0++],W
1482:  MOVWI  W,[FSR1++]
1483:  DECFSZ 78,F
1484:  GOTO   481
....................          
....................          fprintf(PC, "FrameID: %1X\r\n", command.frame_id);
1485:  MOVLW  94
1486:  MOVLB  03
1487:  MOVWF  11
1488:  MOVLW  05
1489:  MOVWF  12
148A:  BCF    03.0
148B:  MOVLW  09
148C:  MOVLB  10
148D:  MOVWF  6C
148E:  MOVLP  00
148F:  MOVLB  00
1490:  CALL   775
1491:  MOVLP  10
1492:  MOVLB  0F
1493:  MOVF   5F,W
1494:  MOVLB  10
1495:  MOVWF  6C
1496:  MOVLW  B7
1497:  MOVWF  6D
1498:  MOVLP  00
1499:  MOVLB  00
149A:  CALL   6D2
149B:  MOVLP  10
149C:  MOVLW  0D
149D:  MOVLB  11
149E:  MOVWF  20
149F:  MOVLP  00
14A0:  MOVLB  00
14A1:  CALL   5DF
14A2:  MOVLP  10
14A3:  MOVLW  0A
14A4:  MOVLB  11
14A5:  MOVWF  20
14A6:  MOVLP  00
14A7:  MOVLB  00
14A8:  CALL   5DF
14A9:  MOVLP  10
....................          fprintf(PC, "payload size: %d\r\n", command.size);
14AA:  MOVLW  9C
14AB:  MOVLB  03
14AC:  MOVWF  11
14AD:  MOVLW  05
14AE:  MOVWF  12
14AF:  BCF    03.0
14B0:  MOVLW  0E
14B1:  MOVLB  10
14B2:  MOVWF  6C
14B3:  MOVLP  00
14B4:  MOVLB  00
14B5:  CALL   775
14B6:  MOVLP  10
14B7:  MOVLB  10
14B8:  MOVF   30,W
14B9:  MOVWF  3F
14BA:  MOVLW  18
14BB:  MOVWF  40
14BC:  MOVLP  08
14BD:  MOVLB  00
14BE:  CALL   24A
14BF:  MOVLP  10
14C0:  MOVLW  0D
14C1:  MOVLB  11
14C2:  MOVWF  20
14C3:  MOVLP  00
14C4:  MOVLB  00
14C5:  CALL   5DF
14C6:  MOVLP  10
14C7:  MOVLW  0A
14C8:  MOVLB  11
14C9:  MOVWF  20
14CA:  MOVLP  00
14CB:  MOVLB  00
14CC:  CALL   5DF
14CD:  MOVLP  10
....................          fprintf(PC, "payload: ");
14CE:  MOVLW  A6
14CF:  MOVLB  03
14D0:  MOVWF  11
14D1:  MOVLW  05
14D2:  MOVWF  12
14D3:  MOVLP  00
14D4:  MOVLB  00
14D5:  CALL   604
14D6:  MOVLP  10
....................          for(int8 i = 0; i < command.size; i++)
14D7:  MOVLB  10
14D8:  CLRF   32
14D9:  MOVF   30,W
14DA:  SUBWF  32,W
14DB:  BTFSC  03.0
14DC:  GOTO   4F7
....................             fprintf(PC, "%X ", command.content[i]);
14DD:  MOVLW  F0
14DE:  ADDWF  32,W
14DF:  MOVWF  04
14E0:  MOVLW  24
14E1:  MOVWF  05
14E2:  BTFSC  03.0
14E3:  INCF   05,F
14E4:  MOVF   00,W
14E5:  MOVWF  33
14E6:  MOVWF  6C
14E7:  MOVLW  37
14E8:  MOVWF  6D
14E9:  MOVLP  00
14EA:  MOVLB  00
14EB:  CALL   6D2
14EC:  MOVLP  10
14ED:  MOVLW  20
14EE:  MOVLB  11
14EF:  MOVWF  20
14F0:  MOVLP  00
14F1:  MOVLB  00
14F2:  CALL   5DF
14F3:  MOVLP  10
14F4:  MOVLB  10
14F5:  INCF   32,F
14F6:  GOTO   4D9
....................          fprintf(PC, "\r\n\r\n");
14F7:  MOVLW  AB
14F8:  MOVLB  03
14F9:  MOVWF  11
14FA:  MOVLW  05
14FB:  MOVWF  12
14FC:  MOVLP  00
14FD:  MOVLB  00
14FE:  CALL   604
14FF:  MOVLP  10
....................          
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
1500:  MOVLW  20
1501:  MOVLB  10
1502:  MOVWF  34
1503:  MOVLW  18
1504:  MOVWF  33
1505:  MOVLW  20
1506:  MOVWF  36
1507:  MOVLW  38
1508:  MOVWF  35
1509:  MOVLP  08
150A:  MOVLB  00
150B:  GOTO   2B9
150C:  MOVLP  10
....................             
....................          if(command.is_exist)
150D:  MOVLB  10
150E:  BTFSS  31.0
150F:  GOTO   51C
....................             is_finished = execute_command(&command);
1510:  MOVLW  24
1511:  MOVWF  34
1512:  MOVLW  EF
1513:  MOVWF  33
1514:  MOVLB  00
1515:  GOTO   000
1516:  MOVLB  0F
1517:  BCF    5E.0
1518:  BTFSC  78.0
1519:  BSF    5E.0
151A:  GOTO   527
151B:  MOVLB  10
....................          else
....................          {
....................             fprintf(PC, "\t-> Invalid command\r\n");
151C:  MOVLW  AE
151D:  MOVLB  03
151E:  MOVWF  11
151F:  MOVLW  05
1520:  MOVWF  12
1521:  MOVLP  00
1522:  MOVLB  00
1523:  CALL   604
1524:  MOVLP  10
....................             continue;
1525:  GOTO   461
1526:  MOVLB  0F
....................          }
....................       }   // check if the command is valid
....................       
....................       // check mis mcu duration seconds (used in mission.c \ void continue_mis_mcu(int16 duration_sec))
....................       if (status == IDLE)
1527:  MOVLB  00
1528:  MOVF   2B,W
1529:  SUBLW  03
152A:  BTFSS  03.2
152B:  GOTO   544
....................          if (duration_sec < sec && is_empty_smf_data())
152C:  MOVF   33,F
152D:  BTFSS  03.2
152E:  GOTO   53C
152F:  MOVF   32,F
1530:  BTFSS  03.2
1531:  GOTO   53C
1532:  MOVF   29,W
1533:  SUBWF  31,W
1534:  BTFSS  03.0
1535:  GOTO   544
1536:  BTFSS  03.2
1537:  GOTO   53C
1538:  MOVF   30,W
1539:  SUBWF  28,W
153A:  BTFSC  03.0
153B:  GOTO   544
153C:  MOVLP  08
153D:  CALL   648
153E:  MOVLP  10
153F:  MOVF   78,F
1540:  BTFSC  03.2
1541:  GOTO   544
....................             status = FINISHED;
1542:  MOVLW  06
1543:  MOVWF  2B
....................       
....................       // check `is break while loop`
....................       if(is_finished == TRUE)
1544:  MOVLB  0F
1545:  BTFSC  5E.0
....................          break;
1546:  GOTO   55C
....................          
....................       delay_ms(400);
1547:  MOVLW  02
1548:  MOVLB  10
1549:  MOVWF  33
154A:  MOVLW  C8
154B:  MOVWF  3D
154C:  MOVLP  08
154D:  MOVLB  00
154E:  CALL   653
154F:  MOVLP  10
1550:  MOVLB  10
1551:  DECFSZ 33,F
1552:  GOTO   54A
....................       fprintf(PC,".");
1553:  MOVLW  2E
1554:  MOVLB  11
1555:  MOVWF  20
1556:  MOVLP  00
1557:  MOVLB  00
1558:  CALL   5DF
1559:  MOVLP  10
155A:  GOTO   461
155B:  MOVLB  0F
....................    }
....................    
....................    
....................    fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\nWait for BOSS PIC turn off me");
155C:  MOVLW  B9
155D:  MOVLB  03
155E:  MOVWF  11
155F:  MOVLW  05
1560:  MOVWF  12
1561:  MOVLP  00
1562:  MOVLB  00
1563:  CALL   604
1564:  MOVLP  10
....................    
....................    while (TRUE)
....................    {
....................       fprintf(PC, ".");
1565:  MOVLW  2E
1566:  MOVLB  11
1567:  MOVWF  20
1568:  MOVLP  00
1569:  MOVLB  00
156A:  CALL   5DF
156B:  MOVLP  10
....................       delay_ms(1000);
156C:  MOVLW  04
156D:  MOVLB  10
156E:  MOVWF  33
156F:  MOVLW  FA
1570:  MOVWF  3D
1571:  MOVLP  08
1572:  MOVLB  00
1573:  CALL   653
1574:  MOVLP  10
1575:  MOVLB  10
1576:  DECFSZ 33,F
1577:  GOTO   56F
1578:  MOVLB  00
1579:  GOTO   565
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
157A:  MOVLW  D9
157B:  MOVLB  03
157C:  MOVWF  11
157D:  MOVLW  05
157E:  MOVWF  12
157F:  MOVLP  00
1580:  MOVLB  00
1581:  CALL   604
1582:  MOVLP  10
....................    
.................... }
.................... 
1583:  SLEEP
.................... //

Configuration Fuses:
   Word  1: 3F82   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT NOVCAP PLL_SW STVREN BORV19 NOLPBOR NODEBUG NOLVP
