D G "__PCM__" 0 70 ""5.104""
D G "__DEVICE__" 0 70 "1789"
D G "__DATE__" 0 70 ""9-May-25""
D G "__TIME__" 0 70 ""20:00:18""
D G "_UNICODE" 0 70 ""?""
D G "__EVAL" 0 70 ""?""
D G "MMJ_CIGS_PIC_MAIN_H" 1 2 ""
D G "MMJ_CIGS_PIC_CONFIG_H" 2 2 ""
c L "set_tris_a" 3 1 6 "FUNCTION"
F N "set_tris_a" 3 40 ""
V L "value" 3 40 "int8" `55 
F B "set_tris_a" 3 40 "void(int8 value)" `54 
F N "set_tris_b" 3 41 ""
V L "value" 3 41 "int8" `57 
F B "set_tris_b" 3 41 "void(int8 value)" `56 
F N "set_tris_c" 3 42 ""
V L "value" 3 42 "int8" `59 
F B "set_tris_c" 3 42 "void(int8 value)" `58 
F N "set_tris_d" 3 43 ""
V L "value" 3 43 "int8" `61 
F B "set_tris_d" 3 43 "void(int8 value)" `60 
F N "set_tris_e" 3 44 ""
V L "value" 3 44 "int8" `63 
F B "set_tris_e" 3 44 "void(int8 value)" `62 
F N "set_input_level_a" 3 45 ""
V L "value" 3 45 "int8" `65 
F B "set_input_level_a" 3 45 "void(int8 value)" `64 
F N "set_input_level_b" 3 46 ""
V L "value" 3 46 "int8" `67 
F B "set_input_level_b" 3 46 "void(int8 value)" `66 
F N "set_input_level_c" 3 47 ""
V L "value" 3 47 "int8" `69 
F B "set_input_level_c" 3 47 "void(int8 value)" `68 
F N "set_input_level_d" 3 48 ""
V L "value" 3 48 "int8" `71 
F B "set_input_level_d" 3 48 "void(int8 value)" `70 
F N "set_input_level_e" 3 49 ""
V L "value" 3 49 "int8" `73 
F B "set_input_level_e" 3 49 "void(int8 value)" `72 
F N "set_open_drain_a" 3 50 ""
V L "value" 3 50 "int8" `75 
F B "set_open_drain_a" 3 50 "void(int8 value)" `74 
F N "set_open_drain_b" 3 51 ""
V L "value" 3 51 "int8" `77 
F B "set_open_drain_b" 3 51 "void(int8 value)" `76 
F N "set_open_drain_c" 3 52 ""
V L "value" 3 52 "int8" `79 
F B "set_open_drain_c" 3 52 "void(int8 value)" `78 
F N "set_open_drain_d" 3 53 ""
V L "value" 3 53 "int8" `81 
F B "set_open_drain_d" 3 53 "void(int8 value)" `80 
F N "set_open_drain_e" 3 54 ""
V L "value" 3 54 "int8" `83 
F B "set_open_drain_e" 3 54 "void(int8 value)" `82 
F N "get_tris_a" 3 55 ""
F B "get_tris_a" 3 55 "int8()" `84 
F N "get_tris_b" 3 56 ""
F B "get_tris_b" 3 56 "int8()" `85 
F N "get_tris_c" 3 57 ""
F B "get_tris_c" 3 57 "int8()" `86 
F N "get_tris_d" 3 58 ""
F B "get_tris_d" 3 58 "int8()" `87 
F N "get_tris_e" 3 59 ""
F B "get_tris_e" 3 59 "int8()" `88 
F N "output_a" 3 60 ""
V L "value" 3 60 "int8" `90 
F B "output_a" 3 60 "void(int8 value)" `89 
F N "output_b" 3 61 ""
V L "value" 3 61 "int8" `92 
F B "output_b" 3 61 "void(int8 value)" `91 
F N "output_c" 3 62 ""
V L "value" 3 62 "int8" `94 
F B "output_c" 3 62 "void(int8 value)" `93 
F N "output_d" 3 63 ""
V L "value" 3 63 "int8" `96 
F B "output_d" 3 63 "void(int8 value)" `95 
F N "output_e" 3 64 ""
V L "value" 3 64 "int8" `98 
F B "output_e" 3 64 "void(int8 value)" `97 
F N "input_a" 3 65 ""
F B "input_a" 3 65 "int8()" `99 
F N "input_b" 3 66 ""
F B "input_b" 3 66 "int8()" `100 
F N "input_c" 3 67 ""
F B "input_c" 3 67 "int8()" `101 
F N "input_d" 3 68 ""
F B "input_d" 3 68 "int8()" `102 
F N "input_e" 3 69 ""
F B "input_e" 3 69 "int8()" `103 
F N "input_change_a" 3 70 ""
F B "input_change_a" 3 70 "int8()" `104 
F N "input_change_b" 3 71 ""
F B "input_change_b" 3 71 "int8()" `105 
F N "input_change_c" 3 72 ""
F B "input_change_c" 3 72 "int8()" `106 
F N "input_change_d" 3 73 ""
F B "input_change_d" 3 73 "int8()" `107 
F N "input_change_e" 3 74 ""
F B "input_change_e" 3 74 "int8()" `108 
F N "port_a_pullups" 3 75 ""
V L "upmask" 3 75 "int8" `110 
F B "port_a_pullups" 3 75 "void(int8 upmask)" `109 
F N "port_b_pullups" 3 76 ""
V L "upmask" 3 76 "int8" `112 
F B "port_b_pullups" 3 76 "void(int8 upmask)" `111 
F N "port_c_pullups" 3 77 ""
V L "upmask" 3 77 "int8" `114 
F B "port_c_pullups" 3 77 "void(int8 upmask)" `113 
F N "port_d_pullups" 3 78 ""
V L "upmask" 3 78 "int8" `116 
F B "port_d_pullups" 3 78 "void(int8 upmask)" `115 
F N "port_e_pullups" 3 79 ""
V L "upmask" 3 79 "int8" `118 
F B "port_e_pullups" 3 79 "void(int8 upmask)" `117 
F N "set_slow_slew_a" 3 80 ""
V L "value" 3 80 "int8" `120 
F B "set_slow_slew_a" 3 80 "void(int8 value)" `119 
F N "set_slow_slew_b" 3 81 ""
V L "value" 3 81 "int8" `122 
F B "set_slow_slew_b" 3 81 "void(int8 value)" `121 
F N "set_slow_slew_c" 3 82 ""
V L "value" 3 82 "int8" `124 
F B "set_slow_slew_c" 3 82 "void(int8 value)" `123 
F N "set_slow_slew_d" 3 83 ""
V L "value" 3 83 "int8" `126 
F B "set_slow_slew_d" 3 83 "void(int8 value)" `125 
F N "set_slow_slew_e" 3 84 ""
V L "value" 3 84 "int8" `128 
F B "set_slow_slew_e" 3 84 "void(int8 value)" `127 
F N "input" 3 85 ""
V L "pin" 3 85 "int16" `130 
F B "input" 3 85 "int8(int16 pin)" `129 
F N "input_state" 3 86 ""
V L "pin" 3 86 "int16" `132 
F B "input_state" 3 86 "int8(int16 pin)" `131 
F N "output_low" 3 87 ""
V L "pin" 3 87 "int16" `134 
F B "output_low" 3 87 "void(int16 pin)" `133 
F N "output_high" 3 88 ""
V L "pin" 3 88 "int16" `136 
F B "output_high" 3 88 "void(int16 pin)" `135 
F N "output_toggle" 3 89 ""
V L "pin" 3 89 "int16" `138 
F B "output_toggle" 3 89 "void(int16 pin)" `137 
F N "output_bit" 3 90 ""
V L "pin" 3 90 "int16" `140 
V L "level" 3 90 "int8" `141 
F B "output_bit" 3 90 "void(int16 pin,int8 level)" `139 
F N "output_float" 3 91 ""
V L "pin" 3 91 "int16" `143 
F B "output_float" 3 91 "void(int16 pin)" `142 
F N "output_drive" 3 92 ""
V L "pin" 3 92 "int16" `145 
F B "output_drive" 3 92 "void(int16 pin)" `144  "Constants used to identify pins in the above are:"
D G "PIN_A0" 3 96 "96"
D G "PIN_A1" 3 97 "97"
D G "PIN_A2" 3 98 "98"
D G "PIN_A3" 3 99 "99"
D G "PIN_A4" 3 100 "100"
D G "PIN_A5" 3 101 "101"
D G "PIN_A6" 3 102 "102"
D G "PIN_A7" 3 103 "103"
D G "PIN_B0" 3 105 "104"
D G "PIN_B1" 3 106 "105"
D G "PIN_B2" 3 107 "106"
D G "PIN_B3" 3 108 "107"
D G "PIN_B4" 3 109 "108"
D G "PIN_B5" 3 110 "109"
D G "PIN_B6" 3 111 "110"
D G "PIN_B7" 3 112 "111"
D G "PIN_C0" 3 114 "112"
D G "PIN_C1" 3 115 "113"
D G "PIN_C2" 3 116 "114"
D G "PIN_C3" 3 117 "115"
D G "PIN_C4" 3 118 "116"
D G "PIN_C5" 3 119 "117"
D G "PIN_C6" 3 120 "118"
D G "PIN_C7" 3 121 "119"
D G "PIN_D0" 3 123 "120"
D G "PIN_D1" 3 124 "121"
D G "PIN_D2" 3 125 "122"
D G "PIN_D3" 3 126 "123"
D G "PIN_D4" 3 127 "124"
D G "PIN_D5" 3 128 "125"
D G "PIN_D6" 3 129 "126"
D G "PIN_D7" 3 130 "127"
D G "PIN_E0" 3 132 "128"
D G "PIN_E1" 3 133 "129"
D G "PIN_E2" 3 134 "130"
D G "PIN_E3" 3 135 "131"
D G "FALSE" 3 138 "0"
D G "TRUE" 3 139 "1"
D G "BYTE" 3 141 "int8"
D G "BOOLEAN" 3 142 "int1"
D G "getc" 3 144 "getch"
D G "fgetc" 3 145 "getch"
D G "getchar" 3 146 "getch"
D G "putc" 3 147 "putchar"
D G "fputc" 3 148 "putchar"
D G "fgets" 3 149 "gets"
D G "fputs" 3 150 "puts"
c L "output_drive" 3 1 3 "FUNCTION"
F N "restart_cause" 3 155 ""
F B "restart_cause" 3 155 "int8()" `146 
F N "reset_cpu" 3 156 ""
F B "reset_cpu" 3 156 "void()" `147 
F N "sleep" 3 157 ""
F B "sleep" 3 157 "void()" `148  "Constants returned from RESTART_CAUSE() are:"
D G "NORMAL_POWER_UP" 3 159 "0x3C"
D G "MCLR_FROM_POWER_UP" 3 160 "0x34"
D G "BROWNOUT_RESTART" 3 161 "0x3E"
D G "MCLR_FROM_SLEEP" 3 162 "0x27"
D G "WDT_TIMEOUT" 3 163 "0x1F"
D G "WDT_FROM_SLEEP" 3 164 "0x0F"
D G "INTERRUPT_FROM_SLEEP" 3 165 "0x2F"
D G "MCLR_FROM_RUN" 3 166 "0x37"
D G "RESET_INSTRUCTION" 3 167 "0x3B"
D G "STACK_OVERFLOW" 3 168 "0xBF"
D G "STACK_UNDERFLOW" 3 169 "0x7F"
c L "sleep" 3 1 5 "FUNCTION"
F N "initialize_timer_0" 3 176 ""
V L "mode" 3 176 "int8" `150 
F B "initialize_timer_0" 3 176 "void(int8 mode)" `149 
F N "set_timer0" 3 177 ""
V L "value" 3 177 "int8" `152 
F B "set_timer0" 3 177 "void(int8 value)" `151 
F N "get_timer0" 3 178 ""
F B "get_timer0" 3 178 "int8()" `153 
F N "setup_counters" 3 179 ""
V L "mode" 3 179 "int8" `155 
V L "prescaler" 3 179 "int8" `156 
F B "setup_counters" 3 179 "void(int8 mode,int8 prescaler)" `154 
F N "set_rtcc" 3 180 ""
V L "value" 3 180 "int8" `158 
F B "set_rtcc" 3 180 "void(int8 value)" `157 
F N "get_rtcc" 3 181 ""
F B "get_rtcc" 3 181 "int8()" `159  "Constants used for initialize_timer_0() are:"
D G "T0_INTERNAL" 3 183 "0"
D G "T0_EXT_L_TO_H" 3 184 "32"
D G "T0_EXT_H_TO_L" 3 185 "48"
D G "T0_DIV_1" 3 187 "8"
D G "T0_DIV_2" 3 188 "0"
D G "T0_DIV_4" 3 189 "1"
D G "T0_DIV_8" 3 190 "2"
D G "T0_DIV_16" 3 191 "3"
D G "T0_DIV_32" 3 192 "4"
D G "T0_DIV_64" 3 193 "5"
D G "T0_DIV_128" 3 194 "6"
D G "T0_DIV_256" 3 195 "7"
D G "T0_8_BIT" 3 198 "0"
D G "RTCC_INTERNAL" 3 202 "0"
D G "RTCC_EXT_L_TO_H" 3 203 "32"
D G "RTCC_EXT_H_TO_L" 3 204 "48"
D G "RTCC_DIV_1" 3 205 "8"
D G "RTCC_DIV_2" 3 206 "0"
D G "RTCC_DIV_4" 3 207 "1"
D G "RTCC_DIV_8" 3 208 "2"
D G "RTCC_DIV_16" 3 209 "3"
D G "RTCC_DIV_32" 3 210 "4"
D G "RTCC_DIV_64" 3 211 "5"
D G "RTCC_DIV_128" 3 212 "6"
D G "RTCC_DIV_256" 3 213 "7"
D G "RTCC_8_BIT" 3 214 "0"
c L "get_rtcc" 3 1 7 "FUNCTION"
F N "setup_wdt" 3 224 ""
V L "mode" 3 224 "int16" `161 
F B "setup_wdt" 3 224 "void(int16 mode)" `160 
F N "restart_wdt" 3 225 ""
F B "restart_wdt" 3 225 "void()" `162  "Constants used for SETUP_WDT() are:"
D G "WDT_ON" 3 227 "0x1000"
D G "WDT_OFF" 3 228 "0x2000"
D G "WDT_1MS" 3 230 "0x100"
D G "WDT_2MS" 3 231 "0x101"
D G "WDT_4MS" 3 232 "0x102"
D G "WDT_8MS" 3 233 "0x103"
D G "WDT_16MS" 3 234 "0x104"
D G "WDT_32MS" 3 235 "0x105"
D G "WDT_64MS" 3 236 "0x106"
D G "WDT_128MS" 3 237 "0x107"
D G "WDT_256MS" 3 238 "0x108"
D G "WDT_512MS" 3 239 "0x109"
D G "WDT_1S" 3 240 "0x10A"
D G "WDT_2S" 3 241 "0x10B"
D G "WDT_4S" 3 242 "0x10C"
D G "WDT_8S" 3 243 "0x10D"
D G "WDT_16S" 3 244 "0x10E"
D G "WDT_32S" 3 245 "0x10F"
D G "WDT_64S" 3 246 "0x110"
D G "WDT_128S" 3 247 "0x111"
D G "WDT_256S" 3 248 "0x112"
c L "restart_wdt" 3 1 3 "FUNCTION"
F N "initialize_timer_1" 3 253 ""
V L "mode" 3 253 "int16" `164 
F B "initialize_timer_1" 3 253 "void(int16 mode)" `163 
F N "get_timer1" 3 254 ""
F B "get_timer1" 3 254 "int16()" `165 
F N "set_timer1" 3 255 ""
V L "value" 3 255 "int16" `167 
F B "set_timer1" 3 255 "void(int16 value)" `166  "Constants used for initialize_timer_1() are:"
D G "T1_DISABLED" 3 258 "0"
D G "T1_INTERNAL" 3 259 "0x07"
D G "T1_EXTERNAL" 3 260 "0x87"
D G "T1_EXTERNAL_SYNC" 3 261 "0x83"
D G "T1_FOSC" 3 262 "0x47"
D G "T1_ENABLE_SOSC" 3 264 "0x08"
D G "T1_DIV_BY_1" 3 266 "0"
D G "T1_DIV_BY_2" 3 267 "0x10"
D G "T1_DIV_BY_4" 3 268 "0x20"
D G "T1_DIV_BY_8" 3 269 "0x30"
D G "T1_GATE" 3 271 "0x8000"
D G "T1_GATE_INVERTED" 3 272 "0xC000"
D G "T1_GATE_TOGGLE" 3 273 "0xA000"
D G "T1_GATE_SINGLE" 3 274 "0x9000"
D G "T1_GATE_TIMER2" 3 275 "0x8100"
D G "T1_GATE_COMP1" 3 276 "0x8200"
D G "T1_GATE_COMP2" 3 277 "0x8300"
c L "set_timer1" 3 1 3 "FUNCTION"
F N "initialize_timer_2" 3 282 ""
V L "mode" 3 282 "int8" `169 
V L "period" 3 282 "int8" `170 
V L "postscale" 3 282 "int8" `171 
F B "initialize_timer_2" 3 282 "void(int8 mode,int8 period,int8 postscale)" `168 
F N "get_timer2" 3 283 ""
F B "get_timer2" 3 283 "int8()" `172 
F N "set_timer2" 3 284 ""
V L "value" 3 284 "int8" `174 
F B "set_timer2" 3 284 "void(int8 value)" `173  "Constants used for initialize_timer_2() are:"
D G "T2_DISABLED" 3 286 "0"
D G "T2_DIV_BY_1" 3 287 "4"
D G "T2_DIV_BY_4" 3 288 "5"
D G "T2_DIV_BY_16" 3 289 "6"
D G "T2_DIV_BY_64" 3 290 "7"
c L "set_timer2" 3 1 4 "FUNCTION"
F N "setup_ccp1" 3 296 ""
V L "mode" 3 296 "int32" `176 
F B "setup_ccp1" 3 296 "void(int32 mode)" `175 
F N "setup_ccp1" 3 297 ""
V L "mode" 3 297 "int32" `178 
V L "pwm" 3 297 "int8" `179 
F B "setup_ccp1" 3 297 "void(int32 mode,int8 pwm)" `177 
F N "set_pwm1_duty" 3 298 ""
V L "value" 3 298 "int8" `181 
F B "set_pwm1_duty" 3 298 "void(int8 value)" `180 
F N "set_pwm1_duty" 3 299 ""
V L "value" 3 299 "int16" `183 
F B "set_pwm1_duty" 3 299 "void(int16 value)" `182  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 3 301 "0"
D G "CCP_CAPTURE_FE" 3 302 "0x04"
D G "CCP_CAPTURE_RE" 3 303 "0x05"
D G "CCP_CAPTURE_DIV_4" 3 304 "0x06"
D G "CCP_CAPTURE_DIV_16" 3 305 "0x07"
D G "CCP_COMPARE_TOGGLE" 3 306 "0x02"
D G "CCP_COMPARE_SET_ON_MATCH" 3 307 "0x08"
D G "CCP_COMPARE_CLR_ON_MATCH" 3 308 "0x09"
D G "CCP_COMPARE_INT" 3 309 "0x0A"
D G "CCP_COMPARE_RESET_TIMER" 3 310 "0x0B"
D G "CCP_PWM" 3 311 "0x0C"
D G "CCP_PWM_PLUS_1" 3 312 "0x1c"
D G "CCP_PWM_PLUS_2" 3 313 "0x2c"
D G "CCP_PWM_PLUS_3" 3 314 "0x3c"
D G "CCP1_C2" 3 320 "0x000"
D G "CCP1_B0" 3 321 "0x100"
D G "CCP2_C1" 3 322 "0x000"
D G "CCP2_B3" 3 323 "0x100"
D G "CCP3_E0" 3 324 "0x000"
D G "CCP3_B5" 3 325 "0x100"
c L "set_pwm1_duty" 3 1 1 "FUNCTION"
F N "setup_ccp2" 3 328 ""
V L "mode" 3 328 "int32" `188 
F B "setup_ccp2" 3 328 "void(int32 mode)" `187 
F N "setup_ccp2" 3 329 ""
V L "mode" 3 329 "int32" `190 
V L "pwm" 3 329 "int8" `191 
F B "setup_ccp2" 3 329 "void(int32 mode,int8 pwm)" `189 
F N "set_pwm2_duty" 3 330 ""
V L "value" 3 330 "int8" `193 
F B "set_pwm2_duty" 3 330 "void(int8 value)" `192 
F N "set_pwm2_duty" 3 331 ""
V L "value" 3 331 "int16" `195 
F B "set_pwm2_duty" 3 331 "void(int16 value)" `194 
c L "set_pwm2_duty" 3 1 1 "FUNCTION"
F N "setup_ccp3" 3 337 ""
V L "mode" 3 337 "int32" `200 
F B "setup_ccp3" 3 337 "void(int32 mode)" `199 
F N "setup_ccp3" 3 338 ""
V L "mode" 3 338 "int32" `202 
V L "pwm" 3 338 "int8" `203 
F B "setup_ccp3" 3 338 "void(int32 mode,int8 pwm)" `201 
F N "set_pwm3_duty" 3 339 ""
V L "value" 3 339 "int8" `205 
F B "set_pwm3_duty" 3 339 "void(int8 value)" `204 
F N "set_pwm3_duty" 3 340 ""
V L "value" 3 340 "int16" `207 
F B "set_pwm3_duty" 3 340 "void(int16 value)" `206 
c L "set_pwm3_duty" 3 1 3 "FUNCTION"
F N "setup_spi" 3 348 ""
V L "mode" 3 348 "int32" `212 
F B "setup_spi" 3 348 "void(int32 mode)" `211 
F N "spi_write" 3 349 ""
V L "value" 3 349 "int8" `214 
F B "spi_write" 3 349 "void(int8 value)" `213 
F N "spi_write" 3 350 ""
V L "wait" 3 350 "int8" `216 
V L "value" 3 350 "int8" `217 
F B "spi_write" 3 350 "void(int8 wait,int8 value)" `215 
F N "spi_read" 3 351 ""
F B "spi_read" 3 351 "int8()" `218 
F N "spi_read" 3 352 ""
V L "value" 3 352 "int8" `220 
F B "spi_read" 3 352 "int8(int8 value)" `219 
F N "spi_data_is_in" 3 353 ""
F B "spi_data_is_in" 3 353 "int8()" `221  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 3 355 "0x00"
D G "SPI_MASTER" 3 356 "0x20"
D G "SPI_SLAVE" 3 357 "0x24"
D G "SPI_SCK_IDLE_HIGH" 3 358 "0x10"
D G "SPI_SCK_IDLE_LOW" 3 359 "0x00"
D G "SPI_CLK_DIV_4" 3 360 "0x00"
D G "SPI_CLK_DIV_16" 3 361 "0x01"
D G "SPI_CLK_DIV_64" 3 362 "0x02"
D G "SPI_CLK_T2" 3 363 "0x03"
D G "SPI_SS_DISABLED" 3 364 "0x01"
D G "SPI_DI_C4" 3 366 "0x000000"
D G "SPI_DI_B6" 3 367 "0x010000"
D G "SPI_SCK_C3" 3 368 "0x000000"
D G "SPI_SCK_B7" 3 369 "0x020000"
D G "SPI_DO_C5" 3 370 "0x000000"
D G "SPI_DO_B5" 3 371 "0x040000"
D G "SPI_SS_A5" 3 372 "0x000000"
D G "SPI_SS_A0" 3 373 "0x080000"
D G "SPI_SS_B4" 3 374 "0x100000"
D G "SPI_XMIT_L_TO_H" 3 376 "0x4000"
D G "SPI_XMIT_H_TO_L" 3 377 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 3 379 "0x0000"
D G "SPI_SAMPLE_AT_END" 3 380 "0x8000"
D G "SPI_L_TO_H" 3 383 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 3 384 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 3 1 2 "FUNCTION"
F N "setup_uart" 3 388 ""
V L "baud" 3 388 "int32" `223 
F B "setup_uart" 3 388 "void(int32 baud)" `222 
F N "setup_uart" 3 389 ""
V L "baud" 3 389 "int32" `225 
V L "stream" 3 389 "int8" `226 
F B "setup_uart" 3 389 "void(int32 baud,int8 stream)" `224 
F N "setup_uart" 3 390 ""
V L "baud" 3 390 "int32" `228 
V L "stream" 3 390 "int8" `229 
V L "clock" 3 390 "int32" `230 
F B "setup_uart" 3 390 "void(int32 baud,int8 stream,int32 clock)" `227 
F N "set_uart_speed" 3 391 ""
V L "baud" 3 391 "int32" `232 
F B "set_uart_speed" 3 391 "void(int32 baud)" `231 
F N "set_uart_speed" 3 392 ""
V L "baud" 3 392 "int32" `234 
V L "stream" 3 392 "int8" `235 
F B "set_uart_speed" 3 392 "void(int32 baud,int8 stream)" `233 
F N "set_uart_speed" 3 393 ""
V L "baud" 3 393 "int32" `237 
V L "stream" 3 393 "int8" `238 
V L "clock" 3 393 "int32" `239 
F B "set_uart_speed" 3 393 "void(int32 baud,int8 stream,int32 clock)" `236  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 3 397 "2"
D G "UART_DATA" 3 398 "4"
D G "UART_AUTODETECT" 3 399 "8"
D G "UART_AUTODETECT_NOWAIT" 3 400 "9"
D G "UART_WAKEUP_ON_RDA" 3 401 "10"
D G "UART_SEND_BREAK" 3 402 "13"
c L "set_uart_speed" 3 1 3 "FUNCTION"
F N "setup_comparator_1" 3 407 ""
V L "mode" 3 407 "int16" `241 
F B "setup_comparator_1" 3 407 "void(int16 mode)" `240 
F N "setup_comparator_2" 3 408 ""
V L "mode" 3 408 "int16" `243 
F B "setup_comparator_2" 3 408 "void(int16 mode)" `242 
F N "setup_comparator_3" 3 409 ""
V L "mode" 3 409 "int16" `245 
F B "setup_comparator_3" 3 409 "void(int16 mode)" `244 
F N "setup_comparator_4" 3 410 ""
V L "mode" 3 410 "int16" `247 
F B "setup_comparator_4" 3 410 "void(int16 mode)" `246  "Constants used in setup_comparator_x() are:"
D G "NC_NC" 3 413 "0x003F"
D G "CP1_A0_A2" 3 417 "0x8000"
D G "CP1_A1_A2" 3 418 "0x8001"
D G "CP1_B3_A2" 3 419 "0x8002"
D G "CP1_B1_A2" 3 420 "0x8003"
D G "CP1_VSS_A2" 3 421 "0x8007"
D G "CP1_A0_A3" 3 422 "0x8008"
D G "CP1_A1_A3" 3 423 "0x8009"
D G "CP1_B3_A3" 3 424 "0x800A"
D G "CP1_B1_A3" 3 425 "0x800B"
D G "CP1_VSS_A3" 3 426 "0x800F"
D G "CP1_A0_DAC" 3 427 "0x8028"
D G "CP1_A1_DAC" 3 428 "0x8029"
D G "CP1_B3_DAC" 3 429 "0x802A"
D G "CP1_B1_DAC" 3 430 "0x802B"
D G "CP1_VSS_DAC" 3 431 "0x802F"
D G "CP1_A0_FVR" 3 432 "0x8030"
D G "CP1_A1_FVR" 3 433 "0x8031"
D G "CP1_B3_FVR" 3 434 "0x8032"
D G "CP1_B1_FVR" 3 435 "0x8033"
D G "CP1_VSS_FVR" 3 436 "0x8037"
D G "CP1_A0_VSS" 3 437 "0x8038"
D G "CP1_A1_VSS" 3 438 "0x8039"
D G "CP1_B3_VSS" 3 439 "0x803A"
D G "CP1_B1_VSS" 3 440 "0x803B"
D G "CP1_VSS_VSS" 3 441 "0x803F"
D G "CP1_INT_L2H" 3 443 "0x0080"
D G "CP1_INT_H2L" 3 444 "0x0040"
D G "CP1_OUT_ON_A4" 3 445 "0x2000"
D G "CP1_INVERT" 3 446 "0x1000"
D G "CP1_FAST" 3 447 "0x0400"
D G "CP1_HYST" 3 448 "0x0200"
D G "CP1_SYNC" 3 449 "0x0100"
D G "CP2_A0_A2" 3 453 "0x8000"
D G "CP2_A1_A2" 3 454 "0x8001"
D G "CP2_B3_A2" 3 455 "0x8002"
D G "CP2_B1_A2" 3 456 "0x8003"
D G "CP2_VSS_A2" 3 457 "0x8007"
D G "CP2_A0_B0" 3 458 "0x8008"
D G "CP2_A1_B0" 3 459 "0x8009"
D G "CP2_B3_B0" 3 460 "0x800A"
D G "CP2_B1_B0" 3 461 "0x800B"
D G "CP2_VSS_B0" 3 462 "0x800F"
D G "CP2_A0_DAC" 3 463 "0x8028"
D G "CP2_A1_DAC" 3 464 "0x8029"
D G "CP2_B3_DAC" 3 465 "0x802A"
D G "CP2_B1_DAC" 3 466 "0x802B"
D G "CP2_VSS_DAC" 3 467 "0x802F"
D G "CP2_A0_FVR" 3 468 "0x8030"
D G "CP2_A1_FVR" 3 469 "0x8031"
D G "CP2_B3_FVR" 3 470 "0x8032"
D G "CP2_B1_FVR" 3 471 "0x8033"
D G "CP2_VSS_FVR" 3 472 "0x8037"
D G "CP2_A0_VSS" 3 473 "0x8038"
D G "CP2_A1_VSS" 3 474 "0x8039"
D G "CP2_B3_VSS" 3 475 "0x803A"
D G "CP2_B1_VSS" 3 476 "0x803B"
D G "CP2_VSS_VSS" 3 477 "0x803F"
D G "CP2_INT_L2H" 3 479 "0x00080"
D G "CP2_INT_H2L" 3 480 "0x00040"
D G "CP2_OUT_ON_A5" 3 481 "0x02000"
D G "CP2_OUT_ON_A6" 3 482 "0x12000"
D G "CP2_INVERT" 3 483 "0x01000"
D G "CP2_FAST" 3 484 "0x00400"
D G "CP2_HYST" 3 485 "0x00200"
D G "CP2_SYNC" 3 486 "0x00100"
D G "CP3_A0_A2" 3 490 "0x8000"
D G "CP3_A1_A2" 3 491 "0x8001"
D G "CP3_B3_A2" 3 492 "0x8002"
D G "CP3_B1_A2" 3 493 "0x8003"
D G "CP3_VSS_A2" 3 494 "0x8007"
D G "CP3_A0_B4" 3 495 "0x8008"
D G "CP3_A1_B4" 3 496 "0x8009"
D G "CP3_B3_B4" 3 497 "0x800A"
D G "CP3_B1_B4" 3 498 "0x800B"
D G "CP3_VSS_B4" 3 499 "0x800F"
D G "CP3_A0_DAC" 3 500 "0x8028"
D G "CP3_A1_DAC" 3 501 "0x8029"
D G "CP3_B3_DAC" 3 502 "0x802A"
D G "CP3_B1_DAC" 3 503 "0x802B"
D G "CP3_VSS_DAC" 3 504 "0x802F"
D G "CP3_A0_FVR" 3 505 "0x8030"
D G "CP3_A1_FVR" 3 506 "0x8031"
D G "CP3_B3_FVR" 3 507 "0x8032"
D G "CP3_B1_FVR" 3 508 "0x8033"
D G "CP3_VSS_FVR" 3 509 "0x8037"
D G "CP3_A0_VSS" 3 510 "0x8038"
D G "CP3_A1_VSS" 3 511 "0x8039"
D G "CP3_B3_VSS" 3 512 "0x803A"
D G "CP3_B1_VSS" 3 513 "0x803B"
D G "CP3_VSS_VSS" 3 514 "0x803F"
D G "CP3_INT_L2H" 3 516 "0x0080"
D G "CP3_INT_H2L" 3 517 "0x0040"
D G "CP3_OUT_ON_D6" 3 518 "0x2000"
D G "CP3_INVERT" 3 519 "0x1000"
D G "CP3_FAST" 3 520 "0x0400"
D G "CP3_HYST" 3 521 "0x0200"
D G "CP3_SYNC" 3 522 "0x0100"
D G "CP4_A0_A2" 3 526 "0x8000"
D G "CP4_A1_A2" 3 527 "0x8001"
D G "CP4_B5_A2" 3 528 "0x8002"
D G "CP4_B1_A2" 3 529 "0x8003"
D G "CP4_VSS_A2" 3 530 "0x8007"
D G "CP4_A0_B6" 3 531 "0x8008"
D G "CP4_A1_B6" 3 532 "0x8009"
D G "CP4_B5_B6" 3 533 "0x800A"
D G "CP4_B1_B6" 3 534 "0x800B"
D G "CP4_VSS_B6" 3 535 "0x800F"
D G "CP4_A0_DAC" 3 536 "0x8028"
D G "CP4_A1_DAC" 3 537 "0x8029"
D G "CP4_B5_DAC" 3 538 "0x802A"
D G "CP4_B1_DAC" 3 539 "0x802B"
D G "CP4_VSS_DAC" 3 540 "0x802F"
D G "CP4_A0_FVR" 3 541 "0x8030"
D G "CP4_A1_FVR" 3 542 "0x8031"
D G "CP4_B5_FVR" 3 543 "0x8032"
D G "CP4_B1_FVR" 3 544 "0x8033"
D G "CP4_VSS_FVR" 3 545 "0x8037"
D G "CP4_A0_VSS" 3 546 "0x8038"
D G "CP4_A1_VSS" 3 547 "0x8039"
D G "CP4_B5_VSS" 3 548 "0x803A"
D G "CP4_B1_VSS" 3 549 "0x803B"
D G "CP4_VSS_VSS" 3 550 "0x803F"
D G "CP4_INT_L2H" 3 552 "0x0080"
D G "CP4_INT_H2L" 3 553 "0x0040"
D G "CP4_OUT_ON_D7" 3 554 "0x2000"
D G "CP4_INVERT" 3 555 "0x1000"
D G "CP4_FAST" 3 556 "0x0400"
D G "CP4_HYST" 3 557 "0x0200"
D G "CP4_SYNC" 3 558 "0x0100"
c L "setup_comparator_4" 3 1 2 "FUNCTION"
F N "setup_vref" 3 567 ""
V L "mode" 3 567 "int8" `253 
F B "setup_vref" 3 567 "void(int8 mode)" `252  "Constants used in setup_vref() are:"
D G "VREF_OFF" 3 569 "0"
D G "VREF_ON" 3 570 "0x80"
D G "VREF_ADC_OFF" 3 572 "0"
D G "VREF_ADC_1v024" 3 573 "0x81"
D G "VREF_ADC_2v048" 3 574 "0x82"
D G "VREF_ADC_4v096" 3 575 "0x83"
D G "VREF_COMP_DAC_OFF" 3 577 "0"
D G "VREF_COMP_DAC_1v024" 3 578 "0x84"
D G "VREF_COMP_DAC_2v048" 3 579 "0x88"
D G "VREF_COMP_DAC_4v096" 3 580 "0x8C"
D G "TEMPERATURE_INDICATOR_DISABLED" 3 582 "0"
D G "TEMPERATURE_INDICATOR_ENABLED" 3 583 "0x20"
D G "TEMPERATURE_RANGE_LOW" 3 584 "0"
D G "TEMPERATURE_RANGE_HIGH" 3 585 "0x10"
c L "setup_vref" 3 1 6 "FUNCTION"
F N "setup_dac" 3 593 ""
V L "mode" 3 593 "int8" `255 
F B "setup_dac" 3 593 "void(int8 mode)" `254 
F N "dac_write" 3 594 ""
V L "value" 3 594 "int8" `257 
F B "dac_write" 3 594 "void(int8 value)" `256 
F N "setup_dac2" 3 595 ""
V L "mode" 3 595 "int8" `259 
F B "setup_dac2" 3 595 "void(int8 mode)" `258 
F N "dac_write2" 3 596 ""
V L "value" 3 596 "int8" `261 
F B "dac_write2" 3 596 "void(int8 value)" `260 
F N "setup_dac3" 3 597 ""
V L "mode" 3 597 "int8" `263 
F B "setup_dac3" 3 597 "void(int8 mode)" `262 
F N "dac_write3" 3 598 ""
V L "value" 3 598 "int8" `265 
F B "dac_write3" 3 598 "void(int8 value)" `264 
F N "setup_dac4" 3 599 ""
V L "mode" 3 599 "int8" `267 
F B "setup_dac4" 3 599 "void(int8 mode)" `266 
F N "dac_write4" 3 600 ""
V L "value" 3 600 "int8" `269 
F B "dac_write4" 3 600 "void(int8 value)" `268  "Constants used in SETUP_DAC() are:"
D G "DAC_OFF" 3 602 "0"
D G "DAC_VSS_VDD" 3 603 "0x80"
D G "DAC_VREF_VDD" 3 604 "0x81" "Can only be used with setup_dac()"
D G "DAC_VSS_VREF" 3 605 "0x84"
D G "DAC_VREF_VREF" 3 606 "0x85" "Can only be used with setup_dac()"
D G "DAC_VSS_FVR" 3 607 "0x88" "Can only be used with setup_dac()"
D G "DAC_VREF_FVR" 3 608 "0x89" "Can only be used with setup_dac()"
D G "DAC_OUTPUT1" 3 610 "0x20" "DAC voltage level outputted on DACxOUT1 pin"
D G "DAC_OUTPUT2" 3 611 "0x10" "DAC voltage level outputted on DACxOUT1 pin"
c L "dac_write4" 3 1 3 "FUNCTION"
F N "setup_opamp1" 3 616 ""
V L "mode" 3 616 "int8" `271 
F B "setup_opamp1" 3 616 "void(int8 mode)" `270 
F N "setup_opamp2" 3 617 ""
V L "mode" 3 617 "int8" `273 
F B "setup_opamp2" 3 617 "void(int8 mode)" `272 
F N "setup_opamp3" 3 618 ""
V L "mode" 3 618 "int8" `275 
F B "setup_opamp3" 3 618 "void(int8 mode)" `274  "Constants used in SETUP_OPAMPx() are:"
D G "OPAMP_ENABLED" 3 620 "0x80"
D G "OPAMP_DISABLED" 3 621 "0x00"
D G "OPAMP_HIGH_GBWP_MODE" 3 622 "0x40"
D G "OPAMP_LOW_GBWP_MODE" 3 623 "0x00"
D G "OPAMP_NI_TO_DAC4" 3 624 "0x07" "Non-inverting input connects to DAC4 output"
D G "OPAMP_NI_TO_DAC3" 3 625 "0x06" "Non-inverting input connects to DAC3 output"
D G "OPAMP_NI_TO_DAC2" 3 626 "0x05" "Non-inverting input connects to DAC2 output"
D G "OPAMP_NI_TO_DAC1" 3 627 "0x04" "Non-inverting input connects to DAC1 output"
D G "OPAMP_NI_TO_FVR" 3 628 "0x03" "Non-inverting input connects to FVR Buffer 2 output"
D G "OPAMP_NI_TO_OPAIN" 3 629 "0x00" "Non-inverting input connects to OPAxIN+ pin"
D G "OPAMP_NI_TO_VSS" 3 630 "0"
D G "OPAMP_RESISTOR_LADDER_DISABLED" 3 631 "0"
D G "OPAMP_RESISTOR_LADDER_ENABLED" 3 632 "0x080000"
D G "OPAMP_OVERRIDE_MODE_DISABLED" 3 633 "0"
D G "OPAMP_OVERRIDE_MODE_ENABLED" 3 634 "0x8000"
c L "setup_opamp3" 3 1 4 "FUNCTION"
F N "setup_psmc" 3 640 ""
V L "unit" 3 640 "int8" `277 
V L "mode" 3 640 "int8" `278 
V L "period" 3 640 "int16" `279 
V L "rising_edge" 3 640 "int8" `280 
V L "rise_time" 3 640 "int16" `281 
V L "falling_edge" 3 640 "int8" `282 
V L "fall_time" 3 640 "int16" `283 
F B "setup_psmc" 3 640 "void(int8 unit,int8 mode,int16 period,int8 rising_edge,int16 rise_time,int8 falling_edge,int16 fall_time)" `276 
F N "psmc_duty" 3 641 ""
V L "unit" 3 641 "int8" `285 
V L "duty" 3 641 "int16" `286 
F B "psmc_duty" 3 641 "void(int8 unit,int16 duty)" `284  "Constants used for second param to setup_psmc():"
D G "PSMC_SINGLE" 3 643 "0x00"
D G "PSMC_PUSH_PULL" 3 644 "0x02"
D G "PSMC_BRIDGE_PUSH_PULL" 3 645 "0x04"
D G "PSMC_PULSE_SKIPPING" 3 646 "0x06"
D G "PSMC_ECCP_BRIDGE_REVERSE" 3 647 "0x08"
D G "PSMC_ECCP_BRIDGE_FORWARD" 3 648 "0x09"
D G "PSMC_VARIABLE_FREQ" 3 649 "0x0A"
D G "PSMC_3_PHASE" 3 650 "0x0C"
D G "PSMC_COMPLEMENTARY" 3 652 "0x01"
D G "PSMC_ENABLE_NOW" 3 653 "0x80"
D G "PSMC_EVENT_TIME" 3 655 "0x01"
D G "PSMC_EVENT_C1OUT" 3 656 "0x02"
D G "PSMC_EVENT_C2OUT" 3 657 "0x04"
D G "PSMC_EVENT_C3OUT" 3 658 "0x08"
D G "PSMC_EVENT_C4OUT" 3 659 "0x10"
D G "PSMC_EVENT_IN_PIN" 3 660 "0x80"
D G "PSMC_SOURCE_FOSC" 3 663 "0"
D G "PSMC_SOURCE_64MHZ" 3 664 "1"
D G "PSMC_SOURCE_CLK_PIN" 3 665 "2"
D G "PSMC_DIV_1" 3 666 "0x00"
D G "PSMC_DIV_2" 3 667 "0x10"
D G "PSMC_DIV_4" 3 668 "0x20"
D G "PSMC_DIV_8" 3 669 "0x30"
c L "psmc_duty" 3 1 2 "FUNCTION"
F N "psmc_deadband" 3 672 ""
V L "unit" 3 672 "int8" `288 
V L "rising_edge" 3 672 "int8" `289 
V L "falling_edge" 3 672 "int8" `290 
F B "psmc_deadband" 3 672 "void(int8 unit,int8 rising_edge,int8 falling_edge)" `287 
F N "psmc_blanking" 3 673 ""
V L "unit" 3 673 "int8" `292 
V L "rising_edge" 3 673 "int8" `293 
V L "rise_time" 3 673 "int8" `294 
V L "falling_edge" 3 673 "int8" `295 
V L "fall_time" 3 673 "int8" `296 
F B "psmc_blanking" 3 673 "void(int8 unit,int8 rising_edge,int8 rise_time,int8 falling_edge,int8 fall_time)" `291  "Constants for the second and third param are one of the PSMC_EVENT_... defines"
c L "psmc_blanking" 3 1 1 "FUNCTION"
F N "psmc_sync" 3 676 ""
V L "slave_unit" 3 676 "int8" `298 
V L "master_unit" 3 676 "int8" `299 
V L "options" 3 676 "int8" `300 
F B "psmc_sync" 3 676 "void(int8 slave_unit,int8 master_unit,int8 options)" `297  "Constants used for third param to psmc_sync():"
D G "PSMC_SOURCE_IS_PHASE" 3 678 "0x80"
D G "PSMC_SOURCE_IS_PERIOD" 3 679 "0x100"
D G "PSMC_DISCONNECT" 3 680 "0x00"
D G "PSMC_INVERT_DUTY" 3 682 "0x20"
D G "PSMC_INVERT_PERIOD" 3 683 "0x40"
F N "psmc_modulation" 3 684 ""
V L "unit" 3 684 "int8" `302 
V L "options" 3 684 "int8" `303 
F B "psmc_modulation" 3 684 "void(int8 unit,int8 options)" `301  "Constants psmc_modulation():"
D G "PSMC_MOD_OFF" 3 686 "0x00"
D G "PSMC_MOD_ACTIVE" 3 687 "0xA0"
D G "PSMC_MOD_INACTIVE" 3 688 "0x80"
D G "PSMC_MOD_C1OUT" 3 689 "0x81"
D G "PSMC_MOD_C2OUT" 3 690 "0x82"
D G "PSMC_MOD_C3OUT" 3 691 "0x83"
D G "PSMC_MOD_C4OUT" 3 692 "0x84"
D G "PSMC_MOD_CCP1" 3 693 "0x85"
D G "PSMC_MOD_CCP2" 3 694 "0x86"
D G "PSMC_MOD_IN_PIN" 3 695 "0x88"
D G "PSMC_MOD_INVERT" 3 697 "0x40"
D G "PSMC_MOD_NOT_BDF" 3 698 "0x200"
D G "PSMC_MOD_NOT_ACE" 3 699 "0x100"
F N "psmc_pins" 3 700 ""
V L "unit" 3 700 "int8" `305 
V L "pins_used" 3 700 "int8" `306 
V L "pins_active_low" 3 700 "int8" `307 
F B "psmc_pins" 3 700 "void(int8 unit,int8 pins_used,int8 pins_active_low)" `304  "Constants psmc_pins(): // or together pins"
D G "PSMC_A" 3 702 "0x01"
D G "PSMC_B" 3 703 "0x02"
D G "PSMC_C" 3 704 "0x04"
D G "PSMC_D" 3 705 "0x08"
D G "PSMC_E" 3 706 "0x10"
D G "PSMC_F" 3 707 "0x20"
D G "PSMC_ON_NEXT_PERIOD" 3 708 "0x100"
F N "psmc_shutdown" 3 709 ""
V L "unit" 3 709 "int8" `309 
V L "options" 3 709 "int8" `310 
V L "source" 3 709 "int8" `311 
V L "pins_high" 3 709 "int8" `312 
F B "psmc_shutdown" 3 709 "int8(int8 unit,int8 options,int8 source,int8 pins_high)" `308  "Constants used for second param to psmc_shutdown():"
D G "PSMC_SHUTDOWN_OFF" 3 711 "0x00"
D G "PSMC_SHUTDOWN_NORMAL" 3 712 "0x40"
D G "PSMC_SHUTDOWN_AUTO_RESTART" 3 713 "0x60"
D G "PSMC_SHUTDOWN_C1OUT" 3 715 "0x02"
D G "PSMC_SHUTDOWN_C2OUT" 3 716 "0x04"
D G "PSMC_SHUTDOWN_C3OUT" 3 717 "0x08"
D G "PSMC_SHUTDOWN_C4OUT" 3 718 "0x10"
D G "PSMC_SHUTDOWN_IN_PIN" 3 719 "0x80"
c L "psmc_shutdown" 3 1 1 "FUNCTION"
c L "psmc_shutdown" 3 721 1 "*"
F N "psmc_shutdown" 3 722 ""
V L "unit" 3 722 "int8" `314 
V L "command" 3 722 "int16" `315 
F B "psmc_shutdown" 3 722 "int8(int8 unit,int16 command)" `313  "Constants used for second param to psmc_shutdown():"
D G "PSMC_SHUTDOWN_RESTART" 3 724 "0x100"
D G "PSMC_SHUTDOWN_FORCE" 3 725 "0x200"
D G "PSMC_SHUTDOWN_CHECK" 3 726 "0x300"
c L "psmc_shutdown" 3 721 2 "FUNCTION"
F N "setup_oscillator" 3 731 ""
V L "mode" 3 731 "int8" `317 
F B "setup_oscillator" 3 731 "void(int8 mode)" `316  "Constants used in setup_oscillator() are:"
D G "OSC_31KHZ" 3 734 "0"
D G "OSC_31250" 3 735 " (2*8)"
D G "OSC_62KHZ" 3 736 " (4*8)"
D G "OSC_125KHZ" 3 737 " (5*8)"
D G "OSC_250KHZ" 3 738 " (6*8)"
D G "OSC_500KHZ" 3 739 " (7*8)"
D G "OSC_1MHZ" 3 740 " (11*8)"
D G "OSC_2MHZ" 3 741 " (12*8)"
D G "OSC_4MHZ" 3 742 " (13*8)"
D G "OSC_8MHZ" 3 743 " (14*8)"
D G "OSC_16MHZ" 3 744 " (15*8)"
D G "OSC_TIMER1" 3 746 "1"
D G "OSC_INTRC" 3 747 "2"
D G "OSC_NORMAL" 3 748 "0"
D G "OSC_PLL_ON" 3 750 "0x80"
D G "OSC_PLL_OFF" 3 751 "0"
c L "setup_oscillator" 3 721 4 "FUNCTION"
F N "setup_adc" 3 758 ""
V L "mode" 3 758 "int16" `319 
F B "setup_adc" 3 758 "void(int16 mode)" `318 
F N "read_adc" 3 759 ""
F B "read_adc" 3 759 "int8()" `320 
F N "read_adc" 3 760 ""
V L "mode" 3 760 "int8" `322 
F B "read_adc" 3 760 "int8(int8 mode)" `321 
F N "read_adc" 3 761 ""
f G "read_adc" 3 761 "int16()" `323 
F N "read_adc" 3 762 ""
V L "mode" 3 762 "int8" `324 
f G "read_adc" 3 762 "int16(int8 mode,int32 pins)" `323 
F N "adc_done" 3 763 ""
F B "adc_done" 3 763 "int8(int8 mode,int32 pins)" `323  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 3 765 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 3 766 "0x100"
D G "ADC_CLOCK_DIV_4" 3 767 "0x40"
D G "ADC_CLOCK_DIV_8" 3 768 "0x10"
D G "ADC_CLOCK_DIV_32" 3 769 "0x20"
D G "ADC_CLOCK_DIV_16" 3 770 "0x50"
D G "ADC_CLOCK_DIV_64" 3 771 "0x60"
D G "ADC_CLOCK_INTERNAL" 3 772 "0x30" "Internal 2-6us"
c L "adc_done" 3 721 1 "FUNCTION"
F N "setup_adc_ports" 3 775 ""
V L "pins" 3 775 "int32" `325 
F B "setup_adc_ports" 3 775 "void(int32 pins)" `324 
F N "setup_adc_ports" 3 776 ""
V L "pins" 3 776 "int32" `327 
V L "reference" 3 776 "int32" `328 
F B "setup_adc_ports" 3 776 "void(int32 pins,int32 reference)" `326 
F N "set_analog_pins" 3 777 ""
V L "pin" 3 777 "int8" `330 
F B "set_analog_pins" 3 777 "void(int8 pin,*int8 _VA_LIST)" `329 
F N "setup_adc_reference" 3 778 ""
V L "reference" 3 778 "int32" `333 
F B "setup_adc_reference" 3 778 "void(int32 reference)" `332 
F N "set_adc_channel" 3 779 ""
V L "channel" 3 779 "int8" `335 
F B "set_adc_channel" 3 779 "void(int8 channel)" `334  "Constants used is SETUP_ADC_PORTS() are:"
D G "sAN0" 3 783 "0x01000000" "| A0"
D G "sAN1" 3 784 "0x02000000" "| A1"
D G "sAN2" 3 785 "0x04000000" "| A2"
D G "sAN3" 3 786 "0x08000000" "| A3"
D G "sAN4" 3 787 "0x20000000" "| A5"
D G "sAN5" 3 788 "0x00010000" "| E0"
D G "sAN6" 3 789 "0x00020000" "| E1"
D G "sAN7" 3 790 "0x00040000" "| E2"
D G "sAN8" 3 791 "0x00000400" "| B2"
D G "sAN9" 3 792 "0x00000800" "| B3"
D G "sAN10" 3 793 "0x00000200" "| B1"
D G "sAN11" 3 794 "0x00001000" "| B4"
D G "sAN12" 3 795 "0x00000100" "| B0"
D G "sAN13" 3 796 "0x00002000" "| B5"
D G "sAN21" 3 797 "0x00000002" "| D1"
D G "NO_ANALOGS" 3 798 "0" "None"
D G "ALL_ANALOG" 3 799 "0x2F073F02" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0 B5 D1"
D G "VSS_VDD" 3 802 "0x00000000" "| Range 0 to Vdd"
D G "VSS_VREF" 3 803 "0x00000001" "| Range 0 to Vref+"
D G "VSS_FVR" 3 804 "0x00000003" "| Range 0 to FVR"
D G "VREF_VDD" 3 805 "0x00000004" "| Range Vref- to Vdd"
D G "VREF_VREF" 3 806 "0x00000005" "| Range Vref- to Vref+"
D G "VREF_FVR" 3 807 "0x00000007" "| Range Vref- to FVR"
D G "TEMPERATURE_INDICATOR" 3 811 "0x1D"
D G "DAC_CHANNEL" 3 812 "0x1E"
D G "FVR_CHANNEL" 3 813 "0x1F"
D G "ADC_NEG_REFERENCE" 3 816 "0x0F" "Analog Negative Channel connected to ADC Negative Reference"
D G "ADC_START_AND_READ" 3 819 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 3 820 "1"
D G "ADC_READ_ONLY" 3 821 "6"
c L "set_adc_channel" 3 721 3 "FUNCTION"
F N "abs" 3 827 ""
V L "x" 3 827 "sint8" `337 
F B "abs" 3 827 "sint8(sint8 x)" `336 
F N "abs" 3 828 ""
V L "x" 3 828 "sint16" `339 
F B "abs" 3 828 "sint16(sint16 x)" `338 
F N "abs" 3 829 ""
V L "x" 3 829 "sint32" `341 
F B "abs" 3 829 "sint32(sint32 x)" `340 
F N "abs" 3 830 ""
V L "x" 3 830 "float" `343 
F B "abs" 3 830 "float(float x)" `342 
F N "_mul" 3 831 ""
V L "??65535" 3 831 "int8" `345 
V L "??65535" 3 831 "int8" `346 
F B "_mul" 3 831 "int16(int8 ,int8 )" `344 
F N "_mul" 3 832 ""
V L "??65535" 3 832 "sint8" `348 
V L "??65535" 3 832 "sint8" `349 
F B "_mul" 3 832 "sint16(sint8 ,sint8 )" `347 
F N "_mul" 3 833 ""
V L "??65535" 3 833 "int16" `351 
V L "??65535" 3 833 "int16" `352 
F B "_mul" 3 833 "int32(int16 ,int16 )" `350 
F N "_mul" 3 834 ""
V L "??65535" 3 834 "sint16" `354 
V L "??65535" 3 834 "sint16" `355 
F B "_mul" 3 834 "sint32(sint16 ,sint16 )" `353  "Memory Manipulation Prototypes:"
F N "read_bank" 3 837 ""
V L "bank" 3 837 "int8" `357 
V L "offset" 3 837 "int8" `358 
F B "read_bank" 3 837 "int8(int8 bank,int8 offset)" `356 
F N "write_bank" 3 838 ""
V L "bank" 3 838 "int8" `360 
V L "offset" 3 838 "int8" `361 
V L "value" 3 838 "int8" `362 
F B "write_bank" 3 838 "void(int8 bank,int8 offset,int8 value)" `359 
F N "strcpy" 3 839 ""
V L "dest" 3 839 "*int8" `364 
V L "src" 3 839 "*int8" `365 
F B "strcpy" 3 839 "void(*int8 dest,*int8 src)" `363 
F N "memset" 3 840 ""
V L "destination" 3 840 "*int8" `367 
V L "value" 3 840 "int8" `368 
V L "num" 3 840 "int16" `369 
F B "memset" 3 840 "void(*int8 destination,int8 value,int16 num)" `366 
F N "memcpy" 3 841 ""
V L "destination" 3 841 "*int8" `371 
V L "source" 3 841 "*int8" `372 
V L "num" 3 841 "int16" `373 
F B "memcpy" 3 841 "void(*int8 destination,*int8 source,int16 num)" `370  "String Prototypes:"
F N "toupper" 3 844 ""
V L "cvalue" 3 844 "int8" `375 
F B "toupper" 3 844 "int8(int8 cvalue)" `374 
F N "tolower" 3 845 ""
V L "cvalue" 3 845 "int8" `377 
F B "tolower" 3 845 "int8(int8 cvalue)" `376 
F N "sprintf" 3 846 ""
V L "string" 3 846 "*int8" `379 
V L "cstring" 3 846 "*int8" `380 
F B "sprintf" 3 846 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `378  "Data Manipulators Prototypes:"
F N "shift_left" 3 849 ""
V L "address" 3 849 "*int8" `383 
V L "bytes" 3 849 "int8" `384 
V L "value" 3 849 "int8" `385 
F B "shift_left" 3 849 "int8(*int8 address,int8 bytes,int8 value)" `382 
F N "shift_right" 3 850 ""
V L "address" 3 850 "*int8" `387 
V L "bytes" 3 850 "int8" `388 
V L "value" 3 850 "int8" `389 
F B "shift_right" 3 850 "int8(*int8 address,int8 bytes,int8 value)" `386 
F N "rotate_left" 3 851 ""
V L "address" 3 851 "*int8" `391 
V L "bytes" 3 851 "int8" `392 
F B "rotate_left" 3 851 "void(*int8 address,int8 bytes)" `390 
F N "rotate_right" 3 852 ""
V L "address" 3 852 "*int8" `394 
V L "bytes" 3 852 "int8" `395 
F B "rotate_right" 3 852 "void(*int8 address,int8 bytes)" `393 
F N "swap" 3 853 ""
V L "value" 3 853 "int8" `397 
F B "swap" 3 853 "void(int8 value)" `396 
F N "make8" 3 854 ""
V L "var" 3 854 "int16" `399 
V L "offset" 3 854 "int8" `400 
F B "make8" 3 854 "int8(int16 var,int8 offset)" `398 
F N "make8" 3 855 ""
V L "var" 3 855 "int32" `402 
V L "offset" 3 855 "int8" `403 
F B "make8" 3 855 "int8(int32 var,int8 offset)" `401 
F N "make16" 3 856 ""
V L "varhigh" 3 856 "int8" `405 
V L "varlow" 3 856 "int8" `406 
F B "make16" 3 856 "int16(int8 varhigh,int8 varlow)" `404 
F N "make32" 3 857 ""
V L "var1" 3 857 "int16" `408 
F B "make32" 3 857 "int32(int16 var1)" `407 
F N "make32" 3 858 ""
V L "var1" 3 858 "int16" `410 
V L "var2" 3 858 "int16" `411 
F B "make32" 3 858 "int32(int16 var1,int16 var2)" `409 
F N "make32" 3 859 ""
V L "var1" 3 859 "int16" `413 
V L "var2" 3 859 "int8" `414 
F B "make32" 3 859 "int32(int16 var1,int8 var2)" `412 
F N "make32" 3 860 ""
V L "var1" 3 860 "int16" `416 
V L "var2" 3 860 "int8" `417 
V L "var3" 3 860 "int8" `418 
F B "make32" 3 860 "int32(int16 var1,int8 var2,int8 var3)" `415 
F N "make32" 3 861 ""
V L "var1" 3 861 "int8" `420 
F B "make32" 3 861 "int32(int8 var1)" `419 
F N "make32" 3 862 ""
V L "var1" 3 862 "int8" `422 
V L "var2" 3 862 "int8" `423 
F B "make32" 3 862 "int32(int8 var1,int8 var2)" `421 
F N "make32" 3 863 ""
V L "var1" 3 863 "int8" `425 
V L "var2" 3 863 "int8" `426 
V L "var3" 3 863 "int8" `427 
F B "make32" 3 863 "int32(int8 var1,int8 var2,int8 var3)" `424 
F N "make32" 3 864 ""
V L "var1" 3 864 "int8" `429 
V L "var2" 3 864 "int8" `430 
V L "var3" 3 864 "int8" `431 
V L "var4" 3 864 "int8" `432 
F B "make32" 3 864 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `428 
F N "make32" 3 865 ""
V L "var1" 3 865 "int8" `434 
V L "var2" 3 865 "int16" `435 
F B "make32" 3 865 "int32(int8 var1,int16 var2)" `433 
F N "make32" 3 866 ""
V L "var1" 3 866 "int8" `437 
V L "var2" 3 866 "int16" `438 
V L "var3" 3 866 "int8" `439 
F B "make32" 3 866 "int32(int8 var1,int16 var2,int8 var3)" `436 
F N "make32" 3 867 ""
V L "var1" 3 867 "int8" `441 
V L "var2" 3 867 "int8" `442 
V L "var3" 3 867 "int16" `443 
F B "make32" 3 867 "int32(int8 var1,int8 var2,int16 var3)" `440 
F N "bit_set" 3 868 ""
V L "var" 3 868 "int8" `445 
V L "bit" 3 868 "int8" `446 
F B "bit_set" 3 868 "void(int8 var,int8 bit)" `444 
F N "bit_set" 3 869 ""
V L "var" 3 869 "int16" `448 
V L "bit" 3 869 "int8" `449 
F B "bit_set" 3 869 "void(int16 var,int8 bit)" `447 
F N "bit_set" 3 870 ""
V L "var" 3 870 "int32" `451 
V L "bit" 3 870 "int8" `452 
F B "bit_set" 3 870 "void(int32 var,int8 bit)" `450 
F N "bit_clear" 3 871 ""
V L "var" 3 871 "int8" `454 
V L "bit" 3 871 "int8" `455 
F B "bit_clear" 3 871 "void(int8 var,int8 bit)" `453 
F N "bit_clear" 3 872 ""
V L "var" 3 872 "int16" `457 
V L "bit" 3 872 "int8" `458 
F B "bit_clear" 3 872 "void(int16 var,int8 bit)" `456 
F N "bit_clear" 3 873 ""
V L "var" 3 873 "int32" `460 
V L "bit" 3 873 "int8" `461 
F B "bit_clear" 3 873 "void(int32 var,int8 bit)" `459 
F N "bit_test" 3 874 ""
V L "var" 3 874 "int8" `463 
V L "bit" 3 874 "int8" `464 
F B "bit_test" 3 874 "int8(int8 var,int8 bit)" `462 
F N "bit_test" 3 875 ""
V L "var" 3 875 "int16" `466 
V L "bit" 3 875 "int8" `467 
F B "bit_test" 3 875 "int8(int16 var,int8 bit)" `465 
F N "bit_test" 3 876 ""
V L "var" 3 876 "int32" `469 
V L "bit" 3 876 "int8" `470 
F B "bit_test" 3 876 "int8(int32 var,int8 bit)" `468  "#use delay() Prototypes:"
F N "delay_cycles" 3 879 ""
V L "count" 3 879 "int8" `472 
F B "delay_cycles" 3 879 "void(int8 count)" `471 
F N "delay_ms" 3 880 ""
V L "time" 3 880 "int16" `474 
F B "delay_ms" 3 880 "void(int16 time)" `473 
F N "delay_us" 3 881 ""
V L "time" 3 881 "int16" `476 
F B "delay_us" 3 881 "void(int16 time)" `475  "#use rs232() Prototypes:"
F N "putchar" 3 884 ""
V L "cdata" 3 884 "int8" `478 
F B "putchar" 3 884 "void(int8 cdata)" `477 
F N "putchar" 3 885 ""
V L "cdata" 3 885 "int8" `480 
V L "stream" 3 885 "int8" `481 
F B "putchar" 3 885 "void(int8 cdata,int8 stream)" `479 
F N "puts" 3 886 ""
V L "string" 3 886 "*int8" `483 
F B "puts" 3 886 "void(*int8 string)" `482 
F N "puts" 3 887 ""
V L "string" 3 887 "*int8" `485 
V L "stream" 3 887 "int8" `486 
F B "puts" 3 887 "void(*int8 string,int8 stream)" `484 
F N "getch" 3 888 ""
F B "getch" 3 888 "int8()" `487 
F N "getch" 3 889 ""
V L "stream" 3 889 "int8" `489 
F B "getch" 3 889 "int8(int8 stream)" `488 
F N "gets" 3 890 ""
V L "string" 3 890 "*int8" `491 
F B "gets" 3 890 "void(*int8 string)" `490 
F N "gets" 3 891 ""
V L "string" 3 891 "*int8" `493 
V L "stream" 3 891 "int8" `494 
F B "gets" 3 891 "void(*int8 string,int8 stream)" `492 
F N "kbhit" 3 892 ""
F B "kbhit" 3 892 "int8()" `495 
F N "kbhit" 3 893 ""
V L "stream" 3 893 "int8" `497 
F B "kbhit" 3 893 "int8(int8 stream)" `496 
F N "printf" 3 894 ""
V L "string" 3 894 "*int8" `499 
F B "printf" 3 894 "void(*int8 string,*int8 _VA_LIST)" `498 
F N "fprintf" 3 895 ""
V L "stream" 3 895 "int8" `502 
V L "string" 3 895 "*int8" `503 
F B "fprintf" 3 895 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `501 
F N "putc_send" 3 896 ""
F B "putc_send" 3 896 "void()" `505 
F N "fputc_send" 3 897 ""
V L "stream" 3 897 "int8" `507 
F B "fputc_send" 3 897 "void(int8 stream)" `506 
F N "rcv_buffer_full" 3 898 ""
F B "rcv_buffer_full" 3 898 "int8()" `508 
F N "rcv_buffer_full" 3 899 ""
V L "stream" 3 899 "int8" `510 
F B "rcv_buffer_full" 3 899 "int8(int8 stream)" `509 
F N "rcv_buffer_bytes" 3 900 ""
F B "rcv_buffer_bytes" 3 900 "int16()" `511 
F N "rcv_buffer_bytes" 3 901 ""
V L "stream" 3 901 "int8" `513 
F B "rcv_buffer_bytes" 3 901 "int16(int8 stream)" `512 
F N "tx_buffer_full" 3 902 ""
F B "tx_buffer_full" 3 902 "int8()" `514 
F N "tx_buffer_full" 3 903 ""
V L "stream" 3 903 "int8" `516 
F B "tx_buffer_full" 3 903 "int8(int8 stream)" `515 
F N "tx_buffer_bytes" 3 904 ""
F B "tx_buffer_bytes" 3 904 "int16()" `517 
F N "tx_buffer_bytes" 3 905 ""
V L "stream" 3 905 "int8" `519 
F B "tx_buffer_bytes" 3 905 "int16(int8 stream)" `518 
F N "linbus_header" 3 906 ""
V L "identifier" 3 906 "int8" `521 
F B "linbus_header" 3 906 "int8(int8 identifier)" `520 
F N "linbus_header" 3 907 ""
V L "stream" 3 907 "int8" `523 
V L "identifier" 3 907 "int8" `524 
F B "linbus_header" 3 907 "int8(int8 stream,int8 identifier)" `522 
F N "linbus_header_hit" 3 908 ""
F B "linbus_header_hit" 3 908 "int8()" `525 
F N "linbus_header_hit" 3 909 ""
V L "stream" 3 909 "int8" `527 
F B "linbus_header_hit" 3 909 "int8(int8 stream)" `526 
F N "linbus_header_get" 3 910 ""
F B "linbus_header_get" 3 910 "int8()" `528 
F N "linbus_header_get" 3 911 ""
V L "stream" 3 911 "int8" `530 
F B "linbus_header_get" 3 911 "int8(int8 stream)" `529 
F N "linbus_rx_response" 3 912 ""
V L "DataPtr" 3 912 "*int8" `532 
V L "count" 3 912 "int8" `533 
F B "linbus_rx_response" 3 912 "int8(*int8 DataPtr,int8 count)" `531 
F N "linbus_rx_response" 3 913 ""
V L "stream" 3 913 "int8" `535 
V L "DataPtr" 3 913 "*int8" `536 
V L "count" 3 913 "int8" `537 
F B "linbus_rx_response" 3 913 "int8(int8 stream,*int8 DataPtr,int8 count)" `534 
F N "linbus_tx_response" 3 914 ""
V L "DataPtr" 3 914 "*int8" `539 
V L "count" 3 914 "int8" `540 
F B "linbus_tx_response" 3 914 "void(*int8 DataPtr,int8 count)" `538 
F N "linbus_tx_response" 3 915 ""
V L "stream" 3 915 "int8" `542 
V L "DataPtr" 3 915 "*int8" `543 
V L "count" 3 915 "int8" `544 
F B "linbus_tx_response" 3 915 "void(int8 stream,*int8 DataPtr,int8 count)" `541 
F N "linbus_checksum_type" 3 916 ""
V L "type" 3 916 "int8" `546 
F B "linbus_checksum_type" 3 916 "void(int8 type)" `545 
F N "linbus_checksum_type" 3 917 ""
V L "stream" 3 917 "int8" `548 
V L "type" 3 917 "int8" `549 
F B "linbus_checksum_type" 3 917 "void(int8 stream,int8 type)" `547  "#use i2c() Prototypes:"
F N "i2c_read" 3 920 ""
F B "i2c_read" 3 920 "int8()" `550 
F N "i2c_read" 3 921 ""
V L "ack" 3 921 "int8" `552 
F B "i2c_read" 3 921 "int8(int8 ack)" `551 
F N "i2c_read" 3 922 ""
V L "stream" 3 922 "int8" `554 
V L "ack" 3 922 "int8" `555 
F B "i2c_read" 3 922 "int8(int8 stream,int8 ack)" `553 
F N "i2c_write" 3 923 ""
V L "data" 3 923 "int8" `557 
F B "i2c_write" 3 923 "int8(int8 data)" `556 
F N "i2c_write" 3 924 ""
V L "stream" 3 924 "int8" `559 
V L "data" 3 924 "int8" `560 
F B "i2c_write" 3 924 "int8(int8 stream,int8 data)" `558 
F N "i2c_start" 3 925 ""
F B "i2c_start" 3 925 "void()" `561 
F N "i2c_start" 3 926 ""
V L "stream" 3 926 "int8" `563 
F B "i2c_start" 3 926 "void(int8 stream)" `562 
F N "i2c_start" 3 927 ""
V L "stream" 3 927 "int8" `565 
V L "restart" 3 927 "int8" `566 
F B "i2c_start" 3 927 "void(int8 stream,int8 restart)" `564 
F N "i2c_stop" 3 928 ""
F B "i2c_stop" 3 928 "void()" `567 
F N "i2c_stop" 3 929 ""
V L "stream" 3 929 "int8" `569 
F B "i2c_stop" 3 929 "void(int8 stream)" `568 
F N "i2c_isr_state" 3 930 ""
F B "i2c_isr_state" 3 930 "int8()" `570 
F N "i2c_slaveaddr" 3 931 ""
V L "addr" 3 931 "int8" `572 
F B "i2c_slaveaddr" 3 931 "void(int8 addr)" `571 
F N "i2c_slaveaddr" 3 932 ""
V L "stream" 3 932 "int8" `574 
V L "addr" 3 932 "int8" `575 
F B "i2c_slaveaddr" 3 932 "void(int8 stream,int8 addr)" `573 
F N "i2c_poll" 3 933 ""
F B "i2c_poll" 3 933 "int8()" `576 
F N "i2c_poll" 3 934 ""
V L "stream" 3 934 "int8" `578 
F B "i2c_poll" 3 934 "int8(int8 stream)" `577 
F N "i2c_init" 3 935 ""
V L "baud" 3 935 "int32" `580 
F B "i2c_init" 3 935 "void(int32 baud)" `579 
F N "i2c_init" 3 936 ""
V L "stream" 3 936 "int8" `582 
V L "baud" 3 936 "int32" `583 
F B "i2c_init" 3 936 "void(int8 stream,int32 baud)" `581 
F N "i2c_transfer" 3 937 ""
V L "address" 3 937 "int8" `585 
V L "wData" 3 937 "*int8" `586 
V L "wCount" 3 937 "int8" `587 
F B "i2c_transfer" 3 937 "int8(int8 address,*int8 wData,int8 wCount)" `584 
F N "i2c_transfer" 3 938 ""
V L "address" 3 938 "int8" `589 
V L "wData" 3 938 "*int8" `590 
V L "wCount" 3 938 "int8" `591 
V L "rData" 3 938 "*int8" `592 
V L "rCount" 3 938 "*int8" `593 
F B "i2c_transfer" 3 938 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `588 
F N "i2c_transfer" 3 939 ""
V L "stream" 3 939 "int8" `595 
V L "address" 3 939 "int8" `596 
V L "wData" 3 939 "*int8" `597 
V L "wCount" 3 939 "int8" `598 
F B "i2c_transfer" 3 939 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `594 
F N "i2c_transfer" 3 940 ""
V L "stream" 3 940 "int8" `600 
V L "address" 3 940 "int8" `601 
V L "wData" 3 940 "*int8" `602 
V L "wCount" 3 940 "int8" `603 
V L "rData" 3 940 "*int8" `604 
V L "rCount" 3 940 "*int8" `605 
F B "i2c_transfer" 3 940 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `599 
F N "i2c_transfer_out" 3 941 ""
V L "address" 3 941 "int8" `607 
V L "wData" 3 941 "*int8" `608 
V L "wCount" 3 941 "int8" `609 
F B "i2c_transfer_out" 3 941 "int8(int8 address,*int8 wData,int8 wCount)" `606 
F N "i2c_transfer_out" 3 942 ""
V L "stream" 3 942 "int8" `611 
V L "address" 3 942 "int8" `612 
V L "wData" 3 942 "*int8" `613 
V L "wCount" 3 942 "int8" `614 
F B "i2c_transfer_out" 3 942 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `610 
F N "i2c_transfer_in" 3 943 ""
V L "address" 3 943 "int8" `616 
V L "rData" 3 943 "*int8" `617 
V L "rCount" 3 943 "int8" `618 
F B "i2c_transfer_in" 3 943 "int8(int8 address,*int8 rData,int8 rCount)" `615 
F N "i2c_transfer_in" 3 944 ""
V L "stream" 3 944 "int8" `620 
V L "address" 3 944 "int8" `621 
V L "rData" 3 944 "*int8" `622 
V L "rCount" 3 944 "int8" `623 
F B "i2c_transfer_in" 3 944 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `619  "#use spi() Prototypes:"
F N "spi_xfer" 3 947 ""
F B "spi_xfer" 3 947 "int8()" `624 
F N "spi_xfer" 3 948 ""
f G "spi_xfer" 3 948 "int16(int8 data)" `625 
F N "spi_xfer" 3 949 ""
f G "spi_xfer" 3 949 "int32(int8 data)" `625 
F N "spi_xfer" 3 950 ""
V L "data" 3 950 "int8" `626 
F B "spi_xfer" 3 950 "int8(int8 data)" `625 
F N "spi_xfer" 3 951 ""
V L "data" 3 951 "int16" `628 
F B "spi_xfer" 3 951 "int16(int16 data)" `627 
F N "spi_xfer" 3 952 ""
V L "data" 3 952 "int32" `630 
F B "spi_xfer" 3 952 "int32(int32 data)" `629 
F N "spi_xfer" 3 953 ""
V L "stream" 3 953 "int8" `632 
V L "data" 3 953 "int8" `633 
F B "spi_xfer" 3 953 "int8(int8 stream,int8 data)" `631 
F N "spi_xfer" 3 954 ""
V L "stream" 3 954 "int8" `635 
V L "data" 3 954 "int16" `636 
F B "spi_xfer" 3 954 "int16(int8 stream,int16 data)" `634 
F N "spi_xfer" 3 955 ""
V L "stream" 3 955 "int8" `638 
V L "data" 3 955 "int32" `639 
F B "spi_xfer" 3 955 "int32(int8 stream,int32 data)" `637 
F N "spi_xfer" 3 956 ""
V L "stream" 3 956 "int8" `641 
V L "data" 3 956 "int8" `642 
V L "bits" 3 956 "int8" `643 
F B "spi_xfer" 3 956 "int8(int8 stream,int8 data,int8 bits)" `640 
F N "spi_xfer" 3 957 ""
V L "stream" 3 957 "int8" `645 
V L "data" 3 957 "int16" `646 
V L "bits" 3 957 "int8" `647 
F B "spi_xfer" 3 957 "int16(int8 stream,int16 data,int8 bits)" `644 
F N "spi_xfer" 3 958 ""
V L "stream" 3 958 "int8" `649 
V L "data" 3 958 "int32" `650 
V L "bits" 3 958 "int8" `651 
F B "spi_xfer" 3 958 "int32(int8 stream,int32 data,int8 bits)" `648 
F N "spi_init" 3 959 ""
V L "baud" 3 959 "int32" `653 
F B "spi_init" 3 959 "void(int32 baud)" `652 
F N "spi_init" 3 960 ""
V L "stream" 3 960 "int8" `655 
V L "baud" 3 960 "int32" `656 
F B "spi_init" 3 960 "void(int8 stream,int32 baud)" `654 
F N "spi_speed" 3 961 ""
V L "baud" 3 961 "int32" `658 
F B "spi_speed" 3 961 "void(int32 baud)" `657 
F N "spi_speed" 3 962 ""
V L "stream" 3 962 "int8" `660 
V L "baud" 3 962 "int32" `661 
F B "spi_speed" 3 962 "void(int8 stream,int32 baud)" `659 
F N "spi_speed" 3 963 ""
V L "stream" 3 963 "int8" `663 
V L "baud" 3 963 "int32" `664 
V L "clock" 3 963 "int32" `665 
F B "spi_speed" 3 963 "void(int8 stream,int32 baud,int32 clock)" `662 
F N "spi_prewrite" 3 964 ""
V L "data" 3 964 "int8" `667 
F B "spi_prewrite" 3 964 "void(int8 data)" `666 
F N "spi_prewrite" 3 965 ""
V L "data" 3 965 "int16" `669 
F B "spi_prewrite" 3 965 "void(int16 data)" `668 
F N "spi_prewrite" 3 966 ""
V L "data" 3 966 "int32" `671 
F B "spi_prewrite" 3 966 "void(int32 data)" `670 
F N "spi_prewrite" 3 967 ""
V L "??65535" 3 967 "int8" `673 
V L "data" 3 967 "int8" `674 
F B "spi_prewrite" 3 967 "void(int8 ,int8 data)" `672 
F N "spi_prewrite" 3 968 ""
V L "??65535" 3 968 "int8" `676 
V L "data" 3 968 "int16" `677 
F B "spi_prewrite" 3 968 "void(int8 ,int16 data)" `675 
F N "spi_prewrite" 3 969 ""
V L "??65535" 3 969 "int8" `679 
V L "data" 3 969 "int32" `680 
F B "spi_prewrite" 3 969 "void(int8 ,int32 data)" `678 
F N "spi_xfer_in" 3 970 ""
F B "spi_xfer_in" 3 970 "int8()" `681 
F N "spi_xfer_in" 3 971 ""
f G "spi_xfer_in" 3 971 "int16(int8 bits)" `682 
F N "spi_xfer_in" 3 972 ""
f G "spi_xfer_in" 3 972 "int32(int8 bits)" `682 
F N "spi_xfer_in" 3 973 ""
V L "bits" 3 973 "int8" `683 
F B "spi_xfer_in" 3 973 "int8(int8 bits)" `682 
F N "spi_xfer_in" 3 974 ""
V L "bits" 3 974 "int8" `685 
f G "spi_xfer_in" 3 974 "int16(int8 bits,int8 bits)" `684 
F N "spi_xfer_in" 3 975 ""
V L "bits" 3 975 "int8" `685 
f G "spi_xfer_in" 3 975 "int32(int8 bits,int8 bits)" `684 
F N "spi_xfer_in" 3 976 ""
V L "stream" 3 976 "int8" `685 
V L "bits" 3 976 "int8" `686 
F B "spi_xfer_in" 3 976 "int8(int8 stream,int8 bits)" `684 
F N "spi_xfer_in" 3 977 ""
V L "stream" 3 977 "int8" `685 
V L "bits" 3 977 "int8" `689 
f G "spi_xfer_in" 3 977 "int16(int8 stream,int8 bits,int16 count)" `687 
F N "spi_xfer_in" 3 978 ""
V L "stream" 3 978 "int8" `685 
V L "bits" 3 978 "int8" `689 
f G "spi_xfer_in" 3 978 "int32(int8 stream,int8 bits,int16 count)" `687 
F N "spi_transfer" 3 979 ""
V L "wData" 3 979 "*int8" `688 
V L "rData" 3 979 "*int8" `689 
V L "count" 3 979 "int16" `690 
F B "spi_transfer" 3 979 "void(*int8 wData,*int8 rData,int16 count)" `687 
F N "spi_transfer" 3 980 ""
V L "stream" 3 980 "int8" `692 
V L "wData" 3 980 "*int8" `693 
V L "rData" 3 980 "*int8" `694 
V L "count" 3 980 "int16" `695 
F B "spi_transfer" 3 980 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `691 
F N "spi_transfer_write" 3 981 ""
V L "wData" 3 981 "*int8" `697 
V L "count" 3 981 "int16" `698 
F B "spi_transfer_write" 3 981 "void(*int8 wData,int16 count)" `696 
F N "spi_transfer_write" 3 982 ""
V L "stream" 3 982 "int8" `700 
V L "wData" 3 982 "*int8" `701 
V L "count" 3 982 "int16" `702 
F B "spi_transfer_write" 3 982 "void(int8 stream,*int8 wData,int16 count)" `699 
F N "spi_transfer_read" 3 983 ""
V L "rData" 3 983 "*int8" `704 
V L "count" 3 983 "int16" `705 
F B "spi_transfer_read" 3 983 "void(*int8 rData,int16 count)" `703 
F N "spi_transfer_read" 3 984 ""
V L "stream" 3 984 "int8" `707 
V L "rData" 3 984 "*int8" `708 
V L "count" 3 984 "int16" `709 
F B "spi_transfer_read" 3 984 "void(int8 stream,*int8 rData,int16 count)" `706  "#use rtos() Prototypes:"
F N "rtos_run" 3 987 ""
F B "rtos_run" 3 987 "void()" `710 
F N "rtos_yield" 3 988 ""
F B "rtos_yield" 3 988 "void()" `711 
F N "rtos_enable" 3 989 ""
V L "task" 3 989 "int8" `713 
F B "rtos_enable" 3 989 "void(int8 task)" `712 
F N "rtos_disable" 3 990 ""
V L "task" 3 990 "int8" `715 
F B "rtos_disable" 3 990 "void(int8 task)" `714 
F N "rtos_terminate" 3 991 ""
F B "rtos_terminate" 3 991 "void()" `716 
F N "rtos_await" 3 992 ""
V L "flag" 3 992 "int8" `718 
F B "rtos_await" 3 992 "void(int8 flag)" `717 
F N "rtos_wait" 3 993 ""
V L "sem" 3 993 "int8" `720 
F B "rtos_wait" 3 993 "void(int8 sem)" `719 
F N "rtos_signal" 3 994 ""
V L "sem" 3 994 "int8" `722 
F B "rtos_signal" 3 994 "void(int8 sem)" `721 
F N "rtos_msg_send" 3 995 ""
V L "task" 3 995 "int8" `724 
V L "msg" 3 995 "int8" `725 
F B "rtos_msg_send" 3 995 "void(int8 task,int8 msg)" `723 
F N "rtos_msg_read" 3 996 ""
F B "rtos_msg_read" 3 996 "int8()" `726 
F N "rtos_msg_poll" 3 997 ""
F B "rtos_msg_poll" 3 997 "int8()" `727 
F N "rtos_overrun" 3 998 ""
V L "task" 3 998 "int8" `729 
F B "rtos_overrun" 3 998 "int8(int8 task)" `728 
F N "rtos_stats" 3 999 ""
V L "task" 3 999 "int8" `731 
V L "stat" 3 999 "*int8" `732 
F B "rtos_stats" 3 999 "void(int8 task,*int8 stat)" `730  "#use timer() Prototypes:"
F N "get_ticks" 3 1002 ""
F B "get_ticks" 3 1002 "int8()" `733 
F N "get_ticks" 3 1003 ""
f G "get_ticks" 3 1003 "int16(int8 stream)" `734 
F N "get_ticks" 3 1004 ""
f G "get_ticks" 3 1004 "int32(int8 stream)" `734 
F N "get_ticks" 3 1005 ""
V L "stream" 3 1005 "int8" `735 
F B "get_ticks" 3 1005 "int8(int8 stream)" `734 
F N "get_ticks" 3 1006 ""
V L "stream" 3 1006 "int8" `737 
f G "get_ticks" 3 1006 "int16(int8 stream)" `736 
F N "get_ticks" 3 1007 ""
V L "stream" 3 1007 "int8" `737 
f G "get_ticks" 3 1007 "int32(int8 stream)" `736 
F N "set_ticks" 3 1008 ""
V L "value" 3 1008 "int8" `737 
F B "set_ticks" 3 1008 "void(int8 value)" `736 
F N "set_ticks" 3 1009 ""
V L "value" 3 1009 "int16" `739 
F B "set_ticks" 3 1009 "void(int16 value)" `738 
F N "set_ticks" 3 1010 ""
V L "value" 3 1010 "int32" `741 
F B "set_ticks" 3 1010 "void(int32 value)" `740 
F N "set_ticks" 3 1011 ""
V L "stream" 3 1011 "int8" `743 
V L "value" 3 1011 "int8" `744 
F B "set_ticks" 3 1011 "void(int8 stream,int8 value)" `742 
F N "set_ticks" 3 1012 ""
V L "stream" 3 1012 "int8" `746 
V L "value" 3 1012 "int16" `747 
F B "set_ticks" 3 1012 "void(int8 stream,int16 value)" `745 
F N "set_ticks" 3 1013 ""
V L "stream" 3 1013 "int8" `749 
V L "value" 3 1013 "int32" `750 
F B "set_ticks" 3 1013 "void(int8 stream,int32 value)" `748  "#use pwm() Prototypes:"
F N "pwm_on" 3 1016 ""
F B "pwm_on" 3 1016 "void()" `751 
F N "pwm_on" 3 1017 ""
V L "stream" 3 1017 "int8" `753 
F B "pwm_on" 3 1017 "void(int8 stream)" `752 
F N "pwm_off" 3 1018 ""
F B "pwm_off" 3 1018 "void()" `754 
F N "pwm_off" 3 1019 ""
V L "stream" 3 1019 "int8" `756 
F B "pwm_off" 3 1019 "void(int8 stream)" `755 
F N "pwm_set_duty" 3 1020 ""
V L "duty" 3 1020 "int16" `758 
F B "pwm_set_duty" 3 1020 "void(int16 duty)" `757 
F N "pwm_set_duty" 3 1021 ""
V L "stream" 3 1021 "int8" `760 
V L "duty" 3 1021 "int16" `761 
F B "pwm_set_duty" 3 1021 "void(int8 stream,int16 duty)" `759 
F N "pwm_set_duty_percent" 3 1022 ""
V L "percent" 3 1022 "int16" `763 
F B "pwm_set_duty_percent" 3 1022 "void(int16 percent)" `762 
F N "pwm_set_duty_percent" 3 1023 ""
V L "stream" 3 1023 "int8" `765 
V L "percent" 3 1023 "int16" `766 
F B "pwm_set_duty_percent" 3 1023 "void(int8 stream,int16 percent)" `764 
F N "pwm_set_frequency" 3 1024 ""
V L "frequency" 3 1024 "int32" `768 
F B "pwm_set_frequency" 3 1024 "void(int32 frequency)" `767 
F N "pwm_set_frequency" 3 1025 ""
V L "stream" 3 1025 "int8" `770 
V L "frequency" 3 1025 "int32" `771 
F B "pwm_set_frequency" 3 1025 "void(int8 stream,int32 frequency)" `769 
F N "pwm_get_duty_period" 3 1026 ""
F B "pwm_get_duty_period" 3 1026 "int16()" `772 
F N "pwm_get_duty_period" 3 1027 ""
V L "stream" 3 1027 "int8" `774 
F B "pwm_get_duty_period" 3 1027 "int16(int8 stream)" `773  "#use capture() Prototypes:"
F N "get_capture_time" 3 1030 ""
F B "get_capture_time" 3 1030 "int16()" `775 
F N "get_capture_time" 3 1031 ""
V L "stream" 3 1031 "int8" `777 
F B "get_capture_time" 3 1031 "int16(int8 stream)" `776 
F N "get_capture_event" 3 1032 ""
F B "get_capture_event" 3 1032 "int8()" `778 
F N "get_capture_event" 3 1033 ""
V L "stream" 3 1033 "int8" `780 
F B "get_capture_event" 3 1033 "int8(int8 stream)" `779  "Enviroment Prototypes:"
c L "get_capture_event" 3 721 2 "FUNCTION"
F N "goto_address" 3 1046 ""
V L "address" 3 1046 "int16" `782 
F B "goto_address" 3 1046 "void(int16 address)" `781 
F N "label_address" 3 1047 ""
V L "label" 3 1047 "int16" `784 
F B "label_address" 3 1047 "int16(int16 label)" `783  "Program Memory Read Prototypes:"
F N "read_program_memory" 3 1050 ""
V L "address" 3 1050 "int16" `786 
V L "DataPtr" 3 1050 "*int8" `787 
V L "count" 3 1050 "int16" `788 
F B "read_program_memory" 3 1050 "void(int16 address,*int8 DataPtr,int16 count)" `785 
F N "read_program_eeprom" 3 1051 ""
V L "address" 3 1051 "int16" `790 
F B "read_program_eeprom" 3 1051 "int16(int16 address)" `789 
F N "read_configuration_memory" 3 1052 ""
V L "DataPtr" 3 1052 "*int8" `792 
V L "count" 3 1052 "int8" `793 
F B "read_configuration_memory" 3 1052 "void(*int8 DataPtr,int8 count)" `791 
F N "read_configuration_memory" 3 1053 ""
V L "offset" 3 1053 "int8" `795 
V L "DataPtr" 3 1053 "*int8" `796 
V L "count" 3 1053 "int8" `797 
F B "read_configuration_memory" 3 1053 "void(int8 offset,*int8 DataPtr,int8 count)" `794  "Program Memory Write Prototypes:"
F N "write_program_memory" 3 1056 ""
V L "address" 3 1056 "int16" `799 
V L "DataPtr" 3 1056 "*int8" `800 
V L "count" 3 1056 "int16" `801 
F B "write_program_memory" 3 1056 "void(int16 address,*int8 DataPtr,int16 count)" `798 
F N "write_program_eeprom" 3 1057 ""
V L "address" 3 1057 "int16" `803 
V L "data" 3 1057 "int16" `804 
F B "write_program_eeprom" 3 1057 "void(int16 address,int16 data)" `802 
F N "write_configuration_memory" 3 1058 ""
V L "DataPtr" 3 1058 "*int8" `806 
V L "count" 3 1058 "int8" `807 
F B "write_configuration_memory" 3 1058 "void(*int8 DataPtr,int8 count)" `805 
F N "write_configuration_memory" 3 1059 ""
V L "offset" 3 1059 "int8" `809 
V L "DataPtr" 3 1059 "*int8" `810 
V L "count" 3 1059 "int8" `811 
F B "write_configuration_memory" 3 1059 "void(int8 offset,*int8 DataPtr,int8 count)" `808  "EEPROM Prototypes:"
D G "__EEADDRESS__" 3 1066 "unsigned int8"
F N "read_eeprom" 3 1069 ""
V L "address" 3 1069 "int8" `813 
F B "read_eeprom" 3 1069 "int8(int8 address)" `812 
F N "write_eeprom" 3 1070 ""
V L "address" 3 1070 "int8" `815 
V L "value" 3 1070 "int8" `816 
F B "write_eeprom" 3 1070 "void(int8 address,int8 value)" `814  "INT"
c L "write_eeprom" 3 721 4 "FUNCTION"
F N "enable_interrupts" 3 1077 ""
V L "interrupt" 3 1077 "int32" `818 
F B "enable_interrupts" 3 1077 "void(int32 interrupt)" `817 
F N "disable_interrupts" 3 1078 ""
V L "interrupt" 3 1078 "int32" `820 
F B "disable_interrupts" 3 1078 "void(int32 interrupt)" `819 
F N "clear_interrupt" 3 1079 ""
V L "interrupt" 3 1079 "int32" `822 
F B "clear_interrupt" 3 1079 "void(int32 interrupt)" `821 
F N "interrupt_active" 3 1080 ""
V L "interrupt" 3 1080 "int32" `824 
F B "interrupt_active" 3 1080 "int8(int32 interrupt)" `823 
F N "interrupt_enabled" 3 1081 ""
V L "interrupt" 3 1081 "int32" `826 
F B "interrupt_enabled" 3 1081 "int8(int32 interrupt)" `825 
F N "ext_int_edge" 3 1082 ""
V L "source" 3 1082 "int8" `828 
V L "edge" 3 1082 "int8" `829 
F B "ext_int_edge" 3 1082 "void(int8 source,int8 edge)" `827 
F N "jump_to_isr" 3 1083 ""
V L "address" 3 1083 "int16" `831 
F B "jump_to_isr" 3 1083 "void(int16 address)" `830  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 3 1085 "0x40"
D G "H_TO_L" 3 1086 "0"
D G "GLOBAL" 3 1088 "0x0BC0"
D G "PERIPH" 3 1089 "0x0B40"
D G "INT_IOC_A0" 3 1090 "0x30010B08"
D G "INT_IOC_A0_L2H" 3 1091 "0x10010B08"
D G "INT_IOC_A0_H2L" 3 1092 "0x20010B08"
D G "INT_IOC_A1" 3 1093 "0x30020B08"
D G "INT_IOC_A1_L2H" 3 1094 "0x10020B08"
D G "INT_IOC_A1_H2L" 3 1095 "0x20020B08"
D G "INT_IOC_A2" 3 1096 "0x30040B08"
D G "INT_IOC_A2_L2H" 3 1097 "0x10040B08"
D G "INT_IOC_A2_H2L" 3 1098 "0x20040B08"
D G "INT_IOC_A3" 3 1099 "0x30080B08"
D G "INT_IOC_A3_L2H" 3 1100 "0x10080B08"
D G "INT_IOC_A3_H2L" 3 1101 "0x20080B08"
D G "INT_IOC_A4" 3 1102 "0x30100B08"
D G "INT_IOC_A4_L2H" 3 1103 "0x10100B08"
D G "INT_IOC_A4_H2L" 3 1104 "0x20100B08"
D G "INT_IOC_A5" 3 1105 "0x30200B08"
D G "INT_IOC_A5_L2H" 3 1106 "0x10200B08"
D G "INT_IOC_A5_H2L" 3 1107 "0x20200B08"
D G "INT_IOC_A6" 3 1108 "0x30400B08"
D G "INT_IOC_A6_L2H" 3 1109 "0x10400B08"
D G "INT_IOC_A6_H2L" 3 1110 "0x20400B08"
D G "INT_IOC_A7" 3 1111 "0x30800B08"
D G "INT_IOC_A7_L2H" 3 1112 "0x10800B08"
D G "INT_IOC_A7_H2L" 3 1113 "0x20800B08"
D G "INT_IOC_B0" 3 1114 "0x31010B08"
D G "INT_IOC_B0_L2H" 3 1115 "0x11010B08"
D G "INT_IOC_B0_H2L" 3 1116 "0x21010B08"
D G "INT_IOC_B1" 3 1117 "0x31020B08"
D G "INT_IOC_B1_L2H" 3 1118 "0x11020B08"
D G "INT_IOC_B1_H2L" 3 1119 "0x21020B08"
D G "INT_IOC_B2" 3 1120 "0x31040B08"
D G "INT_IOC_B2_L2H" 3 1121 "0x11040B08"
D G "INT_IOC_B2_H2L" 3 1122 "0x21040B08"
D G "INT_IOC_B3" 3 1123 "0x31080B08"
D G "INT_IOC_B3_L2H" 3 1124 "0x11080B08"
D G "INT_IOC_B3_H2L" 3 1125 "0x21080B08"
D G "INT_IOC_B4" 3 1126 "0x31100B08"
D G "INT_IOC_B4_L2H" 3 1127 "0x11100B08"
D G "INT_IOC_B4_H2L" 3 1128 "0x21100B08"
D G "INT_IOC_B5" 3 1129 "0x31200B08"
D G "INT_IOC_B5_L2H" 3 1130 "0x11200B08"
D G "INT_IOC_B5_H2L" 3 1131 "0x21200B08"
D G "INT_IOC_B6" 3 1132 "0x31400B08"
D G "INT_IOC_B6_L2H" 3 1133 "0x11400B08"
D G "INT_IOC_B6_H2L" 3 1134 "0x21400B08"
D G "INT_IOC_B7" 3 1135 "0x31800B08"
D G "INT_IOC_B7_L2H" 3 1136 "0x11800B08"
D G "INT_IOC_B7_H2L" 3 1137 "0x21800B08"
D G "INT_IOC_C0" 3 1138 "0x32010B08"
D G "INT_IOC_C0_L2H" 3 1139 "0x12010B08"
D G "INT_IOC_C0_H2L" 3 1140 "0x22010B08"
D G "INT_IOC_C1" 3 1141 "0x32020B08"
D G "INT_IOC_C1_L2H" 3 1142 "0x12020B08"
D G "INT_IOC_C1_H2L" 3 1143 "0x22020B08"
D G "INT_IOC_C2" 3 1144 "0x32040B08"
D G "INT_IOC_C2_L2H" 3 1145 "0x12040B08"
D G "INT_IOC_C2_H2L" 3 1146 "0x22040B08"
D G "INT_IOC_C3" 3 1147 "0x32080B08"
D G "INT_IOC_C3_L2H" 3 1148 "0x12080B08"
D G "INT_IOC_C3_H2L" 3 1149 "0x22080B08"
D G "INT_IOC_C4" 3 1150 "0x32100B08"
D G "INT_IOC_C4_L2H" 3 1151 "0x12100B08"
D G "INT_IOC_C4_H2L" 3 1152 "0x22100B08"
D G "INT_IOC_C5" 3 1153 "0x32200B08"
D G "INT_IOC_C5_L2H" 3 1154 "0x12200B08"
D G "INT_IOC_C5_H2L" 3 1155 "0x22200B08"
D G "INT_IOC_C6" 3 1156 "0x32400B08"
D G "INT_IOC_C6_L2H" 3 1157 "0x12400B08"
D G "INT_IOC_C6_H2L" 3 1158 "0x22400B08"
D G "INT_IOC_C7" 3 1159 "0x32800B08"
D G "INT_IOC_C7_L2H" 3 1160 "0x12800B08"
D G "INT_IOC_C7_H2L" 3 1161 "0x22800B08"
D G "INT_IOC_E3" 3 1162 "0x34080B08"
D G "INT_IOC_E3_L2H" 3 1163 "0x14080B08"
D G "INT_IOC_E3_H2L" 3 1164 "0x24080B08"
D G "INT_EXT_L2H" 3 1165 "0x50000B10"
D G "INT_EXT_H2L" 3 1166 "0x60000B10"
D G "INT_EXT" 3 1167 "0x300B10"
D G "INT_TIMER0" 3 1168 "0x300B20"
D G "INT_TIMER1" 3 1169 "0x309101"
D G "INT_TIMER2" 3 1170 "0x309102"
D G "INT_CCP1" 3 1171 "0x309104"
D G "INT_SSP" 3 1172 "0x309108"
D G "INT_TBE" 3 1173 "0x309110"
D G "INT_RDA" 3 1174 "0x309120"
D G "INT_AD" 3 1175 "0x309140"
D G "INT_TIMER1_GATE" 3 1176 "0x309180"
D G "INT_BUSCOL" 3 1177 "0x309208"
D G "INT_EEPROM" 3 1178 "0x309210"
D G "INT_COMP" 3 1179 "0x309220"
D G "INT_COMP2" 3 1180 "0x309240"
D G "INT_OSC_FAIL" 3 1181 "0x309280"
D G "INT_CCP3" 3 1182 "0x309310"
D G "INT_CCP2" 3 1183 "0x309201"
D G "INT_COMP3" 3 1184 "0x309202"
D G "INT_PSMC1S" 3 1185 "0x309401"
D G "INT_PSMC2S" 3 1186 "0x309402"
D G "INT_PSMC1T" 3 1187 "0x309410"
D G "INT_PSMC2T" 3 1188 "0x309420"
D G "INT_COMP4" 3 1189 "0x309204"
D G "INT_PSMC3S" 3 1190 "0x309404"
D G "INT_PSMC3T" 3 1191 "0x309440"
D G "SPI0_CS" 2 20 "PIN_C1"
D G "SPI1_CS" 2 23 "PIN_C2"
D G "TEMP_TOP" 2 30 "PIN_A5"
D G "TEMP_BOT" 2 31 "PIN_A3"
D G "CIGS_VOLT" 2 32 "PIN_A0" "PIN_A0"
D G "CIGS_CURR" 2 33 "PIN_A1"
D G "PD" 2 34 "PIN_E0"
D G "LOAD" 2 37 "PIN_A2"
D G "CIGS_CONNECT" 2 40 "PIN_C0"
D G "EN_NPWR" 2 41 "PIN_C3" "Negative Power"
D G "TYPEDEF_CONTENT_H" 4 2 ""
C L "jump_to_isr" 4 4 1 "FUNCTION"
E G "EXECUTING_MISSION" 4 8 "2" `849 
E G "IDLE" 4 9 "3" `850 
E G "SMF_USE_REQ" 4 10 "4" `851 
E G "COPYING" 4 11 "5" `852 
E G "FINISHED" 4 12 "6" `853 
T G "MisMcuStatusContent" 4 12 "" `854 
E G "ALLOW" 4 17 "0" `856 
E G "DENY" 4 18 "1" `857 
T G "IsSmfAvailableContent" 4 18 "" `858  "EOF"
D G "VALUE_STATUS_H" 5 2 ""
C L "jump_to_isr" 5 4 1 "FUNCTION"
V G "duration_sec" 5 6 "int16" `859 
V G "is_use_smf_req_in_mission" 5 7 "int1" `860 
V G "status" 5 8 "int8" `861 
D G "TIMER_H" 6 2 ""
D G "SEC_IN_A_DAY" 6 6 "86400"
C L "jump_to_isr" 6 4 1 "FUNCTION"
V G "subsec" 6 11 "int32" `862 
V G "sec" 6 11 "int32" `863 
C L "jump_to_isr" 6 4 1 "FUNCTION"
V G "day" 6 12 "int16" `864 
C L "jump_to_isr" 6 4 1 "FUNCTION"
F N "TIMER0_isr" 6 18 ""
f G "TIMER0_isr" 6 18 "void()" `865 
F N "TIMER0_isr" 7 2 ""
F G "TIMER0_isr" 7 3 "void()" `865  "every 0.01 sec interrupts"
F N "initialize_timer" 7 20 ""
F G "initialize_timer" 7 21 "void()" `866 
C L "initialize_timer" 7 23 1 "FUNCTION"
C L "initialize_timer" 7 23 2 "FUNCTION"
D G "UART_H" 8 2 ""
D G "RECEIVE_BUFFER_MAX" 8 6 "32"
V G "boss_receive_buffer" 8 11 "int8[32]" `872 
V G "boss_receive_buffer_size" 8 12 "int8" `873 
F N "RDA_isr" 8 18 ""
f G "RDA_isr" 8 18 "void()" `874 
F N "initialize_uart" 8 20 ""
f G "initialize_uart" 8 20 "void()" `875 
F N "clear_receive_signal" 8 22 ""
V L "receive_signal" 8 22 "*int8" `877 
V L "receive_signal_size" 8 22 "*int8" `878 
f G "clear_receive_signal" 8 22 "void(*int8 receive_signal,*int8 receive_signal_size)" `876 
F N "RDA_isr" 9 2 ""
F G "RDA_isr" 9 3 "void()" `874 
F N "initialize_uart" 9 9 ""
F G "initialize_uart" 9 10 "void()" `875 
F N "clear_receive_signal" 9 16 ""
V L "receive_signal" 9 16 "*int8" `877 
V L "receive_signal_size" 9 16 "*int8" `883 
F G "clear_receive_signal" 9 17 "void(*int8 receive_signal,*int8 receive_signal_size)" `876 
D G "MMJ_CIGS_PIC_MODE_H" 10 2 ""
C L "mode_measure" 10 5 1 "FUNCTION"
F N "mode_measure" 10 8 ""
V L "parameter" 10 8 "*int8" `886 
f G "mode_measure" 10 8 "void(*int8 parameter)" `885  "Flash command"
F N "mode_flash_erase_all" 10 12 ""
f G "mode_flash_erase_all" 10 12 "void()" `888 
F N "mode_flash_erase_1sector" 10 14 ""
f G "mode_flash_erase_1sector" 10 14 "void()" `889 
F N "mode_flash_copy_1sector" 10 16 ""
f G "mode_flash_copy_1sector" 10 16 "void()" `890 
F N "mode_flash_write_1sector" 10 18 ""
f G "mode_flash_write_1sector" 10 18 "void()" `891 
F N "mode_flash_func2" 10 20 ""
f G "mode_flash_func2" 10 20 "void()" `892 
F N "mode_flash_read" 10 22 ""
f G "mode_flash_read" 10 22 "void()" `893 
F N "mode_flash_read_address" 10 24 ""
f G "mode_flash_read_address" 10 24 "void()" `894  "IV command"
F N "mode_iv_measure" 10 28 ""
f G "mode_iv_measure" 10 28 "void()" `895 
F N "mode_iv_measure_voltage" 10 30 ""
f G "mode_iv_measure_voltage" 10 30 "void()" `896  "Development command"
F N "mode_dev_vol" 10 36 ""
f G "mode_dev_vol" 10 36 "void()" `897 
F N "mode_dev_cur" 10 38 ""
f G "mode_dev_cur" 10 38 "void()" `898 
F N "mode_dev_temp" 10 40 ""
f G "mode_dev_temp" 10 40 "void()" `899 
F N "mode_dev_pd" 10 42 ""
f G "mode_dev_pd" 10 42 "void()" `900 
F N "mode_dev_cigs" 10 44 ""
f G "mode_dev_cigs" 10 44 "void()" `901 
F N "mode_dev_time" 10 46 ""
f G "mode_dev_time" 10 46 "void()" `902 
F N "mode_dev_sweep" 10 48 ""
f G "mode_dev_sweep" 10 48 "void()" `903  "______________CMD ID________________"
D G "ID_SWEEP" 10 51 "0x01"
D G "ID_FLASH_ERASE_ALL" 10 54 "0xA0"
D G "ID_FLASH_ERASE_1SECTOR" 10 55 "0xA1"
D G "ID_FLASH_COPY_1SECTOR" 10 56 "0xA2"
D G "ID_FLASH_WRITE_1SECTOR" 10 57 "0xA3"
D G "ID_FLASH_FUNC2" 10 58 "0xA4"
D G "ID_FLASH_READ" 10 59 "0xA5"
D G "ID_FLASH_READ_ADDRESS" 10 60 "0xA6"
D G "ID_IV_MEASURE" 10 63 "0xB0"
D G "ID_IV_MEASURE_VOLTAGE" 10 64 "0xB1"
D G "ID_DEV_VOL" 10 67 "0xC0"
D G "ID_DEV_CUR" 10 68 "0xC1"
D G "ID_DEV_TEMP" 10 69 "0xC1"
D G "ID_DEV_PD" 10 70 "0xC2"
D G "ID_DEV_CIGS" 10 71 "0xC3"
D G "ID_DEV_TIME" 10 72 "0xC4"
D G "ID_DEV_SWEEP" 10 73 "0xC5"
D G "MMJ_CIGS_PIC_FUNC_H" 12 2 ""
D G "DATA_BUFFER_SIZE" 12 22 "150"
D G "HEADER_SIZE" 12 23 "12"
V G "data_buffer" 12 24 "int16[300]" `904 
V G "cigs_data" 12 25 "int8[300]" `905 
V G "cigs_data_header" 12 26 "int8[12]" `906 
V G "measured_time" 12 27 "int32" `907 
V G "measured_pd_start" 12 28 "int16" `908 
V G "measured_pd_end" 12 29 "int16" `909 
V G "measured_temp_top" 12 30 "int16" `910 
V G "measured_temp_bot" 12 31 "int16" `911 
V G "packet_data" 12 33 "int8[64]" `912 
F N "sweep" 12 36 ""
V L "parameter" 12 36 "*int8" `914 
f G "sweep" 12 36 "void(*int8 parameter)" `913 
F N "convert_cigs_data" 12 38 ""
V L "measurement_step" 12 38 "int8" `917 
f G "convert_cigs_data" 12 38 "void(int8 measurement_step)" `916 
F N "convert_header_data" 12 39 ""
f G "convert_header_data" 12 39 "void()" `918  "MMJ_CIGS_PIC_CONFIG_H"
C L "convert_header_data" 2 46 1 "FUNCTION"
C L "convert_header_data" 13 2 1 "FUNCTION"
F N "initialize_pic" 13 4 ""
F G "initialize_pic" 13 5 "void()" `919 
F N "initialize_sweep" 13 10 ""
F G "initialize_sweep" 13 11 "void()" `920  "setup ADC"
C L "initialize_sweep" 13 2 1 "FUNCTION"
C L "initialize_sweep" 13 2 1 "FUNCTION"
C L "initialize_sweep" 13 2 1 "FUNCTION"
F N "sweep" 13 24 ""
V L "parameter" 13 24 "int8" `923 
F G "sweep" 13 25 "void(int8 parameter)" `922 
V L "measurement_step" 13 28 "int8" `925 
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 2 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 2 "FUNCTION"
C L "sweep" 13 2 2 "FUNCTION"
V L "count" 13 49 "int16" `935 
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 2 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
C L "sweep" 13 2 1 "FUNCTION"
F N "convert_cigs_data" 13 75 ""
V L "measurement_step" 13 75 "int8" `938 
F G "convert_cigs_data" 13 76 "void(int8 measurement_step)" `916 
C L "convert_cigs_data" 13 2 2 "FUNCTION"
V L "i" 13 80 "int8" `938 
C L "convert_cigs_data" 13 2 3 "FUNCTION"
F N "convert_header_data" 13 100 ""
F G "convert_header_data" 13 101 "void()" `918  "Save CIGS data header"
C L "convert_header_data" 13 2 1 "FUNCTION"
C L "convert_header_data" 13 2 2 "FUNCTION"
C L "convert_header_data" 13 2 1 "FUNCTION"
C L "convert_header_data" 13 2 1 "FUNCTION"
C L "convert_header_data" 13 2 1 "FUNCTION"
C L "convert_header_data" 13 2 1 "FUNCTION"
D G "SMF_QUEUE_H" 14 2 ""
T G "SmfDataStruct" 14 10 "{int32 src,int32 dest,int32 size}" `953 
D G "SMF_DATA_SIZE" 14 12 "16"
T G "SmfQueueStruct" 14 17 "{SmfDataStruct[16] smf_data,int8 smf_data_head,int8 smf_data_tail}" `958  "_____________________ values _________________"
V G "smf_queue" 14 21 "SmfQueueStruct" `959 
C L "enqueue_smf_data" 14 4 1 "FUNCTION"
F N "enqueue_smf_data" 14 26 ""
V L "data" 14 26 " *" `961 
f G "enqueue_smf_data" 14 26 "void( * data)" `960 
F N "dequeue_smf_data" 14 28 ""
f G "dequeue_smf_data" 14 28 " *()" `962 
F N "is_empty_smf_data" 14 30 ""
f G "is_empty_smf_data" 14 30 "int8()" `963 
F N "enqueue_smf_data" 15 1 ""
V L "data" 15 1 " *" `965 
F G "enqueue_smf_data" 15 2 "void( * data)" `960 
V L "next_tail" 15 3 "int8" `964 
F N "dequeue_smf_data" 15 18 ""
F G "dequeue_smf_data" 15 19 " *()" `962 
V L "current_head" 15 27 "int8" `967 
F N "is_empty_smf_data" 15 33 ""
F G "is_empty_smf_data" 15 34 "int8()" `963 
D G "FLASH_H" 16 2 ""
D G "DEBUG" 16 9 ""
D G "DEBUG_PORT" 16 12 "pc"
D G "FLASH_STREAM0" 16 18 "MIS_FM_STREAM" "<- Align the names to `config.h` Stream name"
D G "FLASH_STREAM1" 16 19 "SMF_STREAM"
D G "FLASH_STREAM2" 16 20 "SMF_STREAM" "dont use"
D G "FLASH_STREAM3" 16 21 "SMF_STREAM" "dont use"
E G "SPI_0" 16 24 "0" `969 
E G "SPI_1" 16 25 "1" `970 
E G "SPI_2" 16 26 "2" `971 
E G "SPI_3" 16 27 "3" `972 
T G "SpiStreamId" 16 27 "spi_stream" `973  "define Model name////////////////////////////////"
D G "MT25QL128ABA" 16 30 "0x00" "Mission Flash"
D G "MT25QL01GBBB" 16 31 "0x01" "SMF,CF"
T G "Flash" 16 40 "{SpiStreamId spi_stream_id,int8 flash_model,int16 cs_pin}" `978  "values    //////////////////////////////////////"
V G "mis_fm" 16 46 "Flash" `979 
V G "smf" 16 47 "Flash" `980 
D G "CMD_READ_ID" 16 53 "0x9F"
D G "CMD_READ_STATUS_REGISTER" 16 54 "0x05"
D G "CMD_READ" 16 55 "0x03" "for MT25QL128ABA"
D G "CMD_4BYTE_READ" 16 56 "0x13" "for MT25QL01GBBB"
D G "CMD_WRITE_ENABLE" 16 57 "0x06"
D G "CMD_PAGE_PROGRAM" 16 58 "0x02" "for MT25QL128ABA"
D G "CMD_4BYTE_PAGE_PROGRAM" 16 59 "0x12" "for MT25QL01GBBB"
D G "CMD_SUBSECTOR_4KB_ERASE" 16 60 "0x20" "for MT25QL128ABA"
D G "CMD_4BYTE_SUBSECTOR_4KB_ERASE" 16 61 "0x21" "for MT25QL01GBBB"
D G "CMD_SUBSECTOR_32KB_ERASE" 16 62 "0x52" "for MT25QL128ABA"
D G "CMD_4BYTE_SUBSECTOR_32KB_ERASE" 16 63 "0x5C" "for MT25QL01GBBB"
D G "CMD_SECTOR_ERASE" 16 64 "0xD8" "for MT25QL128ABA"
D G "CMD_4BYTE_SECTOR_ERASE" 16 65 "0xDC" "for MT25QL01GBBB"
C L "flash_setting" 16 4 2 "FUNCTION"
F N "flash_setting" 16 71 ""
V L "flash_stream" 16 71 "Flash" `982 
f G "flash_setting" 16 71 "void(Flash flash_stream)" `981  "bit[7:2]status register control bit,bit[1]write enable bit T:ennable F:disable,bit[0]write in progress bit T:busy F:ready"
F N "status_register" 16 74 ""
V L "flash_stream" 16 74 "Flash" `984 
f G "status_register" 16 74 "int8(Flash flash_stream)" `983  "T:Flash id read successfully(connect OK),F:Flash id read failed"
F N "read_id" 16 77 ""
V L "flash_stream" 16 77 "Flash" `986 
f G "read_id" 16 77 "int8(Flash flash_stream)" `985  "64kByte erase"
F N "sector_erase" 16 80 ""
V L "flash_stream" 16 80 "Flash" `988 
V L "sector_address" 16 80 "int32" `989 
f G "sector_erase" 16 80 "void(Flash flash_stream,int32 sector_address)" `987  "32kByte erase"
F N "subsector_32kByte_erase" 16 83 ""
V L "flash_stream" 16 83 "Flash" `991 
V L "subsector_address" 16 83 "int32" `992 
f G "subsector_32kByte_erase" 16 83 "void(Flash flash_stream,int32 subsector_address)" `990  "4kByte erase"
F N "subsector_4kByte_erase" 16 86 ""
V L "flash_stream" 16 86 "Flash" `994 
V L "subsector_address" 16 86 "int32" `995 
f G "subsector_4kByte_erase" 16 86 "void(Flash flash_stream,int32 subsector_address)" `993  "read 1 Byte data"
F N "read_data_byte" 16 89 ""
V L "flash_stream" 16 89 "Flash" `997 
V L "read_address" 16 89 "int32" `998 
f G "read_data_byte" 16 89 "int8(Flash flash_stream,int32 read_address)" `996  "read multi Bytes data(max 128 MByte) and store to "read_data""
F N "read_data_bytes" 16 92 ""
V L "flash_stream" 16 92 "Flash" `1000 
V L "read_start_address" 16 92 "int32" `1001 
V L "read_data" 16 92 "*int8" `1002 
V L "read_amount" 16 92 "int32" `1003 
f G "read_data_bytes" 16 92 "void(Flash flash_stream,int32 read_start_address,*int8 read_data,int32 read_amount)" `999  "write 1 Byte data to flash"
F N "write_data_byte" 16 95 ""
V L "flash_stream" 16 95 "Flash" `1005 
V L "write_address" 16 95 "int32" `1006 
V L "write_data" 16 95 "int8" `1007 
f G "write_data_byte" 16 95 "void(Flash flash_stream,int32 write_address,int8 write_data)" `1004  "write multi Bytes data(max256 Byte) in "write_data" to flash"
F N "write_data_bytes" 16 98 ""
V L "flash_stream" 16 98 "Flash" `1009 
V L "write_start_address" 16 98 "int32" `1010 
V L "write_data" 16 98 "*int8" `1011 
V L "write_amount" 16 98 "int16" `1012 
f G "write_data_bytes" 16 98 "void(Flash flash_stream,int32 write_start_address,*int8 write_data,int16 write_amount)" `1008  "end of GDNS_226_FlashOperation.h///////////////////////////"
C L "write_data_bytes" 17 2 5 "FUNCTION"
F N "spi_xfer_select_stream" 17 8 ""
V L "flash_stream" 17 8 "Flash" `1014 
V L "write_data" 17 8 "*int8" `1015 
V L "write_amount" 17 8 "int16" `1016 
F G "spi_xfer_select_stream" 17 8 "void(Flash flash_stream,*int8 write_data,int16 write_amount)" `1013 
V L "spi_xfer_num" 17 11 "int16" `1017 
V L "spi_xfer_num" 17 16 "int16" `1018 
V L "spi_xfer_num" 17 21 "int16" `1019 
V L "spi_xfer_num" 17 26 "int16" `1020 
C L "spi_xfer_and_read_select_stream" 17 2 1 "FUNCTION"
F N "spi_xfer_and_read_select_stream" 17 37 ""
V L "flash_stream" 17 37 "Flash" `1022 
V L "write_data" 17 37 "*int8" `1023 
V L "write_amount" 17 37 "int16" `1024 
V L "read_data" 17 37 "*int8" `1025 
V L "read_amount" 17 37 "int32" `1026 
F G "spi_xfer_and_read_select_stream" 17 37 "void(Flash flash_stream,*int8 write_data,int16 write_amount,*int8 read_data,int32 read_amount)" `1021 
V L "spi_xfer_num" 17 40 "int16" `1027 
V L "spi_rcv_num" 17 42 "int32" `1028 
V L "spi_xfer_num" 17 47 "int16" `1029 
V L "spi_rcv_num" 17 49 "int32" `1030 
V L "spi_xfer_num" 17 54 "int16" `1031 
V L "spi_rcv_num" 17 56 "int32" `1032 
V L "spi_xfer_num" 17 61 "int16" `1033 
V L "spi_rcv_num" 17 63 "int32" `1034 
C L "spi_xfer_two_datas_select_stream" 17 2 1 "FUNCTION"
F N "spi_xfer_two_datas_select_stream" 17 74 ""
V L "flash_stream" 17 74 "Flash" `1036 
V L "cmd_data" 17 74 "*int8" `1037 
V L "cmd_amount" 17 74 "int8" `1038 
V L "write_data" 17 74 "*int8" `1039 
V L "write_amount" 17 74 "int16" `1040 
F G "spi_xfer_two_datas_select_stream" 17 74 "void(Flash flash_stream,*int8 cmd_data,int8 cmd_amount,*int8 write_data,int16 write_amount)" `1035 
V L "spi_xfer_num" 17 77 "int8" `1041 
V L "spi_xfer_num" 17 79 "int16" `1042 
V L "spi_xfer_num" 17 84 "int8" `1043 
V L "spi_xfer_num" 17 86 "int16" `1044 
V L "spi_xfer_num" 17 91 "int8" `1045 
V L "spi_xfer_num" 17 93 "int16" `1046 
V L "spi_xfer_num" 17 98 "int8" `1047 
V L "spi_xfer_num" 17 100 "int16" `1048 
F N "flash_setting" 17 114 ""
V L "flash_stream" 17 114 "Flash" `1050 
F G "flash_setting" 17 114 "void(Flash flash_stream)" `981 
F N "status_register" 17 118 ""
V L "flash_stream" 17 118 "Flash" `1054 
F G "status_register" 17 118 "int8(Flash flash_stream)" `983 
V L "flash_cmd" 17 119 "int8" `1053 
V L "status_reg" 17 120 "int8" `1054 
C L "status_register" 17 2 1 "FUNCTION"
C L "status_register" 17 2 1 "FUNCTION"
C L "status_register" 17 2 1 "FUNCTION"
C L "read_id" 17 2 1 "FUNCTION"
F N "read_id" 17 133 ""
V L "flash_stream" 17 133 "Flash" `1057 
F G "read_id" 17 133 "int8(Flash flash_stream)" `985 
V L "flash_cmd" 17 134 "int8" `1056 
V L "chip_id" 17 135 "int8[20]" `1057 
V L "print_counter" 17 141 "int8" `1059 
C L "read_id" 17 2 1 "FUNCTION"
F N "sector_erase" 17 160 ""
V L "flash_stream" 17 160 "Flash" `988 
V L "sector_address" 17 160 "int32" `1066 
F G "sector_erase" 17 160 "void(Flash flash_stream,int32 sector_address)" `987  "!   #ifdef DEBUG"
C L "sector_erase" 17 2 2 "FUNCTION"
V L "write_enable_cmd" 17 165 "int8" `1064 
V L "flash_cmd" 17 166 "int8[4]" `1065  "!      #ifdef DEBUG"
C L "sector_erase" 17 2 2 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 2 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
V L "write_enable_cmd" 17 188 "int8" `1066 
V L "flash_cmd" 17 189 "int8[5]" `1067  "!      #ifdef DEBUG"
C L "sector_erase" 17 2 2 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 2 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
C L "sector_erase" 17 2 1 "FUNCTION"
V L "timeout_counter" 17 219 "int8" `1069 
C L "sector_erase" 17 2 1 "FUNCTION"
F N "subsector_32kByte_erase" 17 240 ""
V L "flash_stream" 17 240 "Flash" `991 
V L "subsector_address" 17 240 "int32" `1074 
F G "subsector_32kByte_erase" 17 240 "void(Flash flash_stream,int32 subsector_address)" `990 
V L "write_enable_cmd" 17 242 "int8" `1072 
V L "flash_cmd" 17 243 "int8[4]" `1073 
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 2 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
V L "write_enable_cmd" 17 263 "int8" `1074 
V L "flash_cmd" 17 264 "int8[5]" `1075 
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 2 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
V L "timeout_counter" 17 292 "int8" `1077 
C L "subsector_32kByte_erase" 17 2 1 "FUNCTION"
F N "subsector_4kByte_erase" 17 313 ""
V L "flash_stream" 17 313 "Flash" `994 
V L "subsector_address" 17 313 "int32" `1082 
F G "subsector_4kByte_erase" 17 313 "void(Flash flash_stream,int32 subsector_address)" `993 
V L "write_enable_cmd" 17 315 "int8" `1080 
V L "flash_cmd" 17 316 "int8[4]" `1081 
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 2 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
V L "write_enable_cmd" 17 336 "int8" `1082 
V L "flash_cmd" 17 337 "int8[5]" `1083 
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 2 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
V L "timeout_counter" 17 365 "int8" `1085 
C L "subsector_4kByte_erase" 17 2 1 "FUNCTION"
F N "read_data_byte" 17 386 ""
V L "flash_stream" 17 386 "Flash" `997 
V L "read_address" 17 386 "int32" `1090 
F G "read_data_byte" 17 386 "int8(Flash flash_stream,int32 read_address)" `996 
V L "read_data" 17 387 "int8" `1088 
V L "flash_cmd" 17 389 "int8[4]" `1089 
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
V L "flash_cmd" 17 404 "int8[5]" `1090 
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
C L "read_data_byte" 17 2 1 "FUNCTION"
F N "read_data_bytes" 17 422 ""
V L "flash_stream" 17 422 "Flash" `1000 
V L "read_start_address" 17 422 "int32" `1001 
V L "read_data" 17 422 "*int8" `1002 
V L "read_amount" 17 422 "int32" `1095 
F G "read_data_bytes" 17 423 "void(Flash flash_stream,int32 read_start_address,*int8 read_data,int32 read_amount)" `999 
V L "flash_cmd" 17 425 "int8[4]" `1091 
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
V L "flash_cmd" 17 440 "int8[5]" `1092 
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
C L "read_data_bytes" 17 2 1 "FUNCTION"
F N "write_data_byte" 17 458 ""
V L "flash_stream" 17 458 "Flash" `1005 
V L "write_address" 17 458 "int32" `1006 
V L "write_data" 17 458 "int8" `1096 
F G "write_data_byte" 17 459 "void(Flash flash_stream,int32 write_address,int8 write_data)" `1004 
V L "write_enable_cmd" 17 461 "int8" `1093 
V L "flash_cmd" 17 462 "int8[5]" `1094 
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
V L "write_enable_cmd" 17 484 "int8" `1095 
V L "flash_cmd" 17 485 "int8[6]" `1096 
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
C L "write_data_byte" 17 2 1 "FUNCTION"
V L "timeout_counter" 17 508 "int8" `1097 
C L "write_data_byte" 17 2 1 "FUNCTION"
F N "write_data_bytes" 17 529 ""
V L "flash_stream" 17 529 "Flash" `1009 
V L "write_start_address" 17 529 "int32" `1010 
V L "write_data" 17 529 "*int8" `1011 
V L "write_amount" 17 529 "int16" `1104 
F G "write_data_bytes" 17 529 "void(Flash flash_stream,int32 write_start_address,*int8 write_data,int16 write_amount)" `1008 
V L "write_enable_cmd" 17 531 "int8" `1100 
V L "flash_cmd" 17 532 "int8[4]" `1101 
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 2 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
V L "write_enable_cmd" 17 553 "int8" `1102 
V L "flash_cmd" 17 554 "int8[5]" `1103 
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 2 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
C L "write_data_bytes" 17 2 1 "FUNCTION"
V L "timeout_counter" 17 576 "int8" `1104 
C L "write_data_bytes" 17 2 1 "FUNCTION"
D G "MISSION_TOOLS_H" 18 2 ""
D G "COMMUNICATION_DRIVER_H" 19 2 ""
D G "COMMUNICATION_H" 20 2 ""
D G "MAIN_PIC" 20 6 "0x00"
D G "COM_PIC" 20 7 "0x01"
D G "RESET_PIC" 20 8 "0x02"
D G "FAB_PIC" 20 9 "0x03"
D G "BOSS_PIC" 20 10 "0x04"
D G "APRS_PIC" 20 11 "0x05"
D G "CAM_MCU" 20 12 "0x06"
D G "CHO_MCU" 20 13 "0x07"
D G "NAKA_PIC" 20 14 "0x08"
D G "SATO_PIC" 20 15 "0x09"
D G "BHU_MCU" 20 16 "0x0A"
D G "CIGS_PIC" 20 17 "0x0B"
D G "SELF_DEVICE_ID" 20 19 "CIGS_PIC" "<- change to your device name"
D G "SFD" 20 24 "0xAA"
T G "FrameID" 20 32 "{int8 id,int8 length}" `1110 
D G "CONTENT_MAX" 20 34 "32"
T G "command" 20 40 "{int8 frame_id,int8[32] content,int8 size,int1 is_exist}" `1116 
D G "FRAME_CONTENT_H" 21 2 ""
D G "UPLINK_COMMAND" 21 7 "0x00"
D G "STATUS_CHECK" 21 8 "0x01"
D G "IS_SMF_AVAILABLE" 21 9 "0x02"
D G "UPLINK_COMMAND_LENGTH" 21 11 "9"
D G "STATUS_CHECK_LENGTH" 21 12 "0"
D G "IS_SMF_AVAILABLE_LENGTH" 21 13 "1"
V G "frame_ids" 21 15 "FrameID[1]" `1117 
E G "MIS_MCU_STATUS" 21 26 "1" `1119 
E G "ack" 21 27 "15" `1120 
T G "TransmitFrameId" 21 27 "" `1121  "______ Receive _______"
F N "make_receive_command" 20 46 ""
V L "receive_signal" 20 46 "*int8" `1123 
V L "receive_signal_size" 20 46 "int8" `1124 
f G "make_receive_command" 20 46 "command(*int8 receive_signal,int8 receive_signal_size)" `1122 
F N "trim_receive_signal_header" 20 48 ""
V L "receive_signal" 20 48 "*int8" `1127 
V L "receive_signal_size" 20 48 "int8" `1128 
f G "trim_receive_signal_header" 20 48 "int8(*int8 receive_signal,int8 receive_signal_size)" `1126 
F N "get_content_size" 20 50 ""
V L "frame_id" 20 50 "int8" `1131 
f G "get_content_size" 20 50 "int8(int8 frame_id)" `1130 
F N "check_crc" 20 52 ""
V L "frame" 20 52 "*int8" `1133 
V L "receive_frame_size" 20 52 "int8" `1134 
f G "check_crc" 20 52 "int8(*int8 frame,int8 receive_frame_size)" `1132 
F N "check_device_id" 20 54 ""
V L "device_id" 20 54 "int8" `1137 
f G "check_device_id" 20 54 "int8(int8 device_id)" `1136  "______ Transmit _______"
F N "transmit_command" 20 59 ""
V L "frame_id" 20 59 "TransmitFrameId" `1139 
V L "content" 20 59 "*int8" `1140 
V L "size" 20 59 "int8" `1141 
f G "transmit_command" 20 59 "void(TransmitFrameId frame_id,*int8 content,int8 size)" `1138 
F N "transmit" 20 61 ""
V L "data" 20 61 "*int8" `1144 
V L "data_size" 20 61 "int8" `1145 
f G "transmit" 20 61 "void(*int8 data,int8 data_size)" `1143  "______ Common _________"
F N "calc_crc8" 20 65 ""
V L "frame" 20 65 "*int8" `1148 
V L "payload_size" 20 65 "int8" `1149 
f G "calc_crc8" 20 65 "int8(*int8 frame,int8 payload_size)" `1147 
F N "make_receive_command" 22 1 ""
V L "receive_signal" 22 1 "*int8" `1123 
V L "receive_signal_size" 22 1 "int8" `1153 
F G "make_receive_command" 22 2 "command(*int8 receive_signal,int8 receive_signal_size)" `1122 
V L "command" 22 3 "command" `1151 
V L "i" 22 5 "int8" `1153 
V L "frame_start_position" 22 9 "int8" `1156 
V L "frame" 22 13 "*int8" `1157 
V L "frame_id" 22 15 "int8" `1158 
V L "content_size" 22 16 "int8" `1159 
V L "receive_frame_size" 22 20 "int8" `1160 
C L "make_receive_command" 22 29 1 "FUNCTION"
C L "make_receive_command" 22 29 1 "FUNCTION"
C L "make_receive_command" 22 29 1 "FUNCTION"
F N "trim_receive_signal_header" 22 38 ""
V L "receive_signal" 22 38 "*int8" `1127 
V L "receive_signal_size" 22 38 "int8" `1164 
F G "trim_receive_signal_header" 22 39 "int8(*int8 receive_signal,int8 receive_signal_size)" `1126 
V L "i" 22 40 "int8" `1162 
C L "trim_receive_signal_header" 22 29 1 "FUNCTION"
F N "get_content_size" 22 57 ""
V L "frame_id" 22 57 "int8" `1166 
F G "get_content_size" 22 58 "int8(int8 frame_id)" `1130 
V L "i" 22 59 "int8" `1165 
F N "check_crc" 22 67 ""
V L "frame" 22 67 "*int8" `1133 
V L "receive_frame_size" 22 67 "int8" `1169 
F G "check_crc" 22 68 "int8(*int8 frame,int8 receive_frame_size)" `1132 
V L "received_crc" 22 69 "int8" `1167 
C L "check_crc" 22 29 1 "FUNCTION"
V L "collect_crc" 22 70 "int8" `1168 
F N "check_device_id" 22 82 ""
V L "device_id" 22 82 "int8" `1173 
F G "check_device_id" 22 83 "int8(int8 device_id)" `1136 
C L "transmit_command" 22 29 1 "FUNCTION"
F N "transmit_command" 22 98 ""
V L "frame_id" 22 98 "TransmitFrameId" `1139 
V L "content" 22 98 "*int8" `1140 
V L "size" 22 98 "int8" `1178 
F G "transmit_command" 22 99 "void(TransmitFrameId frame_id,*int8 content,int8 size)" `1138 
V L "data" 22 100 "int8[16]" `1175 
V L "payload_size" 22 104 "int8" `1176 
C L "transmit_command" 22 29 1 "FUNCTION"
C L "transmit_command" 22 29 1 "FUNCTION"
V L "data_size" 22 106 "int8" `1177 
C L "transmit_command" 22 29 1 "FUNCTION"
F N "transmit" 22 111 ""
V L "data" 22 111 "*int8" `1144 
V L "data_size" 22 111 "int8" `1180 
F G "transmit" 22 112 "void(*int8 data,int8 data_size)" `1143 
V L "i" 22 113 "int8" `1178 
V L "i" 22 117 "int8" `1180 
F N "calc_crc8" 22 125 ""
V L "frame" 22 125 "*int8" `1148 
V L "payload_size" 22 125 "int8" `1185 
F G "calc_crc8" 22 126 "int8(*int8 frame,int8 payload_size)" `1147 
V L "crc" 22 127 "int8" `1183 
V L "i" 22 127 "int8" `1184 
C L "make_command" 20 71 1 "FUNCTION"
C L "make_command" 19 7 1 "FUNCTION"
F N "make_command" 19 8 ""
V L "receive_signal" 19 8 "*int8" `1186 
V L "receive_signal_size" 19 8 "int8" `1187 
f G "make_command" 19 8 "command(*int8 receive_signal,int8 receive_signal_size)" `1185 
F N "transmit_ack" 19 10 ""
f G "transmit_ack" 19 10 "void()" `1189 
F N "transmit_status" 19 12 ""
f G "transmit_status" 19 12 "void()" `1190 
F N "req_use_smf" 19 14 ""
f G "req_use_smf" 19 14 "int8()" `1191 
F N "make_command" 23 1 ""
V L "receive_signal" 23 1 "*int8" `1186 
V L "receive_signal_size" 23 1 "int8" `1194 
F G "make_command" 23 2 "command(*int8 receive_signal,int8 receive_signal_size)" `1185 
V L "command" 23 3 "command" `1192 
C L "make_command" 23 4 4 "FUNCTION"
V L "i" 23 8 "int8" `1193 
C L "make_command" 23 4 3 "FUNCTION"
F N "transmit_ack" 23 15 ""
F G "transmit_ack" 23 16 "void()" `1189 
F N "transmit_status" 23 20 ""
F G "transmit_status" 23 21 "void()" `1190 
D G "EXECUTED_MISSION_SIZE" 18 9 "8"
T G "ExecutedMission" 18 17 "{int8[8] executed_mission,int8 executed_mission_count}" `1197  "________________ fuctions ____________"
C L "get_executed_mission" 18 7 1 "FUNCTION"
F N "get_executed_mission" 18 23 ""
f G "get_executed_mission" 18 23 "ExecutedMission()" `1198 
F N "is_executed_mission" 18 25 ""
V L "command_id" 18 25 "int8" `1200 
f G "is_executed_mission" 18 25 "int8(int8 command_id)" `1199 
F N "add_executed_mission" 18 27 ""
V L "command_id" 18 27 "int8" `1202 
f G "add_executed_mission" 18 27 "void(int8 command_id)" `1201  "Use in missions you want to execute consecutively"
F N "executed_mission_pop" 18 30 ""
f G "executed_mission_pop" 18 30 "void()" `1203  "Check and reply to messages received from BOSS PIC"
F N "check_and_respond_to_boss" 18 35 ""
f G "check_and_respond_to_boss" 18 35 "void()" `1204  "MIS MCU will be up and running duration_second seconds after mission completion"
F N "continue_mis_mcu" 18 38 ""
V L "duration_second" 18 38 "int16" `1206 
f G "continue_mis_mcu" 18 38 "void(int16 duration_second)" `1205  "Request using SMF to BOSS PIC"
C L "continue_mis_mcu" 18 7 1 "FUNCTION"
F N "req_use_smf" 18 44 ""
f G "req_use_smf" 18 44 "int8()" `1191  "Call after using SMF"
F N "finished_use_smf" 18 47 ""
f G "finished_use_smf" 18 47 "void()" `1207 
F N "get_executed_mission" 24 1 ""
F G "get_executed_mission" 24 2 "ExecutedMission()" `1198 
V L "executed_mission" 24 3 "ExecutedMission" `1208 
F N "is_executed_mission" 24 7 ""
V L "command_id" 24 7 "int8" `1210 
F G "is_executed_mission" 24 8 "int8(int8 command_id)" `1199 
V L "executed_mission" 24 9 "ExecutedMission" `1209 
V L "i" 24 11 "int8" `1210 
F N "add_executed_mission" 24 18 ""
V L "command_id" 24 18 "int8" `1212 
F G "add_executed_mission" 24 19 "void(int8 command_id)" `1201 
V L "executed_mission" 24 20 "ExecutedMission" `1211 
F N "req_use_smf" 24 29 ""
F G "req_use_smf" 24 30 "int8()" `1191 
V L "i" 24 37 "int16" `1214 
C L "req_use_smf" 24 37 1 "FUNCTION"
V L "command" 24 41 "command" `1215 
V L "i" 24 56 "int16" `1217 
C L "req_use_smf" 24 37 1 "FUNCTION"
V L "command" 24 60 "command" `1218 
F N "finished_use_smf" 24 95 ""
F G "finished_use_smf" 24 96 "void()" `1207 
F N "executed_mission_pop" 24 100 ""
F G "executed_mission_pop" 24 101 "void()" `1203 
V L "executed_mission" 24 102 "ExecutedMission" `1225 
F N "continue_mis_mcu" 24 106 ""
V L "duration_second" 24 106 "int16" `1227 
F G "continue_mis_mcu" 24 107 "void(int16 duration_second)" `1205 
F N "check_and_respond_to_boss" 24 111 ""
F G "check_and_respond_to_boss" 24 112 "void()" `1204 
C L "mode_measure" 18 53 1 "FUNCTION"
C L "mode_measure" 11 6 1 "FUNCTION"
F N "mode_measure" 11 8 ""
V L "parameter" 11 8 "*int8" `1227 
F G "mode_measure" 11 9 "void(*int8 parameter)" `885 
V L "sweep_step" 11 11 "int8" `1227 
C L "mode_measure" 11 6 1 "FUNCTION"
C L "mode_measure" 11 6 1 "FUNCTION"
F N "mode_measure_voltage" 11 20 ""
F G "mode_measure_voltage" 11 21 "void()" `1228 
V L "cigs_value" 11 25 "int16" `1230 
C L "mode_measure_voltage" 11 6 2 "FUNCTION"
C L "mode_measure_voltage" 11 6 1 "FUNCTION"
F N "mode_copy_SMF" 11 34 ""
F G "mode_copy_SMF" 11 35 "void()" `1231  "unsigned int8 smf_data[SMF_DATA_SIZE] = {0x00};"
C L "mode_copy_SMF" 11 6 8 "FUNCTION"
C L "mode_test_temp" 11 6 1 "FUNCTION"
F N "mode_test_temp" 11 54 ""
F G "mode_test_temp" 11 55 "void()" `1232 
V L "temp_top_value" 11 59 "int16" `1233 
C L "mode_test_temp" 11 6 1 "FUNCTION"
V L "temp_bot_value" 11 61 "int16" `1234 
C L "mode_test_temp" 11 6 1 "FUNCTION"
F N "mode_test_PD" 11 69 ""
F G "mode_test_PD" 11 70 "void()" `1237 
V L "pd_value" 11 73 "int16" `1238 
C L "mode_test_PD" 11 6 1 "FUNCTION"
F N "mode_test_CIGS" 11 82 ""
F G "mode_test_CIGS" 11 83 "void()" `1240 
V L "cigs_value" 11 84 "int16" `1241 
C L "mode_test_CIGS" 11 6 1 "FUNCTION"
F N "mode_test_current" 11 91 ""
F G "mode_test_current" 11 92 "void()" `1243 
V L "current_value" 11 93 "int16" `1244 
C L "mode_test_current" 11 6 1 "FUNCTION"
F N "mode_test_voltage" 11 100 ""
F G "mode_test_voltage" 11 101 "void()" `1246 
V L "voltage_value" 11 102 "int16" `1247 
C L "mode_test_voltage" 11 6 1 "FUNCTION"
C L "mode_flash_erase_all" 11 6 1 "FUNCTION"
F N "mode_flash_erase_all" 11 110 ""
F G "mode_flash_erase_all" 11 111 "void()" `888 
F N "mode_flash_erase_1sector" 11 119 ""
F G "mode_flash_erase_1sector" 11 120 "void()" `889 
F N "mode_flash_copy_1sector" 11 128 ""
F G "mode_flash_copy_1sector" 11 129 "void()" `890 
D G "DATA_COPY_H" 25 2 ""
C L "copy_data" 14 37 1 "FUNCTION"
C L "copy_data" 16 105 1 "FUNCTION"
F N "copy_data" 25 7 ""
f G "copy_data" 25 7 "void()" `1255  "------------------End of File------------------"
C L "copy_data" 28 105 1 "FUNCTION"
F N "copy_data" 26 5 ""
F G "copy_data" 26 6 "void()" `1255 
V L "smf_data" 26 9 " *" `1256 
D G "MMJ_CIGS_PIC_EXCUTE_MISSION_H" 29 2 ""
D G "PARAMETER_LENGTH" 29 5 "8"
F N "execute_command" 29 8 ""
V L "command" 29 8 " *" `1267 
f G "execute_command" 29 8 "int8( * command)" `1266 
F N "handle_uplink_command" 29 9 ""
V L "command" 29 9 " *" `1269 
f G "handle_uplink_command" 29 9 "int8( * command)" `1268 
F N "handle_status_check" 29 10 ""
V L "command" 29 10 " *" `1271 
f G "handle_status_check" 29 10 "int8( * command)" `1270 
F N "handle_smf_available" 29 11 ""
V L "command" 29 11 " *" `1273 
f G "handle_smf_available" 29 11 "int8( * command)" `1272 
F N "execute_mission" 29 12 ""
V L "content" 29 12 "*int8" `1275 
f G "execute_mission" 29 12 "void(*int8 content)" `1274  "MMJ_CIGS_PIC_MODE_H"
C L "execute_mission" 31 79 1 "FUNCTION"
F N "execute_command" 30 4 ""
V L "command" 30 4 " *" `1277 
F G "execute_command" 30 5 "int8( * command)" `1266 
C L "handle_uplink_command" 30 24 1 "FUNCTION"
F N "handle_uplink_command" 30 25 ""
V L "command" 30 25 " *" `1278 
F G "handle_uplink_command" 30 26 "int8( * command)" `1268 
F N "handle_status_check" 30 50 ""
V L "command" 30 50 " *" `1280 
F G "handle_status_check" 30 51 "int8( * command)" `1270 
F N "handle_smf_available" 30 66 ""
V L "command" 30 66 " *" `1287 
F G "handle_smf_available" 30 67 "int8( * command)" `1272 
F N "execute_mission" 30 87 ""
V L "content" 30 87 "*int8" `1291 
F G "execute_mission" 30 88 "void(*int8 content)" `1274  "record to executed mission list"
V L "command_id" 30 90 "int8" `1290 
V L "parameter" 30 91 "*int8" `1291 
C L "execute_mission" 30 24 1 "FUNCTION"
C L "MAIN" 29 17 1 "FUNCTION"
C L "MAIN" 1 29 2 "FUNCTION"
F N "MAIN" 0 3 ""
F G "MAIN" 0 4 "void()" `1297 
C L "MAIN" 0 12 1 "FUNCTION"
V L "is_finished" 0 15 "int1" `1303 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
V L "command" 0 23 "command" `1305 
V L "i" 0 28 "int8" `1309 
C L "MAIN" 0 12 2 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_d" 1 0
F B "set_slow_slew_e" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_d" 1 0
F B "set_input_level_e" 1 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "set_open_drain_d" 1 0
F B "set_open_drain_e" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_opamp1" 1 0
F B "setup_opamp2" 1 0
F B "setup_opamp3" 1 0
F B "setup_comparator_1" 1 0
F B "setup_comparator_2" 1 0
F B "setup_comparator_3" 1 0
F B "setup_comparator_4" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_psmc" 8 0
F B "psmc_deadband" 3 0
F B "psmc_blanking" 5 0
F B "psmc_sync" 3 0
F B "psmc_freq_adjust" 2 0
F B "psmc_duty" 2 0
F B "psmc_modulation" 2 0
F B "psmc_shutdown" 2 4
F B "psmc_pins" 2 3
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "setup_dac2" 1 0
F B "dac_write2" 1 0
F B "setup_dac3" 1 0
F B "dac_write3" 1 0
F B "setup_dac4" 1 0
F B "dac_write4" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "spi_xfer" 0 3
F B "spi_transfer" 3 4
F B "spi_transfer_write" 2 3
F B "spi_transfer_read" 2 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
