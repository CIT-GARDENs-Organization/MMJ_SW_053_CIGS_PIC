CCS PCH C Compiler, Version 5.104, 57077               05-10-25 21:41

               Filename:   c:\Users\shoin\source\repos\MMJ_SW_053_CIGS_PIC\sato_lab\build\mmj_sato_main.lst

               ROM used:   73338 bytes (56%)
                           Largest free fragment is 57416
               RAM used:   472 (13%) at main() level
                           2936 (82%) worst case
               Stack used: 8 locations (7 in main + 1 for interrupts)
               Stack size: 31

*
00000:  NOP   
00002:  GOTO   119FC
*
00008:  NOP   
0000A:  NOP   
0000C:  NOP   
0000E:  NOP   
00010:  NOP   
00012:  NOP   
00014:  NOP   
00016:  NOP   
00018:  MOVWF  04
0001A:  MOVFF  FD8,05
0001E:  MOVFF  FE0,06
00022:  MOVLB  0
00024:  MOVFF  FE9,0C
00028:  MOVFF  FEA,07
0002C:  MOVFF  FE1,08
00030:  MOVFF  FE2,09
00034:  MOVFF  FD9,0A
00038:  MOVFF  FDA,0B
0003C:  MOVFF  FF3,12
00040:  MOVFF  FF4,13
00044:  MOVFF  FFA,14
00048:  MOVFF  FF5,15
0004C:  MOVFF  FF6,16
00050:  MOVFF  FF7,17
00054:  MOVFF  FF8,18
00058:  MOVFF  FFB,19
0005C:  MOVFF  00,0E
00060:  MOVFF  01,0F
00064:  MOVFF  02,10
00068:  MOVFF  03,11
0006C:  BTFSS  FF2.5
0006E:  GOTO   0078
00072:  BTFSC  FF2.2
00074:  GOTO   01B6
00078:  BTFSS  F9D.0
0007A:  GOTO   0084
0007E:  BTFSC  F9E.0
00080:  GOTO   023E
00084:  BTFSS  F61.5
00086:  GOTO   0090
0008A:  BTFSC  FA6.5
0008C:  GOTO   02A8
00090:  MOVFF  0E,00
00094:  MOVFF  0F,01
00098:  MOVFF  10,02
0009C:  MOVFF  11,03
000A0:  MOVFF  0C,FE9
000A4:  MOVFF  07,FEA
000A8:  BSF    07.7
000AA:  MOVFF  08,FE1
000AE:  MOVFF  09,FE2
000B2:  MOVFF  0A,FD9
000B6:  MOVFF  0B,FDA
000BA:  MOVFF  12,FF3
000BE:  MOVFF  13,FF4
000C2:  MOVFF  14,FFA
000C6:  MOVFF  15,FF5
000CA:  MOVFF  16,FF6
000CE:  MOVFF  17,FF7
000D2:  MOVFF  18,FF8
000D6:  MOVFF  19,FFB
000DA:  MOVF   04,W
000DC:  MOVFF  06,FE0
000E0:  MOVFF  05,FD8
000E4:  RETFIE 0
.................... #include "mmj_sato_main.h"  // ルート直下のヘッダー
.................... #ifndef MMJ_CIGS_MAIN_H
.................... #define MMJ_CIGS_MAIN_H
.................... 
.................... 
.................... #define SELF_DEVICE_ID SATO_PIC
.................... 
.................... 
.................... #opt 0 // 0 = no optimization
.................... 
.................... //==============================================================================
.................... // CCS C 最適化構造: ヘッダー分散 + .cファイル統合
.................... //==============================================================================
.................... 
.................... // レベル1: システム設定
.................... #include "hal/sato_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
000E6:  CLRF   FF7
000E8:  ADDLW  FA
000EA:  MOVWF  FF6
000EC:  MOVLW  00
000EE:  ADDWFC FF7,F
000F0:  MOVLW  00
000F2:  MOVWF  FF8
000F4:  TBLRD*+
000F6:  MOVF   FF5,W
000F8:  RETURN 0
000FA:  DATA 00,00
000FC:  DATA AA,06
000FE:  DATA FF,0F
00100:  DATA AA,06
00102:  DATA 00,10
00104:  DATA 00,00
00106:  DATA 00,10
00108:  DATA AA,06
0010A:  DATA FF,0F
0010C:  DATA AB,06
0010E:  DATA 00,00
00110:  DATA 14,00
00112:  DATA 00,10
00114:  DATA AB,06
00116:  DATA FF,0F
00118:  DATA B5,06
0011A:  DATA 00,00
0011C:  DATA 14,00
0011E:  DATA 00,10
00120:  DATA B5,06
00122:  DATA FF,0F
00124:  DATA BF,06
00126:  DATA 00,00
00128:  DATA 0A,00
0012A:  DATA 00,10
0012C:  DATA BF,06
0012E:  DATA FF,0F
00130:  DATA FF,06
00132:  DATA 00,00
00134:  DATA 40,00
00136:  DATA 00,10
00138:  DATA FF,06
0013A:  DATA FF,0F
0013C:  DATA 09,07
0013E:  DATA 00,00
00140:  DATA 0A,00
00142:  DATA 00,10
00144:  DATA 09,07
00146:  DATA FF,0F
00148:  DATA 49,07
0014A:  DATA 00,00
0014C:  DATA 40,00
0014E:  CLRF   FF7
00150:  ADDLW  62
00152:  MOVWF  FF6
00154:  MOVLW  01
00156:  ADDWFC FF7,F
00158:  MOVLW  00
0015A:  MOVWF  FF8
0015C:  TBLRD*+
0015E:  MOVF   FF5,W
00160:  RETURN 0
00162:  DATA 00,00
00164:  DATA 00,00
00166:  DATA FF,0F
00168:  DATA 00,00
0016A:  DATA 00,10
0016C:  DATA 00,00
0016E:  DATA 00,00
00170:  DATA 01,00
00172:  DATA FF,0F
00174:  DATA 14,00
00176:  DATA 00,00
00178:  DATA 14,00
0017A:  DATA 00,10
0017C:  DATA 14,00
0017E:  DATA FF,0F
00180:  DATA 28,00
00182:  DATA 00,00
00184:  DATA 14,00
00186:  DATA 00,10
00188:  DATA 28,00
0018A:  DATA FF,0F
0018C:  DATA 32,00
0018E:  DATA 00,00
00190:  DATA 0A,00
00192:  DATA 00,10
00194:  DATA 32,00
00196:  DATA FF,0F
00198:  DATA 72,00
0019A:  DATA 00,00
0019C:  DATA 40,00
0019E:  DATA 00,10
001A0:  DATA 72,00
001A2:  DATA FF,0F
001A4:  DATA 7C,00
001A6:  DATA 00,00
001A8:  DATA 0A,00
001AA:  DATA 00,10
001AC:  DATA 7C,00
001AE:  DATA FF,0F
001B0:  DATA BC,00
001B2:  DATA 00,00
001B4:  DATA 40,00
*
00260:  DATA 54,69
00262:  DATA 6D,65
00264:  DATA 72,20
00266:  DATA 49,6E
00268:  DATA 69,74
0026A:  DATA 69,61
0026C:  DATA 6C,69
0026E:  DATA 7A,65
00270:  DATA 0D,0A
00272:  DATA 00,00
00274:  DATA 09,43
00276:  DATA 6F,6D
00278:  DATA 70,6C
0027A:  DATA 65,74
0027C:  DATA 65,0D
0027E:  DATA 0A,00
*
002F0:  DATA 55,41
002F2:  DATA 52,54
002F4:  DATA 20,49
002F6:  DATA 6E,69
002F8:  DATA 74,69
002FA:  DATA 61,6C
002FC:  DATA 69,7A
002FE:  DATA 65,0D
00300:  DATA 0A,00
00302:  DATA 09,43
00304:  DATA 6F,6D
00306:  DATA 70,6C
00308:  DATA 65,74
0030A:  DATA 65,0D
0030C:  DATA 0A,00
0030E:  DATA 41,44
00310:  DATA 37,34
00312:  DATA 39,30
00314:  DATA 20,49
00316:  DATA 6E,69
00318:  DATA 74,69
0031A:  DATA 61,6C
0031C:  DATA 69,7A
0031E:  DATA 65,0D
00320:  DATA 0A,00
00322:  DATA 09,43
00324:  DATA 6F,6E
00326:  DATA 6E,65
00328:  DATA 63,74
0032A:  DATA 20,65
0032C:  DATA 72,72
0032E:  DATA 6F,72
00330:  DATA 21,0D
00332:  DATA 0A,00
00334:  DATA 09,43
00336:  DATA 6F,6E
00338:  DATA 6E,65
0033A:  DATA 63,74
0033C:  DATA 20,73
0033E:  DATA 75,63
00340:  DATA 63,65
00342:  DATA 73,73
00344:  DATA 66,75
00346:  DATA 6C,0D
00348:  DATA 0A,00
0034A:  DATA 09,43
0034C:  DATA 6F,6D
0034E:  DATA 70,6C
00350:  DATA 65,74
00352:  DATA 65,0D
00354:  DATA 0A,00
00356:  DATA 4D,43
00358:  DATA 50,34
0035A:  DATA 39,30
0035C:  DATA 31,20
0035E:  DATA 49,6E
00360:  DATA 69,74
00362:  DATA 69,61
00364:  DATA 6C,69
00366:  DATA 7A,65
00368:  DATA 0D,0A
0036A:  DATA 00,00
0036C:  DATA 09,5B
0036E:  DATA 44,41
00370:  DATA 43,20
00372:  DATA 50,6F
00374:  DATA 72,74
00376:  DATA 20,31
00378:  DATA 5D,20
0037A:  DATA 43,6F
0037C:  DATA 6E,6E
0037E:  DATA 65,63
00380:  DATA 74,20
00382:  DATA 65,72
00384:  DATA 72,6F
00386:  DATA 72,21
00388:  DATA 0D,0A
0038A:  DATA 00,00
0038C:  DATA 09,5B
0038E:  DATA 44,41
00390:  DATA 43,20
00392:  DATA 50,6F
00394:  DATA 72,74
00396:  DATA 20,31
00398:  DATA 5D,20
0039A:  DATA 43,6F
0039C:  DATA 6E,6E
0039E:  DATA 65,63
003A0:  DATA 74,20
003A2:  DATA 73,75
003A4:  DATA 63,63
003A6:  DATA 65,73
003A8:  DATA 73,66
003AA:  DATA 75,6C
003AC:  DATA 0D,0A
003AE:  DATA 00,00
003B0:  DATA 09,5B
003B2:  DATA 44,41
003B4:  DATA 43,20
003B6:  DATA 50,6F
003B8:  DATA 72,74
003BA:  DATA 20,32
003BC:  DATA 5D,20
003BE:  DATA 43,6F
003C0:  DATA 6E,6E
003C2:  DATA 65,63
003C4:  DATA 74,20
003C6:  DATA 65,72
003C8:  DATA 72,6F
003CA:  DATA 72,21
003CC:  DATA 0D,0A
003CE:  DATA 00,00
003D0:  DATA 09,5B
003D2:  DATA 44,41
003D4:  DATA 43,20
003D6:  DATA 50,6F
003D8:  DATA 72,74
003DA:  DATA 20,32
003DC:  DATA 5D,20
003DE:  DATA 43,6F
003E0:  DATA 6E,6E
003E2:  DATA 65,63
003E4:  DATA 74,20
003E6:  DATA 73,75
003E8:  DATA 63,63
003EA:  DATA 65,73
003EC:  DATA 73,66
003EE:  DATA 75,6C
003F0:  DATA 0D,0A
003F2:  DATA 00,00
003F4:  DATA 09,43
003F6:  DATA 6F,6D
003F8:  DATA 70,6C
003FA:  DATA 65,74
003FC:  DATA 65,0D
003FE:  DATA 0A,00
00400:  DATA 45,6E
00402:  DATA 71,75
00404:  DATA 65,75
00406:  DATA 65,20
00408:  DATA 46,6C
0040A:  DATA 61,73
0040C:  DATA 68,20
0040E:  DATA 4F,70
00410:  DATA 65,72
00412:  DATA 61,74
00414:  DATA 69,6F
00416:  DATA 6E,0D
00418:  DATA 0A,00
0041A:  DATA 46,6C
0041C:  DATA 61,73
0041E:  DATA 68,20
00420:  DATA 71,75
00422:  DATA 65,75
00424:  DATA 65,20
00426:  DATA 69,73
00428:  DATA 20,66
0042A:  DATA 75,6C
0042C:  DATA 6C,21
0042E:  DATA 21,21
00430:  DATA 0D,0A
00432:  DATA 00,00
00434:  DATA 46,6C
00436:  DATA 61,73
00438:  DATA 68,20
0043A:  DATA 71,75
0043C:  DATA 65,75
0043E:  DATA 65,20
00440:  DATA 69,73
00442:  DATA 20,65
00444:  DATA 6D,70
00446:  DATA 74,79
00448:  DATA 0D,0A
0044A:  DATA 00,00
0044C:  DATA 0D,0A
0044E:  DATA 53,74
00450:  DATA 61,72
00452:  DATA 74,20
00454:  DATA 6D,61
00456:  DATA 6B,65
00458:  DATA 5F,72
0045A:  DATA 65,63
0045C:  DATA 65,69
0045E:  DATA 76,65
00460:  DATA 5F,63
00462:  DATA 6F,6D
00464:  DATA 6D,61
00466:  DATA 6E,64
00468:  DATA 0D,0A
0046A:  DATA 00,00
0046C:  DATA 09,5B
0046E:  DATA 42,4F
00470:  DATA 53,53
00472:  DATA 5D,20
00474:  DATA 3E,3E
00476:  DATA 3E,20
00478:  DATA 00,00
0047A:  DATA 45,6E
0047C:  DATA 64,20
0047E:  DATA 6D,61
00480:  DATA 6B,65
00482:  DATA 5F,72
00484:  DATA 65,63
00486:  DATA 69,76
00488:  DATA 65,5F
0048A:  DATA 63,6F
0048C:  DATA 6D,6D
0048E:  DATA 61,6E
00490:  DATA 64,0D
00492:  DATA 0A,0D
00494:  DATA 0A,00
00496:  DATA 73,69
00498:  DATA 67,6E
0049A:  DATA 61,6C
0049C:  DATA 20,65
0049E:  DATA 6E,64
004A0:  DATA 20,77
004A2:  DATA 69,74
004A4:  DATA 68,20
004A6:  DATA 53,46
004A8:  DATA 44,0D
004AA:  DATA 0A,00
004AC:  DATA 64,6F
004AE:  DATA 6E,27
004B0:  DATA 74,20
004B2:  DATA 66,69
004B4:  DATA 6E,64
004B6:  DATA 20,53
004B8:  DATA 46,44
004BA:  DATA 0D,0A
004BC:  DATA 00,00
004BE:  DATA 09,2D
004C0:  DATA 3E,20
004C2:  DATA 49,6E
004C4:  DATA 76,61
004C6:  DATA 6C,69
004C8:  DATA 64,20
004CA:  DATA 46,72
004CC:  DATA 61,6D
004CE:  DATA 65,20
004D0:  DATA 49,44
004D2:  DATA 20,72
004D4:  DATA 65,63
004D6:  DATA 65,69
004D8:  DATA 76,65
004DA:  DATA 64,3A
004DC:  DATA 20,25
004DE:  DATA 58,0D
004E0:  DATA 0A,00
004E2:  DATA 09,2D
004E4:  DATA 3E,20
004E6:  DATA 43,52
004E8:  DATA 43,20
004EA:  DATA 65,72
004EC:  DATA 72,6F
004EE:  DATA 72,21
004F0:  DATA 0D,0A
004F2:  DATA 00,00
004F4:  DATA 09,09
004F6:  DATA 2D,3E
004F8:  DATA 20,72
004FA:  DATA 65,63
004FC:  DATA 65,69
004FE:  DATA 76,65
00500:  DATA 64,20
00502:  DATA 43,52
00504:  DATA 43,3A
00506:  DATA 20,25
00508:  DATA 58,0D
0050A:  DATA 0A,00
0050C:  DATA 09,09
0050E:  DATA 20,20
00510:  DATA 20,63
00512:  DATA 6F,6C
00514:  DATA 6C,65
00516:  DATA 63,74
00518:  DATA 20,43
0051A:  DATA 52,43
0051C:  DATA 20,3A
0051E:  DATA 20,25
00520:  DATA 58,0D
00522:  DATA 0A,00
00524:  DATA 09,2D
00526:  DATA 3E,20
00528:  DATA 49,6E
0052A:  DATA 76,61
0052C:  DATA 6C,69
0052E:  DATA 64,20
00530:  DATA 64,65
00532:  DATA 76,69
00534:  DATA 63,65
00536:  DATA 20,49
00538:  DATA 44,20
0053A:  DATA 72,65
0053C:  DATA 63,65
0053E:  DATA 69,76
00540:  DATA 65,64
00542:  DATA 0D,0A
00544:  DATA 00,00
00546:  DATA 09,09
00548:  DATA 2D,3E
0054A:  DATA 20,72
0054C:  DATA 65,63
0054E:  DATA 65,69
00550:  DATA 76,65
00552:  DATA 64,3A
00554:  DATA 20,20
00556:  DATA 20,20
00558:  DATA 20,25
0055A:  DATA 58,0D
0055C:  DATA 0A,00
0055E:  DATA 09,09
00560:  DATA 20,20
00562:  DATA 20,4D
00564:  DATA 79,20
00566:  DATA 64,65
00568:  DATA 76,69
0056A:  DATA 63,65
0056C:  DATA 20,49
0056E:  DATA 44,3A
00570:  DATA 20,25
00572:  DATA 58,0D
00574:  DATA 0A,00
00576:  DATA 09,5B
00578:  DATA 42,4F
0057A:  DATA 53,53
0057C:  DATA 5D,20
0057E:  DATA 3C,3C
00580:  DATA 3C,20
00582:  DATA 00,00
00584:  DATA 53,74
00586:  DATA 61,72
00588:  DATA 74,20
0058A:  DATA 53,4D
0058C:  DATA 46,20
0058E:  DATA 75,73
00590:  DATA 69,6E
00592:  DATA 67,20
00594:  DATA 72,65
00596:  DATA 71,65
00598:  DATA 73,74
0059A:  DATA 20,73
0059C:  DATA 65,61
0059E:  DATA 71,75
005A0:  DATA 65,6E
005A2:  DATA 63,65
005A4:  DATA 0D,0A
005A6:  DATA 00,00
005A8:  DATA 45,72
005AA:  DATA 72,6F
005AC:  DATA 72,21
005AE:  DATA 20,52
005B0:  DATA 65,63
005B2:  DATA 65,69
005B4:  DATA 76,69
005B6:  DATA 6E,67
005B8:  DATA 20,63
005BA:  DATA 6F,6D
005BC:  DATA 6D,61
005BE:  DATA 6E,64
005C0:  DATA 20,69
005C2:  DATA 6E,63
005C4:  DATA 6F,6E
005C6:  DATA 73,69
005C8:  DATA 73,74
005CA:  DATA 65,6E
005CC:  DATA 74,20
005CE:  DATA 77,69
005D0:  DATA 74,68
005D2:  DATA 20,74
005D4:  DATA 68,65
005D6:  DATA 20,64
005D8:  DATA 65,73
005DA:  DATA 69,67
005DC:  DATA 6E,0D
005DE:  DATA 0A,00
005E0:  DATA 53,4D
005E2:  DATA 46,20
005E4:  DATA 75,73
005E6:  DATA 65,20
005E8:  DATA 72,65
005EA:  DATA 71,75
005EC:  DATA 65,73
005EE:  DATA 74,20
005F0:  DATA 61,6C
005F2:  DATA 6C,6F
005F4:  DATA 77,65
005F6:  DATA 64,0D
005F8:  DATA 0A,00
005FA:  DATA 53,4D
005FC:  DATA 46,20
005FE:  DATA 75,73
00600:  DATA 65,20
00602:  DATA 72,65
00604:  DATA 71,75
00606:  DATA 65,73
00608:  DATA 74,20
0060A:  DATA 64,65
0060C:  DATA 6E,79
0060E:  DATA 65,64
00610:  DATA 0D,0A
00612:  DATA 00,00
00614:  DATA 52,65
00616:  DATA 74,72
00618:  DATA 79,20
0061A:  DATA 72,65
0061C:  DATA 71,75
0061E:  DATA 65,73
00620:  DATA 74,20
00622:  DATA 74,6F
00624:  DATA 20,42
00626:  DATA 4F,53
00628:  DATA 53,20
0062A:  DATA 50,49
0062C:  DATA 43,0D
0062E:  DATA 0A,00
00630:  DATA 45,72
00632:  DATA 72,6F
00634:  DATA 72,21
00636:  DATA 20,52
00638:  DATA 65,63
0063A:  DATA 65,69
0063C:  DATA 76,69
0063E:  DATA 6E,67
00640:  DATA 20,63
00642:  DATA 6F,6D
00644:  DATA 6D,61
00646:  DATA 6E,64
00648:  DATA 20,69
0064A:  DATA 6E,63
0064C:  DATA 6F,6E
0064E:  DATA 73,69
00650:  DATA 73,74
00652:  DATA 65,6E
00654:  DATA 74,20
00656:  DATA 77,69
00658:  DATA 74,68
0065A:  DATA 20,74
0065C:  DATA 68,65
0065E:  DATA 20,64
00660:  DATA 65,73
00662:  DATA 69,67
00664:  DATA 6E,0D
00666:  DATA 0A,00
00668:  DATA 45,6E
0066A:  DATA 64,20
0066C:  DATA 53,4D
0066E:  DATA 46,20
00670:  DATA 75,73
00672:  DATA 69,6E
00674:  DATA 67,20
00676:  DATA 72,65
00678:  DATA 71,65
0067A:  DATA 73,74
0067C:  DATA 20,73
0067E:  DATA 65,61
00680:  DATA 71,75
00682:  DATA 65,6E
00684:  DATA 63,65
00686:  DATA 0D,0A
00688:  DATA 00,00
0068A:  DATA 74,65
0068C:  DATA 6D,70
0068E:  DATA 5F,74
00690:  DATA 6F,70
00692:  DATA 3A,25
00694:  DATA 30,34
00696:  DATA 4C,58
00698:  DATA 0D,0A
0069A:  DATA 00,00
0069C:  DATA 74,65
0069E:  DATA 6D,70
006A0:  DATA 5F,62
006A2:  DATA 6F,74
006A4:  DATA 3A,25
006A6:  DATA 30,34
006A8:  DATA 4C,58
006AA:  DATA 0D,0A
006AC:  DATA 00,00
006AE:  DATA 74,65
006B0:  DATA 6D,70
006B2:  DATA 5F,6D
006B4:  DATA 69,73
006B6:  DATA 37,3A
006B8:  DATA 25,30
006BA:  DATA 34,4C
006BC:  DATA 58,0D
006BE:  DATA 0A,00
006C0:  DATA 70,64
006C2:  DATA 3A,25
006C4:  DATA 30,34
006C6:  DATA 4C,58
006C8:  DATA 0D,0A
006CA:  DATA 00,00
006CC:  DATA 56,6F
006CE:  DATA 6C,74
006D0:  DATA 31,2C
006D2:  DATA 43,75
006D4:  DATA 72,72
006D6:  DATA 31,2C
006D8:  DATA 56,6F
006DA:  DATA 6C,74
006DC:  DATA 32,2C
006DE:  DATA 43,75
006E0:  DATA 72,72
006E2:  DATA 32,0D
006E4:  DATA 0A,00
006E6:  DATA 5B,50
006E8:  DATA 49,43
006EA:  DATA 4C,4F
006EC:  DATA 47,5D
006EE:  DATA 20,3A
006F0:  DATA 20,00
006F2:  DATA 53,4D
006F4:  DATA 46,20
006F6:  DATA 44,61
006F8:  DATA 74,61
006FA:  DATA 20,54
006FC:  DATA 61,62
006FE:  DATA 6C,65
00700:  DATA 20,49
00702:  DATA 6E,69
00704:  DATA 74,69
00706:  DATA 61,6C
00708:  DATA 69,7A
0070A:  DATA 65,0D
0070C:  DATA 0A,00
0070E:  DATA 43,52
00710:  DATA 43,20
00712:  DATA 45,52
00714:  DATA 52,4F
00716:  DATA 52,20
00718:  DATA 25,64
0071A:  DATA 0D,0A
0071C:  DATA 00,00
0071E:  DATA 43,52
00720:  DATA 43,20
00722:  DATA 76,65
00724:  DATA 72,69
00726:  DATA 66,69
00728:  DATA 63,61
0072A:  DATA 74,69
0072C:  DATA 6F,6E
0072E:  DATA 20,66
00730:  DATA 61,69
00732:  DATA 6C,65
00734:  DATA 64,20
00736:  DATA 61,66
00738:  DATA 74,65
0073A:  DATA 72,20
0073C:  DATA 25,64
0073E:  DATA 20,61
00740:  DATA 74,74
00742:  DATA 65,6D
00744:  DATA 70,74
00746:  DATA 73,0D
00748:  DATA 0A,00
0074A:  DATA 45,72
0074C:  DATA 72,6F
0074E:  DATA 72,3A
00750:  DATA 20,43
00752:  DATA 52,43
00754:  DATA 20,76
00756:  DATA 65,72
00758:  DATA 69,66
0075A:  DATA 69,63
0075C:  DATA 61,74
0075E:  DATA 69,6F
00760:  DATA 6E,20
00762:  DATA 66,61
00764:  DATA 69,6C
00766:  DATA 65,64
00768:  DATA 20,61
0076A:  DATA 66,74
0076C:  DATA 65,72
0076E:  DATA 20,25
00770:  DATA 64,20
00772:  DATA 61,74
00774:  DATA 74,65
00776:  DATA 6D,70
00778:  DATA 74,73
0077A:  DATA 0D,0A
0077C:  DATA 00,00
0077E:  DATA 0D,0A
00780:  DATA 5B,53
00782:  DATA 4D,46
00784:  DATA 20,43
00786:  DATA 6F,75
00788:  DATA 6E,74
0078A:  DATA 65,72
0078C:  DATA 20,53
0078E:  DATA 74,61
00790:  DATA 74,75
00792:  DATA 73,5D
00794:  DATA 0D,0A
00796:  DATA 00,00
00798:  DATA 09,50
0079A:  DATA 41,52
0079C:  DATA 54,49
0079E:  DATA 54,49
007A0:  DATA 4F,4E
007A2:  DATA 09,55
007A4:  DATA 53,45
007A6:  DATA 44,09
007A8:  DATA 09,52
007AA:  DATA 45,53
007AC:  DATA 45,52
007AE:  DATA 56,45
007B0:  DATA 0D,0A
007B2:  DATA 00,00
007B4:  DATA 09,2D
007B6:  DATA 2D,2D
007B8:  DATA 2D,2D
007BA:  DATA 2D,2D
007BC:  DATA 2D,2D
007BE:  DATA 09,2D
007C0:  DATA 2D,2D
007C2:  DATA 2D,2D
007C4:  DATA 2D,2D
007C6:  DATA 2D,2D
007C8:  DATA 2D,09
007CA:  DATA 2D,2D
007CC:  DATA 2D,2D
007CE:  DATA 2D,2D
007D0:  DATA 2D,2D
007D2:  DATA 2D,2D
007D4:  DATA 0D,0A
007D6:  DATA 00,00
007D8:  DATA 09,50
007DA:  DATA 49,43
007DC:  DATA 4C,4F
007DE:  DATA 47,09
007E0:  DATA 09,30
007E2:  DATA 78,25
007E4:  DATA 30,38
007E6:  DATA 4C,58
007E8:  DATA 09,30
007EA:  DATA 78,25
007EC:  DATA 30,38
007EE:  DATA 4C,58
007F0:  DATA 0D,0A
007F2:  DATA 00,00
007F4:  DATA 09,45
007F6:  DATA 4E,56
007F8:  DATA 49,52
007FA:  DATA 4F,09
007FC:  DATA 09,30
007FE:  DATA 78,25
00800:  DATA 30,38
00802:  DATA 4C,58
00804:  DATA 09,30
00806:  DATA 78,25
00808:  DATA 30,38
0080A:  DATA 4C,58
0080C:  DATA 0D,0A
0080E:  DATA 00,00
00810:  DATA 09,49
00812:  DATA 56,31
00814:  DATA 5F,48
00816:  DATA 45,41
00818:  DATA 44,45
0081A:  DATA 52,09
0081C:  DATA 30,78
0081E:  DATA 25,30
00820:  DATA 38,4C
00822:  DATA 58,09
00824:  DATA 30,78
00826:  DATA 25,30
00828:  DATA 38,4C
0082A:  DATA 58,0D
0082C:  DATA 0A,00
0082E:  DATA 09,49
00830:  DATA 56,31
00832:  DATA 5F,44
00834:  DATA 41,54
00836:  DATA 41,09
00838:  DATA 30,78
0083A:  DATA 25,30
0083C:  DATA 38,4C
0083E:  DATA 58,09
00840:  DATA 30,78
00842:  DATA 25,30
00844:  DATA 38,4C
00846:  DATA 58,0D
00848:  DATA 0A,00
0084A:  DATA 09,49
0084C:  DATA 56,32
0084E:  DATA 5F,48
00850:  DATA 45,41
00852:  DATA 44,45
00854:  DATA 52,09
00856:  DATA 30,78
00858:  DATA 25,30
0085A:  DATA 38,4C
0085C:  DATA 58,09
0085E:  DATA 30,78
00860:  DATA 25,30
00862:  DATA 38,4C
00864:  DATA 58,0D
00866:  DATA 0A,00
00868:  DATA 09,49
0086A:  DATA 56,32
0086C:  DATA 5F,44
0086E:  DATA 41,54
00870:  DATA 41,09
00872:  DATA 30,78
00874:  DATA 25,30
00876:  DATA 38,4C
00878:  DATA 58,09
0087A:  DATA 30,78
0087C:  DATA 25,30
0087E:  DATA 38,4C
00880:  DATA 58,0D
00882:  DATA 0A,00
00884:  DATA 09,3D
00886:  DATA 3D,3D
00888:  DATA 3D,3D
0088A:  DATA 3D,3D
0088C:  DATA 3D,3D
0088E:  DATA 3D,3D
00890:  DATA 3D,3D
00892:  DATA 3D,3D
00894:  DATA 3D,3D
00896:  DATA 3D,3D
00898:  DATA 3D,3D
0089A:  DATA 3D,3D
0089C:  DATA 3D,3D
0089E:  DATA 3D,3D
008A0:  DATA 3D,3D
008A2:  DATA 3D,3D
008A4:  DATA 3D,3D
008A6:  DATA 3D,3D
008A8:  DATA 3D,3D
008AA:  DATA 3D,3D
008AC:  DATA 3D,3D
008AE:  DATA 3D,0D
008B0:  DATA 0A,0D
008B2:  DATA 0A,00
008B4:  DATA 0D,0A
008B6:  DATA 5F,5F
008B8:  DATA 5F,5F
008BA:  DATA 5F,5F
008BC:  DATA 5F,5F
008BE:  DATA 5F,5F
008C0:  DATA 5F,5F
008C2:  DATA 5F,5F
008C4:  DATA 5F,5F
008C6:  DATA 5F,5F
008C8:  DATA 5F,5F
008CA:  DATA 5F,5F
008CC:  DATA 5F,5F
008CE:  DATA 5F,5F
008D0:  DATA 5F,5F
008D2:  DATA 5F,5F
008D4:  DATA 5F,0D
008D6:  DATA 0A,00
008D8:  DATA 5F,5F
008DA:  DATA 5F,5F
008DC:  DATA 5F,5F
008DE:  DATA 5F,5F
008E0:  DATA 5F,53
008E2:  DATA 74,61
008E4:  DATA 72,74
008E6:  DATA 20,63
008E8:  DATA 6F,70
008EA:  DATA 79,5F
008EC:  DATA 64,61
008EE:  DATA 74,61
008F0:  DATA 5F,5F
008F2:  DATA 5F,5F
008F4:  DATA 5F,5F
008F6:  DATA 5F,5F
008F8:  DATA 5F,0D
008FA:  DATA 0A,00
008FC:  DATA 45,72
008FE:  DATA 72,6F
00900:  DATA 72,3A
00902:  DATA 20,4D
00904:  DATA 49,53
00906:  DATA 20,46
00908:  DATA 4D,20
0090A:  DATA 69,73
0090C:  DATA 20,6E
0090E:  DATA 6F,74
00910:  DATA 20,63
00912:  DATA 6F,6E
00914:  DATA 6E,65
00916:  DATA 63,74
00918:  DATA 65,64
0091A:  DATA 0D,0A
0091C:  DATA 00,00
0091E:  DATA 45,72
00920:  DATA 72,6F
00922:  DATA 72,3A
00924:  DATA 20,53
00926:  DATA 4D,46
00928:  DATA 20,69
0092A:  DATA 73,20
0092C:  DATA 6E,6F
0092E:  DATA 74,20
00930:  DATA 63,6F
00932:  DATA 6E,6E
00934:  DATA 65,63
00936:  DATA 74,65
00938:  DATA 64,0D
0093A:  DATA 0A,00
0093C:  DATA 46,4C
0093E:  DATA 41,53
00940:  DATA 48,20
00942:  DATA 49,44
00944:  DATA 3A,20
00946:  DATA 43,49
00948:  DATA 47,53
0094A:  DATA 5F,44
0094C:  DATA 41,54
0094E:  DATA 41,5F
00950:  DATA 54,41
00952:  DATA 42,4C
00954:  DATA 45,0D
00956:  DATA 0A,00
00958:  DATA 46,4C
0095A:  DATA 41,53
0095C:  DATA 48,20
0095E:  DATA 49,44
00960:  DATA 3A,20
00962:  DATA 43,49
00964:  DATA 47,53
00966:  DATA 5F,50
00968:  DATA 49,43
0096A:  DATA 4C,4F
0096C:  DATA 47,5F
0096E:  DATA 44,41
00970:  DATA 54,41
00972:  DATA 0D,0A
00974:  DATA 00,00
00976:  DATA 46,4C
00978:  DATA 41,53
0097A:  DATA 48,20
0097C:  DATA 49,44
0097E:  DATA 3A,20
00980:  DATA 43,49
00982:  DATA 47,53
00984:  DATA 5F,45
00986:  DATA 4E,56
00988:  DATA 49,52
0098A:  DATA 4F,5F
0098C:  DATA 44,41
0098E:  DATA 54,41
00990:  DATA 0D,0A
00992:  DATA 00,00
00994:  DATA 46,4C
00996:  DATA 41,53
00998:  DATA 48,20
0099A:  DATA 49,44
0099C:  DATA 3A,20
0099E:  DATA 43,49
009A0:  DATA 47,53
009A2:  DATA 5F,49
009A4:  DATA 56,31
009A6:  DATA 5F,48
009A8:  DATA 45,41
009AA:  DATA 44,45
009AC:  DATA 52,0D
009AE:  DATA 0A,00
009B0:  DATA 46,4C
009B2:  DATA 41,53
009B4:  DATA 48,20
009B6:  DATA 49,44
009B8:  DATA 3A,20
009BA:  DATA 43,49
009BC:  DATA 47,53
009BE:  DATA 5F,49
009C0:  DATA 56,31
009C2:  DATA 5F,44
009C4:  DATA 41,54
009C6:  DATA 41,0D
009C8:  DATA 0A,00
009CA:  DATA 46,4C
009CC:  DATA 41,53
009CE:  DATA 48,20
009D0:  DATA 49,44
009D2:  DATA 3A,20
009D4:  DATA 43,49
009D6:  DATA 47,53
009D8:  DATA 5F,49
009DA:  DATA 56,32
009DC:  DATA 5F,48
009DE:  DATA 45,41
009E0:  DATA 44,45
009E2:  DATA 52,0D
009E4:  DATA 0A,00
009E6:  DATA 46,4C
009E8:  DATA 41,53
009EA:  DATA 48,20
009EC:  DATA 49,44
009EE:  DATA 3A,20
009F0:  DATA 43,49
009F2:  DATA 47,53
009F4:  DATA 5F,49
009F6:  DATA 56,32
009F8:  DATA 5F,44
009FA:  DATA 41,54
009FC:  DATA 41,0D
009FE:  DATA 0A,00
00A00:  DATA 45,72
00A02:  DATA 72,6F
00A04:  DATA 72,3A
00A06:  DATA 20,49
00A08:  DATA 6E,76
00A0A:  DATA 61,6C
00A0C:  DATA 69,64
00A0E:  DATA 20,6D
00A10:  DATA 69,73
00A12:  DATA 73,69
00A14:  DATA 6F,6E
00A16:  DATA 20,49
00A18:  DATA 44,20
00A1A:  DATA 25,64
00A1C:  DATA 0D,0A
00A1E:  DATA 00,00
00A20:  DATA 5B,4D
00A22:  DATA 49,53
00A24:  DATA 46,20
00A26:  DATA 41,44
00A28:  DATA 44,52
00A2A:  DATA 45,53
00A2C:  DATA 53,5D
00A2E:  DATA 0D,0A
00A30:  DATA 00,00
00A32:  DATA 09,50
00A34:  DATA 61,72
00A36:  DATA 61,6D
00A38:  DATA 09,44
00A3A:  DATA 61,74
00A3C:  DATA 61,0D
00A3E:  DATA 0A,00
00A40:  DATA 09,2D
00A42:  DATA 2D,2D
00A44:  DATA 2D,2D
00A46:  DATA 09,2D
00A48:  DATA 2D,2D
00A4A:  DATA 2D,2D
00A4C:  DATA 2D,2D
00A4E:  DATA 2D,2D
00A50:  DATA 2D,0D
00A52:  DATA 0A,00
00A54:  DATA 09,53
00A56:  DATA 54,41
00A58:  DATA 52,54
00A5A:  DATA 09,30
00A5C:  DATA 78,25
00A5E:  DATA 30,38
00A60:  DATA 4C,58
00A62:  DATA 0D,0A
00A64:  DATA 00,00
00A66:  DATA 09,45
00A68:  DATA 4E,44
00A6A:  DATA 09,30
00A6C:  DATA 78,25
00A6E:  DATA 30,38
00A70:  DATA 4C,58
00A72:  DATA 0D,0A
00A74:  DATA 00,00
00A76:  DATA 09,53
00A78:  DATA 52,43
00A7A:  DATA 09,30
00A7C:  DATA 78,25
00A7E:  DATA 30,38
00A80:  DATA 4C,58
00A82:  DATA 0D,0A
00A84:  DATA 00,00
00A86:  DATA 09,53
00A88:  DATA 49,5A
00A8A:  DATA 45,09
00A8C:  DATA 30,78
00A8E:  DATA 25,30
00A90:  DATA 38,4C
00A92:  DATA 58,0D
00A94:  DATA 0A,00
00A96:  DATA 09,2D
00A98:  DATA 2D,2D
00A9A:  DATA 2D,2D
00A9C:  DATA 09,2D
00A9E:  DATA 2D,2D
00AA0:  DATA 2D,2D
00AA2:  DATA 2D,2D
00AA4:  DATA 2D,2D
00AA6:  DATA 2D,0D
00AA8:  DATA 0A,00
00AAA:  DATA 5B,53
00AAC:  DATA 4D,46
00AAE:  DATA 20,41
00AB0:  DATA 44,44
00AB2:  DATA 52,45
00AB4:  DATA 53,53
00AB6:  DATA 5D,0D
00AB8:  DATA 0A,00
00ABA:  DATA 09,50
00ABC:  DATA 61,72
00ABE:  DATA 61,6D
00AC0:  DATA 09,44
00AC2:  DATA 61,74
00AC4:  DATA 61,0D
00AC6:  DATA 0A,00
00AC8:  DATA 09,2D
00ACA:  DATA 2D,2D
00ACC:  DATA 2D,2D
00ACE:  DATA 09,2D
00AD0:  DATA 2D,2D
00AD2:  DATA 2D,2D
00AD4:  DATA 2D,2D
00AD6:  DATA 2D,2D
00AD8:  DATA 2D,0D
00ADA:  DATA 0A,00
00ADC:  DATA 09,53
00ADE:  DATA 54,41
00AE0:  DATA 52,54
00AE2:  DATA 09,30
00AE4:  DATA 78,25
00AE6:  DATA 30,38
00AE8:  DATA 4C,58
00AEA:  DATA 0D,0A
00AEC:  DATA 00,00
00AEE:  DATA 09,45
00AF0:  DATA 4E,44
00AF2:  DATA 09,30
00AF4:  DATA 78,25
00AF6:  DATA 30,38
00AF8:  DATA 4C,58
00AFA:  DATA 0D,0A
00AFC:  DATA 00,00
00AFE:  DATA 09,55
00B00:  DATA 53,45
00B02:  DATA 44,09
00B04:  DATA 30,78
00B06:  DATA 25,30
00B08:  DATA 38,4C
00B0A:  DATA 58,0D
00B0C:  DATA 0A,00
00B0E:  DATA 09,4E
00B10:  DATA 45,58
00B12:  DATA 54,09
00B14:  DATA 30,78
00B16:  DATA 25,30
00B18:  DATA 38,4C
00B1A:  DATA 58,0D
00B1C:  DATA 0A,00
00B1E:  DATA 09,2D
00B20:  DATA 2D,2D
00B22:  DATA 2D,2D
00B24:  DATA 09,2D
00B26:  DATA 2D,2D
00B28:  DATA 2D,2D
00B2A:  DATA 2D,2D
00B2C:  DATA 2D,2D
00B2E:  DATA 2D,0D
00B30:  DATA 0A,00
00B32:  DATA 57,52
00B34:  DATA 49,54
00B36:  DATA 45,20
00B38:  DATA 44,41
00B3A:  DATA 54,41
00B3C:  DATA 20,54
00B3E:  DATA 4F,20
00B40:  DATA 53,4D
00B42:  DATA 46,0D
00B44:  DATA 0A,00
00B46:  DATA 53,4D
00B48:  DATA 46,20
00B4A:  DATA 43,6F
00B4C:  DATA 75,6E
00B4E:  DATA 74,65
00B50:  DATA 72,20
00B52:  DATA 55,70
00B54:  DATA 64,61
00B56:  DATA 74,65
00B58:  DATA 0D,0A
00B5A:  DATA 00,00
00B5C:  DATA 0D,0A
00B5E:  DATA 5F,5F
00B60:  DATA 5F,5F
00B62:  DATA 5F,5F
00B64:  DATA 5F,5F
00B66:  DATA 5F,45
00B68:  DATA 6E,64
00B6A:  DATA 20,63
00B6C:  DATA 6F,70
00B6E:  DATA 79,5F
00B70:  DATA 64,61
00B72:  DATA 74,61
00B74:  DATA 5F,5F
00B76:  DATA 5F,5F
00B78:  DATA 5F,5F
00B7A:  DATA 5F,5F
00B7C:  DATA 5F,5F
00B7E:  DATA 0D,0A
00B80:  DATA 00,00
00B82:  DATA 5F,5F
00B84:  DATA 5F,5F
00B86:  DATA 5F,5F
00B88:  DATA 5F,5F
00B8A:  DATA 5F,5F
00B8C:  DATA 5F,5F
00B8E:  DATA 5F,5F
00B90:  DATA 5F,5F
00B92:  DATA 5F,5F
00B94:  DATA 5F,5F
00B96:  DATA 5F,5F
00B98:  DATA 5F,5F
00B9A:  DATA 5F,5F
00B9C:  DATA 5F,5F
00B9E:  DATA 5F,5F
00BA0:  DATA 5F,0D
00BA2:  DATA 0A,0D
00BA4:  DATA 0A,00
00BA6:  DATA 0D,0A
00BA8:  DATA 5F,5F
00BAA:  DATA 5F,5F
00BAC:  DATA 5F,5F
00BAE:  DATA 5F,5F
00BB0:  DATA 5F,5F
00BB2:  DATA 5F,5F
00BB4:  DATA 5F,5F
00BB6:  DATA 5F,5F
00BB8:  DATA 5F,5F
00BBA:  DATA 5F,5F
00BBC:  DATA 0D,0A
00BBE:  DATA 00,00
00BC0:  DATA 5F,5F
00BC2:  DATA 5F,53
00BC4:  DATA 74,61
00BC6:  DATA 72,74
00BC8:  DATA 20,53
00BCA:  DATA 4D,46
00BCC:  DATA 20,52
00BCE:  DATA 65,61
00BD0:  DATA 64,5F
00BD2:  DATA 5F,5F
00BD4:  DATA 5F,0D
00BD6:  DATA 0A,00
00BD8:  DATA 45,72
00BDA:  DATA 72,6F
00BDC:  DATA 72,3A
00BDE:  DATA 20,52
00BE0:  DATA 65,61
00BE2:  DATA 64,20
00BE4:  DATA 61,64
00BE6:  DATA 64,72
00BE8:  DATA 65,73
00BEA:  DATA 73,20
00BEC:  DATA 30,78
00BEE:  DATA 25,30
00BF0:  DATA 38,4C
00BF2:  DATA 58,20
00BF4:  DATA 6F,75
00BF6:  DATA 74,20
00BF8:  DATA 6F,66
00BFA:  DATA 20,53
00BFC:  DATA 4D,46
00BFE:  DATA 20,6D
00C00:  DATA 69,73
00C02:  DATA 73,69
00C04:  DATA 6F,6E
00C06:  DATA 20,72
00C08:  DATA 61,6E
00C0A:  DATA 67,65
00C0C:  DATA 20,5B
00C0E:  DATA 30,78
00C10:  DATA 25,30
00C12:  DATA 38,4C
00C14:  DATA 58,20
00C16:  DATA 2D,20
00C18:  DATA 30,78
00C1A:  DATA 25,30
00C1C:  DATA 38,4C
00C1E:  DATA 58,29
00C20:  DATA 0D,0A
00C22:  DATA 00,00
00C24:  DATA 57,61
00C26:  DATA 72,6E
00C28:  DATA 3A,20
00C2A:  DATA 41,64
00C2C:  DATA 6A,75
00C2E:  DATA 73,74
00C30:  DATA 20,72
00C32:  DATA 65,61
00C34:  DATA 64,20
00C36:  DATA 73,69
00C38:  DATA 7A,65
00C3A:  DATA 20,66
00C3C:  DATA 72,6F
00C3E:  DATA 6D,20
00C40:  DATA 25,6C
00C42:  DATA 75,20
00C44:  DATA 74,6F
00C46:  DATA 20,25
00C48:  DATA 6C,75
00C4A:  DATA 20,28
00C4C:  DATA 6D,69
00C4E:  DATA 73,73
00C50:  DATA 69,6F
00C52:  DATA 6E,20
00C54:  DATA 65,6E
00C56:  DATA 64,29
00C58:  DATA 0D,0A
00C5A:  DATA 00,00
00C5C:  DATA 49,6E
00C5E:  DATA 66,6F
00C60:  DATA 3A,20
00C62:  DATA 4E,6F
00C64:  DATA 74,68
00C66:  DATA 69,6E
00C68:  DATA 67,20
00C6A:  DATA 74,6F
00C6C:  DATA 20,72
00C6E:  DATA 65,61
00C70:  DATA 64,20
00C72:  DATA 28,73
00C74:  DATA 69,7A
00C76:  DATA 65,3D
00C78:  DATA 30,29
00C7A:  DATA 0D,0A
00C7C:  DATA 00,00
00C7E:  DATA 49,6E
00C80:  DATA 20,53
00C82:  DATA 4D,46
00C84:  DATA 20,52
00C86:  DATA 65,61
00C88:  DATA 64,20
00C8A:  DATA 73,6F
00C8C:  DATA 75,72
00C8E:  DATA 63,65
00C90:  DATA 20,64
00C92:  DATA 61,74
00C94:  DATA 61,20
00C96:  DATA 61,64
00C98:  DATA 64,72
00C9A:  DATA 65,73
00C9C:  DATA 73,3A
00C9E:  DATA 20,25
00CA0:  DATA 4C,58
00CA2:  DATA 0D,0A
00CA4:  DATA 00,00
00CA6:  DATA 49,6E
00CA8:  DATA 20,53
00CAA:  DATA 4D,46
00CAC:  DATA 20,52
00CAE:  DATA 65,61
00CB0:  DATA 64,20
00CB2:  DATA 64,61
00CB4:  DATA 74,61
00CB6:  DATA 20,73
00CB8:  DATA 69,7A
00CBA:  DATA 65,20
00CBC:  DATA 20,20
00CBE:  DATA 20,20
00CC0:  DATA 20,20
00CC2:  DATA 20,20
00CC4:  DATA 20,3A
00CC6:  DATA 20,25
00CC8:  DATA 6C,75
00CCA:  DATA 20,28
00CCC:  DATA 30,78
00CCE:  DATA 25,6C
00CD0:  DATA 78,29
00CD2:  DATA 0D,0A
00CD4:  DATA 0D,0A
00CD6:  DATA 00,00
00CD8:  DATA 45,72
00CDA:  DATA 72,6F
00CDC:  DATA 72,3A
00CDE:  DATA 20,53
00CE0:  DATA 4D,46
00CE2:  DATA 20,69
00CE4:  DATA 73,20
00CE6:  DATA 6E,6F
00CE8:  DATA 74,20
00CEA:  DATA 63,6F
00CEC:  DATA 6E,6E
00CEE:  DATA 65,63
00CF0:  DATA 74,65
00CF2:  DATA 64,0D
00CF4:  DATA 0A,00
00CF6:  DATA 52,45
00CF8:  DATA 41,44
00CFA:  DATA 20,44
00CFC:  DATA 41,54
00CFE:  DATA 41,20
00D00:  DATA 46,52
00D02:  DATA 4F,4D
00D04:  DATA 20,53
00D06:  DATA 4D,46
00D08:  DATA 2E,2E
00D0A:  DATA 2E,0D
00D0C:  DATA 0A,00
00D0E:  DATA 0D,0A
00D10:  DATA 5F,5F
00D12:  DATA 5F,45
00D14:  DATA 6E,64
00D16:  DATA 20,53
00D18:  DATA 4D,46
00D1A:  DATA 20,52
00D1C:  DATA 65,61
00D1E:  DATA 64,5F
00D20:  DATA 5F,5F
00D22:  DATA 5F,0D
00D24:  DATA 0A,00
00D26:  DATA 5F,5F
00D28:  DATA 5F,5F
00D2A:  DATA 5F,5F
00D2C:  DATA 5F,5F
00D2E:  DATA 5F,5F
00D30:  DATA 5F,5F
00D32:  DATA 5F,5F
00D34:  DATA 5F,5F
00D36:  DATA 5F,5F
00D38:  DATA 5F,5F
00D3A:  DATA 0D,0A
00D3C:  DATA 0D,0A
00D3E:  DATA 00,00
00D40:  DATA 0D,0A
00D42:  DATA 5F,5F
00D44:  DATA 5F,5F
00D46:  DATA 5F,5F
00D48:  DATA 5F,5F
00D4A:  DATA 5F,5F
00D4C:  DATA 5F,5F
00D4E:  DATA 5F,5F
00D50:  DATA 5F,5F
00D52:  DATA 5F,5F
00D54:  DATA 5F,5F
00D56:  DATA 0D,0A
00D58:  DATA 00,00
00D5A:  DATA 5F,5F
00D5C:  DATA 5F,53
00D5E:  DATA 74,61
00D60:  DATA 72,74
00D62:  DATA 20,73
00D64:  DATA 6D,66
00D66:  DATA 5F,65
00D68:  DATA 72,61
00D6A:  DATA 73,65
00D6C:  DATA 5F,5F
00D6E:  DATA 5F,5F
00D70:  DATA 0D,0A
00D72:  DATA 00,00
00D74:  DATA 5B,53
00D76:  DATA 4D,46
00D78:  DATA 5D,20
00D7A:  DATA 45,72
00D7C:  DATA 61,73
00D7E:  DATA 65,20
00D80:  DATA 61,64
00D82:  DATA 64,72
00D84:  DATA 65,73
00D86:  DATA 73,20
00D88:  DATA 20,20
00D8A:  DATA 3A,20
00D8C:  DATA 25,4C
00D8E:  DATA 58,0D
00D90:  DATA 0A,00
00D92:  DATA 5B,53
00D94:  DATA 4D,46
00D96:  DATA 5D,20
00D98:  DATA 45,72
00D9A:  DATA 61,73
00D9C:  DATA 65,20
00D9E:  DATA 64,61
00DA0:  DATA 74,61
00DA2:  DATA 20,73
00DA4:  DATA 69,7A
00DA6:  DATA 65,20
00DA8:  DATA 3A,20
00DAA:  DATA 25,6C
00DAC:  DATA 75,20
00DAE:  DATA 28,30
00DB0:  DATA 78,25
00DB2:  DATA 6C,78
00DB4:  DATA 29,0D
00DB6:  DATA 0A,0D
00DB8:  DATA 0A,00
00DBA:  DATA 45,72
00DBC:  DATA 72,6F
00DBE:  DATA 72,3A
00DC0:  DATA 20,53
00DC2:  DATA 4D,46
00DC4:  DATA 20,69
00DC6:  DATA 73,20
00DC8:  DATA 6E,6F
00DCA:  DATA 74,20
00DCC:  DATA 63,6F
00DCE:  DATA 6E,6E
00DD0:  DATA 65,63
00DD2:  DATA 74,65
00DD4:  DATA 64,0D
00DD6:  DATA 0A,00
00DD8:  DATA 45,72
00DDA:  DATA 72,6F
00DDC:  DATA 72,3A
00DDE:  DATA 20,45
00DE0:  DATA 72,61
00DE2:  DATA 73,65
00DE4:  DATA 20,73
00DE6:  DATA 6F,75
00DE8:  DATA 72,63
00DEA:  DATA 65,20
00DEC:  DATA 61,64
00DEE:  DATA 64,72
00DF0:  DATA 65,73
00DF2:  DATA 73,20
00DF4:  DATA 30,78
00DF6:  DATA 25,4C
00DF8:  DATA 58,20
00DFA:  DATA 69,73
00DFC:  DATA 20,6F
00DFE:  DATA 75,74
00E00:  DATA 73,69
00E02:  DATA 64,65
00E04:  DATA 20,6D
00E06:  DATA 69,73
00E08:  DATA 73,69
00E0A:  DATA 6F,6E
00E0C:  DATA 20,72
00E0E:  DATA 61,6E
00E10:  DATA 67,65
00E12:  DATA 20,5B
00E14:  DATA 30,78
00E16:  DATA 25,4C
00E18:  DATA 58,20
00E1A:  DATA 2D,20
00E1C:  DATA 30,78
00E1E:  DATA 25,4C
00E20:  DATA 58,5D
00E22:  DATA 0D,0A
00E24:  DATA 00,00
00E26:  DATA 45,72
00E28:  DATA 72,6F
00E2A:  DATA 72,3A
00E2C:  DATA 20,45
00E2E:  DATA 72,61
00E30:  DATA 73,65
00E32:  DATA 20,6F
00E34:  DATA 70,65
00E36:  DATA 72,61
00E38:  DATA 74,69
00E3A:  DATA 6F,6E
00E3C:  DATA 20,77
00E3E:  DATA 6F,75
00E40:  DATA 6C,64
00E42:  DATA 20,65
00E44:  DATA 78,63
00E46:  DATA 65,65
00E48:  DATA 64,20
00E4A:  DATA 6D,69
00E4C:  DATA 73,73
00E4E:  DATA 69,6F
00E50:  DATA 6E,20
00E52:  DATA 65,6E
00E54:  DATA 64,20
00E56:  DATA 61,64
00E58:  DATA 64,72
00E5A:  DATA 65,73
00E5C:  DATA 73,20
00E5E:  DATA 30,78
00E60:  DATA 25,4C
00E62:  DATA 58,0D
00E64:  DATA 0A,00
00E66:  DATA 4C,69
00E68:  DATA 6D,69
00E6A:  DATA 74,69
00E6C:  DATA 6E,67
00E6E:  DATA 20,65
00E70:  DATA 72,61
00E72:  DATA 73,65
00E74:  DATA 20,73
00E76:  DATA 69,7A
00E78:  DATA 65,20
00E7A:  DATA 74,6F
00E7C:  DATA 20,73
00E7E:  DATA 74,61
00E80:  DATA 79,20
00E82:  DATA 77,69
00E84:  DATA 74,68
00E86:  DATA 69,6E
00E88:  DATA 20,6D
00E8A:  DATA 69,73
00E8C:  DATA 73,69
00E8E:  DATA 6F,6E
00E90:  DATA 20,62
00E92:  DATA 6F,75
00E94:  DATA 6E,64
00E96:  DATA 73,0D
00E98:  DATA 0A,00
00E9A:  DATA 45,72
00E9C:  DATA 61,73
00E9E:  DATA 65,20
00EA0:  DATA 6F,70
00EA2:  DATA 65,72
00EA4:  DATA 61,74
00EA6:  DATA 69,6F
00EA8:  DATA 6E,20
00EAA:  DATA 76,61
00EAC:  DATA 6C,69
00EAE:  DATA 64,61
00EB0:  DATA 74,65
00EB2:  DATA 64,20
00EB4:  DATA 77,69
00EB6:  DATA 74,68
00EB8:  DATA 69,6E
00EBA:  DATA 20,6D
00EBC:  DATA 69,73
00EBE:  DATA 73,69
00EC0:  DATA 6F,6E
00EC2:  DATA 20,72
00EC4:  DATA 61,6E
00EC6:  DATA 67,65
00EC8:  DATA 0D,0A
00ECA:  DATA 00,00
00ECC:  DATA 45,72
00ECE:  DATA 61,73
00ED0:  DATA 65,64
00ED2:  DATA 20,25
00ED4:  DATA 6C,75
00ED6:  DATA 20,62
00ED8:  DATA 79,74
00EDA:  DATA 65,73
00EDC:  DATA 20,28
00EDE:  DATA 61,6C
00EE0:  DATA 69,67
00EE2:  DATA 6E,65
00EE4:  DATA 64,29
00EE6:  DATA 0D,0A
00EE8:  DATA 00,00
00EEA:  DATA 0D,0A
00EEC:  DATA 5F,5F
00EEE:  DATA 5F,45
00EF0:  DATA 6E,64
00EF2:  DATA 20,73
00EF4:  DATA 6D,66
00EF6:  DATA 5F,65
00EF8:  DATA 72,61
00EFA:  DATA 73,65
00EFC:  DATA 5F,5F
00EFE:  DATA 5F,5F
00F00:  DATA 0D,0A
00F02:  DATA 00,00
00F04:  DATA 5F,5F
00F06:  DATA 5F,5F
00F08:  DATA 5F,5F
00F0A:  DATA 5F,5F
00F0C:  DATA 5F,5F
00F0E:  DATA 5F,5F
00F10:  DATA 5F,5F
00F12:  DATA 5F,5F
00F14:  DATA 5F,5F
00F16:  DATA 5F,5F
00F18:  DATA 0D,0A
00F1A:  DATA 0D,0A
00F1C:  DATA 00,00
00F1E:  DATA 4D,49
00F20:  DATA 53,53
00F22:  DATA 49,4F
00F24:  DATA 4E,20
00F26:  DATA 46,4C
00F28:  DATA 41,53
00F2A:  DATA 48,20
00F2C:  DATA 49,6E
00F2E:  DATA 69,74
00F30:  DATA 69,61
00F32:  DATA 6C,69
00F34:  DATA 7A,65
00F36:  DATA 0D,0A
00F38:  DATA 00,00
00F3A:  DATA 09,5B
00F3C:  DATA 4D,49
00F3E:  DATA 53,20
00F40:  DATA 46,4D
00F42:  DATA 5D,20
00F44:  DATA 43,6F
00F46:  DATA 6E,6E
00F48:  DATA 65,63
00F4A:  DATA 74,65
00F4C:  DATA 64,0D
00F4E:  DATA 0A,00
00F50:  DATA 09,5B
00F52:  DATA 4D,49
00F54:  DATA 53,20
00F56:  DATA 46,4D
00F58:  DATA 5D,20
00F5A:  DATA 4E,6F
00F5C:  DATA 74,20
00F5E:  DATA 43,6F
00F60:  DATA 6E,6E
00F62:  DATA 65,63
00F64:  DATA 74,65
00F66:  DATA 64,0D
00F68:  DATA 0A,00
00F6A:  DATA 09,5B
00F6C:  DATA 53,4D
00F6E:  DATA 46,5D
00F70:  DATA 20,43
00F72:  DATA 6F,6E
00F74:  DATA 6E,65
00F76:  DATA 63,74
00F78:  DATA 65,64
00F7A:  DATA 0D,0A
00F7C:  DATA 00,00
00F7E:  DATA 09,5B
00F80:  DATA 53,4D
00F82:  DATA 46,5D
00F84:  DATA 20,4E
00F86:  DATA 6F,74
00F88:  DATA 20,43
00F8A:  DATA 6F,6E
00F8C:  DATA 6E,65
00F8E:  DATA 63,74
00F90:  DATA 65,64
00F92:  DATA 0D,0A
00F94:  DATA 00,00
00F96:  DATA 09,5B
00F98:  DATA 4D,49
00F9A:  DATA 53,20
00F9C:  DATA 46,4D
00F9E:  DATA 5D,20
00FA0:  DATA 25,30
00FA2:  DATA 38,4C
00FA4:  DATA 58,0D
00FA6:  DATA 0A,00
00FA8:  DATA 09,5B
00FAA:  DATA 4D,49
00FAC:  DATA 53,20
00FAE:  DATA 46,4D
00FB0:  DATA 5D,20
00FB2:  DATA 43,52
00FB4:  DATA 43,20
00FB6:  DATA 65,72
00FB8:  DATA 72,6F
00FBA:  DATA 72,20
00FBC:  DATA 2D,3E
00FBE:  DATA 20,69
00FC0:  DATA 6E,69
00FC2:  DATA 74,69
00FC4:  DATA 61,6C
00FC6:  DATA 69,7A
00FC8:  DATA 65,20
00FCA:  DATA 63,6F
00FCC:  DATA 75,6E
00FCE:  DATA 74,65
00FD0:  DATA 72,73
00FD2:  DATA 0D,0A
00FD4:  DATA 00,00
00FD6:  DATA 09,43
00FD8:  DATA 6F,6D
00FDA:  DATA 70,6C
00FDC:  DATA 65,74
00FDE:  DATA 65,0D
00FE0:  DATA 0A,00
00FE2:  DATA 09,46
00FE4:  DATA 69,65
00FE6:  DATA 6C,64
00FE8:  DATA 09,09
00FEA:  DATA 43,6F
00FEC:  DATA 75,6E
00FEE:  DATA 74,65
00FF0:  DATA 72,4E
00FF2:  DATA 61,6D
00FF4:  DATA 65,09
00FF6:  DATA 56,61
00FF8:  DATA 6C,75
00FFA:  DATA 65,0D
00FFC:  DATA 0A,00
00FFE:  DATA 09,2D
01000:  DATA 2D,2D
01002:  DATA 2D,2D
01004:  DATA 2D,2D
01006:  DATA 2D,2D
01008:  DATA 2D,2D
0100A:  DATA 2D,09
0100C:  DATA 2D,2D
0100E:  DATA 2D,2D
01010:  DATA 2D,2D
01012:  DATA 2D,2D
01014:  DATA 2D,2D
01016:  DATA 2D,2D
01018:  DATA 2D,09
0101A:  DATA 2D,2D
0101C:  DATA 2D,2D
0101E:  DATA 2D,2D
01020:  DATA 2D,2D
01022:  DATA 2D,2D
01024:  DATA 2D,2D
01026:  DATA 2D,0D
01028:  DATA 0A,00
0102A:  DATA 09,50
0102C:  DATA 49,43
0102E:  DATA 4C,4F
01030:  DATA 47,09
01032:  DATA 09,55
01034:  DATA 73,65
01036:  DATA 64,09
01038:  DATA 09,30
0103A:  DATA 78,25
0103C:  DATA 30,38
0103E:  DATA 4C,58
01040:  DATA 0D,0A
01042:  DATA 00,00
01044:  DATA 09,09
01046:  DATA 09,55
01048:  DATA 6E,63
0104A:  DATA 6F,70
0104C:  DATA 79,65
0104E:  DATA 64,09
01050:  DATA 30,78
01052:  DATA 25,30
01054:  DATA 38,4C
01056:  DATA 58,0D
01058:  DATA 0A,00
0105A:  DATA 09,09
0105C:  DATA 09,52
0105E:  DATA 65,73
01060:  DATA 65,72
01062:  DATA 76,65
01064:  DATA 09,09
01066:  DATA 30,78
01068:  DATA 25,30
0106A:  DATA 32,58
0106C:  DATA 2F,20
0106E:  DATA 30,78
01070:  DATA 25,30
01072:  DATA 32,58
01074:  DATA 0D,0A
01076:  DATA 00,00
01078:  DATA 09,45
0107A:  DATA 4E,56
0107C:  DATA 49,52
0107E:  DATA 4F,09
01080:  DATA 09,55
01082:  DATA 73,65
01084:  DATA 64,09
01086:  DATA 09,30
01088:  DATA 78,25
0108A:  DATA 30,38
0108C:  DATA 4C,58
0108E:  DATA 0D,0A
01090:  DATA 00,00
01092:  DATA 09,09
01094:  DATA 09,55
01096:  DATA 6E,63
01098:  DATA 6F,70
0109A:  DATA 79,65
0109C:  DATA 64,09
0109E:  DATA 30,78
010A0:  DATA 25,30
010A2:  DATA 38,4C
010A4:  DATA 58,0D
010A6:  DATA 0A,00
010A8:  DATA 09,09
010AA:  DATA 09,52
010AC:  DATA 65,73
010AE:  DATA 65,72
010B0:  DATA 76,65
010B2:  DATA 09,09
010B4:  DATA 30,78
010B6:  DATA 25,30
010B8:  DATA 32,58
010BA:  DATA 2F,20
010BC:  DATA 30,78
010BE:  DATA 25,30
010C0:  DATA 32,58
010C2:  DATA 0D,0A
010C4:  DATA 00,00
010C6:  DATA 09,49
010C8:  DATA 56,31
010CA:  DATA 20,48
010CC:  DATA 45,41
010CE:  DATA 44,45
010D0:  DATA 52,09
010D2:  DATA 55,73
010D4:  DATA 65,64
010D6:  DATA 09,09
010D8:  DATA 30,78
010DA:  DATA 25,30
010DC:  DATA 38,4C
010DE:  DATA 58,0D
010E0:  DATA 0A,00
010E2:  DATA 09,09
010E4:  DATA 09,55
010E6:  DATA 6E,63
010E8:  DATA 6F,70
010EA:  DATA 79,65
010EC:  DATA 64,09
010EE:  DATA 30,78
010F0:  DATA 25,30
010F2:  DATA 38,4C
010F4:  DATA 58,0D
010F6:  DATA 0A,00
010F8:  DATA 09,09
010FA:  DATA 09,52
010FC:  DATA 65,73
010FE:  DATA 65,72
01100:  DATA 76,65
01102:  DATA 09,09
01104:  DATA 30,78
01106:  DATA 25,30
01108:  DATA 32,58
0110A:  DATA 2F,20
0110C:  DATA 30,78
0110E:  DATA 25,30
01110:  DATA 32,58
01112:  DATA 0D,0A
01114:  DATA 00,00
01116:  DATA 09,49
01118:  DATA 56,31
0111A:  DATA 20,44
0111C:  DATA 41,54
0111E:  DATA 41,09
01120:  DATA 55,73
01122:  DATA 65,64
01124:  DATA 09,09
01126:  DATA 30,78
01128:  DATA 25,30
0112A:  DATA 38,4C
0112C:  DATA 58,0D
0112E:  DATA 0A,00
01130:  DATA 09,09
01132:  DATA 09,55
01134:  DATA 6E,63
01136:  DATA 6F,70
01138:  DATA 79,65
0113A:  DATA 64,09
0113C:  DATA 30,78
0113E:  DATA 25,30
01140:  DATA 38,4C
01142:  DATA 58,0D
01144:  DATA 0A,00
01146:  DATA 09,09
01148:  DATA 09,52
0114A:  DATA 65,73
0114C:  DATA 65,72
0114E:  DATA 76,65
01150:  DATA 09,09
01152:  DATA 30,78
01154:  DATA 25,30
01156:  DATA 32,58
01158:  DATA 2F,20
0115A:  DATA 30,78
0115C:  DATA 25,30
0115E:  DATA 32,58
01160:  DATA 0D,0A
01162:  DATA 00,00
01164:  DATA 09,49
01166:  DATA 56,32
01168:  DATA 20,48
0116A:  DATA 45,41
0116C:  DATA 44,45
0116E:  DATA 52,09
01170:  DATA 55,73
01172:  DATA 65,64
01174:  DATA 09,09
01176:  DATA 30,78
01178:  DATA 25,30
0117A:  DATA 38,4C
0117C:  DATA 58,0D
0117E:  DATA 0A,00
01180:  DATA 09,09
01182:  DATA 09,55
01184:  DATA 6E,63
01186:  DATA 6F,70
01188:  DATA 79,65
0118A:  DATA 64,09
0118C:  DATA 30,78
0118E:  DATA 25,30
01190:  DATA 38,4C
01192:  DATA 58,0D
01194:  DATA 0A,00
01196:  DATA 09,09
01198:  DATA 09,52
0119A:  DATA 65,73
0119C:  DATA 65,72
0119E:  DATA 76,65
011A0:  DATA 09,09
011A2:  DATA 30,78
011A4:  DATA 25,30
011A6:  DATA 32,58
011A8:  DATA 2F,20
011AA:  DATA 30,78
011AC:  DATA 25,30
011AE:  DATA 32,58
011B0:  DATA 0D,0A
011B2:  DATA 00,00
011B4:  DATA 09,49
011B6:  DATA 56,32
011B8:  DATA 20,44
011BA:  DATA 41,54
011BC:  DATA 41,09
011BE:  DATA 55,73
011C0:  DATA 65,64
011C2:  DATA 09,09
011C4:  DATA 30,78
011C6:  DATA 25,30
011C8:  DATA 38,4C
011CA:  DATA 58,0D
011CC:  DATA 0A,00
011CE:  DATA 09,09
011D0:  DATA 09,55
011D2:  DATA 6E,63
011D4:  DATA 6F,70
011D6:  DATA 79,65
011D8:  DATA 64,09
011DA:  DATA 30,78
011DC:  DATA 25,30
011DE:  DATA 38,4C
011E0:  DATA 58,0D
011E2:  DATA 0A,00
011E4:  DATA 09,09
011E6:  DATA 09,52
011E8:  DATA 65,73
011EA:  DATA 65,72
011EC:  DATA 76,65
011EE:  DATA 09,09
011F0:  DATA 30,78
011F2:  DATA 25,30
011F4:  DATA 32,58
011F6:  DATA 2F,20
011F8:  DATA 30,78
011FA:  DATA 25,30
011FC:  DATA 32,58
011FE:  DATA 0D,0A
01200:  DATA 00,00
01202:  DATA 09,3D
01204:  DATA 3D,3D
01206:  DATA 3D,3D
01208:  DATA 3D,3D
0120A:  DATA 3D,3D
0120C:  DATA 3D,3D
0120E:  DATA 3D,3D
01210:  DATA 3D,3D
01212:  DATA 3D,3D
01214:  DATA 3D,3D
01216:  DATA 3D,3D
01218:  DATA 3D,3D
0121A:  DATA 3D,3D
0121C:  DATA 3D,3D
0121E:  DATA 3D,3D
01220:  DATA 3D,3D
01222:  DATA 3D,3D
01224:  DATA 3D,3D
01226:  DATA 3D,3D
01228:  DATA 3D,3D
0122A:  DATA 3D,3D
0122C:  DATA 3D,3D
0122E:  DATA 3D,3D
01230:  DATA 3D,3D
01232:  DATA 3D,3D
01234:  DATA 3D,0D
01236:  DATA 0A,00
01238:  DATA 43,52
0123A:  DATA 43,20
0123C:  DATA 76,65
0123E:  DATA 72,69
01240:  DATA 66,69
01242:  DATA 63,61
01244:  DATA 74,69
01246:  DATA 6F,6E
01248:  DATA 20,70
0124A:  DATA 61,73
0124C:  DATA 73,65
0124E:  DATA 64,20
01250:  DATA 6F,6E
01252:  DATA 20,61
01254:  DATA 74,74
01256:  DATA 65,6D
01258:  DATA 70,74
0125A:  DATA 20,25
0125C:  DATA 64,0D
0125E:  DATA 0A,00
01260:  DATA 45,72
01262:  DATA 72,6F
01264:  DATA 72,3A
01266:  DATA 20,43
01268:  DATA 52,43
0126A:  DATA 20,76
0126C:  DATA 65,72
0126E:  DATA 69,66
01270:  DATA 69,63
01272:  DATA 61,74
01274:  DATA 69,6F
01276:  DATA 6E,20
01278:  DATA 66,61
0127A:  DATA 69,6C
0127C:  DATA 65,64
0127E:  DATA 20,61
01280:  DATA 66,74
01282:  DATA 65,72
01284:  DATA 20,25
01286:  DATA 64,20
01288:  DATA 61,74
0128A:  DATA 74,65
0128C:  DATA 6D,70
0128E:  DATA 74,73
01290:  DATA 0D,0A
01292:  DATA 00,00
01294:  DATA 0D,0A
01296:  DATA 5F,5F
01298:  DATA 5F,5F
0129A:  DATA 5F,5F
0129C:  DATA 5F,5F
0129E:  DATA 5F,5F
012A0:  DATA 5F,5F
012A2:  DATA 5F,5F
012A4:  DATA 5F,5F
012A6:  DATA 5F,5F
012A8:  DATA 5F,5F
012AA:  DATA 5F,5F
012AC:  DATA 5F,5F
012AE:  DATA 5F,5F
012B0:  DATA 5F,5F
012B2:  DATA 5F,5F
012B4:  DATA 0D,0A
012B6:  DATA 5F,5F
012B8:  DATA 5F,5F
012BA:  DATA 5F,53
012BC:  DATA 74,61
012BE:  DATA 72,74
012C0:  DATA 20,65
012C2:  DATA 78,65
012C4:  DATA 63,75
012C6:  DATA 74,65
012C8:  DATA 5F,6D
012CA:  DATA 69,73
012CC:  DATA 73,69
012CE:  DATA 6F,6E
012D0:  DATA 5F,5F
012D2:  DATA 5F,5F
012D4:  DATA 5F,0D
012D6:  DATA 0A,0D
012D8:  DATA 0A,00
012DA:  DATA 43,6F
012DC:  DATA 6D,6D
012DE:  DATA 61,6E
012E0:  DATA 64,20
012E2:  DATA 49,44
012E4:  DATA 3A,20
012E6:  DATA 25,58
012E8:  DATA 0D,0A
012EA:  DATA 0D,0A
012EC:  DATA 00,00
012EE:  DATA 09,09
012F0:  DATA 2D,3E
012F2:  DATA 20,47
012F4:  DATA 65,74
012F6:  DATA 20,74
012F8:  DATA 69,6D
012FA:  DATA 65,20
012FC:  DATA 74,6F
012FE:  DATA 20,25
01300:  DATA 6C,75
01302:  DATA 20,64
01304:  DATA 61,79
01306:  DATA 73,2C
01308:  DATA 20,25
0130A:  DATA 30,32
0130C:  DATA 75,3A
0130E:  DATA 25,30
01310:  DATA 32,75
01312:  DATA 3A,25
01314:  DATA 30,32
01316:  DATA 75,0D
01318:  DATA 0A,00
0131A:  DATA 09,09
0131C:  DATA 2D,3E
0131E:  DATA 20,49
01320:  DATA 6E,76
01322:  DATA 61,6C
01324:  DATA 69,64
01326:  DATA 20,43
01328:  DATA 4D,44
0132A:  DATA 20,49
0132C:  DATA 44,21
0132E:  DATA 0D,0A
01330:  DATA 00,00
01332:  DATA 0D,0A
01334:  DATA 5F,5F
01336:  DATA 5F,5F
01338:  DATA 5F,5F
0133A:  DATA 45,6E
0133C:  DATA 64,20
0133E:  DATA 65,78
01340:  DATA 65,63
01342:  DATA 75,74
01344:  DATA 65,5F
01346:  DATA 6D,69
01348:  DATA 73,73
0134A:  DATA 69,6F
0134C:  DATA 6E,5F
0134E:  DATA 5F,5F
01350:  DATA 5F,5F
01352:  DATA 5F,0D
01354:  DATA 0A,5F
01356:  DATA 5F,5F
01358:  DATA 5F,5F
0135A:  DATA 5F,5F
0135C:  DATA 5F,5F
0135E:  DATA 5F,5F
01360:  DATA 5F,5F
01362:  DATA 5F,5F
01364:  DATA 5F,5F
01366:  DATA 5F,5F
01368:  DATA 5F,5F
0136A:  DATA 5F,5F
0136C:  DATA 5F,5F
0136E:  DATA 5F,5F
01370:  DATA 5F,5F
01372:  DATA 5F,5F
01374:  DATA 0D,0A
01376:  DATA 00,00
01378:  DATA 53,74
0137A:  DATA 61,72
0137C:  DATA 74,20
0137E:  DATA 65,78
01380:  DATA 65,63
01382:  DATA 75,74
01384:  DATA 65,5F
01386:  DATA 63,6F
01388:  DATA 6D,6D
0138A:  DATA 61,6E
0138C:  DATA 64,0D
0138E:  DATA 0A,00
01390:  DATA 09,2D
01392:  DATA 3E,20
01394:  DATA 55,70
01396:  DATA 6C,69
01398:  DATA 6E,6B
0139A:  DATA 20,63
0139C:  DATA 6F,6D
0139E:  DATA 6D,61
013A0:  DATA 6E,64
013A2:  DATA 0D,0A
013A4:  DATA 00,00
013A6:  DATA 09,20
013A8:  DATA 20,20
013AA:  DATA 54,72
013AC:  DATA 61,6E
013AE:  DATA 73,6D
013B0:  DATA 69,74
013B2:  DATA 20,41
013B4:  DATA 63,6B
013B6:  DATA 6E,6F
013B8:  DATA 6C,65
013BA:  DATA 67,64
013BC:  DATA 65,0D
013BE:  DATA 0A,00
013C0:  DATA 09,2D
013C2:  DATA 3E,20
013C4:  DATA 53,74
013C6:  DATA 61,74
013C8:  DATA 75,73
013CA:  DATA 20,63
013CC:  DATA 68,65
013CE:  DATA 63,6B
013D0:  DATA 0D,0A
013D2:  DATA 00,00
013D4:  DATA 09,20
013D6:  DATA 20,20
013D8:  DATA 54,72
013DA:  DATA 61,6E
013DC:  DATA 73,6D
013DE:  DATA 69,74
013E0:  DATA 20,4D
013E2:  DATA 49,53
013E4:  DATA 20,4D
013E6:  DATA 43,55
013E8:  DATA 20,53
013EA:  DATA 74,61
013EC:  DATA 74,75
013EE:  DATA 73,0D
013F0:  DATA 0A,00
013F2:  DATA 66,69
013F4:  DATA 6E,69
013F6:  DATA 73,68
013F8:  DATA 65,64
013FA:  DATA 20,69
013FC:  DATA 6E,20
013FE:  DATA 73,74
01400:  DATA 61,74
01402:  DATA 75,73
01404:  DATA 5F,63
01406:  DATA 68,65
01408:  DATA 63,6B
0140A:  DATA 0D,0A
0140C:  DATA 00,00
0140E:  DATA 09,2D
01410:  DATA 3E,20
01412:  DATA 53,4D
01414:  DATA 46,20
01416:  DATA 61,76
01418:  DATA 61,69
0141A:  DATA 6C,61
0141C:  DATA 62,6C
0141E:  DATA 65,20
01420:  DATA 63,68
01422:  DATA 65,63
01424:  DATA 6B,0D
01426:  DATA 0A,00
01428:  DATA 09,20
0142A:  DATA 20,20
0142C:  DATA 54,72
0142E:  DATA 61,6E
01430:  DATA 73,6D
01432:  DATA 69,74
01434:  DATA 20,41
01436:  DATA 63,6B
01438:  DATA 6E,6F
0143A:  DATA 77,6C
0143C:  DATA 65,64
0143E:  DATA 67,65
01440:  DATA 6D,65
01442:  DATA 6E,74
01444:  DATA 0D,0A
01446:  DATA 00,00
01448:  DATA 09,09
0144A:  DATA 2D,3E
0144C:  DATA 20,64
0144E:  DATA 65,6E
01450:  DATA 69,65
01452:  DATA 64,0D
01454:  DATA 0A,00
01456:  DATA 09,09
01458:  DATA 2D,3E
0145A:  DATA 20,61
0145C:  DATA 6C,6C
0145E:  DATA 6F,77
01460:  DATA 65,64
01462:  DATA 0D,0A
01464:  DATA 00,00
01466:  DATA 09,09
01468:  DATA 2D,3E
0146A:  DATA 20,44
0146C:  DATA 65,71
0146E:  DATA 75,65
01470:  DATA 75,65
01472:  DATA 64,3A
01474:  DATA 20,66
01476:  DATA 75,6E
01478:  DATA 63,3D
0147A:  DATA 25,75
0147C:  DATA 20,6D
0147E:  DATA 69,73
01480:  DATA 73,69
01482:  DATA 6F,6E
01484:  DATA 3D,25
01486:  DATA 75,20
01488:  DATA 73,69
0148A:  DATA 7A,65
0148C:  DATA 3D,25
0148E:  DATA 6C,64
01490:  DATA 20,61
01492:  DATA 64,64
01494:  DATA 72,3D
01496:  DATA 25,6C
01498:  DATA 64,0D
0149A:  DATA 0A,00
0149C:  DATA 09,09
0149E:  DATA 20,20
014A0:  DATA 20,55
014A2:  DATA 6E,6B
014A4:  DATA 6E,6F
014A6:  DATA 77,6E
014A8:  DATA 20,66
014AA:  DATA 75,6E
014AC:  DATA 63,5F
014AE:  DATA 74,79
014B0:  DATA 70,65
014B2:  DATA 3D,25
014B4:  DATA 75,0D
014B6:  DATA 0A,00
014B8:  DATA 09,09
014BA:  DATA 2D,3E
014BC:  DATA 20,43
014BE:  DATA 6F,6D
014C0:  DATA 70,6C
014C2:  DATA 65,74
014C4:  DATA 65,64
014C6:  DATA 20,25
014C8:  DATA 75,20
014CA:  DATA 6F,70
014CC:  DATA 65,72
014CE:  DATA 61,74
014D0:  DATA 69,6F
014D2:  DATA 6E,73
014D4:  DATA 0D,0A
014D6:  DATA 00,00
014D8:  DATA 09,2D
014DA:  DATA 3E,20
014DC:  DATA 54,49
014DE:  DATA 4D,45
014E0:  DATA 20,52
014E2:  DATA 65,63
014E4:  DATA 65,69
014E6:  DATA 76,65
014E8:  DATA 0D,0A
014EA:  DATA 00,00
014EC:  DATA 09,20
014EE:  DATA 20,20
014F0:  DATA 54,72
014F2:  DATA 61,6E
014F4:  DATA 73,6D
014F6:  DATA 69,74
014F8:  DATA 20,41
014FA:  DATA 63,6B
014FC:  DATA 6E,6F
014FE:  DATA 6C,65
01500:  DATA 67,64
01502:  DATA 65,0D
01504:  DATA 0A,00
01506:  DATA 09,09
01508:  DATA 2D,3E
0150A:  DATA 20,53
0150C:  DATA 65,74
0150E:  DATA 20,74
01510:  DATA 69,6D
01512:  DATA 65,20
01514:  DATA 74,6F
01516:  DATA 20,25
01518:  DATA 6C,75
0151A:  DATA 20,64
0151C:  DATA 61,79
0151E:  DATA 73,2C
01520:  DATA 20,25
01522:  DATA 30,32
01524:  DATA 75,3A
01526:  DATA 25,30
01528:  DATA 32,75
0152A:  DATA 3A,25
0152C:  DATA 30,32
0152E:  DATA 75,0D
01530:  DATA 0A,00
01532:  DATA 53,74
01534:  DATA 61,72
01536:  DATA 74,20
01538:  DATA 4D,4F
0153A:  DATA 44,45
0153C:  DATA 20,4D
0153E:  DATA 45,41
01540:  DATA 53,20
01542:  DATA 49,56
01544:  DATA 0D,0A
01546:  DATA 00,00
01548:  DATA 0D,0A
0154A:  DATA 41,44
0154C:  DATA 44,20
0154E:  DATA 53,4D
01550:  DATA 46,20
01552:  DATA 51,55
01554:  DATA 45,55
01556:  DATA 45,0D
01558:  DATA 0A,00
0155A:  DATA 09,4D
0155C:  DATA 69,73
0155E:  DATA 73,69
01560:  DATA 6F,6E
01562:  DATA 20,49
01564:  DATA 44,3A
01566:  DATA 20,20
01568:  DATA 20,25
0156A:  DATA 30,32
0156C:  DATA 58,0D
0156E:  DATA 0A,00
01570:  DATA 09,46
01572:  DATA 75,6E
01574:  DATA 63,74
01576:  DATA 69,6F
01578:  DATA 6E,20
0157A:  DATA 54,79
0157C:  DATA 70,65
0157E:  DATA 3A,25
01580:  DATA 30,32
01582:  DATA 58,0D
01584:  DATA 0A,00
01586:  DATA 09,57
01588:  DATA 72,69
0158A:  DATA 74,65
0158C:  DATA 20,4D
0158E:  DATA 6F,64
01590:  DATA 65,3A
01592:  DATA 20,20
01594:  DATA 20,25
01596:  DATA 30,32
01598:  DATA 58,0D
0159A:  DATA 0A,00
0159C:  DATA 09,53
0159E:  DATA 6F,75
015A0:  DATA 72,63
015A2:  DATA 65,20
015A4:  DATA 54,79
015A6:  DATA 70,65
015A8:  DATA 3A,20
015AA:  DATA 20,25
015AC:  DATA 30,32
015AE:  DATA 58,0D
015B0:  DATA 0A,00
015B2:  DATA 09,53
015B4:  DATA 74,61
015B6:  DATA 72,74
015B8:  DATA 20,41
015BA:  DATA 64,64
015BC:  DATA 72,65
015BE:  DATA 73,73
015C0:  DATA 3A,25
015C2:  DATA 30,34
015C4:  DATA 58,0D
015C6:  DATA 0A,00
015C8:  DATA 09,53
015CA:  DATA 69,7A
015CC:  DATA 65,3A
015CE:  DATA 20,20
015D0:  DATA 20,20
015D2:  DATA 20,20
015D4:  DATA 20,20
015D6:  DATA 20,25
015D8:  DATA 30,34
015DA:  DATA 58,0D
015DC:  DATA 0A,00
015DE:  DATA 0D,0A
015E0:  DATA 41,44
015E2:  DATA 44,20
015E4:  DATA 53,4D
015E6:  DATA 46,20
015E8:  DATA 51,55
015EA:  DATA 45,55
015EC:  DATA 45,0D
015EE:  DATA 0A,00
015F0:  DATA 09,4D
015F2:  DATA 69,73
015F4:  DATA 73,69
015F6:  DATA 6F,6E
015F8:  DATA 20,49
015FA:  DATA 44,3A
015FC:  DATA 20,20
015FE:  DATA 20,25
01600:  DATA 30,32
01602:  DATA 58,0D
01604:  DATA 0A,00
01606:  DATA 09,46
01608:  DATA 75,6E
0160A:  DATA 63,74
0160C:  DATA 69,6F
0160E:  DATA 6E,20
01610:  DATA 54,79
01612:  DATA 70,65
01614:  DATA 3A,25
01616:  DATA 30,32
01618:  DATA 58,0D
0161A:  DATA 0A,00
0161C:  DATA 09,57
0161E:  DATA 72,69
01620:  DATA 74,65
01622:  DATA 20,4D
01624:  DATA 6F,64
01626:  DATA 65,3A
01628:  DATA 20,20
0162A:  DATA 20,25
0162C:  DATA 30,32
0162E:  DATA 58,0D
01630:  DATA 0A,00
01632:  DATA 09,53
01634:  DATA 6F,75
01636:  DATA 72,63
01638:  DATA 65,20
0163A:  DATA 54,79
0163C:  DATA 70,65
0163E:  DATA 3A,20
01640:  DATA 20,25
01642:  DATA 30,32
01644:  DATA 58,0D
01646:  DATA 0A,00
01648:  DATA 09,53
0164A:  DATA 74,61
0164C:  DATA 72,74
0164E:  DATA 20,41
01650:  DATA 64,64
01652:  DATA 72,65
01654:  DATA 73,73
01656:  DATA 3A,25
01658:  DATA 30,34
0165A:  DATA 58,0D
0165C:  DATA 0A,00
0165E:  DATA 09,53
01660:  DATA 69,7A
01662:  DATA 65,3A
01664:  DATA 20,20
01666:  DATA 20,20
01668:  DATA 20,20
0166A:  DATA 20,20
0166C:  DATA 20,25
0166E:  DATA 30,34
01670:  DATA 58,0D
01672:  DATA 0A,00
01674:  DATA 45,6E
01676:  DATA 64,20
01678:  DATA 4D,4F
0167A:  DATA 44,45
0167C:  DATA 20,4D
0167E:  DATA 45,41
01680:  DATA 53,20
01682:  DATA 49,56
01684:  DATA 20,6D
01686:  DATA 69,73
01688:  DATA 73,69
0168A:  DATA 6F,6E
0168C:  DATA 0D,0A
0168E:  DATA 00,00
01690:  DATA 53,74
01692:  DATA 61,72
01694:  DATA 74,20
01696:  DATA 4D,4F
01698:  DATA 44,45
0169A:  DATA 20,49
0169C:  DATA 56,20
0169E:  DATA 44,45
016A0:  DATA 42,55
016A2:  DATA 47,0D
016A4:  DATA 0A,00
016A6:  DATA 09,49
016A8:  DATA 44,3A
016AA:  DATA 20,25
016AC:  DATA 30,32
016AE:  DATA 58,0D
016B0:  DATA 0A,00
016B2:  DATA 09,53
016B4:  DATA 6C,65
016B6:  DATA 65,70
016B8:  DATA 54,69
016BA:  DATA 6D,65
016BC:  DATA 3A,20
016BE:  DATA 20,20
016C0:  DATA 20,20
016C2:  DATA 20,20
016C4:  DATA 20,30
016C6:  DATA 78,25
016C8:  DATA 30,34
016CA:  DATA 58,0D
016CC:  DATA 0A,00
016CE:  DATA 09,4C
016D0:  DATA 6F,67
016D2:  DATA 43,75
016D4:  DATA 72,72
016D6:  DATA 54,68
016D8:  DATA 72,65
016DA:  DATA 73,68
016DC:  DATA 6F,6C
016DE:  DATA 64,3A
016E0:  DATA 20,30
016E2:  DATA 78,25
016E4:  DATA 30,34
016E6:  DATA 58,0D
016E8:  DATA 0A,00
016EA:  DATA 09,50
016EC:  DATA 44,54
016EE:  DATA 68,72
016F0:  DATA 65,73
016F2:  DATA 68,6F
016F4:  DATA 6C,64
016F6:  DATA 3A,20
016F8:  DATA 20,20
016FA:  DATA 20,20
016FC:  DATA 20,30
016FE:  DATA 78,25
01700:  DATA 30,34
01702:  DATA 58,0D
01704:  DATA 0A,00
01706:  DATA 09,43
01708:  DATA 75,72
0170A:  DATA 72,65
0170C:  DATA 6E,74
0170E:  DATA 4C,69
01710:  DATA 6D,69
01712:  DATA 74,3A
01714:  DATA 20,20
01716:  DATA 20,20
01718:  DATA 20,30
0171A:  DATA 78,25
0171C:  DATA 30,34
0171E:  DATA 58,0D
01720:  DATA 0A,00
01722:  DATA 09,4D
01724:  DATA 65,61
01726:  DATA 73,75
01728:  DATA 72,65
0172A:  DATA 6D,65
0172C:  DATA 6E,74
0172E:  DATA 54,69
01730:  DATA 6D,65
01732:  DATA 3A,20
01734:  DATA 20,30
01736:  DATA 78,25
01738:  DATA 30,34
0173A:  DATA 58,0D
0173C:  DATA 0A,00
0173E:  DATA 5B,49
01740:  DATA 56,44
01742:  DATA 42,47
01744:  DATA 5D,20
01746:  DATA 45,6E
01748:  DATA 64,20
0174A:  DATA 4D,4F
0174C:  DATA 44,45
0174E:  DATA 20,49
01750:  DATA 56,20
01752:  DATA 44,45
01754:  DATA 42,55
01756:  DATA 47,0D
01758:  DATA 0A,00
0175A:  DATA 74,65
0175C:  DATA 6D,70
0175E:  DATA 5F,74
01760:  DATA 6F,70
01762:  DATA 2C,20
01764:  DATA 74,65
01766:  DATA 6D,70
01768:  DATA 5F,62
0176A:  DATA 6F,74
0176C:  DATA 2C,20
0176E:  DATA 74,65
01770:  DATA 6D,70
01772:  DATA 5F,6D
01774:  DATA 69,73
01776:  DATA 37,2C
01778:  DATA 20,70
0177A:  DATA 64,0D
0177C:  DATA 0A,00
0177E:  DATA 4D,45
01780:  DATA 41,53
01782:  DATA 20,49
01784:  DATA 56,20
01786:  DATA 43,6F
01788:  DATA 6D,6D
0178A:  DATA 61,6E
0178C:  DATA 64,20
0178E:  DATA 50,61
01790:  DATA 72,61
01792:  DATA 6D,65
01794:  DATA 74,65
01796:  DATA 72,73
01798:  DATA 3A,0D
0179A:  DATA 0A,00
0179C:  DATA 09,49
0179E:  DATA 44,3A
017A0:  DATA 20,25
017A2:  DATA 30,32
017A4:  DATA 58,0D
017A6:  DATA 0A,00
017A8:  DATA 09,53
017AA:  DATA 77,65
017AC:  DATA 65,70
017AE:  DATA 49,6E
017B0:  DATA 74,65
017B2:  DATA 72,76
017B4:  DATA 61,6C
017B6:  DATA 20,20
017B8:  DATA 20,3A
017BA:  DATA 25,6C
017BC:  DATA 75,5B
017BE:  DATA 6D,73
017C0:  DATA 5D,0D
017C2:  DATA 0A,00
017C4:  DATA 09,50
017C6:  DATA 44,20
017C8:  DATA 54,68
017CA:  DATA 72,65
017CC:  DATA 73,68
017CE:  DATA 6F,6C
017D0:  DATA 64,20
017D2:  DATA 20,20
017D4:  DATA 20,3A
017D6:  DATA 25,6C
017D8:  DATA 75,5B
017DA:  DATA 57,2F
017DC:  DATA 6D,32
017DE:  DATA 5D,0D
017E0:  DATA 0A,00
017E2:  DATA 09,53
017E4:  DATA 77,65
017E6:  DATA 65,70
017E8:  DATA 4C,69
017EA:  DATA 6D,69
017EC:  DATA 74,20
017EE:  DATA 20,20
017F0:  DATA 20,20
017F2:  DATA 20,3A
017F4:  DATA 25,6C
017F6:  DATA 75,5B
017F8:  DATA 6D,41
017FA:  DATA 5D,0D
017FC:  DATA 0A,00
017FE:  DATA 09,4C
01800:  DATA 6F,67
01802:  DATA 54,68
01804:  DATA 72,65
01806:  DATA 73,68
01808:  DATA 6F,6C
0180A:  DATA 64,20
0180C:  DATA 20,20
0180E:  DATA 20,3A
01810:  DATA 25,6C
01812:  DATA 75,5B
01814:  DATA 6D,41
01816:  DATA 5D,0D
01818:  DATA 0A,00
0181A:  DATA 09,4D
0181C:  DATA 65,61
0181E:  DATA 73,75
01820:  DATA 72,65
01822:  DATA 6D,65
01824:  DATA 6E,74
01826:  DATA 54,69
01828:  DATA 6D,65
0182A:  DATA 20,3A
0182C:  DATA 25,6C
0182E:  DATA 75,5B
01830:  DATA 73,5D
01832:  DATA 0D,0A
01834:  DATA 0D,0A
01836:  DATA 00,00
01838:  DATA 53,74
0183A:  DATA 61,72
0183C:  DATA 74,20
0183E:  DATA 4D,4F
01840:  DATA 44,45
01842:  DATA 20,4D
01844:  DATA 45,41
01846:  DATA 53,20
01848:  DATA 50,44
0184A:  DATA 0D,0A
0184C:  DATA 00,00
0184E:  DATA 45,6E
01850:  DATA 64,20
01852:  DATA 4D,4F
01854:  DATA 44,45
01856:  DATA 20,4D
01858:  DATA 45,41
0185A:  DATA 53,20
0185C:  DATA 50,44
0185E:  DATA 0D,0A
01860:  DATA 00,00
01862:  DATA 53,74
01864:  DATA 61,72
01866:  DATA 74,20
01868:  DATA 46,6C
0186A:  DATA 61,73
0186C:  DATA 68,20
0186E:  DATA 45,72
01870:  DATA 61,73
01872:  DATA 65,20
01874:  DATA 41,6C
01876:  DATA 6C,0D
01878:  DATA 0A,00
0187A:  DATA 45,6E
0187C:  DATA 64,20
0187E:  DATA 46,6C
01880:  DATA 61,73
01882:  DATA 68,20
01884:  DATA 45,72
01886:  DATA 61,73
01888:  DATA 65,20
0188A:  DATA 41,6C
0188C:  DATA 6C,0D
0188E:  DATA 0A,00
01890:  DATA 53,74
01892:  DATA 61,72
01894:  DATA 74,20
01896:  DATA 46,6C
01898:  DATA 61,73
0189A:  DATA 68,20
0189C:  DATA 45,72
0189E:  DATA 61,73
018A0:  DATA 65,20
018A2:  DATA 31,20
018A4:  DATA 53,65
018A6:  DATA 63,74
018A8:  DATA 6F,72
018AA:  DATA 0D,0A
018AC:  DATA 00,00
018AE:  DATA 09,53
018B0:  DATA 65,63
018B2:  DATA 74,6F
018B4:  DATA 72,20
018B6:  DATA 41,64
018B8:  DATA 64,72
018BA:  DATA 65,73
018BC:  DATA 73,3A
018BE:  DATA 20,30
018C0:  DATA 78,25
018C2:  DATA 30,38
018C4:  DATA 4C,58
018C6:  DATA 0D,0A
018C8:  DATA 00,00
018CA:  DATA 45,6E
018CC:  DATA 64,20
018CE:  DATA 46,6C
018D0:  DATA 61,73
018D2:  DATA 68,20
018D4:  DATA 45,72
018D6:  DATA 61,73
018D8:  DATA 65,20
018DA:  DATA 31,20
018DC:  DATA 53,65
018DE:  DATA 63,74
018E0:  DATA 6F,72
018E2:  DATA 0D,0A
018E4:  DATA 00,00
018E6:  DATA 53,74
018E8:  DATA 61,72
018EA:  DATA 74,20
018EC:  DATA 46,6C
018EE:  DATA 61,73
018F0:  DATA 68,20
018F2:  DATA 45,72
018F4:  DATA 61,73
018F6:  DATA 65,20
018F8:  DATA 34,6B
018FA:  DATA 42,79
018FC:  DATA 74,65
018FE:  DATA 20,53
01900:  DATA 75,62
01902:  DATA 73,65
01904:  DATA 63,74
01906:  DATA 6F,72
01908:  DATA 0D,0A
0190A:  DATA 00,00
0190C:  DATA 09,53
0190E:  DATA 75,62
01910:  DATA 73,65
01912:  DATA 63,74
01914:  DATA 6F,72
01916:  DATA 20,41
01918:  DATA 64,64
0191A:  DATA 72,65
0191C:  DATA 73,73
0191E:  DATA 3A,20
01920:  DATA 30,78
01922:  DATA 25,30
01924:  DATA 38,4C
01926:  DATA 58,0D
01928:  DATA 0A,00
0192A:  DATA 45,6E
0192C:  DATA 64,20
0192E:  DATA 46,6C
01930:  DATA 61,73
01932:  DATA 68,20
01934:  DATA 45,72
01936:  DATA 61,73
01938:  DATA 65,20
0193A:  DATA 34,6B
0193C:  DATA 42,79
0193E:  DATA 74,65
01940:  DATA 20,53
01942:  DATA 75,62
01944:  DATA 73,65
01946:  DATA 63,74
01948:  DATA 6F,72
0194A:  DATA 0D,0A
0194C:  DATA 00,00
0194E:  DATA 53,74
01950:  DATA 61,72
01952:  DATA 74,20
01954:  DATA 46,6C
01956:  DATA 61,73
01958:  DATA 68,20
0195A:  DATA 45,72
0195C:  DATA 61,73
0195E:  DATA 65,20
01960:  DATA 36,34
01962:  DATA 6B,42
01964:  DATA 79,74
01966:  DATA 65,20
01968:  DATA 53,75
0196A:  DATA 62,73
0196C:  DATA 65,63
0196E:  DATA 74,6F
01970:  DATA 72,0D
01972:  DATA 0A,00
01974:  DATA 09,53
01976:  DATA 75,62
01978:  DATA 73,65
0197A:  DATA 63,74
0197C:  DATA 6F,72
0197E:  DATA 20,41
01980:  DATA 64,64
01982:  DATA 72,65
01984:  DATA 73,73
01986:  DATA 3A,20
01988:  DATA 30,78
0198A:  DATA 25,30
0198C:  DATA 38,4C
0198E:  DATA 58,0D
01990:  DATA 0A,00
01992:  DATA 45,6E
01994:  DATA 64,20
01996:  DATA 46,6C
01998:  DATA 61,73
0199A:  DATA 68,20
0199C:  DATA 45,72
0199E:  DATA 61,73
019A0:  DATA 65,20
019A2:  DATA 36,34
019A4:  DATA 6B,42
019A6:  DATA 79,74
019A8:  DATA 65,20
019AA:  DATA 53,75
019AC:  DATA 62,73
019AE:  DATA 65,63
019B0:  DATA 74,6F
019B2:  DATA 72,0D
019B4:  DATA 0A,00
019B6:  DATA 53,74
019B8:  DATA 61,72
019BA:  DATA 74,20
019BC:  DATA 46,6C
019BE:  DATA 61,73
019C0:  DATA 68,20
019C2:  DATA 57,72
019C4:  DATA 69,74
019C6:  DATA 65,20
019C8:  DATA 44,65
019CA:  DATA 6D,6F
019CC:  DATA 0D,0A
019CE:  DATA 00,00
019D0:  DATA 09,4D
019D2:  DATA 4F,44
019D4:  DATA 45,20
019D6:  DATA 20,20
019D8:  DATA 20,20
019DA:  DATA 3A,20
019DC:  DATA 25,30
019DE:  DATA 32,58
019E0:  DATA 0D,0A
019E2:  DATA 00,00
019E4:  DATA 09,41
019E6:  DATA 64,64
019E8:  DATA 72,65
019EA:  DATA 73,73
019EC:  DATA 20,20
019EE:  DATA 3A,20
019F0:  DATA 30,78
019F2:  DATA 25,30
019F4:  DATA 38,4C
019F6:  DATA 58,0D
019F8:  DATA 0A,00
019FA:  DATA 09,50
019FC:  DATA 61,63
019FE:  DATA 6B,65
01A00:  DATA 74,4E
01A02:  DATA 75,6D
01A04:  DATA 3A,20
01A06:  DATA 30,78
01A08:  DATA 25,30
01A0A:  DATA 34,4C
01A0C:  DATA 58,0D
01A0E:  DATA 0A,00
01A10:  DATA 57,72
01A12:  DATA 69,74
01A14:  DATA 65,20
01A16:  DATA 44,61
01A18:  DATA 74,61
01A1A:  DATA 0D,0A
01A1C:  DATA 00,00
01A1E:  DATA 0D,0A
01A20:  DATA 5B,46
01A22:  DATA 4C,41
01A24:  DATA 53,48
01A26:  DATA 5D,20
01A28:  DATA 57,72
01A2A:  DATA 69,74
01A2C:  DATA 65,20
01A2E:  DATA 61,64
01A30:  DATA 64,72
01A32:  DATA 65,73
01A34:  DATA 73,20
01A36:  DATA 30,78
01A38:  DATA 25,30
01A3A:  DATA 38,4C
01A3C:  DATA 58,20
01A3E:  DATA 65,78
01A40:  DATA 63,65
01A42:  DATA 65,64
01A44:  DATA 73,20
01A46:  DATA 64,65
01A48:  DATA 76,69
01A4A:  DATA 63,65
01A4C:  DATA 20,65
01A4E:  DATA 6E,64
01A50:  DATA 20,30
01A52:  DATA 78,25
01A54:  DATA 30,38
01A56:  DATA 4C,58
01A58:  DATA 20,2D
01A5A:  DATA 3E,20
01A5C:  DATA 61,62
01A5E:  DATA 6F,72
01A60:  DATA 74,0D
01A62:  DATA 0A,00
01A64:  DATA 0D,0A
01A66:  DATA 5B,46
01A68:  DATA 4C,41
01A6A:  DATA 53,48
01A6C:  DATA 5D,20
01A6E:  DATA 52,65
01A70:  DATA 61,63
01A72:  DATA 68,65
01A74:  DATA 64,20
01A76:  DATA 65,6E
01A78:  DATA 64,2E
01A7A:  DATA 20,50
01A7C:  DATA 61,72
01A7E:  DATA 74,69
01A80:  DATA 61,6C
01A82:  DATA 20,77
01A84:  DATA 72,69
01A86:  DATA 74,65
01A88:  DATA 20,25
01A8A:  DATA 6C,75
01A8C:  DATA 20,62
01A8E:  DATA 79,74
01A90:  DATA 65,73
01A92:  DATA 20,28
01A94:  DATA 70,61
01A96:  DATA 63,6B
01A98:  DATA 65,74
01A9A:  DATA 20,74
01A9C:  DATA 72,75
01A9E:  DATA 6E,63
01AA0:  DATA 61,74
01AA2:  DATA 65,64
01AA4:  DATA 29,2E
01AA6:  DATA 0D,0A
01AA8:  DATA 00,00
01AAA:  DATA 45,6E
01AAC:  DATA 64,20
01AAE:  DATA 46,6C
01AB0:  DATA 61,73
01AB2:  DATA 68,20
01AB4:  DATA 57,72
01AB6:  DATA 69,74
01AB8:  DATA 65,20
01ABA:  DATA 44,65
01ABC:  DATA 6D,6F
01ABE:  DATA 0D,0A
01AC0:  DATA 00,00
01AC2:  DATA 53,74
01AC4:  DATA 61,72
01AC6:  DATA 74,20
01AC8:  DATA 46,6C
01ACA:  DATA 61,73
01ACC:  DATA 68,20
01ACE:  DATA 57,72
01AD0:  DATA 69,74
01AD2:  DATA 65,20
01AD4:  DATA 34,6B
01AD6:  DATA 42,79
01AD8:  DATA 74,65
01ADA:  DATA 20,53
01ADC:  DATA 75,62
01ADE:  DATA 73,65
01AE0:  DATA 63,74
01AE2:  DATA 6F,72
01AE4:  DATA 0D,0A
01AE6:  DATA 00,00
01AE8:  DATA 45,6E
01AEA:  DATA 64,20
01AEC:  DATA 46,6C
01AEE:  DATA 61,73
01AF0:  DATA 68,20
01AF2:  DATA 57,72
01AF4:  DATA 69,74
01AF6:  DATA 65,20
01AF8:  DATA 34,6B
01AFA:  DATA 42,79
01AFC:  DATA 74,65
01AFE:  DATA 20,53
01B00:  DATA 75,62
01B02:  DATA 73,65
01B04:  DATA 63,74
01B06:  DATA 6F,72
01B08:  DATA 0D,0A
01B0A:  DATA 00,00
01B0C:  DATA 53,74
01B0E:  DATA 61,72
01B10:  DATA 74,20
01B12:  DATA 46,6C
01B14:  DATA 61,73
01B16:  DATA 68,20
01B18:  DATA 52,65
01B1A:  DATA 61,64
01B1C:  DATA 0D,0A
01B1E:  DATA 00,00
01B20:  DATA 09,4D
01B22:  DATA 4F,44
01B24:  DATA 45,20
01B26:  DATA 20,20
01B28:  DATA 20,20
01B2A:  DATA 3A,20
01B2C:  DATA 25,30
01B2E:  DATA 32,58
01B30:  DATA 0D,0A
01B32:  DATA 00,00
01B34:  DATA 09,41
01B36:  DATA 64,64
01B38:  DATA 72,65
01B3A:  DATA 73,73
01B3C:  DATA 20,20
01B3E:  DATA 3A,20
01B40:  DATA 30,78
01B42:  DATA 25,30
01B44:  DATA 38,4C
01B46:  DATA 58,0D
01B48:  DATA 0A,00
01B4A:  DATA 09,50
01B4C:  DATA 61,63
01B4E:  DATA 6B,65
01B50:  DATA 74,4E
01B52:  DATA 75,6D
01B54:  DATA 3A,20
01B56:  DATA 30,78
01B58:  DATA 25,30
01B5A:  DATA 34,4C
01B5C:  DATA 58,0D
01B5E:  DATA 0A,00
01B60:  DATA 41,44
01B62:  DATA 44,52
01B64:  DATA 45,53
01B66:  DATA 53,20
01B68:  DATA 20,3A
01B6A:  DATA 0D,0A
01B6C:  DATA 00,00
01B6E:  DATA 4D,69
01B70:  DATA 73,73
01B72:  DATA 69,6F
01B74:  DATA 6E,20
01B76:  DATA 46,6C
01B78:  DATA 61,73
01B7A:  DATA 68,20
01B7C:  DATA 69,73
01B7E:  DATA 20,6E
01B80:  DATA 6F,74
01B82:  DATA 20,63
01B84:  DATA 6F,6E
01B86:  DATA 6E,65
01B88:  DATA 63,74
01B8A:  DATA 65,64
01B8C:  DATA 0D,0A
01B8E:  DATA 00,00
01B90:  DATA 5B,46
01B92:  DATA 4C,41
01B94:  DATA 53,48
01B96:  DATA 5D,20
01B98:  DATA 52,65
01B9A:  DATA 61,64
01B9C:  DATA 20,61
01B9E:  DATA 64,64
01BA0:  DATA 72,65
01BA2:  DATA 73,73
01BA4:  DATA 20,30
01BA6:  DATA 78,25
01BA8:  DATA 30,38
01BAA:  DATA 4C,58
01BAC:  DATA 20,65
01BAE:  DATA 78,63
01BB0:  DATA 65,65
01BB2:  DATA 64,73
01BB4:  DATA 20,64
01BB6:  DATA 65,76
01BB8:  DATA 69,63
01BBA:  DATA 65,20
01BBC:  DATA 65,6E
01BBE:  DATA 64,20
01BC0:  DATA 30,78
01BC2:  DATA 25,30
01BC4:  DATA 38,4C
01BC6:  DATA 58,20
01BC8:  DATA 2D,3E
01BCA:  DATA 20,73
01BCC:  DATA 74,6F
01BCE:  DATA 70,0D
01BD0:  DATA 0A,00
01BD2:  DATA 5B,46
01BD4:  DATA 4C,41
01BD6:  DATA 53,48
01BD8:  DATA 5D,20
01BDA:  DATA 45,6E
01BDC:  DATA 64,20
01BDE:  DATA 72,65
01BE0:  DATA 61,63
01BE2:  DATA 68,65
01BE4:  DATA 64,2E
01BE6:  DATA 20,50
01BE8:  DATA 61,72
01BEA:  DATA 74,69
01BEC:  DATA 61,6C
01BEE:  DATA 20,72
01BF0:  DATA 65,61
01BF2:  DATA 64,20
01BF4:  DATA 25,6C
01BF6:  DATA 75,20
01BF8:  DATA 62,79
01BFA:  DATA 74,65
01BFC:  DATA 73,2E
01BFE:  DATA 0D,0A
01C00:  DATA 00,00
01C02:  DATA 25,30
01C04:  DATA 38,4C
01C06:  DATA 58,20
01C08:  DATA 3A,20
01C0A:  DATA 00,00
01C0C:  DATA 45,6E
01C0E:  DATA 64,20
01C10:  DATA 46,6C
01C12:  DATA 61,73
01C14:  DATA 68,20
01C16:  DATA 52,65
01C18:  DATA 61,64
01C1A:  DATA 0D,0A
01C1C:  DATA 00,00
01C1E:  DATA 53,74
01C20:  DATA 61,72
01C22:  DATA 74,20
01C24:  DATA 46,6C
01C26:  DATA 61,73
01C28:  DATA 68,20
01C2A:  DATA 52,65
01C2C:  DATA 61,64
01C2E:  DATA 20,41
01C30:  DATA 64,64
01C32:  DATA 72,65
01C34:  DATA 73,73
01C36:  DATA 0D,0A
01C38:  DATA 00,00
01C3A:  DATA 52,65
01C3C:  DATA 61,64
01C3E:  DATA 20,44
01C40:  DATA 61,74
01C42:  DATA 61,3A
01C44:  DATA 20,25
01C46:  DATA 30,32
01C48:  DATA 58,20
01C4A:  DATA 25,30
01C4C:  DATA 32,58
01C4E:  DATA 20,25
01C50:  DATA 30,32
01C52:  DATA 58,20
01C54:  DATA 25,30
01C56:  DATA 32,58
01C58:  DATA 0D,0A
01C5A:  DATA 00,00
01C5C:  DATA 45,6E
01C5E:  DATA 64,20
01C60:  DATA 46,6C
01C62:  DATA 61,73
01C64:  DATA 68,20
01C66:  DATA 52,65
01C68:  DATA 61,64
01C6A:  DATA 20,41
01C6C:  DATA 64,64
01C6E:  DATA 72,65
01C70:  DATA 73,73
01C72:  DATA 0D,0A
01C74:  DATA 00,00
01C76:  DATA 53,74
01C78:  DATA 61,72
01C7A:  DATA 74,20
01C7C:  DATA 46,6C
01C7E:  DATA 61,73
01C80:  DATA 68,20
01C82:  DATA 45,72
01C84:  DATA 61,73
01C86:  DATA 65,20
01C88:  DATA 61,6E
01C8A:  DATA 64,20
01C8C:  DATA 52,65
01C8E:  DATA 73,65
01C90:  DATA 74,0D
01C92:  DATA 0A,00
01C94:  DATA 45,6E
01C96:  DATA 64,20
01C98:  DATA 46,6C
01C9A:  DATA 61,73
01C9C:  DATA 68,20
01C9E:  DATA 45,72
01CA0:  DATA 61,73
01CA2:  DATA 65,20
01CA4:  DATA 61,6E
01CA6:  DATA 64,20
01CA8:  DATA 52,65
01CAA:  DATA 73,65
01CAC:  DATA 74,0D
01CAE:  DATA 0A,00
01CB0:  DATA 53,74
01CB2:  DATA 61,72
01CB4:  DATA 74,20
01CB6:  DATA 46,6C
01CB8:  DATA 61,73
01CBA:  DATA 68,20
01CBC:  DATA 53,4D
01CBE:  DATA 46,20
01CC0:  DATA 43,6F
01CC2:  DATA 70,79
01CC4:  DATA 0D,0A
01CC6:  DATA 00,00
01CC8:  DATA 45,6E
01CCA:  DATA 64,20
01CCC:  DATA 46,6C
01CCE:  DATA 61,73
01CD0:  DATA 68,20
01CD2:  DATA 53,4D
01CD4:  DATA 46,20
01CD6:  DATA 43,6F
01CD8:  DATA 70,79
01CDA:  DATA 0D,0A
01CDC:  DATA 00,00
01CDE:  DATA 53,74
01CE0:  DATA 61,72
01CE2:  DATA 74,20
01CE4:  DATA 46,6C
01CE6:  DATA 61,73
01CE8:  DATA 68,20
01CEA:  DATA 53,4D
01CEC:  DATA 46,20
01CEE:  DATA 52,65
01CF0:  DATA 61,64
01CF2:  DATA 0D,0A
01CF4:  DATA 00,00
01CF6:  DATA 09,41
01CF8:  DATA 64,64
01CFA:  DATA 72,65
01CFC:  DATA 73,73
01CFE:  DATA 20,20
01D00:  DATA 3A,20
01D02:  DATA 30,78
01D04:  DATA 25,30
01D06:  DATA 38,4C
01D08:  DATA 58,0D
01D0A:  DATA 0A,00
01D0C:  DATA 09,50
01D0E:  DATA 61,63
01D10:  DATA 6B,65
01D12:  DATA 74,4E
01D14:  DATA 75,6D
01D16:  DATA 3A,20
01D18:  DATA 30,78
01D1A:  DATA 25,30
01D1C:  DATA 34,4C
01D1E:  DATA 58,0D
01D20:  DATA 0A,00
01D22:  DATA 52,65
01D24:  DATA 61,64
01D26:  DATA 20,44
01D28:  DATA 61,74
01D2A:  DATA 61,0D
01D2C:  DATA 0A,00
01D2E:  DATA 0D,0A
01D30:  DATA 45,6E
01D32:  DATA 64,20
01D34:  DATA 46,6C
01D36:  DATA 61,73
01D38:  DATA 68,20
01D3A:  DATA 53,4D
01D3C:  DATA 46,20
01D3E:  DATA 52,65
01D40:  DATA 61,64
01D42:  DATA 0D,0A
01D44:  DATA 00,00
01D46:  DATA 53,74
01D48:  DATA 61,72
01D4A:  DATA 74,20
01D4C:  DATA 46,6C
01D4E:  DATA 61,73
01D50:  DATA 68,20
01D52:  DATA 53,4D
01D54:  DATA 46,20
01D56:  DATA 45,72
01D58:  DATA 61,73
01D5A:  DATA 65,0D
01D5C:  DATA 0A,00
01D5E:  DATA 45,6E
01D60:  DATA 64,20
01D62:  DATA 46,6C
01D64:  DATA 61,73
01D66:  DATA 68,20
01D68:  DATA 53,4D
01D6A:  DATA 46,20
01D6C:  DATA 45,72
01D6E:  DATA 61,73
01D70:  DATA 65,0D
01D72:  DATA 0A,00
01D74:  DATA 53,74
01D76:  DATA 61,72
01D78:  DATA 74,20
01D7A:  DATA 46,6C
01D7C:  DATA 61,73
01D7E:  DATA 68,20
01D80:  DATA 41,64
01D82:  DATA 64,72
01D84:  DATA 65,73
01D86:  DATA 73,20
01D88:  DATA 52,65
01D8A:  DATA 73,65
01D8C:  DATA 74,0D
01D8E:  DATA 0A,00
01D90:  DATA 45,6E
01D92:  DATA 64,20
01D94:  DATA 46,6C
01D96:  DATA 61,73
01D98:  DATA 68,20
01D9A:  DATA 41,64
01D9C:  DATA 64,72
01D9E:  DATA 65,73
01DA0:  DATA 73,20
01DA2:  DATA 52,65
01DA4:  DATA 73,65
01DA6:  DATA 74,0D
01DA8:  DATA 0A,00
01DAA:  DATA 53,4D
01DAC:  DATA 46,20
01DAE:  DATA 69,73
01DB0:  DATA 20,6E
01DB2:  DATA 6F,74
01DB4:  DATA 20,63
01DB6:  DATA 6F,6E
01DB8:  DATA 6E,65
01DBA:  DATA 63,74
01DBC:  DATA 65,64
01DBE:  DATA 0D,0A
01DC0:  DATA 00,00
01DC2:  DATA 53,74
01DC4:  DATA 61,72
01DC6:  DATA 74,20
01DC8:  DATA 46,6C
01DCA:  DATA 61,73
01DCC:  DATA 68,20
01DCE:  DATA 53,4D
01DD0:  DATA 46,20
01DD2:  DATA 52,65
01DD4:  DATA 61,64
01DD6:  DATA 20,46
01DD8:  DATA 6F,72
01DDA:  DATA 63,65
01DDC:  DATA 0D,0A
01DDE:  DATA 00,00
01DE0:  DATA 09,41
01DE2:  DATA 64,64
01DE4:  DATA 72,65
01DE6:  DATA 73,73
01DE8:  DATA 20,20
01DEA:  DATA 3A,20
01DEC:  DATA 30,78
01DEE:  DATA 25,30
01DF0:  DATA 38,4C
01DF2:  DATA 58,0D
01DF4:  DATA 0A,00
01DF6:  DATA 09,50
01DF8:  DATA 61,63
01DFA:  DATA 6B,65
01DFC:  DATA 74,4E
01DFE:  DATA 75,6D
01E00:  DATA 3A,20
01E02:  DATA 30,78
01E04:  DATA 25,30
01E06:  DATA 34,4C
01E08:  DATA 58,0D
01E0A:  DATA 0A,00
01E0C:  DATA 72,65
01E0E:  DATA 61,64
01E10:  DATA 20,64
01E12:  DATA 61,74
01E14:  DATA 61,0D
01E16:  DATA 0A,00
01E18:  DATA 0D,0A
01E1A:  DATA 45,6E
01E1C:  DATA 64,20
01E1E:  DATA 46,6C
01E20:  DATA 61,73
01E22:  DATA 68,20
01E24:  DATA 53,4D
01E26:  DATA 46,20
01E28:  DATA 52,65
01E2A:  DATA 61,64
01E2C:  DATA 20,46
01E2E:  DATA 6F,72
01E30:  DATA 63,65
01E32:  DATA 0D,0A
01E34:  DATA 00,00
01E36:  DATA 53,74
01E38:  DATA 61,72
01E3A:  DATA 74,20
01E3C:  DATA 53,4D
01E3E:  DATA 46,20
01E40:  DATA 45,72
01E42:  DATA 61,73
01E44:  DATA 65,20
01E46:  DATA 41,6C
01E48:  DATA 6C,0D
01E4A:  DATA 0A,00
01E4C:  DATA 45,6E
01E4E:  DATA 64,20
01E50:  DATA 53,4D
01E52:  DATA 46,20
01E54:  DATA 45,72
01E56:  DATA 61,73
01E58:  DATA 65,20
01E5A:  DATA 41,6C
01E5C:  DATA 6C,0D
01E5E:  DATA 0A,00
01E60:  DATA 53,74
01E62:  DATA 61,72
01E64:  DATA 74,20
01E66:  DATA 53,4D
01E68:  DATA 46,20
01E6A:  DATA 52,65
01E6C:  DATA 73,65
01E6E:  DATA 74,0D
01E70:  DATA 0A,00
01E72:  DATA 45,6E
01E74:  DATA 64,20
01E76:  DATA 53,4D
01E78:  DATA 46,20
01E7A:  DATA 52,65
01E7C:  DATA 73,65
01E7E:  DATA 74,0D
01E80:  DATA 0A,00
01E82:  DATA 0D,0A
01E84:  DATA 0D,0A
01E86:  DATA 0D,0A
01E88:  DATA 3D,3D
01E8A:  DATA 3D,3D
01E8C:  DATA 3D,3D
01E8E:  DATA 3D,3D
01E90:  DATA 3D,3D
01E92:  DATA 3D,3D
01E94:  DATA 3D,3D
01E96:  DATA 3D,3D
01E98:  DATA 3D,3D
01E9A:  DATA 3D,3D
01E9C:  DATA 3D,3D
01E9E:  DATA 3D,3D
01EA0:  DATA 3D,3D
01EA2:  DATA 3D,3D
01EA4:  DATA 3D,3D
01EA6:  DATA 3D,3D
01EA8:  DATA 3D,3D
01EAA:  DATA 3D,3D
01EAC:  DATA 3D,3D
01EAE:  DATA 3D,3D
01EB0:  DATA 3D,3D
01EB2:  DATA 3D,3D
01EB4:  DATA 3D,3D
01EB6:  DATA 3D,3D
01EB8:  DATA 3D,3D
01EBA:  DATA 3D,3D
01EBC:  DATA 3D,3D
01EBE:  DATA 3D,3D
01EC0:  DATA 3D,3D
01EC2:  DATA 3D,3D
01EC4:  DATA 0D,0A
01EC6:  DATA 00,00
01EC8:  DATA 54,68
01ECA:  DATA 69,73
01ECC:  DATA 20,69
01ECE:  DATA 73,20
01ED0:  DATA 4D,4F
01ED2:  DATA 4D,49
01ED4:  DATA 4A,49
01ED6:  DATA 20,43
01ED8:  DATA 49,47
01EDA:  DATA 53,20
01EDC:  DATA 50,49
01EDE:  DATA 43,20
01EE0:  DATA 42,42
01EE2:  DATA 4D,20
01EE4:  DATA 66,6F
01EE6:  DATA 72,20
01EE8:  DATA 4D,49
01EEA:  DATA 53,37
01EEC:  DATA 5F,42
01EEE:  DATA 42,4D
01EF0:  DATA 36,2E
01EF2:  DATA 0D,0A
01EF4:  DATA 00,00
01EF6:  DATA 4C,61
01EF8:  DATA 73,74
01EFA:  DATA 20,75
01EFC:  DATA 70,64
01EFE:  DATA 61,74
01F00:  DATA 65,64
01F02:  DATA 20,6F
01F04:  DATA 6E,20
01F06:  DATA 25,73
01F08:  DATA 20,25
01F0A:  DATA 73,2C
01F0C:  DATA 20,62
01F0E:  DATA 79,20
01F10:  DATA 49,6E
01F12:  DATA 6F,75
01F14:  DATA 65,2E
01F16:  DATA 0D,0A
01F18:  DATA 0D,0A
01F1A:  DATA 00,00
01F1C:  DATA 35,2D
01F1E:  DATA 4F,63
01F20:  DATA 74,2D
01F22:  DATA 32,35
01F24:  DATA 00,00
01F26:  DATA 32,31
01F28:  DATA 3A,34
01F2A:  DATA 31,3A
01F2C:  DATA 35,34
01F2E:  DATA 00,00
01F30:  DATA 5F,5F
01F32:  DATA 5F,5F
01F34:  DATA 43,49
01F36:  DATA 47,53
01F38:  DATA 20,50
01F3A:  DATA 49,43
01F3C:  DATA 20,53
01F3E:  DATA 74,61
01F40:  DATA 72,74
01F42:  DATA 20,4F
01F44:  DATA 70,65
01F46:  DATA 72,61
01F48:  DATA 74,69
01F4A:  DATA 6F,6E
01F4C:  DATA 5F,5F
01F4E:  DATA 5F,5F
01F50:  DATA 5F,0D
01F52:  DATA 0A,0D
01F54:  DATA 0A,00
01F56:  DATA 77,61
01F58:  DATA 69,74
01F5A:  DATA 69,6E
01F5C:  DATA 67,20
01F5E:  DATA 66,6F
01F60:  DATA 72,20
01F62:  DATA 42,4F
01F64:  DATA 53,53
01F66:  DATA 20,50
01F68:  DATA 49,43
01F6A:  DATA 20,63
01F6C:  DATA 6F,6D
01F6E:  DATA 6D,61
01F70:  DATA 6E,64
01F72:  DATA 00,00
01F74:  DATA 0D,0A
01F76:  DATA 0D,0A
01F78:  DATA 3D,3D
01F7A:  DATA 3D,3D
01F7C:  DATA 3D,3D
01F7E:  DATA 0D,0A
01F80:  DATA 0D,0A
01F82:  DATA 46,69
01F84:  DATA 6E,69
01F86:  DATA 73,68
01F88:  DATA 65,64
01F8A:  DATA 20,70
01F8C:  DATA 72,6F
01F8E:  DATA 63,65
01F90:  DATA 73,73
01F92:  DATA 2E,0D
01F94:  DATA 0A,00
01F96:  DATA 0D,0A
01F98:  DATA 77,61
01F9A:  DATA 69,74
01F9C:  DATA 69,6E
01F9E:  DATA 67,20
01FA0:  DATA 66,6F
01FA2:  DATA 72,20
01FA4:  DATA 42,4F
01FA6:  DATA 53,53
01FA8:  DATA 20,50
01FAA:  DATA 49,43
01FAC:  DATA 20,63
01FAE:  DATA 6F,6D
01FB0:  DATA 6D,61
01FB2:  DATA 6E,64
01FB4:  DATA 00,00
01FB6:  DATA 45,6E
01FB8:  DATA 64,20
01FBA:  DATA 6D,61
01FBC:  DATA 69,6E
01FBE:  DATA 0D,0A
01FC0:  DATA 00,00
*
01FF0:  TBLRD*+
01FF2:  MOVF   FF5,F
01FF4:  BTFSC  FD8.2
01FF6:  GOTO   2024
01FFA:  MOVFF  FF6,A0F
01FFE:  MOVFF  FF7,A10
02002:  MOVFF  FF8,A11
02006:  MOVF   FF5,W
02008:  BTFSS  FA6.6
0200A:  GOTO   2008
0200E:  MOVLB  E
02010:  MOVWF  xF9
02012:  MOVFF  A0F,FF6
02016:  MOVFF  A10,FF7
0201A:  MOVFF  A11,FF8
0201E:  MOVLB  0
02020:  GOTO   1FF0
02024:  RETURN 0
02026:  TBLRD*+
02028:  MOVFF  FF6,A0D
0202C:  MOVFF  FF7,A0E
02030:  MOVFF  FF8,A0F
02034:  MOVF   FF5,W
02036:  BTFSS  FA6.6
02038:  GOTO   2036
0203C:  MOVLB  E
0203E:  MOVWF  xF9
02040:  MOVFF  A0D,FF6
02044:  MOVFF  A0E,FF7
02048:  MOVFF  A0F,FF8
0204C:  MOVLB  A
0204E:  DECFSZ x0C,F
02050:  BRA    2056
02052:  BRA    205C
02054:  MOVLB  0
02056:  MOVLB  0
02058:  GOTO   2026
0205C:  MOVLB  0
0205E:  RETURN 0
*
02232:  MOVLB  A
02234:  BTFSS  x27.7
02236:  BRA    223E
02238:  MOVLB  0
0223A:  GOTO   2274
0223E:  MOVLW  0F
02240:  MOVWF  00
02242:  SWAPF  x26,W
02244:  ANDWF  00,F
02246:  MOVLW  0A
02248:  SUBWF  00,W
0224A:  BTFSS  FD8.0
0224C:  BRA    2254
0224E:  MOVLB  0
02250:  GOTO   225E
02254:  MOVLW  30
02256:  ADDWF  00,F
02258:  MOVLB  0
0225A:  GOTO   2266
0225E:  MOVLB  A
02260:  MOVF   x27,W
02262:  ADDWF  00,F
02264:  MOVLB  0
02266:  MOVF   00,W
02268:  BTFSS  FA6.6
0226A:  GOTO   2268
0226E:  MOVLB  E
02270:  MOVWF  xF9
02272:  MOVLB  0
02274:  MOVLW  0F
02276:  MOVLB  A
02278:  ANDWF  x26,F
0227A:  MOVLW  0A
0227C:  SUBWF  x26,W
0227E:  BTFSS  FD8.0
02280:  BRA    2288
02282:  MOVLB  0
02284:  GOTO   2290
02288:  MOVLW  30
0228A:  MOVLB  0
0228C:  GOTO   2298
02290:  MOVLB  A
02292:  BCF    x27.7
02294:  MOVF   x27,W
02296:  MOVLB  0
02298:  MOVLB  A
0229A:  ADDWF  x26,F
0229C:  MOVF   x26,W
0229E:  MOVLB  0
022A0:  BTFSS  FA6.6
022A2:  GOTO   22A0
022A6:  MOVLB  E
022A8:  MOVWF  xF9
022AA:  MOVLB  0
022AC:  RETURN 0
*
027AA:  MOVLB  B
027AC:  MOVF   x52,W
027AE:  ANDLW  07
027B0:  MOVWF  00
027B2:  RRCF   x52,W
027B4:  MOVWF  01
027B6:  RRCF   01,F
027B8:  RRCF   01,F
027BA:  MOVLW  1F
027BC:  ANDWF  01,F
027BE:  MOVF   01,W
027C0:  ADDWF  x54,W
027C2:  MOVWF  FE9
027C4:  MOVLW  00
027C6:  ADDWFC x55,W
027C8:  MOVWF  FEA
027CA:  CLRF   01
027CC:  INCF   01,F
027CE:  INCF   00,F
027D0:  MOVLB  0
027D2:  GOTO   27D8
027D6:  RLCF   01,F
027D8:  DECFSZ 00,F
027DA:  GOTO   27D6
027DE:  MOVLB  B
027E0:  MOVF   x53,F
027E2:  BTFSS  FD8.2
027E4:  BRA    27EC
027E6:  MOVLB  0
027E8:  GOTO   27F6
027EC:  MOVF   01,W
027EE:  IORWF  FEF,F
027F0:  MOVLB  0
027F2:  GOTO   27FC
027F6:  COMF   01,F
027F8:  MOVF   01,W
027FA:  ANDWF  FEF,F
027FC:  RETURN 0
*
02BBA:  TSTFSZ 01
02BBC:  GOTO   2BCA
02BC0:  TSTFSZ 02
02BC2:  GOTO   2BCC
02BC6:  GOTO   2BDC
02BCA:  INCF   02,F
02BCC:  MOVFF  00,FEE
02BD0:  DECFSZ 01,F
02BD2:  GOTO   2BCC
02BD6:  DECFSZ 02,F
02BD8:  GOTO   2BCC
02BDC:  RETURN 0
*
05F7C:  BTFSC  FD8.1
05F7E:  GOTO   5F8A
05F82:  MOVLW  02
05F84:  MOVWF  FEA
05F86:  MOVLW  58
05F88:  MOVWF  FE9
05F8A:  CLRF   00
05F8C:  CLRF   01
05F8E:  CLRF   02
05F90:  CLRF   03
05F92:  MOVLB  2
05F94:  CLRF   x58
05F96:  CLRF   x59
05F98:  CLRF   x5A
05F9A:  CLRF   x5B
05F9C:  MOVF   x57,W
05F9E:  IORWF  x56,W
05FA0:  IORWF  x55,W
05FA2:  IORWF  x54,W
05FA4:  BTFSS  FD8.2
05FA6:  BRA    5FAE
05FA8:  MOVLB  0
05FAA:  GOTO   603E
05FAE:  MOVLB  0
05FB0:  MOVLW  20
05FB2:  MOVLB  2
05FB4:  MOVWF  x5C
05FB6:  MOVLB  0
05FB8:  BCF    FD8.0
05FBA:  MOVLB  2
05FBC:  RLCF   x50,F
05FBE:  RLCF   x51,F
05FC0:  RLCF   x52,F
05FC2:  RLCF   x53,F
05FC4:  RLCF   x58,F
05FC6:  RLCF   x59,F
05FC8:  RLCF   x5A,F
05FCA:  RLCF   x5B,F
05FCC:  MOVF   x57,W
05FCE:  SUBWF  x5B,W
05FD0:  BTFSC  FD8.2
05FD2:  BRA    5FDA
05FD4:  MOVLB  0
05FD6:  GOTO   5FFC
05FDA:  MOVF   x56,W
05FDC:  SUBWF  x5A,W
05FDE:  BTFSC  FD8.2
05FE0:  BRA    5FE8
05FE2:  MOVLB  0
05FE4:  GOTO   5FFC
05FE8:  MOVF   x55,W
05FEA:  SUBWF  x59,W
05FEC:  BTFSC  FD8.2
05FEE:  BRA    5FF6
05FF0:  MOVLB  0
05FF2:  GOTO   5FFC
05FF6:  MOVF   x54,W
05FF8:  SUBWF  x58,W
05FFA:  MOVLB  0
05FFC:  BTFSS  FD8.0
05FFE:  GOTO   6024
06002:  MOVLB  2
06004:  MOVF   x54,W
06006:  SUBWF  x58,F
06008:  MOVF   x55,W
0600A:  BTFSS  FD8.0
0600C:  INCFSZ x55,W
0600E:  SUBWF  x59,F
06010:  MOVF   x56,W
06012:  BTFSS  FD8.0
06014:  INCFSZ x56,W
06016:  SUBWF  x5A,F
06018:  MOVF   x57,W
0601A:  BTFSS  FD8.0
0601C:  INCFSZ x57,W
0601E:  SUBWF  x5B,F
06020:  BSF    FD8.0
06022:  MOVLB  0
06024:  RLCF   00,F
06026:  RLCF   01,F
06028:  RLCF   02,F
0602A:  RLCF   03,F
0602C:  MOVLB  2
0602E:  DECFSZ x5C,F
06030:  BRA    6036
06032:  BRA    603C
06034:  MOVLB  0
06036:  MOVLB  0
06038:  GOTO   5FB8
0603C:  MOVLB  0
0603E:  MOVFF  258,FEF
06042:  MOVFF  259,FEC
06046:  MOVFF  25A,FEC
0604A:  MOVFF  25B,FEC
0604E:  MOVF   FED,F
06050:  MOVF   FED,F
06052:  MOVF   FED,F
06054:  RETURN 0
06056:  MOVF   FE9,W
06058:  MOVLB  2
0605A:  MOVWF  x48
0605C:  MOVLW  3B
0605E:  MOVWF  x4F
06060:  MOVLW  9A
06062:  MOVWF  x4E
06064:  MOVLW  CA
06066:  MOVWF  x4D
06068:  CLRF   x4C
0606A:  MOVLW  0A
0606C:  MOVWF  x4A
0606E:  MOVLB  0
06070:  BSF    FD8.1
06072:  MOVLW  02
06074:  MOVWF  FEA
06076:  MOVLW  44
06078:  MOVWF  FE9
0607A:  MOVFF  247,253
0607E:  MOVFF  246,252
06082:  MOVFF  245,251
06086:  MOVFF  244,250
0608A:  MOVFF  24F,257
0608E:  MOVFF  24E,256
06092:  MOVFF  24D,255
06096:  MOVFF  24C,254
0609A:  CALL   5F7C
0609E:  MOVF   01,W
060A0:  MOVF   00,F
060A2:  BTFSS  FD8.2
060A4:  GOTO   60FC
060A8:  MOVLB  2
060AA:  MOVF   x4A,W
060AC:  XORLW  01
060AE:  BTFSS  FD8.2
060B0:  BRA    60B8
060B2:  MOVLB  0
060B4:  GOTO   60FC
060B8:  MOVF   x48,W
060BA:  BTFSS  FD8.2
060BC:  BRA    60C4
060BE:  MOVLB  0
060C0:  GOTO   6102
060C4:  ANDLW  0F
060C6:  SUBWF  x4A,W
060C8:  BTFSS  FD8.2
060CA:  BRA    60D2
060CC:  MOVLB  0
060CE:  GOTO   60DE
060D2:  BTFSS  FD8.0
060D4:  BRA    60DC
060D6:  MOVLB  0
060D8:  GOTO   6114
060DC:  MOVLB  0
060DE:  MOVLB  2
060E0:  BTFSS  x48.7
060E2:  BRA    60EA
060E4:  MOVLB  0
060E6:  GOTO   6114
060EA:  BTFSS  x48.6
060EC:  BRA    60F4
060EE:  MOVLB  0
060F0:  GOTO   6102
060F4:  MOVLW  20
060F6:  MOVLB  0
060F8:  GOTO   6104
060FC:  MOVLB  2
060FE:  CLRF   x48
06100:  MOVLB  0
06102:  MOVLW  30
06104:  ADDWF  00,F
06106:  MOVF   00,W
06108:  BTFSS  FA6.6
0610A:  GOTO   6108
0610E:  MOVLB  E
06110:  MOVWF  xF9
06112:  MOVLB  0
06114:  BCF    FD8.1
06116:  MOVFF  24F,253
0611A:  MOVFF  24E,252
0611E:  MOVFF  24D,251
06122:  MOVFF  24C,250
06126:  MOVLB  2
06128:  CLRF   x57
0612A:  CLRF   x56
0612C:  CLRF   x55
0612E:  MOVLW  0A
06130:  MOVWF  x54
06132:  MOVLB  0
06134:  CALL   5F7C
06138:  MOVFF  03,24F
0613C:  MOVFF  02,24E
06140:  MOVFF  01,24D
06144:  MOVFF  00,24C
06148:  MOVLB  2
0614A:  DECFSZ x4A,F
0614C:  BRA    6152
0614E:  BRA    6158
06150:  MOVLB  0
06152:  MOVLB  0
06154:  GOTO   6070
06158:  MOVLB  0
0615A:  RETURN 0
*
07FF4:  MOVLB  A
07FF6:  MOVF   x9B,W
07FF8:  MULWF  x9D
07FFA:  MOVFF  FF3,01
07FFE:  MOVFF  FF4,00
08002:  MULWF  x9E
08004:  MOVF   FF3,W
08006:  ADDWF  00,F
08008:  MOVF   x9C,W
0800A:  MULWF  x9D
0800C:  MOVF   FF3,W
0800E:  ADDWFC 00,W
08010:  MOVWF  02
08012:  MOVLB  0
08014:  RETURN 0
*
0811E:  MOVLW  8E
08120:  MOVWF  00
08122:  MOVFF  232,01
08126:  MOVFF  231,02
0812A:  CLRF   03
0812C:  MOVF   01,F
0812E:  BTFSS  FD8.2
08130:  GOTO   814C
08134:  MOVFF  02,01
08138:  CLRF   02
0813A:  MOVLW  08
0813C:  SUBWF  00,F
0813E:  MOVF   01,F
08140:  BTFSS  FD8.2
08142:  GOTO   814C
08146:  CLRF   00
08148:  GOTO   8160
0814C:  BCF    FD8.0
0814E:  BTFSC  01.7
08150:  GOTO   815E
08154:  RLCF   02,F
08156:  RLCF   01,F
08158:  DECF   00,F
0815A:  GOTO   814C
0815E:  BCF    01.7
08160:  GOTO   8A88 (RETURN)
08164:  MOVLB  2
08166:  MOVF   x35,W
08168:  BTFSS  FD8.2
0816A:  BRA    8172
0816C:  MOVLB  0
0816E:  GOTO   82A4
08172:  MOVWF  00
08174:  MOVF   x39,W
08176:  BTFSS  FD8.2
08178:  BRA    8180
0817A:  MOVLB  0
0817C:  GOTO   82A4
08180:  ADDWF  00,F
08182:  BTFSC  FD8.0
08184:  BRA    818C
08186:  MOVLB  0
08188:  GOTO   819C
0818C:  MOVLB  0
0818E:  MOVLW  81
08190:  ADDWF  00,F
08192:  BTFSC  FD8.0
08194:  GOTO   82A4
08198:  GOTO   81AC
0819C:  MOVLW  7F
0819E:  SUBWF  00,F
081A0:  BTFSS  FD8.0
081A2:  GOTO   82A4
081A6:  BTFSC  FD8.2
081A8:  GOTO   82A4
081AC:  MOVFF  236,23D
081B0:  MOVLB  2
081B2:  MOVF   x3A,W
081B4:  XORWF  x3D,F
081B6:  BSF    x36.7
081B8:  BSF    x3A.7
081BA:  MOVF   x38,W
081BC:  MULWF  x3C
081BE:  MOVFF  FF4,23F
081C2:  MOVF   x37,W
081C4:  MULWF  x3B
081C6:  MOVFF  FF4,03
081CA:  MOVFF  FF3,23E
081CE:  MULWF  x3C
081D0:  MOVF   FF3,W
081D2:  ADDWF  x3F,F
081D4:  MOVF   FF4,W
081D6:  ADDWFC x3E,F
081D8:  MOVLW  00
081DA:  ADDWFC 03,F
081DC:  MOVF   x38,W
081DE:  MULWF  x3B
081E0:  MOVF   FF3,W
081E2:  ADDWF  x3F,F
081E4:  MOVF   FF4,W
081E6:  ADDWFC x3E,F
081E8:  MOVLW  00
081EA:  CLRF   02
081EC:  ADDWFC 03,F
081EE:  ADDWFC 02,F
081F0:  MOVF   x36,W
081F2:  MULWF  x3C
081F4:  MOVF   FF3,W
081F6:  ADDWF  x3E,F
081F8:  MOVF   FF4,W
081FA:  ADDWFC 03,F
081FC:  MOVLW  00
081FE:  ADDWFC 02,F
08200:  MOVF   x36,W
08202:  MULWF  x3B
08204:  MOVF   FF3,W
08206:  ADDWF  03,F
08208:  MOVF   FF4,W
0820A:  ADDWFC 02,F
0820C:  MOVLW  00
0820E:  CLRF   01
08210:  ADDWFC 01,F
08212:  MOVF   x38,W
08214:  MULWF  x3A
08216:  MOVF   FF3,W
08218:  ADDWF  x3E,F
0821A:  MOVF   FF4,W
0821C:  ADDWFC 03,F
0821E:  MOVLW  00
08220:  ADDWFC 02,F
08222:  ADDWFC 01,F
08224:  MOVF   x37,W
08226:  MULWF  x3A
08228:  MOVF   FF3,W
0822A:  ADDWF  03,F
0822C:  MOVF   FF4,W
0822E:  ADDWFC 02,F
08230:  MOVLW  00
08232:  ADDWFC 01,F
08234:  MOVF   x36,W
08236:  MULWF  x3A
08238:  MOVF   FF3,W
0823A:  ADDWF  02,F
0823C:  MOVF   FF4,W
0823E:  ADDWFC 01,F
08240:  INCF   00,F
08242:  BTFSS  01.7
08244:  BRA    824C
08246:  MOVLB  0
08248:  GOTO   8258
0824C:  RLCF   x3E,F
0824E:  RLCF   03,F
08250:  RLCF   02,F
08252:  RLCF   01,F
08254:  DECF   00,F
08256:  MOVLB  0
08258:  MOVLW  00
0825A:  MOVLB  2
0825C:  BTFSC  x3E.7
0825E:  BRA    8266
08260:  MOVLB  0
08262:  GOTO   8294
08266:  INCF   03,F
08268:  ADDWFC 02,F
0826A:  ADDWFC 01,F
0826C:  MOVF   01,W
0826E:  BTFSC  FD8.2
08270:  BRA    8278
08272:  MOVLB  0
08274:  GOTO   8294
08278:  MOVF   02,W
0827A:  BTFSC  FD8.2
0827C:  BRA    8284
0827E:  MOVLB  0
08280:  GOTO   8294
08284:  MOVF   03,W
08286:  BTFSC  FD8.2
08288:  BRA    8290
0828A:  MOVLB  0
0828C:  GOTO   8294
08290:  INCF   00,F
08292:  MOVLB  0
08294:  MOVLB  2
08296:  BTFSC  x3D.7
08298:  BSF    01.7
0829A:  BTFSS  x3D.7
0829C:  BCF    01.7
0829E:  MOVLB  0
082A0:  GOTO   82AC
082A4:  CLRF   00
082A6:  CLRF   01
082A8:  CLRF   02
082AA:  CLRF   03
082AC:  GOTO   8ABE (RETURN)
082B0:  MOVLB  2
082B2:  MOVF   x35,W
082B4:  BTFSS  FD8.2
082B6:  BRA    82BE
082B8:  MOVLB  0
082BA:  GOTO   856C
082BE:  MOVWF  x41
082C0:  MOVF   x39,W
082C2:  BTFSS  FD8.2
082C4:  BRA    82CC
082C6:  MOVLB  0
082C8:  GOTO   856C
082CC:  SUBWF  x41,F
082CE:  BTFSS  FD8.0
082D0:  BRA    82D8
082D2:  MOVLB  0
082D4:  GOTO   82DE
082D8:  MOVLB  0
082DA:  GOTO   82F4
082DE:  MOVLW  7F
082E0:  MOVLB  2
082E2:  ADDWF  x41,F
082E4:  BTFSS  FD8.0
082E6:  BRA    82EE
082E8:  MOVLB  0
082EA:  GOTO   856C
082EE:  MOVLB  0
082F0:  GOTO   8310
082F4:  MOVLW  81
082F6:  MOVLB  2
082F8:  SUBWF  x41,F
082FA:  BTFSC  FD8.0
082FC:  BRA    8304
082FE:  MOVLB  0
08300:  GOTO   856C
08304:  BTFSS  FD8.2
08306:  BRA    830E
08308:  MOVLB  0
0830A:  GOTO   856C
0830E:  MOVLB  0
08310:  MOVFF  241,00
08314:  CLRF   01
08316:  CLRF   02
08318:  CLRF   03
0831A:  MOVLB  2
0831C:  CLRF   x40
0831E:  MOVFF  236,23F
08322:  BSF    x3F.7
08324:  MOVFF  237,23E
08328:  MOVFF  238,23D
0832C:  MOVLW  19
0832E:  MOVWF  x41
08330:  MOVLB  0
08332:  MOVLB  2
08334:  MOVF   x3C,W
08336:  SUBWF  x3D,F
08338:  BTFSS  FD8.0
0833A:  BRA    8342
0833C:  MOVLB  0
0833E:  GOTO   8378
08342:  MOVLW  01
08344:  SUBWF  x3E,F
08346:  BTFSS  FD8.0
08348:  BRA    8350
0834A:  MOVLB  0
0834C:  GOTO   8378
08350:  SUBWF  x3F,F
08352:  BTFSS  FD8.0
08354:  BRA    835C
08356:  MOVLB  0
08358:  GOTO   8378
0835C:  SUBWF  x40,F
0835E:  BTFSS  FD8.0
08360:  BRA    8368
08362:  MOVLB  0
08364:  GOTO   8378
08368:  INCF   x40,F
0836A:  INCF   x3F,F
0836C:  INCF   x3E,F
0836E:  MOVF   x3C,W
08370:  ADDWF  x3D,F
08372:  MOVLB  0
08374:  GOTO   842C
08378:  MOVLB  2
0837A:  MOVF   x3B,W
0837C:  SUBWF  x3E,F
0837E:  BTFSS  FD8.0
08380:  BRA    8388
08382:  MOVLB  0
08384:  GOTO   83E0
08388:  MOVLW  01
0838A:  SUBWF  x3F,F
0838C:  BTFSS  FD8.0
0838E:  BRA    8396
08390:  MOVLB  0
08392:  GOTO   83E0
08396:  SUBWF  x40,F
08398:  BTFSS  FD8.0
0839A:  BRA    83A2
0839C:  MOVLB  0
0839E:  GOTO   83E0
083A2:  MOVLB  0
083A4:  MOVLB  2
083A6:  INCF   x40,F
083A8:  INCF   x3F,F
083AA:  MOVF   x3B,W
083AC:  ADDWF  x3E,F
083AE:  MOVLB  0
083B0:  MOVLB  2
083B2:  MOVF   x3C,W
083B4:  ADDWF  x3D,F
083B6:  BTFSC  FD8.0
083B8:  BRA    83C0
083BA:  MOVLB  0
083BC:  GOTO   842C
083C0:  INCF   x3E,F
083C2:  BTFSC  FD8.2
083C4:  BRA    83CC
083C6:  MOVLB  0
083C8:  GOTO   842C
083CC:  INCF   x3F,F
083CE:  BTFSC  FD8.2
083D0:  BRA    83D8
083D2:  MOVLB  0
083D4:  GOTO   842C
083D8:  INCF   x40,F
083DA:  MOVLB  0
083DC:  GOTO   842C
083E0:  MOVLB  2
083E2:  MOVF   x3A,W
083E4:  IORLW  80
083E6:  SUBWF  x3F,F
083E8:  BTFSS  FD8.0
083EA:  BRA    83F2
083EC:  MOVLB  0
083EE:  GOTO   842A
083F2:  MOVLW  01
083F4:  SUBWF  x40,F
083F6:  BTFSS  FD8.0
083F8:  BRA    8400
083FA:  MOVLB  0
083FC:  GOTO   842A
08400:  INCF   x40,F
08402:  MOVF   x3A,W
08404:  IORLW  80
08406:  ADDWF  x3F,F
08408:  MOVF   x3B,W
0840A:  ADDWF  x3E,F
0840C:  BTFSC  FD8.0
0840E:  BRA    8416
08410:  MOVLB  0
08412:  GOTO   83B0
08416:  INCF   x3F,F
08418:  BTFSC  FD8.2
0841A:  BRA    8422
0841C:  MOVLB  0
0841E:  GOTO   83B0
08422:  INCF   x40,F
08424:  MOVLB  0
08426:  GOTO   83B0
0842A:  BSF    03.0
0842C:  MOVLB  2
0842E:  DECFSZ x41,F
08430:  BRA    8436
08432:  BRA    843C
08434:  MOVLB  0
08436:  MOVLB  0
08438:  GOTO   8442
0843C:  MOVLB  0
0843E:  GOTO   845E
08442:  BCF    FD8.0
08444:  MOVLB  2
08446:  RLCF   x3D,F
08448:  RLCF   x3E,F
0844A:  RLCF   x3F,F
0844C:  RLCF   x40,F
0844E:  BCF    FD8.0
08450:  RLCF   03,F
08452:  RLCF   02,F
08454:  RLCF   01,F
08456:  RLCF   x42,F
08458:  MOVLB  0
0845A:  GOTO   8332
0845E:  MOVLB  2
08460:  BTFSC  x42.0
08462:  BRA    846A
08464:  MOVLB  0
08466:  GOTO   847A
0846A:  BCF    FD8.0
0846C:  RRCF   01,F
0846E:  RRCF   02,F
08470:  RRCF   03,F
08472:  RRCF   x42,F
08474:  MOVLB  0
08476:  GOTO   8482
0847A:  DECF   00,F
0847C:  BTFSC  FD8.2
0847E:  GOTO   856C
08482:  MOVLB  2
08484:  BTFSS  x42.7
08486:  BRA    848E
08488:  MOVLB  0
0848A:  GOTO   8524
0848E:  BCF    FD8.0
08490:  RLCF   x3D,F
08492:  RLCF   x3E,F
08494:  RLCF   x3F,F
08496:  RLCF   x40,F
08498:  MOVLB  0
0849A:  MOVLB  2
0849C:  MOVF   x3C,W
0849E:  SUBWF  x3D,F
084A0:  BTFSS  FD8.0
084A2:  BRA    84AA
084A4:  MOVLB  0
084A6:  GOTO   84D2
084AA:  MOVLW  01
084AC:  SUBWF  x3E,F
084AE:  BTFSS  FD8.0
084B0:  BRA    84B8
084B2:  MOVLB  0
084B4:  GOTO   84D2
084B8:  SUBWF  x3F,F
084BA:  BTFSS  FD8.0
084BC:  BRA    84C4
084BE:  MOVLB  0
084C0:  GOTO   84D2
084C4:  SUBWF  x40,F
084C6:  BTFSC  FD8.0
084C8:  BRA    84D0
084CA:  MOVLB  0
084CC:  GOTO   854A
084D0:  MOVLB  0
084D2:  MOVLB  2
084D4:  MOVF   x3B,W
084D6:  SUBWF  x3E,F
084D8:  BTFSS  FD8.0
084DA:  BRA    84E2
084DC:  MOVLB  0
084DE:  GOTO   84FE
084E2:  MOVLW  01
084E4:  SUBWF  x3F,F
084E6:  BTFSS  FD8.0
084E8:  BRA    84F0
084EA:  MOVLB  0
084EC:  GOTO   84FE
084F0:  SUBWF  x40,F
084F2:  BTFSC  FD8.0
084F4:  BRA    84FC
084F6:  MOVLB  0
084F8:  GOTO   854A
084FC:  MOVLB  0
084FE:  MOVLB  2
08500:  MOVF   x3A,W
08502:  IORLW  80
08504:  MOVLB  0
08506:  MOVLB  2
08508:  SUBWF  x3F,F
0850A:  BTFSS  FD8.0
0850C:  BRA    8514
0850E:  MOVLB  0
08510:  GOTO   8524
08514:  MOVLW  01
08516:  SUBWF  x40,F
08518:  BTFSC  FD8.0
0851A:  BRA    8522
0851C:  MOVLB  0
0851E:  GOTO   854A
08522:  MOVLB  0
08524:  INCF   03,F
08526:  BTFSS  FD8.2
08528:  GOTO   854A
0852C:  INCF   02,F
0852E:  BTFSS  FD8.2
08530:  GOTO   854A
08534:  INCF   01,F
08536:  BTFSS  FD8.2
08538:  GOTO   854A
0853C:  INCF   00,F
0853E:  BTFSC  FD8.2
08540:  GOTO   856C
08544:  RRCF   01,F
08546:  RRCF   02,F
08548:  RRCF   03,F
0854A:  MOVFF  236,241
0854E:  MOVLB  2
08550:  MOVF   x3A,W
08552:  XORWF  x41,F
08554:  BTFSC  x41.7
08556:  BRA    855E
08558:  MOVLB  0
0855A:  GOTO   8566
0855E:  BSF    01.7
08560:  MOVLB  0
08562:  GOTO   8574
08566:  BCF    01.7
08568:  GOTO   8574
0856C:  CLRF   00
0856E:  CLRF   01
08570:  CLRF   02
08572:  CLRF   03
08574:  RETURN 0
08576:  MOVLW  80
08578:  BTFSS  FD8.1
0857A:  BRA    8582
0857C:  MOVLB  2
0857E:  XORWF  x36,F
08580:  MOVLB  0
08582:  MOVLB  2
08584:  CLRF   x3B
08586:  CLRF   x3C
08588:  MOVFF  232,23A
0858C:  MOVF   x36,W
0858E:  XORWF  x3A,F
08590:  MOVF   x31,W
08592:  BTFSS  FD8.2
08594:  BRA    859C
08596:  MOVLB  0
08598:  GOTO   8918
0859C:  MOVWF  x39
0859E:  MOVFF  239,00
085A2:  MOVF   x35,W
085A4:  BTFSS  FD8.2
085A6:  BRA    85AE
085A8:  MOVLB  0
085AA:  GOTO   892C
085AE:  SUBWF  x39,F
085B0:  BTFSS  FD8.2
085B2:  BRA    85BA
085B4:  MOVLB  0
085B6:  GOTO   87A6
085BA:  BTFSS  FD8.0
085BC:  BRA    85C4
085BE:  MOVLB  0
085C0:  GOTO   85CA
085C4:  MOVLB  0
085C6:  GOTO   86B2
085CA:  MOVFF  236,23F
085CE:  MOVLB  2
085D0:  BSF    x3F.7
085D2:  MOVFF  237,23E
085D6:  MOVFF  238,23D
085DA:  MOVLB  0
085DC:  MOVLB  2
085DE:  CLRF   x3C
085E0:  BCF    FD8.0
085E2:  RRCF   x3F,F
085E4:  RRCF   x3E,F
085E6:  RRCF   x3D,F
085E8:  RRCF   x3C,F
085EA:  DECFSZ x39,F
085EC:  BRA    85F2
085EE:  BRA    85F8
085F0:  MOVLB  0
085F2:  MOVLB  0
085F4:  GOTO   85DC
085F8:  MOVLB  0
085FA:  MOVLB  2
085FC:  BTFSC  x3A.7
085FE:  BRA    8606
08600:  MOVLB  0
08602:  GOTO   8614
08606:  BSF    x3B.0
08608:  MOVLB  0
0860A:  GOTO   8958
0860E:  MOVLB  2
08610:  BCF    x3B.0
08612:  MOVLB  0
08614:  MOVLB  2
08616:  BCF    x39.0
08618:  BSF    x3B.4
0861A:  MOVLW  02
0861C:  MOVWF  FEA
0861E:  MOVLW  34
08620:  MOVWF  FE9
08622:  MOVLB  0
08624:  GOTO   89B2
08628:  MOVLB  2
0862A:  BCF    x3B.4
0862C:  BTFSS  x3A.7
0862E:  BRA    8636
08630:  MOVLB  0
08632:  GOTO   865A
08636:  BTFSC  x39.0
08638:  BRA    8640
0863A:  MOVLB  0
0863C:  GOTO   8680
08640:  RRCF   x3F,F
08642:  RRCF   x3E,F
08644:  RRCF   x3D,F
08646:  RRCF   x3C,F
08648:  INCF   00,F
0864A:  BTFSS  FD8.2
0864C:  BRA    8654
0864E:  MOVLB  0
08650:  GOTO   894C
08654:  MOVLB  0
08656:  GOTO   8680
0865A:  MOVLB  2
0865C:  BTFSS  x3F.7
0865E:  BRA    8666
08660:  MOVLB  0
08662:  GOTO   8690
08666:  BCF    FD8.0
08668:  RLCF   x3C,F
0866A:  RLCF   x3D,F
0866C:  RLCF   x3E,F
0866E:  RLCF   x3F,F
08670:  DECFSZ 00,F
08672:  BRA    867A
08674:  MOVLB  0
08676:  GOTO   894C
0867A:  MOVLB  0
0867C:  GOTO   865A
08680:  MOVLB  2
08682:  BSF    x3B.6
08684:  MOVLB  0
08686:  GOTO   8818
0868A:  MOVLB  2
0868C:  BCF    x3B.6
0868E:  MOVLB  0
08690:  MOVFF  232,23A
08694:  MOVLB  2
08696:  BTFSC  x3A.7
08698:  BRA    86A0
0869A:  MOVLB  0
0869C:  GOTO   86A8
086A0:  BSF    x3F.7
086A2:  MOVLB  0
086A4:  GOTO   893C
086A8:  MOVLB  2
086AA:  BCF    x3F.7
086AC:  MOVLB  0
086AE:  GOTO   893C
086B2:  MOVFF  235,239
086B6:  MOVFF  239,00
086BA:  MOVLB  2
086BC:  MOVF   x31,W
086BE:  SUBWF  x39,F
086C0:  MOVFF  232,23F
086C4:  BSF    x3F.7
086C6:  MOVFF  233,23E
086CA:  MOVFF  234,23D
086CE:  MOVLB  0
086D0:  MOVLB  2
086D2:  CLRF   x3C
086D4:  BCF    FD8.0
086D6:  RRCF   x3F,F
086D8:  RRCF   x3E,F
086DA:  RRCF   x3D,F
086DC:  RRCF   x3C,F
086DE:  DECFSZ x39,F
086E0:  BRA    86E6
086E2:  BRA    86EC
086E4:  MOVLB  0
086E6:  MOVLB  0
086E8:  GOTO   86D0
086EC:  MOVLB  0
086EE:  MOVLB  2
086F0:  BTFSC  x3A.7
086F2:  BRA    86FA
086F4:  MOVLB  0
086F6:  GOTO   8708
086FA:  BSF    x3B.1
086FC:  MOVLB  0
086FE:  GOTO   8958
08702:  MOVLB  2
08704:  BCF    x3B.1
08706:  MOVLB  0
08708:  MOVLB  2
0870A:  BCF    x39.0
0870C:  BSF    x3B.5
0870E:  MOVLW  02
08710:  MOVWF  FEA
08712:  MOVLW  38
08714:  MOVWF  FE9
08716:  MOVLB  0
08718:  GOTO   89B2
0871C:  MOVLB  2
0871E:  BCF    x3B.5
08720:  BTFSS  x3A.7
08722:  BRA    872A
08724:  MOVLB  0
08726:  GOTO   874E
0872A:  BTFSC  x39.0
0872C:  BRA    8734
0872E:  MOVLB  0
08730:  GOTO   8774
08734:  RRCF   x3F,F
08736:  RRCF   x3E,F
08738:  RRCF   x3D,F
0873A:  RRCF   x3C,F
0873C:  INCF   00,F
0873E:  BTFSS  FD8.2
08740:  BRA    8748
08742:  MOVLB  0
08744:  GOTO   894C
08748:  MOVLB  0
0874A:  GOTO   8774
0874E:  MOVLB  2
08750:  BTFSS  x3F.7
08752:  BRA    875A
08754:  MOVLB  0
08756:  GOTO   8784
0875A:  BCF    FD8.0
0875C:  RLCF   x3C,F
0875E:  RLCF   x3D,F
08760:  RLCF   x3E,F
08762:  RLCF   x3F,F
08764:  DECFSZ 00,F
08766:  BRA    876E
08768:  MOVLB  0
0876A:  GOTO   894C
0876E:  MOVLB  0
08770:  GOTO   874E
08774:  MOVLB  2
08776:  BSF    x3B.7
08778:  MOVLB  0
0877A:  GOTO   8818
0877E:  MOVLB  2
08780:  BCF    x3B.7
08782:  MOVLB  0
08784:  MOVFF  236,23A
08788:  MOVLB  2
0878A:  BTFSC  x3A.7
0878C:  BRA    8794
0878E:  MOVLB  0
08790:  GOTO   879C
08794:  BSF    x3F.7
08796:  MOVLB  0
08798:  GOTO   893C
0879C:  MOVLB  2
0879E:  BCF    x3F.7
087A0:  MOVLB  0
087A2:  GOTO   893C
087A6:  MOVFF  236,23F
087AA:  MOVLB  2
087AC:  BSF    x3F.7
087AE:  MOVFF  237,23E
087B2:  MOVFF  238,23D
087B6:  BTFSC  x3A.7
087B8:  BRA    87C0
087BA:  MOVLB  0
087BC:  GOTO   87D0
087C0:  BCF    x3F.7
087C2:  BSF    x3B.2
087C4:  MOVLB  0
087C6:  GOTO   8958
087CA:  MOVLB  2
087CC:  BCF    x3B.2
087CE:  MOVLB  0
087D0:  MOVLB  2
087D2:  CLRF   x3C
087D4:  BCF    x39.0
087D6:  MOVLW  02
087D8:  MOVWF  FEA
087DA:  MOVLW  34
087DC:  MOVWF  FE9
087DE:  MOVLB  0
087E0:  GOTO   89B2
087E4:  MOVLB  2
087E6:  BTFSS  x3A.7
087E8:  BRA    87F0
087EA:  MOVLB  0
087EC:  GOTO   8878
087F0:  MOVFF  232,23A
087F4:  MOVLB  0
087F6:  MOVLB  2
087F8:  BTFSC  x39.0
087FA:  BRA    8802
087FC:  MOVLB  0
087FE:  GOTO   8818
08802:  RRCF   x3F,F
08804:  RRCF   x3E,F
08806:  RRCF   x3D,F
08808:  RRCF   x3C,F
0880A:  INCF   00,F
0880C:  BTFSS  FD8.2
0880E:  BRA    8816
08810:  MOVLB  0
08812:  GOTO   894C
08816:  MOVLB  0
08818:  MOVLB  2
0881A:  BTFSC  x3C.7
0881C:  BRA    8824
0881E:  MOVLB  0
08820:  GOTO   885C
08824:  INCF   x3D,F
08826:  BTFSC  FD8.2
08828:  BRA    8830
0882A:  MOVLB  0
0882C:  GOTO   885C
08830:  INCF   x3E,F
08832:  BTFSC  FD8.2
08834:  BRA    883C
08836:  MOVLB  0
08838:  GOTO   885C
0883C:  INCF   x3F,F
0883E:  BTFSC  FD8.2
08840:  BRA    8848
08842:  MOVLB  0
08844:  GOTO   885C
08848:  RRCF   x3F,F
0884A:  RRCF   x3E,F
0884C:  RRCF   x3D,F
0884E:  INCF   00,F
08850:  BTFSS  FD8.2
08852:  BRA    885A
08854:  MOVLB  0
08856:  GOTO   894C
0885A:  MOVLB  0
0885C:  MOVLB  2
0885E:  BTFSS  x3B.6
08860:  BRA    8868
08862:  MOVLB  0
08864:  GOTO   868A
08868:  BTFSS  x3B.7
0886A:  BRA    8872
0886C:  MOVLB  0
0886E:  GOTO   877E
08872:  MOVLB  0
08874:  GOTO   88FA
08878:  MOVLW  80
0887A:  MOVLB  2
0887C:  XORWF  x3F,F
0887E:  BTFSC  x3F.7
08880:  BRA    8888
08882:  MOVLB  0
08884:  GOTO   8896
08888:  MOVLB  0
0888A:  GOTO   8958
0888E:  MOVFF  236,23A
08892:  GOTO   88D0
08896:  MOVFF  232,23A
0889A:  MOVLB  2
0889C:  MOVF   x3F,F
0889E:  BTFSC  FD8.2
088A0:  BRA    88A8
088A2:  MOVLB  0
088A4:  GOTO   88D0
088A8:  MOVLB  0
088AA:  MOVLB  2
088AC:  MOVF   x3E,F
088AE:  BTFSC  FD8.2
088B0:  BRA    88B8
088B2:  MOVLB  0
088B4:  GOTO   88D0
088B8:  MOVLB  0
088BA:  MOVLB  2
088BC:  MOVF   x3D,F
088BE:  BTFSC  FD8.2
088C0:  BRA    88C8
088C2:  MOVLB  0
088C4:  GOTO   88D0
088C8:  MOVLB  0
088CA:  CLRF   00
088CC:  GOTO   893C
088D0:  MOVLB  2
088D2:  BTFSS  x3F.7
088D4:  BRA    88DC
088D6:  MOVLB  0
088D8:  GOTO   88FA
088DC:  BCF    FD8.0
088DE:  RLCF   x3C,F
088E0:  RLCF   x3D,F
088E2:  RLCF   x3E,F
088E4:  RLCF   x3F,F
088E6:  DECFSZ 00,F
088E8:  BRA    88EE
088EA:  BRA    88F4
088EC:  MOVLB  0
088EE:  MOVLB  0
088F0:  GOTO   88D0
088F4:  MOVLB  0
088F6:  GOTO   894C
088FA:  MOVLB  2
088FC:  BTFSC  x3A.7
088FE:  BRA    8906
08900:  MOVLB  0
08902:  GOTO   890E
08906:  BSF    x3F.7
08908:  MOVLB  0
0890A:  GOTO   893C
0890E:  MOVLB  2
08910:  BCF    x3F.7
08912:  MOVLB  0
08914:  GOTO   893C
08918:  MOVFF  235,00
0891C:  MOVFF  236,23F
08920:  MOVFF  237,23E
08924:  MOVFF  238,23D
08928:  GOTO   893C
0892C:  MOVFF  231,00
08930:  MOVFF  232,23F
08934:  MOVFF  233,23E
08938:  MOVFF  234,23D
0893C:  MOVFF  23F,01
08940:  MOVFF  23E,02
08944:  MOVFF  23D,03
08948:  GOTO   8A1E
0894C:  CLRF   00
0894E:  CLRF   01
08950:  CLRF   02
08952:  CLRF   03
08954:  GOTO   8A1E
08958:  MOVLB  2
0895A:  CLRF   x3C
0895C:  COMF   x3D,F
0895E:  COMF   x3E,F
08960:  COMF   x3F,F
08962:  COMF   x3C,F
08964:  INCF   x3C,F
08966:  BTFSC  FD8.2
08968:  BRA    8970
0896A:  MOVLB  0
0896C:  GOTO   898C
08970:  INCF   x3D,F
08972:  BTFSC  FD8.2
08974:  BRA    897C
08976:  MOVLB  0
08978:  GOTO   898C
0897C:  INCF   x3E,F
0897E:  BTFSC  FD8.2
08980:  BRA    8988
08982:  MOVLB  0
08984:  GOTO   898C
08988:  INCF   x3F,F
0898A:  MOVLB  0
0898C:  MOVLB  2
0898E:  BTFSS  x3B.0
08990:  BRA    8998
08992:  MOVLB  0
08994:  GOTO   860E
08998:  BTFSS  x3B.1
0899A:  BRA    89A2
0899C:  MOVLB  0
0899E:  GOTO   8702
089A2:  BTFSS  x3B.2
089A4:  BRA    89AC
089A6:  MOVLB  0
089A8:  GOTO   87CA
089AC:  MOVLB  0
089AE:  GOTO   888E
089B2:  MOVF   FEF,W
089B4:  MOVLB  2
089B6:  ADDWF  x3D,F
089B8:  BTFSC  FD8.0
089BA:  BRA    89C2
089BC:  MOVLB  0
089BE:  GOTO   89D6
089C2:  INCF   x3E,F
089C4:  BTFSC  FD8.2
089C6:  BRA    89CE
089C8:  MOVLB  0
089CA:  GOTO   89D6
089CE:  INCF   x3F,F
089D0:  BTFSC  FD8.2
089D2:  BSF    x39.0
089D4:  MOVLB  0
089D6:  MOVF   FED,F
089D8:  MOVF   FEF,W
089DA:  MOVLB  2
089DC:  ADDWF  x3E,F
089DE:  BTFSC  FD8.0
089E0:  BRA    89E8
089E2:  MOVLB  0
089E4:  GOTO   89F0
089E8:  INCF   x3F,F
089EA:  BTFSC  FD8.2
089EC:  BSF    x39.0
089EE:  MOVLB  0
089F0:  MOVF   FED,F
089F2:  MOVF   FEF,W
089F4:  BTFSC  FEF.7
089F6:  GOTO   89FC
089FA:  XORLW  80
089FC:  MOVLB  2
089FE:  ADDWF  x3F,F
08A00:  BTFSC  FD8.0
08A02:  BSF    x39.0
08A04:  BTFSS  x3B.4
08A06:  BRA    8A0E
08A08:  MOVLB  0
08A0A:  GOTO   8628
08A0E:  BTFSS  x3B.5
08A10:  BRA    8A18
08A12:  MOVLB  0
08A14:  GOTO   871C
08A18:  MOVLB  0
08A1A:  GOTO   87E4
08A1E:  GOTO   8B2C (RETURN)
08A22:  MOVLW  8E
08A24:  MOVWF  00
08A26:  MOVLB  2
08A28:  MOVF   x31,W
08A2A:  SUBWF  00,F
08A2C:  MOVFF  232,02
08A30:  MOVFF  233,01
08A34:  BSF    02.7
08A36:  MOVF   00,F
08A38:  BTFSS  FD8.2
08A3A:  BRA    8A42
08A3C:  MOVLB  0
08A3E:  GOTO   8A60
08A42:  MOVLB  0
08A44:  BCF    FD8.0
08A46:  MOVF   02,F
08A48:  BTFSS  FD8.2
08A4A:  GOTO   8A56
08A4E:  MOVF   01,F
08A50:  BTFSC  FD8.2
08A52:  GOTO   8A60
08A56:  RRCF   02,F
08A58:  RRCF   01,F
08A5A:  DECFSZ 00,F
08A5C:  GOTO   8A44
08A60:  MOVLB  2
08A62:  BTFSC  x32.7
08A64:  BRA    8A6C
08A66:  MOVLB  0
08A68:  GOTO   8A78
08A6C:  MOVLB  0
08A6E:  COMF   01,F
08A70:  COMF   02,F
08A72:  INCF   01,F
08A74:  BTFSC  FD8.2
08A76:  INCF   02,F
08A78:  GOTO   8B84 (RETURN)
*
08B8E:  MOVFF  FEA,22F
08B92:  MOVFF  FE9,22E
08B96:  MOVLB  2
08B98:  SWAPF  x28,W
08B9A:  IORLW  F0
08B9C:  MOVWF  x2A
08B9E:  ADDWF  x2A,F
08BA0:  ADDLW  E2
08BA2:  MOVWF  x2B
08BA4:  ADDLW  32
08BA6:  MOVWF  x2D
08BA8:  MOVF   x28,W
08BAA:  ANDLW  0F
08BAC:  ADDWF  x2B,F
08BAE:  ADDWF  x2B,F
08BB0:  ADDWF  x2D,F
08BB2:  ADDLW  E9
08BB4:  MOVWF  x2C
08BB6:  ADDWF  x2C,F
08BB8:  ADDWF  x2C,F
08BBA:  SWAPF  x27,W
08BBC:  ANDLW  0F
08BBE:  ADDWF  x2C,F
08BC0:  ADDWF  x2D,F
08BC2:  RLCF   x2C,F
08BC4:  RLCF   x2D,F
08BC6:  COMF   x2D,F
08BC8:  RLCF   x2D,F
08BCA:  MOVF   x27,W
08BCC:  ANDLW  0F
08BCE:  ADDWF  x2D,F
08BD0:  RLCF   x2A,F
08BD2:  MOVLW  07
08BD4:  MOVWF  x29
08BD6:  MOVLW  0A
08BD8:  MOVLB  0
08BDA:  MOVLB  2
08BDC:  DECF   x2C,F
08BDE:  ADDWF  x2D,F
08BE0:  BTFSC  FD8.0
08BE2:  BRA    8BEA
08BE4:  MOVLB  0
08BE6:  GOTO   8BDA
08BEA:  MOVLB  0
08BEC:  MOVLB  2
08BEE:  DECF   x2B,F
08BF0:  ADDWF  x2C,F
08BF2:  BTFSC  FD8.0
08BF4:  BRA    8BFC
08BF6:  MOVLB  0
08BF8:  GOTO   8BEC
08BFC:  MOVLB  0
08BFE:  MOVLB  2
08C00:  DECF   x2A,F
08C02:  ADDWF  x2B,F
08C04:  BTFSC  FD8.0
08C06:  BRA    8C0E
08C08:  MOVLB  0
08C0A:  GOTO   8BFE
08C0E:  MOVLB  0
08C10:  MOVLB  2
08C12:  DECF   x29,F
08C14:  ADDWF  x2A,F
08C16:  BTFSC  FD8.0
08C18:  BRA    8C20
08C1A:  MOVLB  0
08C1C:  GOTO   8C10
08C20:  MOVLW  02
08C22:  MOVWF  FEA
08C24:  MOVLW  29
08C26:  MOVWF  FE9
08C28:  MOVLW  07
08C2A:  ANDWF  x2E,W
08C2C:  BCF    x2E.6
08C2E:  MOVLB  0
08C30:  ADDWF  FE9,F
08C32:  MOVLW  00
08C34:  ADDWFC FEA,F
08C36:  MOVF   FE9,W
08C38:  SUBLW  2D
08C3A:  BTFSS  FD8.2
08C3C:  GOTO   8C50
08C40:  MOVF   FEA,W
08C42:  SUBLW  02
08C44:  BTFSS  FD8.2
08C46:  GOTO   8C50
08C4A:  MOVLB  2
08C4C:  BSF    x2E.6
08C4E:  MOVLB  0
08C50:  MOVF   FEF,W
08C52:  MOVWF  00
08C54:  BTFSS  FD8.2
08C56:  GOTO   8C82
08C5A:  MOVLB  2
08C5C:  BTFSS  x2E.6
08C5E:  BRA    8C66
08C60:  MOVLB  0
08C62:  GOTO   8C82
08C66:  BTFSS  x2E.4
08C68:  BRA    8C70
08C6A:  MOVLB  0
08C6C:  GOTO   8C9C
08C70:  BTFSS  x2E.3
08C72:  BRA    8C7A
08C74:  MOVLB  0
08C76:  GOTO   8C82
08C7A:  MOVLW  20
08C7C:  MOVLB  0
08C7E:  GOTO   8C8C
08C82:  MOVLB  2
08C84:  BSF    x2E.3
08C86:  BCF    x2E.4
08C88:  MOVLW  30
08C8A:  MOVLB  0
08C8C:  ADDWF  00,F
08C8E:  MOVF   00,W
08C90:  BTFSS  FA6.6
08C92:  GOTO   8C90
08C96:  MOVLB  E
08C98:  MOVWF  xF9
08C9A:  MOVLB  0
08C9C:  MOVF   FEE,W
08C9E:  MOVLB  2
08CA0:  BTFSC  x2E.6
08CA2:  BRA    8CAA
08CA4:  MOVLB  0
08CA6:  GOTO   8C36
08CAA:  MOVLB  0
08CAC:  RETURN 0
*
0DE0E:  MOVLB  2
0DE10:  CLRF   x0F
0DE12:  CLRF   x10
0DE14:  MOVLW  01
0DE16:  MOVWF  x11
0DE18:  CLRF   FDA
0DE1A:  CLRF   FD9
0DE1C:  MOVLW  02
0DE1E:  MOVWF  x14
0DE20:  MOVLW  07
0DE22:  MOVWF  x13
0DE24:  MOVLB  0
0DE26:  MOVLW  02
0DE28:  MOVWF  FEA
0DE2A:  MOVLW  0B
0DE2C:  MOVWF  FE9
0DE2E:  MOVFF  214,FE2
0DE32:  MOVFF  213,FE1
0DE36:  MOVFF  211,212
0DE3A:  BCF    FD8.0
0DE3C:  MOVF   FE5,W
0DE3E:  MULWF  FEE
0DE40:  MOVF   FF3,W
0DE42:  MOVLB  2
0DE44:  ADDWFC x0F,F
0DE46:  MOVF   FF4,W
0DE48:  ADDWFC x10,F
0DE4A:  DECFSZ x12,F
0DE4C:  BRA    DE52
0DE4E:  BRA    DE58
0DE50:  MOVLB  0
0DE52:  MOVLB  0
0DE54:  GOTO   DE3A
0DE58:  MOVFF  20F,FDE
0DE5C:  MOVFF  210,20F
0DE60:  CLRF   x10
0DE62:  BTFSC  FD8.0
0DE64:  INCF   x10,F
0DE66:  INCF   x13,F
0DE68:  BTFSC  FD8.2
0DE6A:  INCF   x14,F
0DE6C:  INCF   x11,F
0DE6E:  MOVF   x11,W
0DE70:  SUBLW  05
0DE72:  BTFSC  FD8.2
0DE74:  BRA    DE7C
0DE76:  MOVLB  0
0DE78:  GOTO   DE26
0DE7C:  MOVLB  0
0DE7E:  GOTO   DF52 (RETURN)
*
0E0B2:  MOVLB  2
0E0B4:  MOVF   xCC,W
0E0B6:  CLRF   01
0E0B8:  SUBWF  xCB,W
0E0BA:  BTFSS  FD8.0
0E0BC:  BRA    E0C4
0E0BE:  MOVLB  0
0E0C0:  GOTO   E0CE
0E0C4:  MOVF   xCB,W
0E0C6:  MOVWF  00
0E0C8:  MOVLB  0
0E0CA:  GOTO   E0F8
0E0CE:  CLRF   00
0E0D0:  MOVLW  08
0E0D2:  MOVLB  2
0E0D4:  MOVWF  xCD
0E0D6:  MOVLB  0
0E0D8:  MOVLB  2
0E0DA:  RLCF   xCB,F
0E0DC:  RLCF   00,F
0E0DE:  MOVF   xCC,W
0E0E0:  SUBWF  00,W
0E0E2:  BTFSC  FD8.0
0E0E4:  MOVWF  00
0E0E6:  RLCF   01,F
0E0E8:  DECFSZ xCD,F
0E0EA:  BRA    E0F0
0E0EC:  BRA    E0F6
0E0EE:  MOVLB  0
0E0F0:  MOVLB  0
0E0F2:  GOTO   E0D8
0E0F6:  MOVLB  0
0E0F8:  RETURN 0
0E0FA:  MOVF   01,W
0E0FC:  MOVFF  1ED,2CB
0E100:  MOVLW  64
0E102:  MOVLB  2
0E104:  MOVWF  xCC
0E106:  MOVLB  0
0E108:  CALL   E0B2
0E10C:  MOVFF  00,1ED
0E110:  MOVF   01,W
0E112:  MOVLW  30
0E114:  BTFSS  FD8.2
0E116:  GOTO   E13A
0E11A:  MOVLB  1
0E11C:  BTFSC  xEE.1
0E11E:  BRA    E126
0E120:  MOVLB  0
0E122:  GOTO   E154
0E126:  BTFSS  xEE.3
0E128:  BRA    E130
0E12A:  MOVLB  0
0E12C:  GOTO   E154
0E130:  BTFSC  xEE.4
0E132:  MOVLW  20
0E134:  MOVLB  0
0E136:  GOTO   E144
0E13A:  MOVLB  1
0E13C:  BCF    xEE.3
0E13E:  BCF    xEE.4
0E140:  BSF    xEE.0
0E142:  MOVLB  0
0E144:  ADDWF  01,F
0E146:  MOVF   01,W
0E148:  BTFSS  FA6.6
0E14A:  GOTO   E148
0E14E:  MOVLB  E
0E150:  MOVWF  xF9
0E152:  MOVLB  0
0E154:  MOVFF  1ED,2CB
0E158:  MOVLW  0A
0E15A:  MOVLB  2
0E15C:  MOVWF  xCC
0E15E:  MOVLB  0
0E160:  CALL   E0B2
0E164:  MOVFF  00,1ED
0E168:  MOVF   01,W
0E16A:  MOVLW  30
0E16C:  BTFSS  FD8.2
0E16E:  GOTO   E18E
0E172:  MOVLB  1
0E174:  BTFSS  xEE.3
0E176:  BRA    E17E
0E178:  MOVLB  0
0E17A:  GOTO   E19E
0E17E:  BTFSC  xEE.0
0E180:  BRA    E188
0E182:  MOVLB  0
0E184:  GOTO   E19E
0E188:  BTFSC  xEE.4
0E18A:  MOVLW  20
0E18C:  MOVLB  0
0E18E:  ADDWF  01,F
0E190:  MOVF   01,W
0E192:  BTFSS  FA6.6
0E194:  GOTO   E192
0E198:  MOVLB  E
0E19A:  MOVWF  xF9
0E19C:  MOVLB  0
0E19E:  MOVLW  30
0E1A0:  MOVLB  1
0E1A2:  ADDWF  xED,F
0E1A4:  MOVF   xED,W
0E1A6:  MOVLB  0
0E1A8:  BTFSS  FA6.6
0E1AA:  GOTO   E1A8
0E1AE:  MOVLB  E
0E1B0:  MOVWF  xF9
0E1B2:  MOVLB  0
0E1B4:  RETURN 0
*
0E8B0:  MOVF   FE9,W
0E8B2:  MOVLB  1
0E8B4:  MOVWF  xEC
0E8B6:  BTFSC  xEB.7
0E8B8:  BRA    E8C0
0E8BA:  MOVLB  0
0E8BC:  GOTO   E8DC
0E8C0:  DECF   xEC,F
0E8C2:  BSF    xEC.5
0E8C4:  COMF   xE8,F
0E8C6:  COMF   xE9,F
0E8C8:  COMF   xEA,F
0E8CA:  COMF   xEB,F
0E8CC:  INCF   xE8,F
0E8CE:  BTFSC  FD8.2
0E8D0:  INCF   xE9,F
0E8D2:  BTFSC  FD8.2
0E8D4:  INCF   xEA,F
0E8D6:  BTFSC  FD8.2
0E8D8:  INCF   xEB,F
0E8DA:  MOVLB  0
0E8DC:  MOVLW  3B
0E8DE:  MOVLB  1
0E8E0:  MOVWF  xF3
0E8E2:  MOVLW  9A
0E8E4:  MOVWF  xF2
0E8E6:  MOVLW  CA
0E8E8:  MOVWF  xF1
0E8EA:  CLRF   xF0
0E8EC:  MOVLW  0A
0E8EE:  MOVWF  xEE
0E8F0:  MOVLB  0
0E8F2:  BSF    FD8.1
0E8F4:  MOVLW  01
0E8F6:  MOVWF  FEA
0E8F8:  MOVLW  E8
0E8FA:  MOVWF  FE9
0E8FC:  MOVFF  1EB,253
0E900:  MOVFF  1EA,252
0E904:  MOVFF  1E9,251
0E908:  MOVFF  1E8,250
0E90C:  MOVFF  1F3,257
0E910:  MOVFF  1F2,256
0E914:  MOVFF  1F1,255
0E918:  MOVFF  1F0,254
0E91C:  CALL   5F7C
0E920:  MOVF   01,W
0E922:  MOVF   00,F
0E924:  BTFSS  FD8.2
0E926:  GOTO   E97E
0E92A:  MOVLB  1
0E92C:  MOVF   xEE,W
0E92E:  XORLW  01
0E930:  BTFSS  FD8.2
0E932:  BRA    E93A
0E934:  MOVLB  0
0E936:  GOTO   E97E
0E93A:  MOVF   xEC,W
0E93C:  BTFSS  FD8.2
0E93E:  BRA    E946
0E940:  MOVLB  0
0E942:  GOTO   E986
0E946:  ANDLW  0F
0E948:  SUBWF  xEE,W
0E94A:  BTFSS  FD8.2
0E94C:  BRA    E954
0E94E:  MOVLB  0
0E950:  GOTO   E960
0E954:  BTFSS  FD8.0
0E956:  BRA    E95E
0E958:  MOVLB  0
0E95A:  GOTO   E9EE
0E95E:  MOVLB  0
0E960:  MOVLB  1
0E962:  BTFSS  xEC.7
0E964:  BRA    E96C
0E966:  MOVLB  0
0E968:  GOTO   E9EE
0E96C:  BTFSS  xEC.6
0E96E:  BRA    E976
0E970:  MOVLB  0
0E972:  GOTO   E986
0E976:  MOVLW  20
0E978:  MOVLB  0
0E97A:  GOTO   E9DE
0E97E:  MOVLW  20
0E980:  MOVLB  1
0E982:  ANDWF  xEC,F
0E984:  MOVLB  0
0E986:  MOVLB  1
0E988:  BTFSC  xEC.5
0E98A:  BRA    E992
0E98C:  MOVLB  0
0E98E:  GOTO   E9B0
0E992:  BCF    xEC.5
0E994:  MOVF   00,W
0E996:  MOVWF  xEC
0E998:  MOVLW  2D
0E99A:  MOVLB  0
0E99C:  BTFSS  FA6.6
0E99E:  GOTO   E99C
0E9A2:  MOVLB  E
0E9A4:  MOVWF  xF9
0E9A6:  MOVLB  1
0E9A8:  MOVF   xEC,W
0E9AA:  MOVWF  00
0E9AC:  CLRF   xEC
0E9AE:  MOVLB  0
0E9B0:  MOVLW  30
0E9B2:  MOVLB  1
0E9B4:  BTFSC  xEC.5
0E9B6:  BRA    E9BE
0E9B8:  MOVLB  0
0E9BA:  GOTO   E9DE
0E9BE:  BCF    xEC.5
0E9C0:  MOVF   00,W
0E9C2:  MOVWF  xEC
0E9C4:  MOVLW  2D
0E9C6:  MOVLB  0
0E9C8:  BTFSS  FA6.6
0E9CA:  GOTO   E9C8
0E9CE:  MOVLB  E
0E9D0:  MOVWF  xF9
0E9D2:  MOVLB  1
0E9D4:  MOVF   xEC,W
0E9D6:  MOVWF  00
0E9D8:  CLRF   xEC
0E9DA:  MOVLW  30
0E9DC:  MOVLB  0
0E9DE:  ADDWF  00,F
0E9E0:  MOVF   00,W
0E9E2:  BTFSS  FA6.6
0E9E4:  GOTO   E9E2
0E9E8:  MOVLB  E
0E9EA:  MOVWF  xF9
0E9EC:  MOVLB  0
0E9EE:  BCF    FD8.1
0E9F0:  MOVFF  1F3,253
0E9F4:  MOVFF  1F2,252
0E9F8:  MOVFF  1F1,251
0E9FC:  MOVFF  1F0,250
0EA00:  MOVLB  2
0EA02:  CLRF   x57
0EA04:  CLRF   x56
0EA06:  CLRF   x55
0EA08:  MOVLW  0A
0EA0A:  MOVWF  x54
0EA0C:  MOVLB  0
0EA0E:  CALL   5F7C
0EA12:  MOVFF  03,1F3
0EA16:  MOVFF  02,1F2
0EA1A:  MOVFF  01,1F1
0EA1E:  MOVFF  00,1F0
0EA22:  MOVLB  1
0EA24:  DECFSZ xEE,F
0EA26:  BRA    EA2C
0EA28:  BRA    EA32
0EA2A:  MOVLB  0
0EA2C:  MOVLB  0
0EA2E:  GOTO   E8F2
0EA32:  MOVLB  0
0EA34:  RETURN 0
*
0F128:  MOVLW  20
0F12A:  MOVLB  2
0F12C:  BTFSS  xC6.4
0F12E:  MOVLW  30
0F130:  MOVWF  xC7
0F132:  MOVFF  2C5,00
0F136:  BTFSC  00.7
0F138:  BRA    F140
0F13A:  MOVLB  0
0F13C:  GOTO   F152
0F140:  COMF   00,F
0F142:  INCF   00,F
0F144:  MOVFF  00,2C5
0F148:  MOVLW  2D
0F14A:  MOVWF  xC7
0F14C:  BSF    xC6.7
0F14E:  BSF    xC6.0
0F150:  MOVLB  0
0F152:  MOVF   01,W
0F154:  MOVFF  2C5,2CB
0F158:  MOVLW  64
0F15A:  MOVLB  2
0F15C:  MOVWF  xCC
0F15E:  MOVLB  0
0F160:  CALL   E0B2
0F164:  MOVFF  00,2C5
0F168:  MOVLW  30
0F16A:  ADDWF  01,W
0F16C:  MOVLB  2
0F16E:  MOVWF  xC8
0F170:  MOVFF  2C5,2CB
0F174:  MOVLW  0A
0F176:  MOVWF  xCC
0F178:  MOVLB  0
0F17A:  CALL   E0B2
0F17E:  MOVLW  30
0F180:  ADDWF  00,W
0F182:  MOVLB  2
0F184:  MOVWF  xCA
0F186:  MOVLW  30
0F188:  ADDWF  01,W
0F18A:  MOVWF  xC9
0F18C:  MOVFF  2C7,00
0F190:  MOVLB  0
0F192:  MOVLW  30
0F194:  MOVLB  2
0F196:  SUBWF  xC8,W
0F198:  BTFSS  FD8.2
0F19A:  BRA    F1A2
0F19C:  MOVLB  0
0F19E:  GOTO   F1AE
0F1A2:  BSF    xC6.1
0F1A4:  BTFSC  xC6.7
0F1A6:  BSF    xC6.2
0F1A8:  MOVLB  0
0F1AA:  GOTO   F1EE
0F1AE:  MOVFF  2C7,2C8
0F1B2:  MOVLW  20
0F1B4:  MOVLB  2
0F1B6:  MOVWF  xC7
0F1B8:  MOVLW  30
0F1BA:  SUBWF  xC9,W
0F1BC:  BTFSS  FD8.2
0F1BE:  BRA    F1C6
0F1C0:  MOVLB  0
0F1C2:  GOTO   F1D2
0F1C6:  BSF    xC6.0
0F1C8:  BTFSC  xC6.7
0F1CA:  BSF    xC6.1
0F1CC:  MOVLB  0
0F1CE:  GOTO   F1EE
0F1D2:  BTFSC  FD8.2
0F1D4:  BRA    F1DC
0F1D6:  MOVLB  2
0F1D8:  BSF    xC6.0
0F1DA:  MOVLB  0
0F1DC:  BTFSS  FD8.2
0F1DE:  GOTO   F1EE
0F1E2:  MOVFF  2C8,2C9
0F1E6:  MOVLW  20
0F1E8:  MOVLB  2
0F1EA:  MOVWF  xC8
0F1EC:  MOVLB  0
0F1EE:  MOVLB  2
0F1F0:  BTFSS  xC6.2
0F1F2:  BRA    F1FA
0F1F4:  MOVLB  0
0F1F6:  GOTO   F214
0F1FA:  BTFSS  xC6.1
0F1FC:  BRA    F204
0F1FE:  MOVLB  0
0F200:  GOTO   F226
0F204:  BTFSS  xC6.0
0F206:  BRA    F20E
0F208:  MOVLB  0
0F20A:  GOTO   F238
0F20E:  MOVLB  0
0F210:  GOTO   F24A
0F214:  MOVLB  2
0F216:  MOVF   xC7,W
0F218:  MOVLB  0
0F21A:  BTFSS  FA6.6
0F21C:  GOTO   F21A
0F220:  MOVLB  E
0F222:  MOVWF  xF9
0F224:  MOVLB  0
0F226:  MOVLB  2
0F228:  MOVF   xC8,W
0F22A:  MOVLB  0
0F22C:  BTFSS  FA6.6
0F22E:  GOTO   F22C
0F232:  MOVLB  E
0F234:  MOVWF  xF9
0F236:  MOVLB  0
0F238:  MOVLB  2
0F23A:  MOVF   xC9,W
0F23C:  MOVLB  0
0F23E:  BTFSS  FA6.6
0F240:  GOTO   F23E
0F244:  MOVLB  E
0F246:  MOVWF  xF9
0F248:  MOVLB  0
0F24A:  MOVLB  2
0F24C:  MOVF   xCA,W
0F24E:  MOVLB  0
0F250:  BTFSS  FA6.6
0F252:  GOTO   F250
0F256:  MOVLB  E
0F258:  MOVWF  xF9
0F25A:  MOVLB  0
0F25C:  RETURN 0
*
0FEAC:  ADDWF  FE8,W
0FEAE:  CLRF   FF7
0FEB0:  RLCF   FF7,F
0FEB2:  ADDLW  CD
0FEB4:  MOVWF  FF6
0FEB6:  MOVLW  FE
0FEB8:  ADDWFC FF7,F
0FEBA:  MOVLW  00
0FEBC:  MOVWF  FF8
0FEBE:  MOVWF  FFB
0FEC0:  TBLRD*-
0FEC2:  MOVF   FF5,W
0FEC4:  MOVWF  FFA
0FEC6:  TBLRD*
0FEC8:  MOVF   FF5,W
0FECA:  MOVWF  FF9
0FECC:  DATA 54,FE
0FECE:  DATA 64,FE
0FED0:  DATA 84,FE
0FED2:  DATA 94,FE
.................... 
.................... #list
.................... 
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
*
01FC2:  MOVLW  0B
01FC4:  MOVWF  FEA
01FC6:  MOVLW  4C
01FC8:  MOVWF  FE9
01FCA:  MOVF   FEF,W
01FCC:  BTFSC  FD8.2
01FCE:  GOTO   1FEE
01FD2:  MOVLW  05
01FD4:  MOVWF  01
01FD6:  CLRF   00
01FD8:  DECFSZ 00,F
01FDA:  BRA    1FD8
01FDC:  DECFSZ 01,F
01FDE:  BRA    1FD6
01FE0:  MOVLW  2E
01FE2:  MOVWF  00
01FE4:  DECFSZ 00,F
01FE6:  BRA    1FE4
01FE8:  BRA    1FEA
01FEA:  DECFSZ FEF,F
01FEC:  BRA    1FD2
01FEE:  RETURN 0
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
*
00280:  BTFSS  FA6.5
00282:  GOTO   0280
00286:  MOVLB  F
00288:  MOVF   x2F,W
0028A:  MOVWF  1B
0028C:  MOVLB  0
0028E:  MOVLB  F
00290:  MOVF   x2A,W
00292:  MOVWF  01
00294:  BTFSC  1B.1
00296:  BRA    029E
00298:  MOVLB  0
0029A:  GOTO   02A2
0029E:  BCF    x2F.4
002A0:  BSF    x2F.4
002A2:  MOVLB  0
002A4:  GOTO   02DE (RETURN)
*
05528:  BTFSS  FA6.4
0552A:  GOTO   5528
0552E:  MOVLB  F
05530:  MOVWF  x29
05532:  MOVLB  0
05534:  GOTO   556A (RETURN)
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
*
08F0C:  BTFSS  FA6.6
08F0E:  GOTO   8F0C
08F12:  MOVLB  E
08F14:  MOVWF  xF9
08F16:  MOVLB  0
08F18:  GOTO   9856 (RETURN)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
*
0285E:  MOVLB  B
02860:  MOVF   x6F,W
02862:  SUBLW  08
02864:  BTFSS  FD8.2
02866:  BRA    286E
02868:  MOVLB  0
0286A:  GOTO   2886
0286E:  MOVWF  x71
02870:  MOVLB  0
02872:  MOVLB  B
02874:  RLCF   x6E,F
02876:  DECFSZ x71,F
02878:  BRA    287E
0287A:  BRA    2884
0287C:  MOVLB  0
0287E:  MOVLB  0
02880:  GOTO   2872
02884:  MOVLB  0
02886:  BSF    F92.1
02888:  BCF    F92.0
0288A:  BCF    F92.3
0288C:  BCF    F89.3
0288E:  MOVFF  B6F,B71
02892:  MOVLB  B
02894:  BTFSS  x6E.7
02896:  BCF    F89.0
02898:  BTFSC  x6E.7
0289A:  BSF    F89.0
0289C:  RLCF   x6E,F
0289E:  BSF    F89.3
028A0:  RLCF   01,F
028A2:  BTFSS  F80.1
028A4:  BCF    01.0
028A6:  BTFSC  F80.1
028A8:  BSF    01.0
028AA:  BCF    F89.3
028AC:  DECFSZ x71,F
028AE:  BRA    28B4
028B0:  BRA    28BA
028B2:  MOVLB  0
028B4:  MOVLB  0
028B6:  GOTO   2892
028BA:  MOVLB  0
028BC:  RETURN 0
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
*
027FE:  MOVLB  B
02800:  MOVF   x6F,W
02802:  SUBLW  08
02804:  BTFSS  FD8.2
02806:  BRA    280E
02808:  MOVLB  0
0280A:  GOTO   2826
0280E:  MOVWF  x71
02810:  MOVLB  0
02812:  MOVLB  B
02814:  RLCF   x6E,F
02816:  DECFSZ x71,F
02818:  BRA    281E
0281A:  BRA    2824
0281C:  MOVLB  0
0281E:  MOVLB  0
02820:  GOTO   2812
02824:  MOVLB  0
02826:  BSF    F96.0
02828:  BCF    F96.6
0282A:  BCF    F96.1
0282C:  BCF    F8D.1
0282E:  MOVFF  B6F,B71
02832:  MOVLB  B
02834:  BTFSS  x6E.7
02836:  BCF    F8D.6
02838:  BTFSC  x6E.7
0283A:  BSF    F8D.6
0283C:  RLCF   x6E,F
0283E:  BSF    F8D.1
02840:  RLCF   01,F
02842:  BTFSS  F84.0
02844:  BCF    01.0
02846:  BTFSC  F84.0
02848:  BSF    01.0
0284A:  BCF    F8D.1
0284C:  DECFSZ x71,F
0284E:  BRA    2854
02850:  BRA    285A
02852:  MOVLB  0
02854:  MOVLB  0
02856:  GOTO   2832
0285A:  MOVLB  0
0285C:  RETURN 0
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
*
0214C:  MOVLB  A
0214E:  MOVF   x35,W
02150:  SUBLW  10
02152:  BTFSS  FD8.2
02154:  BRA    215C
02156:  MOVLB  0
02158:  GOTO   2176
0215C:  MOVWF  x37
0215E:  MOVLB  0
02160:  MOVLB  A
02162:  RLCF   x33,F
02164:  RLCF   x34,F
02166:  DECFSZ x37,F
02168:  BRA    216E
0216A:  BRA    2174
0216C:  MOVLB  0
0216E:  MOVLB  0
02170:  GOTO   2160
02174:  MOVLB  0
02176:  BSF    F93.4
02178:  BCF    F93.5
0217A:  BCF    F93.2
0217C:  BSF    F8A.2
0217E:  MOVFF  A35,A37
02182:  MOVLB  A
02184:  BTFSS  x34.7
02186:  BCF    F8A.5
02188:  BTFSC  x34.7
0218A:  BSF    F8A.5
0218C:  RLCF   x33,F
0218E:  RLCF   x34,F
02190:  BCF    F8A.2
02192:  RLCF   01,F
02194:  RLCF   02,F
02196:  BTFSS  F81.4
02198:  BCF    01.0
0219A:  BTFSC  F81.4
0219C:  BSF    01.0
0219E:  BSF    F8A.2
021A0:  DECFSZ x37,F
021A2:  BRA    21A8
021A4:  BRA    21AE
021A6:  MOVLB  0
021A8:  MOVLB  0
021AA:  GOTO   2182
021AE:  MOVLB  0
021B0:  RETURN 0
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
*
0250A:  MOVLB  A
0250C:  MOVF   x20,W
0250E:  SUBLW  10
02510:  BTFSS  FD8.2
02512:  BRA    251A
02514:  MOVLB  0
02516:  GOTO   2534
0251A:  MOVWF  x22
0251C:  MOVLB  0
0251E:  MOVLB  A
02520:  RLCF   x1E,F
02522:  RLCF   x1F,F
02524:  DECFSZ x22,F
02526:  BRA    252C
02528:  BRA    2532
0252A:  MOVLB  0
0252C:  MOVLB  0
0252E:  GOTO   251E
02532:  MOVLB  0
02534:  BCF    F95.4
02536:  BCF    F95.5
02538:  BSF    F8C.5
0253A:  MOVFF  A20,A22
0253E:  MOVLB  A
02540:  BTFSS  x1F.7
02542:  BCF    F8C.4
02544:  BTFSC  x1F.7
02546:  BSF    F8C.4
02548:  RLCF   x1E,F
0254A:  RLCF   x1F,F
0254C:  BCF    F8C.5
0254E:  BSF    F8C.5
02550:  DECFSZ x22,F
02552:  BRA    2558
02554:  BRA    255E
02556:  MOVLB  0
02558:  MOVLB  0
0255A:  GOTO   253E
0255E:  MOVLB  0
02560:  RETURN 0
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... // ADC Settings
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS1_VOLT  
.................... #define ADC_DIODE_INNER_CURR    ADC_CIGS1_CURR 
.................... #define ADC_DIODE_INNER_AMP    ADC_CIGS1_AMP   
.................... #define ADC_DIODE_INNER_VREF   ADC_CIGS1_VREF  
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS2_VOLT  
.................... #define ADC_DIODE_OUTER_CURR   ADC_CIGS2_CURR  
.................... #define ADC_DIODE_OUTER_AMP    ADC_CIGS2_AMP   
.................... #define ADC_DIODE_OUTER_VREF   ADC_CIGS2_VREF  
.................... #define ADC_DIODE_INNER_DAC    ADC_CIGS1_DAC   
.................... #define ADC_DIODE_OUTER_DAC    ADC_CIGS2_DAC   
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル2: ハードウェア抽象化層  
.................... #include "../cigs/hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../cigs/hal/uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../cigs/hal/gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../cigs/device_driver/ad7490_driver.h"
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../cigs/device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル3: 基本ライブラリヘッダー（型定義・通信・ツール）
.................... #include "../lib/communication/typedef_content.h"
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/value_status.h"
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0x90,
....................     SMF_SATO_PICLOG = 0x91,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... // レベル4: デバイスドライバヘッダー
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // レベル5: 通信ライブラリヘッダー
.................... #include "../lib/communication/communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... #ifndef FRAME_CONTENT_H
.................... #define FRAME_CONTENT_H
.................... 
.................... 
.................... // __________ Receives _________
.................... 
.................... #define UPLINK_COMMAND        0x00
.................... #define STATUS_CHECK          0x01
.................... #define IS_SMF_AVAILABLE      0x02
.................... #define SEND_TIME             0x03
.................... 
.................... #define UPLINK_COMMAND_LENGTH     9
.................... #define STATUS_CHECK_LENGTH       0
.................... #define IS_SMF_AVAILABLE_LENGTH   1
.................... #define SEND_TIME_LENGTH         4
.................... 
.................... volatile FrameID frame_ids[] = {
....................    {UPLINK_COMMAND, UPLINK_COMMAND_LENGTH}, 
....................    {STATUS_CHECK, STATUS_CHECK_LENGTH}, 
....................    {IS_SMF_AVAILABLE, IS_SMF_AVAILABLE_LENGTH},
....................    {SEND_TIME, SEND_TIME_LENGTH}
.................... };
.................... 
.................... 
.................... // __________ Transmits _____________
.................... 
.................... typedef enum {
....................    MIS_MCU_STATUS = 0x03,
....................    ACK = 0x0F
.................... } TransmitFrameId;
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... #ifndef COMMUNICATION_H
.................... #define COMMUNICATION_H
.................... 
.................... // __________ device IDs ______________
.................... 
.................... #define GS        0x00
.................... #define MAIN_PIC  0x01
.................... #define COM_PIC   0x02
.................... #define RESET_PIC 0x03
.................... #define FAB_PIC   0x04
.................... #define BOSS_PIC  0x05
.................... #define APRS_PIC  0x06
.................... #define CAM_MCU   0x07
.................... #define CHO_MCU   0x08
.................... #define NAKA_PIC  0x09
.................... #define SATO_PIC  0x0A
.................... #define BHU_MCU   0x0B
.................... #define CIGS_PIC  0x0C
.................... 
....................  // <- change to your device name
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // ____________ SFD ______________
.................... 
.................... #define SFD 0xAA
.................... 
.................... 
.................... // ____________ typedef _____________
.................... 
.................... typedef struct {
....................     int8 id;
....................     int8 length;
.................... } FrameID;
.................... 
.................... #define CONTENT_MAX 9
.................... typedef struct {
....................     int8 frame_id;
....................     unsigned int8 size;
....................     int1 is_exist;
....................     unsigned int8 content[CONTENT_MAX];
.................... } Command;
.................... 
.................... #include "frame.h"
.................... 
.................... // ______ Receive _______
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id);
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size);
.................... 
.................... static int1 check_device_id(unsigned int8 device_id);
.................... 
.................... 
.................... // ______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size);
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size);
.................... 
.................... // ______ Common _________
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // レベル6: コア機能ヘッダー
.................... #include "domain/sato_iv.h"
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/sato_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "domain/sato_piclog.h"
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... // レベル7: アプリケーションヘッダー
.................... #include "application/sato_excute_mission.h"
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "application/sato_mode_mission.h"
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "application/sato_mode_flash.h"
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... //==============================================================================
.................... // .cファイル統合（CCS C単一コンパイル単位）
.................... //==============================================================================
.................... 
.................... // ハードウェア層実装ファイル
.................... // 実装は各 .c からビルドするためヘッダーでの取り込みは不要。必要なら下記のように直下参照に修正。
.................... #include "../cigs/hal/timer.c"
.................... #include "timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... int8 subsec;
.................... unsigned int32 time_ms = 0;
.................... unsigned int32 time_sec = 0;
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr()
.................... {
....................    set_timer0(0);  // 10msごとにリロード
*
001B6:  CLRF   FD7
001B8:  CLRF   FD6
001BA:  NOP   
....................    time_ms += 4;
001BC:  MOVLW  04
001BE:  MOVLB  1
001C0:  ADDWF  x7C,F
001C2:  MOVLW  00
001C4:  ADDWFC x7D,F
001C6:  MOVLW  00
001C8:  ADDWFC x7E,F
001CA:  MOVLW  00
001CC:  ADDWFC x7F,F
....................    if (time_ms >= 4294967290) {
001CE:  MOVF   x7F,W
001D0:  SUBLW  FE
001D2:  BTFSS  FD8.0
001D4:  BRA    01DC
001D6:  MOVLB  0
001D8:  GOTO   0238
001DC:  MOVLB  0
001DE:  XORLW  FF
001E0:  BTFSS  FD8.2
001E2:  GOTO   022C
001E6:  MOVLB  1
001E8:  MOVF   x7E,W
001EA:  SUBLW  FE
001EC:  BTFSS  FD8.0
001EE:  BRA    01F6
001F0:  MOVLB  0
001F2:  GOTO   0238
001F6:  MOVLB  0
001F8:  XORLW  FF
001FA:  BTFSS  FD8.2
001FC:  GOTO   022C
00200:  MOVLB  1
00202:  MOVF   x7D,W
00204:  SUBLW  FE
00206:  BTFSS  FD8.0
00208:  BRA    0210
0020A:  MOVLB  0
0020C:  GOTO   0238
00210:  MOVLB  0
00212:  XORLW  FF
00214:  BTFSS  FD8.2
00216:  GOTO   022C
0021A:  MOVLB  1
0021C:  MOVF   x7C,W
0021E:  SUBLW  F9
00220:  BTFSS  FD8.0
00222:  BRA    022A
00224:  MOVLB  0
00226:  GOTO   0238
0022A:  MOVLB  0
....................       time_ms = 0;
0022C:  MOVLB  1
0022E:  CLRF   x7F
00230:  CLRF   x7E
00232:  CLRF   x7D
00234:  CLRF   x7C
00236:  MOVLB  0
....................    }
.................... }
.................... 
00238:  BCF    FF2.2
0023A:  GOTO   0090
.................... #INT_TIMER1 
.................... static void TIMER1_isr()
.................... {
....................    set_timer1(0x8000); 
0023E:  MOVLW  80
00240:  MOVWF  FCF
00242:  CLRF   FCE
00244:  NOP   
....................    time_sec++;
00246:  MOVLW  01
00248:  MOVLB  1
0024A:  ADDWF  x80,F
0024C:  BTFSC  FD8.0
0024E:  INCF   x81,F
00250:  BTFSC  FD8.2
00252:  INCF   x82,F
00254:  BTFSC  FD8.2
00256:  INCF   x83,F
00258:  MOVLB  0
0025A:  BCF    F9E.0
0025C:  GOTO   0090
.................... }
.................... 
.................... void timer_init()
.................... {
....................    fprintf(PC, "Timer Initialize\r\n");
*
0208A:  MOVLW  60
0208C:  MOVWF  FF6
0208E:  MOVLW  02
02090:  MOVWF  FF7
02092:  MOVLW  00
02094:  MOVWF  FF8
02096:  CALL   1FF0
....................    clear_interrupt(INT_TIMER1);
0209A:  BCF    F9E.0
....................    time_ms = 0;
0209C:  MOVLB  1
0209E:  CLRF   x7F
020A0:  CLRF   x7E
020A2:  CLRF   x7D
020A4:  CLRF   x7C
....................    time_sec = 0;
020A6:  CLRF   x83
020A8:  CLRF   x82
020AA:  CLRF   x81
020AC:  CLRF   x80
....................    setup_timer_1(T1_EXTERNAL | T1_DIV_BY_1 | T1_ENABLE_SOSC);
020AE:  MOVLW  8F
020B0:  MOVWF  FCD
020B2:  CLRF   FAA
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_BIT);
020B4:  MOVLW  D7
020B6:  MOVWF  FD5
....................    set_timer1(0); 
020B8:  CLRF   FCF
020BA:  CLRF   FCE
020BC:  NOP   
....................    enable_interrupts(INT_TIMER1);   
020BE:  BSF    F9D.0
....................    enable_interrupts(INT_TIMER0);
020C0:  BSF    FF2.5
....................    enable_interrupts(GLOBAL);
020C2:  MOVLW  C0
020C4:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
020C6:  MOVLW  74
020C8:  MOVWF  FF6
020CA:  MOVLW  02
020CC:  MOVWF  FF7
020CE:  MOVLW  00
020D0:  MOVWF  FF8
020D2:  MOVLB  0
020D4:  CALL   1FF0
020D8:  GOTO   11E50 (RETURN)
.................... }
.................... 
.................... void set_current_sec(unsigned int32 new_sec)
.................... {
....................    time_sec = new_sec;
*
0FE10:  MOVFF  1E7,183
0FE14:  MOVFF  1E6,182
0FE18:  MOVFF  1E5,181
0FE1C:  MOVFF  1E4,180
0FE20:  GOTO   11804 (RETURN)
.................... }
.................... 
.................... unsigned int32 get_current_sec()
.................... {
....................    return time_sec;
*
03920:  MOVFF  180,00
03924:  MOVFF  181,01
03928:  MOVFF  182,02
0392C:  MOVFF  183,03
03930:  RETURN 0
.................... }
.................... 
.................... unsigned int16 get_current_msec()
.................... {
....................    return time_ms;
*
0982E:  MOVLB  1
09830:  MOVF   x7C,W
09832:  MOVWF  01
09834:  MOVF   x7D,W
09836:  MOVWF  02
09838:  MOVLB  0
0983A:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../cigs/hal/uart.c"
.................... #include "uart.h"
.................... #ifndef UART_H
.................... #define UART_H
.................... 
.................... // _________ defines ________________
.................... 
.................... #define RECEIVE_BUFFER_MAX 32
.................... 
.................... 
.................... // _____________ values _______________
.................... 
.................... volatile unsigned int8 boss_receive_buffer[RECEIVE_BUFFER_MAX] = {0x00};
.................... volatile int8 boss_receive_buffer_size = 0;
.................... 
.................... 
.................... // _______________ functions ___________
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void);
.................... 
.................... void setup_uart_to_boss();
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #INT_RDA3
.................... static void boss_receive_isr(void)
.................... {
....................    if (!(status == EXECUTING_MISSION || status == COPYING) || is_use_smf_req_in_mission)
*
002A8:  GOTO   02AC
002AC:  GOTO   02B6
002B0:  BTFSS  4B.0
002B2:  GOTO   02EA
....................       if (boss_receive_buffer_size < RECEIVE_BUFFER_MAX)
002B6:  MOVF   4A,W
002B8:  SUBLW  1F
002BA:  BTFSS  FD8.0
002BC:  GOTO   02EA
....................          boss_receive_buffer[boss_receive_buffer_size++ % RECEIVE_BUFFER_MAX] = fgetc(BOSS);
002C0:  MOVF   4A,W
002C2:  INCF   4A,F
002C4:  ANDLW  1F
002C6:  CLRF   03
002C8:  ADDLW  2A
002CA:  MOVWF  FE9
002CC:  MOVLW  00
002CE:  ADDWFC 03,W
002D0:  MOVWF  FEA
002D2:  MOVFF  FEA,B77
002D6:  MOVFF  FE9,B76
002DA:  GOTO   0280
002DE:  MOVFF  B77,FEA
002E2:  MOVFF  B76,FE9
002E6:  MOVF   01,W
002E8:  MOVWF  FEF
002EA:  BCF    FA6.5
002EC:  GOTO   0090
.................... }
.................... 
.................... void setup_uart_to_boss()
.................... {
....................    fprintf(PC, "UART Initialize\r\n");
*
02060:  MOVLW  F0
02062:  MOVWF  FF6
02064:  MOVLW  02
02066:  MOVWF  FF7
02068:  MOVLW  00
0206A:  MOVWF  FF8
0206C:  CALL   1FF0
....................    enable_interrupts(INT_RDA3);
02070:  BSF    F61.5
....................    enable_interrupts(GLOBAL);
02072:  MOVLW  C0
02074:  IORWF  FF2,F
....................    fprintf(PC, "\tComplete\r\n");
02076:  MOVLW  02
02078:  MOVWF  FF6
0207A:  MOVLW  03
0207C:  MOVWF  FF7
0207E:  MOVLW  00
02080:  MOVWF  FF8
02082:  CALL   1FF0
02086:  GOTO   11E4C (RETURN)
.................... }
.................... 
.................... void clear_receive_signal(unsigned int8 receive_signal[], int8 *receive_signal_size)
.................... {
....................    memset(receive_signal, 0x00, *receive_signal_size);
*
054EC:  MOVFF  220,03
054F0:  MOVLB  2
054F2:  MOVF   x1F,W
054F4:  MOVWF  FE9
054F6:  MOVFF  03,FEA
054FA:  MOVFF  FEF,221
054FE:  MOVFF  21E,FEA
05502:  MOVFF  21D,FE9
05506:  CLRF   00
05508:  CLRF   02
0550A:  MOVFF  221,01
0550E:  MOVLB  0
05510:  CALL   2BBA
....................    *receive_signal_size = 0;
05514:  MOVFF  220,03
05518:  MOVLB  2
0551A:  MOVF   x1F,W
0551C:  MOVWF  FE9
0551E:  MOVFF  03,FEA
05522:  CLRF   FEF
05524:  MOVLB  0
05526:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../cigs/hal/gpio.c"
.................... #include "cigs_config.h"
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "gpio.h"
.................... #ifndef GPIO_H
.................... #define GPIO_H
.................... 
.................... void gpio_init();
.................... void enable_negative_power();
.................... void disable_negative_power();
.................... void connect_port1();
.................... void disconnect_port1();
.................... void connect_port2();
.................... void disconnect_port2();
.................... 
.................... 
.................... // 
.................... void connect_negative_power1(int1 state);
.................... void connect_negative_power2(int1 state);
.................... #endif // GPIO_H
.................... 
.................... #include "../../lib/tool/types.h"
.................... #ifndef TYPES_H
.................... #define TYPES_H
.................... 
.................... #define bool int1
.................... 
.................... 
.................... 
.................... #endif // TYPES_H
.................... // End of types.h
.................... 
.................... 
.................... 
.................... void gpio_init() {
....................     enable_negative_power();
....................     disconnect_port1();
....................     disconnect_port2();
.................... }
.................... 
.................... void enable_negative_power() {
....................     output_low(EN_NPWR1);
.................... }
.................... 
.................... void connect_negative_power1(int1 state) {
....................     if (state) {
*
04FAE:  MOVLB  1
04FB0:  MOVF   xD7,F
04FB2:  BTFSS  FD8.2
04FB4:  BRA    4FBC
04FB6:  MOVLB  0
04FB8:  GOTO   4FC8
04FBC:  MOVLB  0
....................         output_low(EN_NPWR1);
04FBE:  MOVLW  17
04FC0:  MOVWF  F94
04FC2:  BCF    F8B.7
....................     } else {
04FC4:  GOTO   4FCE
....................         output_high(EN_NPWR1);
04FC8:  MOVLW  17
04FCA:  MOVWF  F94
04FCC:  BSF    F8B.7
....................     }
04FCE:  GOTO   11EAA (RETURN)
.................... }
.................... 
.................... void connect_negative_power2(int1 state) {
....................     if (state) {
....................         output_high(EN_NPWR2);
....................     } else {
....................         output_low(EN_NPWR2);
....................     }
.................... }
.................... 
.................... void connect_port1(){
....................     output_high(CONNECT_CIGS1);
*
04F9E:  MOVLW  17
04FA0:  MOVWF  F94
04FA2:  BSF    F8B.3
04FA4:  RETURN 0
.................... }
.................... 
.................... void disconnect_port1(){
....................     output_low(CONNECT_CIGS1);
*
08F9E:  MOVLW  17
08FA0:  MOVWF  F94
08FA2:  BCF    F8B.3
08FA4:  RETURN 0
.................... }
.................... 
.................... void connect_port2(){
....................     output_high(CONNECT_CIGS2);
*
04FA6:  MOVLW  17
04FA8:  MOVWF  F94
04FAA:  BSF    F8B.5
04FAC:  RETURN 0
.................... }
.................... 
.................... void disconnect_port2(){
....................     output_low(CONNECT_CIGS2);
*
08FA6:  MOVLW  17
08FA8:  MOVWF  F94
08FAA:  BCF    F8B.5
08FAC:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../cigs/device_driver/ad7490_driver.c"
.................... #include "ad7490_driver.h"                          // 同じデバイスフォルダのヘッダー
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/ad7490.h"               // ADCデバイスライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... #define AD7490_MULTI_CHANNEL_MAX 4
.................... 
.................... unsigned int16 ad7490_make_single_channel_cmd(unsigned int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_DISABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... 
....................     return cmd.value;
.................... }
.................... 
.................... void ad7490_set_multi_channel(ad7490_channel_t channel, unsigned int8 num_channels)
.................... {
....................     ad7490_cmd_t cmd;
....................     // Set default values for all fields
....................     cmd.fields.reserved0 = 0; 
....................     cmd.fields.reserved1 = 0; 
....................     cmd.fields.reserved2 = 0; 
....................     cmd.fields.reserved3 = 0;
....................     cmd.fields.coding = AD7490_CODING_BINARY; 
....................     cmd.fields.range = AD7490_RANGE_REF; 
....................     cmd.fields.weak_tri = AD7490_DOUT_TRI; 
....................     cmd.fields.shadow = AD7490_SHADOW_DISABLE; 
....................     cmd.fields.pm0 = (AD7490_PM_NORMAL >> 0) & 1; 
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 1; 
....................     cmd.fields.add0 = (channel >> 0) & 1; 
....................     cmd.fields.add1 = (channel >> 1) & 1; 
....................     cmd.fields.add2 = (channel >> 2) & 1;     
....................     cmd.fields.add3 = (channel >> 3) & 1; 
....................     cmd.fields.seq = AD7490_SEQ_ENABLE; 
....................     cmd.fields.write = AD7490_WRITE_ENABLE;
.................... }
.................... 
.................... void ad7490_init()
.................... {
....................     fprintf(PC, "AD7490 Initialize\r\n");
*
022AE:  MOVLW  0E
022B0:  MOVWF  FF6
022B2:  MOVLW  03
022B4:  MOVWF  FF7
022B6:  MOVLW  00
022B8:  MOVWF  FF8
022BA:  CALL   1FF0
....................     output_high(ADC_CS); 
022BE:  MOVLW  FD
022C0:  MOVWF  F93
022C2:  BSF    F8A.1
....................     delay_ms(10); 
022C4:  MOVLW  0A
022C6:  MOVLB  B
022C8:  MOVWF  x4C
022CA:  MOVLB  0
022CC:  CALL   1FC2
....................     unsigned int16 readdata = ad7490_read(ADC_DIODE_INNER_CURR);
022D0:  MOVLW  01
022D2:  MOVLB  A
022D4:  MOVWF  x2C
022D6:  MOVLB  0
022D8:  CALL   21B2
022DC:  MOVFF  02,1D8
022E0:  MOVFF  01,1D7
....................     delay_ms(1);
022E4:  MOVLW  01
022E6:  MOVLB  B
022E8:  MOVWF  x4C
022EA:  MOVLB  0
022EC:  CALL   1FC2
....................     fprintf(PC, "\t%04LX\r\n", readdata);
022F0:  MOVLW  09
022F2:  BTFSS  FA6.6
022F4:  GOTO   22F2
022F8:  MOVLB  E
022FA:  MOVWF  xF9
022FC:  MOVFF  1D8,A26
02300:  MOVLW  37
02302:  MOVLB  A
02304:  MOVWF  x27
02306:  MOVLB  0
02308:  CALL   2232
0230C:  MOVFF  1D7,A26
02310:  MOVLW  37
02312:  MOVLB  A
02314:  MOVWF  x27
02316:  MOVLB  0
02318:  CALL   2232
0231C:  MOVLW  0D
0231E:  BTFSS  FA6.6
02320:  GOTO   231E
02324:  MOVLB  E
02326:  MOVWF  xF9
02328:  MOVLW  0A
0232A:  MOVLB  0
0232C:  BTFSS  FA6.6
0232E:  GOTO   232C
02332:  MOVLB  E
02334:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02336:  MOVLB  1
02338:  INCFSZ xD7,W
0233A:  BRA    2340
0233C:  BRA    2346
0233E:  MOVLB  0
02340:  MOVLB  0
02342:  GOTO   235E
02346:  MOVLB  0
02348:  MOVLB  1
0234A:  INCFSZ xD8,W
0234C:  BRA    2352
0234E:  BRA    2358
02350:  MOVLB  0
02352:  MOVLB  0
02354:  GOTO   235E
02358:  MOVLB  0
0235A:  GOTO   237E
0235E:  MOVLB  1
02360:  MOVF   xD7,F
02362:  BTFSC  FD8.2
02364:  BRA    236C
02366:  MOVLB  0
02368:  GOTO   2392
0236C:  MOVLB  0
0236E:  MOVLB  1
02370:  MOVF   xD8,F
02372:  BTFSC  FD8.2
02374:  BRA    237C
02376:  MOVLB  0
02378:  GOTO   2392
0237C:  MOVLB  0
....................         fprintf(PC, "\tConnect error!\r\n");
0237E:  MOVLW  22
02380:  MOVWF  FF6
02382:  MOVLW  03
02384:  MOVWF  FF7
02386:  MOVLW  00
02388:  MOVWF  FF8
0238A:  CALL   1FF0
....................     } else {
0238E:  GOTO   23A2
....................         fprintf(PC, "\tConnect successful\r\n");
02392:  MOVLW  34
02394:  MOVWF  FF6
02396:  MOVLW  03
02398:  MOVWF  FF7
0239A:  MOVLW  00
0239C:  MOVWF  FF8
0239E:  CALL   1FF0
....................     }
....................     fprintf(PC, "\tComplete\r\n");
023A2:  MOVLW  4A
023A4:  MOVWF  FF6
023A6:  MOVLW  03
023A8:  MOVWF  FF7
023AA:  MOVLW  00
023AC:  MOVWF  FF8
023AE:  CALL   1FF0
023B2:  GOTO   11E54 (RETURN)
.................... }
.................... 
.................... unsigned int16 ad7490_read(int8 channel)
*
021B2:  MOVFF  A2C,A33
021B6:  GOTO   20DC
021BA:  MOVFF  02,A2E
021BE:  MOVFF  01,A2D
.................... {   
....................     unsigned int16 cmd = ad7490_make_cmd(channel);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
021C2:  MOVLW  FD
021C4:  MOVWF  F93
021C6:  BCF    F8A.1
....................     delay_us(1); 
021C8:  BRA    21CA
021CA:  BRA    21CC
....................     spi_xfer(ADC_STREAM, cmd); 
021CC:  MOVFF  A2E,A34
021D0:  MOVFF  A2D,A33
021D4:  MOVLW  10
021D6:  MOVLB  A
021D8:  MOVWF  x35
021DA:  MOVLW  01
021DC:  MOVWF  x36
021DE:  MOVLB  0
021E0:  CALL   214C
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_high(ADC_CS); 
021E4:  MOVLW  FD
021E6:  MOVWF  F93
021E8:  BSF    F8A.1
....................     delay_us(1);
021EA:  BRA    21EC
021EC:  BRA    21EE
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
021EE:  MOVLW  FD
021F0:  MOVWF  F93
021F2:  BCF    F8A.1
....................     delay_us(1);
021F4:  BRA    21F6
021F6:  BRA    21F8
....................     unsigned int16 ans = spi_xfer(ADC_STREAM, 0x0000);
021F8:  MOVLB  A
021FA:  CLRF   x34
021FC:  CLRF   x33
021FE:  MOVLW  10
02200:  MOVWF  x35
02202:  MOVLW  01
02204:  MOVWF  x36
02206:  MOVLB  0
02208:  CALL   214C
0220C:  MOVFF  02,A30
02210:  MOVFF  01,A2F
....................     output_high(ADC_CS); 
02214:  MOVLW  FD
02216:  MOVWF  F93
02218:  BSF    F8A.1
....................     unsigned int16 readdata = ans & 0x0FFF; //Conver LSB <--> MSB
0221A:  MOVLB  A
0221C:  MOVF   x2F,W
0221E:  MOVWF  x31
02220:  MOVF   x30,W
02222:  ANDLW  0F
02224:  MOVWF  x32
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata);
....................     #endif
....................     return readdata;
02226:  MOVF   x31,W
02228:  MOVWF  01
0222A:  MOVF   x32,W
0222C:  MOVWF  02
0222E:  MOVLB  0
02230:  RETURN 0
.................... }
.................... 
.................... void ad7490_read_2port(unsigned int8 channel1, unsigned int8 channel2, unsigned int16 *data1, unsigned int16 *data2)
.................... {   
....................     unsigned int16 cmd1 = ad7490_make_cmd(channel1);
....................     unsigned int16 cmd2 = ad7490_make_cmd(channel2);
....................     // fprintf(PC, "\t[ADC] Command: %04LX\r\n", cmd);
....................     output_low(ADC_CS); 
....................     delay_us(1); 
....................     spi_xfer(ADC_STREAM, cmd1); 
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd1);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
.................... 
....................     // Read the ADC data
....................     output_low(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans1 = spi_xfer(ADC_STREAM, cmd2);
....................     #ifdef AD7490_DEBUG
....................        fprintf(PC,"\t[ADC] <<< %04LX\r\n", cmd2);
....................     #endif
....................     output_high(ADC_CS); 
....................     delay_us(1);
....................     unsigned int16 ans2 = spi_xfer(ADC_STREAM, 0x0000);
....................     output_high(ADC_CS); 
....................     unsigned int16 readdata1 = ans1 & 0x0FFF; //Conver LSB <--> MSB
....................     unsigned int16 readdata2 = ans2 & 0x0FFF; //Conver LSB <--> MSB
....................     
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata1);
....................         fprintf(PC,"\t[ADC] >>> %04LX\r\n", readdata2);
....................     #endif
....................     *data1 = readdata1;
....................     *data2 = readdata2;
.................... }
.................... 
.................... 
.................... // End of file
.................... 
.................... #include "../cigs/device_driver/mcp4901_driver.c"
.................... #include "mcp4901_driver.h"                        
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/cigs_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... // ADC Settings
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mcp4901.h"       
.................... // ===================== mcp4911.h =====================
.................... #ifndef _MCP4901_H_
.................... #define _MCP4901_H_
.................... 
.................... typedef union {
....................    unsigned int16 value; // 16-bit value to write to the DAC
....................    struct {
....................       int1 reserved4; // Reserved bit, should be 0
....................       int1 reserved3; // Reserved bit, should be 0
....................       int1 reserved2; // Reserved bit, should be 0
....................       int1 reserved; // Reserved bit, should be 0
....................       int1 data0; // LSB of the data
....................       int1 data1; // 8-bit data to write to the DAC
....................       int1 data2; // 8-bit data to write to the DAC
....................       int1 data3; // 8-bit data to write to the DAC
....................       int1 data4; // 8-bit data to write to the DAC
....................       int1 data5; // 8-bit data to write to the DAC
....................       int1 data6; // 8-bit data to write to the DAC
....................       int1 data7; // 8-bit data to write to the DAC
....................       int1 shutdown; // 1: Shutdown mode, 0: Normal operation
....................       int1 gain; // 1: Gain 2x, 0: Gain 1x
....................       int1 buffer; // Buffer not used, should be 0
....................       int1 startbit; // Start bit, should be 1
....................    } fields;
.................... } mcp4901_cmd_t;
.................... 
.................... 
.................... // ---------------------- Public API --------------------------
.................... void mcp4911_init();
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value);
.................... 
.................... #endif /* _MCP4911_H_ */
.................... // ===================== mcp4911.h =====================
.................... 
.................... 
.................... // #define MCP4901_DEBUG
.................... 
.................... void mcp4901_init()
.................... {
....................     fprintf(PC, "MCP4901 Initialize\r\n");
*
025DE:  MOVLW  56
025E0:  MOVWF  FF6
025E2:  MOVLW  03
025E4:  MOVWF  FF7
025E6:  MOVLW  00
025E8:  MOVWF  FF8
025EA:  CALL   1FF0
....................     output_high(DAC1_CS); 
025EE:  MOVLW  3F
025F0:  MOVWF  F95
025F2:  BSF    F8C.7
....................     output_high(DAC2_CS); 
025F4:  MOVLW  3F
025F6:  MOVWF  F95
025F8:  BSF    F8C.6
....................     delay_ms(10); 
025FA:  MOVLW  0A
025FC:  MOVLB  B
025FE:  MOVWF  x4C
02600:  MOVLB  0
02602:  CALL   1FC2
....................     mcp4901_1_write(10); 
02606:  MOVLB  A
02608:  CLRF   x1B
0260A:  MOVLW  0A
0260C:  MOVWF  x1A
0260E:  MOVLB  0
02610:  CALL   2562
....................     mcp4901_2_write(10); 
02614:  MOVLB  A
02616:  CLRF   x1B
02618:  MOVLW  0A
0261A:  MOVWF  x1A
0261C:  MOVLB  0
0261E:  CALL   25A0
....................     unsigned int16 readdata;
....................     readdata = ad7490_read(ADC_DIODE_INNER_VREF); 
02622:  MOVLW  03
02624:  MOVLB  A
02626:  MOVWF  x2C
02628:  MOVLB  0
0262A:  CALL   21B2
0262E:  MOVFF  02,1D8
02632:  MOVFF  01,1D7
....................     fprintf(PC, "%04LX\r\n", readdata);
02636:  MOVFF  1D8,A26
0263A:  MOVLW  37
0263C:  MOVLB  A
0263E:  MOVWF  x27
02640:  MOVLB  0
02642:  CALL   2232
02646:  MOVFF  1D7,A26
0264A:  MOVLW  37
0264C:  MOVLB  A
0264E:  MOVWF  x27
02650:  MOVLB  0
02652:  CALL   2232
02656:  MOVLW  0D
02658:  BTFSS  FA6.6
0265A:  GOTO   2658
0265E:  MOVLB  E
02660:  MOVWF  xF9
02662:  MOVLW  0A
02664:  MOVLB  0
02666:  BTFSS  FA6.6
02668:  GOTO   2666
0266C:  MOVLB  E
0266E:  MOVWF  xF9
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
02670:  MOVLB  1
02672:  INCFSZ xD7,W
02674:  BRA    267A
02676:  BRA    2680
02678:  MOVLB  0
0267A:  MOVLB  0
0267C:  GOTO   2698
02680:  MOVLB  0
02682:  MOVLB  1
02684:  INCFSZ xD8,W
02686:  BRA    268C
02688:  BRA    2692
0268A:  MOVLB  0
0268C:  MOVLB  0
0268E:  GOTO   2698
02692:  MOVLB  0
02694:  GOTO   26B8
02698:  MOVLB  1
0269A:  MOVF   xD7,F
0269C:  BTFSC  FD8.2
0269E:  BRA    26A6
026A0:  MOVLB  0
026A2:  GOTO   26CC
026A6:  MOVLB  0
026A8:  MOVLB  1
026AA:  MOVF   xD8,F
026AC:  BTFSC  FD8.2
026AE:  BRA    26B6
026B0:  MOVLB  0
026B2:  GOTO   26CC
026B6:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 1] Connect error!\r\n");
026B8:  MOVLW  6C
026BA:  MOVWF  FF6
026BC:  MOVLW  03
026BE:  MOVWF  FF7
026C0:  MOVLW  00
026C2:  MOVWF  FF8
026C4:  CALL   1FF0
....................     } else {
026C8:  GOTO   26DC
....................         fprintf(PC, "\t[DAC Port 1] Connect successful\r\n");
026CC:  MOVLW  8C
026CE:  MOVWF  FF6
026D0:  MOVLW  03
026D2:  MOVWF  FF7
026D4:  MOVLW  00
026D6:  MOVWF  FF8
026D8:  CALL   1FF0
....................     }
....................     fprintf(PC, "%04LX\r\n", readdata);
026DC:  MOVFF  1D8,A26
026E0:  MOVLW  37
026E2:  MOVLB  A
026E4:  MOVWF  x27
026E6:  MOVLB  0
026E8:  CALL   2232
026EC:  MOVFF  1D7,A26
026F0:  MOVLW  37
026F2:  MOVLB  A
026F4:  MOVWF  x27
026F6:  MOVLB  0
026F8:  CALL   2232
026FC:  MOVLW  0D
026FE:  BTFSS  FA6.6
02700:  GOTO   26FE
02704:  MOVLB  E
02706:  MOVWF  xF9
02708:  MOVLW  0A
0270A:  MOVLB  0
0270C:  BTFSS  FA6.6
0270E:  GOTO   270C
02712:  MOVLB  E
02714:  MOVWF  xF9
....................     readdata = ad7490_read(ADC_DIODE_OUTER_VREF); 
02716:  MOVLW  07
02718:  MOVLB  A
0271A:  MOVWF  x2C
0271C:  MOVLB  0
0271E:  CALL   21B2
02722:  MOVFF  02,1D8
02726:  MOVFF  01,1D7
....................     if (readdata == 0xFFFF || readdata == 0x0000) {
0272A:  MOVLB  1
0272C:  INCFSZ xD7,W
0272E:  BRA    2734
02730:  BRA    273A
02732:  MOVLB  0
02734:  MOVLB  0
02736:  GOTO   2752
0273A:  MOVLB  0
0273C:  MOVLB  1
0273E:  INCFSZ xD8,W
02740:  BRA    2746
02742:  BRA    274C
02744:  MOVLB  0
02746:  MOVLB  0
02748:  GOTO   2752
0274C:  MOVLB  0
0274E:  GOTO   2772
02752:  MOVLB  1
02754:  MOVF   xD7,F
02756:  BTFSC  FD8.2
02758:  BRA    2760
0275A:  MOVLB  0
0275C:  GOTO   2786
02760:  MOVLB  0
02762:  MOVLB  1
02764:  MOVF   xD8,F
02766:  BTFSC  FD8.2
02768:  BRA    2770
0276A:  MOVLB  0
0276C:  GOTO   2786
02770:  MOVLB  0
....................         fprintf(PC, "\t[DAC Port 2] Connect error!\r\n");
02772:  MOVLW  B0
02774:  MOVWF  FF6
02776:  MOVLW  03
02778:  MOVWF  FF7
0277A:  MOVLW  00
0277C:  MOVWF  FF8
0277E:  CALL   1FF0
....................     } else {
02782:  GOTO   2796
....................         fprintf(PC, "\t[DAC Port 2] Connect successful\r\n");
02786:  MOVLW  D0
02788:  MOVWF  FF6
0278A:  MOVLW  03
0278C:  MOVWF  FF7
0278E:  MOVLW  00
02790:  MOVWF  FF8
02792:  CALL   1FF0
....................     }
....................     fprintf(PC, "\tComplete\r\n");
02796:  MOVLW  F4
02798:  MOVWF  FF6
0279A:  MOVLW  03
0279C:  MOVWF  FF7
0279E:  MOVLW  00
027A0:  MOVWF  FF8
027A2:  CALL   1FF0
027A6:  GOTO   11E58 (RETURN)
.................... }
.................... 
.................... 
.................... void mcp4901_1_write(unsigned int16 value)
*
02562:  MOVFF  A1B,A1F
02566:  MOVFF  A1A,A1E
0256A:  CALL   23B6
0256E:  MOVFF  02,A1D
02572:  MOVFF  01,A1C
.................... {
....................     unsigned int16 cmd = mcp4901_make_cmd(value);
....................     #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................     #endif
....................     output_low(DAC1_CS); 
02576:  MOVLW  3F
02578:  MOVWF  F95
0257A:  BCF    F8C.7
....................     delay_us(1); 
0257C:  BRA    257E
0257E:  BRA    2580
....................     spi_xfer(DAC_STREAM, cmd); 
02580:  MOVFF  A1D,A1F
02584:  MOVFF  A1C,A1E
02588:  MOVLW  10
0258A:  MOVLB  A
0258C:  MOVWF  x20
0258E:  MOVLW  01
02590:  MOVWF  x21
02592:  MOVLB  0
02594:  CALL   250A
....................     output_high(DAC1_CS); 
02598:  MOVLW  3F
0259A:  MOVWF  F95
0259C:  BSF    F8C.7
0259E:  RETURN 0
.................... }
.................... 
.................... void mcp4901_2_write(unsigned int16 value)
025A0:  MOVFF  A1B,A1F
025A4:  MOVFF  A1A,A1E
025A8:  CALL   23B6
025AC:  MOVFF  02,A1D
025B0:  MOVFF  01,A1C
.................... {
....................    unsigned int16 cmd = mcp4901_make_cmd(value);
....................    #ifdef MCP4901_DEBUG
....................       fprintf(PC, "\t[DAC] <<< %04LX\r\n", cmd);
....................    #endif
....................    output_low(DAC2_CS); 
025B4:  MOVLW  3F
025B6:  MOVWF  F95
025B8:  BCF    F8C.6
....................    delay_us(1); 
025BA:  BRA    25BC
025BC:  BRA    25BE
....................    spi_xfer(DAC_STREAM, cmd); 
025BE:  MOVFF  A1D,A1F
025C2:  MOVFF  A1C,A1E
025C6:  MOVLW  10
025C8:  MOVLB  A
025CA:  MOVWF  x20
025CC:  MOVLW  01
025CE:  MOVWF  x21
025D0:  MOVLB  0
025D2:  CALL   250A
....................    output_high(DAC2_CS); 
025D6:  MOVLW  3F
025D8:  MOVWF  F95
025DA:  BSF    F8C.6
025DC:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... 
.................... // ライブラリ実装ファイル
.................... #include "../lib/device/ad7490.c"
.................... // #include "ad7490.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 ad7490_readdata(unsigned int16 channel)
.................... {
....................     spi_xfer(ADC_STREAM, channel); // Dummy transfer to start communication
....................     #ifdef AD7490_DEBUG
....................         fprintf(PC, "\t[ADC] <<< %04LX\r\n", channel);
....................     #endif
....................     unsigned int16 ans = spi_xfer(ADC_STREAM);
....................     return ans & 0x0FFF; //Conver LSB <--> MSB
.................... }
.................... 
.................... unsigned int16 ad7490_make_cmd(int8 channel)
.................... {
....................     ad7490_cmd_t cmd;
....................     
....................     cmd.fields.reserved0 = 0; // Reserved bits
*
020DC:  MOVLB  A
020DE:  BCF    x34.0
....................     cmd.fields.reserved1 = 0; // Reserved bits
020E0:  BCF    x34.1
....................     cmd.fields.reserved2 = 0; // Reserved bits
020E2:  BCF    x34.2
....................     cmd.fields.reserved3 = 0;
020E4:  BCF    x34.3
....................     cmd.fields.coding = 1; // Two's complement
020E6:  BSF    x34.4
....................     cmd.fields.range = 0; // Normal mode
020E8:  BCF    x34.5
....................     cmd.fields.weak_tri = 0; // Strong trigger
020EA:  BCF    x34.6
....................     cmd.fields.shadow = 0; // Direct access
020EC:  BCF    x34.7
....................     cmd.fields.pm0 = AD7490_PM_NORMAL & 0b00000001; // Power mode bits
020EE:  BSF    x35.0
....................     cmd.fields.pm1 = (AD7490_PM_NORMAL >> 1) & 0b00000001; // Power mode bits
020F0:  BSF    x35.1
....................     cmd.fields.add0 = (channel >> 0) & 0b00000001; // Channel address bits
020F2:  MOVF   x33,W
020F4:  ANDLW  01
020F6:  MOVWF  01
020F8:  BCF    x35.2
020FA:  BTFSC  01.0
020FC:  BSF    x35.2
....................     cmd.fields.add1 = (channel >> 1) & 0b00000001; // Channel address bits
020FE:  BCF    FD8.0
02100:  RRCF   x33,W
02102:  ANDLW  01
02104:  MOVWF  01
02106:  BCF    x35.3
02108:  BTFSC  01.0
0210A:  BSF    x35.3
....................     cmd.fields.add2 = (channel >> 2) & 0b00000001; // Channel address bits
0210C:  RRCF   x33,W
0210E:  MOVWF  00
02110:  RRCF   00,F
02112:  MOVLW  3F
02114:  ANDWF  00,F
02116:  MOVF   00,W
02118:  ANDLW  01
0211A:  MOVWF  01
0211C:  BCF    x35.4
0211E:  BTFSC  01.0
02120:  BSF    x35.4
....................     cmd.fields.add3 = (channel >> 3) & 0b00000001; // Channel address bits
02122:  RRCF   x33,W
02124:  MOVWF  00
02126:  RRCF   00,F
02128:  RRCF   00,F
0212A:  MOVLW  1F
0212C:  ANDWF  00,F
0212E:  MOVF   00,W
02130:  ANDLW  01
02132:  MOVWF  01
02134:  BCF    x35.5
02136:  BTFSC  01.0
02138:  BSF    x35.5
....................     cmd.fields.seq = 0; // Random mode
0213A:  BCF    x35.6
....................     cmd.fields.write = 1; // Read operation
0213C:  BSF    x35.7
....................     return cmd.value;
0213E:  MOVF   x34,W
02140:  MOVWF  01
02142:  MOVF   x35,W
02144:  MOVWF  02
02146:  MOVLB  0
02148:  GOTO   21BA (RETURN)
.................... }
.................... 
.................... #include "../lib/device/mcp4901.c"
.................... // #include "mcp4901.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... 
.................... unsigned int16 mcp4901_make_cmd(unsigned int16 value)
.................... {
....................    mcp4901_cmd_t cmd;
....................    cmd.fields.startbit = 0; // Start bit
*
023B6:  MOVLB  A
023B8:  BCF    x21.7
....................    cmd.fields.buffer = 1; // Buffer used
023BA:  BSF    x21.6
....................    cmd.fields.gain = 1; // Gain 1x
023BC:  BSF    x21.5
....................    cmd.fields.shutdown = 1; // Normal operation
023BE:  BSF    x21.4
....................    cmd.fields.data7 = (value >> 7) & 0x01;
023C0:  RRCF   x1F,W
023C2:  MOVWF  x23
023C4:  RRCF   x1E,W
023C6:  MOVWF  x22
023C8:  RRCF   x23,F
023CA:  RRCF   x22,F
023CC:  RRCF   x23,F
023CE:  RRCF   x22,F
023D0:  RRCF   x23,F
023D2:  RRCF   x22,F
023D4:  RRCF   x23,F
023D6:  RRCF   x22,F
023D8:  RRCF   x23,F
023DA:  RRCF   x22,F
023DC:  RRCF   x23,F
023DE:  RRCF   x22,F
023E0:  MOVLW  01
023E2:  ANDWF  x23,F
023E4:  MOVF   x22,W
023E6:  ANDLW  01
023E8:  MOVWF  00
023EA:  CLRF   03
023EC:  MOVF   00,W
023EE:  MOVWF  01
023F0:  BCF    x21.3
023F2:  BTFSC  01.0
023F4:  BSF    x21.3
....................    cmd.fields.data6 = (value >> 6) & 0x01;
023F6:  RRCF   x1F,W
023F8:  MOVWF  x23
023FA:  RRCF   x1E,W
023FC:  MOVWF  x22
023FE:  RRCF   x23,F
02400:  RRCF   x22,F
02402:  RRCF   x23,F
02404:  RRCF   x22,F
02406:  RRCF   x23,F
02408:  RRCF   x22,F
0240A:  RRCF   x23,F
0240C:  RRCF   x22,F
0240E:  RRCF   x23,F
02410:  RRCF   x22,F
02412:  MOVLW  03
02414:  ANDWF  x23,F
02416:  MOVF   x22,W
02418:  ANDLW  01
0241A:  MOVWF  00
0241C:  CLRF   03
0241E:  MOVF   00,W
02420:  MOVWF  01
02422:  BCF    x21.2
02424:  BTFSC  01.0
02426:  BSF    x21.2
....................    cmd.fields.data5 = (value >> 5) & 0x01;
02428:  RRCF   x1F,W
0242A:  MOVWF  x23
0242C:  RRCF   x1E,W
0242E:  MOVWF  x22
02430:  RRCF   x23,F
02432:  RRCF   x22,F
02434:  RRCF   x23,F
02436:  RRCF   x22,F
02438:  RRCF   x23,F
0243A:  RRCF   x22,F
0243C:  RRCF   x23,F
0243E:  RRCF   x22,F
02440:  MOVLW  07
02442:  ANDWF  x23,F
02444:  MOVF   x22,W
02446:  ANDLW  01
02448:  MOVWF  00
0244A:  CLRF   03
0244C:  MOVF   00,W
0244E:  MOVWF  01
02450:  BCF    x21.1
02452:  BTFSC  01.0
02454:  BSF    x21.1
....................    cmd.fields.data4 = (value >> 4) & 0x01;
02456:  RRCF   x1F,W
02458:  MOVWF  x23
0245A:  RRCF   x1E,W
0245C:  MOVWF  x22
0245E:  RRCF   x23,F
02460:  RRCF   x22,F
02462:  RRCF   x23,F
02464:  RRCF   x22,F
02466:  RRCF   x23,F
02468:  RRCF   x22,F
0246A:  MOVLW  0F
0246C:  ANDWF  x23,F
0246E:  MOVF   x22,W
02470:  ANDLW  01
02472:  MOVWF  00
02474:  CLRF   03
02476:  MOVF   00,W
02478:  MOVWF  01
0247A:  BCF    x21.0
0247C:  BTFSC  01.0
0247E:  BSF    x21.0
....................    cmd.fields.data3 = (value >> 3) & 0x01;
02480:  RRCF   x1F,W
02482:  MOVWF  x23
02484:  RRCF   x1E,W
02486:  MOVWF  x22
02488:  RRCF   x23,F
0248A:  RRCF   x22,F
0248C:  RRCF   x23,F
0248E:  RRCF   x22,F
02490:  MOVLW  1F
02492:  ANDWF  x23,F
02494:  MOVF   x22,W
02496:  ANDLW  01
02498:  MOVWF  00
0249A:  CLRF   03
0249C:  MOVF   00,W
0249E:  MOVWF  01
024A0:  BCF    x20.7
024A2:  BTFSC  01.0
024A4:  BSF    x20.7
....................    cmd.fields.data2 = (value >> 2) & 0x01;
024A6:  RRCF   x1F,W
024A8:  MOVWF  x23
024AA:  RRCF   x1E,W
024AC:  MOVWF  x22
024AE:  RRCF   x23,F
024B0:  RRCF   x22,F
024B2:  MOVLW  3F
024B4:  ANDWF  x23,F
024B6:  MOVF   x22,W
024B8:  ANDLW  01
024BA:  MOVWF  00
024BC:  CLRF   03
024BE:  MOVF   00,W
024C0:  MOVWF  01
024C2:  BCF    x20.6
024C4:  BTFSC  01.0
024C6:  BSF    x20.6
....................    cmd.fields.data1 = (value >> 1) & 0x01;
024C8:  BCF    FD8.0
024CA:  RRCF   x1F,W
024CC:  MOVWF  x23
024CE:  RRCF   x1E,W
024D0:  MOVWF  x22
024D2:  MOVF   x22,W
024D4:  ANDLW  01
024D6:  MOVWF  00
024D8:  CLRF   03
024DA:  MOVF   00,W
024DC:  MOVWF  01
024DE:  BCF    x20.5
024E0:  BTFSC  01.0
024E2:  BSF    x20.5
....................    cmd.fields.data0 = value & 0x01; // LSB of the data
024E4:  MOVF   x1E,W
024E6:  ANDLW  01
024E8:  MOVWF  00
024EA:  CLRF   03
024EC:  MOVF   00,W
024EE:  MOVWF  01
024F0:  BCF    x20.4
024F2:  BTFSC  01.0
024F4:  BSF    x20.4
....................    cmd.fields.reserved = 0; // Reserved bits
024F6:  BCF    x20.3
....................    cmd.fields.reserved2 = 0; // Reserved bits
024F8:  BCF    x20.2
....................    cmd.fields.reserved3 = 0; // Reserved bits
024FA:  BCF    x20.1
....................    cmd.fields.reserved4 = 0; // Reserved bits
024FC:  BCF    x20.0
.................... 
....................    return cmd.value;
024FE:  MOVF   x20,W
02500:  MOVWF  01
02502:  MOVF   x21,W
02504:  MOVWF  02
02506:  MOVLB  0
02508:  RETURN 0
.................... }
.................... 
.................... #include "../lib/device/mt25q.c"
.................... #include "mt25q.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //send multi bytes
.................... void spi_xfer_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03932:  MOVLB  B
03934:  MOVF   x4C,W
03936:  XORLW  00
03938:  MOVLB  0
0393A:  BTFSC  FD8.2
0393C:  GOTO   394C
03940:  XORLW  01
03942:  BTFSC  FD8.2
03944:  GOTO   39B4
03948:  GOTO   3A1C
....................       case SPI_0:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
0394C:  MOVLB  B
0394E:  CLRF   x55
03950:  CLRF   x54
03952:  MOVLB  0
03954:  MOVLB  B
03956:  MOVF   x55,W
03958:  SUBWF  x53,W
0395A:  BTFSC  FD8.0
0395C:  BRA    3964
0395E:  MOVLB  0
03960:  GOTO   39B0
03964:  MOVLB  0
03966:  BTFSS  FD8.2
03968:  GOTO   397E
0396C:  MOVLB  B
0396E:  MOVF   x52,W
03970:  SUBWF  x54,W
03972:  BTFSS  FD8.0
03974:  BRA    397C
03976:  MOVLB  0
03978:  GOTO   39B0
0397C:  MOVLB  0
....................             spi_xfer(FLASH_STREAM0,write_data[spi_xfer_num]);
0397E:  MOVLB  B
03980:  MOVF   x50,W
03982:  ADDWF  x54,W
03984:  MOVWF  FE9
03986:  MOVF   x51,W
03988:  ADDWFC x55,W
0398A:  MOVWF  FEA
0398C:  MOVFF  FEF,B58
03990:  MOVFF  B58,B6E
03994:  MOVLW  08
03996:  MOVWF  x6F
03998:  MOVLW  01
0399A:  MOVWF  x70
0399C:  MOVLB  0
0399E:  CALL   27FE
039A2:  MOVLB  B
039A4:  INCF   x54,F
039A6:  BTFSC  FD8.2
039A8:  INCF   x55,F
039AA:  MOVLB  0
039AC:  GOTO   3954
....................          break;
039B0:  GOTO   3A20
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
039B4:  MOVLB  B
039B6:  CLRF   x57
039B8:  CLRF   x56
039BA:  MOVLB  0
039BC:  MOVLB  B
039BE:  MOVF   x57,W
039C0:  SUBWF  x53,W
039C2:  BTFSC  FD8.0
039C4:  BRA    39CC
039C6:  MOVLB  0
039C8:  GOTO   3A18
039CC:  MOVLB  0
039CE:  BTFSS  FD8.2
039D0:  GOTO   39E6
039D4:  MOVLB  B
039D6:  MOVF   x52,W
039D8:  SUBWF  x56,W
039DA:  BTFSS  FD8.0
039DC:  BRA    39E4
039DE:  MOVLB  0
039E0:  GOTO   3A18
039E4:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1,write_data[spi_xfer_num]);
039E6:  MOVLB  B
039E8:  MOVF   x50,W
039EA:  ADDWF  x56,W
039EC:  MOVWF  FE9
039EE:  MOVF   x51,W
039F0:  ADDWFC x57,W
039F2:  MOVWF  FEA
039F4:  MOVFF  FEF,B58
039F8:  MOVFF  B58,B6E
039FC:  MOVLW  08
039FE:  MOVWF  x6F
03A00:  MOVLW  01
03A02:  MOVWF  x70
03A04:  MOVLB  0
03A06:  CALL   285E
03A0A:  MOVLB  B
03A0C:  INCF   x56,F
03A0E:  BTFSC  FD8.2
03A10:  INCF   x57,F
03A12:  MOVLB  0
03A14:  GOTO   39BC
....................          break;
03A18:  GOTO   3A20
....................          
....................       default:
....................          break;
03A1C:  GOTO   3A20
....................    }
....................    return;
03A20:  RETURN 0
.................... }
.................... 
.................... //send multi bytes then receive multi bytes 
.................... void spi_xfer_and_read_select_stream(Flash flash_stream, unsigned int8 *write_data, unsigned int16 write_amount, unsigned int8 *read_data, unsigned int32 read_amount){
....................    switch(flash_stream.spi_stream_id){
*
028BE:  MOVLB  B
028C0:  MOVF   x52,W
028C2:  XORLW  00
028C4:  MOVLB  0
028C6:  BTFSC  FD8.2
028C8:  GOTO   28D8
028CC:  XORLW  01
028CE:  BTFSC  FD8.2
028D0:  GOTO   29E2
028D4:  GOTO   2AEC
....................       case SPI_0:
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
028D8:  MOVLB  B
028DA:  CLRF   x61
028DC:  CLRF   x60
028DE:  MOVLB  0
028E0:  MOVLB  B
028E2:  MOVF   x61,W
028E4:  SUBWF  x59,W
028E6:  BTFSC  FD8.0
028E8:  BRA    28F0
028EA:  MOVLB  0
028EC:  GOTO   293C
028F0:  MOVLB  0
028F2:  BTFSS  FD8.2
028F4:  GOTO   290A
028F8:  MOVLB  B
028FA:  MOVF   x58,W
028FC:  SUBWF  x60,W
028FE:  BTFSS  FD8.0
02900:  BRA    2908
02902:  MOVLB  0
02904:  GOTO   293C
02908:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
0290A:  MOVLB  B
0290C:  MOVF   x56,W
0290E:  ADDWF  x60,W
02910:  MOVWF  FE9
02912:  MOVF   x57,W
02914:  ADDWFC x61,W
02916:  MOVWF  FEA
02918:  MOVFF  FEF,B6C
0291C:  MOVFF  B6C,B6E
02920:  MOVLW  08
02922:  MOVWF  x6F
02924:  MOVLW  01
02926:  MOVWF  x70
02928:  MOVLB  0
0292A:  CALL   27FE
0292E:  MOVLB  B
02930:  INCF   x60,F
02932:  BTFSC  FD8.2
02934:  INCF   x61,F
02936:  MOVLB  0
02938:  GOTO   28E0
....................       for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
0293C:  MOVLB  B
0293E:  CLRF   x65
02940:  CLRF   x64
02942:  CLRF   x63
02944:  CLRF   x62
02946:  MOVLB  0
02948:  MOVLB  B
0294A:  MOVF   x65,W
0294C:  SUBWF  x5F,W
0294E:  BTFSC  FD8.0
02950:  BRA    2958
02952:  MOVLB  0
02954:  GOTO   29DE
02958:  MOVLB  0
0295A:  BTFSS  FD8.2
0295C:  GOTO   29A2
02960:  MOVLB  B
02962:  MOVF   x64,W
02964:  SUBWF  x5E,W
02966:  BTFSC  FD8.0
02968:  BRA    2970
0296A:  MOVLB  0
0296C:  GOTO   29DE
02970:  MOVLB  0
02972:  BTFSS  FD8.2
02974:  GOTO   29A2
02978:  MOVLB  B
0297A:  MOVF   x63,W
0297C:  SUBWF  x5D,W
0297E:  BTFSC  FD8.0
02980:  BRA    2988
02982:  MOVLB  0
02984:  GOTO   29DE
02988:  MOVLB  0
0298A:  BTFSS  FD8.2
0298C:  GOTO   29A2
02990:  MOVLB  B
02992:  MOVF   x5C,W
02994:  SUBWF  x62,W
02996:  BTFSS  FD8.0
02998:  BRA    29A0
0299A:  MOVLB  0
0299C:  GOTO   29DE
029A0:  MOVLB  0
....................          read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM0);
029A2:  MOVLB  B
029A4:  MOVF   x5A,W
029A6:  ADDWF  x62,W
029A8:  MOVWF  FE9
029AA:  MOVF   x5B,W
029AC:  ADDWFC x63,W
029AE:  MOVWF  FEA
029B0:  MOVLW  02
029B2:  MOVWF  x6E
029B4:  MOVLW  08
029B6:  MOVWF  x6F
029B8:  MOVLW  01
029BA:  MOVWF  x70
029BC:  MOVLB  0
029BE:  CALL   27FE
029C2:  MOVFF  01,FEF
029C6:  MOVLW  01
029C8:  MOVLB  B
029CA:  ADDWF  x62,F
029CC:  BTFSC  FD8.0
029CE:  INCF   x63,F
029D0:  BTFSC  FD8.2
029D2:  INCF   x64,F
029D4:  BTFSC  FD8.2
029D6:  INCF   x65,F
029D8:  MOVLB  0
029DA:  GOTO   2948
....................          break;
029DE:  GOTO   2AF0
....................          
....................       case SPI_1:
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
029E2:  MOVLB  B
029E4:  CLRF   x67
029E6:  CLRF   x66
029E8:  MOVLB  0
029EA:  MOVLB  B
029EC:  MOVF   x67,W
029EE:  SUBWF  x59,W
029F0:  BTFSC  FD8.0
029F2:  BRA    29FA
029F4:  MOVLB  0
029F6:  GOTO   2A46
029FA:  MOVLB  0
029FC:  BTFSS  FD8.2
029FE:  GOTO   2A14
02A02:  MOVLB  B
02A04:  MOVF   x58,W
02A06:  SUBWF  x66,W
02A08:  BTFSS  FD8.0
02A0A:  BRA    2A12
02A0C:  MOVLB  0
02A0E:  GOTO   2A46
02A12:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
02A14:  MOVLB  B
02A16:  MOVF   x56,W
02A18:  ADDWF  x66,W
02A1A:  MOVWF  FE9
02A1C:  MOVF   x57,W
02A1E:  ADDWFC x67,W
02A20:  MOVWF  FEA
02A22:  MOVFF  FEF,B6C
02A26:  MOVFF  B6C,B6E
02A2A:  MOVLW  08
02A2C:  MOVWF  x6F
02A2E:  MOVLW  01
02A30:  MOVWF  x70
02A32:  MOVLB  0
02A34:  CALL   285E
02A38:  MOVLB  B
02A3A:  INCF   x66,F
02A3C:  BTFSC  FD8.2
02A3E:  INCF   x67,F
02A40:  MOVLB  0
02A42:  GOTO   29EA
....................          for(unsigned int32 spi_rcv_num = 0;spi_rcv_num < read_amount;spi_rcv_num++)
02A46:  MOVLB  B
02A48:  CLRF   x6B
02A4A:  CLRF   x6A
02A4C:  CLRF   x69
02A4E:  CLRF   x68
02A50:  MOVLB  0
02A52:  MOVLB  B
02A54:  MOVF   x6B,W
02A56:  SUBWF  x5F,W
02A58:  BTFSC  FD8.0
02A5A:  BRA    2A62
02A5C:  MOVLB  0
02A5E:  GOTO   2AE8
02A62:  MOVLB  0
02A64:  BTFSS  FD8.2
02A66:  GOTO   2AAC
02A6A:  MOVLB  B
02A6C:  MOVF   x6A,W
02A6E:  SUBWF  x5E,W
02A70:  BTFSC  FD8.0
02A72:  BRA    2A7A
02A74:  MOVLB  0
02A76:  GOTO   2AE8
02A7A:  MOVLB  0
02A7C:  BTFSS  FD8.2
02A7E:  GOTO   2AAC
02A82:  MOVLB  B
02A84:  MOVF   x69,W
02A86:  SUBWF  x5D,W
02A88:  BTFSC  FD8.0
02A8A:  BRA    2A92
02A8C:  MOVLB  0
02A8E:  GOTO   2AE8
02A92:  MOVLB  0
02A94:  BTFSS  FD8.2
02A96:  GOTO   2AAC
02A9A:  MOVLB  B
02A9C:  MOVF   x5C,W
02A9E:  SUBWF  x68,W
02AA0:  BTFSS  FD8.0
02AA2:  BRA    2AAA
02AA4:  MOVLB  0
02AA6:  GOTO   2AE8
02AAA:  MOVLB  0
....................             read_data[spi_rcv_num] = spi_xfer(FLASH_STREAM1);
02AAC:  MOVLB  B
02AAE:  MOVF   x5A,W
02AB0:  ADDWF  x68,W
02AB2:  MOVWF  FE9
02AB4:  MOVF   x5B,W
02AB6:  ADDWFC x69,W
02AB8:  MOVWF  FEA
02ABA:  MOVLW  01
02ABC:  MOVWF  x6E
02ABE:  MOVLW  08
02AC0:  MOVWF  x6F
02AC2:  MOVLW  01
02AC4:  MOVWF  x70
02AC6:  MOVLB  0
02AC8:  CALL   285E
02ACC:  MOVFF  01,FEF
02AD0:  MOVLW  01
02AD2:  MOVLB  B
02AD4:  ADDWF  x68,F
02AD6:  BTFSC  FD8.0
02AD8:  INCF   x69,F
02ADA:  BTFSC  FD8.2
02ADC:  INCF   x6A,F
02ADE:  BTFSC  FD8.2
02AE0:  INCF   x6B,F
02AE2:  MOVLB  0
02AE4:  GOTO   2A52
....................          break;
02AE8:  GOTO   2AF0
....................    
....................          
....................       default:
....................          break;
02AEC:  GOTO   2AF0
....................    }
....................    return;
02AF0:  RETURN 0
.................... }
.................... 
.................... //send multi bytes(ex:cmd) then send other multi bytes(for write multi bytes) 
.................... void spi_xfer_two_datas_select_stream(Flash flash_stream, unsigned int8 *cmd_data, unsigned int8 cmd_amount, unsigned int8 *write_data, unsigned int16 write_amount){
....................    switch(flash_stream.spi_stream_id){
*
03A22:  MOVLB  B
03A24:  MOVF   x4C,W
03A26:  XORLW  00
03A28:  MOVLB  0
03A2A:  BTFSC  FD8.2
03A2C:  GOTO   3A3C
03A30:  XORLW  01
03A32:  BTFSC  FD8.2
03A34:  GOTO   3AEA
03A38:  GOTO   3B98
....................       case SPI_0:
....................       for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03A3C:  MOVLB  B
03A3E:  CLRF   x57
03A40:  MOVLB  0
03A42:  MOVLB  B
03A44:  MOVF   x52,W
03A46:  SUBWF  x57,W
03A48:  BTFSS  FD8.0
03A4A:  BRA    3A52
03A4C:  MOVLB  0
03A4E:  GOTO   3A82
03A52:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, cmd_data[spi_xfer_num]);
03A54:  MOVLB  B
03A56:  MOVF   x57,W
03A58:  ADDWF  x50,W
03A5A:  MOVWF  FE9
03A5C:  MOVLW  00
03A5E:  ADDWFC x51,W
03A60:  MOVWF  FEA
03A62:  MOVFF  FEF,B5D
03A66:  MOVFF  B5D,B6E
03A6A:  MOVLW  08
03A6C:  MOVWF  x6F
03A6E:  MOVLW  01
03A70:  MOVWF  x70
03A72:  MOVLB  0
03A74:  CALL   27FE
03A78:  MOVLB  B
03A7A:  INCF   x57,F
03A7C:  MOVLB  0
03A7E:  GOTO   3A42
....................       for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03A82:  MOVLB  B
03A84:  CLRF   x59
03A86:  CLRF   x58
03A88:  MOVLB  0
03A8A:  MOVLB  B
03A8C:  MOVF   x59,W
03A8E:  SUBWF  x56,W
03A90:  BTFSC  FD8.0
03A92:  BRA    3A9A
03A94:  MOVLB  0
03A96:  GOTO   3AE6
03A9A:  MOVLB  0
03A9C:  BTFSS  FD8.2
03A9E:  GOTO   3AB4
03AA2:  MOVLB  B
03AA4:  MOVF   x55,W
03AA6:  SUBWF  x58,W
03AA8:  BTFSS  FD8.0
03AAA:  BRA    3AB2
03AAC:  MOVLB  0
03AAE:  GOTO   3AE6
03AB2:  MOVLB  0
....................          spi_xfer(FLASH_STREAM0, write_data[spi_xfer_num]);
03AB4:  MOVLB  B
03AB6:  MOVF   x53,W
03AB8:  ADDWF  x58,W
03ABA:  MOVWF  FE9
03ABC:  MOVF   x54,W
03ABE:  ADDWFC x59,W
03AC0:  MOVWF  FEA
03AC2:  MOVFF  FEF,B5D
03AC6:  MOVFF  B5D,B6E
03ACA:  MOVLW  08
03ACC:  MOVWF  x6F
03ACE:  MOVLW  01
03AD0:  MOVWF  x70
03AD2:  MOVLB  0
03AD4:  CALL   27FE
03AD8:  MOVLB  B
03ADA:  INCF   x58,F
03ADC:  BTFSC  FD8.2
03ADE:  INCF   x59,F
03AE0:  MOVLB  0
03AE2:  GOTO   3A8A
....................          break;
03AE6:  GOTO   3B9C
....................          
....................       case SPI_1:
....................          for(unsigned int8 spi_xfer_num = 0;spi_xfer_num < cmd_amount;spi_xfer_num++)
03AEA:  MOVLB  B
03AEC:  CLRF   x5A
03AEE:  MOVLB  0
03AF0:  MOVLB  B
03AF2:  MOVF   x52,W
03AF4:  SUBWF  x5A,W
03AF6:  BTFSS  FD8.0
03AF8:  BRA    3B00
03AFA:  MOVLB  0
03AFC:  GOTO   3B30
03B00:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, cmd_data[spi_xfer_num]);
03B02:  MOVLB  B
03B04:  MOVF   x5A,W
03B06:  ADDWF  x50,W
03B08:  MOVWF  FE9
03B0A:  MOVLW  00
03B0C:  ADDWFC x51,W
03B0E:  MOVWF  FEA
03B10:  MOVFF  FEF,B5D
03B14:  MOVFF  B5D,B6E
03B18:  MOVLW  08
03B1A:  MOVWF  x6F
03B1C:  MOVLW  01
03B1E:  MOVWF  x70
03B20:  MOVLB  0
03B22:  CALL   285E
03B26:  MOVLB  B
03B28:  INCF   x5A,F
03B2A:  MOVLB  0
03B2C:  GOTO   3AF0
....................          for(unsigned int16 spi_xfer_num = 0;spi_xfer_num < write_amount;spi_xfer_num++)
03B30:  MOVLB  B
03B32:  CLRF   x5C
03B34:  CLRF   x5B
03B36:  MOVLB  0
03B38:  MOVLB  B
03B3A:  MOVF   x5C,W
03B3C:  SUBWF  x56,W
03B3E:  BTFSC  FD8.0
03B40:  BRA    3B48
03B42:  MOVLB  0
03B44:  GOTO   3B94
03B48:  MOVLB  0
03B4A:  BTFSS  FD8.2
03B4C:  GOTO   3B62
03B50:  MOVLB  B
03B52:  MOVF   x55,W
03B54:  SUBWF  x5B,W
03B56:  BTFSS  FD8.0
03B58:  BRA    3B60
03B5A:  MOVLB  0
03B5C:  GOTO   3B94
03B60:  MOVLB  0
....................             spi_xfer(FLASH_STREAM1, write_data[spi_xfer_num]);
03B62:  MOVLB  B
03B64:  MOVF   x53,W
03B66:  ADDWF  x5B,W
03B68:  MOVWF  FE9
03B6A:  MOVF   x54,W
03B6C:  ADDWFC x5C,W
03B6E:  MOVWF  FEA
03B70:  MOVFF  FEF,B5D
03B74:  MOVFF  B5D,B6E
03B78:  MOVLW  08
03B7A:  MOVWF  x6F
03B7C:  MOVLW  01
03B7E:  MOVWF  x70
03B80:  MOVLB  0
03B82:  CALL   285E
03B86:  MOVLB  B
03B88:  INCF   x5B,F
03B8A:  BTFSC  FD8.2
03B8C:  INCF   x5C,F
03B8E:  MOVLB  0
03B90:  GOTO   3B38
....................          break;
03B94:  GOTO   3B9C
....................          
....................       default:
....................          break;
03B98:  GOTO   3B9C
....................    }
....................    return;
03B9C:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void flash_setting(Flash flash_stream){
....................    output_high(flash_stream.cs_pin);
*
0679C:  MOVFF  2FA,B52
067A0:  MOVLW  01
067A2:  MOVLB  B
067A4:  MOVWF  x53
067A6:  MOVLW  0F
067A8:  MOVWF  x55
067AA:  MOVLW  89
067AC:  MOVWF  x54
067AE:  MOVLB  0
067B0:  CALL   27AA
067B4:  MOVFF  2FA,B52
067B8:  MOVLB  B
067BA:  CLRF   x53
067BC:  MOVLW  0F
067BE:  MOVWF  x55
067C0:  MOVLW  92
067C2:  MOVWF  x54
067C4:  MOVLB  0
067C6:  CALL   27AA
067CA:  RETURN 0
.................... }
....................  
.................... int8 status_register(Flash flash_stream){
*
03B9E:  MOVLW  05
03BA0:  MOVLB  B
03BA2:  MOVWF  x50
....................    int8 flash_cmd = CMD_READ_STATUS_REGISTER;
....................    int8 status_reg;
....................    output_low(flash_stream.cs_pin);                                              //lower the CS PIN
03BA4:  MOVFF  B4E,B52
03BA8:  CLRF   x53
03BAA:  MOVLW  0F
03BAC:  MOVWF  x55
03BAE:  MOVLW  89
03BB0:  MOVWF  x54
03BB2:  MOVLB  0
03BB4:  CALL   27AA
03BB8:  MOVFF  B4E,B52
03BBC:  MOVLB  B
03BBE:  CLRF   x53
03BC0:  MOVLW  0F
03BC2:  MOVWF  x55
03BC4:  MOVLW  92
03BC6:  MOVWF  x54
03BC8:  MOVLB  0
03BCA:  CALL   27AA
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, &status_reg, 1);
03BCE:  MOVFF  B4F,B55
03BD2:  MOVFF  B4E,B54
03BD6:  MOVFF  B4D,B53
03BDA:  MOVFF  B4C,B52
03BDE:  MOVLW  0B
03BE0:  MOVLB  B
03BE2:  MOVWF  x57
03BE4:  MOVLW  50
03BE6:  MOVWF  x56
03BE8:  CLRF   x59
03BEA:  MOVLW  01
03BEC:  MOVWF  x58
03BEE:  MOVLW  0B
03BF0:  MOVWF  x5B
03BF2:  MOVLW  51
03BF4:  MOVWF  x5A
03BF6:  CLRF   x5F
03BF8:  CLRF   x5E
03BFA:  CLRF   x5D
03BFC:  MOVLW  01
03BFE:  MOVWF  x5C
03C00:  MOVLB  0
03C02:  CALL   28BE
....................    output_high(flash_stream.cs_pin);                                             //take CS PIN higher back
03C06:  MOVFF  B4E,B52
03C0A:  MOVLW  01
03C0C:  MOVLB  B
03C0E:  MOVWF  x53
03C10:  MOVLW  0F
03C12:  MOVWF  x55
03C14:  MOVLW  89
03C16:  MOVWF  x54
03C18:  MOVLB  0
03C1A:  CALL   27AA
03C1E:  MOVFF  B4E,B52
03C22:  MOVLB  B
03C24:  CLRF   x53
03C26:  MOVLW  0F
03C28:  MOVWF  x55
03C2A:  MOVLW  92
03C2C:  MOVWF  x54
03C2E:  MOVLB  0
03C30:  CALL   27AA
....................    #ifdef MT25Q_DEBUG
....................       if((status_reg & 0x01) == true)                                          //masking status bit   
....................          fprintf(PC,"flash busy\n\r");
....................    #endif
....................    return status_reg;  
03C34:  MOVLB  B
03C36:  MOVF   x51,W
03C38:  MOVWF  01
03C3A:  MOVLB  0
03C3C:  RETURN 0
.................... }
.................... 
.................... //
.................... //->success:True,fail:false 
.................... int8 read_id(Flash flash_stream){
....................    int8 flash_cmd = CMD_READ_ID;
....................    int8 chip_id[20];
....................    output_low(flash_stream.cs_pin);
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, chip_id, 16);
....................    output_high(flash_stream.cs_pin);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
....................       for(int8 print_counter = 0;print_counter < 20;print_counter++)
....................          fprintf(PC,"%x ",chip_id[print_counter]);
....................       fprintf(PC,"\r\n");
....................    #endif
....................    //chip id check
....................    if(chip_id[0] == MANUFACTURER_ID_MICRON){  
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
....................    }
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
....................    }
.................... }
....................  
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address){
.................... //!   #ifdef MT25Q_DEBUG
.................... //!      fprintf(PC,"Sector Erase\r\n");
.................... //!   #endif
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
0569E:  MOVLB  2
056A0:  MOVF   x34,F
056A2:  BTFSC  FD8.2
056A4:  BRA    56AC
056A6:  MOVLB  0
056A8:  GOTO   5804
056AC:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
056AE:  MOVLW  06
056B0:  MOVLB  2
056B2:  MOVWF  x3B
056B4:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL128ABA\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_SECTOR_ERASE;
056B6:  MOVLW  D8
056B8:  MOVLB  2
056BA:  MOVWF  x3C
....................       flash_cmd[1] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
056BC:  MOVFF  239,248
056C0:  MOVFF  23A,249
056C4:  CLRF   x4A
056C6:  CLRF   x4B
056C8:  MOVF   x48,W
056CA:  MOVWF  00
056CC:  CLRF   01
056CE:  CLRF   02
056D0:  CLRF   03
056D2:  MOVFF  00,23D
....................       flash_cmd[2] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
056D6:  MOVFF  238,248
056DA:  MOVFF  239,249
056DE:  MOVFF  23A,24A
056E2:  CLRF   x4B
056E4:  MOVF   x48,W
056E6:  MOVWF  00
056E8:  CLRF   01
056EA:  CLRF   02
056EC:  CLRF   03
056EE:  MOVFF  00,23E
....................       flash_cmd[3] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
056F2:  MOVF   x37,W
056F4:  MOVWF  00
056F6:  CLRF   01
056F8:  CLRF   02
056FA:  CLRF   03
056FC:  MOVFF  00,23F
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05700:  MOVFF  235,B52
05704:  MOVLB  B
05706:  CLRF   x53
05708:  MOVLW  0F
0570A:  MOVWF  x55
0570C:  MOVLW  89
0570E:  MOVWF  x54
05710:  MOVLB  0
05712:  CALL   27AA
05716:  MOVFF  235,B52
0571A:  MOVLB  B
0571C:  CLRF   x53
0571E:  MOVLW  0F
05720:  MOVWF  x55
05722:  MOVLW  92
05724:  MOVWF  x54
05726:  MOVLB  0
05728:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
0572C:  MOVFF  236,B4F
05730:  MOVFF  235,B4E
05734:  MOVFF  234,B4D
05738:  MOVFF  233,B4C
0573C:  MOVLW  02
0573E:  MOVLB  B
05740:  MOVWF  x51
05742:  MOVLW  3B
05744:  MOVWF  x50
05746:  CLRF   x53
05748:  MOVLW  01
0574A:  MOVWF  x52
0574C:  MOVLB  0
0574E:  CALL   3932
....................       output_high(flash_stream.cs_pin);
05752:  MOVFF  235,B52
05756:  MOVLW  01
05758:  MOVLB  B
0575A:  MOVWF  x53
0575C:  MOVLW  0F
0575E:  MOVWF  x55
05760:  MOVLW  89
05762:  MOVWF  x54
05764:  MOVLB  0
05766:  CALL   27AA
0576A:  MOVFF  235,B52
0576E:  MOVLB  B
05770:  CLRF   x53
05772:  MOVLW  0F
05774:  MOVWF  x55
05776:  MOVLW  92
05778:  MOVWF  x54
0577A:  MOVLB  0
0577C:  CALL   27AA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05780:  MOVFF  235,B52
05784:  MOVLB  B
05786:  CLRF   x53
05788:  MOVLW  0F
0578A:  MOVWF  x55
0578C:  MOVLW  89
0578E:  MOVWF  x54
05790:  MOVLB  0
05792:  CALL   27AA
05796:  MOVFF  235,B52
0579A:  MOVLB  B
0579C:  CLRF   x53
0579E:  MOVLW  0F
057A0:  MOVWF  x55
057A2:  MOVLW  92
057A4:  MOVWF  x54
057A6:  MOVLB  0
057A8:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
057AC:  MOVFF  236,B4F
057B0:  MOVFF  235,B4E
057B4:  MOVFF  234,B4D
057B8:  MOVFF  233,B4C
057BC:  MOVLW  02
057BE:  MOVLB  B
057C0:  MOVWF  x51
057C2:  MOVLW  3C
057C4:  MOVWF  x50
057C6:  CLRF   x53
057C8:  MOVLW  04
057CA:  MOVWF  x52
057CC:  MOVLB  0
057CE:  CALL   3932
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
057D2:  MOVFF  235,B52
057D6:  MOVLW  01
057D8:  MOVLB  B
057DA:  MOVWF  x53
057DC:  MOVLW  0F
057DE:  MOVWF  x55
057E0:  MOVLW  89
057E2:  MOVWF  x54
057E4:  MOVLB  0
057E6:  CALL   27AA
057EA:  MOVFF  235,B52
057EE:  MOVLB  B
057F0:  CLRF   x53
057F2:  MOVLW  0F
057F4:  MOVWF  x55
057F6:  MOVLW  92
057F8:  MOVWF  x54
057FA:  MOVLB  0
057FC:  CALL   27AA
....................    }
05800:  GOTO   5984
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
05804:  MOVLB  2
05806:  DECFSZ x34,W
05808:  BRA    580E
0580A:  BRA    5814
0580C:  MOVLB  0
0580E:  MOVLB  0
05810:  GOTO   5984
05814:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
05816:  MOVLW  06
05818:  MOVLB  2
0581A:  MOVWF  x40
0581C:  MOVLB  0
.................... //!      #ifdef MT25Q_DEBUG
.................... //!         fprintf(PC,"FLASH MODEL:MT25QL01GBBB\r\n");
.................... //!      #endif
....................       flash_cmd[0] = CMD_4BYTE_SECTOR_ERASE;
0581E:  MOVLW  DC
05820:  MOVLB  2
05822:  MOVWF  x41
....................       flash_cmd[1] = (unsigned int8)((sector_address>>24) & 0xff);   // 0x _ _ 00 00 00
05824:  MOVFF  23A,248
05828:  CLRF   x49
0582A:  CLRF   x4A
0582C:  CLRF   x4B
0582E:  MOVF   x48,W
05830:  MOVWF  00
05832:  CLRF   01
05834:  CLRF   02
05836:  CLRF   03
05838:  MOVFF  00,242
....................       flash_cmd[2] = (unsigned int8)((sector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
0583C:  MOVFF  239,248
05840:  MOVFF  23A,249
05844:  CLRF   x4A
05846:  CLRF   x4B
05848:  MOVF   x48,W
0584A:  MOVWF  00
0584C:  CLRF   01
0584E:  CLRF   02
05850:  CLRF   03
05852:  MOVFF  00,243
....................       flash_cmd[3] = (unsigned int8)((sector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
05856:  MOVFF  238,248
0585A:  MOVFF  239,249
0585E:  MOVFF  23A,24A
05862:  CLRF   x4B
05864:  MOVF   x48,W
05866:  MOVWF  00
05868:  CLRF   01
0586A:  CLRF   02
0586C:  CLRF   03
0586E:  MOVFF  00,244
....................       flash_cmd[4] = (unsigned int8)((sector_address) & 0xff);       // 0x 00 00 00 _ _
05872:  MOVF   x37,W
05874:  MOVWF  00
05876:  CLRF   01
05878:  CLRF   02
0587A:  CLRF   03
0587C:  MOVFF  00,245
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
05880:  MOVFF  235,B52
05884:  MOVLB  B
05886:  CLRF   x53
05888:  MOVLW  0F
0588A:  MOVWF  x55
0588C:  MOVLW  89
0588E:  MOVWF  x54
05890:  MOVLB  0
05892:  CALL   27AA
05896:  MOVFF  235,B52
0589A:  MOVLB  B
0589C:  CLRF   x53
0589E:  MOVLW  0F
058A0:  MOVWF  x55
058A2:  MOVLW  92
058A4:  MOVWF  x54
058A6:  MOVLB  0
058A8:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
058AC:  MOVFF  236,B4F
058B0:  MOVFF  235,B4E
058B4:  MOVFF  234,B4D
058B8:  MOVFF  233,B4C
058BC:  MOVLW  02
058BE:  MOVLB  B
058C0:  MOVWF  x51
058C2:  MOVLW  40
058C4:  MOVWF  x50
058C6:  CLRF   x53
058C8:  MOVLW  01
058CA:  MOVWF  x52
058CC:  MOVLB  0
058CE:  CALL   3932
....................       output_high(flash_stream.cs_pin);
058D2:  MOVFF  235,B52
058D6:  MOVLW  01
058D8:  MOVLB  B
058DA:  MOVWF  x53
058DC:  MOVLW  0F
058DE:  MOVWF  x55
058E0:  MOVLW  89
058E2:  MOVWF  x54
058E4:  MOVLB  0
058E6:  CALL   27AA
058EA:  MOVFF  235,B52
058EE:  MOVLB  B
058F0:  CLRF   x53
058F2:  MOVLW  0F
058F4:  MOVWF  x55
058F6:  MOVLW  92
058F8:  MOVWF  x54
058FA:  MOVLB  0
058FC:  CALL   27AA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
05900:  MOVFF  235,B52
05904:  MOVLB  B
05906:  CLRF   x53
05908:  MOVLW  0F
0590A:  MOVWF  x55
0590C:  MOVLW  89
0590E:  MOVWF  x54
05910:  MOVLB  0
05912:  CALL   27AA
05916:  MOVFF  235,B52
0591A:  MOVLB  B
0591C:  CLRF   x53
0591E:  MOVLW  0F
05920:  MOVWF  x55
05922:  MOVLW  92
05924:  MOVWF  x54
05926:  MOVLB  0
05928:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
0592C:  MOVFF  236,B4F
05930:  MOVFF  235,B4E
05934:  MOVFF  234,B4D
05938:  MOVFF  233,B4C
0593C:  MOVLW  02
0593E:  MOVLB  B
05940:  MOVWF  x51
05942:  MOVLW  41
05944:  MOVWF  x50
05946:  CLRF   x53
05948:  MOVLW  05
0594A:  MOVWF  x52
0594C:  MOVLB  0
0594E:  CALL   3932
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
05952:  MOVFF  235,B52
05956:  MOVLW  01
05958:  MOVLB  B
0595A:  MOVWF  x53
0595C:  MOVLW  0F
0595E:  MOVWF  x55
05960:  MOVLW  89
05962:  MOVWF  x54
05964:  MOVLB  0
05966:  CALL   27AA
0596A:  MOVFF  235,B52
0596E:  MOVLB  B
05970:  CLRF   x53
05972:  MOVLW  0F
05974:  MOVWF  x55
05976:  MOVLW  92
05978:  MOVWF  x54
0597A:  MOVLB  0
0597C:  CALL   27AA
....................    }
05980:  GOTO   5984
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
05984:  MOVLB  2
05986:  CLRF   x46
05988:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){      //masking status bit
0598A:  MOVFF  236,B4F
0598E:  MOVFF  235,B4E
05992:  MOVFF  234,B4D
05996:  MOVFF  233,B4C
0599A:  CALL   3B9E
0599E:  MOVF   01,W
059A0:  ANDLW  01
059A2:  SUBLW  01
059A4:  BTFSS  FD8.2
059A6:  GOTO   59F8
....................       if(timeout_counter > 10)
059AA:  MOVLB  2
059AC:  MOVF   x46,W
059AE:  SUBLW  0A
059B0:  BTFSS  FD8.0
059B2:  BRA    59BA
059B4:  MOVLB  0
059B6:  GOTO   59CC
059BA:  MOVLB  0
....................          delay_ms(200);
059BC:  MOVLW  C8
059BE:  MOVLB  B
059C0:  MOVWF  x4C
059C2:  MOVLB  0
059C4:  CALL   1FC2
059C8:  GOTO   59D8
....................       else
....................          delay_ms(10);   
059CC:  MOVLW  0A
059CE:  MOVLB  B
059D0:  MOVWF  x4C
059D2:  MOVLB  0
059D4:  CALL   1FC2
....................       
....................       if(timeout_counter > 100){
059D8:  MOVLB  2
059DA:  MOVF   x46,W
059DC:  SUBLW  64
059DE:  BTFSS  FD8.0
059E0:  BRA    59E8
059E2:  MOVLB  0
059E4:  GOTO   59EE
059E8:  MOVLB  0
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
059EA:  GOTO   59F8
....................       }  
....................       timeout_counter++;
059EE:  MOVLB  2
059F0:  INCF   x46,F
059F2:  MOVLB  0
059F4:  GOTO   598A
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash sector erase complete\r\n");
....................    #endif
....................    return;
059F8:  RETURN 0
.................... }
....................  
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_32KB_ERASE;
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x __ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 __ 00 00
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 __ 00
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 __
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                  //masking status bit
....................       if(timeout_counter > 10)
....................          delay_ms(200);
....................       else
....................          delay_ms(10);   
....................       
....................       if(timeout_counter > 100){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 32kByte subsector erase complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
04AC2:  MOVLB  A
04AC4:  MOVF   x4F,F
04AC6:  BTFSC  FD8.2
04AC8:  BRA    4AD0
04ACA:  MOVLB  0
04ACC:  GOTO   4C28
04AD0:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
04AD2:  MOVLW  06
04AD4:  MOVLB  A
04AD6:  MOVWF  x56
04AD8:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_SUBSECTOR_4KB_ERASE;
04ADA:  MOVLW  20
04ADC:  MOVLB  A
04ADE:  MOVWF  x57
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04AE0:  MOVFF  A54,A63
04AE4:  MOVFF  A55,A64
04AE8:  CLRF   x65
04AEA:  CLRF   x66
04AEC:  MOVF   x63,W
04AEE:  MOVWF  00
04AF0:  CLRF   01
04AF2:  CLRF   02
04AF4:  CLRF   03
04AF6:  MOVFF  00,A58
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04AFA:  MOVFF  A53,A63
04AFE:  MOVFF  A54,A64
04B02:  MOVFF  A55,A65
04B06:  CLRF   x66
04B08:  MOVF   x63,W
04B0A:  MOVWF  00
04B0C:  CLRF   01
04B0E:  CLRF   02
04B10:  CLRF   03
04B12:  MOVFF  00,A59
....................       flash_cmd[3] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04B16:  MOVF   x52,W
04B18:  MOVWF  00
04B1A:  CLRF   01
04B1C:  CLRF   02
04B1E:  CLRF   03
04B20:  MOVFF  00,A5A
....................             
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04B24:  MOVFF  A50,B52
04B28:  MOVLB  B
04B2A:  CLRF   x53
04B2C:  MOVLW  0F
04B2E:  MOVWF  x55
04B30:  MOVLW  89
04B32:  MOVWF  x54
04B34:  MOVLB  0
04B36:  CALL   27AA
04B3A:  MOVFF  A50,B52
04B3E:  MOVLB  B
04B40:  CLRF   x53
04B42:  MOVLW  0F
04B44:  MOVWF  x55
04B46:  MOVLW  92
04B48:  MOVWF  x54
04B4A:  MOVLB  0
04B4C:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04B50:  MOVFF  A51,B4F
04B54:  MOVFF  A50,B4E
04B58:  MOVFF  A4F,B4D
04B5C:  MOVFF  A4E,B4C
04B60:  MOVLW  0A
04B62:  MOVLB  B
04B64:  MOVWF  x51
04B66:  MOVLW  56
04B68:  MOVWF  x50
04B6A:  CLRF   x53
04B6C:  MOVLW  01
04B6E:  MOVWF  x52
04B70:  MOVLB  0
04B72:  CALL   3932
....................       output_high(flash_stream.cs_pin);
04B76:  MOVFF  A50,B52
04B7A:  MOVLW  01
04B7C:  MOVLB  B
04B7E:  MOVWF  x53
04B80:  MOVLW  0F
04B82:  MOVWF  x55
04B84:  MOVLW  89
04B86:  MOVWF  x54
04B88:  MOVLB  0
04B8A:  CALL   27AA
04B8E:  MOVFF  A50,B52
04B92:  MOVLB  B
04B94:  CLRF   x53
04B96:  MOVLW  0F
04B98:  MOVWF  x55
04B9A:  MOVLW  92
04B9C:  MOVWF  x54
04B9E:  MOVLB  0
04BA0:  CALL   27AA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04BA4:  MOVFF  A50,B52
04BA8:  MOVLB  B
04BAA:  CLRF   x53
04BAC:  MOVLW  0F
04BAE:  MOVWF  x55
04BB0:  MOVLW  89
04BB2:  MOVWF  x54
04BB4:  MOVLB  0
04BB6:  CALL   27AA
04BBA:  MOVFF  A50,B52
04BBE:  MOVLB  B
04BC0:  CLRF   x53
04BC2:  MOVLW  0F
04BC4:  MOVWF  x55
04BC6:  MOVLW  92
04BC8:  MOVWF  x54
04BCA:  MOVLB  0
04BCC:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 4);
04BD0:  MOVFF  A51,B4F
04BD4:  MOVFF  A50,B4E
04BD8:  MOVFF  A4F,B4D
04BDC:  MOVFF  A4E,B4C
04BE0:  MOVLW  0A
04BE2:  MOVLB  B
04BE4:  MOVWF  x51
04BE6:  MOVLW  57
04BE8:  MOVWF  x50
04BEA:  CLRF   x53
04BEC:  MOVLW  04
04BEE:  MOVWF  x52
04BF0:  MOVLB  0
04BF2:  CALL   3932
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04BF6:  MOVFF  A50,B52
04BFA:  MOVLW  01
04BFC:  MOVLB  B
04BFE:  MOVWF  x53
04C00:  MOVLW  0F
04C02:  MOVWF  x55
04C04:  MOVLW  89
04C06:  MOVWF  x54
04C08:  MOVLB  0
04C0A:  CALL   27AA
04C0E:  MOVFF  A50,B52
04C12:  MOVLB  B
04C14:  CLRF   x53
04C16:  MOVLW  0F
04C18:  MOVWF  x55
04C1A:  MOVLW  92
04C1C:  MOVWF  x54
04C1E:  MOVLB  0
04C20:  CALL   27AA
....................    }
04C24:  GOTO   4DA8
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
04C28:  MOVLB  A
04C2A:  DECFSZ x4F,W
04C2C:  BRA    4C32
04C2E:  BRA    4C38
04C30:  MOVLB  0
04C32:  MOVLB  0
04C34:  GOTO   4DA8
04C38:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
04C3A:  MOVLW  06
04C3C:  MOVLB  A
04C3E:  MOVWF  x5B
04C40:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_SUBSECTOR_4KB_ERASE;
04C42:  MOVLW  21
04C44:  MOVLB  A
04C46:  MOVWF  x5C
....................       flash_cmd[1] = (unsigned int8)((subsector_address>>24) & 0xff);   // 0x _ _ 00 00 00
04C48:  MOVFF  A55,A63
04C4C:  CLRF   x64
04C4E:  CLRF   x65
04C50:  CLRF   x66
04C52:  MOVF   x63,W
04C54:  MOVWF  00
04C56:  CLRF   01
04C58:  CLRF   02
04C5A:  CLRF   03
04C5C:  MOVFF  00,A5D
....................       flash_cmd[2] = (unsigned int8)((subsector_address>>16) & 0xff);   // 0x 00 _ _ 00 00
04C60:  MOVFF  A54,A63
04C64:  MOVFF  A55,A64
04C68:  CLRF   x65
04C6A:  CLRF   x66
04C6C:  MOVF   x63,W
04C6E:  MOVWF  00
04C70:  CLRF   01
04C72:  CLRF   02
04C74:  CLRF   03
04C76:  MOVFF  00,A5E
....................       flash_cmd[3] = (unsigned int8)((subsector_address>>8) & 0xff);    // 0x 00 00 _ _ 00
04C7A:  MOVFF  A53,A63
04C7E:  MOVFF  A54,A64
04C82:  MOVFF  A55,A65
04C86:  CLRF   x66
04C88:  MOVF   x63,W
04C8A:  MOVWF  00
04C8C:  CLRF   01
04C8E:  CLRF   02
04C90:  CLRF   03
04C92:  MOVFF  00,A5F
....................       flash_cmd[4] = (unsigned int8)((subsector_address) & 0xff);       // 0x 00 00 00 _ _
04C96:  MOVF   x52,W
04C98:  MOVWF  00
04C9A:  CLRF   01
04C9C:  CLRF   02
04C9E:  CLRF   03
04CA0:  MOVFF  00,A60
....................       
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
04CA4:  MOVFF  A50,B52
04CA8:  MOVLB  B
04CAA:  CLRF   x53
04CAC:  MOVLW  0F
04CAE:  MOVWF  x55
04CB0:  MOVLW  89
04CB2:  MOVWF  x54
04CB4:  MOVLB  0
04CB6:  CALL   27AA
04CBA:  MOVFF  A50,B52
04CBE:  MOVLB  B
04CC0:  CLRF   x53
04CC2:  MOVLW  0F
04CC4:  MOVWF  x55
04CC6:  MOVLW  92
04CC8:  MOVWF  x54
04CCA:  MOVLB  0
04CCC:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
04CD0:  MOVFF  A51,B4F
04CD4:  MOVFF  A50,B4E
04CD8:  MOVFF  A4F,B4D
04CDC:  MOVFF  A4E,B4C
04CE0:  MOVLW  0A
04CE2:  MOVLB  B
04CE4:  MOVWF  x51
04CE6:  MOVLW  5B
04CE8:  MOVWF  x50
04CEA:  CLRF   x53
04CEC:  MOVLW  01
04CEE:  MOVWF  x52
04CF0:  MOVLB  0
04CF2:  CALL   3932
....................       output_high(flash_stream.cs_pin);
04CF6:  MOVFF  A50,B52
04CFA:  MOVLW  01
04CFC:  MOVLB  B
04CFE:  MOVWF  x53
04D00:  MOVLW  0F
04D02:  MOVWF  x55
04D04:  MOVLW  89
04D06:  MOVWF  x54
04D08:  MOVLB  0
04D0A:  CALL   27AA
04D0E:  MOVFF  A50,B52
04D12:  MOVLB  B
04D14:  CLRF   x53
04D16:  MOVLW  0F
04D18:  MOVWF  x55
04D1A:  MOVLW  92
04D1C:  MOVWF  x54
04D1E:  MOVLB  0
04D20:  CALL   27AA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
04D24:  MOVFF  A50,B52
04D28:  MOVLB  B
04D2A:  CLRF   x53
04D2C:  MOVLW  0F
04D2E:  MOVWF  x55
04D30:  MOVLW  89
04D32:  MOVWF  x54
04D34:  MOVLB  0
04D36:  CALL   27AA
04D3A:  MOVFF  A50,B52
04D3E:  MOVLB  B
04D40:  CLRF   x53
04D42:  MOVLW  0F
04D44:  MOVWF  x55
04D46:  MOVLW  92
04D48:  MOVWF  x54
04D4A:  MOVLB  0
04D4C:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
04D50:  MOVFF  A51,B4F
04D54:  MOVFF  A50,B4E
04D58:  MOVFF  A4F,B4D
04D5C:  MOVFF  A4E,B4C
04D60:  MOVLW  0A
04D62:  MOVLB  B
04D64:  MOVWF  x51
04D66:  MOVLW  5C
04D68:  MOVWF  x50
04D6A:  CLRF   x53
04D6C:  MOVLW  05
04D6E:  MOVWF  x52
04D70:  MOVLB  0
04D72:  CALL   3932
....................       //////////////////////////////////////////////////////////////////
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
04D76:  MOVFF  A50,B52
04D7A:  MOVLW  01
04D7C:  MOVLB  B
04D7E:  MOVWF  x53
04D80:  MOVLW  0F
04D82:  MOVWF  x55
04D84:  MOVLW  89
04D86:  MOVWF  x54
04D88:  MOVLB  0
04D8A:  CALL   27AA
04D8E:  MOVFF  A50,B52
04D92:  MOVLB  B
04D94:  CLRF   x53
04D96:  MOVLW  0F
04D98:  MOVWF  x55
04D9A:  MOVLW  92
04D9C:  MOVWF  x54
04D9E:  MOVLB  0
04DA0:  CALL   27AA
....................    }
04DA4:  GOTO   4DA8
....................    
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"error:flash model is invalid\r\n");
....................       #endif
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
04DA8:  MOVLB  A
04DAA:  CLRF   x61
04DAC:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
04DAE:  MOVFF  A51,B4F
04DB2:  MOVFF  A50,B4E
04DB6:  MOVFF  A4F,B4D
04DBA:  MOVFF  A4E,B4C
04DBE:  CALL   3B9E
04DC2:  MOVF   01,W
04DC4:  ANDLW  01
04DC6:  SUBLW  01
04DC8:  BTFSS  FD8.2
04DCA:  GOTO   4DE4
....................       delay_ms(1);   
04DCE:  MOVLW  01
04DD0:  MOVLB  B
04DD2:  MOVWF  x4C
04DD4:  MOVLB  0
04DD6:  CALL   1FC2
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
04DDA:  MOVLB  A
04DDC:  INCF   x61,F
04DDE:  MOVLB  0
04DE0:  GOTO   4DAE
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash 4kByte subsector erase complete\r\n");
....................    #endif
....................    return;
04DE4:  RETURN 0
.................... }
....................  
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address)
.................... {
....................    unsigned int8 read_data;
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................             
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
....................       flash_cmd[1] = (unsigned int8)((read_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((read_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((read_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((read_address) & 0xff);       // 0x 00 00 00 _ _
....................    
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, &read_data, 1);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    return read_data;
.................... }
....................  
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
02BDE:  MOVLB  B
02BE0:  MOVF   x35,F
02BE2:  BTFSC  FD8.2
02BE4:  BRA    2BEC
02BE6:  MOVLB  0
02BE8:  GOTO   2CDC
02BEC:  MOVLB  0
....................       unsigned int8 flash_cmd[4];
....................       
....................       flash_cmd[0] = CMD_READ;
02BEE:  MOVLW  03
02BF0:  MOVLB  B
02BF2:  MOVWF  x42
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02BF4:  MOVFF  B3A,B4C
02BF8:  MOVFF  B3B,B4D
02BFC:  CLRF   x4E
02BFE:  CLRF   x4F
02C00:  MOVF   x4C,W
02C02:  MOVWF  00
02C04:  CLRF   01
02C06:  CLRF   02
02C08:  CLRF   03
02C0A:  MOVFF  00,B43
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02C0E:  MOVFF  B39,B4C
02C12:  MOVFF  B3A,B4D
02C16:  MOVFF  B3B,B4E
02C1A:  CLRF   x4F
02C1C:  MOVF   x4C,W
02C1E:  MOVWF  00
02C20:  CLRF   01
02C22:  CLRF   02
02C24:  CLRF   03
02C26:  MOVFF  00,B44
....................       flash_cmd[3] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02C2A:  MOVF   x38,W
02C2C:  MOVWF  00
02C2E:  CLRF   01
02C30:  CLRF   02
02C32:  CLRF   03
02C34:  MOVFF  00,B45
....................             
....................       output_low(flash_stream.cs_pin);
02C38:  MOVFF  B36,B52
02C3C:  CLRF   x53
02C3E:  MOVLW  0F
02C40:  MOVWF  x55
02C42:  MOVLW  89
02C44:  MOVWF  x54
02C46:  MOVLB  0
02C48:  CALL   27AA
02C4C:  MOVFF  B36,B52
02C50:  MOVLB  B
02C52:  CLRF   x53
02C54:  MOVLW  0F
02C56:  MOVWF  x55
02C58:  MOVLW  92
02C5A:  MOVWF  x54
02C5C:  MOVLB  0
02C5E:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 4, read_data, read_amount);
02C62:  MOVFF  B37,B55
02C66:  MOVFF  B36,B54
02C6A:  MOVFF  B35,B53
02C6E:  MOVFF  B34,B52
02C72:  MOVLW  0B
02C74:  MOVLB  B
02C76:  MOVWF  x57
02C78:  MOVLW  42
02C7A:  MOVWF  x56
02C7C:  CLRF   x59
02C7E:  MOVLW  04
02C80:  MOVWF  x58
02C82:  MOVFF  B3D,B5B
02C86:  MOVFF  B3C,B5A
02C8A:  MOVFF  B41,B5F
02C8E:  MOVFF  B40,B5E
02C92:  MOVFF  B3F,B5D
02C96:  MOVFF  B3E,B5C
02C9A:  MOVLB  0
02C9C:  CALL   28BE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02CA0:  MOVLW  02
02CA2:  MOVWF  00
02CA4:  DECFSZ 00,F
02CA6:  BRA    2CA4
02CA8:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02CAA:  MOVFF  B36,B52
02CAE:  MOVLW  01
02CB0:  MOVLB  B
02CB2:  MOVWF  x53
02CB4:  MOVLW  0F
02CB6:  MOVWF  x55
02CB8:  MOVLW  89
02CBA:  MOVWF  x54
02CBC:  MOVLB  0
02CBE:  CALL   27AA
02CC2:  MOVFF  B36,B52
02CC6:  MOVLB  B
02CC8:  CLRF   x53
02CCA:  MOVLW  0F
02CCC:  MOVWF  x55
02CCE:  MOVLW  92
02CD0:  MOVWF  x54
02CD2:  MOVLB  0
02CD4:  CALL   27AA
....................    }
02CD8:  GOTO   2DF0
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
02CDC:  MOVLB  B
02CDE:  DECFSZ x35,W
02CE0:  BRA    2CE6
02CE2:  BRA    2CEC
02CE4:  MOVLB  0
02CE6:  MOVLB  0
02CE8:  GOTO   2DF0
02CEC:  MOVLB  0
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_4BYTE_READ;
02CEE:  MOVLW  13
02CF0:  MOVLB  B
02CF2:  MOVWF  x46
....................       flash_cmd[1] = (unsigned int8)((read_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
02CF4:  MOVFF  B3B,B4C
02CF8:  CLRF   x4D
02CFA:  CLRF   x4E
02CFC:  CLRF   x4F
02CFE:  MOVF   x4C,W
02D00:  MOVWF  00
02D02:  CLRF   01
02D04:  CLRF   02
02D06:  CLRF   03
02D08:  MOVFF  00,B47
....................       flash_cmd[2] = (unsigned int8)((read_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
02D0C:  MOVFF  B3A,B4C
02D10:  MOVFF  B3B,B4D
02D14:  CLRF   x4E
02D16:  CLRF   x4F
02D18:  MOVF   x4C,W
02D1A:  MOVWF  00
02D1C:  CLRF   01
02D1E:  CLRF   02
02D20:  CLRF   03
02D22:  MOVFF  00,B48
....................       flash_cmd[3] = (unsigned int8)((read_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
02D26:  MOVFF  B39,B4C
02D2A:  MOVFF  B3A,B4D
02D2E:  MOVFF  B3B,B4E
02D32:  CLRF   x4F
02D34:  MOVF   x4C,W
02D36:  MOVWF  00
02D38:  CLRF   01
02D3A:  CLRF   02
02D3C:  CLRF   03
02D3E:  MOVFF  00,B49
....................       flash_cmd[4] = (unsigned int8)((read_start_address) & 0xff);       // 0x 00 00 00 _ _
02D42:  MOVF   x38,W
02D44:  MOVWF  00
02D46:  CLRF   01
02D48:  CLRF   02
02D4A:  CLRF   03
02D4C:  MOVFF  00,B4A
....................    
....................       output_low(flash_stream.cs_pin);
02D50:  MOVFF  B36,B52
02D54:  CLRF   x53
02D56:  MOVLW  0F
02D58:  MOVWF  x55
02D5A:  MOVLW  89
02D5C:  MOVWF  x54
02D5E:  MOVLB  0
02D60:  CALL   27AA
02D64:  MOVFF  B36,B52
02D68:  MOVLB  B
02D6A:  CLRF   x53
02D6C:  MOVLW  0F
02D6E:  MOVWF  x55
02D70:  MOVLW  92
02D72:  MOVWF  x54
02D74:  MOVLB  0
02D76:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_and_read_select_stream(flash_stream, flash_cmd, 5, read_data, read_amount);
02D7A:  MOVFF  B37,B55
02D7E:  MOVFF  B36,B54
02D82:  MOVFF  B35,B53
02D86:  MOVFF  B34,B52
02D8A:  MOVLW  0B
02D8C:  MOVLB  B
02D8E:  MOVWF  x57
02D90:  MOVLW  46
02D92:  MOVWF  x56
02D94:  CLRF   x59
02D96:  MOVLW  05
02D98:  MOVWF  x58
02D9A:  MOVFF  B3D,B5B
02D9E:  MOVFF  B3C,B5A
02DA2:  MOVFF  B41,B5F
02DA6:  MOVFF  B40,B5E
02DAA:  MOVFF  B3F,B5D
02DAE:  MOVFF  B3E,B5C
02DB2:  MOVLB  0
02DB4:  CALL   28BE
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
02DB8:  MOVLW  02
02DBA:  MOVWF  00
02DBC:  DECFSZ 00,F
02DBE:  BRA    2DBC
02DC0:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
02DC2:  MOVFF  B36,B52
02DC6:  MOVLW  01
02DC8:  MOVLB  B
02DCA:  MOVWF  x53
02DCC:  MOVLW  0F
02DCE:  MOVWF  x55
02DD0:  MOVLW  89
02DD2:  MOVWF  x54
02DD4:  MOVLB  0
02DD6:  CALL   27AA
02DDA:  MOVFF  B36,B52
02DDE:  MOVLB  B
02DE0:  CLRF   x53
02DE2:  MOVLW  0F
02DE4:  MOVWF  x55
02DE6:  MOVLW  92
02DE8:  MOVWF  x54
02DEA:  MOVLB  0
02DEC:  CALL   27AA
....................    }
....................    return;
02DF0:  RETURN 0
.................... }
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data)
.................... {
....................    if(flash_stream.flash_model == MT25QL128ABA){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[3] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[4] = write_data;
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 5);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[6];
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
....................       flash_cmd[1] = (unsigned int8)((write_address>>24) & 0xff);   // 0x _ _ 00 00 00
....................       flash_cmd[2] = (unsigned int8)((write_address>>16) & 0xff);   // 0x 00 _ _ 00 00
....................       flash_cmd[3] = (unsigned int8)((write_address>>8) & 0xff);    // 0x 00 00 _ _ 00
....................       flash_cmd[4] = (unsigned int8)((write_address) & 0xff);       // 0x 00 00 00 _ _
....................       flash_cmd[5] = write_data;
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
....................       output_high(flash_stream.cs_pin);
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_select_stream(flash_stream, flash_cmd, 6);
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
....................       delay_ms(1);   
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
.................... }
....................  
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount){
....................    if(flash_stream.flash_model == MT25QL128ABA){
*
03C3E:  MOVLB  B
03C40:  MOVF   x35,F
03C42:  BTFSC  FD8.2
03C44:  BRA    3C4C
03C46:  MOVLB  0
03C48:  GOTO   3DBA
03C4C:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[4];
03C4E:  MOVLW  06
03C50:  MOVLB  B
03C52:  MOVWF  x40
03C54:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_PAGE_PROGRAM;
03C56:  MOVLW  02
03C58:  MOVLB  B
03C5A:  MOVWF  x41
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03C5C:  MOVFF  B3A,B4D
03C60:  MOVFF  B3B,B4E
03C64:  CLRF   x4F
03C66:  CLRF   x50
03C68:  MOVF   x4D,W
03C6A:  MOVWF  00
03C6C:  CLRF   01
03C6E:  CLRF   02
03C70:  CLRF   03
03C72:  MOVFF  00,B42
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03C76:  MOVFF  B39,B4D
03C7A:  MOVFF  B3A,B4E
03C7E:  MOVFF  B3B,B4F
03C82:  CLRF   x50
03C84:  MOVF   x4D,W
03C86:  MOVWF  00
03C88:  CLRF   01
03C8A:  CLRF   02
03C8C:  CLRF   03
03C8E:  MOVFF  00,B43
....................       flash_cmd[3] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03C92:  MOVF   x38,W
03C94:  MOVWF  00
03C96:  CLRF   01
03C98:  CLRF   02
03C9A:  CLRF   03
03C9C:  MOVFF  00,B44
.................... 
....................       //fprintf(PC, "address:0x%08LX\r\n", write_start_address);
.................... 
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03CA0:  MOVFF  B36,B52
03CA4:  CLRF   x53
03CA6:  MOVLW  0F
03CA8:  MOVWF  x55
03CAA:  MOVLW  89
03CAC:  MOVWF  x54
03CAE:  MOVLB  0
03CB0:  CALL   27AA
03CB4:  MOVFF  B36,B52
03CB8:  MOVLB  B
03CBA:  CLRF   x53
03CBC:  MOVLW  0F
03CBE:  MOVWF  x55
03CC0:  MOVLW  92
03CC2:  MOVWF  x54
03CC4:  MOVLB  0
03CC6:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03CCA:  MOVFF  B37,B4F
03CCE:  MOVFF  B36,B4E
03CD2:  MOVFF  B35,B4D
03CD6:  MOVFF  B34,B4C
03CDA:  MOVLW  0B
03CDC:  MOVLB  B
03CDE:  MOVWF  x51
03CE0:  MOVLW  40
03CE2:  MOVWF  x50
03CE4:  CLRF   x53
03CE6:  MOVLW  01
03CE8:  MOVWF  x52
03CEA:  MOVLB  0
03CEC:  CALL   3932
....................       output_high(flash_stream.cs_pin);
03CF0:  MOVFF  B36,B52
03CF4:  MOVLW  01
03CF6:  MOVLB  B
03CF8:  MOVWF  x53
03CFA:  MOVLW  0F
03CFC:  MOVWF  x55
03CFE:  MOVLW  89
03D00:  MOVWF  x54
03D02:  MOVLB  0
03D04:  CALL   27AA
03D08:  MOVFF  B36,B52
03D0C:  MOVLB  B
03D0E:  CLRF   x53
03D10:  MOVLW  0F
03D12:  MOVWF  x55
03D14:  MOVLW  92
03D16:  MOVWF  x54
03D18:  MOVLB  0
03D1A:  CALL   27AA
....................       //Write enabled
....................       
....................       output_low(flash_stream.cs_pin);
03D1E:  MOVFF  B36,B52
03D22:  MOVLB  B
03D24:  CLRF   x53
03D26:  MOVLW  0F
03D28:  MOVWF  x55
03D2A:  MOVLW  89
03D2C:  MOVWF  x54
03D2E:  MOVLB  0
03D30:  CALL   27AA
03D34:  MOVFF  B36,B52
03D38:  MOVLB  B
03D3A:  CLRF   x53
03D3C:  MOVLW  0F
03D3E:  MOVWF  x55
03D40:  MOVLW  92
03D42:  MOVWF  x54
03D44:  MOVLB  0
03D46:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 4, write_data, write_amount);
03D4A:  MOVFF  B37,B4F
03D4E:  MOVFF  B36,B4E
03D52:  MOVFF  B35,B4D
03D56:  MOVFF  B34,B4C
03D5A:  MOVLW  0B
03D5C:  MOVLB  B
03D5E:  MOVWF  x51
03D60:  MOVLW  41
03D62:  MOVWF  x50
03D64:  MOVLW  04
03D66:  MOVWF  x52
03D68:  MOVFF  B3D,B54
03D6C:  MOVFF  B3C,B53
03D70:  MOVFF  B3F,B56
03D74:  MOVFF  B3E,B55
03D78:  MOVLB  0
03D7A:  CALL   3A22
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03D7E:  MOVLW  02
03D80:  MOVWF  00
03D82:  DECFSZ 00,F
03D84:  BRA    3D82
03D86:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03D88:  MOVFF  B36,B52
03D8C:  MOVLW  01
03D8E:  MOVLB  B
03D90:  MOVWF  x53
03D92:  MOVLW  0F
03D94:  MOVWF  x55
03D96:  MOVLW  89
03D98:  MOVWF  x54
03D9A:  MOVLB  0
03D9C:  CALL   27AA
03DA0:  MOVFF  B36,B52
03DA4:  MOVLB  B
03DA6:  CLRF   x53
03DA8:  MOVLW  0F
03DAA:  MOVWF  x55
03DAC:  MOVLW  92
03DAE:  MOVWF  x54
03DB0:  MOVLB  0
03DB2:  CALL   27AA
....................    }
03DB6:  GOTO   3F4C
....................    else if(flash_stream.flash_model == MT25QL01GBBB){
03DBA:  MOVLB  B
03DBC:  DECFSZ x35,W
03DBE:  BRA    3DC4
03DC0:  BRA    3DCA
03DC2:  MOVLB  0
03DC4:  MOVLB  0
03DC6:  GOTO   3F4C
03DCA:  MOVLB  0
....................       int8 write_enable_cmd = CMD_WRITE_ENABLE;
....................       unsigned int8 flash_cmd[5];
03DCC:  MOVLW  06
03DCE:  MOVLB  B
03DD0:  MOVWF  x45
03DD2:  MOVLB  0
....................       
....................       flash_cmd[0] = CMD_4BYTE_PAGE_PROGRAM;
03DD4:  MOVLW  12
03DD6:  MOVLB  B
03DD8:  MOVWF  x46
....................       flash_cmd[1] = (unsigned int8)((write_start_address>>24) & 0xff);   // 0x _ _ 00 00 00
03DDA:  MOVFF  B3B,B4D
03DDE:  CLRF   x4E
03DE0:  CLRF   x4F
03DE2:  CLRF   x50
03DE4:  MOVF   x4D,W
03DE6:  MOVWF  00
03DE8:  CLRF   01
03DEA:  CLRF   02
03DEC:  CLRF   03
03DEE:  MOVFF  00,B47
....................       flash_cmd[2] = (unsigned int8)((write_start_address>>16) & 0xff);   // 0x 00 _ _ 00 00
03DF2:  MOVFF  B3A,B4D
03DF6:  MOVFF  B3B,B4E
03DFA:  CLRF   x4F
03DFC:  CLRF   x50
03DFE:  MOVF   x4D,W
03E00:  MOVWF  00
03E02:  CLRF   01
03E04:  CLRF   02
03E06:  CLRF   03
03E08:  MOVFF  00,B48
....................       flash_cmd[3] = (unsigned int8)((write_start_address>>8) & 0xff);    // 0x 00 00 _ _ 00
03E0C:  MOVFF  B39,B4D
03E10:  MOVFF  B3A,B4E
03E14:  MOVFF  B3B,B4F
03E18:  CLRF   x50
03E1A:  MOVF   x4D,W
03E1C:  MOVWF  00
03E1E:  CLRF   01
03E20:  CLRF   02
03E22:  CLRF   03
03E24:  MOVFF  00,B49
....................       flash_cmd[4] = (unsigned int8)((write_start_address) & 0xff);       // 0x 00 00 00 _ _
03E28:  MOVF   x38,W
03E2A:  MOVWF  00
03E2C:  CLRF   01
03E2E:  CLRF   02
03E30:  CLRF   03
03E32:  MOVFF  00,B4A
....................    
....................       //Write enable sequence
....................       output_low(flash_stream.cs_pin);
03E36:  MOVFF  B36,B52
03E3A:  CLRF   x53
03E3C:  MOVLW  0F
03E3E:  MOVWF  x55
03E40:  MOVLW  89
03E42:  MOVWF  x54
03E44:  MOVLB  0
03E46:  CALL   27AA
03E4A:  MOVFF  B36,B52
03E4E:  MOVLB  B
03E50:  CLRF   x53
03E52:  MOVLW  0F
03E54:  MOVWF  x55
03E56:  MOVLW  92
03E58:  MOVWF  x54
03E5A:  MOVLB  0
03E5C:  CALL   27AA
....................       spi_xfer_select_stream(flash_stream, &write_enable_cmd, 1);
03E60:  MOVFF  B37,B4F
03E64:  MOVFF  B36,B4E
03E68:  MOVFF  B35,B4D
03E6C:  MOVFF  B34,B4C
03E70:  MOVLW  0B
03E72:  MOVLB  B
03E74:  MOVWF  x51
03E76:  MOVLW  45
03E78:  MOVWF  x50
03E7A:  CLRF   x53
03E7C:  MOVLW  01
03E7E:  MOVWF  x52
03E80:  MOVLB  0
03E82:  CALL   3932
....................       output_high(flash_stream.cs_pin);
03E86:  MOVFF  B36,B52
03E8A:  MOVLW  01
03E8C:  MOVLB  B
03E8E:  MOVWF  x53
03E90:  MOVLW  0F
03E92:  MOVWF  x55
03E94:  MOVLW  89
03E96:  MOVWF  x54
03E98:  MOVLB  0
03E9A:  CALL   27AA
03E9E:  MOVFF  B36,B52
03EA2:  MOVLB  B
03EA4:  CLRF   x53
03EA6:  MOVLW  0F
03EA8:  MOVWF  x55
03EAA:  MOVLW  92
03EAC:  MOVWF  x54
03EAE:  MOVLB  0
03EB0:  CALL   27AA
....................       //Write enabled
....................       output_low(flash_stream.cs_pin);
03EB4:  MOVFF  B36,B52
03EB8:  MOVLB  B
03EBA:  CLRF   x53
03EBC:  MOVLW  0F
03EBE:  MOVWF  x55
03EC0:  MOVLW  89
03EC2:  MOVWF  x54
03EC4:  MOVLB  0
03EC6:  CALL   27AA
03ECA:  MOVFF  B36,B52
03ECE:  MOVLB  B
03ED0:  CLRF   x53
03ED2:  MOVLW  0F
03ED4:  MOVWF  x55
03ED6:  MOVLW  92
03ED8:  MOVWF  x54
03EDA:  MOVLB  0
03EDC:  CALL   27AA
....................       ///////////////////////////////////////////////////////////////////
....................       spi_xfer_two_datas_select_stream(flash_stream, flash_cmd, 5, write_data, write_amount);
03EE0:  MOVFF  B37,B4F
03EE4:  MOVFF  B36,B4E
03EE8:  MOVFF  B35,B4D
03EEC:  MOVFF  B34,B4C
03EF0:  MOVLW  0B
03EF2:  MOVLB  B
03EF4:  MOVWF  x51
03EF6:  MOVLW  46
03EF8:  MOVWF  x50
03EFA:  MOVLW  05
03EFC:  MOVWF  x52
03EFE:  MOVFF  B3D,B54
03F02:  MOVFF  B3C,B53
03F06:  MOVFF  B3F,B56
03F0A:  MOVFF  B3E,B55
03F0E:  MOVLB  0
03F10:  CALL   3A22
....................       //////////////////////////////////////////////////////////////////
....................       delay_us(2);
03F14:  MOVLW  02
03F16:  MOVWF  00
03F18:  DECFSZ 00,F
03F1A:  BRA    3F18
03F1C:  NOP   
....................       output_high(flash_stream.cs_pin);            //take CS PIN higher back
03F1E:  MOVFF  B36,B52
03F22:  MOVLW  01
03F24:  MOVLB  B
03F26:  MOVWF  x53
03F28:  MOVLW  0F
03F2A:  MOVWF  x55
03F2C:  MOVLW  89
03F2E:  MOVWF  x54
03F30:  MOVLB  0
03F32:  CALL   27AA
03F36:  MOVFF  B36,B52
03F3A:  MOVLB  B
03F3C:  CLRF   x53
03F3E:  MOVLW  0F
03F40:  MOVWF  x55
03F42:  MOVLW  92
03F44:  MOVWF  x54
03F46:  MOVLB  0
03F48:  CALL   27AA
....................    }
....................    
....................    //wait process finished
....................    unsigned int8 timeout_counter = 0;
03F4C:  MOVLB  B
03F4E:  CLRF   x4B
03F50:  MOVLB  0
....................    while((status_register(flash_stream) & 0x01) == 1){                           //masking status bit
03F52:  MOVFF  B37,B4F
03F56:  MOVFF  B36,B4E
03F5A:  MOVFF  B35,B4D
03F5E:  MOVFF  B34,B4C
03F62:  CALL   3B9E
03F66:  MOVF   01,W
03F68:  ANDLW  01
03F6A:  SUBLW  01
03F6C:  BTFSS  FD8.2
03F6E:  GOTO   3F88
....................       delay_ms(1);
03F72:  MOVLW  01
03F74:  MOVLB  B
03F76:  MOVWF  x4C
03F78:  MOVLB  0
03F7A:  CALL   1FC2
....................       if(timeout_counter > 1000){
....................          #ifdef MT25Q_DEBUG
....................             fprintf(PC,"flash timeout\r\n");
....................          #endif
....................          break;
....................       }  
....................       timeout_counter++;
03F7E:  MOVLB  B
03F80:  INCF   x4B,F
03F82:  MOVLB  0
03F84:  GOTO   3F52
....................    }
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"flash write complete\r\n");
....................    #endif
....................    return;
03F88:  RETURN 0
.................... }
.................... 
....................  
.................... int1 is_connect(Flash flash_stream){
*
02AF2:  MOVLW  9F
02AF4:  MOVLB  2
02AF6:  MOVWF  x99
....................    READ_ID_DATA read_id_data;
....................    int8 flash_cmd = CMD_READ_ID;
....................    output_low(flash_stream.cs_pin);
02AF8:  MOVFF  283,B52
02AFC:  MOVLB  B
02AFE:  CLRF   x53
02B00:  MOVLW  0F
02B02:  MOVWF  x55
02B04:  MOVLW  89
02B06:  MOVWF  x54
02B08:  MOVLB  0
02B0A:  CALL   27AA
02B0E:  MOVFF  283,B52
02B12:  MOVLB  B
02B14:  CLRF   x53
02B16:  MOVLW  0F
02B18:  MOVWF  x55
02B1A:  MOVLW  92
02B1C:  MOVWF  x54
02B1E:  MOVLB  0
02B20:  CALL   27AA
....................    delay_us(10);  
02B24:  MOVLW  0D
02B26:  MOVWF  00
02B28:  DECFSZ 00,F
02B2A:  BRA    2B28
....................    spi_xfer_and_read_select_stream(flash_stream, &flash_cmd, 1, read_id_data.bytes, sizeof(read_id_data.bytes));
02B2C:  MOVFF  284,B55
02B30:  MOVFF  283,B54
02B34:  MOVFF  282,B53
02B38:  MOVFF  281,B52
02B3C:  MOVLW  02
02B3E:  MOVLB  B
02B40:  MOVWF  x57
02B42:  MOVLW  99
02B44:  MOVWF  x56
02B46:  CLRF   x59
02B48:  MOVLW  01
02B4A:  MOVWF  x58
02B4C:  MOVLW  02
02B4E:  MOVWF  x5B
02B50:  MOVLW  85
02B52:  MOVWF  x5A
02B54:  CLRF   x5F
02B56:  CLRF   x5E
02B58:  CLRF   x5D
02B5A:  MOVLW  14
02B5C:  MOVWF  x5C
02B5E:  MOVLB  0
02B60:  CALL   28BE
....................    output_high(flash_stream.cs_pin);
02B64:  MOVFF  283,B52
02B68:  MOVLW  01
02B6A:  MOVLB  B
02B6C:  MOVWF  x53
02B6E:  MOVLW  0F
02B70:  MOVWF  x55
02B72:  MOVLW  89
02B74:  MOVWF  x54
02B76:  MOVLB  0
02B78:  CALL   27AA
02B7C:  MOVFF  283,B52
02B80:  MOVLB  B
02B82:  CLRF   x53
02B84:  MOVLW  0F
02B86:  MOVWF  x55
02B88:  MOVLW  92
02B8A:  MOVWF  x54
02B8C:  MOVLB  0
02B8E:  CALL   27AA
....................    //fprintf(PC,"Read ID:%02X", read_id_data.fields.manufacturer_id);
....................    #ifdef MT25Q_DEBUG
....................       fprintf(PC,"Read ID:");
.................... 
....................    #endif
....................    //chip id check
....................    if(read_id_data.fields.manufacturer_id == MANUFACTURER_ID_MICRON){  
02B92:  MOVLB  2
02B94:  MOVF   x85,W
02B96:  SUBLW  20
02B98:  BTFSC  FD8.2
02B9A:  BRA    2BA2
02B9C:  MOVLB  0
02B9E:  GOTO   2BB0
02BA2:  MOVLB  0
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash connect OK\r\n");
....................       #endif
....................       return true;
02BA4:  MOVLW  01
02BA6:  MOVWF  01
02BA8:  GOTO   2BB8
....................    }
02BAC:  GOTO   2BB8
....................    else{
....................       #ifdef MT25Q_DEBUG
....................          fprintf(PC,"flash not connect\r\n");
....................       #endif
....................       return false;
02BB0:  MOVLW  00
02BB2:  MOVWF  01
02BB4:  GOTO   2BB8
....................    }
02BB8:  RETURN 0
.................... }
.................... 
.................... #include "../lib/tool/calc_tools.c"
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size)
.................... {
....................    if (payload_size <= 0) return 0;
*
02DF2:  MOVLB  B
02DF4:  MOVF   x36,F
02DF6:  BTFSC  FD8.2
02DF8:  BRA    2E00
02DFA:  MOVLB  0
02DFC:  GOTO   2E0A
02E00:  MOVLB  0
02E02:  MOVLW  00
02E04:  MOVWF  01
02E06:  GOTO   2E5C
.................... 
....................    unsigned int8 crc = *frame++;
02E0A:  MOVLB  B
02E0C:  MOVF   x35,W
02E0E:  MOVWF  03
02E10:  MOVF   x34,W
02E12:  INCF   x34,F
02E14:  BTFSC  FD8.2
02E16:  INCF   x35,F
02E18:  MOVWF  FE9
02E1A:  MOVFF  03,FEA
02E1E:  MOVFF  FEF,B37
02E22:  MOVLB  0
....................    while (--payload_size > 0)
02E24:  MOVLB  B
02E26:  DECF   x36,F
02E28:  MOVF   x36,F
02E2A:  BTFSS  FD8.2
02E2C:  BRA    2E34
02E2E:  MOVLB  0
02E30:  GOTO   2E54
02E34:  MOVLB  0
....................       crc ^= *frame++;
02E36:  MOVLB  B
02E38:  MOVF   x35,W
02E3A:  MOVWF  03
02E3C:  MOVF   x34,W
02E3E:  INCF   x34,F
02E40:  BTFSC  FD8.2
02E42:  INCF   x35,F
02E44:  MOVWF  FE9
02E46:  MOVFF  03,FEA
02E4A:  MOVF   FEF,W
02E4C:  XORWF  x37,F
02E4E:  MOVLB  0
02E50:  GOTO   2E24
.................... 
....................    return crc;
02E54:  MOVLB  B
02E56:  MOVF   x37,W
02E58:  MOVWF  01
02E5A:  MOVLB  0
02E5C:  RETURN 0
.................... }
.................... 
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size)
*
0F0DA:  MOVLW  01
0F0DC:  MOVLB  2
0F0DE:  SUBWF  xC7,W
0F0E0:  ADDWF  xC5,W
0F0E2:  MOVWF  FE9
0F0E4:  MOVLW  00
0F0E6:  ADDWFC xC6,W
0F0E8:  MOVWF  FEA
0F0EA:  MOVFF  FEF,2C8
0F0EE:  MOVLW  01
0F0F0:  SUBWF  xC7,W
0F0F2:  MOVWF  xCA
0F0F4:  MOVFF  2C6,B35
0F0F8:  MOVFF  2C5,B34
0F0FC:  MOVFF  2CA,B36
0F100:  MOVLB  0
0F102:  CALL   2DF2
0F106:  MOVFF  01,2C9
.................... {
....................    unsigned int8 received_crc = frame[payload_size - 1]; // CRC is the last byte
....................    unsigned int8 calculated_crc = calc_crc8(frame, payload_size - 1);
....................    return (received_crc == calculated_crc);
0F10A:  MOVLB  2
0F10C:  MOVF   xC9,W
0F10E:  SUBWF  xC8,W
0F110:  BTFSS  FD8.2
0F112:  BRA    F11A
0F114:  MOVLB  0
0F116:  GOTO   F122
0F11A:  MOVLB  0
0F11C:  MOVLW  00
0F11E:  GOTO   F124
0F122:  MOVLW  01
0F124:  MOVWF  01
0F126:  RETURN 0
.................... }
.................... 
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index)
.................... {
....................     buf[index + 0] = (int8)(value >> 24);   // MSB
....................     buf[index + 1] = (int8)(value >> 16);
....................     buf[index + 2] = (int8)(value >>  8);
....................     buf[index + 3] = (int8)(value      );   // LSB
.................... }
.................... 
.................... int32 lsb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] <<  0) |
....................            ((int32)buf[index + 1] <<  8) |
....................            ((int32)buf[index + 2] << 16) |
....................            ((int32)buf[index + 3] << 24);
.................... }
.................... 
.................... 
.................... int32 msb_array_to_int32(int8 *buf, int8 index)
.................... {
....................     return ((int32)buf[index + 0] << 24) |
....................            ((int32)buf[index + 1] << 16) |
....................            ((int32)buf[index + 2] <<  8) |
....................            ((int32)buf[index + 3]);
.................... }
.................... 
.................... unsigned int32 int32_lsb_to_msb(unsigned int32 value)
.................... {
....................     return ((value & 0x000000FF) << 24) |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0xFF000000) >> 24);
.................... }
.................... 
.................... unsigned int32 int32_msb_to_lsb(unsigned int32 value)
.................... {
....................     return ((value & 0xFF000000) >> 24) |
....................            ((value & 0x00FF0000) >> 8)  |
....................            ((value & 0x0000FF00) << 8)  |
....................            ((value & 0x000000FF) << 24);
.................... }
.................... // End of file
.................... 
.................... #include "../lib/tool/smf_queue.c"
.................... #include "smf_queue.h"
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "mmj_smf_memorymap.h"
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0x90,
....................     SMF_SATO_PICLOG = 0x91,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data)
.................... {   
....................    fprintf(PC, "Enqueue Flash Operation\r\n");
*
0A506:  MOVLW  00
0A508:  MOVWF  FF6
0A50A:  MOVLW  04
0A50C:  MOVWF  FF7
0A50E:  MOVLW  00
0A510:  MOVWF  FF8
0A512:  CALL   1FF0
....................    int8 next_tail = (flash_queue.tail_index + 1) % SMF_QUEUE_SIZE;
0A516:  MOVLW  01
0A518:  MOVLB  1
0A51A:  ADDWF  x11,W
0A51C:  ANDLW  0F
0A51E:  MOVLB  A
0A520:  MOVWF  x0E
.................... 
....................    if(next_tail == flash_queue.head_index)
0A522:  MOVLB  1
0A524:  MOVF   x10,W
0A526:  MOVLB  A
0A528:  SUBWF  x0E,W
0A52A:  BTFSC  FD8.2
0A52C:  BRA    A534
0A52E:  MOVLB  0
0A530:  GOTO   A54A
0A534:  MOVLB  0
....................       printf("Flash queue is full!!!\r\n");
0A536:  MOVLW  1A
0A538:  MOVWF  FF6
0A53A:  MOVLW  04
0A53C:  MOVWF  FF7
0A53E:  MOVLW  00
0A540:  MOVWF  FF8
0A542:  CALL   1FF0
0A546:  GOTO   A77E
....................       
....................    else
....................    {
....................       flash_queue.entries[flash_queue.tail_index].mission_id = data->mission_id;
0A54A:  MOVLB  1
0A54C:  MOVF   x11,W
0A54E:  MULLW  0C
0A550:  MOVF   FF3,W
0A552:  MOVLB  A
0A554:  CLRF   x10
0A556:  MOVWF  x0F
0A558:  MOVLW  50
0A55A:  ADDWF  x0F,W
0A55C:  MOVWF  01
0A55E:  MOVLW  00
0A560:  ADDWFC x10,W
0A562:  MOVWF  03
0A564:  MOVF   01,W
0A566:  MOVWF  x11
0A568:  MOVFF  03,A12
0A56C:  MOVF   x0C,W
0A56E:  MOVWF  FE9
0A570:  MOVF   x0D,W
0A572:  MOVWF  FEA
0A574:  MOVF   FEF,W
0A576:  MOVWF  x13
0A578:  MOVFF  A12,FEA
0A57C:  MOVFF  A11,FE9
0A580:  MOVFF  A13,FEF
....................       flash_queue.entries[flash_queue.tail_index].func_type  = data->func_type;
0A584:  MOVLB  1
0A586:  MOVF   x11,W
0A588:  MULLW  0C
0A58A:  MOVF   FF3,W
0A58C:  MOVLB  A
0A58E:  CLRF   x10
0A590:  MOVWF  x0F
0A592:  MOVLW  01
0A594:  ADDWF  x0F,W
0A596:  MOVWF  01
0A598:  MOVLW  00
0A59A:  ADDWFC x10,W
0A59C:  MOVWF  03
0A59E:  MOVF   01,W
0A5A0:  ADDLW  50
0A5A2:  MOVWF  01
0A5A4:  MOVLW  00
0A5A6:  ADDWFC 03,F
0A5A8:  MOVF   01,W
0A5AA:  MOVWF  x0F
0A5AC:  MOVFF  03,A10
0A5B0:  MOVLW  01
0A5B2:  ADDWF  x0C,W
0A5B4:  MOVWF  FE9
0A5B6:  MOVLW  00
0A5B8:  ADDWFC x0D,W
0A5BA:  MOVWF  FEA
0A5BC:  MOVF   FEF,W
0A5BE:  MOVWF  x11
0A5C0:  MOVFF  A10,FEA
0A5C4:  MOVFF  A0F,FE9
0A5C8:  MOVFF  A11,FEF
....................       flash_queue.entries[flash_queue.tail_index].write_mode = data->write_mode;
0A5CC:  MOVLB  1
0A5CE:  MOVF   x11,W
0A5D0:  MULLW  0C
0A5D2:  MOVF   FF3,W
0A5D4:  MOVLB  A
0A5D6:  CLRF   x10
0A5D8:  MOVWF  x0F
0A5DA:  MOVLW  02
0A5DC:  ADDWF  x0F,W
0A5DE:  MOVWF  01
0A5E0:  MOVLW  00
0A5E2:  ADDWFC x10,W
0A5E4:  MOVWF  03
0A5E6:  MOVF   01,W
0A5E8:  ADDLW  50
0A5EA:  MOVWF  01
0A5EC:  MOVLW  00
0A5EE:  ADDWFC 03,F
0A5F0:  MOVF   01,W
0A5F2:  MOVWF  x0F
0A5F4:  MOVFF  03,A10
0A5F8:  MOVLW  02
0A5FA:  ADDWF  x0C,W
0A5FC:  MOVWF  FE9
0A5FE:  MOVLW  00
0A600:  ADDWFC x0D,W
0A602:  MOVWF  FEA
0A604:  MOVF   FEF,W
0A606:  MOVWF  x11
0A608:  MOVFF  A10,FEA
0A60C:  MOVFF  A0F,FE9
0A610:  MOVFF  A11,FEF
....................       flash_queue.entries[flash_queue.tail_index].source_type = data->source_type;
0A614:  MOVLB  1
0A616:  MOVF   x11,W
0A618:  MULLW  0C
0A61A:  MOVF   FF3,W
0A61C:  MOVLB  A
0A61E:  CLRF   x10
0A620:  MOVWF  x0F
0A622:  MOVLW  03
0A624:  ADDWF  x0F,W
0A626:  MOVWF  01
0A628:  MOVLW  00
0A62A:  ADDWFC x10,W
0A62C:  MOVWF  03
0A62E:  MOVF   01,W
0A630:  ADDLW  50
0A632:  MOVWF  01
0A634:  MOVLW  00
0A636:  ADDWFC 03,F
0A638:  MOVF   01,W
0A63A:  MOVWF  x0F
0A63C:  MOVFF  03,A10
0A640:  MOVLW  03
0A642:  ADDWF  x0C,W
0A644:  MOVWF  01
0A646:  MOVLW  00
0A648:  ADDWFC x0D,W
0A64A:  MOVWF  03
0A64C:  MOVF   01,W
0A64E:  MOVWF  FE9
0A650:  MOVFF  03,FEA
0A654:  MOVLW  00
0A656:  BTFSC  FEF.0
0A658:  MOVLW  01
0A65A:  MOVWF  01
0A65C:  BTFSS  01.0
0A65E:  BRA    A666
0A660:  MOVLB  0
0A662:  GOTO   A676
0A666:  MOVLB  0
0A668:  MOVFF  A10,FEA
0A66C:  MOVFF  A0F,FE9
0A670:  BCF    FEF.0
0A672:  GOTO   A680
0A676:  MOVFF  A10,FEA
0A67A:  MOVFF  A0F,FE9
0A67E:  BSF    FEF.0
....................       flash_queue.entries[flash_queue.tail_index].misf_start_addr = data->misf_start_addr;
0A680:  MOVLB  1
0A682:  MOVF   x11,W
0A684:  MULLW  0C
0A686:  MOVF   FF3,W
0A688:  MOVLB  A
0A68A:  CLRF   x10
0A68C:  MOVWF  x0F
0A68E:  MOVLW  04
0A690:  ADDWF  x0F,W
0A692:  MOVWF  01
0A694:  MOVLW  00
0A696:  ADDWFC x10,W
0A698:  MOVWF  03
0A69A:  MOVF   01,W
0A69C:  ADDLW  50
0A69E:  MOVWF  01
0A6A0:  MOVLW  00
0A6A2:  ADDWFC 03,F
0A6A4:  MOVF   01,W
0A6A6:  MOVWF  x0F
0A6A8:  MOVFF  03,A10
0A6AC:  MOVLW  04
0A6AE:  ADDWF  x0C,W
0A6B0:  MOVWF  FE9
0A6B2:  MOVLW  00
0A6B4:  ADDWFC x0D,W
0A6B6:  MOVWF  FEA
0A6B8:  MOVFF  FEF,00
0A6BC:  MOVFF  FEC,01
0A6C0:  MOVFF  FEC,02
0A6C4:  MOVFF  FEC,03
0A6C8:  MOVF   FED,F
0A6CA:  MOVF   FED,F
0A6CC:  MOVF   FED,F
0A6CE:  MOVFF  03,A14
0A6D2:  MOVFF  02,A13
0A6D6:  MOVFF  01,A12
0A6DA:  MOVFF  00,A11
0A6DE:  MOVFF  A10,FEA
0A6E2:  MOVFF  A0F,FE9
0A6E6:  MOVFF  A11,FEF
0A6EA:  MOVFF  A12,FEC
0A6EE:  MOVFF  A13,FEC
0A6F2:  MOVFF  A14,FEC
0A6F6:  MOVF   FED,F
0A6F8:  MOVF   FED,F
0A6FA:  MOVF   FED,F
....................       flash_queue.entries[flash_queue.tail_index].misf_size = data->misf_size;
0A6FC:  MOVLB  1
0A6FE:  MOVF   x11,W
0A700:  MULLW  0C
0A702:  MOVF   FF3,W
0A704:  MOVLB  A
0A706:  CLRF   x10
0A708:  MOVWF  x0F
0A70A:  MOVLW  08
0A70C:  ADDWF  x0F,W
0A70E:  MOVWF  01
0A710:  MOVLW  00
0A712:  ADDWFC x10,W
0A714:  MOVWF  03
0A716:  MOVF   01,W
0A718:  ADDLW  50
0A71A:  MOVWF  01
0A71C:  MOVLW  00
0A71E:  ADDWFC 03,F
0A720:  MOVF   01,W
0A722:  MOVWF  x0F
0A724:  MOVFF  03,A10
0A728:  MOVLW  08
0A72A:  ADDWF  x0C,W
0A72C:  MOVWF  FE9
0A72E:  MOVLW  00
0A730:  ADDWFC x0D,W
0A732:  MOVWF  FEA
0A734:  MOVFF  FEF,00
0A738:  MOVFF  FEC,01
0A73C:  MOVFF  FEC,02
0A740:  MOVFF  FEC,03
0A744:  MOVF   FED,F
0A746:  MOVF   FED,F
0A748:  MOVF   FED,F
0A74A:  MOVFF  03,A14
0A74E:  MOVFF  02,A13
0A752:  MOVFF  01,A12
0A756:  MOVFF  00,A11
0A75A:  MOVFF  A10,FEA
0A75E:  MOVFF  A0F,FE9
0A762:  MOVFF  A11,FEF
0A766:  MOVFF  A12,FEC
0A76A:  MOVFF  A13,FEC
0A76E:  MOVFF  A14,FEC
0A772:  MOVF   FED,F
0A774:  MOVF   FED,F
0A776:  MOVF   FED,F
....................       flash_queue.tail_index = next_tail;
0A778:  MOVFF  A0E,111
0A77C:  MOVLB  0
....................    }
0A77E:  RETURN 0
.................... 
.................... 
.................... }
.................... 
.................... 
.................... FlashOperationStruct *dequeue_flash_operation()
.................... {
....................    if (flash_queue.head_index == flash_queue.tail_index)
*
0E84E:  MOVLB  1
0E850:  MOVF   x11,W
0E852:  SUBWF  x10,W
0E854:  BTFSC  FD8.2
0E856:  BRA    E85E
0E858:  MOVLB  0
0E85A:  GOTO   E880
0E85E:  MOVLB  0
....................    {
....................       printf("Flash queue is empty\r\n");
0E860:  MOVLW  34
0E862:  MOVWF  FF6
0E864:  MOVLW  04
0E866:  MOVWF  FF7
0E868:  MOVLW  00
0E86A:  MOVWF  FF8
0E86C:  CALL   1FF0
....................       return 0x00;
0E870:  MOVLW  00
0E872:  MOVWF  01
0E874:  MOVLW  00
0E876:  MOVWF  02
0E878:  GOTO   E8AC
....................    }
0E87C:  GOTO   E8AC
....................    else
....................    {
....................       int8 current_head = flash_queue.head_index;
0E880:  MOVFF  110,1DE
....................       flash_queue.head_index = (flash_queue.head_index + 1) % SMF_QUEUE_SIZE;
0E884:  MOVLW  01
0E886:  MOVLB  1
0E888:  ADDWF  x10,W
0E88A:  ANDLW  0F
0E88C:  MOVWF  x10
.................... 
.................... 
....................       return &flash_queue.entries[current_head];
0E88E:  MOVF   xDE,W
0E890:  MULLW  0C
0E892:  MOVF   FF3,W
0E894:  CLRF   03
0E896:  ADDLW  50
0E898:  MOVWF  01
0E89A:  MOVLW  00
0E89C:  ADDWFC 03,F
0E89E:  MOVF   01,W
0E8A0:  MOVWF  01
0E8A2:  MOVF   03,W
0E8A4:  MOVWF  02
0E8A6:  MOVLB  0
0E8A8:  GOTO   E8AC
....................    }
0E8AC:  GOTO   114D6 (RETURN)
.................... }
.................... 
.................... int1 is_empty_flash_queue(void)
.................... {
....................    return flash_queue.head_index == flash_queue.tail_index;
*
0E772:  MOVLB  1
0E774:  MOVF   x11,W
0E776:  SUBWF  x10,W
0E778:  BTFSS  FD8.2
0E77A:  BRA    E782
0E77C:  MOVLB  0
0E77E:  GOTO   E78A
0E782:  MOVLB  0
0E784:  MOVLW  00
0E786:  GOTO   E78C
0E78A:  MOVLW  01
0E78C:  MOVWF  01
0E78E:  RETURN 0
.................... }
.................... 
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id)
.................... {
....................    SmfAddressStruct mis_struct = {0};
*
0F55C:  MOVLB  2
0F55E:  CLRF   x48
0F560:  CLRF   x49
0F562:  CLRF   x4A
0F564:  CLRF   x4B
0F566:  CLRF   x4C
0F568:  CLRF   x4D
0F56A:  CLRF   x4E
0F56C:  CLRF   x4F
.................... 
....................    if (mission_id == CIGS_DATA_TABLE)
0F56E:  MOVF   x47,F
0F570:  BTFSC  FD8.2
0F572:  BRA    F57A
0F574:  MOVLB  0
0F576:  GOTO   F59E
0F57A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_DATA_TABLE_START_ADDRESS;
0F57C:  MOVLW  06
0F57E:  MOVLB  2
0F580:  MOVWF  x4B
0F582:  MOVLW  AA
0F584:  MOVWF  x4A
0F586:  CLRF   x49
0F588:  CLRF   x48
....................       mis_struct.end_address   = CIGS_DATA_TABLE_END_ADDRESS;
0F58A:  MOVLW  06
0F58C:  MOVWF  x4F
0F58E:  MOVLW  AA
0F590:  MOVWF  x4E
0F592:  MOVLW  0F
0F594:  MOVWF  x4D
0F596:  SETF   x4C
0F598:  MOVLB  0
....................    }
0F59A:  GOTO   F6DA
....................    else if (mission_id == CIGS_PICLOG_DATA)
0F59E:  MOVLB  2
0F5A0:  DECFSZ x47,W
0F5A2:  BRA    F5A8
0F5A4:  BRA    F5AE
0F5A6:  MOVLB  0
0F5A8:  MOVLB  0
0F5AA:  GOTO   F5D4
0F5AE:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F5B0:  MOVLW  06
0F5B2:  MOVLB  2
0F5B4:  MOVWF  x4B
0F5B6:  MOVLW  AA
0F5B8:  MOVWF  x4A
0F5BA:  MOVLW  10
0F5BC:  MOVWF  x49
0F5BE:  CLRF   x48
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F5C0:  MOVLW  06
0F5C2:  MOVWF  x4F
0F5C4:  MOVLW  AB
0F5C6:  MOVWF  x4E
0F5C8:  MOVLW  0F
0F5CA:  MOVWF  x4D
0F5CC:  SETF   x4C
0F5CE:  MOVLB  0
....................    }
0F5D0:  GOTO   F6DA
....................    else if (mission_id == CIGS_ENVIRO_DATA)
0F5D4:  MOVLB  2
0F5D6:  MOVF   x47,W
0F5D8:  SUBLW  02
0F5DA:  BTFSC  FD8.2
0F5DC:  BRA    F5E4
0F5DE:  MOVLB  0
0F5E0:  GOTO   F60A
0F5E4:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_PICLOG_START_ADDRESS;
0F5E6:  MOVLW  06
0F5E8:  MOVLB  2
0F5EA:  MOVWF  x4B
0F5EC:  MOVLW  AA
0F5EE:  MOVWF  x4A
0F5F0:  MOVLW  10
0F5F2:  MOVWF  x49
0F5F4:  CLRF   x48
....................       mis_struct.end_address   = CIGS_PICLOG_END_ADDRESS;
0F5F6:  MOVLW  06
0F5F8:  MOVWF  x4F
0F5FA:  MOVLW  AB
0F5FC:  MOVWF  x4E
0F5FE:  MOVLW  0F
0F600:  MOVWF  x4D
0F602:  SETF   x4C
0F604:  MOVLB  0
....................    }
0F606:  GOTO   F6DA
....................    else if (mission_id == CIGS_IV1_HEADER)
0F60A:  MOVLB  2
0F60C:  MOVF   x47,W
0F60E:  SUBLW  03
0F610:  BTFSC  FD8.2
0F612:  BRA    F61A
0F614:  MOVLB  0
0F616:  GOTO   F640
0F61A:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_HEADER_START_ADDRESS;
0F61C:  MOVLW  06
0F61E:  MOVLB  2
0F620:  MOVWF  x4B
0F622:  MOVLW  B5
0F624:  MOVWF  x4A
0F626:  MOVLW  10
0F628:  MOVWF  x49
0F62A:  CLRF   x48
....................       mis_struct.end_address   = CIGS_IV1_HEADER_END_ADDRESS;
0F62C:  MOVLW  06
0F62E:  MOVWF  x4F
0F630:  MOVLW  BF
0F632:  MOVWF  x4E
0F634:  MOVLW  0F
0F636:  MOVWF  x4D
0F638:  SETF   x4C
0F63A:  MOVLB  0
....................    }
0F63C:  GOTO   F6DA
....................    else if (mission_id == CIGS_IV1_DATA)
0F640:  MOVLB  2
0F642:  MOVF   x47,W
0F644:  SUBLW  04
0F646:  BTFSC  FD8.2
0F648:  BRA    F650
0F64A:  MOVLB  0
0F64C:  GOTO   F674
0F650:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV1_DATA_START_ADDRESS;
0F652:  MOVLW  06
0F654:  MOVLB  2
0F656:  MOVWF  x4B
0F658:  MOVLW  BF
0F65A:  MOVWF  x4A
0F65C:  MOVLW  10
0F65E:  MOVWF  x49
0F660:  CLRF   x48
....................       mis_struct.end_address   = CIGS_IV1_DATA_END_ADDRESS;
0F662:  MOVLW  06
0F664:  MOVWF  x4F
0F666:  SETF   x4E
0F668:  MOVLW  0F
0F66A:  MOVWF  x4D
0F66C:  SETF   x4C
0F66E:  MOVLB  0
....................    }
0F670:  GOTO   F6DA
....................       else if (mission_id == CIGS_IV2_HEADER)
0F674:  MOVLB  2
0F676:  MOVF   x47,W
0F678:  SUBLW  05
0F67A:  BTFSC  FD8.2
0F67C:  BRA    F684
0F67E:  MOVLB  0
0F680:  GOTO   F6A8
0F684:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_HEADER_START_ADDRESS;
0F686:  MOVLW  06
0F688:  MOVLB  2
0F68A:  MOVWF  x4B
0F68C:  SETF   x4A
0F68E:  MOVLW  10
0F690:  MOVWF  x49
0F692:  CLRF   x48
....................       mis_struct.end_address   = CIGS_IV2_HEADER_END_ADDRESS;
0F694:  MOVLW  07
0F696:  MOVWF  x4F
0F698:  MOVLW  09
0F69A:  MOVWF  x4E
0F69C:  MOVLW  0F
0F69E:  MOVWF  x4D
0F6A0:  SETF   x4C
0F6A2:  MOVLB  0
....................    }
0F6A4:  GOTO   F6DA
....................    else if (mission_id == CIGS_IV2_DATA)
0F6A8:  MOVLB  2
0F6AA:  MOVF   x47,W
0F6AC:  SUBLW  06
0F6AE:  BTFSC  FD8.2
0F6B0:  BRA    F6B8
0F6B2:  MOVLB  0
0F6B4:  GOTO   F6DA
0F6B8:  MOVLB  0
....................    {
....................       mis_struct.start_address = CIGS_IV2_DATA_START_ADDRESS;
0F6BA:  MOVLW  07
0F6BC:  MOVLB  2
0F6BE:  MOVWF  x4B
0F6C0:  MOVLW  09
0F6C2:  MOVWF  x4A
0F6C4:  MOVLW  10
0F6C6:  MOVWF  x49
0F6C8:  CLRF   x48
....................       mis_struct.end_address   = CIGS_IV2_DATA_END_ADDRESS;
0F6CA:  MOVLW  07
0F6CC:  MOVWF  x4F
0F6CE:  MOVLW  49
0F6D0:  MOVWF  x4E
0F6D2:  MOVLW  0F
0F6D4:  MOVWF  x4D
0F6D6:  SETF   x4C
0F6D8:  MOVLB  0
....................    }
....................    return mis_struct;
0F6DA:  MOVLW  48
0F6DC:  MOVWF  01
0F6DE:  MOVLW  02
0F6E0:  MOVWF  02
0F6E2:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "../lib/communication/communication.c"
.................... // #include "communication.h"  // ヘッダーファイルから自動的にインクルードされるため不要
.................... #include "mission_tools.h"
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... Command make_receive_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = {0, 0, FALSE,{0x00}};
*
052EA:  MOVLB  1
052EC:  CLRF   xE0
052EE:  CLRF   xE1
052F0:  CLRF   xE2
052F2:  CLRF   xE3
052F4:  CLRF   xE4
052F6:  CLRF   xE5
052F8:  CLRF   xE6
052FA:  CLRF   xE7
052FC:  CLRF   xE8
052FE:  CLRF   xE9
05300:  CLRF   xEA
05302:  CLRF   xEB
....................    fprintf(PC, "\r\nStart make_receive_command\r\n");
05304:  MOVLW  4C
05306:  MOVWF  FF6
05308:  MOVLW  04
0530A:  MOVWF  FF7
0530C:  MOVLW  00
0530E:  MOVWF  FF8
05310:  MOVLB  0
05312:  CALL   1FF0
....................    fprintf(PC, "\t[BOSS] >>> ");
05316:  MOVLW  6C
05318:  MOVWF  FF6
0531A:  MOVLW  04
0531C:  MOVWF  FF7
0531E:  MOVLW  00
05320:  MOVWF  FF8
05322:  CALL   1FF0
....................    for (int8 i = 0; i < receive_signal_size; i++)
05326:  MOVLB  1
05328:  CLRF   xEC
0532A:  MOVLB  0
0532C:  MOVLB  1
0532E:  MOVF   xDF,W
05330:  SUBWF  xEC,W
05332:  BTFSS  FD8.0
05334:  BRA    533C
05336:  MOVLB  0
05338:  GOTO   5378
0533C:  MOVLB  0
....................       fprintf(PC, "%X ", receive_signal[i]);
0533E:  MOVLB  1
05340:  MOVF   xEC,W
05342:  ADDWF  xDD,W
05344:  MOVWF  FE9
05346:  MOVLW  00
05348:  ADDWFC xDE,W
0534A:  MOVWF  FEA
0534C:  MOVFF  FEF,1F3
05350:  MOVFF  1F3,A26
05354:  MOVLW  37
05356:  MOVLB  A
05358:  MOVWF  x27
0535A:  MOVLB  0
0535C:  CALL   2232
05360:  MOVLW  20
05362:  BTFSS  FA6.6
05364:  GOTO   5362
05368:  MOVLB  E
0536A:  MOVWF  xF9
0536C:  MOVLB  0
0536E:  MOVLB  1
05370:  INCF   xEC,F
05372:  MOVLB  0
05374:  GOTO   532C
....................    fprintf(PC, "\r\n");
05378:  MOVLW  0D
0537A:  BTFSS  FA6.6
0537C:  GOTO   537A
05380:  MOVLB  E
05382:  MOVWF  xF9
05384:  MOVLW  0A
05386:  MOVLB  0
05388:  BTFSS  FA6.6
0538A:  GOTO   5388
0538E:  MOVLB  E
05390:  MOVWF  xF9
.................... 
....................    int8 frame_start_position = trim_receive_signal_header(receive_signal, receive_signal_size);
05392:  MOVFF  1DE,1F4
05396:  MOVFF  1DD,1F3
0539A:  MOVFF  1DF,1F5
0539E:  MOVLB  0
053A0:  GOTO   4FD2
053A4:  MOVFF  01,1ED
....................    if (frame_start_position == -1)
053A8:  MOVLB  1
053AA:  MOVF   xED,W
053AC:  SUBLW  FF
053AE:  BTFSC  FD8.2
053B0:  BRA    53B8
053B2:  MOVLB  0
053B4:  GOTO   53C6
053B8:  MOVLB  0
....................       return command;
053BA:  MOVLW  E0
053BC:  MOVWF  01
053BE:  MOVLW  01
053C0:  MOVWF  02
053C2:  GOTO   54E8
....................       
....................    unsigned int8 *frame = &receive_signal[frame_start_position];
....................    
....................    int8 frame_id = frame[0] & 0x0F;
....................    int8 content_size = get_content_size(frame_id);
053C6:  MOVLB  1
053C8:  MOVF   xED,W
053CA:  ADDWF  xDD,W
053CC:  MOVWF  01
053CE:  MOVLW  00
053D0:  ADDWFC xDE,W
053D2:  MOVWF  03
053D4:  MOVF   01,W
053D6:  MOVWF  xEE
053D8:  MOVFF  03,1EF
053DC:  MOVF   xEE,W
053DE:  MOVWF  FE9
053E0:  MOVF   xEF,W
053E2:  MOVWF  FEA
053E4:  MOVF   FEF,W
053E6:  ANDLW  0F
053E8:  MOVWF  xF0
053EA:  MOVFF  1F0,1F3
053EE:  MOVLB  0
053F0:  GOTO   507A
053F4:  MOVFF  01,1F1
....................    if (content_size == -1)
053F8:  MOVLB  1
053FA:  MOVF   xF1,W
053FC:  SUBLW  FF
053FE:  BTFSC  FD8.2
05400:  BRA    5408
05402:  MOVLB  0
05404:  GOTO   5416
05408:  MOVLB  0
....................       return command;
0540A:  MOVLW  E0
0540C:  MOVWF  01
0540E:  MOVLW  01
05410:  MOVWF  02
05412:  GOTO   54E8
....................       
....................    unsigned int8 receive_frame_size = receive_signal_size - frame_start_position;
05416:  MOVLB  1
05418:  MOVF   xED,W
0541A:  SUBWF  xDF,W
0541C:  MOVWF  xF2
....................    
....................    if (!check_crc(frame, receive_frame_size))
0541E:  MOVFF  1EF,1F4
05422:  MOVFF  1EE,1F3
05426:  MOVFF  1F2,1F5
0542A:  MOVLB  0
0542C:  GOTO   513A
05430:  MOVF   01,F
05432:  BTFSS  FD8.2
05434:  GOTO   5444
....................       return command;
05438:  MOVLW  E0
0543A:  MOVWF  01
0543C:  MOVLW  01
0543E:  MOVWF  02
05440:  GOTO   54E8
....................    
....................    if(!check_device_id((frame[0] & 0xF0) >> 4))
05444:  MOVLB  1
05446:  MOVF   xEE,W
05448:  MOVWF  FE9
0544A:  MOVF   xEF,W
0544C:  MOVWF  FEA
0544E:  MOVF   FEF,W
05450:  ANDLW  F0
05452:  MOVWF  00
05454:  SWAPF  00,W
05456:  MOVWF  xF3
05458:  MOVLW  0F
0545A:  ANDWF  xF3,F
0545C:  MOVFF  1F3,1F4
05460:  MOVLB  0
05462:  GOTO   522A
05466:  MOVF   01,F
05468:  BTFSS  FD8.2
0546A:  GOTO   547A
....................       return command;
0546E:  MOVLW  E0
05470:  MOVWF  01
05472:  MOVLW  01
05474:  MOVWF  02
05476:  GOTO   54E8
.................... 
....................    command.frame_id = frame_id;
0547A:  MOVFF  1F0,1E0
....................    memcpy(command.content, &frame[1], receive_frame_size-2); // '2' is for Decive ID, Frame ID and CRC
0547E:  MOVLW  01
05480:  MOVLB  1
05482:  ADDWF  xEE,W
05484:  MOVWF  01
05486:  MOVLW  00
05488:  ADDWFC xEF,W
0548A:  MOVWF  03
0548C:  MOVF   01,W
0548E:  MOVWF  xF3
05490:  MOVFF  03,1F4
05494:  MOVLW  02
05496:  SUBWF  xF2,W
05498:  MOVWF  xF5
0549A:  MOVLW  01
0549C:  MOVWF  FEA
0549E:  MOVLW  E3
054A0:  MOVWF  FE9
054A2:  MOVFF  1F4,FE2
054A6:  MOVFF  1F3,FE1
054AA:  MOVF   xF5,W
054AC:  MOVWF  01
054AE:  BTFSS  FD8.2
054B0:  BRA    54B8
054B2:  MOVLB  0
054B4:  GOTO   54C4
054B8:  MOVLB  0
054BA:  MOVFF  FE6,FEE
054BE:  DECFSZ 01,F
054C0:  GOTO   54BA
....................    command.size = receive_frame_size-2;
054C4:  MOVLW  02
054C6:  MOVLB  1
054C8:  SUBWF  xF2,W
054CA:  MOVWF  xE1
....................    command.is_exist = TRUE;
054CC:  BSF    xE2.0
....................    //fprintf(PC, "\t-> Frame ID: %X\r\n", command.frame_id);
....................    //fprintf(PC, "\t-> Content size: %d\r\n", command.size);
....................    //fprintf(PC, "\t-> is_exist: %d\r\n", command.is_exist);
....................    fprintf(PC, "End make_recive_command\r\n\r\n");
054CE:  MOVLW  7A
054D0:  MOVWF  FF6
054D2:  MOVLW  04
054D4:  MOVWF  FF7
054D6:  MOVLW  00
054D8:  MOVWF  FF8
054DA:  MOVLB  0
054DC:  CALL   1FF0
....................    return command;
054E0:  MOVLW  E0
054E2:  MOVWF  01
054E4:  MOVLW  01
054E6:  MOVWF  02
054E8:  GOTO   11ED4 (RETURN)
.................... }
.................... 
.................... static int8 trim_receive_signal_header(unsigned int8 receive_signal[], int8 receive_signal_size)
*
04FD2:  MOVLB  1
04FD4:  CLRF   xF6
.................... {
....................    int8 i = 0;
....................    for(i = 0; i < receive_signal_size-1; i++) // if SFD find 
04FD6:  CLRF   xF6
04FD8:  MOVLB  0
04FDA:  MOVLW  01
04FDC:  MOVLB  1
04FDE:  SUBWF  xF5,W
04FE0:  SUBWF  xF6,W
04FE2:  BTFSS  FD8.0
04FE4:  BRA    4FEC
04FE6:  MOVLB  0
04FE8:  GOTO   5024
04FEC:  MOVLB  0
....................       if(receive_signal[i] == SFD)
04FEE:  MOVLB  1
04FF0:  MOVF   xF6,W
04FF2:  ADDWF  xF3,W
04FF4:  MOVWF  FE9
04FF6:  MOVLW  00
04FF8:  ADDWFC xF4,W
04FFA:  MOVWF  FEA
04FFC:  MOVF   FEF,W
04FFE:  SUBLW  AA
05000:  BTFSC  FD8.2
05002:  BRA    500A
05004:  MOVLB  0
05006:  GOTO   501A
0500A:  MOVLB  0
....................          return i+1;
0500C:  MOVLW  01
0500E:  MOVLB  1
05010:  ADDWF  xF6,W
05012:  MOVWF  01
05014:  MOVLB  0
05016:  GOTO   5076
0501A:  MOVLB  1
0501C:  INCF   xF6,F
0501E:  MOVLB  0
05020:  GOTO   4FDA
....................    if (receive_signal[i] == SFD)
05024:  MOVLB  1
05026:  MOVF   xF6,W
05028:  ADDWF  xF3,W
0502A:  MOVWF  FE9
0502C:  MOVLW  00
0502E:  ADDWFC xF4,W
05030:  MOVWF  FEA
05032:  MOVF   FEF,W
05034:  SUBLW  AA
05036:  BTFSC  FD8.2
05038:  BRA    5040
0503A:  MOVLB  0
0503C:  GOTO   505E
05040:  MOVLB  0
....................    {
....................       fprintf(PC, "signal end with SFD\r\n");
05042:  MOVLW  96
05044:  MOVWF  FF6
05046:  MOVLW  04
05048:  MOVWF  FF7
0504A:  MOVLW  00
0504C:  MOVWF  FF8
0504E:  CALL   1FF0
....................       return -1;
05052:  MOVLW  FF
05054:  MOVWF  01
05056:  GOTO   5076
....................    }
0505A:  GOTO   5076
....................    else
....................    {
....................       fprintf(PC, "don't find SFD\r\n");
0505E:  MOVLW  AC
05060:  MOVWF  FF6
05062:  MOVLW  04
05064:  MOVWF  FF7
05066:  MOVLW  00
05068:  MOVWF  FF8
0506A:  CALL   1FF0
....................       return -1;
0506E:  MOVLW  FF
05070:  MOVWF  01
05072:  GOTO   5076
....................    }
05076:  GOTO   53A4 (RETURN)
....................    
.................... }
.................... 
.................... static int8 get_content_size(unsigned int8 frame_id)
.................... {
....................    for (int i = 0; i < (sizeof(frame_ids) / sizeof(frame_ids[0])); i++)
0507A:  MOVLB  1
0507C:  CLRF   xF4
0507E:  MOVLB  0
05080:  MOVLB  1
05082:  MOVF   xF4,W
05084:  SUBLW  03
05086:  BTFSC  FD8.0
05088:  BRA    5090
0508A:  MOVLB  0
0508C:  GOTO   50EE
05090:  MOVLB  0
....................       if (frame_id == frame_ids[i].id)
05092:  BCF    FD8.0
05094:  MOVLB  1
05096:  RLCF   xF4,W
05098:  CLRF   xF6
0509A:  MOVWF  xF5
0509C:  MOVLW  1A
0509E:  ADDWF  xF5,W
050A0:  MOVWF  FE9
050A2:  MOVLW  01
050A4:  ADDWFC xF6,W
050A6:  MOVWF  FEA
050A8:  MOVF   FEF,W
050AA:  SUBWF  xF3,W
050AC:  BTFSC  FD8.2
050AE:  BRA    50B6
050B0:  MOVLB  0
050B2:  GOTO   50E4
050B6:  MOVLB  0
....................          return frame_ids[i].length;
050B8:  BCF    FD8.0
050BA:  MOVLB  1
050BC:  RLCF   xF4,W
050BE:  CLRF   xF6
050C0:  MOVWF  xF5
050C2:  MOVLW  01
050C4:  ADDWF  xF5,W
050C6:  MOVWF  01
050C8:  MOVLW  00
050CA:  ADDWFC xF6,W
050CC:  MOVWF  03
050CE:  MOVF   01,W
050D0:  ADDLW  1A
050D2:  MOVWF  FE9
050D4:  MOVLW  01
050D6:  ADDWFC 03,W
050D8:  MOVWF  FEA
050DA:  MOVF   FEF,W
050DC:  MOVWF  01
050DE:  MOVLB  0
050E0:  GOTO   5134
050E4:  MOVLB  1
050E6:  INCF   xF4,F
050E8:  MOVLB  0
050EA:  GOTO   5080
....................          
....................    fprintf(PC, "\t-> Invalid Frame ID received: %X\r\n", frame_id);
050EE:  MOVLW  BE
050F0:  MOVWF  FF6
050F2:  MOVLW  04
050F4:  MOVWF  FF7
050F6:  MOVLW  00
050F8:  MOVWF  FF8
050FA:  MOVLW  1F
050FC:  MOVLB  A
050FE:  MOVWF  x0C
05100:  MOVLB  0
05102:  CALL   2026
05106:  MOVFF  1F3,A26
0510A:  MOVLW  37
0510C:  MOVLB  A
0510E:  MOVWF  x27
05110:  MOVLB  0
05112:  CALL   2232
05116:  MOVLW  0D
05118:  BTFSS  FA6.6
0511A:  GOTO   5118
0511E:  MOVLB  E
05120:  MOVWF  xF9
05122:  MOVLW  0A
05124:  MOVLB  0
05126:  BTFSS  FA6.6
05128:  GOTO   5126
0512C:  MOVLB  E
0512E:  MOVWF  xF9
....................    return -1;
05130:  MOVLW  FF
05132:  MOVWF  01
05134:  MOVLB  0
05136:  GOTO   53F4 (RETURN)
.................... }
.................... 
.................... static int1 check_crc(unsigned int8 frame[], int8 receive_frame_size)
0513A:  MOVLW  01
0513C:  MOVLB  1
0513E:  SUBWF  xF5,W
05140:  ADDWF  xF3,W
05142:  MOVWF  FE9
05144:  MOVLW  00
05146:  ADDWFC xF4,W
05148:  MOVWF  FEA
0514A:  MOVFF  FEF,1F6
0514E:  MOVLW  01
05150:  SUBWF  xF5,W
05152:  MOVWF  xF8
05154:  MOVFF  1F4,B35
05158:  MOVFF  1F3,B34
0515C:  MOVFF  1F8,B36
05160:  MOVLB  0
05162:  CALL   2DF2
05166:  MOVFF  01,1F7
.................... {
....................    unsigned int8 received_crc = frame[receive_frame_size-1]; // '1' is for crc
....................    unsigned int8 collect_crc = calc_crc8(frame, receive_frame_size-1);
....................    if (received_crc == collect_crc)
0516A:  MOVLB  1
0516C:  MOVF   xF7,W
0516E:  SUBWF  xF6,W
05170:  BTFSC  FD8.2
05172:  BRA    517A
05174:  MOVLB  0
05176:  GOTO   5188
0517A:  MOVLB  0
....................       return TRUE;
0517C:  MOVLW  01
0517E:  MOVWF  01
05180:  GOTO   5226
05184:  GOTO   5226
....................    else
....................    {
....................       fprintf(PC, "\t-> CRC error!\r\n");
05188:  MOVLW  E2
0518A:  MOVWF  FF6
0518C:  MOVLW  04
0518E:  MOVWF  FF7
05190:  MOVLW  00
05192:  MOVWF  FF8
05194:  CALL   1FF0
....................       fprintf(PC, "\t\t-> received CRC: %X\r\n", received_crc);
05198:  MOVLW  F4
0519A:  MOVWF  FF6
0519C:  MOVLW  04
0519E:  MOVWF  FF7
051A0:  MOVLW  00
051A2:  MOVWF  FF8
051A4:  MOVLW  13
051A6:  MOVLB  A
051A8:  MOVWF  x0C
051AA:  MOVLB  0
051AC:  CALL   2026
051B0:  MOVFF  1F6,A26
051B4:  MOVLW  37
051B6:  MOVLB  A
051B8:  MOVWF  x27
051BA:  MOVLB  0
051BC:  CALL   2232
051C0:  MOVLW  0D
051C2:  BTFSS  FA6.6
051C4:  GOTO   51C2
051C8:  MOVLB  E
051CA:  MOVWF  xF9
051CC:  MOVLW  0A
051CE:  MOVLB  0
051D0:  BTFSS  FA6.6
051D2:  GOTO   51D0
051D6:  MOVLB  E
051D8:  MOVWF  xF9
....................       fprintf(PC, "\t\t   collect CRC : %X\r\n", collect_crc);
051DA:  MOVLW  0C
051DC:  MOVWF  FF6
051DE:  MOVLW  05
051E0:  MOVWF  FF7
051E2:  MOVLW  00
051E4:  MOVWF  FF8
051E6:  MOVLW  13
051E8:  MOVLB  A
051EA:  MOVWF  x0C
051EC:  MOVLB  0
051EE:  CALL   2026
051F2:  MOVFF  1F7,A26
051F6:  MOVLW  37
051F8:  MOVLB  A
051FA:  MOVWF  x27
051FC:  MOVLB  0
051FE:  CALL   2232
05202:  MOVLW  0D
05204:  BTFSS  FA6.6
05206:  GOTO   5204
0520A:  MOVLB  E
0520C:  MOVWF  xF9
0520E:  MOVLW  0A
05210:  MOVLB  0
05212:  BTFSS  FA6.6
05214:  GOTO   5212
05218:  MOVLB  E
0521A:  MOVWF  xF9
....................       return FALSE;
0521C:  MOVLW  00
0521E:  MOVWF  01
05220:  MOVLB  0
05222:  GOTO   5226
....................    }
05226:  GOTO   5430 (RETURN)
.................... }
.................... 
.................... static int1 check_device_id(unsigned int8 device_id)
.................... {
....................    if (SELF_DEVICE_ID == device_id)
0522A:  MOVLB  1
0522C:  MOVF   xF4,W
0522E:  SUBLW  0A
05230:  BTFSC  FD8.2
05232:  BRA    523A
05234:  MOVLB  0
05236:  GOTO   5248
0523A:  MOVLB  0
....................       return TRUE;
0523C:  MOVLW  01
0523E:  MOVWF  01
05240:  GOTO   52E6
05244:  GOTO   52E6
....................    else
....................    {
....................       fprintf(PC, "\t-> Invalid device ID received\r\n");
05248:  MOVLW  24
0524A:  MOVWF  FF6
0524C:  MOVLW  05
0524E:  MOVWF  FF7
05250:  MOVLW  00
05252:  MOVWF  FF8
05254:  CALL   1FF0
....................       fprintf(PC, "\t\t-> received:     %X\r\n", device_id);
05258:  MOVLW  46
0525A:  MOVWF  FF6
0525C:  MOVLW  05
0525E:  MOVWF  FF7
05260:  MOVLW  00
05262:  MOVWF  FF8
05264:  MOVLW  13
05266:  MOVLB  A
05268:  MOVWF  x0C
0526A:  MOVLB  0
0526C:  CALL   2026
05270:  MOVFF  1F4,A26
05274:  MOVLW  37
05276:  MOVLB  A
05278:  MOVWF  x27
0527A:  MOVLB  0
0527C:  CALL   2232
05280:  MOVLW  0D
05282:  BTFSS  FA6.6
05284:  GOTO   5282
05288:  MOVLB  E
0528A:  MOVWF  xF9
0528C:  MOVLW  0A
0528E:  MOVLB  0
05290:  BTFSS  FA6.6
05292:  GOTO   5290
05296:  MOVLB  E
05298:  MOVWF  xF9
....................       fprintf(PC, "\t\t   My device ID: %X\r\n", SELF_DEVICE_ID);
0529A:  MOVLW  5E
0529C:  MOVWF  FF6
0529E:  MOVLW  05
052A0:  MOVWF  FF7
052A2:  MOVLW  00
052A4:  MOVWF  FF8
052A6:  MOVLW  13
052A8:  MOVLB  A
052AA:  MOVWF  x0C
052AC:  MOVLB  0
052AE:  CALL   2026
052B2:  MOVLW  0A
052B4:  MOVLB  A
052B6:  MOVWF  x26
052B8:  MOVLW  37
052BA:  MOVWF  x27
052BC:  MOVLB  0
052BE:  CALL   2232
052C2:  MOVLW  0D
052C4:  BTFSS  FA6.6
052C6:  GOTO   52C4
052CA:  MOVLB  E
052CC:  MOVWF  xF9
052CE:  MOVLW  0A
052D0:  MOVLB  0
052D2:  BTFSS  FA6.6
052D4:  GOTO   52D2
052D8:  MOVLB  E
052DA:  MOVWF  xF9
....................       return FALSE;  
052DC:  MOVLW  00
052DE:  MOVWF  01
052E0:  MOVLB  0
052E2:  GOTO   52E6
....................    }
052E6:  GOTO   5466 (RETURN)
.................... }
.................... 
.................... 
.................... // _______ Transmit _______
.................... 
.................... void transmit_command(TransmitFrameId frame_id, unsigned int8 content[], int8 size)
.................... {
....................    unsigned int8 data[16];
....................    data[0] = SFD;
*
055F6:  MOVLW  AA
055F8:  MOVLB  2
055FA:  MOVWF  x21
....................    data[1] = (BOSS_PIC << 4) | frame_id;
055FC:  MOVF   x1D,W
055FE:  IORLW  50
05600:  MOVWF  x22
....................    memcpy(&data[2], content, size);
05602:  MOVLW  02
05604:  MOVWF  FEA
05606:  MOVLW  23
05608:  MOVWF  FE9
0560A:  MOVFF  21F,FE2
0560E:  MOVFF  21E,FE1
05612:  MOVF   x20,W
05614:  MOVWF  01
05616:  BTFSS  FD8.2
05618:  BRA    5620
0561A:  MOVLB  0
0561C:  GOTO   562C
05620:  MOVLB  0
05622:  MOVFF  FE6,FEE
05626:  DECFSZ 01,F
05628:  GOTO   5622
....................    int8 payload_size = 2 + size; // '2' is for Device ID and Frame ID plus CRC
0562C:  MOVLW  02
0562E:  MOVLB  2
05630:  ADDWF  x20,W
05632:  MOVWF  x31
....................    data[payload_size] = calc_crc8(&data[1], payload_size-1); // '1' is for CRC
05634:  CLRF   03
05636:  MOVF   x31,W
05638:  ADDLW  21
0563A:  MOVWF  01
0563C:  MOVLW  02
0563E:  ADDWFC 03,F
05640:  MOVF   01,W
05642:  MOVWF  x33
05644:  MOVFF  03,234
05648:  MOVLW  01
0564A:  SUBWF  x31,W
0564C:  MOVWF  x35
0564E:  MOVLW  02
05650:  MOVLB  B
05652:  MOVWF  x35
05654:  MOVLW  22
05656:  MOVWF  x34
05658:  MOVFF  235,B36
0565C:  MOVLB  0
0565E:  CALL   2DF2
05662:  MOVFF  234,FEA
05666:  MOVFF  233,FE9
0566A:  MOVFF  01,FEF
....................    int8 data_size = payload_size + 1; // '1' is for CRC
0566E:  MOVLW  01
05670:  MOVLB  2
05672:  ADDWF  x31,W
05674:  MOVWF  x32
....................    
....................    transmit(data, data_size);
05676:  MOVLW  02
05678:  MOVWF  x34
0567A:  MOVLW  21
0567C:  MOVWF  x33
0567E:  MOVFF  232,235
05682:  MOVLB  0
05684:  GOTO   5538
05688:  RETURN 0
.................... }
.................... 
.................... static void transmit(unsigned int8 data[], int8 data_size)
.................... {
....................    for(int i = 0; i < data_size; i++)
*
05538:  MOVLB  2
0553A:  CLRF   x36
0553C:  MOVLB  0
0553E:  MOVLB  2
05540:  MOVF   x35,W
05542:  SUBWF  x36,W
05544:  BTFSS  FD8.0
05546:  BRA    554E
05548:  MOVLB  0
0554A:  GOTO   5574
0554E:  MOVLB  0
....................       fputc(data[i], BOSS);
05550:  MOVLB  2
05552:  MOVF   x36,W
05554:  ADDWF  x33,W
05556:  MOVWF  FE9
05558:  MOVLW  00
0555A:  ADDWFC x34,W
0555C:  MOVWF  FEA
0555E:  MOVFF  FEF,238
05562:  MOVF   x38,W
05564:  MOVLB  0
05566:  GOTO   5528
0556A:  MOVLB  2
0556C:  INCF   x36,F
0556E:  MOVLB  0
05570:  GOTO   553E
....................       
....................    fprintf(PC, "\t[BOSS] <<< ");
05574:  MOVLW  76
05576:  MOVWF  FF6
05578:  MOVLW  05
0557A:  MOVWF  FF7
0557C:  MOVLW  00
0557E:  MOVWF  FF8
05580:  CALL   1FF0
....................    for(int i = 0; i < data_size; i++)
05584:  MOVLB  2
05586:  CLRF   x37
05588:  MOVLB  0
0558A:  MOVLB  2
0558C:  MOVF   x35,W
0558E:  SUBWF  x37,W
05590:  BTFSS  FD8.0
05592:  BRA    559A
05594:  MOVLB  0
05596:  GOTO   55D6
0559A:  MOVLB  0
....................       fprintf(PC, "%X ", data[i]);
0559C:  MOVLB  2
0559E:  MOVF   x37,W
055A0:  ADDWF  x33,W
055A2:  MOVWF  FE9
055A4:  MOVLW  00
055A6:  ADDWFC x34,W
055A8:  MOVWF  FEA
055AA:  MOVFF  FEF,238
055AE:  MOVFF  238,A26
055B2:  MOVLW  37
055B4:  MOVLB  A
055B6:  MOVWF  x27
055B8:  MOVLB  0
055BA:  CALL   2232
055BE:  MOVLW  20
055C0:  BTFSS  FA6.6
055C2:  GOTO   55C0
055C6:  MOVLB  E
055C8:  MOVWF  xF9
055CA:  MOVLB  0
055CC:  MOVLB  2
055CE:  INCF   x37,F
055D0:  MOVLB  0
055D2:  GOTO   558A
....................    fprintf(PC, "\r\n");
055D6:  MOVLW  0D
055D8:  BTFSS  FA6.6
055DA:  GOTO   55D8
055DE:  MOVLB  E
055E0:  MOVWF  xF9
055E2:  MOVLW  0A
055E4:  MOVLB  0
055E6:  BTFSS  FA6.6
055E8:  GOTO   55E6
055EC:  MOVLB  E
055EE:  MOVWF  xF9
055F0:  MOVLB  0
055F2:  GOTO   5688 (RETURN)
.................... }
.................... 
.................... #include "../lib/communication/communication_driver.c"
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size)
.................... {
....................    Command command = make_receive_command(receive_signal, receive_signal_size);
....................    return command;
.................... }
.................... 
.................... void transmit_ack()
.................... {
....................    transmit_command(ACK, 0, 0);
*
0568A:  MOVLW  0F
0568C:  MOVLB  2
0568E:  MOVWF  x1D
05690:  CLRF   x1F
05692:  CLRF   x1E
05694:  CLRF   x20
05696:  MOVLB  0
05698:  CALL   55F6
0569C:  RETURN 0
.................... }
.................... 
.................... void transmit_status()
.................... {
....................    transmit_command(MIS_MCU_STATUS, &status, 4);
*
0A4AE:  MOVLW  03
0A4B0:  MOVLB  2
0A4B2:  MOVWF  x1D
0A4B4:  CLRF   x1F
0A4B6:  MOVLW  4C
0A4B8:  MOVWF  x1E
0A4BA:  MOVLW  04
0A4BC:  MOVWF  x20
0A4BE:  MOVLB  0
0A4C0:  CALL   55F6
0A4C4:  RETURN 0
.................... }
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.c"
.................... int1 req_use_smf()
.................... {
....................    fprintf(PC, "Start SMF using reqest seaquence\r\n");
....................    status[0] = SMF_USE_REQ;
....................    is_use_smf_req_in_mission = TRUE;
....................    
....................    while (TRUE)
....................    {
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == STATUS_CHECK)
....................             {
....................                transmit_status();
....................                break;
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................       
....................       for (int16 i = 0; i < 1200; i++) // 10 min
....................       {
....................          if (boss_receive_buffer_size > 0)
....................          {
....................             Command command = make_receive_command(boss_receive_buffer, boss_receive_buffer_size); 
....................             clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
....................             if (command.frame_id == IS_SMF_AVAILABLE)
....................             {
....................                if (command.content[0] == ALLOW)
....................                {
....................                   fprintf(PC, "SMF use request allowed\r\n");
....................                   transmit_ack();
....................                   goto NEXT;
....................                }
....................                else
....................                {
....................                   fprintf(PC, "SMF use request denyed\r\n");
....................                   fprintf(PC, "Retry request to BOSS PIC\r\n");
....................                   transmit_ack();
....................                   break;
....................                }
....................             }
....................             else
....................             {
....................                fprintf(PC, "Error! Receiving command inconsistent with the design\r\n");
....................             }
....................          }
....................          delay_ms(500);
....................       }
....................    }
....................    
.................... NEXT:
....................    is_use_smf_req_in_mission = FALSE;
....................    status[0] = COPYING;
....................    return TRUE;
....................    fprintf(PC, "End SMF using reqest seaquence\r\n");
.................... }
.................... 
.................... 
.................... void finished_use_smf()
.................... {
....................    status[0] = EXECUTING_MISSION;
.................... }
.................... 
.................... void check_and_respond_to_boss()
.................... {
....................    if (boss_receive_buffer_size > 0)
0A4C6:  MOVF   4A,F
0A4C8:  BTFSC  FD8.2
0A4CA:  GOTO   A502
....................    {
....................       clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
0A4CE:  MOVLB  2
0A4D0:  CLRF   x1E
0A4D2:  MOVLW  2A
0A4D4:  MOVWF  x1D
0A4D6:  CLRF   x20
0A4D8:  MOVLW  4A
0A4DA:  MOVWF  x1F
0A4DC:  MOVLB  0
0A4DE:  CALL   54EC
....................       fprintf(PC, "\r\n");
0A4E2:  MOVLW  0D
0A4E4:  BTFSS  FA6.6
0A4E6:  GOTO   A4E4
0A4EA:  MOVLB  E
0A4EC:  MOVWF  xF9
0A4EE:  MOVLW  0A
0A4F0:  MOVLB  0
0A4F2:  BTFSS  FA6.6
0A4F4:  GOTO   A4F2
0A4F8:  MOVLB  E
0A4FA:  MOVWF  xF9
....................       transmit_status();
0A4FC:  MOVLB  0
0A4FE:  CALL   A4AE
....................    }
0A502:  GOTO   A86E (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... // コア機能実装ファイル
.................... #include "domain/sato_iv.c"
.................... #include "sato_iv.h"      
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/sato_config.h"      
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... // ADC Settings
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS1_VOLT  
.................... #define ADC_DIODE_INNER_CURR    ADC_CIGS1_CURR 
.................... #define ADC_DIODE_INNER_AMP    ADC_CIGS1_AMP   
.................... #define ADC_DIODE_INNER_VREF   ADC_CIGS1_VREF  
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS2_VOLT  
.................... #define ADC_DIODE_OUTER_CURR   ADC_CIGS2_CURR  
.................... #define ADC_DIODE_OUTER_AMP    ADC_CIGS2_AMP   
.................... #define ADC_DIODE_OUTER_VREF   ADC_CIGS2_VREF  
.................... #define ADC_DIODE_INNER_DAC    ADC_CIGS1_DAC   
.................... #define ADC_DIODE_OUTER_DAC    ADC_CIGS2_DAC   
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../../cigs/device_driver/ad7490_driver.h"  
.................... #ifndef AD7490_DRIVER_H
.................... #define AD7490_DRIVER_H
.................... 
.................... 
.................... // AD7490 Functions
.................... void ad7490_init(void);
.................... unsigned int16 ad7490_read(int8 channel);
.................... 
.................... 
.................... #endif // MMJ_CIGS_DEVCE_H
.................... //------------------End of File------------------
.................... 
.................... #include "../../cigs/device_driver/mcp4901_driver.h"
.................... #ifndef MCP4901_DRIVER_H
.................... #define MCP4901_DRIVER_H
.................... 
.................... // MCP4901 Functions
.................... void mcp4901_init();
.................... void mcp4901_1_write(unsigned int16 val);
.................... void mcp4901_2_write(unsigned int16 val);
.................... 
.................... #endif // MCP4901_DRIVER_H
.................... //------------------End of File------------------
.................... 
.................... #include "sato_flash.h"               
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/mission_tools.h"   
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../../cigs/hal/timer.h"
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/device/mt25q.h"
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void sweep_with_print()
*
0C6B2:  MOVLW  03
0C6B4:  MOVLB  1
0C6B6:  MOVWF  xEE
0C6B8:  CLRF   xED
0C6BA:  MOVLW  05
0C6BC:  MOVWF  xF0
0C6BE:  CLRF   xEF
.................... {
....................     
....................     unsigned int16 curr_threshold = 0x300;
....................     unsigned int16 curr_limit = 0x500;
.................... 
....................     // Enable both CIGS ports
....................     connect_port1();
0C6C0:  MOVLB  0
0C6C2:  CALL   4F9E
....................     connect_port2();
0C6C6:  CALL   4FA6
....................     mcp4901_1_write(0); 
0C6CA:  MOVLB  A
0C6CC:  CLRF   x1B
0C6CE:  CLRF   x1A
0C6D0:  MOVLB  0
0C6D2:  CALL   2562
....................     mcp4901_2_write(0);
0C6D6:  MOVLB  A
0C6D8:  CLRF   x1B
0C6DA:  CLRF   x1A
0C6DC:  MOVLB  0
0C6DE:  CALL   25A0
....................     delay_ms(100);
0C6E2:  MOVLW  64
0C6E4:  MOVLB  B
0C6E6:  MOVWF  x4C
0C6E8:  MOVLB  0
0C6EA:  CALL   1FC2
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0C6EE:  MOVLB  1
0C6F0:  CLRF   xF1
0C6F2:  CLRF   xF2
0C6F4:  CLRF   xF3
0C6F6:  CLRF   xF4
0C6F8:  CLRF   xF5
0C6FA:  CLRF   xF6
0C6FC:  CLRF   xF7
0C6FE:  CLRF   xF8
0C700:  CLRF   xF9
0C702:  CLRF   xFA
0C704:  CLRF   xFB
0C706:  CLRF   xFC
0C708:  CLRF   xFD
0C70A:  CLRF   xFE
0C70C:  CLRF   xFF
0C70E:  MOVLB  2
0C710:  CLRF   x00
0C712:  CLRF   x01
0C714:  CLRF   x02
0C716:  CLRF   x03
0C718:  CLRF   x04
0C71A:  CLRF   x05
0C71C:  CLRF   x06
0C71E:  CLRF   x07
0C720:  CLRF   x08
0C722:  CLRF   x09
0C724:  CLRF   x0A
0C726:  CLRF   x0B
0C728:  CLRF   x0C
0C72A:  CLRF   x0D
0C72C:  CLRF   x0E
0C72E:  CLRF   x0F
0C730:  CLRF   x10
0C732:  CLRF   x11
0C734:  CLRF   x12
0C736:  CLRF   x13
0C738:  CLRF   x14
0C73A:  CLRF   x15
0C73C:  CLRF   x16
0C73E:  CLRF   x17
0C740:  CLRF   x18
0C742:  CLRF   x19
0C744:  CLRF   x1A
0C746:  CLRF   x1B
0C748:  CLRF   x1C
0C74A:  CLRF   x1D
0C74C:  CLRF   x1E
0C74E:  CLRF   x1F
0C750:  CLRF   x20
0C752:  CLRF   x21
0C754:  CLRF   x22
0C756:  CLRF   x23
0C758:  CLRF   x24
0C75A:  CLRF   x25
0C75C:  CLRF   x26
0C75E:  CLRF   x27
0C760:  CLRF   x28
0C762:  CLRF   x29
0C764:  CLRF   x2A
0C766:  CLRF   x2B
0C768:  CLRF   x2C
0C76A:  CLRF   x2D
0C76C:  CLRF   x2E
0C76E:  CLRF   x2F
0C770:  CLRF   x30
0C772:  CLRF   x31
0C774:  CLRF   x32
0C776:  CLRF   x33
0C778:  CLRF   x34
0C77A:  CLRF   x35
0C77C:  CLRF   x36
0C77E:  CLRF   x37
0C780:  CLRF   x38
0C782:  CLRF   x39
0C784:  CLRF   x3A
0C786:  CLRF   x3B
0C788:  CLRF   x3C
0C78A:  CLRF   x3D
0C78C:  CLRF   x3E
0C78E:  CLRF   x3F
0C790:  CLRF   x40
0C792:  CLRF   x41
0C794:  CLRF   x42
0C796:  CLRF   x43
0C798:  CLRF   x44
0C79A:  CLRF   x45
0C79C:  CLRF   x46
0C79E:  CLRF   x47
0C7A0:  CLRF   x48
0C7A2:  CLRF   x49
0C7A4:  CLRF   x4A
0C7A6:  CLRF   x4B
0C7A8:  CLRF   x4C
0C7AA:  CLRF   x4D
0C7AC:  CLRF   x4E
0C7AE:  CLRF   x4F
0C7B0:  CLRF   x50
0C7B2:  CLRF   x51
0C7B4:  CLRF   x52
0C7B6:  CLRF   x53
0C7B8:  CLRF   x54
0C7BA:  CLRF   x55
0C7BC:  CLRF   x56
0C7BE:  CLRF   x57
0C7C0:  CLRF   x58
0C7C2:  CLRF   x59
0C7C4:  CLRF   x5A
0C7C6:  CLRF   x5B
0C7C8:  CLRF   x5C
0C7CA:  CLRF   x5D
0C7CC:  CLRF   x5E
0C7CE:  CLRF   x5F
0C7D0:  CLRF   x60
0C7D2:  CLRF   x61
0C7D4:  CLRF   x62
0C7D6:  CLRF   x63
0C7D8:  CLRF   x64
0C7DA:  CLRF   x65
0C7DC:  CLRF   x66
0C7DE:  CLRF   x67
0C7E0:  CLRF   x68
0C7E2:  CLRF   x69
0C7E4:  CLRF   x6A
0C7E6:  CLRF   x6B
0C7E8:  CLRF   x6C
0C7EA:  CLRF   x6D
0C7EC:  CLRF   x6E
0C7EE:  CLRF   x6F
0C7F0:  CLRF   x70
0C7F2:  CLRF   x71
0C7F4:  CLRF   x72
0C7F6:  CLRF   x73
0C7F8:  CLRF   x74
0C7FA:  CLRF   x75
0C7FC:  CLRF   x76
0C7FE:  CLRF   x77
0C800:  CLRF   x78
0C802:  CLRF   x79
0C804:  CLRF   x7A
0C806:  CLRF   x7B
0C808:  CLRF   x7C
0C80A:  CLRF   x7D
0C80C:  CLRF   x7E
0C80E:  CLRF   x7F
0C810:  CLRF   x80
0C812:  CLRF   x81
0C814:  CLRF   x82
0C816:  CLRF   x83
0C818:  CLRF   x84
0C81A:  CLRF   x85
0C81C:  CLRF   x86
0C81E:  CLRF   x87
0C820:  CLRF   x88
0C822:  CLRF   x89
0C824:  CLRF   x8A
0C826:  CLRF   x8B
0C828:  CLRF   x8C
0C82A:  CLRF   x8D
0C82C:  CLRF   x8E
0C82E:  CLRF   x8F
0C830:  CLRF   x90
0C832:  CLRF   x91
0C834:  CLRF   x92
0C836:  CLRF   x93
0C838:  CLRF   x94
0C83A:  CLRF   x95
0C83C:  CLRF   x96
0C83E:  CLRF   x97
0C840:  CLRF   x98
0C842:  CLRF   x99
0C844:  CLRF   x9A
0C846:  CLRF   x9B
0C848:  CLRF   x9C
0C84A:  CLRF   x9D
0C84C:  CLRF   x9E
0C84E:  CLRF   x9F
0C850:  CLRF   xA0
0C852:  CLRF   xA1
0C854:  CLRF   xA2
0C856:  CLRF   xA3
0C858:  CLRF   xA4
0C85A:  CLRF   xA5
0C85C:  CLRF   xA6
0C85E:  CLRF   xA7
0C860:  CLRF   xA8
0C862:  CLRF   xA9
0C864:  CLRF   xAA
0C866:  CLRF   xAB
0C868:  CLRF   xAC
0C86A:  CLRF   xAD
0C86C:  CLRF   xAE
0C86E:  CLRF   xAF
0C870:  CLRF   xB0
0C872:  CLRF   xB1
0C874:  CLRF   xB2
0C876:  CLRF   xB3
0C878:  CLRF   xB4
0C87A:  CLRF   xB5
0C87C:  CLRF   xB6
0C87E:  CLRF   xB7
0C880:  CLRF   xB8
0C882:  CLRF   xB9
0C884:  CLRF   xBA
0C886:  CLRF   xBB
0C888:  CLRF   xBC
0C88A:  CLRF   xBD
0C88C:  CLRF   xBE
0C88E:  CLRF   xBF
0C890:  CLRF   xC0
0C892:  CLRF   xC1
0C894:  CLRF   xC2
0C896:  CLRF   xC3
0C898:  CLRF   xC4
0C89A:  CLRF   xC5
0C89C:  CLRF   xC6
0C89E:  CLRF   xC7
0C8A0:  CLRF   xC8
0C8A2:  CLRF   xC9
0C8A4:  CLRF   xCA
0C8A6:  CLRF   xCB
0C8A8:  CLRF   xCC
0C8AA:  CLRF   xCD
0C8AC:  CLRF   xCE
0C8AE:  CLRF   xCF
0C8B0:  CLRF   xD0
0C8B2:  CLRF   xD1
0C8B4:  CLRF   xD2
0C8B6:  CLRF   xD3
0C8B8:  CLRF   xD4
0C8BA:  CLRF   xD5
0C8BC:  CLRF   xD6
0C8BE:  CLRF   xD7
0C8C0:  CLRF   xD8
0C8C2:  CLRF   xD9
0C8C4:  CLRF   xDA
0C8C6:  CLRF   xDB
0C8C8:  CLRF   xDC
0C8CA:  CLRF   xDD
0C8CC:  CLRF   xDE
0C8CE:  CLRF   xDF
0C8D0:  CLRF   xE0
0C8D2:  CLRF   xE1
0C8D4:  CLRF   xE2
0C8D6:  CLRF   xE3
0C8D8:  CLRF   xE4
0C8DA:  CLRF   xE5
0C8DC:  CLRF   xE6
0C8DE:  CLRF   xE7
0C8E0:  CLRF   xE8
0C8E2:  CLRF   xE9
0C8E4:  CLRF   xEA
0C8E6:  CLRF   xEB
0C8E8:  CLRF   xEC
0C8EA:  CLRF   xED
0C8EC:  CLRF   xEE
0C8EE:  CLRF   xEF
0C8F0:  CLRF   xF0
0C8F2:  CLRF   xF1
0C8F4:  CLRF   xF2
0C8F6:  CLRF   xF3
0C8F8:  CLRF   xF4
0C8FA:  CLRF   xF5
0C8FC:  CLRF   xF6
0C8FE:  CLRF   xF7
0C900:  CLRF   xF8
0C902:  CLRF   xF9
0C904:  CLRF   xFA
0C906:  CLRF   xFB
0C908:  CLRF   xFC
0C90A:  CLRF   xFD
0C90C:  CLRF   xFE
0C90E:  CLRF   xFF
0C910:  MOVLB  3
0C912:  CLRF   x00
0C914:  CLRF   x01
0C916:  CLRF   x02
0C918:  CLRF   x03
0C91A:  CLRF   x04
0C91C:  CLRF   x05
0C91E:  CLRF   x06
0C920:  CLRF   x07
0C922:  CLRF   x08
0C924:  CLRF   x09
0C926:  CLRF   x0A
0C928:  CLRF   x0B
0C92A:  CLRF   x0C
0C92C:  CLRF   x0D
0C92E:  CLRF   x0E
0C930:  CLRF   x0F
0C932:  CLRF   x10
0C934:  CLRF   x11
0C936:  CLRF   x12
0C938:  CLRF   x13
0C93A:  CLRF   x14
0C93C:  CLRF   x15
0C93E:  CLRF   x16
0C940:  CLRF   x17
0C942:  CLRF   x18
0C944:  CLRF   x19
0C946:  CLRF   x1A
0C948:  CLRF   x1B
0C94A:  CLRF   x1C
0C94C:  CLRF   x1D
0C94E:  CLRF   x1E
0C950:  CLRF   x1F
0C952:  CLRF   x20
0C954:  CLRF   x21
0C956:  CLRF   x22
0C958:  CLRF   x23
0C95A:  CLRF   x24
0C95C:  CLRF   x25
0C95E:  CLRF   x26
0C960:  CLRF   x27
0C962:  CLRF   x28
0C964:  CLRF   x29
0C966:  CLRF   x2A
0C968:  CLRF   x2B
0C96A:  CLRF   x2C
0C96C:  CLRF   x2D
0C96E:  CLRF   x2E
0C970:  CLRF   x2F
0C972:  CLRF   x30
0C974:  CLRF   x31
0C976:  CLRF   x32
0C978:  CLRF   x33
0C97A:  CLRF   x34
0C97C:  CLRF   x35
0C97E:  CLRF   x36
0C980:  CLRF   x37
0C982:  CLRF   x38
0C984:  CLRF   x39
0C986:  CLRF   x3A
0C988:  CLRF   x3B
0C98A:  CLRF   x3C
0C98C:  CLRF   x3D
0C98E:  CLRF   x3E
0C990:  CLRF   x3F
0C992:  CLRF   x40
0C994:  CLRF   x41
0C996:  CLRF   x42
0C998:  CLRF   x43
0C99A:  CLRF   x44
0C99C:  CLRF   x45
0C99E:  CLRF   x46
0C9A0:  CLRF   x47
0C9A2:  CLRF   x48
0C9A4:  CLRF   x49
0C9A6:  CLRF   x4A
0C9A8:  CLRF   x4B
0C9AA:  CLRF   x4C
0C9AC:  CLRF   x4D
0C9AE:  CLRF   x4E
0C9B0:  CLRF   x4F
0C9B2:  CLRF   x50
0C9B4:  CLRF   x51
0C9B6:  CLRF   x52
0C9B8:  CLRF   x53
0C9BA:  CLRF   x54
0C9BC:  CLRF   x55
0C9BE:  CLRF   x56
0C9C0:  CLRF   x57
0C9C2:  CLRF   x58
0C9C4:  CLRF   x59
0C9C6:  CLRF   x5A
0C9C8:  CLRF   x5B
0C9CA:  CLRF   x5C
0C9CC:  CLRF   x5D
0C9CE:  CLRF   x5E
0C9D0:  CLRF   x5F
0C9D2:  CLRF   x60
0C9D4:  CLRF   x61
0C9D6:  CLRF   x62
0C9D8:  CLRF   x63
0C9DA:  CLRF   x64
0C9DC:  CLRF   x65
0C9DE:  CLRF   x66
0C9E0:  CLRF   x67
0C9E2:  CLRF   x68
0C9E4:  CLRF   x69
0C9E6:  CLRF   x6A
0C9E8:  CLRF   x6B
0C9EA:  CLRF   x6C
0C9EC:  CLRF   x6D
0C9EE:  CLRF   x6E
0C9F0:  CLRF   x6F
0C9F2:  CLRF   x70
0C9F4:  CLRF   x71
0C9F6:  CLRF   x72
0C9F8:  CLRF   x73
0C9FA:  CLRF   x74
0C9FC:  CLRF   x75
0C9FE:  CLRF   x76
0CA00:  CLRF   x77
0CA02:  CLRF   x78
0CA04:  CLRF   x79
0CA06:  CLRF   x7A
0CA08:  CLRF   x7B
0CA0A:  CLRF   x7C
0CA0C:  CLRF   x7D
0CA0E:  CLRF   x7E
0CA10:  CLRF   x7F
0CA12:  CLRF   x80
0CA14:  CLRF   x81
0CA16:  CLRF   x82
0CA18:  CLRF   x83
0CA1A:  CLRF   x84
0CA1C:  CLRF   x85
0CA1E:  CLRF   x86
0CA20:  CLRF   x87
0CA22:  CLRF   x88
0CA24:  CLRF   x89
0CA26:  CLRF   x8A
0CA28:  CLRF   x8B
0CA2A:  CLRF   x8C
0CA2C:  CLRF   x8D
0CA2E:  CLRF   x8E
0CA30:  CLRF   x8F
0CA32:  CLRF   x90
0CA34:  CLRF   x91
0CA36:  CLRF   x92
0CA38:  CLRF   x93
0CA3A:  CLRF   x94
0CA3C:  CLRF   x95
0CA3E:  CLRF   x96
0CA40:  CLRF   x97
0CA42:  CLRF   x98
0CA44:  CLRF   x99
0CA46:  CLRF   x9A
0CA48:  CLRF   x9B
0CA4A:  CLRF   x9C
0CA4C:  CLRF   x9D
0CA4E:  CLRF   x9E
0CA50:  CLRF   x9F
0CA52:  CLRF   xA0
0CA54:  CLRF   xA1
0CA56:  CLRF   xA2
0CA58:  CLRF   xA3
0CA5A:  CLRF   xA4
0CA5C:  CLRF   xA5
0CA5E:  CLRF   xA6
0CA60:  CLRF   xA7
0CA62:  CLRF   xA8
0CA64:  CLRF   xA9
0CA66:  CLRF   xAA
0CA68:  CLRF   xAB
0CA6A:  CLRF   xAC
0CA6C:  CLRF   xAD
0CA6E:  CLRF   xAE
0CA70:  CLRF   xAF
0CA72:  CLRF   xB0
0CA74:  CLRF   xB1
0CA76:  CLRF   xB2
0CA78:  CLRF   xB3
0CA7A:  CLRF   xB4
0CA7C:  CLRF   xB5
0CA7E:  CLRF   xB6
0CA80:  CLRF   xB7
0CA82:  CLRF   xB8
0CA84:  CLRF   xB9
0CA86:  CLRF   xBA
0CA88:  CLRF   xBB
0CA8A:  CLRF   xBC
0CA8C:  CLRF   xBD
0CA8E:  CLRF   xBE
0CA90:  CLRF   xBF
0CA92:  CLRF   xC0
0CA94:  CLRF   xC1
0CA96:  CLRF   xC2
0CA98:  CLRF   xC3
0CA9A:  CLRF   xC4
0CA9C:  CLRF   xC5
0CA9E:  CLRF   xC6
0CAA0:  CLRF   xC7
0CAA2:  CLRF   xC8
0CAA4:  CLRF   xC9
0CAA6:  CLRF   xCA
0CAA8:  CLRF   xCB
0CAAA:  CLRF   xCC
0CAAC:  CLRF   xCD
0CAAE:  CLRF   xCE
0CAB0:  CLRF   xCF
0CAB2:  CLRF   xD0
0CAB4:  CLRF   xD1
0CAB6:  CLRF   xD2
0CAB8:  CLRF   xD3
0CABA:  CLRF   xD4
0CABC:  CLRF   xD5
0CABE:  CLRF   xD6
0CAC0:  CLRF   xD7
0CAC2:  CLRF   xD8
0CAC4:  CLRF   xD9
0CAC6:  CLRF   xDA
0CAC8:  CLRF   xDB
0CACA:  CLRF   xDC
0CACC:  CLRF   xDD
0CACE:  CLRF   xDE
0CAD0:  CLRF   xDF
0CAD2:  CLRF   xE0
0CAD4:  CLRF   xE1
0CAD6:  CLRF   xE2
0CAD8:  CLRF   xE3
0CADA:  CLRF   xE4
0CADC:  CLRF   xE5
0CADE:  CLRF   xE6
0CAE0:  CLRF   xE7
0CAE2:  CLRF   xE8
0CAE4:  CLRF   xE9
0CAE6:  CLRF   xEA
0CAE8:  CLRF   xEB
0CAEA:  CLRF   xEC
0CAEC:  CLRF   xED
0CAEE:  CLRF   xEE
0CAF0:  CLRF   xEF
0CAF2:  CLRF   xF0
0CAF4:  CLRF   xF1
0CAF6:  CLRF   xF2
0CAF8:  CLRF   xF3
0CAFA:  CLRF   xF4
0CAFC:  CLRF   xF5
0CAFE:  CLRF   xF6
0CB00:  CLRF   xF7
0CB02:  CLRF   xF8
0CB04:  CLRF   xF9
0CB06:  CLRF   xFA
0CB08:  CLRF   xFB
0CB0A:  CLRF   xFC
0CB0C:  CLRF   xFD
0CB0E:  CLRF   xFE
0CB10:  CLRF   xFF
0CB12:  MOVLB  4
0CB14:  CLRF   x00
0CB16:  CLRF   x01
0CB18:  CLRF   x02
0CB1A:  CLRF   x03
0CB1C:  CLRF   x04
0CB1E:  CLRF   x05
0CB20:  CLRF   x06
0CB22:  CLRF   x07
0CB24:  CLRF   x08
0CB26:  CLRF   x09
0CB28:  CLRF   x0A
0CB2A:  CLRF   x0B
0CB2C:  CLRF   x0C
0CB2E:  CLRF   x0D
0CB30:  CLRF   x0E
0CB32:  CLRF   x0F
0CB34:  CLRF   x10
0CB36:  CLRF   x11
0CB38:  CLRF   x12
0CB3A:  CLRF   x13
0CB3C:  CLRF   x14
0CB3E:  CLRF   x15
0CB40:  CLRF   x16
0CB42:  CLRF   x17
0CB44:  CLRF   x18
0CB46:  CLRF   x19
0CB48:  CLRF   x1A
0CB4A:  CLRF   x1B
0CB4C:  CLRF   x1C
0CB4E:  CLRF   x1D
0CB50:  CLRF   x1E
0CB52:  CLRF   x1F
0CB54:  CLRF   x20
0CB56:  CLRF   x21
0CB58:  CLRF   x22
0CB5A:  CLRF   x23
0CB5C:  CLRF   x24
0CB5E:  CLRF   x25
0CB60:  CLRF   x26
0CB62:  CLRF   x27
0CB64:  CLRF   x28
0CB66:  CLRF   x29
0CB68:  CLRF   x2A
0CB6A:  CLRF   x2B
0CB6C:  CLRF   x2C
0CB6E:  CLRF   x2D
0CB70:  CLRF   x2E
0CB72:  CLRF   x2F
0CB74:  CLRF   x30
0CB76:  CLRF   x31
0CB78:  CLRF   x32
0CB7A:  CLRF   x33
0CB7C:  CLRF   x34
0CB7E:  CLRF   x35
0CB80:  CLRF   x36
0CB82:  CLRF   x37
0CB84:  CLRF   x38
0CB86:  CLRF   x39
0CB88:  CLRF   x3A
0CB8A:  CLRF   x3B
0CB8C:  CLRF   x3C
0CB8E:  CLRF   x3D
0CB90:  CLRF   x3E
0CB92:  CLRF   x3F
0CB94:  CLRF   x40
0CB96:  CLRF   x41
0CB98:  CLRF   x42
0CB9A:  CLRF   x43
0CB9C:  CLRF   x44
0CB9E:  CLRF   x45
0CBA0:  CLRF   x46
0CBA2:  CLRF   x47
0CBA4:  CLRF   x48
0CBA6:  CLRF   x49
0CBA8:  CLRF   x4A
0CBAA:  CLRF   x4B
0CBAC:  CLRF   x4C
0CBAE:  CLRF   x4D
0CBB0:  CLRF   x4E
0CBB2:  CLRF   x4F
0CBB4:  CLRF   x50
0CBB6:  CLRF   x51
0CBB8:  CLRF   x52
0CBBA:  CLRF   x53
0CBBC:  CLRF   x54
0CBBE:  CLRF   x55
0CBC0:  CLRF   x56
0CBC2:  CLRF   x57
0CBC4:  CLRF   x58
0CBC6:  CLRF   x59
0CBC8:  CLRF   x5A
0CBCA:  CLRF   x5B
0CBCC:  CLRF   x5C
0CBCE:  CLRF   x5D
0CBD0:  CLRF   x5E
0CBD2:  CLRF   x5F
0CBD4:  CLRF   x60
0CBD6:  CLRF   x61
0CBD8:  CLRF   x62
0CBDA:  CLRF   x63
0CBDC:  CLRF   x64
0CBDE:  CLRF   x65
0CBE0:  CLRF   x66
0CBE2:  CLRF   x67
0CBE4:  CLRF   x68
0CBE6:  CLRF   x69
0CBE8:  CLRF   x6A
0CBEA:  CLRF   x6B
0CBEC:  CLRF   x6C
0CBEE:  CLRF   x6D
0CBF0:  CLRF   x6E
0CBF2:  CLRF   x6F
0CBF4:  CLRF   x70
0CBF6:  CLRF   x71
0CBF8:  CLRF   x72
0CBFA:  CLRF   x73
0CBFC:  CLRF   x74
0CBFE:  CLRF   x75
0CC00:  CLRF   x76
0CC02:  CLRF   x77
0CC04:  CLRF   x78
0CC06:  CLRF   x79
0CC08:  CLRF   x7A
0CC0A:  CLRF   x7B
0CC0C:  CLRF   x7C
0CC0E:  CLRF   x7D
0CC10:  CLRF   x7E
0CC12:  CLRF   x7F
0CC14:  CLRF   x80
0CC16:  CLRF   x81
0CC18:  CLRF   x82
0CC1A:  CLRF   x83
0CC1C:  CLRF   x84
0CC1E:  CLRF   x85
0CC20:  CLRF   x86
0CC22:  CLRF   x87
0CC24:  CLRF   x88
0CC26:  CLRF   x89
0CC28:  CLRF   x8A
0CC2A:  CLRF   x8B
0CC2C:  CLRF   x8C
0CC2E:  CLRF   x8D
0CC30:  CLRF   x8E
0CC32:  CLRF   x8F
0CC34:  CLRF   x90
0CC36:  CLRF   x91
0CC38:  CLRF   x92
0CC3A:  CLRF   x93
0CC3C:  CLRF   x94
0CC3E:  CLRF   x95
0CC40:  CLRF   x96
0CC42:  CLRF   x97
0CC44:  CLRF   x98
0CC46:  CLRF   x99
0CC48:  CLRF   x9A
0CC4A:  CLRF   x9B
0CC4C:  CLRF   x9C
0CC4E:  CLRF   x9D
0CC50:  CLRF   x9E
0CC52:  CLRF   x9F
0CC54:  CLRF   xA0
0CC56:  CLRF   xA1
0CC58:  CLRF   xA2
0CC5A:  CLRF   xA3
0CC5C:  CLRF   xA4
0CC5E:  CLRF   xA5
0CC60:  CLRF   xA6
0CC62:  CLRF   xA7
0CC64:  CLRF   xA8
0CC66:  CLRF   xA9
0CC68:  CLRF   xAA
0CC6A:  CLRF   xAB
0CC6C:  CLRF   xAC
0CC6E:  CLRF   xAD
0CC70:  CLRF   xAE
0CC72:  CLRF   xAF
0CC74:  CLRF   xB0
0CC76:  CLRF   xB1
0CC78:  CLRF   xB2
0CC7A:  CLRF   xB3
0CC7C:  CLRF   xB4
0CC7E:  CLRF   xB5
0CC80:  CLRF   xB6
0CC82:  CLRF   xB7
0CC84:  CLRF   xB8
0CC86:  CLRF   xB9
0CC88:  CLRF   xBA
0CC8A:  CLRF   xBB
0CC8C:  CLRF   xBC
0CC8E:  CLRF   xBD
0CC90:  CLRF   xBE
0CC92:  CLRF   xBF
0CC94:  CLRF   xC0
0CC96:  CLRF   xC1
0CC98:  CLRF   xC2
0CC9A:  CLRF   xC3
0CC9C:  CLRF   xC4
0CC9E:  CLRF   xC5
0CCA0:  CLRF   xC6
0CCA2:  CLRF   xC7
0CCA4:  CLRF   xC8
0CCA6:  CLRF   xC9
0CCA8:  CLRF   xCA
0CCAA:  CLRF   xCB
0CCAC:  CLRF   xCC
0CCAE:  CLRF   xCD
0CCB0:  CLRF   xCE
0CCB2:  CLRF   xCF
0CCB4:  CLRF   xD0
0CCB6:  CLRF   xD1
0CCB8:  CLRF   xD2
0CCBA:  CLRF   xD3
0CCBC:  CLRF   xD4
0CCBE:  CLRF   xD5
0CCC0:  CLRF   xD6
0CCC2:  CLRF   xD7
0CCC4:  CLRF   xD8
0CCC6:  CLRF   xD9
0CCC8:  CLRF   xDA
0CCCA:  CLRF   xDB
0CCCC:  CLRF   xDC
0CCCE:  CLRF   xDD
0CCD0:  CLRF   xDE
0CCD2:  CLRF   xDF
0CCD4:  CLRF   xE0
0CCD6:  CLRF   xE1
0CCD8:  CLRF   xE2
0CCDA:  CLRF   xE3
0CCDC:  CLRF   xE4
0CCDE:  CLRF   xE5
0CCE0:  CLRF   xE6
0CCE2:  CLRF   xE7
0CCE4:  CLRF   xE8
0CCE6:  CLRF   xE9
0CCE8:  CLRF   xEA
0CCEA:  CLRF   xEB
0CCEC:  CLRF   xEC
0CCEE:  CLRF   xED
0CCF0:  CLRF   xEE
0CCF2:  CLRF   xEF
0CCF4:  CLRF   xF0
0CCF6:  CLRF   xF1
0CCF8:  CLRF   xF2
0CCFA:  CLRF   xF3
0CCFC:  CLRF   xF4
0CCFE:  CLRF   xF5
0CD00:  CLRF   xF6
0CD02:  CLRF   xF7
0CD04:  CLRF   xF8
0CD06:  CLRF   xF9
0CD08:  CLRF   xFA
0CD0A:  CLRF   xFB
0CD0C:  CLRF   xFC
0CD0E:  CLRF   xFD
0CD10:  CLRF   xFE
0CD12:  CLRF   xFF
0CD14:  MOVLB  5
0CD16:  CLRF   x00
0CD18:  CLRF   x01
0CD1A:  CLRF   x02
0CD1C:  CLRF   x03
0CD1E:  CLRF   x04
0CD20:  CLRF   x05
0CD22:  CLRF   x06
0CD24:  CLRF   x07
0CD26:  CLRF   x08
0CD28:  CLRF   x09
0CD2A:  CLRF   x0A
0CD2C:  CLRF   x0B
0CD2E:  CLRF   x0C
0CD30:  CLRF   x0D
0CD32:  CLRF   x0E
0CD34:  CLRF   x0F
0CD36:  CLRF   x10
0CD38:  CLRF   x11
0CD3A:  CLRF   x12
0CD3C:  CLRF   x13
0CD3E:  CLRF   x14
0CD40:  CLRF   x15
0CD42:  CLRF   x16
0CD44:  CLRF   x17
0CD46:  CLRF   x18
0CD48:  CLRF   x19
0CD4A:  CLRF   x1A
0CD4C:  CLRF   x1B
0CD4E:  CLRF   x1C
0CD50:  CLRF   x1D
0CD52:  CLRF   x1E
0CD54:  CLRF   x1F
0CD56:  CLRF   x20
0CD58:  CLRF   x21
0CD5A:  CLRF   x22
0CD5C:  CLRF   x23
0CD5E:  CLRF   x24
0CD60:  CLRF   x25
0CD62:  CLRF   x26
0CD64:  CLRF   x27
0CD66:  CLRF   x28
0CD68:  CLRF   x29
0CD6A:  CLRF   x2A
0CD6C:  CLRF   x2B
0CD6E:  CLRF   x2C
0CD70:  CLRF   x2D
0CD72:  CLRF   x2E
0CD74:  CLRF   x2F
0CD76:  CLRF   x30
0CD78:  CLRF   x31
0CD7A:  CLRF   x32
0CD7C:  CLRF   x33
0CD7E:  CLRF   x34
0CD80:  CLRF   x35
0CD82:  CLRF   x36
0CD84:  CLRF   x37
0CD86:  CLRF   x38
0CD88:  CLRF   x39
0CD8A:  CLRF   x3A
0CD8C:  CLRF   x3B
0CD8E:  CLRF   x3C
0CD90:  CLRF   x3D
0CD92:  CLRF   x3E
0CD94:  CLRF   x3F
0CD96:  CLRF   x40
0CD98:  CLRF   x41
0CD9A:  CLRF   x42
0CD9C:  CLRF   x43
0CD9E:  CLRF   x44
0CDA0:  CLRF   x45
0CDA2:  CLRF   x46
0CDA4:  CLRF   x47
0CDA6:  CLRF   x48
0CDA8:  CLRF   x49
0CDAA:  CLRF   x4A
0CDAC:  CLRF   x4B
0CDAE:  CLRF   x4C
0CDB0:  CLRF   x4D
0CDB2:  CLRF   x4E
0CDB4:  CLRF   x4F
0CDB6:  CLRF   x50
0CDB8:  CLRF   x51
0CDBA:  CLRF   x52
0CDBC:  CLRF   x53
0CDBE:  CLRF   x54
0CDC0:  CLRF   x55
0CDC2:  CLRF   x56
0CDC4:  CLRF   x57
0CDC6:  CLRF   x58
0CDC8:  CLRF   x59
0CDCA:  CLRF   x5A
0CDCC:  CLRF   x5B
0CDCE:  CLRF   x5C
0CDD0:  CLRF   x5D
0CDD2:  CLRF   x5E
0CDD4:  CLRF   x5F
0CDD6:  CLRF   x60
0CDD8:  CLRF   x61
0CDDA:  CLRF   x62
0CDDC:  CLRF   x63
0CDDE:  CLRF   x64
0CDE0:  CLRF   x65
0CDE2:  CLRF   x66
0CDE4:  CLRF   x67
0CDE6:  CLRF   x68
0CDE8:  CLRF   x69
0CDEA:  CLRF   x6A
0CDEC:  CLRF   x6B
0CDEE:  CLRF   x6C
0CDF0:  CLRF   x6D
0CDF2:  CLRF   x6E
0CDF4:  CLRF   x6F
0CDF6:  CLRF   x70
0CDF8:  CLRF   x71
0CDFA:  CLRF   x72
0CDFC:  CLRF   x73
0CDFE:  CLRF   x74
0CE00:  CLRF   x75
0CE02:  CLRF   x76
0CE04:  CLRF   x77
0CE06:  CLRF   x78
0CE08:  CLRF   x79
0CE0A:  CLRF   x7A
0CE0C:  CLRF   x7B
0CE0E:  CLRF   x7C
0CE10:  CLRF   x7D
0CE12:  CLRF   x7E
0CE14:  CLRF   x7F
0CE16:  CLRF   x80
0CE18:  CLRF   x81
0CE1A:  CLRF   x82
0CE1C:  CLRF   x83
0CE1E:  CLRF   x84
0CE20:  CLRF   x85
0CE22:  CLRF   x86
0CE24:  CLRF   x87
0CE26:  CLRF   x88
0CE28:  CLRF   x89
0CE2A:  CLRF   x8A
0CE2C:  CLRF   x8B
0CE2E:  CLRF   x8C
0CE30:  CLRF   x8D
0CE32:  CLRF   x8E
0CE34:  CLRF   x8F
0CE36:  CLRF   x90
0CE38:  CLRF   x91
0CE3A:  CLRF   x92
0CE3C:  CLRF   x93
0CE3E:  CLRF   x94
0CE40:  CLRF   x95
0CE42:  CLRF   x96
0CE44:  CLRF   x97
0CE46:  CLRF   x98
0CE48:  CLRF   x99
0CE4A:  CLRF   x9A
0CE4C:  CLRF   x9B
0CE4E:  CLRF   x9C
0CE50:  CLRF   x9D
0CE52:  CLRF   x9E
0CE54:  CLRF   x9F
0CE56:  CLRF   xA0
0CE58:  CLRF   xA1
0CE5A:  CLRF   xA2
0CE5C:  CLRF   xA3
0CE5E:  CLRF   xA4
0CE60:  CLRF   xA5
0CE62:  CLRF   xA6
0CE64:  CLRF   xA7
0CE66:  CLRF   xA8
0CE68:  CLRF   xA9
0CE6A:  CLRF   xAA
0CE6C:  CLRF   xAB
0CE6E:  CLRF   xAC
0CE70:  CLRF   xAD
0CE72:  CLRF   xAE
0CE74:  CLRF   xAF
0CE76:  CLRF   xB0
0CE78:  CLRF   xB1
0CE7A:  CLRF   xB2
0CE7C:  CLRF   xB3
0CE7E:  CLRF   xB4
0CE80:  CLRF   xB5
0CE82:  CLRF   xB6
0CE84:  CLRF   xB7
0CE86:  CLRF   xB8
0CE88:  CLRF   xB9
0CE8A:  CLRF   xBA
0CE8C:  CLRF   xBB
0CE8E:  CLRF   xBC
0CE90:  CLRF   xBD
0CE92:  CLRF   xBE
0CE94:  CLRF   xBF
0CE96:  CLRF   xC0
0CE98:  CLRF   xC1
0CE9A:  CLRF   xC2
0CE9C:  CLRF   xC3
0CE9E:  CLRF   xC4
0CEA0:  CLRF   xC5
0CEA2:  CLRF   xC6
0CEA4:  CLRF   xC7
0CEA6:  CLRF   xC8
0CEA8:  CLRF   xC9
0CEAA:  CLRF   xCA
0CEAC:  CLRF   xCB
0CEAE:  CLRF   xCC
0CEB0:  CLRF   xCD
0CEB2:  CLRF   xCE
0CEB4:  CLRF   xCF
0CEB6:  CLRF   xD0
0CEB8:  CLRF   xD1
0CEBA:  CLRF   xD2
0CEBC:  CLRF   xD3
0CEBE:  CLRF   xD4
0CEC0:  CLRF   xD5
0CEC2:  CLRF   xD6
0CEC4:  CLRF   xD7
0CEC6:  CLRF   xD8
0CEC8:  CLRF   xD9
0CECA:  CLRF   xDA
0CECC:  CLRF   xDB
0CECE:  CLRF   xDC
0CED0:  CLRF   xDD
0CED2:  CLRF   xDE
0CED4:  CLRF   xDF
0CED6:  CLRF   xE0
0CED8:  CLRF   xE1
0CEDA:  CLRF   xE2
0CEDC:  CLRF   xE3
0CEDE:  CLRF   xE4
0CEE0:  CLRF   xE5
0CEE2:  CLRF   xE6
0CEE4:  CLRF   xE7
0CEE6:  CLRF   xE8
0CEE8:  CLRF   xE9
0CEEA:  CLRF   xEA
0CEEC:  CLRF   xEB
0CEEE:  CLRF   xEC
0CEF0:  CLRF   xED
0CEF2:  CLRF   xEE
0CEF4:  CLRF   xEF
0CEF6:  CLRF   xF0
....................     port1.port_num = 1;
0CEF8:  MOVLW  01
0CEFA:  MOVLB  1
0CEFC:  MOVWF  xF1
....................     port1.sweep_step = 0;
0CEFE:  CLRF   xF3
0CF00:  CLRF   xF2
....................     port1.active = 1;
0CF02:  MOVLB  5
0CF04:  BSF    xF0.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0CF06:  CLRF   xF1
0CF08:  CLRF   xF2
0CF0A:  CLRF   xF3
0CF0C:  CLRF   xF4
0CF0E:  CLRF   xF5
0CF10:  CLRF   xF6
0CF12:  CLRF   xF7
0CF14:  CLRF   xF8
0CF16:  CLRF   xF9
0CF18:  CLRF   xFA
0CF1A:  CLRF   xFB
0CF1C:  CLRF   xFC
0CF1E:  CLRF   xFD
0CF20:  CLRF   xFE
0CF22:  CLRF   xFF
0CF24:  MOVLB  6
0CF26:  CLRF   x00
0CF28:  CLRF   x01
0CF2A:  CLRF   x02
0CF2C:  CLRF   x03
0CF2E:  CLRF   x04
0CF30:  CLRF   x05
0CF32:  CLRF   x06
0CF34:  CLRF   x07
0CF36:  CLRF   x08
0CF38:  CLRF   x09
0CF3A:  CLRF   x0A
0CF3C:  CLRF   x0B
0CF3E:  CLRF   x0C
0CF40:  CLRF   x0D
0CF42:  CLRF   x0E
0CF44:  CLRF   x0F
0CF46:  CLRF   x10
0CF48:  CLRF   x11
0CF4A:  CLRF   x12
0CF4C:  CLRF   x13
0CF4E:  CLRF   x14
0CF50:  CLRF   x15
0CF52:  CLRF   x16
0CF54:  CLRF   x17
0CF56:  CLRF   x18
0CF58:  CLRF   x19
0CF5A:  CLRF   x1A
0CF5C:  CLRF   x1B
0CF5E:  CLRF   x1C
0CF60:  CLRF   x1D
0CF62:  CLRF   x1E
0CF64:  CLRF   x1F
0CF66:  CLRF   x20
0CF68:  CLRF   x21
0CF6A:  CLRF   x22
0CF6C:  CLRF   x23
0CF6E:  CLRF   x24
0CF70:  CLRF   x25
0CF72:  CLRF   x26
0CF74:  CLRF   x27
0CF76:  CLRF   x28
0CF78:  CLRF   x29
0CF7A:  CLRF   x2A
0CF7C:  CLRF   x2B
0CF7E:  CLRF   x2C
0CF80:  CLRF   x2D
0CF82:  CLRF   x2E
0CF84:  CLRF   x2F
0CF86:  CLRF   x30
0CF88:  CLRF   x31
0CF8A:  CLRF   x32
0CF8C:  CLRF   x33
0CF8E:  CLRF   x34
0CF90:  CLRF   x35
0CF92:  CLRF   x36
0CF94:  CLRF   x37
0CF96:  CLRF   x38
0CF98:  CLRF   x39
0CF9A:  CLRF   x3A
0CF9C:  CLRF   x3B
0CF9E:  CLRF   x3C
0CFA0:  CLRF   x3D
0CFA2:  CLRF   x3E
0CFA4:  CLRF   x3F
0CFA6:  CLRF   x40
0CFA8:  CLRF   x41
0CFAA:  CLRF   x42
0CFAC:  CLRF   x43
0CFAE:  CLRF   x44
0CFB0:  CLRF   x45
0CFB2:  CLRF   x46
0CFB4:  CLRF   x47
0CFB6:  CLRF   x48
0CFB8:  CLRF   x49
0CFBA:  CLRF   x4A
0CFBC:  CLRF   x4B
0CFBE:  CLRF   x4C
0CFC0:  CLRF   x4D
0CFC2:  CLRF   x4E
0CFC4:  CLRF   x4F
0CFC6:  CLRF   x50
0CFC8:  CLRF   x51
0CFCA:  CLRF   x52
0CFCC:  CLRF   x53
0CFCE:  CLRF   x54
0CFD0:  CLRF   x55
0CFD2:  CLRF   x56
0CFD4:  CLRF   x57
0CFD6:  CLRF   x58
0CFD8:  CLRF   x59
0CFDA:  CLRF   x5A
0CFDC:  CLRF   x5B
0CFDE:  CLRF   x5C
0CFE0:  CLRF   x5D
0CFE2:  CLRF   x5E
0CFE4:  CLRF   x5F
0CFE6:  CLRF   x60
0CFE8:  CLRF   x61
0CFEA:  CLRF   x62
0CFEC:  CLRF   x63
0CFEE:  CLRF   x64
0CFF0:  CLRF   x65
0CFF2:  CLRF   x66
0CFF4:  CLRF   x67
0CFF6:  CLRF   x68
0CFF8:  CLRF   x69
0CFFA:  CLRF   x6A
0CFFC:  CLRF   x6B
0CFFE:  CLRF   x6C
0D000:  CLRF   x6D
0D002:  CLRF   x6E
0D004:  CLRF   x6F
0D006:  CLRF   x70
0D008:  CLRF   x71
0D00A:  CLRF   x72
0D00C:  CLRF   x73
0D00E:  CLRF   x74
0D010:  CLRF   x75
0D012:  CLRF   x76
0D014:  CLRF   x77
0D016:  CLRF   x78
0D018:  CLRF   x79
0D01A:  CLRF   x7A
0D01C:  CLRF   x7B
0D01E:  CLRF   x7C
0D020:  CLRF   x7D
0D022:  CLRF   x7E
0D024:  CLRF   x7F
0D026:  CLRF   x80
0D028:  CLRF   x81
0D02A:  CLRF   x82
0D02C:  CLRF   x83
0D02E:  CLRF   x84
0D030:  CLRF   x85
0D032:  CLRF   x86
0D034:  CLRF   x87
0D036:  CLRF   x88
0D038:  CLRF   x89
0D03A:  CLRF   x8A
0D03C:  CLRF   x8B
0D03E:  CLRF   x8C
0D040:  CLRF   x8D
0D042:  CLRF   x8E
0D044:  CLRF   x8F
0D046:  CLRF   x90
0D048:  CLRF   x91
0D04A:  CLRF   x92
0D04C:  CLRF   x93
0D04E:  CLRF   x94
0D050:  CLRF   x95
0D052:  CLRF   x96
0D054:  CLRF   x97
0D056:  CLRF   x98
0D058:  CLRF   x99
0D05A:  CLRF   x9A
0D05C:  CLRF   x9B
0D05E:  CLRF   x9C
0D060:  CLRF   x9D
0D062:  CLRF   x9E
0D064:  CLRF   x9F
0D066:  CLRF   xA0
0D068:  CLRF   xA1
0D06A:  CLRF   xA2
0D06C:  CLRF   xA3
0D06E:  CLRF   xA4
0D070:  CLRF   xA5
0D072:  CLRF   xA6
0D074:  CLRF   xA7
0D076:  CLRF   xA8
0D078:  CLRF   xA9
0D07A:  CLRF   xAA
0D07C:  CLRF   xAB
0D07E:  CLRF   xAC
0D080:  CLRF   xAD
0D082:  CLRF   xAE
0D084:  CLRF   xAF
0D086:  CLRF   xB0
0D088:  CLRF   xB1
0D08A:  CLRF   xB2
0D08C:  CLRF   xB3
0D08E:  CLRF   xB4
0D090:  CLRF   xB5
0D092:  CLRF   xB6
0D094:  CLRF   xB7
0D096:  CLRF   xB8
0D098:  CLRF   xB9
0D09A:  CLRF   xBA
0D09C:  CLRF   xBB
0D09E:  CLRF   xBC
0D0A0:  CLRF   xBD
0D0A2:  CLRF   xBE
0D0A4:  CLRF   xBF
0D0A6:  CLRF   xC0
0D0A8:  CLRF   xC1
0D0AA:  CLRF   xC2
0D0AC:  CLRF   xC3
0D0AE:  CLRF   xC4
0D0B0:  CLRF   xC5
0D0B2:  CLRF   xC6
0D0B4:  CLRF   xC7
0D0B6:  CLRF   xC8
0D0B8:  CLRF   xC9
0D0BA:  CLRF   xCA
0D0BC:  CLRF   xCB
0D0BE:  CLRF   xCC
0D0C0:  CLRF   xCD
0D0C2:  CLRF   xCE
0D0C4:  CLRF   xCF
0D0C6:  CLRF   xD0
0D0C8:  CLRF   xD1
0D0CA:  CLRF   xD2
0D0CC:  CLRF   xD3
0D0CE:  CLRF   xD4
0D0D0:  CLRF   xD5
0D0D2:  CLRF   xD6
0D0D4:  CLRF   xD7
0D0D6:  CLRF   xD8
0D0D8:  CLRF   xD9
0D0DA:  CLRF   xDA
0D0DC:  CLRF   xDB
0D0DE:  CLRF   xDC
0D0E0:  CLRF   xDD
0D0E2:  CLRF   xDE
0D0E4:  CLRF   xDF
0D0E6:  CLRF   xE0
0D0E8:  CLRF   xE1
0D0EA:  CLRF   xE2
0D0EC:  CLRF   xE3
0D0EE:  CLRF   xE4
0D0F0:  CLRF   xE5
0D0F2:  CLRF   xE6
0D0F4:  CLRF   xE7
0D0F6:  CLRF   xE8
0D0F8:  CLRF   xE9
0D0FA:  CLRF   xEA
0D0FC:  CLRF   xEB
0D0FE:  CLRF   xEC
0D100:  CLRF   xED
0D102:  CLRF   xEE
0D104:  CLRF   xEF
0D106:  CLRF   xF0
0D108:  CLRF   xF1
0D10A:  CLRF   xF2
0D10C:  CLRF   xF3
0D10E:  CLRF   xF4
0D110:  CLRF   xF5
0D112:  CLRF   xF6
0D114:  CLRF   xF7
0D116:  CLRF   xF8
0D118:  CLRF   xF9
0D11A:  CLRF   xFA
0D11C:  CLRF   xFB
0D11E:  CLRF   xFC
0D120:  CLRF   xFD
0D122:  CLRF   xFE
0D124:  CLRF   xFF
0D126:  MOVLB  7
0D128:  CLRF   x00
0D12A:  CLRF   x01
0D12C:  CLRF   x02
0D12E:  CLRF   x03
0D130:  CLRF   x04
0D132:  CLRF   x05
0D134:  CLRF   x06
0D136:  CLRF   x07
0D138:  CLRF   x08
0D13A:  CLRF   x09
0D13C:  CLRF   x0A
0D13E:  CLRF   x0B
0D140:  CLRF   x0C
0D142:  CLRF   x0D
0D144:  CLRF   x0E
0D146:  CLRF   x0F
0D148:  CLRF   x10
0D14A:  CLRF   x11
0D14C:  CLRF   x12
0D14E:  CLRF   x13
0D150:  CLRF   x14
0D152:  CLRF   x15
0D154:  CLRF   x16
0D156:  CLRF   x17
0D158:  CLRF   x18
0D15A:  CLRF   x19
0D15C:  CLRF   x1A
0D15E:  CLRF   x1B
0D160:  CLRF   x1C
0D162:  CLRF   x1D
0D164:  CLRF   x1E
0D166:  CLRF   x1F
0D168:  CLRF   x20
0D16A:  CLRF   x21
0D16C:  CLRF   x22
0D16E:  CLRF   x23
0D170:  CLRF   x24
0D172:  CLRF   x25
0D174:  CLRF   x26
0D176:  CLRF   x27
0D178:  CLRF   x28
0D17A:  CLRF   x29
0D17C:  CLRF   x2A
0D17E:  CLRF   x2B
0D180:  CLRF   x2C
0D182:  CLRF   x2D
0D184:  CLRF   x2E
0D186:  CLRF   x2F
0D188:  CLRF   x30
0D18A:  CLRF   x31
0D18C:  CLRF   x32
0D18E:  CLRF   x33
0D190:  CLRF   x34
0D192:  CLRF   x35
0D194:  CLRF   x36
0D196:  CLRF   x37
0D198:  CLRF   x38
0D19A:  CLRF   x39
0D19C:  CLRF   x3A
0D19E:  CLRF   x3B
0D1A0:  CLRF   x3C
0D1A2:  CLRF   x3D
0D1A4:  CLRF   x3E
0D1A6:  CLRF   x3F
0D1A8:  CLRF   x40
0D1AA:  CLRF   x41
0D1AC:  CLRF   x42
0D1AE:  CLRF   x43
0D1B0:  CLRF   x44
0D1B2:  CLRF   x45
0D1B4:  CLRF   x46
0D1B6:  CLRF   x47
0D1B8:  CLRF   x48
0D1BA:  CLRF   x49
0D1BC:  CLRF   x4A
0D1BE:  CLRF   x4B
0D1C0:  CLRF   x4C
0D1C2:  CLRF   x4D
0D1C4:  CLRF   x4E
0D1C6:  CLRF   x4F
0D1C8:  CLRF   x50
0D1CA:  CLRF   x51
0D1CC:  CLRF   x52
0D1CE:  CLRF   x53
0D1D0:  CLRF   x54
0D1D2:  CLRF   x55
0D1D4:  CLRF   x56
0D1D6:  CLRF   x57
0D1D8:  CLRF   x58
0D1DA:  CLRF   x59
0D1DC:  CLRF   x5A
0D1DE:  CLRF   x5B
0D1E0:  CLRF   x5C
0D1E2:  CLRF   x5D
0D1E4:  CLRF   x5E
0D1E6:  CLRF   x5F
0D1E8:  CLRF   x60
0D1EA:  CLRF   x61
0D1EC:  CLRF   x62
0D1EE:  CLRF   x63
0D1F0:  CLRF   x64
0D1F2:  CLRF   x65
0D1F4:  CLRF   x66
0D1F6:  CLRF   x67
0D1F8:  CLRF   x68
0D1FA:  CLRF   x69
0D1FC:  CLRF   x6A
0D1FE:  CLRF   x6B
0D200:  CLRF   x6C
0D202:  CLRF   x6D
0D204:  CLRF   x6E
0D206:  CLRF   x6F
0D208:  CLRF   x70
0D20A:  CLRF   x71
0D20C:  CLRF   x72
0D20E:  CLRF   x73
0D210:  CLRF   x74
0D212:  CLRF   x75
0D214:  CLRF   x76
0D216:  CLRF   x77
0D218:  CLRF   x78
0D21A:  CLRF   x79
0D21C:  CLRF   x7A
0D21E:  CLRF   x7B
0D220:  CLRF   x7C
0D222:  CLRF   x7D
0D224:  CLRF   x7E
0D226:  CLRF   x7F
0D228:  CLRF   x80
0D22A:  CLRF   x81
0D22C:  CLRF   x82
0D22E:  CLRF   x83
0D230:  CLRF   x84
0D232:  CLRF   x85
0D234:  CLRF   x86
0D236:  CLRF   x87
0D238:  CLRF   x88
0D23A:  CLRF   x89
0D23C:  CLRF   x8A
0D23E:  CLRF   x8B
0D240:  CLRF   x8C
0D242:  CLRF   x8D
0D244:  CLRF   x8E
0D246:  CLRF   x8F
0D248:  CLRF   x90
0D24A:  CLRF   x91
0D24C:  CLRF   x92
0D24E:  CLRF   x93
0D250:  CLRF   x94
0D252:  CLRF   x95
0D254:  CLRF   x96
0D256:  CLRF   x97
0D258:  CLRF   x98
0D25A:  CLRF   x99
0D25C:  CLRF   x9A
0D25E:  CLRF   x9B
0D260:  CLRF   x9C
0D262:  CLRF   x9D
0D264:  CLRF   x9E
0D266:  CLRF   x9F
0D268:  CLRF   xA0
0D26A:  CLRF   xA1
0D26C:  CLRF   xA2
0D26E:  CLRF   xA3
0D270:  CLRF   xA4
0D272:  CLRF   xA5
0D274:  CLRF   xA6
0D276:  CLRF   xA7
0D278:  CLRF   xA8
0D27A:  CLRF   xA9
0D27C:  CLRF   xAA
0D27E:  CLRF   xAB
0D280:  CLRF   xAC
0D282:  CLRF   xAD
0D284:  CLRF   xAE
0D286:  CLRF   xAF
0D288:  CLRF   xB0
0D28A:  CLRF   xB1
0D28C:  CLRF   xB2
0D28E:  CLRF   xB3
0D290:  CLRF   xB4
0D292:  CLRF   xB5
0D294:  CLRF   xB6
0D296:  CLRF   xB7
0D298:  CLRF   xB8
0D29A:  CLRF   xB9
0D29C:  CLRF   xBA
0D29E:  CLRF   xBB
0D2A0:  CLRF   xBC
0D2A2:  CLRF   xBD
0D2A4:  CLRF   xBE
0D2A6:  CLRF   xBF
0D2A8:  CLRF   xC0
0D2AA:  CLRF   xC1
0D2AC:  CLRF   xC2
0D2AE:  CLRF   xC3
0D2B0:  CLRF   xC4
0D2B2:  CLRF   xC5
0D2B4:  CLRF   xC6
0D2B6:  CLRF   xC7
0D2B8:  CLRF   xC8
0D2BA:  CLRF   xC9
0D2BC:  CLRF   xCA
0D2BE:  CLRF   xCB
0D2C0:  CLRF   xCC
0D2C2:  CLRF   xCD
0D2C4:  CLRF   xCE
0D2C6:  CLRF   xCF
0D2C8:  CLRF   xD0
0D2CA:  CLRF   xD1
0D2CC:  CLRF   xD2
0D2CE:  CLRF   xD3
0D2D0:  CLRF   xD4
0D2D2:  CLRF   xD5
0D2D4:  CLRF   xD6
0D2D6:  CLRF   xD7
0D2D8:  CLRF   xD8
0D2DA:  CLRF   xD9
0D2DC:  CLRF   xDA
0D2DE:  CLRF   xDB
0D2E0:  CLRF   xDC
0D2E2:  CLRF   xDD
0D2E4:  CLRF   xDE
0D2E6:  CLRF   xDF
0D2E8:  CLRF   xE0
0D2EA:  CLRF   xE1
0D2EC:  CLRF   xE2
0D2EE:  CLRF   xE3
0D2F0:  CLRF   xE4
0D2F2:  CLRF   xE5
0D2F4:  CLRF   xE6
0D2F6:  CLRF   xE7
0D2F8:  CLRF   xE8
0D2FA:  CLRF   xE9
0D2FC:  CLRF   xEA
0D2FE:  CLRF   xEB
0D300:  CLRF   xEC
0D302:  CLRF   xED
0D304:  CLRF   xEE
0D306:  CLRF   xEF
0D308:  CLRF   xF0
0D30A:  CLRF   xF1
0D30C:  CLRF   xF2
0D30E:  CLRF   xF3
0D310:  CLRF   xF4
0D312:  CLRF   xF5
0D314:  CLRF   xF6
0D316:  CLRF   xF7
0D318:  CLRF   xF8
0D31A:  CLRF   xF9
0D31C:  CLRF   xFA
0D31E:  CLRF   xFB
0D320:  CLRF   xFC
0D322:  CLRF   xFD
0D324:  CLRF   xFE
0D326:  CLRF   xFF
0D328:  MOVLB  8
0D32A:  CLRF   x00
0D32C:  CLRF   x01
0D32E:  CLRF   x02
0D330:  CLRF   x03
0D332:  CLRF   x04
0D334:  CLRF   x05
0D336:  CLRF   x06
0D338:  CLRF   x07
0D33A:  CLRF   x08
0D33C:  CLRF   x09
0D33E:  CLRF   x0A
0D340:  CLRF   x0B
0D342:  CLRF   x0C
0D344:  CLRF   x0D
0D346:  CLRF   x0E
0D348:  CLRF   x0F
0D34A:  CLRF   x10
0D34C:  CLRF   x11
0D34E:  CLRF   x12
0D350:  CLRF   x13
0D352:  CLRF   x14
0D354:  CLRF   x15
0D356:  CLRF   x16
0D358:  CLRF   x17
0D35A:  CLRF   x18
0D35C:  CLRF   x19
0D35E:  CLRF   x1A
0D360:  CLRF   x1B
0D362:  CLRF   x1C
0D364:  CLRF   x1D
0D366:  CLRF   x1E
0D368:  CLRF   x1F
0D36A:  CLRF   x20
0D36C:  CLRF   x21
0D36E:  CLRF   x22
0D370:  CLRF   x23
0D372:  CLRF   x24
0D374:  CLRF   x25
0D376:  CLRF   x26
0D378:  CLRF   x27
0D37A:  CLRF   x28
0D37C:  CLRF   x29
0D37E:  CLRF   x2A
0D380:  CLRF   x2B
0D382:  CLRF   x2C
0D384:  CLRF   x2D
0D386:  CLRF   x2E
0D388:  CLRF   x2F
0D38A:  CLRF   x30
0D38C:  CLRF   x31
0D38E:  CLRF   x32
0D390:  CLRF   x33
0D392:  CLRF   x34
0D394:  CLRF   x35
0D396:  CLRF   x36
0D398:  CLRF   x37
0D39A:  CLRF   x38
0D39C:  CLRF   x39
0D39E:  CLRF   x3A
0D3A0:  CLRF   x3B
0D3A2:  CLRF   x3C
0D3A4:  CLRF   x3D
0D3A6:  CLRF   x3E
0D3A8:  CLRF   x3F
0D3AA:  CLRF   x40
0D3AC:  CLRF   x41
0D3AE:  CLRF   x42
0D3B0:  CLRF   x43
0D3B2:  CLRF   x44
0D3B4:  CLRF   x45
0D3B6:  CLRF   x46
0D3B8:  CLRF   x47
0D3BA:  CLRF   x48
0D3BC:  CLRF   x49
0D3BE:  CLRF   x4A
0D3C0:  CLRF   x4B
0D3C2:  CLRF   x4C
0D3C4:  CLRF   x4D
0D3C6:  CLRF   x4E
0D3C8:  CLRF   x4F
0D3CA:  CLRF   x50
0D3CC:  CLRF   x51
0D3CE:  CLRF   x52
0D3D0:  CLRF   x53
0D3D2:  CLRF   x54
0D3D4:  CLRF   x55
0D3D6:  CLRF   x56
0D3D8:  CLRF   x57
0D3DA:  CLRF   x58
0D3DC:  CLRF   x59
0D3DE:  CLRF   x5A
0D3E0:  CLRF   x5B
0D3E2:  CLRF   x5C
0D3E4:  CLRF   x5D
0D3E6:  CLRF   x5E
0D3E8:  CLRF   x5F
0D3EA:  CLRF   x60
0D3EC:  CLRF   x61
0D3EE:  CLRF   x62
0D3F0:  CLRF   x63
0D3F2:  CLRF   x64
0D3F4:  CLRF   x65
0D3F6:  CLRF   x66
0D3F8:  CLRF   x67
0D3FA:  CLRF   x68
0D3FC:  CLRF   x69
0D3FE:  CLRF   x6A
0D400:  CLRF   x6B
0D402:  CLRF   x6C
0D404:  CLRF   x6D
0D406:  CLRF   x6E
0D408:  CLRF   x6F
0D40A:  CLRF   x70
0D40C:  CLRF   x71
0D40E:  CLRF   x72
0D410:  CLRF   x73
0D412:  CLRF   x74
0D414:  CLRF   x75
0D416:  CLRF   x76
0D418:  CLRF   x77
0D41A:  CLRF   x78
0D41C:  CLRF   x79
0D41E:  CLRF   x7A
0D420:  CLRF   x7B
0D422:  CLRF   x7C
0D424:  CLRF   x7D
0D426:  CLRF   x7E
0D428:  CLRF   x7F
0D42A:  CLRF   x80
0D42C:  CLRF   x81
0D42E:  CLRF   x82
0D430:  CLRF   x83
0D432:  CLRF   x84
0D434:  CLRF   x85
0D436:  CLRF   x86
0D438:  CLRF   x87
0D43A:  CLRF   x88
0D43C:  CLRF   x89
0D43E:  CLRF   x8A
0D440:  CLRF   x8B
0D442:  CLRF   x8C
0D444:  CLRF   x8D
0D446:  CLRF   x8E
0D448:  CLRF   x8F
0D44A:  CLRF   x90
0D44C:  CLRF   x91
0D44E:  CLRF   x92
0D450:  CLRF   x93
0D452:  CLRF   x94
0D454:  CLRF   x95
0D456:  CLRF   x96
0D458:  CLRF   x97
0D45A:  CLRF   x98
0D45C:  CLRF   x99
0D45E:  CLRF   x9A
0D460:  CLRF   x9B
0D462:  CLRF   x9C
0D464:  CLRF   x9D
0D466:  CLRF   x9E
0D468:  CLRF   x9F
0D46A:  CLRF   xA0
0D46C:  CLRF   xA1
0D46E:  CLRF   xA2
0D470:  CLRF   xA3
0D472:  CLRF   xA4
0D474:  CLRF   xA5
0D476:  CLRF   xA6
0D478:  CLRF   xA7
0D47A:  CLRF   xA8
0D47C:  CLRF   xA9
0D47E:  CLRF   xAA
0D480:  CLRF   xAB
0D482:  CLRF   xAC
0D484:  CLRF   xAD
0D486:  CLRF   xAE
0D488:  CLRF   xAF
0D48A:  CLRF   xB0
0D48C:  CLRF   xB1
0D48E:  CLRF   xB2
0D490:  CLRF   xB3
0D492:  CLRF   xB4
0D494:  CLRF   xB5
0D496:  CLRF   xB6
0D498:  CLRF   xB7
0D49A:  CLRF   xB8
0D49C:  CLRF   xB9
0D49E:  CLRF   xBA
0D4A0:  CLRF   xBB
0D4A2:  CLRF   xBC
0D4A4:  CLRF   xBD
0D4A6:  CLRF   xBE
0D4A8:  CLRF   xBF
0D4AA:  CLRF   xC0
0D4AC:  CLRF   xC1
0D4AE:  CLRF   xC2
0D4B0:  CLRF   xC3
0D4B2:  CLRF   xC4
0D4B4:  CLRF   xC5
0D4B6:  CLRF   xC6
0D4B8:  CLRF   xC7
0D4BA:  CLRF   xC8
0D4BC:  CLRF   xC9
0D4BE:  CLRF   xCA
0D4C0:  CLRF   xCB
0D4C2:  CLRF   xCC
0D4C4:  CLRF   xCD
0D4C6:  CLRF   xCE
0D4C8:  CLRF   xCF
0D4CA:  CLRF   xD0
0D4CC:  CLRF   xD1
0D4CE:  CLRF   xD2
0D4D0:  CLRF   xD3
0D4D2:  CLRF   xD4
0D4D4:  CLRF   xD5
0D4D6:  CLRF   xD6
0D4D8:  CLRF   xD7
0D4DA:  CLRF   xD8
0D4DC:  CLRF   xD9
0D4DE:  CLRF   xDA
0D4E0:  CLRF   xDB
0D4E2:  CLRF   xDC
0D4E4:  CLRF   xDD
0D4E6:  CLRF   xDE
0D4E8:  CLRF   xDF
0D4EA:  CLRF   xE0
0D4EC:  CLRF   xE1
0D4EE:  CLRF   xE2
0D4F0:  CLRF   xE3
0D4F2:  CLRF   xE4
0D4F4:  CLRF   xE5
0D4F6:  CLRF   xE6
0D4F8:  CLRF   xE7
0D4FA:  CLRF   xE8
0D4FC:  CLRF   xE9
0D4FE:  CLRF   xEA
0D500:  CLRF   xEB
0D502:  CLRF   xEC
0D504:  CLRF   xED
0D506:  CLRF   xEE
0D508:  CLRF   xEF
0D50A:  CLRF   xF0
0D50C:  CLRF   xF1
0D50E:  CLRF   xF2
0D510:  CLRF   xF3
0D512:  CLRF   xF4
0D514:  CLRF   xF5
0D516:  CLRF   xF6
0D518:  CLRF   xF7
0D51A:  CLRF   xF8
0D51C:  CLRF   xF9
0D51E:  CLRF   xFA
0D520:  CLRF   xFB
0D522:  CLRF   xFC
0D524:  CLRF   xFD
0D526:  CLRF   xFE
0D528:  CLRF   xFF
0D52A:  MOVLB  9
0D52C:  CLRF   x00
0D52E:  CLRF   x01
0D530:  CLRF   x02
0D532:  CLRF   x03
0D534:  CLRF   x04
0D536:  CLRF   x05
0D538:  CLRF   x06
0D53A:  CLRF   x07
0D53C:  CLRF   x08
0D53E:  CLRF   x09
0D540:  CLRF   x0A
0D542:  CLRF   x0B
0D544:  CLRF   x0C
0D546:  CLRF   x0D
0D548:  CLRF   x0E
0D54A:  CLRF   x0F
0D54C:  CLRF   x10
0D54E:  CLRF   x11
0D550:  CLRF   x12
0D552:  CLRF   x13
0D554:  CLRF   x14
0D556:  CLRF   x15
0D558:  CLRF   x16
0D55A:  CLRF   x17
0D55C:  CLRF   x18
0D55E:  CLRF   x19
0D560:  CLRF   x1A
0D562:  CLRF   x1B
0D564:  CLRF   x1C
0D566:  CLRF   x1D
0D568:  CLRF   x1E
0D56A:  CLRF   x1F
0D56C:  CLRF   x20
0D56E:  CLRF   x21
0D570:  CLRF   x22
0D572:  CLRF   x23
0D574:  CLRF   x24
0D576:  CLRF   x25
0D578:  CLRF   x26
0D57A:  CLRF   x27
0D57C:  CLRF   x28
0D57E:  CLRF   x29
0D580:  CLRF   x2A
0D582:  CLRF   x2B
0D584:  CLRF   x2C
0D586:  CLRF   x2D
0D588:  CLRF   x2E
0D58A:  CLRF   x2F
0D58C:  CLRF   x30
0D58E:  CLRF   x31
0D590:  CLRF   x32
0D592:  CLRF   x33
0D594:  CLRF   x34
0D596:  CLRF   x35
0D598:  CLRF   x36
0D59A:  CLRF   x37
0D59C:  CLRF   x38
0D59E:  CLRF   x39
0D5A0:  CLRF   x3A
0D5A2:  CLRF   x3B
0D5A4:  CLRF   x3C
0D5A6:  CLRF   x3D
0D5A8:  CLRF   x3E
0D5AA:  CLRF   x3F
0D5AC:  CLRF   x40
0D5AE:  CLRF   x41
0D5B0:  CLRF   x42
0D5B2:  CLRF   x43
0D5B4:  CLRF   x44
0D5B6:  CLRF   x45
0D5B8:  CLRF   x46
0D5BA:  CLRF   x47
0D5BC:  CLRF   x48
0D5BE:  CLRF   x49
0D5C0:  CLRF   x4A
0D5C2:  CLRF   x4B
0D5C4:  CLRF   x4C
0D5C6:  CLRF   x4D
0D5C8:  CLRF   x4E
0D5CA:  CLRF   x4F
0D5CC:  CLRF   x50
0D5CE:  CLRF   x51
0D5D0:  CLRF   x52
0D5D2:  CLRF   x53
0D5D4:  CLRF   x54
0D5D6:  CLRF   x55
0D5D8:  CLRF   x56
0D5DA:  CLRF   x57
0D5DC:  CLRF   x58
0D5DE:  CLRF   x59
0D5E0:  CLRF   x5A
0D5E2:  CLRF   x5B
0D5E4:  CLRF   x5C
0D5E6:  CLRF   x5D
0D5E8:  CLRF   x5E
0D5EA:  CLRF   x5F
0D5EC:  CLRF   x60
0D5EE:  CLRF   x61
0D5F0:  CLRF   x62
0D5F2:  CLRF   x63
0D5F4:  CLRF   x64
0D5F6:  CLRF   x65
0D5F8:  CLRF   x66
0D5FA:  CLRF   x67
0D5FC:  CLRF   x68
0D5FE:  CLRF   x69
0D600:  CLRF   x6A
0D602:  CLRF   x6B
0D604:  CLRF   x6C
0D606:  CLRF   x6D
0D608:  CLRF   x6E
0D60A:  CLRF   x6F
0D60C:  CLRF   x70
0D60E:  CLRF   x71
0D610:  CLRF   x72
0D612:  CLRF   x73
0D614:  CLRF   x74
0D616:  CLRF   x75
0D618:  CLRF   x76
0D61A:  CLRF   x77
0D61C:  CLRF   x78
0D61E:  CLRF   x79
0D620:  CLRF   x7A
0D622:  CLRF   x7B
0D624:  CLRF   x7C
0D626:  CLRF   x7D
0D628:  CLRF   x7E
0D62A:  CLRF   x7F
0D62C:  CLRF   x80
0D62E:  CLRF   x81
0D630:  CLRF   x82
0D632:  CLRF   x83
0D634:  CLRF   x84
0D636:  CLRF   x85
0D638:  CLRF   x86
0D63A:  CLRF   x87
0D63C:  CLRF   x88
0D63E:  CLRF   x89
0D640:  CLRF   x8A
0D642:  CLRF   x8B
0D644:  CLRF   x8C
0D646:  CLRF   x8D
0D648:  CLRF   x8E
0D64A:  CLRF   x8F
0D64C:  CLRF   x90
0D64E:  CLRF   x91
0D650:  CLRF   x92
0D652:  CLRF   x93
0D654:  CLRF   x94
0D656:  CLRF   x95
0D658:  CLRF   x96
0D65A:  CLRF   x97
0D65C:  CLRF   x98
0D65E:  CLRF   x99
0D660:  CLRF   x9A
0D662:  CLRF   x9B
0D664:  CLRF   x9C
0D666:  CLRF   x9D
0D668:  CLRF   x9E
0D66A:  CLRF   x9F
0D66C:  CLRF   xA0
0D66E:  CLRF   xA1
0D670:  CLRF   xA2
0D672:  CLRF   xA3
0D674:  CLRF   xA4
0D676:  CLRF   xA5
0D678:  CLRF   xA6
0D67A:  CLRF   xA7
0D67C:  CLRF   xA8
0D67E:  CLRF   xA9
0D680:  CLRF   xAA
0D682:  CLRF   xAB
0D684:  CLRF   xAC
0D686:  CLRF   xAD
0D688:  CLRF   xAE
0D68A:  CLRF   xAF
0D68C:  CLRF   xB0
0D68E:  CLRF   xB1
0D690:  CLRF   xB2
0D692:  CLRF   xB3
0D694:  CLRF   xB4
0D696:  CLRF   xB5
0D698:  CLRF   xB6
0D69A:  CLRF   xB7
0D69C:  CLRF   xB8
0D69E:  CLRF   xB9
0D6A0:  CLRF   xBA
0D6A2:  CLRF   xBB
0D6A4:  CLRF   xBC
0D6A6:  CLRF   xBD
0D6A8:  CLRF   xBE
0D6AA:  CLRF   xBF
0D6AC:  CLRF   xC0
0D6AE:  CLRF   xC1
0D6B0:  CLRF   xC2
0D6B2:  CLRF   xC3
0D6B4:  CLRF   xC4
0D6B6:  CLRF   xC5
0D6B8:  CLRF   xC6
0D6BA:  CLRF   xC7
0D6BC:  CLRF   xC8
0D6BE:  CLRF   xC9
0D6C0:  CLRF   xCA
0D6C2:  CLRF   xCB
0D6C4:  CLRF   xCC
0D6C6:  CLRF   xCD
0D6C8:  CLRF   xCE
0D6CA:  CLRF   xCF
0D6CC:  CLRF   xD0
0D6CE:  CLRF   xD1
0D6D0:  CLRF   xD2
0D6D2:  CLRF   xD3
0D6D4:  CLRF   xD4
0D6D6:  CLRF   xD5
0D6D8:  CLRF   xD6
0D6DA:  CLRF   xD7
0D6DC:  CLRF   xD8
0D6DE:  CLRF   xD9
0D6E0:  CLRF   xDA
0D6E2:  CLRF   xDB
0D6E4:  CLRF   xDC
0D6E6:  CLRF   xDD
0D6E8:  CLRF   xDE
0D6EA:  CLRF   xDF
0D6EC:  CLRF   xE0
0D6EE:  CLRF   xE1
0D6F0:  CLRF   xE2
0D6F2:  CLRF   xE3
0D6F4:  CLRF   xE4
0D6F6:  CLRF   xE5
0D6F8:  CLRF   xE6
0D6FA:  CLRF   xE7
0D6FC:  CLRF   xE8
0D6FE:  CLRF   xE9
0D700:  CLRF   xEA
0D702:  CLRF   xEB
0D704:  CLRF   xEC
0D706:  CLRF   xED
0D708:  CLRF   xEE
0D70A:  CLRF   xEF
0D70C:  CLRF   xF0
....................     port2.port_num = 2; 
0D70E:  MOVLW  02
0D710:  MOVLB  5
0D712:  MOVWF  xF1
....................     port2.sweep_step = 0;
0D714:  CLRF   xF3
0D716:  CLRF   xF2
....................     port2.active = 1;
0D718:  MOVLB  9
0D71A:  BSF    xF0.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0D71C:  CLRF   xF2
0D71E:  MOVLW  01
0D720:  MOVWF  xF1
0D722:  MOVLB  0
0D724:  CALL   8F1C
0D728:  MOVFF  02,03
0D72C:  MOVF   01,W
0D72E:  MOVWF  FE1
0D730:  MOVFF  03,FE2
0D734:  MOVLW  09
0D736:  MOVWF  FEA
0D738:  MOVLW  F3
0D73A:  MOVWF  FE9
0D73C:  MOVLW  0C
0D73E:  MOVWF  01
0D740:  MOVFF  FE6,FEE
0D744:  DECFSZ 01,F
0D746:  GOTO   D740
.................... 
....................     while (port1.active || port2.active)
0D74A:  MOVLB  5
0D74C:  BTFSS  xF0.0
0D74E:  BRA    D756
0D750:  MOVLB  0
0D752:  GOTO   D766
0D756:  MOVLB  0
0D758:  MOVLB  9
0D75A:  BTFSC  xF0.0
0D75C:  BRA    D764
0D75E:  MOVLB  0
0D760:  GOTO   DA56
0D764:  MOVLB  0
....................     {
....................         // 出力設定
....................         if (port1.active) {
0D766:  MOVLB  5
0D768:  BTFSC  xF0.0
0D76A:  BRA    D772
0D76C:  MOVLB  0
0D76E:  GOTO   D784
0D772:  MOVLB  0
....................             mcp4901_1_write(count);
0D774:  MOVFF  9F2,A1B
0D778:  MOVFF  9F1,A1A
0D77C:  CALL   2562
....................         } else {
0D780:  GOTO   D790
....................             mcp4901_1_write(0);  // 閾値到達後は0出力
0D784:  MOVLB  A
0D786:  CLRF   x1B
0D788:  CLRF   x1A
0D78A:  MOVLB  0
0D78C:  CALL   2562
....................         }
.................... 
....................         if (port2.active) {
0D790:  MOVLB  9
0D792:  BTFSC  xF0.0
0D794:  BRA    D79C
0D796:  MOVLB  0
0D798:  GOTO   D7AE
0D79C:  MOVLB  0
....................             mcp4901_2_write(count);
0D79E:  MOVFF  9F2,A1B
0D7A2:  MOVFF  9F1,A1A
0D7A6:  CALL   25A0
....................         } else {
0D7AA:  GOTO   D7BA
....................             mcp4901_2_write(0);
0D7AE:  MOVLB  A
0D7B0:  CLRF   x1B
0D7B2:  CLRF   x1A
0D7B4:  MOVLB  0
0D7B6:  CALL   25A0
....................         }
.................... 
....................         delay_us(100);
0D7BA:  MOVLW  85
0D7BC:  MOVWF  00
0D7BE:  DECFSZ 00,F
0D7C0:  BRA    D7BE
.................... 
....................         // データ取得
....................         if (port1.active) {
0D7C2:  MOVLB  5
0D7C4:  BTFSC  xF0.0
0D7C6:  BRA    D7CE
0D7C8:  MOVLB  0
0D7CA:  GOTO   D8F4
0D7CE:  MOVLB  0
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0D7D0:  MOVLB  9
0D7D2:  RLCF   xF1,W
0D7D4:  MOVWF  02
0D7D6:  RLCF   xF2,W
0D7D8:  MOVWF  03
0D7DA:  RLCF   02,F
0D7DC:  RLCF   03,F
0D7DE:  MOVLW  FC
0D7E0:  ANDWF  02,F
0D7E2:  MOVF   02,W
0D7E4:  ADDLW  F4
0D7E6:  MOVWF  01
0D7E8:  MOVLW  01
0D7EA:  ADDWFC 03,F
0D7EC:  MOVF   01,W
0D7EE:  MOVLB  A
0D7F0:  MOVWF  x0E
0D7F2:  MOVFF  03,A0F
0D7F6:  MOVLW  02
0D7F8:  MOVWF  x2C
0D7FA:  MOVLB  0
0D7FC:  CALL   21B2
0D800:  MOVFF  A0F,FEA
0D804:  MOVFF  A0E,FE9
0D808:  MOVFF  02,FEC
0D80C:  MOVF   FED,F
0D80E:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ad7490_read(ADC_CIGS1_CURR);
0D812:  MOVLB  9
0D814:  RLCF   xF1,W
0D816:  MOVWF  02
0D818:  RLCF   xF2,W
0D81A:  MOVWF  03
0D81C:  RLCF   02,F
0D81E:  RLCF   03,F
0D820:  MOVLW  FC
0D822:  ANDWF  02,F
0D824:  MOVF   02,W
0D826:  ADDLW  03
0D828:  MOVLB  A
0D82A:  MOVWF  x0C
0D82C:  MOVLW  00
0D82E:  ADDWFC 03,W
0D830:  MOVWF  x0D
0D832:  MOVLW  02
0D834:  ADDWF  x0C,W
0D836:  MOVWF  01
0D838:  MOVLW  00
0D83A:  ADDWFC x0D,W
0D83C:  MOVWF  03
0D83E:  MOVF   01,W
0D840:  ADDLW  F1
0D842:  MOVWF  01
0D844:  MOVLW  01
0D846:  ADDWFC 03,F
0D848:  MOVF   01,W
0D84A:  MOVWF  x0C
0D84C:  MOVFF  03,A0D
0D850:  MOVLW  01
0D852:  MOVWF  x2C
0D854:  MOVLB  0
0D856:  CALL   21B2
0D85A:  MOVFF  A0D,FEA
0D85E:  MOVFF  A0C,FE9
0D862:  MOVFF  02,FEC
0D866:  MOVF   FED,F
0D868:  MOVFF  01,FEF
....................             port1.sweep_step = count + 1;
0D86C:  MOVLW  01
0D86E:  MOVLB  9
0D870:  ADDWF  xF1,W
0D872:  MOVLB  1
0D874:  MOVWF  xF2
0D876:  MOVLW  00
0D878:  MOVLB  9
0D87A:  ADDWFC xF2,W
0D87C:  MOVLB  1
0D87E:  MOVWF  xF3
....................             if (port1.data_buffer[count].current < curr_limit) {
0D880:  MOVLB  9
0D882:  RLCF   xF1,W
0D884:  MOVWF  02
0D886:  RLCF   xF2,W
0D888:  MOVWF  03
0D88A:  RLCF   02,F
0D88C:  RLCF   03,F
0D88E:  MOVLW  FC
0D890:  ANDWF  02,F
0D892:  MOVF   02,W
0D894:  ADDLW  03
0D896:  MOVLB  A
0D898:  MOVWF  x0C
0D89A:  MOVLW  00
0D89C:  ADDWFC 03,W
0D89E:  MOVWF  x0D
0D8A0:  MOVLW  02
0D8A2:  ADDWF  x0C,W
0D8A4:  MOVWF  01
0D8A6:  MOVLW  00
0D8A8:  ADDWFC x0D,W
0D8AA:  MOVWF  03
0D8AC:  MOVF   01,W
0D8AE:  ADDLW  F1
0D8B0:  MOVWF  FE9
0D8B2:  MOVLW  01
0D8B4:  ADDWFC 03,W
0D8B6:  MOVWF  FEA
0D8B8:  MOVFF  FEC,A0D
0D8BC:  MOVF   FED,F
0D8BE:  MOVFF  FEF,A0C
0D8C2:  MOVF   x0D,W
0D8C4:  MOVLB  1
0D8C6:  SUBWF  xF0,W
0D8C8:  BTFSC  FD8.0
0D8CA:  BRA    D8D2
0D8CC:  MOVLB  0
0D8CE:  GOTO   D8F4
0D8D2:  MOVLB  0
0D8D4:  BTFSS  FD8.2
0D8D6:  GOTO   D8EE
0D8DA:  MOVLB  1
0D8DC:  MOVF   xEF,W
0D8DE:  MOVLB  A
0D8E0:  SUBWF  x0C,W
0D8E2:  BTFSS  FD8.0
0D8E4:  BRA    D8EC
0D8E6:  MOVLB  0
0D8E8:  GOTO   D8F4
0D8EC:  MOVLB  0
....................                 port1.active = 0;  // 閾値到達で測定終了
0D8EE:  MOVLB  5
0D8F0:  BCF    xF0.0
0D8F2:  MOVLB  0
....................             }
....................         }
.................... 
....................         if (port2.active) {
0D8F4:  MOVLB  9
0D8F6:  BTFSC  xF0.0
0D8F8:  BRA    D900
0D8FA:  MOVLB  0
0D8FC:  GOTO   DA26
0D900:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0D902:  MOVLB  9
0D904:  RLCF   xF1,W
0D906:  MOVWF  02
0D908:  RLCF   xF2,W
0D90A:  MOVWF  03
0D90C:  RLCF   02,F
0D90E:  RLCF   03,F
0D910:  MOVLW  FC
0D912:  ANDWF  02,F
0D914:  MOVF   02,W
0D916:  ADDLW  F4
0D918:  MOVWF  01
0D91A:  MOVLW  05
0D91C:  ADDWFC 03,F
0D91E:  MOVF   01,W
0D920:  MOVLB  A
0D922:  MOVWF  x0E
0D924:  MOVFF  03,A0F
0D928:  MOVLW  06
0D92A:  MOVWF  x2C
0D92C:  MOVLB  0
0D92E:  CALL   21B2
0D932:  MOVFF  A0F,FEA
0D936:  MOVFF  A0E,FE9
0D93A:  MOVFF  02,FEC
0D93E:  MOVF   FED,F
0D940:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0D944:  MOVLB  9
0D946:  RLCF   xF1,W
0D948:  MOVWF  02
0D94A:  RLCF   xF2,W
0D94C:  MOVWF  03
0D94E:  RLCF   02,F
0D950:  RLCF   03,F
0D952:  MOVLW  FC
0D954:  ANDWF  02,F
0D956:  MOVF   02,W
0D958:  ADDLW  03
0D95A:  MOVLB  A
0D95C:  MOVWF  x0C
0D95E:  MOVLW  00
0D960:  ADDWFC 03,W
0D962:  MOVWF  x0D
0D964:  MOVLW  02
0D966:  ADDWF  x0C,W
0D968:  MOVWF  01
0D96A:  MOVLW  00
0D96C:  ADDWFC x0D,W
0D96E:  MOVWF  03
0D970:  MOVF   01,W
0D972:  ADDLW  F1
0D974:  MOVWF  01
0D976:  MOVLW  05
0D978:  ADDWFC 03,F
0D97A:  MOVF   01,W
0D97C:  MOVWF  x0C
0D97E:  MOVFF  03,A0D
0D982:  MOVLW  05
0D984:  MOVWF  x2C
0D986:  MOVLB  0
0D988:  CALL   21B2
0D98C:  MOVFF  A0D,FEA
0D990:  MOVFF  A0C,FE9
0D994:  MOVFF  02,FEC
0D998:  MOVF   FED,F
0D99A:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0D99E:  MOVLW  01
0D9A0:  MOVLB  9
0D9A2:  ADDWF  xF1,W
0D9A4:  MOVLB  5
0D9A6:  MOVWF  xF2
0D9A8:  MOVLW  00
0D9AA:  MOVLB  9
0D9AC:  ADDWFC xF2,W
0D9AE:  MOVLB  5
0D9B0:  MOVWF  xF3
....................             if (port2.data_buffer[count].current < curr_limit) {
0D9B2:  MOVLB  9
0D9B4:  RLCF   xF1,W
0D9B6:  MOVWF  02
0D9B8:  RLCF   xF2,W
0D9BA:  MOVWF  03
0D9BC:  RLCF   02,F
0D9BE:  RLCF   03,F
0D9C0:  MOVLW  FC
0D9C2:  ANDWF  02,F
0D9C4:  MOVF   02,W
0D9C6:  ADDLW  03
0D9C8:  MOVLB  A
0D9CA:  MOVWF  x0C
0D9CC:  MOVLW  00
0D9CE:  ADDWFC 03,W
0D9D0:  MOVWF  x0D
0D9D2:  MOVLW  02
0D9D4:  ADDWF  x0C,W
0D9D6:  MOVWF  01
0D9D8:  MOVLW  00
0D9DA:  ADDWFC x0D,W
0D9DC:  MOVWF  03
0D9DE:  MOVF   01,W
0D9E0:  ADDLW  F1
0D9E2:  MOVWF  FE9
0D9E4:  MOVLW  05
0D9E6:  ADDWFC 03,W
0D9E8:  MOVWF  FEA
0D9EA:  MOVFF  FEC,A0D
0D9EE:  MOVF   FED,F
0D9F0:  MOVFF  FEF,A0C
0D9F4:  MOVF   x0D,W
0D9F6:  MOVLB  1
0D9F8:  SUBWF  xF0,W
0D9FA:  BTFSC  FD8.0
0D9FC:  BRA    DA04
0D9FE:  MOVLB  0
0DA00:  GOTO   DA26
0DA04:  MOVLB  0
0DA06:  BTFSS  FD8.2
0DA08:  GOTO   DA20
0DA0C:  MOVLB  1
0DA0E:  MOVF   xEF,W
0DA10:  MOVLB  A
0DA12:  SUBWF  x0C,W
0DA14:  BTFSS  FD8.0
0DA16:  BRA    DA1E
0DA18:  MOVLB  0
0DA1A:  GOTO   DA26
0DA1E:  MOVLB  0
....................                 port2.active = 0;
0DA20:  MOVLB  9
0DA22:  BCF    xF0.0
0DA24:  MOVLB  0
....................             }
....................         }
.................... 
....................         count++;
0DA26:  MOVLB  9
0DA28:  INCF   xF1,F
0DA2A:  BTFSC  FD8.2
0DA2C:  INCF   xF2,F
....................         if (count >= 255) {
0DA2E:  MOVF   xF2,F
0DA30:  BTFSC  FD8.2
0DA32:  BRA    DA3A
0DA34:  MOVLB  0
0DA36:  GOTO   DA4E
0DA3A:  MOVLB  0
0DA3C:  MOVLB  9
0DA3E:  MOVF   xF1,W
0DA40:  SUBLW  FE
0DA42:  BTFSS  FD8.0
0DA44:  BRA    DA4C
0DA46:  MOVLB  0
0DA48:  GOTO   DA52
0DA4C:  MOVLB  0
....................             break;
0DA4E:  GOTO   DA56
....................         }
0DA52:  GOTO   D74A
....................     }
.................... 
....................     fprintf(PC, "temp_top:%04LX\r\n", measured_data.temp_py_top);
0DA56:  MOVLW  8A
0DA58:  MOVWF  FF6
0DA5A:  MOVLW  06
0DA5C:  MOVWF  FF7
0DA5E:  MOVLW  00
0DA60:  MOVWF  FF8
0DA62:  MOVLW  09
0DA64:  MOVLB  A
0DA66:  MOVWF  x0C
0DA68:  MOVLB  0
0DA6A:  CALL   2026
0DA6E:  MOVFF  9FA,A26
0DA72:  MOVLW  37
0DA74:  MOVLB  A
0DA76:  MOVWF  x27
0DA78:  MOVLB  0
0DA7A:  CALL   2232
0DA7E:  MOVFF  9F9,A26
0DA82:  MOVLW  37
0DA84:  MOVLB  A
0DA86:  MOVWF  x27
0DA88:  MOVLB  0
0DA8A:  CALL   2232
0DA8E:  MOVLW  0D
0DA90:  BTFSS  FA6.6
0DA92:  GOTO   DA90
0DA96:  MOVLB  E
0DA98:  MOVWF  xF9
0DA9A:  MOVLW  0A
0DA9C:  MOVLB  0
0DA9E:  BTFSS  FA6.6
0DAA0:  GOTO   DA9E
0DAA4:  MOVLB  E
0DAA6:  MOVWF  xF9
....................     fprintf(PC, "temp_bot:%04LX\r\n", measured_data.temp_py_bot);
0DAA8:  MOVLW  9C
0DAAA:  MOVWF  FF6
0DAAC:  MOVLW  06
0DAAE:  MOVWF  FF7
0DAB0:  MOVLW  00
0DAB2:  MOVWF  FF8
0DAB4:  MOVLW  09
0DAB6:  MOVLB  A
0DAB8:  MOVWF  x0C
0DABA:  MOVLB  0
0DABC:  CALL   2026
0DAC0:  MOVFF  9FC,A26
0DAC4:  MOVLW  37
0DAC6:  MOVLB  A
0DAC8:  MOVWF  x27
0DACA:  MOVLB  0
0DACC:  CALL   2232
0DAD0:  MOVFF  9FB,A26
0DAD4:  MOVLW  37
0DAD6:  MOVLB  A
0DAD8:  MOVWF  x27
0DADA:  MOVLB  0
0DADC:  CALL   2232
0DAE0:  MOVLW  0D
0DAE2:  BTFSS  FA6.6
0DAE4:  GOTO   DAE2
0DAE8:  MOVLB  E
0DAEA:  MOVWF  xF9
0DAEC:  MOVLW  0A
0DAEE:  MOVLB  0
0DAF0:  BTFSS  FA6.6
0DAF2:  GOTO   DAF0
0DAF6:  MOVLB  E
0DAF8:  MOVWF  xF9
....................     fprintf(PC, "temp_mis7:%04LX\r\n", measured_data.temp_mis7);
0DAFA:  MOVLW  AE
0DAFC:  MOVWF  FF6
0DAFE:  MOVLW  06
0DB00:  MOVWF  FF7
0DB02:  MOVLW  00
0DB04:  MOVWF  FF8
0DB06:  MOVLW  0A
0DB08:  MOVLB  A
0DB0A:  MOVWF  x0C
0DB0C:  MOVLB  0
0DB0E:  CALL   2026
0DB12:  MOVFF  9FE,A26
0DB16:  MOVLW  37
0DB18:  MOVLB  A
0DB1A:  MOVWF  x27
0DB1C:  MOVLB  0
0DB1E:  CALL   2232
0DB22:  MOVFF  9FD,A26
0DB26:  MOVLW  37
0DB28:  MOVLB  A
0DB2A:  MOVWF  x27
0DB2C:  MOVLB  0
0DB2E:  CALL   2232
0DB32:  MOVLW  0D
0DB34:  BTFSS  FA6.6
0DB36:  GOTO   DB34
0DB3A:  MOVLB  E
0DB3C:  MOVWF  xF9
0DB3E:  MOVLW  0A
0DB40:  MOVLB  0
0DB42:  BTFSS  FA6.6
0DB44:  GOTO   DB42
0DB48:  MOVLB  E
0DB4A:  MOVWF  xF9
....................     fprintf(PC, "pd:%04LX\r\n", measured_data.pd);
0DB4C:  MOVLW  C0
0DB4E:  MOVWF  FF6
0DB50:  MOVLW  06
0DB52:  MOVWF  FF7
0DB54:  MOVLW  00
0DB56:  MOVWF  FF8
0DB58:  MOVLW  03
0DB5A:  MOVLB  A
0DB5C:  MOVWF  x0C
0DB5E:  MOVLB  0
0DB60:  CALL   2026
0DB64:  MOVFF  9F8,A26
0DB68:  MOVLW  37
0DB6A:  MOVLB  A
0DB6C:  MOVWF  x27
0DB6E:  MOVLB  0
0DB70:  CALL   2232
0DB74:  MOVFF  9F7,A26
0DB78:  MOVLW  37
0DB7A:  MOVLB  A
0DB7C:  MOVWF  x27
0DB7E:  MOVLB  0
0DB80:  CALL   2232
0DB84:  MOVLW  0D
0DB86:  BTFSS  FA6.6
0DB88:  GOTO   DB86
0DB8C:  MOVLB  E
0DB8E:  MOVWF  xF9
0DB90:  MOVLW  0A
0DB92:  MOVLB  0
0DB94:  BTFSS  FA6.6
0DB96:  GOTO   DB94
0DB9A:  MOVLB  E
0DB9C:  MOVWF  xF9
....................     // Print I-V data
....................     fprintf(PC, "Volt1,Curr1,Volt2,Curr2\r\n");
0DB9E:  MOVLW  CC
0DBA0:  MOVWF  FF6
0DBA2:  MOVLW  06
0DBA4:  MOVWF  FF7
0DBA6:  MOVLW  00
0DBA8:  MOVWF  FF8
0DBAA:  MOVLB  0
0DBAC:  CALL   1FF0
....................     for (int i = 0; i < count; i++) {
0DBB0:  MOVLB  9
0DBB2:  CLRF   xFF
0DBB4:  MOVLB  0
0DBB6:  MOVLB  9
0DBB8:  MOVF   xF2,F
0DBBA:  BTFSC  FD8.2
0DBBC:  BRA    DBC4
0DBBE:  MOVLB  0
0DBC0:  GOTO   DBD8
0DBC4:  MOVLB  0
0DBC6:  MOVLB  9
0DBC8:  MOVF   xF1,W
0DBCA:  SUBWF  xFF,W
0DBCC:  BTFSS  FD8.0
0DBCE:  BRA    DBD6
0DBD0:  MOVLB  0
0DBD2:  GOTO   DD8A
0DBD6:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0DBD8:  MOVLB  A
0DBDA:  CLRF   x9C
0DBDC:  MOVFF  9FF,A9B
0DBE0:  CLRF   x9E
0DBE2:  MOVLW  04
0DBE4:  MOVWF  x9D
0DBE6:  MOVLB  0
0DBE8:  CALL   7FF4
0DBEC:  MOVFF  02,03
0DBF0:  MOVF   01,W
0DBF2:  ADDLW  F4
0DBF4:  MOVWF  FE9
0DBF6:  MOVLW  01
0DBF8:  ADDWFC 03,W
0DBFA:  MOVWF  FEA
0DBFC:  MOVFF  FEC,A0F
0DC00:  MOVF   FED,F
0DC02:  MOVFF  FEF,A0E
0DC06:  MOVLB  A
0DC08:  CLRF   x9C
0DC0A:  MOVFF  9FF,A9B
0DC0E:  CLRF   x9E
0DC10:  MOVLW  04
0DC12:  MOVWF  x9D
0DC14:  MOVLB  0
0DC16:  CALL   7FF4
0DC1A:  MOVFF  02,03
0DC1E:  MOVF   01,W
0DC20:  ADDLW  03
0DC22:  MOVLB  A
0DC24:  MOVWF  x10
0DC26:  MOVLW  00
0DC28:  ADDWFC 03,W
0DC2A:  MOVWF  x11
0DC2C:  MOVLW  02
0DC2E:  ADDWF  x10,W
0DC30:  MOVWF  01
0DC32:  MOVLW  00
0DC34:  ADDWFC x11,W
0DC36:  MOVWF  03
0DC38:  MOVF   01,W
0DC3A:  ADDLW  F1
0DC3C:  MOVWF  FE9
0DC3E:  MOVLW  01
0DC40:  ADDWFC 03,W
0DC42:  MOVWF  FEA
0DC44:  MOVFF  FEC,A11
0DC48:  MOVF   FED,F
0DC4A:  MOVFF  FEF,A10
0DC4E:  CLRF   x9C
0DC50:  MOVFF  9FF,A9B
0DC54:  CLRF   x9E
0DC56:  MOVLW  04
0DC58:  MOVWF  x9D
0DC5A:  MOVLB  0
0DC5C:  CALL   7FF4
0DC60:  MOVFF  02,03
0DC64:  MOVF   01,W
0DC66:  ADDLW  F4
0DC68:  MOVWF  FE9
0DC6A:  MOVLW  05
0DC6C:  ADDWFC 03,W
0DC6E:  MOVWF  FEA
0DC70:  MOVFF  FEC,A15
0DC74:  MOVF   FED,F
0DC76:  MOVFF  FEF,A14
0DC7A:  MOVLB  A
0DC7C:  CLRF   x9C
0DC7E:  MOVFF  9FF,A9B
0DC82:  CLRF   x9E
0DC84:  MOVLW  04
0DC86:  MOVWF  x9D
0DC88:  MOVLB  0
0DC8A:  CALL   7FF4
0DC8E:  MOVFF  02,03
0DC92:  MOVF   01,W
0DC94:  ADDLW  03
0DC96:  MOVLB  A
0DC98:  MOVWF  x16
0DC9A:  MOVLW  00
0DC9C:  ADDWFC 03,W
0DC9E:  MOVWF  x17
0DCA0:  MOVLW  02
0DCA2:  ADDWF  x16,W
0DCA4:  MOVWF  01
0DCA6:  MOVLW  00
0DCA8:  ADDWFC x17,W
0DCAA:  MOVWF  03
0DCAC:  MOVF   01,W
0DCAE:  ADDLW  F1
0DCB0:  MOVWF  FE9
0DCB2:  MOVLW  05
0DCB4:  ADDWFC 03,W
0DCB6:  MOVWF  FEA
0DCB8:  MOVFF  FEC,A17
0DCBC:  MOVF   FED,F
0DCBE:  MOVFF  FEF,A16
0DCC2:  MOVFF  A0F,A26
0DCC6:  MOVLW  37
0DCC8:  MOVWF  x27
0DCCA:  MOVLB  0
0DCCC:  CALL   2232
0DCD0:  MOVFF  A0E,A26
0DCD4:  MOVLW  37
0DCD6:  MOVLB  A
0DCD8:  MOVWF  x27
0DCDA:  MOVLB  0
0DCDC:  CALL   2232
0DCE0:  MOVLW  2C
0DCE2:  BTFSS  FA6.6
0DCE4:  GOTO   DCE2
0DCE8:  MOVLB  E
0DCEA:  MOVWF  xF9
0DCEC:  MOVFF  A11,A26
0DCF0:  MOVLW  37
0DCF2:  MOVLB  A
0DCF4:  MOVWF  x27
0DCF6:  MOVLB  0
0DCF8:  CALL   2232
0DCFC:  MOVFF  A10,A26
0DD00:  MOVLW  37
0DD02:  MOVLB  A
0DD04:  MOVWF  x27
0DD06:  MOVLB  0
0DD08:  CALL   2232
0DD0C:  MOVLW  2C
0DD0E:  BTFSS  FA6.6
0DD10:  GOTO   DD0E
0DD14:  MOVLB  E
0DD16:  MOVWF  xF9
0DD18:  MOVFF  A15,A26
0DD1C:  MOVLW  37
0DD1E:  MOVLB  A
0DD20:  MOVWF  x27
0DD22:  MOVLB  0
0DD24:  CALL   2232
0DD28:  MOVFF  A14,A26
0DD2C:  MOVLW  37
0DD2E:  MOVLB  A
0DD30:  MOVWF  x27
0DD32:  MOVLB  0
0DD34:  CALL   2232
0DD38:  MOVLW  2C
0DD3A:  BTFSS  FA6.6
0DD3C:  GOTO   DD3A
0DD40:  MOVLB  E
0DD42:  MOVWF  xF9
0DD44:  MOVFF  A17,A26
0DD48:  MOVLW  37
0DD4A:  MOVLB  A
0DD4C:  MOVWF  x27
0DD4E:  MOVLB  0
0DD50:  CALL   2232
0DD54:  MOVFF  A16,A26
0DD58:  MOVLW  37
0DD5A:  MOVLB  A
0DD5C:  MOVWF  x27
0DD5E:  MOVLB  0
0DD60:  CALL   2232
0DD64:  MOVLW  0D
0DD66:  BTFSS  FA6.6
0DD68:  GOTO   DD66
0DD6C:  MOVLB  E
0DD6E:  MOVWF  xF9
0DD70:  MOVLW  0A
0DD72:  MOVLB  0
0DD74:  BTFSS  FA6.6
0DD76:  GOTO   DD74
0DD7A:  MOVLB  E
0DD7C:  MOVWF  xF9
0DD7E:  MOVLB  0
0DD80:  MOVLB  9
0DD82:  INCF   xFF,F
0DD84:  MOVLB  0
0DD86:  GOTO   DBB6
....................     }
....................     log_meas_data(&measured_data, &port1);
0DD8A:  MOVLW  09
0DD8C:  MOVLB  A
0DD8E:  MOVWF  x0D
0DD90:  MOVLW  F3
0DD92:  MOVWF  x0C
0DD94:  MOVLW  01
0DD96:  MOVWF  x0F
0DD98:  MOVLW  F1
0DD9A:  MOVWF  x0E
0DD9C:  MOVLB  0
0DD9E:  CALL   8FAE
....................     log_meas_data(&measured_data, &port2);
0DDA2:  MOVLW  09
0DDA4:  MOVLB  A
0DDA6:  MOVWF  x0D
0DDA8:  MOVLW  F3
0DDAA:  MOVWF  x0C
0DDAC:  MOVLW  05
0DDAE:  MOVWF  x0F
0DDB0:  MOVLW  F1
0DDB2:  MOVWF  x0E
0DDB4:  MOVLB  0
0DDB6:  CALL   8FAE
....................     misf_update_address_area();
0DDBA:  CALL   4DE6
.................... 
.................... 
.................... 
....................    FlashOperationStruct data1 = {0};
0DDBE:  MOVLB  A
0DDC0:  CLRF   x00
0DDC2:  CLRF   x01
0DDC4:  CLRF   x02
0DDC6:  CLRF   x03
0DDC8:  CLRF   x04
0DDCA:  CLRF   x05
0DDCC:  CLRF   x06
0DDCE:  CLRF   x07
0DDD0:  CLRF   x08
0DDD2:  CLRF   x09
0DDD4:  CLRF   x0A
0DDD6:  CLRF   x0B
....................    data1.func_type = ENUM_SMF_WRITE;
0DDD8:  CLRF   x01
....................    data1.mission_id = FLASH_ID_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0DDDA:  MOVLW  04
0DDDC:  MOVWF  x00
....................    data1.write_mode = SMF_WRITE_CIRCULAR;
0DDDE:  MOVLW  02
0DDE0:  MOVWF  x02
....................    data1.source_type = SOURCE_MISF_UNCOPIED;
0DDE2:  BCF    x03.0
....................    enqueue_flash_operation(&data1); // SMFへのデータコピーを実行する
0DDE4:  MOVLW  0A
0DDE6:  MOVWF  x0D
0DDE8:  CLRF   x0C
0DDEA:  MOVLB  0
0DDEC:  CALL   A506
.................... 
.................... 
....................    data1.func_type = ENUM_SMF_WRITE;
0DDF0:  MOVLB  A
0DDF2:  CLRF   x01
....................    data1.mission_id = FLASH_ID_IV2_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0DDF4:  MOVLW  06
0DDF6:  MOVWF  x00
....................    data1.write_mode = SMF_WRITE_CIRCULAR;
0DDF8:  MOVLW  02
0DDFA:  MOVWF  x02
....................    data1.source_type = SOURCE_MISF_UNCOPIED;
0DDFC:  BCF    x03.0
....................    enqueue_flash_operation(&data1); // SMFへのデータコピーを実行する
0DDFE:  MOVLW  0A
0DE00:  MOVWF  x0D
0DE02:  CLRF   x0C
0DE04:  MOVLB  0
0DE06:  CALL   A506
0DE0A:  GOTO   E44C (RETURN)
.................... 
.................... 
.................... }
.................... 
.................... 
.................... 
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit)
.................... {
....................     fprintf(PC, ".");
*
0AD60:  MOVLW  2E
0AD62:  BTFSS  FA6.6
0AD64:  GOTO   AD62
0AD68:  MOVLB  E
0AD6A:  MOVWF  xF9
....................     
....................     
....................     connect_port1();
0AD6C:  MOVLB  0
0AD6E:  CALL   4F9E
....................     connect_port2();
0AD72:  CALL   4FA6
....................     // Enable both CIGS ports
....................     mcp4901_1_write(0); 
0AD76:  MOVLB  A
0AD78:  CLRF   x1B
0AD7A:  CLRF   x1A
0AD7C:  MOVLB  0
0AD7E:  CALL   2562
....................     mcp4901_2_write(0);
0AD82:  MOVLB  A
0AD84:  CLRF   x1B
0AD86:  CLRF   x1A
0AD88:  MOVLB  0
0AD8A:  CALL   25A0
....................     connect_port1();
0AD8E:  CALL   4F9E
....................     connect_port2();
0AD92:  CALL   4FA6
.................... 
....................     // Stabilization wait
....................     delay_ms(100);
0AD96:  MOVLW  64
0AD98:  MOVLB  B
0AD9A:  MOVWF  x4C
0AD9C:  MOVLB  0
0AD9E:  CALL   1FC2
....................     
....................     // Init Port1
....................     sweep_debug_config_t port1 = {0};
0ADA2:  MOVLB  2
0ADA4:  CLRF   x07
0ADA6:  CLRF   x08
0ADA8:  CLRF   x09
0ADAA:  CLRF   x0A
0ADAC:  CLRF   x0B
0ADAE:  CLRF   x0C
0ADB0:  CLRF   x0D
0ADB2:  CLRF   x0E
0ADB4:  CLRF   x0F
0ADB6:  CLRF   x10
0ADB8:  CLRF   x11
0ADBA:  CLRF   x12
0ADBC:  CLRF   x13
0ADBE:  CLRF   x14
0ADC0:  CLRF   x15
0ADC2:  CLRF   x16
0ADC4:  CLRF   x17
0ADC6:  CLRF   x18
0ADC8:  CLRF   x19
0ADCA:  CLRF   x1A
0ADCC:  CLRF   x1B
0ADCE:  CLRF   x1C
0ADD0:  CLRF   x1D
0ADD2:  CLRF   x1E
0ADD4:  CLRF   x1F
0ADD6:  CLRF   x20
0ADD8:  CLRF   x21
0ADDA:  CLRF   x22
0ADDC:  CLRF   x23
0ADDE:  CLRF   x24
0ADE0:  CLRF   x25
0ADE2:  CLRF   x26
0ADE4:  CLRF   x27
0ADE6:  CLRF   x28
0ADE8:  CLRF   x29
0ADEA:  CLRF   x2A
0ADEC:  CLRF   x2B
0ADEE:  CLRF   x2C
0ADF0:  CLRF   x2D
0ADF2:  CLRF   x2E
0ADF4:  CLRF   x2F
0ADF6:  CLRF   x30
0ADF8:  CLRF   x31
0ADFA:  CLRF   x32
0ADFC:  CLRF   x33
0ADFE:  CLRF   x34
0AE00:  CLRF   x35
0AE02:  CLRF   x36
0AE04:  CLRF   x37
0AE06:  CLRF   x38
0AE08:  CLRF   x39
0AE0A:  CLRF   x3A
0AE0C:  CLRF   x3B
0AE0E:  CLRF   x3C
0AE10:  CLRF   x3D
0AE12:  CLRF   x3E
0AE14:  CLRF   x3F
0AE16:  CLRF   x40
0AE18:  CLRF   x41
0AE1A:  CLRF   x42
0AE1C:  CLRF   x43
0AE1E:  CLRF   x44
0AE20:  CLRF   x45
0AE22:  CLRF   x46
0AE24:  CLRF   x47
0AE26:  CLRF   x48
0AE28:  CLRF   x49
0AE2A:  CLRF   x4A
0AE2C:  CLRF   x4B
0AE2E:  CLRF   x4C
0AE30:  CLRF   x4D
0AE32:  CLRF   x4E
0AE34:  CLRF   x4F
0AE36:  CLRF   x50
0AE38:  CLRF   x51
0AE3A:  CLRF   x52
0AE3C:  CLRF   x53
0AE3E:  CLRF   x54
0AE40:  CLRF   x55
0AE42:  CLRF   x56
0AE44:  CLRF   x57
0AE46:  CLRF   x58
0AE48:  CLRF   x59
0AE4A:  CLRF   x5A
0AE4C:  CLRF   x5B
0AE4E:  CLRF   x5C
0AE50:  CLRF   x5D
0AE52:  CLRF   x5E
0AE54:  CLRF   x5F
0AE56:  CLRF   x60
0AE58:  CLRF   x61
0AE5A:  CLRF   x62
0AE5C:  CLRF   x63
0AE5E:  CLRF   x64
0AE60:  CLRF   x65
0AE62:  CLRF   x66
0AE64:  CLRF   x67
0AE66:  CLRF   x68
0AE68:  CLRF   x69
0AE6A:  CLRF   x6A
0AE6C:  CLRF   x6B
0AE6E:  CLRF   x6C
0AE70:  CLRF   x6D
0AE72:  CLRF   x6E
0AE74:  CLRF   x6F
0AE76:  CLRF   x70
0AE78:  CLRF   x71
0AE7A:  CLRF   x72
0AE7C:  CLRF   x73
0AE7E:  CLRF   x74
0AE80:  CLRF   x75
0AE82:  CLRF   x76
0AE84:  CLRF   x77
0AE86:  CLRF   x78
0AE88:  CLRF   x79
0AE8A:  CLRF   x7A
0AE8C:  CLRF   x7B
0AE8E:  CLRF   x7C
0AE90:  CLRF   x7D
0AE92:  CLRF   x7E
0AE94:  CLRF   x7F
0AE96:  CLRF   x80
0AE98:  CLRF   x81
0AE9A:  CLRF   x82
0AE9C:  CLRF   x83
0AE9E:  CLRF   x84
0AEA0:  CLRF   x85
0AEA2:  CLRF   x86
0AEA4:  CLRF   x87
0AEA6:  CLRF   x88
0AEA8:  CLRF   x89
0AEAA:  CLRF   x8A
0AEAC:  CLRF   x8B
0AEAE:  CLRF   x8C
0AEB0:  CLRF   x8D
0AEB2:  CLRF   x8E
0AEB4:  CLRF   x8F
0AEB6:  CLRF   x90
0AEB8:  CLRF   x91
0AEBA:  CLRF   x92
0AEBC:  CLRF   x93
0AEBE:  CLRF   x94
0AEC0:  CLRF   x95
0AEC2:  CLRF   x96
0AEC4:  CLRF   x97
0AEC6:  CLRF   x98
0AEC8:  CLRF   x99
0AECA:  CLRF   x9A
0AECC:  CLRF   x9B
0AECE:  CLRF   x9C
0AED0:  CLRF   x9D
0AED2:  CLRF   x9E
0AED4:  CLRF   x9F
0AED6:  CLRF   xA0
0AED8:  CLRF   xA1
0AEDA:  CLRF   xA2
0AEDC:  CLRF   xA3
0AEDE:  CLRF   xA4
0AEE0:  CLRF   xA5
0AEE2:  CLRF   xA6
0AEE4:  CLRF   xA7
0AEE6:  CLRF   xA8
0AEE8:  CLRF   xA9
0AEEA:  CLRF   xAA
0AEEC:  CLRF   xAB
0AEEE:  CLRF   xAC
0AEF0:  CLRF   xAD
0AEF2:  CLRF   xAE
0AEF4:  CLRF   xAF
0AEF6:  CLRF   xB0
0AEF8:  CLRF   xB1
0AEFA:  CLRF   xB2
0AEFC:  CLRF   xB3
0AEFE:  CLRF   xB4
0AF00:  CLRF   xB5
0AF02:  CLRF   xB6
0AF04:  CLRF   xB7
0AF06:  CLRF   xB8
0AF08:  CLRF   xB9
0AF0A:  CLRF   xBA
0AF0C:  CLRF   xBB
0AF0E:  CLRF   xBC
0AF10:  CLRF   xBD
0AF12:  CLRF   xBE
0AF14:  CLRF   xBF
0AF16:  CLRF   xC0
0AF18:  CLRF   xC1
0AF1A:  CLRF   xC2
0AF1C:  CLRF   xC3
0AF1E:  CLRF   xC4
0AF20:  CLRF   xC5
0AF22:  CLRF   xC6
0AF24:  CLRF   xC7
0AF26:  CLRF   xC8
0AF28:  CLRF   xC9
0AF2A:  CLRF   xCA
0AF2C:  CLRF   xCB
0AF2E:  CLRF   xCC
0AF30:  CLRF   xCD
0AF32:  CLRF   xCE
0AF34:  CLRF   xCF
0AF36:  CLRF   xD0
0AF38:  CLRF   xD1
0AF3A:  CLRF   xD2
0AF3C:  CLRF   xD3
0AF3E:  CLRF   xD4
0AF40:  CLRF   xD5
0AF42:  CLRF   xD6
0AF44:  CLRF   xD7
0AF46:  CLRF   xD8
0AF48:  CLRF   xD9
0AF4A:  CLRF   xDA
0AF4C:  CLRF   xDB
0AF4E:  CLRF   xDC
0AF50:  CLRF   xDD
0AF52:  CLRF   xDE
0AF54:  CLRF   xDF
0AF56:  CLRF   xE0
0AF58:  CLRF   xE1
0AF5A:  CLRF   xE2
0AF5C:  CLRF   xE3
0AF5E:  CLRF   xE4
0AF60:  CLRF   xE5
0AF62:  CLRF   xE6
0AF64:  CLRF   xE7
0AF66:  CLRF   xE8
0AF68:  CLRF   xE9
0AF6A:  CLRF   xEA
0AF6C:  CLRF   xEB
0AF6E:  CLRF   xEC
0AF70:  CLRF   xED
0AF72:  CLRF   xEE
0AF74:  CLRF   xEF
0AF76:  CLRF   xF0
0AF78:  CLRF   xF1
0AF7A:  CLRF   xF2
0AF7C:  CLRF   xF3
0AF7E:  CLRF   xF4
0AF80:  CLRF   xF5
0AF82:  CLRF   xF6
0AF84:  CLRF   xF7
0AF86:  CLRF   xF8
0AF88:  CLRF   xF9
0AF8A:  CLRF   xFA
0AF8C:  CLRF   xFB
0AF8E:  CLRF   xFC
0AF90:  CLRF   xFD
0AF92:  CLRF   xFE
0AF94:  CLRF   xFF
0AF96:  MOVLB  3
0AF98:  CLRF   x00
0AF9A:  CLRF   x01
0AF9C:  CLRF   x02
0AF9E:  CLRF   x03
0AFA0:  CLRF   x04
0AFA2:  CLRF   x05
0AFA4:  CLRF   x06
0AFA6:  CLRF   x07
0AFA8:  CLRF   x08
0AFAA:  CLRF   x09
0AFAC:  CLRF   x0A
0AFAE:  CLRF   x0B
0AFB0:  CLRF   x0C
0AFB2:  CLRF   x0D
0AFB4:  CLRF   x0E
0AFB6:  CLRF   x0F
0AFB8:  CLRF   x10
0AFBA:  CLRF   x11
0AFBC:  CLRF   x12
0AFBE:  CLRF   x13
0AFC0:  CLRF   x14
0AFC2:  CLRF   x15
0AFC4:  CLRF   x16
0AFC6:  CLRF   x17
0AFC8:  CLRF   x18
0AFCA:  CLRF   x19
0AFCC:  CLRF   x1A
0AFCE:  CLRF   x1B
0AFD0:  CLRF   x1C
0AFD2:  CLRF   x1D
0AFD4:  CLRF   x1E
0AFD6:  CLRF   x1F
0AFD8:  CLRF   x20
0AFDA:  CLRF   x21
0AFDC:  CLRF   x22
0AFDE:  CLRF   x23
0AFE0:  CLRF   x24
0AFE2:  CLRF   x25
0AFE4:  CLRF   x26
0AFE6:  CLRF   x27
0AFE8:  CLRF   x28
0AFEA:  CLRF   x29
0AFEC:  CLRF   x2A
0AFEE:  CLRF   x2B
0AFF0:  CLRF   x2C
0AFF2:  CLRF   x2D
0AFF4:  CLRF   x2E
0AFF6:  CLRF   x2F
0AFF8:  CLRF   x30
0AFFA:  CLRF   x31
0AFFC:  CLRF   x32
0AFFE:  CLRF   x33
0B000:  CLRF   x34
0B002:  CLRF   x35
0B004:  CLRF   x36
0B006:  CLRF   x37
0B008:  CLRF   x38
0B00A:  CLRF   x39
0B00C:  CLRF   x3A
0B00E:  CLRF   x3B
0B010:  CLRF   x3C
0B012:  CLRF   x3D
0B014:  CLRF   x3E
0B016:  CLRF   x3F
0B018:  CLRF   x40
0B01A:  CLRF   x41
0B01C:  CLRF   x42
0B01E:  CLRF   x43
0B020:  CLRF   x44
0B022:  CLRF   x45
0B024:  CLRF   x46
0B026:  CLRF   x47
0B028:  CLRF   x48
0B02A:  CLRF   x49
0B02C:  CLRF   x4A
0B02E:  CLRF   x4B
0B030:  CLRF   x4C
0B032:  CLRF   x4D
0B034:  CLRF   x4E
0B036:  CLRF   x4F
0B038:  CLRF   x50
0B03A:  CLRF   x51
0B03C:  CLRF   x52
0B03E:  CLRF   x53
0B040:  CLRF   x54
0B042:  CLRF   x55
0B044:  CLRF   x56
0B046:  CLRF   x57
0B048:  CLRF   x58
0B04A:  CLRF   x59
0B04C:  CLRF   x5A
0B04E:  CLRF   x5B
0B050:  CLRF   x5C
0B052:  CLRF   x5D
0B054:  CLRF   x5E
0B056:  CLRF   x5F
0B058:  CLRF   x60
0B05A:  CLRF   x61
0B05C:  CLRF   x62
0B05E:  CLRF   x63
0B060:  CLRF   x64
0B062:  CLRF   x65
0B064:  CLRF   x66
0B066:  CLRF   x67
0B068:  CLRF   x68
0B06A:  CLRF   x69
0B06C:  CLRF   x6A
0B06E:  CLRF   x6B
0B070:  CLRF   x6C
0B072:  CLRF   x6D
0B074:  CLRF   x6E
0B076:  CLRF   x6F
0B078:  CLRF   x70
0B07A:  CLRF   x71
0B07C:  CLRF   x72
0B07E:  CLRF   x73
0B080:  CLRF   x74
0B082:  CLRF   x75
0B084:  CLRF   x76
0B086:  CLRF   x77
0B088:  CLRF   x78
0B08A:  CLRF   x79
0B08C:  CLRF   x7A
0B08E:  CLRF   x7B
0B090:  CLRF   x7C
0B092:  CLRF   x7D
0B094:  CLRF   x7E
0B096:  CLRF   x7F
0B098:  CLRF   x80
0B09A:  CLRF   x81
0B09C:  CLRF   x82
0B09E:  CLRF   x83
0B0A0:  CLRF   x84
0B0A2:  CLRF   x85
0B0A4:  CLRF   x86
0B0A6:  CLRF   x87
0B0A8:  CLRF   x88
0B0AA:  CLRF   x89
0B0AC:  CLRF   x8A
0B0AE:  CLRF   x8B
0B0B0:  CLRF   x8C
0B0B2:  CLRF   x8D
0B0B4:  CLRF   x8E
0B0B6:  CLRF   x8F
0B0B8:  CLRF   x90
0B0BA:  CLRF   x91
0B0BC:  CLRF   x92
0B0BE:  CLRF   x93
0B0C0:  CLRF   x94
0B0C2:  CLRF   x95
0B0C4:  CLRF   x96
0B0C6:  CLRF   x97
0B0C8:  CLRF   x98
0B0CA:  CLRF   x99
0B0CC:  CLRF   x9A
0B0CE:  CLRF   x9B
0B0D0:  CLRF   x9C
0B0D2:  CLRF   x9D
0B0D4:  CLRF   x9E
0B0D6:  CLRF   x9F
0B0D8:  CLRF   xA0
0B0DA:  CLRF   xA1
0B0DC:  CLRF   xA2
0B0DE:  CLRF   xA3
0B0E0:  CLRF   xA4
0B0E2:  CLRF   xA5
0B0E4:  CLRF   xA6
0B0E6:  CLRF   xA7
0B0E8:  CLRF   xA8
0B0EA:  CLRF   xA9
0B0EC:  CLRF   xAA
0B0EE:  CLRF   xAB
0B0F0:  CLRF   xAC
0B0F2:  CLRF   xAD
0B0F4:  CLRF   xAE
0B0F6:  CLRF   xAF
0B0F8:  CLRF   xB0
0B0FA:  CLRF   xB1
0B0FC:  CLRF   xB2
0B0FE:  CLRF   xB3
0B100:  CLRF   xB4
0B102:  CLRF   xB5
0B104:  CLRF   xB6
0B106:  CLRF   xB7
0B108:  CLRF   xB8
0B10A:  CLRF   xB9
0B10C:  CLRF   xBA
0B10E:  CLRF   xBB
0B110:  CLRF   xBC
0B112:  CLRF   xBD
0B114:  CLRF   xBE
0B116:  CLRF   xBF
0B118:  CLRF   xC0
0B11A:  CLRF   xC1
0B11C:  CLRF   xC2
0B11E:  CLRF   xC3
0B120:  CLRF   xC4
0B122:  CLRF   xC5
0B124:  CLRF   xC6
0B126:  CLRF   xC7
0B128:  CLRF   xC8
0B12A:  CLRF   xC9
0B12C:  CLRF   xCA
0B12E:  CLRF   xCB
0B130:  CLRF   xCC
0B132:  CLRF   xCD
0B134:  CLRF   xCE
0B136:  CLRF   xCF
0B138:  CLRF   xD0
0B13A:  CLRF   xD1
0B13C:  CLRF   xD2
0B13E:  CLRF   xD3
0B140:  CLRF   xD4
0B142:  CLRF   xD5
0B144:  CLRF   xD6
0B146:  CLRF   xD7
0B148:  CLRF   xD8
0B14A:  CLRF   xD9
0B14C:  CLRF   xDA
0B14E:  CLRF   xDB
0B150:  CLRF   xDC
0B152:  CLRF   xDD
0B154:  CLRF   xDE
0B156:  CLRF   xDF
0B158:  CLRF   xE0
0B15A:  CLRF   xE1
0B15C:  CLRF   xE2
0B15E:  CLRF   xE3
0B160:  CLRF   xE4
0B162:  CLRF   xE5
0B164:  CLRF   xE6
0B166:  CLRF   xE7
0B168:  CLRF   xE8
0B16A:  CLRF   xE9
0B16C:  CLRF   xEA
0B16E:  CLRF   xEB
0B170:  CLRF   xEC
0B172:  CLRF   xED
0B174:  CLRF   xEE
0B176:  CLRF   xEF
0B178:  CLRF   xF0
0B17A:  CLRF   xF1
0B17C:  CLRF   xF2
0B17E:  CLRF   xF3
0B180:  CLRF   xF4
0B182:  CLRF   xF5
0B184:  CLRF   xF6
0B186:  CLRF   xF7
0B188:  CLRF   xF8
0B18A:  CLRF   xF9
0B18C:  CLRF   xFA
0B18E:  CLRF   xFB
0B190:  CLRF   xFC
0B192:  CLRF   xFD
0B194:  CLRF   xFE
0B196:  CLRF   xFF
0B198:  MOVLB  4
0B19A:  CLRF   x00
0B19C:  CLRF   x01
0B19E:  CLRF   x02
0B1A0:  CLRF   x03
0B1A2:  CLRF   x04
0B1A4:  CLRF   x05
0B1A6:  CLRF   x06
0B1A8:  CLRF   x07
0B1AA:  CLRF   x08
0B1AC:  CLRF   x09
0B1AE:  CLRF   x0A
0B1B0:  CLRF   x0B
0B1B2:  CLRF   x0C
0B1B4:  CLRF   x0D
0B1B6:  CLRF   x0E
0B1B8:  CLRF   x0F
0B1BA:  CLRF   x10
0B1BC:  CLRF   x11
0B1BE:  CLRF   x12
0B1C0:  CLRF   x13
0B1C2:  CLRF   x14
0B1C4:  CLRF   x15
0B1C6:  CLRF   x16
0B1C8:  CLRF   x17
0B1CA:  CLRF   x18
0B1CC:  CLRF   x19
0B1CE:  CLRF   x1A
0B1D0:  CLRF   x1B
0B1D2:  CLRF   x1C
0B1D4:  CLRF   x1D
0B1D6:  CLRF   x1E
0B1D8:  CLRF   x1F
0B1DA:  CLRF   x20
0B1DC:  CLRF   x21
0B1DE:  CLRF   x22
0B1E0:  CLRF   x23
0B1E2:  CLRF   x24
0B1E4:  CLRF   x25
0B1E6:  CLRF   x26
0B1E8:  CLRF   x27
0B1EA:  CLRF   x28
0B1EC:  CLRF   x29
0B1EE:  CLRF   x2A
0B1F0:  CLRF   x2B
0B1F2:  CLRF   x2C
0B1F4:  CLRF   x2D
0B1F6:  CLRF   x2E
0B1F8:  CLRF   x2F
0B1FA:  CLRF   x30
0B1FC:  CLRF   x31
0B1FE:  CLRF   x32
0B200:  CLRF   x33
0B202:  CLRF   x34
0B204:  CLRF   x35
0B206:  CLRF   x36
0B208:  CLRF   x37
0B20A:  CLRF   x38
0B20C:  CLRF   x39
0B20E:  CLRF   x3A
0B210:  CLRF   x3B
0B212:  CLRF   x3C
0B214:  CLRF   x3D
0B216:  CLRF   x3E
0B218:  CLRF   x3F
0B21A:  CLRF   x40
0B21C:  CLRF   x41
0B21E:  CLRF   x42
0B220:  CLRF   x43
0B222:  CLRF   x44
0B224:  CLRF   x45
0B226:  CLRF   x46
0B228:  CLRF   x47
0B22A:  CLRF   x48
0B22C:  CLRF   x49
0B22E:  CLRF   x4A
0B230:  CLRF   x4B
0B232:  CLRF   x4C
0B234:  CLRF   x4D
0B236:  CLRF   x4E
0B238:  CLRF   x4F
0B23A:  CLRF   x50
0B23C:  CLRF   x51
0B23E:  CLRF   x52
0B240:  CLRF   x53
0B242:  CLRF   x54
0B244:  CLRF   x55
0B246:  CLRF   x56
0B248:  CLRF   x57
0B24A:  CLRF   x58
0B24C:  CLRF   x59
0B24E:  CLRF   x5A
0B250:  CLRF   x5B
0B252:  CLRF   x5C
0B254:  CLRF   x5D
0B256:  CLRF   x5E
0B258:  CLRF   x5F
0B25A:  CLRF   x60
0B25C:  CLRF   x61
0B25E:  CLRF   x62
0B260:  CLRF   x63
0B262:  CLRF   x64
0B264:  CLRF   x65
0B266:  CLRF   x66
0B268:  CLRF   x67
0B26A:  CLRF   x68
0B26C:  CLRF   x69
0B26E:  CLRF   x6A
0B270:  CLRF   x6B
0B272:  CLRF   x6C
0B274:  CLRF   x6D
0B276:  CLRF   x6E
0B278:  CLRF   x6F
0B27A:  CLRF   x70
0B27C:  CLRF   x71
0B27E:  CLRF   x72
0B280:  CLRF   x73
0B282:  CLRF   x74
0B284:  CLRF   x75
0B286:  CLRF   x76
0B288:  CLRF   x77
0B28A:  CLRF   x78
0B28C:  CLRF   x79
0B28E:  CLRF   x7A
0B290:  CLRF   x7B
0B292:  CLRF   x7C
0B294:  CLRF   x7D
0B296:  CLRF   x7E
0B298:  CLRF   x7F
0B29A:  CLRF   x80
0B29C:  CLRF   x81
0B29E:  CLRF   x82
0B2A0:  CLRF   x83
0B2A2:  CLRF   x84
0B2A4:  CLRF   x85
0B2A6:  CLRF   x86
0B2A8:  CLRF   x87
0B2AA:  CLRF   x88
0B2AC:  CLRF   x89
0B2AE:  CLRF   x8A
0B2B0:  CLRF   x8B
0B2B2:  CLRF   x8C
0B2B4:  CLRF   x8D
0B2B6:  CLRF   x8E
0B2B8:  CLRF   x8F
0B2BA:  CLRF   x90
0B2BC:  CLRF   x91
0B2BE:  CLRF   x92
0B2C0:  CLRF   x93
0B2C2:  CLRF   x94
0B2C4:  CLRF   x95
0B2C6:  CLRF   x96
0B2C8:  CLRF   x97
0B2CA:  CLRF   x98
0B2CC:  CLRF   x99
0B2CE:  CLRF   x9A
0B2D0:  CLRF   x9B
0B2D2:  CLRF   x9C
0B2D4:  CLRF   x9D
0B2D6:  CLRF   x9E
0B2D8:  CLRF   x9F
0B2DA:  CLRF   xA0
0B2DC:  CLRF   xA1
0B2DE:  CLRF   xA2
0B2E0:  CLRF   xA3
0B2E2:  CLRF   xA4
0B2E4:  CLRF   xA5
0B2E6:  CLRF   xA6
0B2E8:  CLRF   xA7
0B2EA:  CLRF   xA8
0B2EC:  CLRF   xA9
0B2EE:  CLRF   xAA
0B2F0:  CLRF   xAB
0B2F2:  CLRF   xAC
0B2F4:  CLRF   xAD
0B2F6:  CLRF   xAE
0B2F8:  CLRF   xAF
0B2FA:  CLRF   xB0
0B2FC:  CLRF   xB1
0B2FE:  CLRF   xB2
0B300:  CLRF   xB3
0B302:  CLRF   xB4
0B304:  CLRF   xB5
0B306:  CLRF   xB6
0B308:  CLRF   xB7
0B30A:  CLRF   xB8
0B30C:  CLRF   xB9
0B30E:  CLRF   xBA
0B310:  CLRF   xBB
0B312:  CLRF   xBC
0B314:  CLRF   xBD
0B316:  CLRF   xBE
0B318:  CLRF   xBF
0B31A:  CLRF   xC0
0B31C:  CLRF   xC1
0B31E:  CLRF   xC2
0B320:  CLRF   xC3
0B322:  CLRF   xC4
0B324:  CLRF   xC5
0B326:  CLRF   xC6
0B328:  CLRF   xC7
0B32A:  CLRF   xC8
0B32C:  CLRF   xC9
0B32E:  CLRF   xCA
0B330:  CLRF   xCB
0B332:  CLRF   xCC
0B334:  CLRF   xCD
0B336:  CLRF   xCE
0B338:  CLRF   xCF
0B33A:  CLRF   xD0
0B33C:  CLRF   xD1
0B33E:  CLRF   xD2
0B340:  CLRF   xD3
0B342:  CLRF   xD4
0B344:  CLRF   xD5
0B346:  CLRF   xD6
0B348:  CLRF   xD7
0B34A:  CLRF   xD8
0B34C:  CLRF   xD9
0B34E:  CLRF   xDA
0B350:  CLRF   xDB
0B352:  CLRF   xDC
0B354:  CLRF   xDD
0B356:  CLRF   xDE
0B358:  CLRF   xDF
0B35A:  CLRF   xE0
0B35C:  CLRF   xE1
0B35E:  CLRF   xE2
0B360:  CLRF   xE3
0B362:  CLRF   xE4
0B364:  CLRF   xE5
0B366:  CLRF   xE6
0B368:  CLRF   xE7
0B36A:  CLRF   xE8
0B36C:  CLRF   xE9
0B36E:  CLRF   xEA
0B370:  CLRF   xEB
0B372:  CLRF   xEC
0B374:  CLRF   xED
0B376:  CLRF   xEE
0B378:  CLRF   xEF
0B37A:  CLRF   xF0
0B37C:  CLRF   xF1
0B37E:  CLRF   xF2
0B380:  CLRF   xF3
0B382:  CLRF   xF4
0B384:  CLRF   xF5
0B386:  CLRF   xF6
0B388:  CLRF   xF7
0B38A:  CLRF   xF8
0B38C:  CLRF   xF9
0B38E:  CLRF   xFA
0B390:  CLRF   xFB
0B392:  CLRF   xFC
0B394:  CLRF   xFD
0B396:  CLRF   xFE
0B398:  CLRF   xFF
0B39A:  MOVLB  5
0B39C:  CLRF   x00
0B39E:  CLRF   x01
0B3A0:  CLRF   x02
0B3A2:  CLRF   x03
0B3A4:  CLRF   x04
0B3A6:  CLRF   x05
0B3A8:  CLRF   x06
0B3AA:  CLRF   x07
0B3AC:  CLRF   x08
0B3AE:  CLRF   x09
0B3B0:  CLRF   x0A
0B3B2:  CLRF   x0B
0B3B4:  CLRF   x0C
0B3B6:  CLRF   x0D
0B3B8:  CLRF   x0E
0B3BA:  CLRF   x0F
0B3BC:  CLRF   x10
0B3BE:  CLRF   x11
0B3C0:  CLRF   x12
0B3C2:  CLRF   x13
0B3C4:  CLRF   x14
0B3C6:  CLRF   x15
0B3C8:  CLRF   x16
0B3CA:  CLRF   x17
0B3CC:  CLRF   x18
0B3CE:  CLRF   x19
0B3D0:  CLRF   x1A
0B3D2:  CLRF   x1B
0B3D4:  CLRF   x1C
0B3D6:  CLRF   x1D
0B3D8:  CLRF   x1E
0B3DA:  CLRF   x1F
0B3DC:  CLRF   x20
0B3DE:  CLRF   x21
0B3E0:  CLRF   x22
0B3E2:  CLRF   x23
0B3E4:  CLRF   x24
0B3E6:  CLRF   x25
0B3E8:  CLRF   x26
0B3EA:  CLRF   x27
0B3EC:  CLRF   x28
0B3EE:  CLRF   x29
0B3F0:  CLRF   x2A
0B3F2:  CLRF   x2B
0B3F4:  CLRF   x2C
0B3F6:  CLRF   x2D
0B3F8:  CLRF   x2E
0B3FA:  CLRF   x2F
0B3FC:  CLRF   x30
0B3FE:  CLRF   x31
0B400:  CLRF   x32
0B402:  CLRF   x33
0B404:  CLRF   x34
0B406:  CLRF   x35
0B408:  CLRF   x36
0B40A:  CLRF   x37
0B40C:  CLRF   x38
0B40E:  CLRF   x39
0B410:  CLRF   x3A
0B412:  CLRF   x3B
0B414:  CLRF   x3C
0B416:  CLRF   x3D
0B418:  CLRF   x3E
0B41A:  CLRF   x3F
0B41C:  CLRF   x40
0B41E:  CLRF   x41
0B420:  CLRF   x42
0B422:  CLRF   x43
0B424:  CLRF   x44
0B426:  CLRF   x45
0B428:  CLRF   x46
0B42A:  CLRF   x47
0B42C:  CLRF   x48
0B42E:  CLRF   x49
0B430:  CLRF   x4A
0B432:  CLRF   x4B
0B434:  CLRF   x4C
0B436:  CLRF   x4D
0B438:  CLRF   x4E
0B43A:  CLRF   x4F
0B43C:  CLRF   x50
0B43E:  CLRF   x51
0B440:  CLRF   x52
0B442:  CLRF   x53
0B444:  CLRF   x54
0B446:  CLRF   x55
0B448:  CLRF   x56
0B44A:  CLRF   x57
0B44C:  CLRF   x58
0B44E:  CLRF   x59
0B450:  CLRF   x5A
0B452:  CLRF   x5B
0B454:  CLRF   x5C
0B456:  CLRF   x5D
0B458:  CLRF   x5E
0B45A:  CLRF   x5F
0B45C:  CLRF   x60
0B45E:  CLRF   x61
0B460:  CLRF   x62
0B462:  CLRF   x63
0B464:  CLRF   x64
0B466:  CLRF   x65
0B468:  CLRF   x66
0B46A:  CLRF   x67
0B46C:  CLRF   x68
0B46E:  CLRF   x69
0B470:  CLRF   x6A
0B472:  CLRF   x6B
0B474:  CLRF   x6C
0B476:  CLRF   x6D
0B478:  CLRF   x6E
0B47A:  CLRF   x6F
0B47C:  CLRF   x70
0B47E:  CLRF   x71
0B480:  CLRF   x72
0B482:  CLRF   x73
0B484:  CLRF   x74
0B486:  CLRF   x75
0B488:  CLRF   x76
0B48A:  CLRF   x77
0B48C:  CLRF   x78
0B48E:  CLRF   x79
0B490:  CLRF   x7A
0B492:  CLRF   x7B
0B494:  CLRF   x7C
0B496:  CLRF   x7D
0B498:  CLRF   x7E
0B49A:  CLRF   x7F
0B49C:  CLRF   x80
0B49E:  CLRF   x81
0B4A0:  CLRF   x82
0B4A2:  CLRF   x83
0B4A4:  CLRF   x84
0B4A6:  CLRF   x85
0B4A8:  CLRF   x86
0B4AA:  CLRF   x87
0B4AC:  CLRF   x88
0B4AE:  CLRF   x89
0B4B0:  CLRF   x8A
0B4B2:  CLRF   x8B
0B4B4:  CLRF   x8C
0B4B6:  CLRF   x8D
0B4B8:  CLRF   x8E
0B4BA:  CLRF   x8F
0B4BC:  CLRF   x90
0B4BE:  CLRF   x91
0B4C0:  CLRF   x92
0B4C2:  CLRF   x93
0B4C4:  CLRF   x94
0B4C6:  CLRF   x95
0B4C8:  CLRF   x96
0B4CA:  CLRF   x97
0B4CC:  CLRF   x98
0B4CE:  CLRF   x99
0B4D0:  CLRF   x9A
0B4D2:  CLRF   x9B
0B4D4:  CLRF   x9C
0B4D6:  CLRF   x9D
0B4D8:  CLRF   x9E
0B4DA:  CLRF   x9F
0B4DC:  CLRF   xA0
0B4DE:  CLRF   xA1
0B4E0:  CLRF   xA2
0B4E2:  CLRF   xA3
0B4E4:  CLRF   xA4
0B4E6:  CLRF   xA5
0B4E8:  CLRF   xA6
0B4EA:  CLRF   xA7
0B4EC:  CLRF   xA8
0B4EE:  CLRF   xA9
0B4F0:  CLRF   xAA
0B4F2:  CLRF   xAB
0B4F4:  CLRF   xAC
0B4F6:  CLRF   xAD
0B4F8:  CLRF   xAE
0B4FA:  CLRF   xAF
0B4FC:  CLRF   xB0
0B4FE:  CLRF   xB1
0B500:  CLRF   xB2
0B502:  CLRF   xB3
0B504:  CLRF   xB4
0B506:  CLRF   xB5
0B508:  CLRF   xB6
0B50A:  CLRF   xB7
0B50C:  CLRF   xB8
0B50E:  CLRF   xB9
0B510:  CLRF   xBA
0B512:  CLRF   xBB
0B514:  CLRF   xBC
0B516:  CLRF   xBD
0B518:  CLRF   xBE
0B51A:  CLRF   xBF
0B51C:  CLRF   xC0
0B51E:  CLRF   xC1
0B520:  CLRF   xC2
0B522:  CLRF   xC3
0B524:  CLRF   xC4
0B526:  CLRF   xC5
0B528:  CLRF   xC6
0B52A:  CLRF   xC7
0B52C:  CLRF   xC8
0B52E:  CLRF   xC9
0B530:  CLRF   xCA
0B532:  CLRF   xCB
0B534:  CLRF   xCC
0B536:  CLRF   xCD
0B538:  CLRF   xCE
0B53A:  CLRF   xCF
0B53C:  CLRF   xD0
0B53E:  CLRF   xD1
0B540:  CLRF   xD2
0B542:  CLRF   xD3
0B544:  CLRF   xD4
0B546:  CLRF   xD5
0B548:  CLRF   xD6
0B54A:  CLRF   xD7
0B54C:  CLRF   xD8
0B54E:  CLRF   xD9
0B550:  CLRF   xDA
0B552:  CLRF   xDB
0B554:  CLRF   xDC
0B556:  CLRF   xDD
0B558:  CLRF   xDE
0B55A:  CLRF   xDF
0B55C:  CLRF   xE0
0B55E:  CLRF   xE1
0B560:  CLRF   xE2
0B562:  CLRF   xE3
0B564:  CLRF   xE4
0B566:  CLRF   xE5
0B568:  CLRF   xE6
0B56A:  CLRF   xE7
0B56C:  CLRF   xE8
0B56E:  CLRF   xE9
0B570:  CLRF   xEA
0B572:  CLRF   xEB
0B574:  CLRF   xEC
0B576:  CLRF   xED
0B578:  CLRF   xEE
0B57A:  CLRF   xEF
0B57C:  CLRF   xF0
0B57E:  CLRF   xF1
0B580:  CLRF   xF2
0B582:  CLRF   xF3
0B584:  CLRF   xF4
0B586:  CLRF   xF5
0B588:  CLRF   xF6
0B58A:  CLRF   xF7
0B58C:  CLRF   xF8
0B58E:  CLRF   xF9
0B590:  CLRF   xFA
0B592:  CLRF   xFB
0B594:  CLRF   xFC
0B596:  CLRF   xFD
0B598:  CLRF   xFE
0B59A:  CLRF   xFF
0B59C:  MOVLB  6
0B59E:  CLRF   x00
0B5A0:  CLRF   x01
0B5A2:  CLRF   x02
0B5A4:  CLRF   x03
0B5A6:  CLRF   x04
0B5A8:  CLRF   x05
0B5AA:  CLRF   x06
....................     port1.port_num = 1;
0B5AC:  MOVLW  01
0B5AE:  MOVLB  2
0B5B0:  MOVWF  x07
....................     port1.sweep_step = 0;
0B5B2:  CLRF   x09
0B5B4:  CLRF   x08
....................     port1.active = 1;
0B5B6:  MOVLB  6
0B5B8:  BSF    x06.0
.................... 
....................     // Init Port2
....................     sweep_debug_config_t port2 = {0};
0B5BA:  CLRF   x07
0B5BC:  CLRF   x08
0B5BE:  CLRF   x09
0B5C0:  CLRF   x0A
0B5C2:  CLRF   x0B
0B5C4:  CLRF   x0C
0B5C6:  CLRF   x0D
0B5C8:  CLRF   x0E
0B5CA:  CLRF   x0F
0B5CC:  CLRF   x10
0B5CE:  CLRF   x11
0B5D0:  CLRF   x12
0B5D2:  CLRF   x13
0B5D4:  CLRF   x14
0B5D6:  CLRF   x15
0B5D8:  CLRF   x16
0B5DA:  CLRF   x17
0B5DC:  CLRF   x18
0B5DE:  CLRF   x19
0B5E0:  CLRF   x1A
0B5E2:  CLRF   x1B
0B5E4:  CLRF   x1C
0B5E6:  CLRF   x1D
0B5E8:  CLRF   x1E
0B5EA:  CLRF   x1F
0B5EC:  CLRF   x20
0B5EE:  CLRF   x21
0B5F0:  CLRF   x22
0B5F2:  CLRF   x23
0B5F4:  CLRF   x24
0B5F6:  CLRF   x25
0B5F8:  CLRF   x26
0B5FA:  CLRF   x27
0B5FC:  CLRF   x28
0B5FE:  CLRF   x29
0B600:  CLRF   x2A
0B602:  CLRF   x2B
0B604:  CLRF   x2C
0B606:  CLRF   x2D
0B608:  CLRF   x2E
0B60A:  CLRF   x2F
0B60C:  CLRF   x30
0B60E:  CLRF   x31
0B610:  CLRF   x32
0B612:  CLRF   x33
0B614:  CLRF   x34
0B616:  CLRF   x35
0B618:  CLRF   x36
0B61A:  CLRF   x37
0B61C:  CLRF   x38
0B61E:  CLRF   x39
0B620:  CLRF   x3A
0B622:  CLRF   x3B
0B624:  CLRF   x3C
0B626:  CLRF   x3D
0B628:  CLRF   x3E
0B62A:  CLRF   x3F
0B62C:  CLRF   x40
0B62E:  CLRF   x41
0B630:  CLRF   x42
0B632:  CLRF   x43
0B634:  CLRF   x44
0B636:  CLRF   x45
0B638:  CLRF   x46
0B63A:  CLRF   x47
0B63C:  CLRF   x48
0B63E:  CLRF   x49
0B640:  CLRF   x4A
0B642:  CLRF   x4B
0B644:  CLRF   x4C
0B646:  CLRF   x4D
0B648:  CLRF   x4E
0B64A:  CLRF   x4F
0B64C:  CLRF   x50
0B64E:  CLRF   x51
0B650:  CLRF   x52
0B652:  CLRF   x53
0B654:  CLRF   x54
0B656:  CLRF   x55
0B658:  CLRF   x56
0B65A:  CLRF   x57
0B65C:  CLRF   x58
0B65E:  CLRF   x59
0B660:  CLRF   x5A
0B662:  CLRF   x5B
0B664:  CLRF   x5C
0B666:  CLRF   x5D
0B668:  CLRF   x5E
0B66A:  CLRF   x5F
0B66C:  CLRF   x60
0B66E:  CLRF   x61
0B670:  CLRF   x62
0B672:  CLRF   x63
0B674:  CLRF   x64
0B676:  CLRF   x65
0B678:  CLRF   x66
0B67A:  CLRF   x67
0B67C:  CLRF   x68
0B67E:  CLRF   x69
0B680:  CLRF   x6A
0B682:  CLRF   x6B
0B684:  CLRF   x6C
0B686:  CLRF   x6D
0B688:  CLRF   x6E
0B68A:  CLRF   x6F
0B68C:  CLRF   x70
0B68E:  CLRF   x71
0B690:  CLRF   x72
0B692:  CLRF   x73
0B694:  CLRF   x74
0B696:  CLRF   x75
0B698:  CLRF   x76
0B69A:  CLRF   x77
0B69C:  CLRF   x78
0B69E:  CLRF   x79
0B6A0:  CLRF   x7A
0B6A2:  CLRF   x7B
0B6A4:  CLRF   x7C
0B6A6:  CLRF   x7D
0B6A8:  CLRF   x7E
0B6AA:  CLRF   x7F
0B6AC:  CLRF   x80
0B6AE:  CLRF   x81
0B6B0:  CLRF   x82
0B6B2:  CLRF   x83
0B6B4:  CLRF   x84
0B6B6:  CLRF   x85
0B6B8:  CLRF   x86
0B6BA:  CLRF   x87
0B6BC:  CLRF   x88
0B6BE:  CLRF   x89
0B6C0:  CLRF   x8A
0B6C2:  CLRF   x8B
0B6C4:  CLRF   x8C
0B6C6:  CLRF   x8D
0B6C8:  CLRF   x8E
0B6CA:  CLRF   x8F
0B6CC:  CLRF   x90
0B6CE:  CLRF   x91
0B6D0:  CLRF   x92
0B6D2:  CLRF   x93
0B6D4:  CLRF   x94
0B6D6:  CLRF   x95
0B6D8:  CLRF   x96
0B6DA:  CLRF   x97
0B6DC:  CLRF   x98
0B6DE:  CLRF   x99
0B6E0:  CLRF   x9A
0B6E2:  CLRF   x9B
0B6E4:  CLRF   x9C
0B6E6:  CLRF   x9D
0B6E8:  CLRF   x9E
0B6EA:  CLRF   x9F
0B6EC:  CLRF   xA0
0B6EE:  CLRF   xA1
0B6F0:  CLRF   xA2
0B6F2:  CLRF   xA3
0B6F4:  CLRF   xA4
0B6F6:  CLRF   xA5
0B6F8:  CLRF   xA6
0B6FA:  CLRF   xA7
0B6FC:  CLRF   xA8
0B6FE:  CLRF   xA9
0B700:  CLRF   xAA
0B702:  CLRF   xAB
0B704:  CLRF   xAC
0B706:  CLRF   xAD
0B708:  CLRF   xAE
0B70A:  CLRF   xAF
0B70C:  CLRF   xB0
0B70E:  CLRF   xB1
0B710:  CLRF   xB2
0B712:  CLRF   xB3
0B714:  CLRF   xB4
0B716:  CLRF   xB5
0B718:  CLRF   xB6
0B71A:  CLRF   xB7
0B71C:  CLRF   xB8
0B71E:  CLRF   xB9
0B720:  CLRF   xBA
0B722:  CLRF   xBB
0B724:  CLRF   xBC
0B726:  CLRF   xBD
0B728:  CLRF   xBE
0B72A:  CLRF   xBF
0B72C:  CLRF   xC0
0B72E:  CLRF   xC1
0B730:  CLRF   xC2
0B732:  CLRF   xC3
0B734:  CLRF   xC4
0B736:  CLRF   xC5
0B738:  CLRF   xC6
0B73A:  CLRF   xC7
0B73C:  CLRF   xC8
0B73E:  CLRF   xC9
0B740:  CLRF   xCA
0B742:  CLRF   xCB
0B744:  CLRF   xCC
0B746:  CLRF   xCD
0B748:  CLRF   xCE
0B74A:  CLRF   xCF
0B74C:  CLRF   xD0
0B74E:  CLRF   xD1
0B750:  CLRF   xD2
0B752:  CLRF   xD3
0B754:  CLRF   xD4
0B756:  CLRF   xD5
0B758:  CLRF   xD6
0B75A:  CLRF   xD7
0B75C:  CLRF   xD8
0B75E:  CLRF   xD9
0B760:  CLRF   xDA
0B762:  CLRF   xDB
0B764:  CLRF   xDC
0B766:  CLRF   xDD
0B768:  CLRF   xDE
0B76A:  CLRF   xDF
0B76C:  CLRF   xE0
0B76E:  CLRF   xE1
0B770:  CLRF   xE2
0B772:  CLRF   xE3
0B774:  CLRF   xE4
0B776:  CLRF   xE5
0B778:  CLRF   xE6
0B77A:  CLRF   xE7
0B77C:  CLRF   xE8
0B77E:  CLRF   xE9
0B780:  CLRF   xEA
0B782:  CLRF   xEB
0B784:  CLRF   xEC
0B786:  CLRF   xED
0B788:  CLRF   xEE
0B78A:  CLRF   xEF
0B78C:  CLRF   xF0
0B78E:  CLRF   xF1
0B790:  CLRF   xF2
0B792:  CLRF   xF3
0B794:  CLRF   xF4
0B796:  CLRF   xF5
0B798:  CLRF   xF6
0B79A:  CLRF   xF7
0B79C:  CLRF   xF8
0B79E:  CLRF   xF9
0B7A0:  CLRF   xFA
0B7A2:  CLRF   xFB
0B7A4:  CLRF   xFC
0B7A6:  CLRF   xFD
0B7A8:  CLRF   xFE
0B7AA:  CLRF   xFF
0B7AC:  MOVLB  7
0B7AE:  CLRF   x00
0B7B0:  CLRF   x01
0B7B2:  CLRF   x02
0B7B4:  CLRF   x03
0B7B6:  CLRF   x04
0B7B8:  CLRF   x05
0B7BA:  CLRF   x06
0B7BC:  CLRF   x07
0B7BE:  CLRF   x08
0B7C0:  CLRF   x09
0B7C2:  CLRF   x0A
0B7C4:  CLRF   x0B
0B7C6:  CLRF   x0C
0B7C8:  CLRF   x0D
0B7CA:  CLRF   x0E
0B7CC:  CLRF   x0F
0B7CE:  CLRF   x10
0B7D0:  CLRF   x11
0B7D2:  CLRF   x12
0B7D4:  CLRF   x13
0B7D6:  CLRF   x14
0B7D8:  CLRF   x15
0B7DA:  CLRF   x16
0B7DC:  CLRF   x17
0B7DE:  CLRF   x18
0B7E0:  CLRF   x19
0B7E2:  CLRF   x1A
0B7E4:  CLRF   x1B
0B7E6:  CLRF   x1C
0B7E8:  CLRF   x1D
0B7EA:  CLRF   x1E
0B7EC:  CLRF   x1F
0B7EE:  CLRF   x20
0B7F0:  CLRF   x21
0B7F2:  CLRF   x22
0B7F4:  CLRF   x23
0B7F6:  CLRF   x24
0B7F8:  CLRF   x25
0B7FA:  CLRF   x26
0B7FC:  CLRF   x27
0B7FE:  CLRF   x28
0B800:  CLRF   x29
0B802:  CLRF   x2A
0B804:  CLRF   x2B
0B806:  CLRF   x2C
0B808:  CLRF   x2D
0B80A:  CLRF   x2E
0B80C:  CLRF   x2F
0B80E:  CLRF   x30
0B810:  CLRF   x31
0B812:  CLRF   x32
0B814:  CLRF   x33
0B816:  CLRF   x34
0B818:  CLRF   x35
0B81A:  CLRF   x36
0B81C:  CLRF   x37
0B81E:  CLRF   x38
0B820:  CLRF   x39
0B822:  CLRF   x3A
0B824:  CLRF   x3B
0B826:  CLRF   x3C
0B828:  CLRF   x3D
0B82A:  CLRF   x3E
0B82C:  CLRF   x3F
0B82E:  CLRF   x40
0B830:  CLRF   x41
0B832:  CLRF   x42
0B834:  CLRF   x43
0B836:  CLRF   x44
0B838:  CLRF   x45
0B83A:  CLRF   x46
0B83C:  CLRF   x47
0B83E:  CLRF   x48
0B840:  CLRF   x49
0B842:  CLRF   x4A
0B844:  CLRF   x4B
0B846:  CLRF   x4C
0B848:  CLRF   x4D
0B84A:  CLRF   x4E
0B84C:  CLRF   x4F
0B84E:  CLRF   x50
0B850:  CLRF   x51
0B852:  CLRF   x52
0B854:  CLRF   x53
0B856:  CLRF   x54
0B858:  CLRF   x55
0B85A:  CLRF   x56
0B85C:  CLRF   x57
0B85E:  CLRF   x58
0B860:  CLRF   x59
0B862:  CLRF   x5A
0B864:  CLRF   x5B
0B866:  CLRF   x5C
0B868:  CLRF   x5D
0B86A:  CLRF   x5E
0B86C:  CLRF   x5F
0B86E:  CLRF   x60
0B870:  CLRF   x61
0B872:  CLRF   x62
0B874:  CLRF   x63
0B876:  CLRF   x64
0B878:  CLRF   x65
0B87A:  CLRF   x66
0B87C:  CLRF   x67
0B87E:  CLRF   x68
0B880:  CLRF   x69
0B882:  CLRF   x6A
0B884:  CLRF   x6B
0B886:  CLRF   x6C
0B888:  CLRF   x6D
0B88A:  CLRF   x6E
0B88C:  CLRF   x6F
0B88E:  CLRF   x70
0B890:  CLRF   x71
0B892:  CLRF   x72
0B894:  CLRF   x73
0B896:  CLRF   x74
0B898:  CLRF   x75
0B89A:  CLRF   x76
0B89C:  CLRF   x77
0B89E:  CLRF   x78
0B8A0:  CLRF   x79
0B8A2:  CLRF   x7A
0B8A4:  CLRF   x7B
0B8A6:  CLRF   x7C
0B8A8:  CLRF   x7D
0B8AA:  CLRF   x7E
0B8AC:  CLRF   x7F
0B8AE:  CLRF   x80
0B8B0:  CLRF   x81
0B8B2:  CLRF   x82
0B8B4:  CLRF   x83
0B8B6:  CLRF   x84
0B8B8:  CLRF   x85
0B8BA:  CLRF   x86
0B8BC:  CLRF   x87
0B8BE:  CLRF   x88
0B8C0:  CLRF   x89
0B8C2:  CLRF   x8A
0B8C4:  CLRF   x8B
0B8C6:  CLRF   x8C
0B8C8:  CLRF   x8D
0B8CA:  CLRF   x8E
0B8CC:  CLRF   x8F
0B8CE:  CLRF   x90
0B8D0:  CLRF   x91
0B8D2:  CLRF   x92
0B8D4:  CLRF   x93
0B8D6:  CLRF   x94
0B8D8:  CLRF   x95
0B8DA:  CLRF   x96
0B8DC:  CLRF   x97
0B8DE:  CLRF   x98
0B8E0:  CLRF   x99
0B8E2:  CLRF   x9A
0B8E4:  CLRF   x9B
0B8E6:  CLRF   x9C
0B8E8:  CLRF   x9D
0B8EA:  CLRF   x9E
0B8EC:  CLRF   x9F
0B8EE:  CLRF   xA0
0B8F0:  CLRF   xA1
0B8F2:  CLRF   xA2
0B8F4:  CLRF   xA3
0B8F6:  CLRF   xA4
0B8F8:  CLRF   xA5
0B8FA:  CLRF   xA6
0B8FC:  CLRF   xA7
0B8FE:  CLRF   xA8
0B900:  CLRF   xA9
0B902:  CLRF   xAA
0B904:  CLRF   xAB
0B906:  CLRF   xAC
0B908:  CLRF   xAD
0B90A:  CLRF   xAE
0B90C:  CLRF   xAF
0B90E:  CLRF   xB0
0B910:  CLRF   xB1
0B912:  CLRF   xB2
0B914:  CLRF   xB3
0B916:  CLRF   xB4
0B918:  CLRF   xB5
0B91A:  CLRF   xB6
0B91C:  CLRF   xB7
0B91E:  CLRF   xB8
0B920:  CLRF   xB9
0B922:  CLRF   xBA
0B924:  CLRF   xBB
0B926:  CLRF   xBC
0B928:  CLRF   xBD
0B92A:  CLRF   xBE
0B92C:  CLRF   xBF
0B92E:  CLRF   xC0
0B930:  CLRF   xC1
0B932:  CLRF   xC2
0B934:  CLRF   xC3
0B936:  CLRF   xC4
0B938:  CLRF   xC5
0B93A:  CLRF   xC6
0B93C:  CLRF   xC7
0B93E:  CLRF   xC8
0B940:  CLRF   xC9
0B942:  CLRF   xCA
0B944:  CLRF   xCB
0B946:  CLRF   xCC
0B948:  CLRF   xCD
0B94A:  CLRF   xCE
0B94C:  CLRF   xCF
0B94E:  CLRF   xD0
0B950:  CLRF   xD1
0B952:  CLRF   xD2
0B954:  CLRF   xD3
0B956:  CLRF   xD4
0B958:  CLRF   xD5
0B95A:  CLRF   xD6
0B95C:  CLRF   xD7
0B95E:  CLRF   xD8
0B960:  CLRF   xD9
0B962:  CLRF   xDA
0B964:  CLRF   xDB
0B966:  CLRF   xDC
0B968:  CLRF   xDD
0B96A:  CLRF   xDE
0B96C:  CLRF   xDF
0B96E:  CLRF   xE0
0B970:  CLRF   xE1
0B972:  CLRF   xE2
0B974:  CLRF   xE3
0B976:  CLRF   xE4
0B978:  CLRF   xE5
0B97A:  CLRF   xE6
0B97C:  CLRF   xE7
0B97E:  CLRF   xE8
0B980:  CLRF   xE9
0B982:  CLRF   xEA
0B984:  CLRF   xEB
0B986:  CLRF   xEC
0B988:  CLRF   xED
0B98A:  CLRF   xEE
0B98C:  CLRF   xEF
0B98E:  CLRF   xF0
0B990:  CLRF   xF1
0B992:  CLRF   xF2
0B994:  CLRF   xF3
0B996:  CLRF   xF4
0B998:  CLRF   xF5
0B99A:  CLRF   xF6
0B99C:  CLRF   xF7
0B99E:  CLRF   xF8
0B9A0:  CLRF   xF9
0B9A2:  CLRF   xFA
0B9A4:  CLRF   xFB
0B9A6:  CLRF   xFC
0B9A8:  CLRF   xFD
0B9AA:  CLRF   xFE
0B9AC:  CLRF   xFF
0B9AE:  MOVLB  8
0B9B0:  CLRF   x00
0B9B2:  CLRF   x01
0B9B4:  CLRF   x02
0B9B6:  CLRF   x03
0B9B8:  CLRF   x04
0B9BA:  CLRF   x05
0B9BC:  CLRF   x06
0B9BE:  CLRF   x07
0B9C0:  CLRF   x08
0B9C2:  CLRF   x09
0B9C4:  CLRF   x0A
0B9C6:  CLRF   x0B
0B9C8:  CLRF   x0C
0B9CA:  CLRF   x0D
0B9CC:  CLRF   x0E
0B9CE:  CLRF   x0F
0B9D0:  CLRF   x10
0B9D2:  CLRF   x11
0B9D4:  CLRF   x12
0B9D6:  CLRF   x13
0B9D8:  CLRF   x14
0B9DA:  CLRF   x15
0B9DC:  CLRF   x16
0B9DE:  CLRF   x17
0B9E0:  CLRF   x18
0B9E2:  CLRF   x19
0B9E4:  CLRF   x1A
0B9E6:  CLRF   x1B
0B9E8:  CLRF   x1C
0B9EA:  CLRF   x1D
0B9EC:  CLRF   x1E
0B9EE:  CLRF   x1F
0B9F0:  CLRF   x20
0B9F2:  CLRF   x21
0B9F4:  CLRF   x22
0B9F6:  CLRF   x23
0B9F8:  CLRF   x24
0B9FA:  CLRF   x25
0B9FC:  CLRF   x26
0B9FE:  CLRF   x27
0BA00:  CLRF   x28
0BA02:  CLRF   x29
0BA04:  CLRF   x2A
0BA06:  CLRF   x2B
0BA08:  CLRF   x2C
0BA0A:  CLRF   x2D
0BA0C:  CLRF   x2E
0BA0E:  CLRF   x2F
0BA10:  CLRF   x30
0BA12:  CLRF   x31
0BA14:  CLRF   x32
0BA16:  CLRF   x33
0BA18:  CLRF   x34
0BA1A:  CLRF   x35
0BA1C:  CLRF   x36
0BA1E:  CLRF   x37
0BA20:  CLRF   x38
0BA22:  CLRF   x39
0BA24:  CLRF   x3A
0BA26:  CLRF   x3B
0BA28:  CLRF   x3C
0BA2A:  CLRF   x3D
0BA2C:  CLRF   x3E
0BA2E:  CLRF   x3F
0BA30:  CLRF   x40
0BA32:  CLRF   x41
0BA34:  CLRF   x42
0BA36:  CLRF   x43
0BA38:  CLRF   x44
0BA3A:  CLRF   x45
0BA3C:  CLRF   x46
0BA3E:  CLRF   x47
0BA40:  CLRF   x48
0BA42:  CLRF   x49
0BA44:  CLRF   x4A
0BA46:  CLRF   x4B
0BA48:  CLRF   x4C
0BA4A:  CLRF   x4D
0BA4C:  CLRF   x4E
0BA4E:  CLRF   x4F
0BA50:  CLRF   x50
0BA52:  CLRF   x51
0BA54:  CLRF   x52
0BA56:  CLRF   x53
0BA58:  CLRF   x54
0BA5A:  CLRF   x55
0BA5C:  CLRF   x56
0BA5E:  CLRF   x57
0BA60:  CLRF   x58
0BA62:  CLRF   x59
0BA64:  CLRF   x5A
0BA66:  CLRF   x5B
0BA68:  CLRF   x5C
0BA6A:  CLRF   x5D
0BA6C:  CLRF   x5E
0BA6E:  CLRF   x5F
0BA70:  CLRF   x60
0BA72:  CLRF   x61
0BA74:  CLRF   x62
0BA76:  CLRF   x63
0BA78:  CLRF   x64
0BA7A:  CLRF   x65
0BA7C:  CLRF   x66
0BA7E:  CLRF   x67
0BA80:  CLRF   x68
0BA82:  CLRF   x69
0BA84:  CLRF   x6A
0BA86:  CLRF   x6B
0BA88:  CLRF   x6C
0BA8A:  CLRF   x6D
0BA8C:  CLRF   x6E
0BA8E:  CLRF   x6F
0BA90:  CLRF   x70
0BA92:  CLRF   x71
0BA94:  CLRF   x72
0BA96:  CLRF   x73
0BA98:  CLRF   x74
0BA9A:  CLRF   x75
0BA9C:  CLRF   x76
0BA9E:  CLRF   x77
0BAA0:  CLRF   x78
0BAA2:  CLRF   x79
0BAA4:  CLRF   x7A
0BAA6:  CLRF   x7B
0BAA8:  CLRF   x7C
0BAAA:  CLRF   x7D
0BAAC:  CLRF   x7E
0BAAE:  CLRF   x7F
0BAB0:  CLRF   x80
0BAB2:  CLRF   x81
0BAB4:  CLRF   x82
0BAB6:  CLRF   x83
0BAB8:  CLRF   x84
0BABA:  CLRF   x85
0BABC:  CLRF   x86
0BABE:  CLRF   x87
0BAC0:  CLRF   x88
0BAC2:  CLRF   x89
0BAC4:  CLRF   x8A
0BAC6:  CLRF   x8B
0BAC8:  CLRF   x8C
0BACA:  CLRF   x8D
0BACC:  CLRF   x8E
0BACE:  CLRF   x8F
0BAD0:  CLRF   x90
0BAD2:  CLRF   x91
0BAD4:  CLRF   x92
0BAD6:  CLRF   x93
0BAD8:  CLRF   x94
0BADA:  CLRF   x95
0BADC:  CLRF   x96
0BADE:  CLRF   x97
0BAE0:  CLRF   x98
0BAE2:  CLRF   x99
0BAE4:  CLRF   x9A
0BAE6:  CLRF   x9B
0BAE8:  CLRF   x9C
0BAEA:  CLRF   x9D
0BAEC:  CLRF   x9E
0BAEE:  CLRF   x9F
0BAF0:  CLRF   xA0
0BAF2:  CLRF   xA1
0BAF4:  CLRF   xA2
0BAF6:  CLRF   xA3
0BAF8:  CLRF   xA4
0BAFA:  CLRF   xA5
0BAFC:  CLRF   xA6
0BAFE:  CLRF   xA7
0BB00:  CLRF   xA8
0BB02:  CLRF   xA9
0BB04:  CLRF   xAA
0BB06:  CLRF   xAB
0BB08:  CLRF   xAC
0BB0A:  CLRF   xAD
0BB0C:  CLRF   xAE
0BB0E:  CLRF   xAF
0BB10:  CLRF   xB0
0BB12:  CLRF   xB1
0BB14:  CLRF   xB2
0BB16:  CLRF   xB3
0BB18:  CLRF   xB4
0BB1A:  CLRF   xB5
0BB1C:  CLRF   xB6
0BB1E:  CLRF   xB7
0BB20:  CLRF   xB8
0BB22:  CLRF   xB9
0BB24:  CLRF   xBA
0BB26:  CLRF   xBB
0BB28:  CLRF   xBC
0BB2A:  CLRF   xBD
0BB2C:  CLRF   xBE
0BB2E:  CLRF   xBF
0BB30:  CLRF   xC0
0BB32:  CLRF   xC1
0BB34:  CLRF   xC2
0BB36:  CLRF   xC3
0BB38:  CLRF   xC4
0BB3A:  CLRF   xC5
0BB3C:  CLRF   xC6
0BB3E:  CLRF   xC7
0BB40:  CLRF   xC8
0BB42:  CLRF   xC9
0BB44:  CLRF   xCA
0BB46:  CLRF   xCB
0BB48:  CLRF   xCC
0BB4A:  CLRF   xCD
0BB4C:  CLRF   xCE
0BB4E:  CLRF   xCF
0BB50:  CLRF   xD0
0BB52:  CLRF   xD1
0BB54:  CLRF   xD2
0BB56:  CLRF   xD3
0BB58:  CLRF   xD4
0BB5A:  CLRF   xD5
0BB5C:  CLRF   xD6
0BB5E:  CLRF   xD7
0BB60:  CLRF   xD8
0BB62:  CLRF   xD9
0BB64:  CLRF   xDA
0BB66:  CLRF   xDB
0BB68:  CLRF   xDC
0BB6A:  CLRF   xDD
0BB6C:  CLRF   xDE
0BB6E:  CLRF   xDF
0BB70:  CLRF   xE0
0BB72:  CLRF   xE1
0BB74:  CLRF   xE2
0BB76:  CLRF   xE3
0BB78:  CLRF   xE4
0BB7A:  CLRF   xE5
0BB7C:  CLRF   xE6
0BB7E:  CLRF   xE7
0BB80:  CLRF   xE8
0BB82:  CLRF   xE9
0BB84:  CLRF   xEA
0BB86:  CLRF   xEB
0BB88:  CLRF   xEC
0BB8A:  CLRF   xED
0BB8C:  CLRF   xEE
0BB8E:  CLRF   xEF
0BB90:  CLRF   xF0
0BB92:  CLRF   xF1
0BB94:  CLRF   xF2
0BB96:  CLRF   xF3
0BB98:  CLRF   xF4
0BB9A:  CLRF   xF5
0BB9C:  CLRF   xF6
0BB9E:  CLRF   xF7
0BBA0:  CLRF   xF8
0BBA2:  CLRF   xF9
0BBA4:  CLRF   xFA
0BBA6:  CLRF   xFB
0BBA8:  CLRF   xFC
0BBAA:  CLRF   xFD
0BBAC:  CLRF   xFE
0BBAE:  CLRF   xFF
0BBB0:  MOVLB  9
0BBB2:  CLRF   x00
0BBB4:  CLRF   x01
0BBB6:  CLRF   x02
0BBB8:  CLRF   x03
0BBBA:  CLRF   x04
0BBBC:  CLRF   x05
0BBBE:  CLRF   x06
0BBC0:  CLRF   x07
0BBC2:  CLRF   x08
0BBC4:  CLRF   x09
0BBC6:  CLRF   x0A
0BBC8:  CLRF   x0B
0BBCA:  CLRF   x0C
0BBCC:  CLRF   x0D
0BBCE:  CLRF   x0E
0BBD0:  CLRF   x0F
0BBD2:  CLRF   x10
0BBD4:  CLRF   x11
0BBD6:  CLRF   x12
0BBD8:  CLRF   x13
0BBDA:  CLRF   x14
0BBDC:  CLRF   x15
0BBDE:  CLRF   x16
0BBE0:  CLRF   x17
0BBE2:  CLRF   x18
0BBE4:  CLRF   x19
0BBE6:  CLRF   x1A
0BBE8:  CLRF   x1B
0BBEA:  CLRF   x1C
0BBEC:  CLRF   x1D
0BBEE:  CLRF   x1E
0BBF0:  CLRF   x1F
0BBF2:  CLRF   x20
0BBF4:  CLRF   x21
0BBF6:  CLRF   x22
0BBF8:  CLRF   x23
0BBFA:  CLRF   x24
0BBFC:  CLRF   x25
0BBFE:  CLRF   x26
0BC00:  CLRF   x27
0BC02:  CLRF   x28
0BC04:  CLRF   x29
0BC06:  CLRF   x2A
0BC08:  CLRF   x2B
0BC0A:  CLRF   x2C
0BC0C:  CLRF   x2D
0BC0E:  CLRF   x2E
0BC10:  CLRF   x2F
0BC12:  CLRF   x30
0BC14:  CLRF   x31
0BC16:  CLRF   x32
0BC18:  CLRF   x33
0BC1A:  CLRF   x34
0BC1C:  CLRF   x35
0BC1E:  CLRF   x36
0BC20:  CLRF   x37
0BC22:  CLRF   x38
0BC24:  CLRF   x39
0BC26:  CLRF   x3A
0BC28:  CLRF   x3B
0BC2A:  CLRF   x3C
0BC2C:  CLRF   x3D
0BC2E:  CLRF   x3E
0BC30:  CLRF   x3F
0BC32:  CLRF   x40
0BC34:  CLRF   x41
0BC36:  CLRF   x42
0BC38:  CLRF   x43
0BC3A:  CLRF   x44
0BC3C:  CLRF   x45
0BC3E:  CLRF   x46
0BC40:  CLRF   x47
0BC42:  CLRF   x48
0BC44:  CLRF   x49
0BC46:  CLRF   x4A
0BC48:  CLRF   x4B
0BC4A:  CLRF   x4C
0BC4C:  CLRF   x4D
0BC4E:  CLRF   x4E
0BC50:  CLRF   x4F
0BC52:  CLRF   x50
0BC54:  CLRF   x51
0BC56:  CLRF   x52
0BC58:  CLRF   x53
0BC5A:  CLRF   x54
0BC5C:  CLRF   x55
0BC5E:  CLRF   x56
0BC60:  CLRF   x57
0BC62:  CLRF   x58
0BC64:  CLRF   x59
0BC66:  CLRF   x5A
0BC68:  CLRF   x5B
0BC6A:  CLRF   x5C
0BC6C:  CLRF   x5D
0BC6E:  CLRF   x5E
0BC70:  CLRF   x5F
0BC72:  CLRF   x60
0BC74:  CLRF   x61
0BC76:  CLRF   x62
0BC78:  CLRF   x63
0BC7A:  CLRF   x64
0BC7C:  CLRF   x65
0BC7E:  CLRF   x66
0BC80:  CLRF   x67
0BC82:  CLRF   x68
0BC84:  CLRF   x69
0BC86:  CLRF   x6A
0BC88:  CLRF   x6B
0BC8A:  CLRF   x6C
0BC8C:  CLRF   x6D
0BC8E:  CLRF   x6E
0BC90:  CLRF   x6F
0BC92:  CLRF   x70
0BC94:  CLRF   x71
0BC96:  CLRF   x72
0BC98:  CLRF   x73
0BC9A:  CLRF   x74
0BC9C:  CLRF   x75
0BC9E:  CLRF   x76
0BCA0:  CLRF   x77
0BCA2:  CLRF   x78
0BCA4:  CLRF   x79
0BCA6:  CLRF   x7A
0BCA8:  CLRF   x7B
0BCAA:  CLRF   x7C
0BCAC:  CLRF   x7D
0BCAE:  CLRF   x7E
0BCB0:  CLRF   x7F
0BCB2:  CLRF   x80
0BCB4:  CLRF   x81
0BCB6:  CLRF   x82
0BCB8:  CLRF   x83
0BCBA:  CLRF   x84
0BCBC:  CLRF   x85
0BCBE:  CLRF   x86
0BCC0:  CLRF   x87
0BCC2:  CLRF   x88
0BCC4:  CLRF   x89
0BCC6:  CLRF   x8A
0BCC8:  CLRF   x8B
0BCCA:  CLRF   x8C
0BCCC:  CLRF   x8D
0BCCE:  CLRF   x8E
0BCD0:  CLRF   x8F
0BCD2:  CLRF   x90
0BCD4:  CLRF   x91
0BCD6:  CLRF   x92
0BCD8:  CLRF   x93
0BCDA:  CLRF   x94
0BCDC:  CLRF   x95
0BCDE:  CLRF   x96
0BCE0:  CLRF   x97
0BCE2:  CLRF   x98
0BCE4:  CLRF   x99
0BCE6:  CLRF   x9A
0BCE8:  CLRF   x9B
0BCEA:  CLRF   x9C
0BCEC:  CLRF   x9D
0BCEE:  CLRF   x9E
0BCF0:  CLRF   x9F
0BCF2:  CLRF   xA0
0BCF4:  CLRF   xA1
0BCF6:  CLRF   xA2
0BCF8:  CLRF   xA3
0BCFA:  CLRF   xA4
0BCFC:  CLRF   xA5
0BCFE:  CLRF   xA6
0BD00:  CLRF   xA7
0BD02:  CLRF   xA8
0BD04:  CLRF   xA9
0BD06:  CLRF   xAA
0BD08:  CLRF   xAB
0BD0A:  CLRF   xAC
0BD0C:  CLRF   xAD
0BD0E:  CLRF   xAE
0BD10:  CLRF   xAF
0BD12:  CLRF   xB0
0BD14:  CLRF   xB1
0BD16:  CLRF   xB2
0BD18:  CLRF   xB3
0BD1A:  CLRF   xB4
0BD1C:  CLRF   xB5
0BD1E:  CLRF   xB6
0BD20:  CLRF   xB7
0BD22:  CLRF   xB8
0BD24:  CLRF   xB9
0BD26:  CLRF   xBA
0BD28:  CLRF   xBB
0BD2A:  CLRF   xBC
0BD2C:  CLRF   xBD
0BD2E:  CLRF   xBE
0BD30:  CLRF   xBF
0BD32:  CLRF   xC0
0BD34:  CLRF   xC1
0BD36:  CLRF   xC2
0BD38:  CLRF   xC3
0BD3A:  CLRF   xC4
0BD3C:  CLRF   xC5
0BD3E:  CLRF   xC6
0BD40:  CLRF   xC7
0BD42:  CLRF   xC8
0BD44:  CLRF   xC9
0BD46:  CLRF   xCA
0BD48:  CLRF   xCB
0BD4A:  CLRF   xCC
0BD4C:  CLRF   xCD
0BD4E:  CLRF   xCE
0BD50:  CLRF   xCF
0BD52:  CLRF   xD0
0BD54:  CLRF   xD1
0BD56:  CLRF   xD2
0BD58:  CLRF   xD3
0BD5A:  CLRF   xD4
0BD5C:  CLRF   xD5
0BD5E:  CLRF   xD6
0BD60:  CLRF   xD7
0BD62:  CLRF   xD8
0BD64:  CLRF   xD9
0BD66:  CLRF   xDA
0BD68:  CLRF   xDB
0BD6A:  CLRF   xDC
0BD6C:  CLRF   xDD
0BD6E:  CLRF   xDE
0BD70:  CLRF   xDF
0BD72:  CLRF   xE0
0BD74:  CLRF   xE1
0BD76:  CLRF   xE2
0BD78:  CLRF   xE3
0BD7A:  CLRF   xE4
0BD7C:  CLRF   xE5
0BD7E:  CLRF   xE6
0BD80:  CLRF   xE7
0BD82:  CLRF   xE8
0BD84:  CLRF   xE9
0BD86:  CLRF   xEA
0BD88:  CLRF   xEB
0BD8A:  CLRF   xEC
0BD8C:  CLRF   xED
0BD8E:  CLRF   xEE
0BD90:  CLRF   xEF
0BD92:  CLRF   xF0
0BD94:  CLRF   xF1
0BD96:  CLRF   xF2
0BD98:  CLRF   xF3
0BD9A:  CLRF   xF4
0BD9C:  CLRF   xF5
0BD9E:  CLRF   xF6
0BDA0:  CLRF   xF7
0BDA2:  CLRF   xF8
0BDA4:  CLRF   xF9
0BDA6:  CLRF   xFA
0BDA8:  CLRF   xFB
0BDAA:  CLRF   xFC
0BDAC:  CLRF   xFD
0BDAE:  CLRF   xFE
0BDB0:  CLRF   xFF
0BDB2:  MOVLB  A
0BDB4:  CLRF   x00
0BDB6:  CLRF   x01
0BDB8:  CLRF   x02
0BDBA:  CLRF   x03
0BDBC:  CLRF   x04
0BDBE:  CLRF   x05
0BDC0:  CLRF   x06
....................     port2.port_num = 2; 
0BDC2:  MOVLW  02
0BDC4:  MOVLB  6
0BDC6:  MOVWF  x07
....................     port2.sweep_step = 0;
0BDC8:  CLRF   x09
0BDCA:  CLRF   x08
....................     port2.active = 1;
0BDCC:  MOVLB  A
0BDCE:  BSF    x06.0
.................... 
....................     int16 count = 1;
....................     iv_env_t measured_data = create_meas_data();
0BDD0:  CLRF   x08
0BDD2:  MOVLW  01
0BDD4:  MOVWF  x07
0BDD6:  MOVLB  0
0BDD8:  CALL   8F1C
0BDDC:  MOVFF  02,03
0BDE0:  MOVF   01,W
0BDE2:  MOVWF  FE1
0BDE4:  MOVFF  03,FE2
0BDE8:  MOVLW  0A
0BDEA:  MOVWF  FEA
0BDEC:  MOVLW  09
0BDEE:  MOVWF  FE9
0BDF0:  MOVLW  0C
0BDF2:  MOVWF  01
0BDF4:  MOVFF  FE6,FEE
0BDF8:  DECFSZ 01,F
0BDFA:  GOTO   BDF4
....................     while (port1.active || port2.active)
0BDFE:  MOVLB  6
0BE00:  BTFSS  x06.0
0BE02:  BRA    BE0A
0BE04:  MOVLB  0
0BE06:  GOTO   BE1A
0BE0A:  MOVLB  0
0BE0C:  MOVLB  A
0BE0E:  BTFSC  x06.0
0BE10:  BRA    BE18
0BE12:  MOVLB  0
0BE14:  GOTO   C0F6
0BE18:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0BE1A:  MOVFF  A08,A1B
0BE1E:  MOVFF  A07,A1A
0BE22:  CALL   2562
....................         mcp4901_2_write(count);
0BE26:  MOVFF  A08,A1B
0BE2A:  MOVFF  A07,A1A
0BE2E:  CALL   25A0
....................         delay_us(10); 
0BE32:  MOVLW  0D
0BE34:  MOVWF  00
0BE36:  DECFSZ 00,F
0BE38:  BRA    BE36
....................         if (port1.active) {
0BE3A:  MOVLB  6
0BE3C:  BTFSC  x06.0
0BE3E:  BRA    BE46
0BE40:  MOVLB  0
0BE42:  GOTO   BF96
0BE46:  MOVLB  0
....................             unsigned int32 ans = ad7490_read(ADC_CIGS1_CURR);
0BE48:  MOVLW  01
0BE4A:  MOVLB  A
0BE4C:  MOVWF  x2C
0BE4E:  MOVLB  0
0BE50:  CALL   21B2
0BE54:  MOVLB  A
0BE56:  CLRF   x18
0BE58:  CLRF   x17
0BE5A:  MOVFF  02,A16
0BE5E:  MOVFF  01,A15
0BE62:  MOVLB  0
....................             ans += ad7490_read(ADC_CIGS1_CURR);
0BE64:  MOVLW  01
0BE66:  MOVLB  A
0BE68:  MOVWF  x2C
0BE6A:  MOVLB  0
0BE6C:  CALL   21B2
0BE70:  MOVFF  02,03
0BE74:  MOVF   01,W
0BE76:  MOVLB  A
0BE78:  ADDWF  x15,F
0BE7A:  MOVF   03,W
0BE7C:  ADDWFC x16,F
0BE7E:  MOVLW  00
0BE80:  ADDWFC x17,F
0BE82:  MOVLW  00
0BE84:  ADDWFC x18,F
....................             ans = ans/2;
0BE86:  BCF    FD8.0
0BE88:  RRCF   x18,F
0BE8A:  RRCF   x17,F
0BE8C:  RRCF   x16,F
0BE8E:  RRCF   x15,F
....................             port1.data_buffer[count].voltage = ad7490_read(ADC_CIGS1_AMP);
0BE90:  RLCF   x07,W
0BE92:  MOVWF  02
0BE94:  RLCF   x08,W
0BE96:  MOVWF  03
0BE98:  RLCF   02,F
0BE9A:  RLCF   03,F
0BE9C:  MOVLW  FC
0BE9E:  ANDWF  02,F
0BEA0:  MOVF   02,W
0BEA2:  ADDLW  0A
0BEA4:  MOVWF  01
0BEA6:  MOVLW  02
0BEA8:  ADDWFC 03,F
0BEAA:  MOVF   01,W
0BEAC:  MOVWF  x1C
0BEAE:  MOVFF  03,A1D
0BEB2:  MOVLW  02
0BEB4:  MOVWF  x2C
0BEB6:  MOVLB  0
0BEB8:  CALL   21B2
0BEBC:  MOVFF  A1D,FEA
0BEC0:  MOVFF  A1C,FE9
0BEC4:  MOVFF  02,FEC
0BEC8:  MOVF   FED,F
0BECA:  MOVFF  01,FEF
....................             port1.data_buffer[count].current = ans;
0BECE:  MOVLB  A
0BED0:  RLCF   x07,W
0BED2:  MOVWF  02
0BED4:  RLCF   x08,W
0BED6:  MOVWF  03
0BED8:  RLCF   02,F
0BEDA:  RLCF   03,F
0BEDC:  MOVLW  FC
0BEDE:  ANDWF  02,F
0BEE0:  MOVF   02,W
0BEE2:  ADDLW  03
0BEE4:  MOVWF  x1A
0BEE6:  MOVLW  00
0BEE8:  ADDWFC 03,W
0BEEA:  MOVWF  x1B
0BEEC:  MOVLW  02
0BEEE:  ADDWF  x1A,W
0BEF0:  MOVWF  01
0BEF2:  MOVLW  00
0BEF4:  ADDWFC x1B,W
0BEF6:  MOVWF  03
0BEF8:  MOVF   01,W
0BEFA:  ADDLW  07
0BEFC:  MOVWF  FE9
0BEFE:  MOVLW  02
0BF00:  ADDWFC 03,W
0BF02:  MOVWF  FEA
0BF04:  MOVFF  A15,FEF
0BF08:  MOVFF  A16,FEC
0BF0C:  MOVF   FED,F
....................             port1.sweep_step = count + 1; 
0BF0E:  MOVLW  01
0BF10:  ADDWF  x07,W
0BF12:  MOVLB  2
0BF14:  MOVWF  x08
0BF16:  MOVLW  00
0BF18:  MOVLB  A
0BF1A:  ADDWFC x08,W
0BF1C:  MOVLB  2
0BF1E:  MOVWF  x09
....................             if (port1.data_buffer[count].current < curr_limit) {
0BF20:  MOVLB  A
0BF22:  RLCF   x07,W
0BF24:  MOVWF  02
0BF26:  RLCF   x08,W
0BF28:  MOVWF  03
0BF2A:  RLCF   02,F
0BF2C:  RLCF   03,F
0BF2E:  MOVLW  FC
0BF30:  ANDWF  02,F
0BF32:  MOVF   02,W
0BF34:  ADDLW  03
0BF36:  MOVWF  x1A
0BF38:  MOVLW  00
0BF3A:  ADDWFC 03,W
0BF3C:  MOVWF  x1B
0BF3E:  MOVLW  02
0BF40:  ADDWF  x1A,W
0BF42:  MOVWF  01
0BF44:  MOVLW  00
0BF46:  ADDWFC x1B,W
0BF48:  MOVWF  03
0BF4A:  MOVF   01,W
0BF4C:  ADDLW  07
0BF4E:  MOVWF  FE9
0BF50:  MOVLW  02
0BF52:  ADDWFC 03,W
0BF54:  MOVWF  FEA
0BF56:  MOVFF  FEC,A1B
0BF5A:  MOVF   FED,F
0BF5C:  MOVFF  FEF,A1A
0BF60:  MOVF   x1B,W
0BF62:  MOVLB  2
0BF64:  SUBWF  x06,W
0BF66:  BTFSC  FD8.0
0BF68:  BRA    BF70
0BF6A:  MOVLB  0
0BF6C:  GOTO   BF96
0BF70:  MOVLB  0
0BF72:  BTFSS  FD8.2
0BF74:  GOTO   BF8C
0BF78:  MOVLB  2
0BF7A:  MOVF   x05,W
0BF7C:  MOVLB  A
0BF7E:  SUBWF  x1A,W
0BF80:  BTFSS  FD8.0
0BF82:  BRA    BF8A
0BF84:  MOVLB  0
0BF86:  GOTO   BF96
0BF8A:  MOVLB  0
....................                 port1.active = 0;
0BF8C:  MOVLB  6
0BF8E:  BCF    x06.0
....................                 disconnect_port1();
0BF90:  MOVLB  0
0BF92:  CALL   8F9E
....................             }
....................         }
....................         if (port2.active) {
0BF96:  MOVLB  A
0BF98:  BTFSC  x06.0
0BF9A:  BRA    BFA2
0BF9C:  MOVLB  0
0BF9E:  GOTO   C0C6
0BFA2:  MOVLB  0
....................             port2.data_buffer[count].voltage = ad7490_read(ADC_CIGS2_AMP);
0BFA4:  MOVLB  A
0BFA6:  RLCF   x07,W
0BFA8:  MOVWF  02
0BFAA:  RLCF   x08,W
0BFAC:  MOVWF  03
0BFAE:  RLCF   02,F
0BFB0:  RLCF   03,F
0BFB2:  MOVLW  FC
0BFB4:  ANDWF  02,F
0BFB6:  MOVF   02,W
0BFB8:  ADDLW  0A
0BFBA:  MOVWF  01
0BFBC:  MOVLW  06
0BFBE:  ADDWFC 03,F
0BFC0:  MOVF   01,W
0BFC2:  MOVWF  x1C
0BFC4:  MOVFF  03,A1D
0BFC8:  MOVLW  06
0BFCA:  MOVWF  x2C
0BFCC:  MOVLB  0
0BFCE:  CALL   21B2
0BFD2:  MOVFF  A1D,FEA
0BFD6:  MOVFF  A1C,FE9
0BFDA:  MOVFF  02,FEC
0BFDE:  MOVF   FED,F
0BFE0:  MOVFF  01,FEF
....................             port2.data_buffer[count].current = ad7490_read(ADC_CIGS2_CURR);
0BFE4:  MOVLB  A
0BFE6:  RLCF   x07,W
0BFE8:  MOVWF  02
0BFEA:  RLCF   x08,W
0BFEC:  MOVWF  03
0BFEE:  RLCF   02,F
0BFF0:  RLCF   03,F
0BFF2:  MOVLW  FC
0BFF4:  ANDWF  02,F
0BFF6:  MOVF   02,W
0BFF8:  ADDLW  03
0BFFA:  MOVWF  x1A
0BFFC:  MOVLW  00
0BFFE:  ADDWFC 03,W
0C000:  MOVWF  x1B
0C002:  MOVLW  02
0C004:  ADDWF  x1A,W
0C006:  MOVWF  01
0C008:  MOVLW  00
0C00A:  ADDWFC x1B,W
0C00C:  MOVWF  03
0C00E:  MOVF   01,W
0C010:  ADDLW  07
0C012:  MOVWF  01
0C014:  MOVLW  06
0C016:  ADDWFC 03,F
0C018:  MOVF   01,W
0C01A:  MOVWF  x1A
0C01C:  MOVFF  03,A1B
0C020:  MOVLW  05
0C022:  MOVWF  x2C
0C024:  MOVLB  0
0C026:  CALL   21B2
0C02A:  MOVFF  A1B,FEA
0C02E:  MOVFF  A1A,FE9
0C032:  MOVFF  02,FEC
0C036:  MOVF   FED,F
0C038:  MOVFF  01,FEF
....................             port2.sweep_step = count + 1;
0C03C:  MOVLW  01
0C03E:  MOVLB  A
0C040:  ADDWF  x07,W
0C042:  MOVLB  6
0C044:  MOVWF  x08
0C046:  MOVLW  00
0C048:  MOVLB  A
0C04A:  ADDWFC x08,W
0C04C:  MOVLB  6
0C04E:  MOVWF  x09
....................             if (port2.data_buffer[count].current < curr_limit) {
0C050:  MOVLB  A
0C052:  RLCF   x07,W
0C054:  MOVWF  02
0C056:  RLCF   x08,W
0C058:  MOVWF  03
0C05A:  RLCF   02,F
0C05C:  RLCF   03,F
0C05E:  MOVLW  FC
0C060:  ANDWF  02,F
0C062:  MOVF   02,W
0C064:  ADDLW  03
0C066:  MOVWF  x1A
0C068:  MOVLW  00
0C06A:  ADDWFC 03,W
0C06C:  MOVWF  x1B
0C06E:  MOVLW  02
0C070:  ADDWF  x1A,W
0C072:  MOVWF  01
0C074:  MOVLW  00
0C076:  ADDWFC x1B,W
0C078:  MOVWF  03
0C07A:  MOVF   01,W
0C07C:  ADDLW  07
0C07E:  MOVWF  FE9
0C080:  MOVLW  06
0C082:  ADDWFC 03,W
0C084:  MOVWF  FEA
0C086:  MOVFF  FEC,A1B
0C08A:  MOVF   FED,F
0C08C:  MOVFF  FEF,A1A
0C090:  MOVF   x1B,W
0C092:  MOVLB  2
0C094:  SUBWF  x06,W
0C096:  BTFSC  FD8.0
0C098:  BRA    C0A0
0C09A:  MOVLB  0
0C09C:  GOTO   C0C6
0C0A0:  MOVLB  0
0C0A2:  BTFSS  FD8.2
0C0A4:  GOTO   C0BC
0C0A8:  MOVLB  2
0C0AA:  MOVF   x05,W
0C0AC:  MOVLB  A
0C0AE:  SUBWF  x1A,W
0C0B0:  BTFSS  FD8.0
0C0B2:  BRA    C0BA
0C0B4:  MOVLB  0
0C0B6:  GOTO   C0C6
0C0BA:  MOVLB  0
....................                 port2.active = 0;
0C0BC:  MOVLB  A
0C0BE:  BCF    x06.0
....................                 disconnect_port2();
0C0C0:  MOVLB  0
0C0C2:  CALL   8FA6
....................             } 
....................         }
....................         count++;
0C0C6:  MOVLB  A
0C0C8:  INCF   x07,F
0C0CA:  BTFSC  FD8.2
0C0CC:  INCF   x08,F
....................         if (count >= 255) {
0C0CE:  MOVF   x08,F
0C0D0:  BTFSC  FD8.2
0C0D2:  BRA    C0DA
0C0D4:  MOVLB  0
0C0D6:  GOTO   C0EE
0C0DA:  MOVLB  0
0C0DC:  MOVLB  A
0C0DE:  MOVF   x07,W
0C0E0:  SUBLW  FE
0C0E2:  BTFSS  FD8.0
0C0E4:  BRA    C0EC
0C0E6:  MOVLB  0
0C0E8:  GOTO   C0F2
0C0EC:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0C0EE:  GOTO   C0F6
....................         }
0C0F2:  GOTO   BDFE
....................     }
.................... 
....................     for (int i = 0; i < count; i++) {
0C0F6:  MOVLB  A
0C0F8:  CLRF   x19
0C0FA:  MOVLB  0
0C0FC:  MOVLB  A
0C0FE:  MOVF   x08,F
0C100:  BTFSC  FD8.2
0C102:  BRA    C10A
0C104:  MOVLB  0
0C106:  GOTO   C11E
0C10A:  MOVLB  0
0C10C:  MOVLB  A
0C10E:  MOVF   x07,W
0C110:  SUBWF  x19,W
0C112:  BTFSS  FD8.0
0C114:  BRA    C11C
0C116:  MOVLB  0
0C118:  GOTO   C2D0
0C11C:  MOVLB  0
.................... 
....................         fprintf(PC, "%04LX,%04LX,%04LX,%04LX\r\n",
....................             port1.data_buffer[i].voltage, port1.data_buffer[i].current,
....................             port2.data_buffer[i].voltage, port2.data_buffer[i].current);
0C11E:  MOVLB  A
0C120:  CLRF   x9C
0C122:  MOVFF  A19,A9B
0C126:  CLRF   x9E
0C128:  MOVLW  04
0C12A:  MOVWF  x9D
0C12C:  MOVLB  0
0C12E:  CALL   7FF4
0C132:  MOVFF  02,03
0C136:  MOVF   01,W
0C138:  ADDLW  0A
0C13A:  MOVWF  FE9
0C13C:  MOVLW  02
0C13E:  ADDWFC 03,W
0C140:  MOVWF  FEA
0C142:  MOVFF  FEC,A1D
0C146:  MOVF   FED,F
0C148:  MOVFF  FEF,A1C
0C14C:  MOVLB  A
0C14E:  CLRF   x9C
0C150:  MOVFF  A19,A9B
0C154:  CLRF   x9E
0C156:  MOVLW  04
0C158:  MOVWF  x9D
0C15A:  MOVLB  0
0C15C:  CALL   7FF4
0C160:  MOVFF  02,03
0C164:  MOVF   01,W
0C166:  ADDLW  03
0C168:  MOVLB  A
0C16A:  MOVWF  x1E
0C16C:  MOVLW  00
0C16E:  ADDWFC 03,W
0C170:  MOVWF  x1F
0C172:  MOVLW  02
0C174:  ADDWF  x1E,W
0C176:  MOVWF  01
0C178:  MOVLW  00
0C17A:  ADDWFC x1F,W
0C17C:  MOVWF  03
0C17E:  MOVF   01,W
0C180:  ADDLW  07
0C182:  MOVWF  FE9
0C184:  MOVLW  02
0C186:  ADDWFC 03,W
0C188:  MOVWF  FEA
0C18A:  MOVFF  FEC,A1F
0C18E:  MOVF   FED,F
0C190:  MOVFF  FEF,A1E
0C194:  CLRF   x9C
0C196:  MOVFF  A19,A9B
0C19A:  CLRF   x9E
0C19C:  MOVLW  04
0C19E:  MOVWF  x9D
0C1A0:  MOVLB  0
0C1A2:  CALL   7FF4
0C1A6:  MOVFF  02,03
0C1AA:  MOVF   01,W
0C1AC:  ADDLW  0A
0C1AE:  MOVWF  FE9
0C1B0:  MOVLW  06
0C1B2:  ADDWFC 03,W
0C1B4:  MOVWF  FEA
0C1B6:  MOVFF  FEC,A23
0C1BA:  MOVF   FED,F
0C1BC:  MOVFF  FEF,A22
0C1C0:  MOVLB  A
0C1C2:  CLRF   x9C
0C1C4:  MOVFF  A19,A9B
0C1C8:  CLRF   x9E
0C1CA:  MOVLW  04
0C1CC:  MOVWF  x9D
0C1CE:  MOVLB  0
0C1D0:  CALL   7FF4
0C1D4:  MOVFF  02,03
0C1D8:  MOVF   01,W
0C1DA:  ADDLW  03
0C1DC:  MOVLB  A
0C1DE:  MOVWF  x24
0C1E0:  MOVLW  00
0C1E2:  ADDWFC 03,W
0C1E4:  MOVWF  x25
0C1E6:  MOVLW  02
0C1E8:  ADDWF  x24,W
0C1EA:  MOVWF  01
0C1EC:  MOVLW  00
0C1EE:  ADDWFC x25,W
0C1F0:  MOVWF  03
0C1F2:  MOVF   01,W
0C1F4:  ADDLW  07
0C1F6:  MOVWF  FE9
0C1F8:  MOVLW  06
0C1FA:  ADDWFC 03,W
0C1FC:  MOVWF  FEA
0C1FE:  MOVFF  FEC,A25
0C202:  MOVF   FED,F
0C204:  MOVFF  FEF,A24
0C208:  MOVFF  A1D,A26
0C20C:  MOVLW  37
0C20E:  MOVWF  x27
0C210:  MOVLB  0
0C212:  CALL   2232
0C216:  MOVFF  A1C,A26
0C21A:  MOVLW  37
0C21C:  MOVLB  A
0C21E:  MOVWF  x27
0C220:  MOVLB  0
0C222:  CALL   2232
0C226:  MOVLW  2C
0C228:  BTFSS  FA6.6
0C22A:  GOTO   C228
0C22E:  MOVLB  E
0C230:  MOVWF  xF9
0C232:  MOVFF  A1F,A26
0C236:  MOVLW  37
0C238:  MOVLB  A
0C23A:  MOVWF  x27
0C23C:  MOVLB  0
0C23E:  CALL   2232
0C242:  MOVFF  A1E,A26
0C246:  MOVLW  37
0C248:  MOVLB  A
0C24A:  MOVWF  x27
0C24C:  MOVLB  0
0C24E:  CALL   2232
0C252:  MOVLW  2C
0C254:  BTFSS  FA6.6
0C256:  GOTO   C254
0C25A:  MOVLB  E
0C25C:  MOVWF  xF9
0C25E:  MOVFF  A23,A26
0C262:  MOVLW  37
0C264:  MOVLB  A
0C266:  MOVWF  x27
0C268:  MOVLB  0
0C26A:  CALL   2232
0C26E:  MOVFF  A22,A26
0C272:  MOVLW  37
0C274:  MOVLB  A
0C276:  MOVWF  x27
0C278:  MOVLB  0
0C27A:  CALL   2232
0C27E:  MOVLW  2C
0C280:  BTFSS  FA6.6
0C282:  GOTO   C280
0C286:  MOVLB  E
0C288:  MOVWF  xF9
0C28A:  MOVFF  A25,A26
0C28E:  MOVLW  37
0C290:  MOVLB  A
0C292:  MOVWF  x27
0C294:  MOVLB  0
0C296:  CALL   2232
0C29A:  MOVFF  A24,A26
0C29E:  MOVLW  37
0C2A0:  MOVLB  A
0C2A2:  MOVWF  x27
0C2A4:  MOVLB  0
0C2A6:  CALL   2232
0C2AA:  MOVLW  0D
0C2AC:  BTFSS  FA6.6
0C2AE:  GOTO   C2AC
0C2B2:  MOVLB  E
0C2B4:  MOVWF  xF9
0C2B6:  MOVLW  0A
0C2B8:  MOVLB  0
0C2BA:  BTFSS  FA6.6
0C2BC:  GOTO   C2BA
0C2C0:  MOVLB  E
0C2C2:  MOVWF  xF9
0C2C4:  MOVLB  0
0C2C6:  MOVLB  A
0C2C8:  INCF   x19,F
0C2CA:  MOVLB  0
0C2CC:  GOTO   C0FC
....................     }
0C2D0:  GOTO   C596 (RETURN)
.................... 
.................... }
.................... 
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_limit)
*
0983C:  CALL   3920
09840:  MOVFF  03,226
09844:  MOVFF  02,225
09848:  MOVFF  01,224
0984C:  MOVFF  00,223
.................... {
....................     unsigned int32 start_time_ms = get_current_sec();
....................     fputc('.', PC);
09850:  MOVLW  2E
09852:  GOTO   8F0C
....................     // Enable both CIGS ports
....................     connect_port1();
09856:  CALL   4F9E
....................     connect_port2();
0985A:  CALL   4FA6
.................... 
....................     // delay_us(100); // wait for the CIGS to stabilize
.................... 
....................     // Init Port1
....................     sweep_config_t port1 = {0};
0985E:  MOVLB  2
09860:  CLRF   x27
09862:  CLRF   x28
09864:  CLRF   x29
09866:  CLRF   x2A
09868:  CLRF   x2B
0986A:  CLRF   x2C
0986C:  CLRF   x2D
0986E:  CLRF   x2E
09870:  CLRF   x2F
09872:  CLRF   x30
09874:  CLRF   x31
09876:  CLRF   x32
09878:  CLRF   x33
0987A:  CLRF   x34
0987C:  CLRF   x35
0987E:  CLRF   x36
09880:  CLRF   x37
09882:  CLRF   x38
09884:  CLRF   x39
09886:  CLRF   x3A
09888:  CLRF   x3B
0988A:  CLRF   x3C
0988C:  CLRF   x3D
0988E:  CLRF   x3E
09890:  CLRF   x3F
09892:  CLRF   x40
09894:  CLRF   x41
09896:  CLRF   x42
09898:  CLRF   x43
0989A:  CLRF   x44
0989C:  CLRF   x45
0989E:  CLRF   x46
098A0:  CLRF   x47
098A2:  CLRF   x48
098A4:  CLRF   x49
098A6:  CLRF   x4A
098A8:  CLRF   x4B
098AA:  CLRF   x4C
098AC:  CLRF   x4D
098AE:  CLRF   x4E
098B0:  CLRF   x4F
098B2:  CLRF   x50
098B4:  CLRF   x51
098B6:  CLRF   x52
098B8:  CLRF   x53
098BA:  CLRF   x54
098BC:  CLRF   x55
098BE:  CLRF   x56
098C0:  CLRF   x57
098C2:  CLRF   x58
098C4:  CLRF   x59
098C6:  CLRF   x5A
098C8:  CLRF   x5B
098CA:  CLRF   x5C
098CC:  CLRF   x5D
098CE:  CLRF   x5E
098D0:  CLRF   x5F
098D2:  CLRF   x60
098D4:  CLRF   x61
098D6:  CLRF   x62
098D8:  CLRF   x63
098DA:  CLRF   x64
098DC:  CLRF   x65
098DE:  CLRF   x66
098E0:  CLRF   x67
098E2:  CLRF   x68
098E4:  CLRF   x69
098E6:  CLRF   x6A
098E8:  CLRF   x6B
098EA:  CLRF   x6C
098EC:  CLRF   x6D
098EE:  CLRF   x6E
098F0:  CLRF   x6F
098F2:  CLRF   x70
098F4:  CLRF   x71
098F6:  CLRF   x72
098F8:  CLRF   x73
098FA:  CLRF   x74
098FC:  CLRF   x75
098FE:  CLRF   x76
09900:  CLRF   x77
09902:  CLRF   x78
09904:  CLRF   x79
09906:  CLRF   x7A
09908:  CLRF   x7B
0990A:  CLRF   x7C
0990C:  CLRF   x7D
0990E:  CLRF   x7E
09910:  CLRF   x7F
09912:  CLRF   x80
09914:  CLRF   x81
09916:  CLRF   x82
09918:  CLRF   x83
0991A:  CLRF   x84
0991C:  CLRF   x85
0991E:  CLRF   x86
09920:  CLRF   x87
09922:  CLRF   x88
09924:  CLRF   x89
09926:  CLRF   x8A
09928:  CLRF   x8B
0992A:  CLRF   x8C
0992C:  CLRF   x8D
0992E:  CLRF   x8E
09930:  CLRF   x8F
09932:  CLRF   x90
09934:  CLRF   x91
09936:  CLRF   x92
09938:  CLRF   x93
0993A:  CLRF   x94
0993C:  CLRF   x95
0993E:  CLRF   x96
09940:  CLRF   x97
09942:  CLRF   x98
09944:  CLRF   x99
09946:  CLRF   x9A
09948:  CLRF   x9B
0994A:  CLRF   x9C
0994C:  CLRF   x9D
0994E:  CLRF   x9E
09950:  CLRF   x9F
09952:  CLRF   xA0
09954:  CLRF   xA1
09956:  CLRF   xA2
09958:  CLRF   xA3
0995A:  CLRF   xA4
0995C:  CLRF   xA5
0995E:  CLRF   xA6
09960:  CLRF   xA7
09962:  CLRF   xA8
09964:  CLRF   xA9
09966:  CLRF   xAA
09968:  CLRF   xAB
0996A:  CLRF   xAC
0996C:  CLRF   xAD
0996E:  CLRF   xAE
09970:  CLRF   xAF
09972:  CLRF   xB0
09974:  CLRF   xB1
09976:  CLRF   xB2
09978:  CLRF   xB3
0997A:  CLRF   xB4
0997C:  CLRF   xB5
0997E:  CLRF   xB6
09980:  CLRF   xB7
09982:  CLRF   xB8
09984:  CLRF   xB9
09986:  CLRF   xBA
09988:  CLRF   xBB
0998A:  CLRF   xBC
0998C:  CLRF   xBD
0998E:  CLRF   xBE
09990:  CLRF   xBF
09992:  CLRF   xC0
09994:  CLRF   xC1
09996:  CLRF   xC2
09998:  CLRF   xC3
0999A:  CLRF   xC4
0999C:  CLRF   xC5
0999E:  CLRF   xC6
099A0:  CLRF   xC7
099A2:  CLRF   xC8
099A4:  CLRF   xC9
099A6:  CLRF   xCA
099A8:  CLRF   xCB
099AA:  CLRF   xCC
099AC:  CLRF   xCD
099AE:  CLRF   xCE
099B0:  CLRF   xCF
099B2:  CLRF   xD0
099B4:  CLRF   xD1
099B6:  CLRF   xD2
099B8:  CLRF   xD3
099BA:  CLRF   xD4
099BC:  CLRF   xD5
099BE:  CLRF   xD6
099C0:  CLRF   xD7
099C2:  CLRF   xD8
099C4:  CLRF   xD9
099C6:  CLRF   xDA
099C8:  CLRF   xDB
099CA:  CLRF   xDC
099CC:  CLRF   xDD
099CE:  CLRF   xDE
099D0:  CLRF   xDF
099D2:  CLRF   xE0
099D4:  CLRF   xE1
099D6:  CLRF   xE2
099D8:  CLRF   xE3
099DA:  CLRF   xE4
099DC:  CLRF   xE5
099DE:  CLRF   xE6
099E0:  CLRF   xE7
099E2:  CLRF   xE8
099E4:  CLRF   xE9
099E6:  CLRF   xEA
099E8:  CLRF   xEB
099EA:  CLRF   xEC
099EC:  CLRF   xED
099EE:  CLRF   xEE
099F0:  CLRF   xEF
099F2:  CLRF   xF0
099F4:  CLRF   xF1
099F6:  CLRF   xF2
099F8:  CLRF   xF3
099FA:  CLRF   xF4
099FC:  CLRF   xF5
099FE:  CLRF   xF6
09A00:  CLRF   xF7
09A02:  CLRF   xF8
09A04:  CLRF   xF9
09A06:  CLRF   xFA
09A08:  CLRF   xFB
09A0A:  CLRF   xFC
09A0C:  CLRF   xFD
09A0E:  CLRF   xFE
09A10:  CLRF   xFF
09A12:  MOVLB  3
09A14:  CLRF   x00
09A16:  CLRF   x01
09A18:  CLRF   x02
09A1A:  CLRF   x03
09A1C:  CLRF   x04
09A1E:  CLRF   x05
09A20:  CLRF   x06
09A22:  CLRF   x07
09A24:  CLRF   x08
09A26:  CLRF   x09
09A28:  CLRF   x0A
09A2A:  CLRF   x0B
09A2C:  CLRF   x0C
09A2E:  CLRF   x0D
09A30:  CLRF   x0E
09A32:  CLRF   x0F
09A34:  CLRF   x10
09A36:  CLRF   x11
09A38:  CLRF   x12
09A3A:  CLRF   x13
09A3C:  CLRF   x14
09A3E:  CLRF   x15
09A40:  CLRF   x16
09A42:  CLRF   x17
09A44:  CLRF   x18
09A46:  CLRF   x19
09A48:  CLRF   x1A
09A4A:  CLRF   x1B
09A4C:  CLRF   x1C
09A4E:  CLRF   x1D
09A50:  CLRF   x1E
09A52:  CLRF   x1F
09A54:  CLRF   x20
09A56:  CLRF   x21
09A58:  CLRF   x22
09A5A:  CLRF   x23
09A5C:  CLRF   x24
09A5E:  CLRF   x25
09A60:  CLRF   x26
09A62:  CLRF   x27
09A64:  CLRF   x28
09A66:  CLRF   x29
09A68:  CLRF   x2A
09A6A:  CLRF   x2B
09A6C:  CLRF   x2C
09A6E:  CLRF   x2D
09A70:  CLRF   x2E
09A72:  CLRF   x2F
09A74:  CLRF   x30
09A76:  CLRF   x31
09A78:  CLRF   x32
09A7A:  CLRF   x33
09A7C:  CLRF   x34
09A7E:  CLRF   x35
09A80:  CLRF   x36
09A82:  CLRF   x37
09A84:  CLRF   x38
09A86:  CLRF   x39
09A88:  CLRF   x3A
09A8A:  CLRF   x3B
09A8C:  CLRF   x3C
09A8E:  CLRF   x3D
09A90:  CLRF   x3E
09A92:  CLRF   x3F
09A94:  CLRF   x40
09A96:  CLRF   x41
09A98:  CLRF   x42
09A9A:  CLRF   x43
09A9C:  CLRF   x44
09A9E:  CLRF   x45
09AA0:  CLRF   x46
09AA2:  CLRF   x47
09AA4:  CLRF   x48
09AA6:  CLRF   x49
09AA8:  CLRF   x4A
09AAA:  CLRF   x4B
09AAC:  CLRF   x4C
09AAE:  CLRF   x4D
09AB0:  CLRF   x4E
09AB2:  CLRF   x4F
09AB4:  CLRF   x50
09AB6:  CLRF   x51
09AB8:  CLRF   x52
09ABA:  CLRF   x53
09ABC:  CLRF   x54
09ABE:  CLRF   x55
09AC0:  CLRF   x56
09AC2:  CLRF   x57
09AC4:  CLRF   x58
09AC6:  CLRF   x59
09AC8:  CLRF   x5A
09ACA:  CLRF   x5B
09ACC:  CLRF   x5C
09ACE:  CLRF   x5D
09AD0:  CLRF   x5E
09AD2:  CLRF   x5F
09AD4:  CLRF   x60
09AD6:  CLRF   x61
09AD8:  CLRF   x62
09ADA:  CLRF   x63
09ADC:  CLRF   x64
09ADE:  CLRF   x65
09AE0:  CLRF   x66
09AE2:  CLRF   x67
09AE4:  CLRF   x68
09AE6:  CLRF   x69
09AE8:  CLRF   x6A
09AEA:  CLRF   x6B
09AEC:  CLRF   x6C
09AEE:  CLRF   x6D
09AF0:  CLRF   x6E
09AF2:  CLRF   x6F
09AF4:  CLRF   x70
09AF6:  CLRF   x71
09AF8:  CLRF   x72
09AFA:  CLRF   x73
09AFC:  CLRF   x74
09AFE:  CLRF   x75
09B00:  CLRF   x76
09B02:  CLRF   x77
09B04:  CLRF   x78
09B06:  CLRF   x79
09B08:  CLRF   x7A
09B0A:  CLRF   x7B
09B0C:  CLRF   x7C
09B0E:  CLRF   x7D
09B10:  CLRF   x7E
09B12:  CLRF   x7F
09B14:  CLRF   x80
09B16:  CLRF   x81
09B18:  CLRF   x82
09B1A:  CLRF   x83
09B1C:  CLRF   x84
09B1E:  CLRF   x85
09B20:  CLRF   x86
09B22:  CLRF   x87
09B24:  CLRF   x88
09B26:  CLRF   x89
09B28:  CLRF   x8A
09B2A:  CLRF   x8B
09B2C:  CLRF   x8C
09B2E:  CLRF   x8D
09B30:  CLRF   x8E
09B32:  CLRF   x8F
09B34:  CLRF   x90
09B36:  CLRF   x91
09B38:  CLRF   x92
09B3A:  CLRF   x93
09B3C:  CLRF   x94
09B3E:  CLRF   x95
09B40:  CLRF   x96
09B42:  CLRF   x97
09B44:  CLRF   x98
09B46:  CLRF   x99
09B48:  CLRF   x9A
09B4A:  CLRF   x9B
09B4C:  CLRF   x9C
09B4E:  CLRF   x9D
09B50:  CLRF   x9E
09B52:  CLRF   x9F
09B54:  CLRF   xA0
09B56:  CLRF   xA1
09B58:  CLRF   xA2
09B5A:  CLRF   xA3
09B5C:  CLRF   xA4
09B5E:  CLRF   xA5
09B60:  CLRF   xA6
09B62:  CLRF   xA7
09B64:  CLRF   xA8
09B66:  CLRF   xA9
09B68:  CLRF   xAA
09B6A:  CLRF   xAB
09B6C:  CLRF   xAC
09B6E:  CLRF   xAD
09B70:  CLRF   xAE
09B72:  CLRF   xAF
09B74:  CLRF   xB0
09B76:  CLRF   xB1
09B78:  CLRF   xB2
09B7A:  CLRF   xB3
09B7C:  CLRF   xB4
09B7E:  CLRF   xB5
09B80:  CLRF   xB6
09B82:  CLRF   xB7
09B84:  CLRF   xB8
09B86:  CLRF   xB9
09B88:  CLRF   xBA
09B8A:  CLRF   xBB
09B8C:  CLRF   xBC
09B8E:  CLRF   xBD
09B90:  CLRF   xBE
09B92:  CLRF   xBF
09B94:  CLRF   xC0
09B96:  CLRF   xC1
09B98:  CLRF   xC2
09B9A:  CLRF   xC3
09B9C:  CLRF   xC4
09B9E:  CLRF   xC5
09BA0:  CLRF   xC6
09BA2:  CLRF   xC7
09BA4:  CLRF   xC8
09BA6:  CLRF   xC9
09BA8:  CLRF   xCA
09BAA:  CLRF   xCB
09BAC:  CLRF   xCC
09BAE:  CLRF   xCD
09BB0:  CLRF   xCE
09BB2:  CLRF   xCF
09BB4:  CLRF   xD0
09BB6:  CLRF   xD1
09BB8:  CLRF   xD2
09BBA:  CLRF   xD3
09BBC:  CLRF   xD4
09BBE:  CLRF   xD5
09BC0:  CLRF   xD6
09BC2:  CLRF   xD7
09BC4:  CLRF   xD8
09BC6:  CLRF   xD9
09BC8:  CLRF   xDA
09BCA:  CLRF   xDB
09BCC:  CLRF   xDC
09BCE:  CLRF   xDD
09BD0:  CLRF   xDE
09BD2:  CLRF   xDF
09BD4:  CLRF   xE0
09BD6:  CLRF   xE1
09BD8:  CLRF   xE2
09BDA:  CLRF   xE3
09BDC:  CLRF   xE4
09BDE:  CLRF   xE5
09BE0:  CLRF   xE6
09BE2:  CLRF   xE7
09BE4:  CLRF   xE8
09BE6:  CLRF   xE9
09BE8:  CLRF   xEA
09BEA:  CLRF   xEB
09BEC:  CLRF   xEC
09BEE:  CLRF   xED
09BF0:  CLRF   xEE
09BF2:  CLRF   xEF
09BF4:  CLRF   xF0
09BF6:  CLRF   xF1
09BF8:  CLRF   xF2
09BFA:  CLRF   xF3
09BFC:  CLRF   xF4
09BFE:  CLRF   xF5
09C00:  CLRF   xF6
09C02:  CLRF   xF7
09C04:  CLRF   xF8
09C06:  CLRF   xF9
09C08:  CLRF   xFA
09C0A:  CLRF   xFB
09C0C:  CLRF   xFC
09C0E:  CLRF   xFD
09C10:  CLRF   xFE
09C12:  CLRF   xFF
09C14:  MOVLB  4
09C16:  CLRF   x00
09C18:  CLRF   x01
09C1A:  CLRF   x02
09C1C:  CLRF   x03
09C1E:  CLRF   x04
09C20:  CLRF   x05
09C22:  CLRF   x06
09C24:  CLRF   x07
09C26:  CLRF   x08
09C28:  CLRF   x09
09C2A:  CLRF   x0A
09C2C:  CLRF   x0B
09C2E:  CLRF   x0C
09C30:  CLRF   x0D
09C32:  CLRF   x0E
09C34:  CLRF   x0F
09C36:  CLRF   x10
09C38:  CLRF   x11
09C3A:  CLRF   x12
09C3C:  CLRF   x13
09C3E:  CLRF   x14
09C40:  CLRF   x15
09C42:  CLRF   x16
09C44:  CLRF   x17
09C46:  CLRF   x18
09C48:  CLRF   x19
09C4A:  CLRF   x1A
09C4C:  CLRF   x1B
09C4E:  CLRF   x1C
09C50:  CLRF   x1D
09C52:  CLRF   x1E
09C54:  CLRF   x1F
09C56:  CLRF   x20
09C58:  CLRF   x21
09C5A:  CLRF   x22
09C5C:  CLRF   x23
09C5E:  CLRF   x24
09C60:  CLRF   x25
09C62:  CLRF   x26
09C64:  CLRF   x27
09C66:  CLRF   x28
09C68:  CLRF   x29
09C6A:  CLRF   x2A
....................     port1.port_num = 1;
09C6C:  MOVLW  01
09C6E:  MOVLB  2
09C70:  MOVWF  x27
....................     port1.sweep_step = 0;
09C72:  CLRF   x29
09C74:  CLRF   x28
....................     port1.active = 1;
09C76:  MOVLB  4
09C78:  BSF    x2A.0
.................... 
....................     // Init Port2
....................     sweep_config_t port2 = {0};
09C7A:  CLRF   x2B
09C7C:  CLRF   x2C
09C7E:  CLRF   x2D
09C80:  CLRF   x2E
09C82:  CLRF   x2F
09C84:  CLRF   x30
09C86:  CLRF   x31
09C88:  CLRF   x32
09C8A:  CLRF   x33
09C8C:  CLRF   x34
09C8E:  CLRF   x35
09C90:  CLRF   x36
09C92:  CLRF   x37
09C94:  CLRF   x38
09C96:  CLRF   x39
09C98:  CLRF   x3A
09C9A:  CLRF   x3B
09C9C:  CLRF   x3C
09C9E:  CLRF   x3D
09CA0:  CLRF   x3E
09CA2:  CLRF   x3F
09CA4:  CLRF   x40
09CA6:  CLRF   x41
09CA8:  CLRF   x42
09CAA:  CLRF   x43
09CAC:  CLRF   x44
09CAE:  CLRF   x45
09CB0:  CLRF   x46
09CB2:  CLRF   x47
09CB4:  CLRF   x48
09CB6:  CLRF   x49
09CB8:  CLRF   x4A
09CBA:  CLRF   x4B
09CBC:  CLRF   x4C
09CBE:  CLRF   x4D
09CC0:  CLRF   x4E
09CC2:  CLRF   x4F
09CC4:  CLRF   x50
09CC6:  CLRF   x51
09CC8:  CLRF   x52
09CCA:  CLRF   x53
09CCC:  CLRF   x54
09CCE:  CLRF   x55
09CD0:  CLRF   x56
09CD2:  CLRF   x57
09CD4:  CLRF   x58
09CD6:  CLRF   x59
09CD8:  CLRF   x5A
09CDA:  CLRF   x5B
09CDC:  CLRF   x5C
09CDE:  CLRF   x5D
09CE0:  CLRF   x5E
09CE2:  CLRF   x5F
09CE4:  CLRF   x60
09CE6:  CLRF   x61
09CE8:  CLRF   x62
09CEA:  CLRF   x63
09CEC:  CLRF   x64
09CEE:  CLRF   x65
09CF0:  CLRF   x66
09CF2:  CLRF   x67
09CF4:  CLRF   x68
09CF6:  CLRF   x69
09CF8:  CLRF   x6A
09CFA:  CLRF   x6B
09CFC:  CLRF   x6C
09CFE:  CLRF   x6D
09D00:  CLRF   x6E
09D02:  CLRF   x6F
09D04:  CLRF   x70
09D06:  CLRF   x71
09D08:  CLRF   x72
09D0A:  CLRF   x73
09D0C:  CLRF   x74
09D0E:  CLRF   x75
09D10:  CLRF   x76
09D12:  CLRF   x77
09D14:  CLRF   x78
09D16:  CLRF   x79
09D18:  CLRF   x7A
09D1A:  CLRF   x7B
09D1C:  CLRF   x7C
09D1E:  CLRF   x7D
09D20:  CLRF   x7E
09D22:  CLRF   x7F
09D24:  CLRF   x80
09D26:  CLRF   x81
09D28:  CLRF   x82
09D2A:  CLRF   x83
09D2C:  CLRF   x84
09D2E:  CLRF   x85
09D30:  CLRF   x86
09D32:  CLRF   x87
09D34:  CLRF   x88
09D36:  CLRF   x89
09D38:  CLRF   x8A
09D3A:  CLRF   x8B
09D3C:  CLRF   x8C
09D3E:  CLRF   x8D
09D40:  CLRF   x8E
09D42:  CLRF   x8F
09D44:  CLRF   x90
09D46:  CLRF   x91
09D48:  CLRF   x92
09D4A:  CLRF   x93
09D4C:  CLRF   x94
09D4E:  CLRF   x95
09D50:  CLRF   x96
09D52:  CLRF   x97
09D54:  CLRF   x98
09D56:  CLRF   x99
09D58:  CLRF   x9A
09D5A:  CLRF   x9B
09D5C:  CLRF   x9C
09D5E:  CLRF   x9D
09D60:  CLRF   x9E
09D62:  CLRF   x9F
09D64:  CLRF   xA0
09D66:  CLRF   xA1
09D68:  CLRF   xA2
09D6A:  CLRF   xA3
09D6C:  CLRF   xA4
09D6E:  CLRF   xA5
09D70:  CLRF   xA6
09D72:  CLRF   xA7
09D74:  CLRF   xA8
09D76:  CLRF   xA9
09D78:  CLRF   xAA
09D7A:  CLRF   xAB
09D7C:  CLRF   xAC
09D7E:  CLRF   xAD
09D80:  CLRF   xAE
09D82:  CLRF   xAF
09D84:  CLRF   xB0
09D86:  CLRF   xB1
09D88:  CLRF   xB2
09D8A:  CLRF   xB3
09D8C:  CLRF   xB4
09D8E:  CLRF   xB5
09D90:  CLRF   xB6
09D92:  CLRF   xB7
09D94:  CLRF   xB8
09D96:  CLRF   xB9
09D98:  CLRF   xBA
09D9A:  CLRF   xBB
09D9C:  CLRF   xBC
09D9E:  CLRF   xBD
09DA0:  CLRF   xBE
09DA2:  CLRF   xBF
09DA4:  CLRF   xC0
09DA6:  CLRF   xC1
09DA8:  CLRF   xC2
09DAA:  CLRF   xC3
09DAC:  CLRF   xC4
09DAE:  CLRF   xC5
09DB0:  CLRF   xC6
09DB2:  CLRF   xC7
09DB4:  CLRF   xC8
09DB6:  CLRF   xC9
09DB8:  CLRF   xCA
09DBA:  CLRF   xCB
09DBC:  CLRF   xCC
09DBE:  CLRF   xCD
09DC0:  CLRF   xCE
09DC2:  CLRF   xCF
09DC4:  CLRF   xD0
09DC6:  CLRF   xD1
09DC8:  CLRF   xD2
09DCA:  CLRF   xD3
09DCC:  CLRF   xD4
09DCE:  CLRF   xD5
09DD0:  CLRF   xD6
09DD2:  CLRF   xD7
09DD4:  CLRF   xD8
09DD6:  CLRF   xD9
09DD8:  CLRF   xDA
09DDA:  CLRF   xDB
09DDC:  CLRF   xDC
09DDE:  CLRF   xDD
09DE0:  CLRF   xDE
09DE2:  CLRF   xDF
09DE4:  CLRF   xE0
09DE6:  CLRF   xE1
09DE8:  CLRF   xE2
09DEA:  CLRF   xE3
09DEC:  CLRF   xE4
09DEE:  CLRF   xE5
09DF0:  CLRF   xE6
09DF2:  CLRF   xE7
09DF4:  CLRF   xE8
09DF6:  CLRF   xE9
09DF8:  CLRF   xEA
09DFA:  CLRF   xEB
09DFC:  CLRF   xEC
09DFE:  CLRF   xED
09E00:  CLRF   xEE
09E02:  CLRF   xEF
09E04:  CLRF   xF0
09E06:  CLRF   xF1
09E08:  CLRF   xF2
09E0A:  CLRF   xF3
09E0C:  CLRF   xF4
09E0E:  CLRF   xF5
09E10:  CLRF   xF6
09E12:  CLRF   xF7
09E14:  CLRF   xF8
09E16:  CLRF   xF9
09E18:  CLRF   xFA
09E1A:  CLRF   xFB
09E1C:  CLRF   xFC
09E1E:  CLRF   xFD
09E20:  CLRF   xFE
09E22:  CLRF   xFF
09E24:  MOVLB  5
09E26:  CLRF   x00
09E28:  CLRF   x01
09E2A:  CLRF   x02
09E2C:  CLRF   x03
09E2E:  CLRF   x04
09E30:  CLRF   x05
09E32:  CLRF   x06
09E34:  CLRF   x07
09E36:  CLRF   x08
09E38:  CLRF   x09
09E3A:  CLRF   x0A
09E3C:  CLRF   x0B
09E3E:  CLRF   x0C
09E40:  CLRF   x0D
09E42:  CLRF   x0E
09E44:  CLRF   x0F
09E46:  CLRF   x10
09E48:  CLRF   x11
09E4A:  CLRF   x12
09E4C:  CLRF   x13
09E4E:  CLRF   x14
09E50:  CLRF   x15
09E52:  CLRF   x16
09E54:  CLRF   x17
09E56:  CLRF   x18
09E58:  CLRF   x19
09E5A:  CLRF   x1A
09E5C:  CLRF   x1B
09E5E:  CLRF   x1C
09E60:  CLRF   x1D
09E62:  CLRF   x1E
09E64:  CLRF   x1F
09E66:  CLRF   x20
09E68:  CLRF   x21
09E6A:  CLRF   x22
09E6C:  CLRF   x23
09E6E:  CLRF   x24
09E70:  CLRF   x25
09E72:  CLRF   x26
09E74:  CLRF   x27
09E76:  CLRF   x28
09E78:  CLRF   x29
09E7A:  CLRF   x2A
09E7C:  CLRF   x2B
09E7E:  CLRF   x2C
09E80:  CLRF   x2D
09E82:  CLRF   x2E
09E84:  CLRF   x2F
09E86:  CLRF   x30
09E88:  CLRF   x31
09E8A:  CLRF   x32
09E8C:  CLRF   x33
09E8E:  CLRF   x34
09E90:  CLRF   x35
09E92:  CLRF   x36
09E94:  CLRF   x37
09E96:  CLRF   x38
09E98:  CLRF   x39
09E9A:  CLRF   x3A
09E9C:  CLRF   x3B
09E9E:  CLRF   x3C
09EA0:  CLRF   x3D
09EA2:  CLRF   x3E
09EA4:  CLRF   x3F
09EA6:  CLRF   x40
09EA8:  CLRF   x41
09EAA:  CLRF   x42
09EAC:  CLRF   x43
09EAE:  CLRF   x44
09EB0:  CLRF   x45
09EB2:  CLRF   x46
09EB4:  CLRF   x47
09EB6:  CLRF   x48
09EB8:  CLRF   x49
09EBA:  CLRF   x4A
09EBC:  CLRF   x4B
09EBE:  CLRF   x4C
09EC0:  CLRF   x4D
09EC2:  CLRF   x4E
09EC4:  CLRF   x4F
09EC6:  CLRF   x50
09EC8:  CLRF   x51
09ECA:  CLRF   x52
09ECC:  CLRF   x53
09ECE:  CLRF   x54
09ED0:  CLRF   x55
09ED2:  CLRF   x56
09ED4:  CLRF   x57
09ED6:  CLRF   x58
09ED8:  CLRF   x59
09EDA:  CLRF   x5A
09EDC:  CLRF   x5B
09EDE:  CLRF   x5C
09EE0:  CLRF   x5D
09EE2:  CLRF   x5E
09EE4:  CLRF   x5F
09EE6:  CLRF   x60
09EE8:  CLRF   x61
09EEA:  CLRF   x62
09EEC:  CLRF   x63
09EEE:  CLRF   x64
09EF0:  CLRF   x65
09EF2:  CLRF   x66
09EF4:  CLRF   x67
09EF6:  CLRF   x68
09EF8:  CLRF   x69
09EFA:  CLRF   x6A
09EFC:  CLRF   x6B
09EFE:  CLRF   x6C
09F00:  CLRF   x6D
09F02:  CLRF   x6E
09F04:  CLRF   x6F
09F06:  CLRF   x70
09F08:  CLRF   x71
09F0A:  CLRF   x72
09F0C:  CLRF   x73
09F0E:  CLRF   x74
09F10:  CLRF   x75
09F12:  CLRF   x76
09F14:  CLRF   x77
09F16:  CLRF   x78
09F18:  CLRF   x79
09F1A:  CLRF   x7A
09F1C:  CLRF   x7B
09F1E:  CLRF   x7C
09F20:  CLRF   x7D
09F22:  CLRF   x7E
09F24:  CLRF   x7F
09F26:  CLRF   x80
09F28:  CLRF   x81
09F2A:  CLRF   x82
09F2C:  CLRF   x83
09F2E:  CLRF   x84
09F30:  CLRF   x85
09F32:  CLRF   x86
09F34:  CLRF   x87
09F36:  CLRF   x88
09F38:  CLRF   x89
09F3A:  CLRF   x8A
09F3C:  CLRF   x8B
09F3E:  CLRF   x8C
09F40:  CLRF   x8D
09F42:  CLRF   x8E
09F44:  CLRF   x8F
09F46:  CLRF   x90
09F48:  CLRF   x91
09F4A:  CLRF   x92
09F4C:  CLRF   x93
09F4E:  CLRF   x94
09F50:  CLRF   x95
09F52:  CLRF   x96
09F54:  CLRF   x97
09F56:  CLRF   x98
09F58:  CLRF   x99
09F5A:  CLRF   x9A
09F5C:  CLRF   x9B
09F5E:  CLRF   x9C
09F60:  CLRF   x9D
09F62:  CLRF   x9E
09F64:  CLRF   x9F
09F66:  CLRF   xA0
09F68:  CLRF   xA1
09F6A:  CLRF   xA2
09F6C:  CLRF   xA3
09F6E:  CLRF   xA4
09F70:  CLRF   xA5
09F72:  CLRF   xA6
09F74:  CLRF   xA7
09F76:  CLRF   xA8
09F78:  CLRF   xA9
09F7A:  CLRF   xAA
09F7C:  CLRF   xAB
09F7E:  CLRF   xAC
09F80:  CLRF   xAD
09F82:  CLRF   xAE
09F84:  CLRF   xAF
09F86:  CLRF   xB0
09F88:  CLRF   xB1
09F8A:  CLRF   xB2
09F8C:  CLRF   xB3
09F8E:  CLRF   xB4
09F90:  CLRF   xB5
09F92:  CLRF   xB6
09F94:  CLRF   xB7
09F96:  CLRF   xB8
09F98:  CLRF   xB9
09F9A:  CLRF   xBA
09F9C:  CLRF   xBB
09F9E:  CLRF   xBC
09FA0:  CLRF   xBD
09FA2:  CLRF   xBE
09FA4:  CLRF   xBF
09FA6:  CLRF   xC0
09FA8:  CLRF   xC1
09FAA:  CLRF   xC2
09FAC:  CLRF   xC3
09FAE:  CLRF   xC4
09FB0:  CLRF   xC5
09FB2:  CLRF   xC6
09FB4:  CLRF   xC7
09FB6:  CLRF   xC8
09FB8:  CLRF   xC9
09FBA:  CLRF   xCA
09FBC:  CLRF   xCB
09FBE:  CLRF   xCC
09FC0:  CLRF   xCD
09FC2:  CLRF   xCE
09FC4:  CLRF   xCF
09FC6:  CLRF   xD0
09FC8:  CLRF   xD1
09FCA:  CLRF   xD2
09FCC:  CLRF   xD3
09FCE:  CLRF   xD4
09FD0:  CLRF   xD5
09FD2:  CLRF   xD6
09FD4:  CLRF   xD7
09FD6:  CLRF   xD8
09FD8:  CLRF   xD9
09FDA:  CLRF   xDA
09FDC:  CLRF   xDB
09FDE:  CLRF   xDC
09FE0:  CLRF   xDD
09FE2:  CLRF   xDE
09FE4:  CLRF   xDF
09FE6:  CLRF   xE0
09FE8:  CLRF   xE1
09FEA:  CLRF   xE2
09FEC:  CLRF   xE3
09FEE:  CLRF   xE4
09FF0:  CLRF   xE5
09FF2:  CLRF   xE6
09FF4:  CLRF   xE7
09FF6:  CLRF   xE8
09FF8:  CLRF   xE9
09FFA:  CLRF   xEA
09FFC:  CLRF   xEB
09FFE:  CLRF   xEC
0A000:  CLRF   xED
0A002:  CLRF   xEE
0A004:  CLRF   xEF
0A006:  CLRF   xF0
0A008:  CLRF   xF1
0A00A:  CLRF   xF2
0A00C:  CLRF   xF3
0A00E:  CLRF   xF4
0A010:  CLRF   xF5
0A012:  CLRF   xF6
0A014:  CLRF   xF7
0A016:  CLRF   xF8
0A018:  CLRF   xF9
0A01A:  CLRF   xFA
0A01C:  CLRF   xFB
0A01E:  CLRF   xFC
0A020:  CLRF   xFD
0A022:  CLRF   xFE
0A024:  CLRF   xFF
0A026:  MOVLB  6
0A028:  CLRF   x00
0A02A:  CLRF   x01
0A02C:  CLRF   x02
0A02E:  CLRF   x03
0A030:  CLRF   x04
0A032:  CLRF   x05
0A034:  CLRF   x06
0A036:  CLRF   x07
0A038:  CLRF   x08
0A03A:  CLRF   x09
0A03C:  CLRF   x0A
0A03E:  CLRF   x0B
0A040:  CLRF   x0C
0A042:  CLRF   x0D
0A044:  CLRF   x0E
0A046:  CLRF   x0F
0A048:  CLRF   x10
0A04A:  CLRF   x11
0A04C:  CLRF   x12
0A04E:  CLRF   x13
0A050:  CLRF   x14
0A052:  CLRF   x15
0A054:  CLRF   x16
0A056:  CLRF   x17
0A058:  CLRF   x18
0A05A:  CLRF   x19
0A05C:  CLRF   x1A
0A05E:  CLRF   x1B
0A060:  CLRF   x1C
0A062:  CLRF   x1D
0A064:  CLRF   x1E
0A066:  CLRF   x1F
0A068:  CLRF   x20
0A06A:  CLRF   x21
0A06C:  CLRF   x22
0A06E:  CLRF   x23
0A070:  CLRF   x24
0A072:  CLRF   x25
0A074:  CLRF   x26
0A076:  CLRF   x27
0A078:  CLRF   x28
0A07A:  CLRF   x29
0A07C:  CLRF   x2A
0A07E:  CLRF   x2B
0A080:  CLRF   x2C
0A082:  CLRF   x2D
0A084:  CLRF   x2E
....................     port2.port_num = 2;
0A086:  MOVLW  02
0A088:  MOVLB  4
0A08A:  MOVWF  x2B
....................     port2.sweep_step = 0;
0A08C:  CLRF   x2D
0A08E:  CLRF   x2C
....................     port2.active = 1;
0A090:  MOVLB  6
0A092:  BSF    x2E.0
.................... 
....................     int16 count = 0;
0A094:  CLRF   x30
0A096:  CLRF   x2F
....................     
....................     // Initialize DACs to 0
....................     mcp4901_1_write(1);
0A098:  MOVLB  A
0A09A:  CLRF   x1B
0A09C:  MOVLW  01
0A09E:  MOVWF  x1A
0A0A0:  MOVLB  0
0A0A2:  CALL   2562
....................     mcp4901_2_write(1);
0A0A6:  MOVLB  A
0A0A8:  CLRF   x1B
0A0AA:  MOVLW  01
0A0AC:  MOVWF  x1A
0A0AE:  MOVLB  0
0A0B0:  CALL   25A0
.................... 
....................     unsigned int16 volt;
....................     unsigned int16 curr;
....................     iv_env_t measured_data = create_meas_data();
0A0B4:  CALL   8F1C
0A0B8:  MOVFF  02,03
0A0BC:  MOVF   01,W
0A0BE:  MOVWF  FE1
0A0C0:  MOVFF  03,FE2
0A0C4:  MOVLW  06
0A0C6:  MOVWF  FEA
0A0C8:  MOVLW  35
0A0CA:  MOVWF  FE9
0A0CC:  MOVLW  0C
0A0CE:  MOVWF  01
0A0D0:  MOVFF  FE6,FEE
0A0D4:  DECFSZ 01,F
0A0D6:  GOTO   A0D0
....................     while (port1.active || port2.active)
0A0DA:  MOVLB  4
0A0DC:  BTFSS  x2A.0
0A0DE:  BRA    A0E6
0A0E0:  MOVLB  0
0A0E2:  GOTO   A0F6
0A0E6:  MOVLB  0
0A0E8:  MOVLB  6
0A0EA:  BTFSC  x2E.0
0A0EC:  BRA    A0F4
0A0EE:  MOVLB  0
0A0F0:  GOTO   A436
0A0F4:  MOVLB  0
....................     {
....................         mcp4901_1_write(count);
0A0F6:  MOVFF  630,A1B
0A0FA:  MOVFF  62F,A1A
0A0FE:  CALL   2562
....................         mcp4901_2_write(count);
0A102:  MOVFF  630,A1B
0A106:  MOVFF  62F,A1A
0A10A:  CALL   25A0
....................         delay_us(1); 
0A10E:  BRA    A110
0A110:  BRA    A112
....................         if (port1.active) {
0A112:  MOVLB  4
0A114:  BTFSC  x2A.0
0A116:  BRA    A11E
0A118:  MOVLB  0
0A11A:  GOTO   A28C
0A11E:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS1_AMP);
0A120:  MOVLW  02
0A122:  MOVLB  A
0A124:  MOVWF  x2C
0A126:  MOVLB  0
0A128:  CALL   21B2
0A12C:  MOVFF  02,632
0A130:  MOVFF  01,631
....................             curr = ad7490_read(ADC_CIGS1_CURR);
0A134:  MOVLW  01
0A136:  MOVLB  A
0A138:  MOVWF  x2C
0A13A:  MOVLB  0
0A13C:  CALL   21B2
0A140:  MOVFF  02,634
0A144:  MOVFF  01,633
....................             // ad7490_read_2port(ADC_CIGS1_AMP, ADC_CIGS1_CURR, &volt, &curr);
....................             // fprintf(PC, "%04LX,%04LX,", volt, curr);
....................             port1.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A148:  MOVFF  630,A9C
0A14C:  MOVFF  62F,A9B
0A150:  MOVLB  A
0A152:  CLRF   x9E
0A154:  MOVLW  03
0A156:  MOVWF  x9D
0A158:  MOVLB  0
0A15A:  CALL   7FF4
0A15E:  MOVFF  02,64A
0A162:  MOVFF  01,649
0A166:  MOVLW  2A
0A168:  MOVLB  6
0A16A:  ADDWF  x49,W
0A16C:  MOVWF  FE9
0A16E:  MOVLW  02
0A170:  ADDWFC x4A,W
0A172:  MOVWF  FEA
0A174:  RRCF   x32,W
0A176:  MOVWF  x4E
0A178:  RRCF   x31,W
0A17A:  MOVWF  x4D
0A17C:  RRCF   x4E,F
0A17E:  RRCF   x4D,F
0A180:  RRCF   x4E,F
0A182:  RRCF   x4D,F
0A184:  RRCF   x4E,F
0A186:  RRCF   x4D,F
0A188:  MOVLW  0F
0A18A:  ANDWF  x4E,F
0A18C:  MOVF   x4D,W
0A18E:  MOVWF  00
0A190:  CLRF   03
0A192:  MOVF   00,W
0A194:  MOVWF  FEF
....................             port1.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A196:  MOVFF  630,A9C
0A19A:  MOVFF  62F,A9B
0A19E:  MOVLB  A
0A1A0:  CLRF   x9E
0A1A2:  MOVLW  03
0A1A4:  MOVWF  x9D
0A1A6:  MOVLB  0
0A1A8:  CALL   7FF4
0A1AC:  MOVFF  02,64A
0A1B0:  MOVFF  01,649
0A1B4:  MOVLW  01
0A1B6:  MOVLB  6
0A1B8:  ADDWF  x49,F
0A1BA:  MOVLW  00
0A1BC:  ADDWFC x4A,F
0A1BE:  MOVLW  2A
0A1C0:  ADDWF  x49,W
0A1C2:  MOVWF  FE9
0A1C4:  MOVLW  02
0A1C6:  ADDWFC x4A,W
0A1C8:  MOVWF  FEA
0A1CA:  MOVF   x31,W
0A1CC:  ANDLW  0F
0A1CE:  MOVWF  x4D
0A1D0:  CLRF   x4E
0A1D2:  RLCF   x4D,F
0A1D4:  RLCF   x4E,F
0A1D6:  RLCF   x4D,F
0A1D8:  RLCF   x4E,F
0A1DA:  RLCF   x4D,F
0A1DC:  RLCF   x4E,F
0A1DE:  RLCF   x4D,F
0A1E0:  RLCF   x4E,F
0A1E2:  MOVLW  F0
0A1E4:  ANDWF  x4D,F
0A1E6:  MOVFF  634,64F
0A1EA:  CLRF   x50
0A1EC:  MOVF   x4F,W
0A1EE:  ANDLW  0F
0A1F0:  MOVWF  00
0A1F2:  CLRF   03
0A1F4:  MOVF   00,W
0A1F6:  IORWF  x4D,W
0A1F8:  MOVWF  00
0A1FA:  MOVF   03,W
0A1FC:  IORWF  x4E,W
0A1FE:  MOVWF  03
0A200:  MOVF   00,W
0A202:  MOVWF  FEF
....................             port1.data_buffer[count*3+2]= curr & 0xFF;
0A204:  MOVFF  630,A9C
0A208:  MOVFF  62F,A9B
0A20C:  MOVLB  A
0A20E:  CLRF   x9E
0A210:  MOVLW  03
0A212:  MOVWF  x9D
0A214:  MOVLB  0
0A216:  CALL   7FF4
0A21A:  MOVFF  02,64A
0A21E:  MOVFF  01,649
0A222:  MOVLW  02
0A224:  MOVLB  6
0A226:  ADDWF  x49,F
0A228:  MOVLW  00
0A22A:  ADDWFC x4A,F
0A22C:  MOVLW  2A
0A22E:  ADDWF  x49,W
0A230:  MOVWF  FE9
0A232:  MOVLW  02
0A234:  ADDWFC x4A,W
0A236:  MOVWF  FEA
0A238:  MOVF   x33,W
0A23A:  MOVWF  00
0A23C:  CLRF   03
0A23E:  MOVF   00,W
0A240:  MOVWF  FEF
....................             port1.sweep_step = count + 1; 
0A242:  MOVLW  01
0A244:  ADDWF  x2F,W
0A246:  MOVLB  2
0A248:  MOVWF  x28
0A24A:  MOVLW  00
0A24C:  MOVLB  6
0A24E:  ADDWFC x30,W
0A250:  MOVLB  2
0A252:  MOVWF  x29
....................             // fprintf(PC, "%04LX,%04LX,", port1.data_buffer[count].voltage, port1.data_buffer[count].current);
....................             if (curr< curr_limit) {
0A254:  MOVLB  6
0A256:  MOVF   x34,W
0A258:  MOVLB  2
0A25A:  SUBWF  x20,W
0A25C:  BTFSC  FD8.0
0A25E:  BRA    A266
0A260:  MOVLB  0
0A262:  GOTO   A28C
0A266:  MOVLB  0
0A268:  BTFSS  FD8.2
0A26A:  GOTO   A282
0A26E:  MOVLB  2
0A270:  MOVF   x1F,W
0A272:  MOVLB  6
0A274:  SUBWF  x33,W
0A276:  BTFSS  FD8.0
0A278:  BRA    A280
0A27A:  MOVLB  0
0A27C:  GOTO   A28C
0A280:  MOVLB  0
....................                 port1.active = 0;
0A282:  MOVLB  4
0A284:  BCF    x2A.0
....................                 disconnect_port1();
0A286:  MOVLB  0
0A288:  CALL   8F9E
....................             }
....................         }
....................         if (port2.active) {
0A28C:  MOVLB  6
0A28E:  BTFSC  x2E.0
0A290:  BRA    A298
0A292:  MOVLB  0
0A294:  GOTO   A406
0A298:  MOVLB  0
....................             volt = ad7490_read(ADC_CIGS2_AMP);
0A29A:  MOVLW  06
0A29C:  MOVLB  A
0A29E:  MOVWF  x2C
0A2A0:  MOVLB  0
0A2A2:  CALL   21B2
0A2A6:  MOVFF  02,632
0A2AA:  MOVFF  01,631
....................             curr = ad7490_read(ADC_CIGS2_CURR);
0A2AE:  MOVLW  05
0A2B0:  MOVLB  A
0A2B2:  MOVWF  x2C
0A2B4:  MOVLB  0
0A2B6:  CALL   21B2
0A2BA:  MOVFF  02,634
0A2BE:  MOVFF  01,633
....................             port2.data_buffer[count*3]= (volt  >> 4) & 0xFF;
0A2C2:  MOVFF  630,A9C
0A2C6:  MOVFF  62F,A9B
0A2CA:  MOVLB  A
0A2CC:  CLRF   x9E
0A2CE:  MOVLW  03
0A2D0:  MOVWF  x9D
0A2D2:  MOVLB  0
0A2D4:  CALL   7FF4
0A2D8:  MOVFF  02,64A
0A2DC:  MOVFF  01,649
0A2E0:  MOVLW  2E
0A2E2:  MOVLB  6
0A2E4:  ADDWF  x49,W
0A2E6:  MOVWF  FE9
0A2E8:  MOVLW  04
0A2EA:  ADDWFC x4A,W
0A2EC:  MOVWF  FEA
0A2EE:  RRCF   x32,W
0A2F0:  MOVWF  x4E
0A2F2:  RRCF   x31,W
0A2F4:  MOVWF  x4D
0A2F6:  RRCF   x4E,F
0A2F8:  RRCF   x4D,F
0A2FA:  RRCF   x4E,F
0A2FC:  RRCF   x4D,F
0A2FE:  RRCF   x4E,F
0A300:  RRCF   x4D,F
0A302:  MOVLW  0F
0A304:  ANDWF  x4E,F
0A306:  MOVF   x4D,W
0A308:  MOVWF  00
0A30A:  CLRF   03
0A30C:  MOVF   00,W
0A30E:  MOVWF  FEF
....................             port2.data_buffer[count*3+1]= ((volt & 0x0F) << 4) | ((curr >> 8) & 0x0F);
0A310:  MOVFF  630,A9C
0A314:  MOVFF  62F,A9B
0A318:  MOVLB  A
0A31A:  CLRF   x9E
0A31C:  MOVLW  03
0A31E:  MOVWF  x9D
0A320:  MOVLB  0
0A322:  CALL   7FF4
0A326:  MOVFF  02,64A
0A32A:  MOVFF  01,649
0A32E:  MOVLW  01
0A330:  MOVLB  6
0A332:  ADDWF  x49,F
0A334:  MOVLW  00
0A336:  ADDWFC x4A,F
0A338:  MOVLW  2E
0A33A:  ADDWF  x49,W
0A33C:  MOVWF  FE9
0A33E:  MOVLW  04
0A340:  ADDWFC x4A,W
0A342:  MOVWF  FEA
0A344:  MOVF   x31,W
0A346:  ANDLW  0F
0A348:  MOVWF  x4D
0A34A:  CLRF   x4E
0A34C:  RLCF   x4D,F
0A34E:  RLCF   x4E,F
0A350:  RLCF   x4D,F
0A352:  RLCF   x4E,F
0A354:  RLCF   x4D,F
0A356:  RLCF   x4E,F
0A358:  RLCF   x4D,F
0A35A:  RLCF   x4E,F
0A35C:  MOVLW  F0
0A35E:  ANDWF  x4D,F
0A360:  MOVFF  634,64F
0A364:  CLRF   x50
0A366:  MOVF   x4F,W
0A368:  ANDLW  0F
0A36A:  MOVWF  00
0A36C:  CLRF   03
0A36E:  MOVF   00,W
0A370:  IORWF  x4D,W
0A372:  MOVWF  00
0A374:  MOVF   03,W
0A376:  IORWF  x4E,W
0A378:  MOVWF  03
0A37A:  MOVF   00,W
0A37C:  MOVWF  FEF
....................             port2.data_buffer[count*3+2]= curr & 0xFF;
0A37E:  MOVFF  630,A9C
0A382:  MOVFF  62F,A9B
0A386:  MOVLB  A
0A388:  CLRF   x9E
0A38A:  MOVLW  03
0A38C:  MOVWF  x9D
0A38E:  MOVLB  0
0A390:  CALL   7FF4
0A394:  MOVFF  02,64A
0A398:  MOVFF  01,649
0A39C:  MOVLW  02
0A39E:  MOVLB  6
0A3A0:  ADDWF  x49,F
0A3A2:  MOVLW  00
0A3A4:  ADDWFC x4A,F
0A3A6:  MOVLW  2E
0A3A8:  ADDWF  x49,W
0A3AA:  MOVWF  FE9
0A3AC:  MOVLW  04
0A3AE:  ADDWFC x4A,W
0A3B0:  MOVWF  FEA
0A3B2:  MOVF   x33,W
0A3B4:  MOVWF  00
0A3B6:  CLRF   03
0A3B8:  MOVF   00,W
0A3BA:  MOVWF  FEF
....................             port2.sweep_step = count + 1;
0A3BC:  MOVLW  01
0A3BE:  ADDWF  x2F,W
0A3C0:  MOVLB  4
0A3C2:  MOVWF  x2C
0A3C4:  MOVLW  00
0A3C6:  MOVLB  6
0A3C8:  ADDWFC x30,W
0A3CA:  MOVLB  4
0A3CC:  MOVWF  x2D
....................             if (curr < curr_limit) {
0A3CE:  MOVLB  6
0A3D0:  MOVF   x34,W
0A3D2:  MOVLB  2
0A3D4:  SUBWF  x20,W
0A3D6:  BTFSC  FD8.0
0A3D8:  BRA    A3E0
0A3DA:  MOVLB  0
0A3DC:  GOTO   A406
0A3E0:  MOVLB  0
0A3E2:  BTFSS  FD8.2
0A3E4:  GOTO   A3FC
0A3E8:  MOVLB  2
0A3EA:  MOVF   x1F,W
0A3EC:  MOVLB  6
0A3EE:  SUBWF  x33,W
0A3F0:  BTFSS  FD8.0
0A3F2:  BRA    A3FA
0A3F4:  MOVLB  0
0A3F6:  GOTO   A406
0A3FA:  MOVLB  0
....................                 port2.active = 0;
0A3FC:  MOVLB  6
0A3FE:  BCF    x2E.0
....................                 disconnect_port2();
0A400:  MOVLB  0
0A402:  CALL   8FA6
....................             } 
....................         }
....................         count++;
0A406:  MOVLB  6
0A408:  INCF   x2F,F
0A40A:  BTFSC  FD8.2
0A40C:  INCF   x30,F
....................         if (count >= 255) {
0A40E:  MOVF   x30,F
0A410:  BTFSC  FD8.2
0A412:  BRA    A41A
0A414:  MOVLB  0
0A416:  GOTO   A42E
0A41A:  MOVLB  0
0A41C:  MOVLB  6
0A41E:  MOVF   x2F,W
0A420:  SUBLW  FE
0A422:  BTFSS  FD8.0
0A424:  BRA    A42C
0A426:  MOVLB  0
0A428:  GOTO   A432
0A42C:  MOVLB  0
....................             // fprintf(PC, "Maximum step count reached: %ld\r\n", count);
....................             break;
0A42E:  GOTO   A436
....................         }
0A432:  GOTO   A0DA
....................     }
....................     // unsigned int32 end_time_ms = get_current_msec();
....................     // Ensure all connections are disabled3
....................     disconnect_port1();
0A436:  CALL   8F9E
....................     disconnect_port2();
0A43A:  CALL   8FA6
....................     log_meas_data(&measured_data, &port1);
0A43E:  MOVLW  06
0A440:  MOVLB  A
0A442:  MOVWF  x0D
0A444:  MOVLW  35
0A446:  MOVWF  x0C
0A448:  MOVLW  02
0A44A:  MOVWF  x0F
0A44C:  MOVLW  27
0A44E:  MOVWF  x0E
0A450:  MOVLB  0
0A452:  CALL   8FAE
....................     log_meas_data(&measured_data, &port2);
0A456:  MOVLW  06
0A458:  MOVLB  A
0A45A:  MOVWF  x0D
0A45C:  MOVLW  35
0A45E:  MOVWF  x0C
0A460:  MOVLW  04
0A462:  MOVWF  x0F
0A464:  MOVLW  2B
0A466:  MOVWF  x0E
0A468:  MOVLB  0
0A46A:  CALL   8FAE
....................     // misf_update_address_area();
....................     unsigned int32 end_time_ms = get_current_msec();
....................     unsigned int32 elapsed_time_ms = end_time_ms - start_time_ms;
0A46E:  CALL   982E
0A472:  MOVLB  6
0A474:  CLRF   x44
0A476:  CLRF   x43
0A478:  MOVFF  02,642
0A47C:  MOVFF  01,641
0A480:  MOVLB  2
0A482:  MOVF   x23,W
0A484:  MOVLB  6
0A486:  SUBWF  x41,W
0A488:  MOVWF  x45
0A48A:  MOVLB  2
0A48C:  MOVF   x24,W
0A48E:  MOVLB  6
0A490:  SUBWFB x42,W
0A492:  MOVWF  x46
0A494:  MOVLB  2
0A496:  MOVF   x25,W
0A498:  MOVLB  6
0A49A:  SUBWFB x43,W
0A49C:  MOVWF  x47
0A49E:  MOVLB  2
0A4A0:  MOVF   x26,W
0A4A2:  MOVLB  6
0A4A4:  SUBWFB x44,W
0A4A6:  MOVWF  x48
0A4A8:  MOVLB  0
0A4AA:  GOTO   A822 (RETURN)
.................... }
.................... 
.................... 
.................... void log_meas_data(iv_env_t *measured_data_ptr, sweep_config_t *port_data_ptr)
*
09030:  MOVLW  0A
09032:  MOVWF  x51
09034:  MOVLW  10
09036:  MOVWF  x50
.................... {
....................     iv_data_packet_t data_packet = {0};
*
08FAE:  MOVLB  A
08FB0:  CLRF   x10
08FB2:  CLRF   x11
08FB4:  CLRF   x12
08FB6:  CLRF   x13
08FB8:  CLRF   x14
08FBA:  CLRF   x15
08FBC:  CLRF   x16
08FBE:  CLRF   x17
08FC0:  CLRF   x18
08FC2:  CLRF   x19
08FC4:  CLRF   x1A
08FC6:  CLRF   x1B
08FC8:  CLRF   x1C
08FCA:  CLRF   x1D
08FCC:  CLRF   x1E
08FCE:  CLRF   x1F
08FD0:  CLRF   x20
08FD2:  CLRF   x21
08FD4:  CLRF   x22
08FD6:  CLRF   x23
08FD8:  CLRF   x24
08FDA:  CLRF   x25
08FDC:  CLRF   x26
08FDE:  CLRF   x27
08FE0:  CLRF   x28
08FE2:  CLRF   x29
08FE4:  CLRF   x2A
08FE6:  CLRF   x2B
08FE8:  CLRF   x2C
08FEA:  CLRF   x2D
08FEC:  CLRF   x2E
08FEE:  CLRF   x2F
08FF0:  CLRF   x30
08FF2:  CLRF   x31
08FF4:  CLRF   x32
08FF6:  CLRF   x33
08FF8:  CLRF   x34
08FFA:  CLRF   x35
08FFC:  CLRF   x36
08FFE:  CLRF   x37
09000:  CLRF   x38
09002:  CLRF   x39
09004:  CLRF   x3A
09006:  CLRF   x3B
09008:  CLRF   x3C
0900A:  CLRF   x3D
0900C:  CLRF   x3E
0900E:  CLRF   x3F
09010:  CLRF   x40
09012:  CLRF   x41
09014:  CLRF   x42
09016:  CLRF   x43
09018:  CLRF   x44
0901A:  CLRF   x45
0901C:  CLRF   x46
0901E:  CLRF   x47
09020:  CLRF   x48
09022:  CLRF   x49
09024:  CLRF   x4A
09026:  CLRF   x4B
09028:  CLRF   x4C
0902A:  CLRF   x4D
0902C:  CLRF   x4E
0902E:  CLRF   x4F
....................     iv_data_packet_t *data_packet_ptr = &data_packet;
.................... 
....................     // ========================ヘッダーパケットの処理========================
....................     // ヘッダ情報の設定
....................     data_packet.header.start_marker = START_MAKER;
*
09038:  SETF   x10
....................     data_packet.header.time_sec  = measured_data_ptr->time;
0903A:  MOVF   x0C,W
0903C:  MOVWF  FE9
0903E:  MOVF   x0D,W
09040:  MOVWF  FEA
09042:  MOVFF  FEF,A11
09046:  MOVFF  FEC,A12
0904A:  MOVFF  FEC,A13
0904E:  MOVFF  FEC,A14
09052:  MOVF   FED,F
09054:  MOVF   FED,F
09056:  MOVF   FED,F
....................     data_packet.header.time_msec = (unsigned int8)((measured_data_ptr->time >> 4) & 0xFF);
09058:  MOVF   x0C,W
0905A:  MOVWF  FE9
0905C:  MOVF   x0D,W
0905E:  MOVWF  FEA
09060:  MOVFF  FEF,A97
09064:  MOVFF  FEC,A98
09068:  MOVFF  FEC,A99
0906C:  MOVFF  FEC,A9A
09070:  MOVF   FED,F
09072:  MOVF   FED,F
09074:  MOVF   FED,F
09076:  RRCF   x9A,F
09078:  RRCF   x99,F
0907A:  RRCF   x98,F
0907C:  RRCF   x97,F
0907E:  RRCF   x9A,F
09080:  RRCF   x99,F
09082:  RRCF   x98,F
09084:  RRCF   x97,F
09086:  RRCF   x9A,F
09088:  RRCF   x99,F
0908A:  RRCF   x98,F
0908C:  RRCF   x97,F
0908E:  RRCF   x9A,F
09090:  RRCF   x99,F
09092:  RRCF   x98,F
09094:  RRCF   x97,F
09096:  MOVLW  0F
09098:  ANDWF  x9A,F
0909A:  MOVF   x97,W
0909C:  MOVWF  00
0909E:  CLRF   01
090A0:  CLRF   02
090A2:  CLRF   03
090A4:  MOVFF  00,A15
.................... 
....................     // 環境データの設定
....................     data_packet.header.env_data[0].data[0] = (measured_data_ptr->pd >> 4) & 0xFF;
090A8:  MOVLW  04
090AA:  ADDWF  x0C,W
090AC:  MOVWF  FE9
090AE:  MOVLW  00
090B0:  ADDWFC x0D,W
090B2:  MOVWF  FEA
090B4:  MOVFF  FEC,A98
090B8:  MOVF   FED,F
090BA:  MOVFF  FEF,A97
090BE:  RRCF   x98,F
090C0:  RRCF   x97,F
090C2:  RRCF   x98,F
090C4:  RRCF   x97,F
090C6:  RRCF   x98,F
090C8:  RRCF   x97,F
090CA:  RRCF   x98,F
090CC:  RRCF   x97,F
090CE:  MOVLW  0F
090D0:  ANDWF  x98,F
090D2:  MOVF   x97,W
090D4:  MOVWF  x16
....................     data_packet.header.env_data[0].data[1] =
....................         ((measured_data_ptr->pd & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_py_top >> 8) & 0x0F);
090D6:  MOVLW  04
090D8:  ADDWF  x0C,W
090DA:  MOVWF  FE9
090DC:  MOVLW  00
090DE:  ADDWFC x0D,W
090E0:  MOVWF  FEA
090E2:  MOVFF  FEC,A98
090E6:  MOVF   FED,F
090E8:  MOVFF  FEF,A97
090EC:  MOVLW  0F
090EE:  ANDWF  x97,F
090F0:  CLRF   x98
090F2:  RLCF   x97,F
090F4:  RLCF   x98,F
090F6:  RLCF   x97,F
090F8:  RLCF   x98,F
090FA:  RLCF   x97,F
090FC:  RLCF   x98,F
090FE:  RLCF   x97,F
09100:  RLCF   x98,F
09102:  MOVLW  F0
09104:  ANDWF  x97,F
09106:  MOVLW  06
09108:  ADDWF  x0C,W
0910A:  MOVWF  FE9
0910C:  MOVLW  00
0910E:  ADDWFC x0D,W
09110:  MOVWF  FEA
09112:  MOVFF  FEC,A9A
09116:  MOVF   FED,F
09118:  MOVFF  FEF,A99
0911C:  MOVFF  A9A,A99
09120:  CLRF   x9A
09122:  MOVF   x99,W
09124:  ANDLW  0F
09126:  MOVWF  00
09128:  CLRF   03
0912A:  MOVF   00,W
0912C:  IORWF  x97,W
0912E:  MOVWF  x17
....................     data_packet.header.env_data[0].data[2] = measured_data_ptr->temp_py_top & 0xFF;
09130:  MOVLW  06
09132:  ADDWF  x0C,W
09134:  MOVWF  FE9
09136:  MOVLW  00
09138:  ADDWFC x0D,W
0913A:  MOVWF  FEA
0913C:  MOVFF  FEC,A98
09140:  MOVF   FED,F
09142:  MOVFF  FEF,A97
09146:  MOVF   x97,W
09148:  MOVWF  x18
.................... 
....................     data_packet.header.env_data[1].data[0] = (measured_data_ptr->temp_py_bot >> 4) & 0xFF;
0914A:  MOVLW  08
0914C:  ADDWF  x0C,W
0914E:  MOVWF  FE9
09150:  MOVLW  00
09152:  ADDWFC x0D,W
09154:  MOVWF  FEA
09156:  MOVFF  FEC,A98
0915A:  MOVF   FED,F
0915C:  MOVFF  FEF,A97
09160:  RRCF   x98,F
09162:  RRCF   x97,F
09164:  RRCF   x98,F
09166:  RRCF   x97,F
09168:  RRCF   x98,F
0916A:  RRCF   x97,F
0916C:  RRCF   x98,F
0916E:  RRCF   x97,F
09170:  MOVLW  0F
09172:  ANDWF  x98,F
09174:  MOVF   x97,W
09176:  MOVWF  x19
....................     data_packet.header.env_data[1].data[1] =
....................         ((measured_data_ptr->temp_py_bot & 0x0F) << 4) |
....................         ((measured_data_ptr->temp_mis7 >> 8) & 0x0F);
09178:  MOVLW  08
0917A:  ADDWF  x0C,W
0917C:  MOVWF  FE9
0917E:  MOVLW  00
09180:  ADDWFC x0D,W
09182:  MOVWF  FEA
09184:  MOVFF  FEC,A98
09188:  MOVF   FED,F
0918A:  MOVFF  FEF,A97
0918E:  MOVLW  0F
09190:  ANDWF  x97,F
09192:  CLRF   x98
09194:  RLCF   x97,F
09196:  RLCF   x98,F
09198:  RLCF   x97,F
0919A:  RLCF   x98,F
0919C:  RLCF   x97,F
0919E:  RLCF   x98,F
091A0:  RLCF   x97,F
091A2:  RLCF   x98,F
091A4:  MOVLW  F0
091A6:  ANDWF  x97,F
091A8:  MOVLW  0A
091AA:  ADDWF  x0C,W
091AC:  MOVWF  FE9
091AE:  MOVLW  00
091B0:  ADDWFC x0D,W
091B2:  MOVWF  FEA
091B4:  MOVFF  FEC,A9A
091B8:  MOVF   FED,F
091BA:  MOVFF  FEF,A99
091BE:  MOVFF  A9A,A99
091C2:  CLRF   x9A
091C4:  MOVF   x99,W
091C6:  ANDLW  0F
091C8:  MOVWF  00
091CA:  CLRF   03
091CC:  MOVF   00,W
091CE:  IORWF  x97,W
091D0:  MOVWF  x1A
....................     data_packet.header.env_data[1].data[2] = measured_data_ptr->temp_mis7 & 0xFF;
091D2:  MOVLW  0A
091D4:  ADDWF  x0C,W
091D6:  MOVWF  FE9
091D8:  MOVLW  00
091DA:  ADDWFC x0D,W
091DC:  MOVWF  FEA
091DE:  MOVFF  FEC,A98
091E2:  MOVF   FED,F
091E4:  MOVFF  FEF,A97
091E8:  MOVF   x97,W
091EA:  MOVWF  x1B
.................... 
....................     // I-Vデータの設定
....................     for (unsigned int8 i = 0; i < IV_HEADER_SIZE; i++) {
091EC:  CLRF   x52
091EE:  MOVLB  0
091F0:  MOVLB  A
091F2:  MOVF   x52,W
091F4:  SUBLW  10
091F6:  BTFSC  FD8.0
091F8:  BRA    9200
091FA:  MOVLB  0
091FC:  GOTO   9346
09200:  MOVLB  0
....................         if (i < port_data_ptr->sweep_step) {
09202:  MOVLW  01
09204:  MOVLB  A
09206:  ADDWF  x0E,W
09208:  MOVWF  FE9
0920A:  MOVLW  00
0920C:  ADDWFC x0F,W
0920E:  MOVWF  FEA
09210:  MOVFF  FEC,03
09214:  MOVF   FED,F
09216:  MOVF   FEF,W
09218:  MOVWF  01
0921A:  MOVF   03,F
0921C:  BTFSC  FD8.2
0921E:  BRA    9226
09220:  MOVLB  0
09222:  GOTO   923A
09226:  MOVLB  0
09228:  MOVF   01,W
0922A:  MOVLB  A
0922C:  SUBWF  x52,W
0922E:  BTFSS  FD8.0
09230:  BRA    9238
09232:  MOVLB  0
09234:  GOTO   92F8
09238:  MOVLB  0
....................             data_packet.header.ivdata[i*3]     = port_data_ptr->data_buffer[i*3];
0923A:  MOVLB  A
0923C:  MOVF   x52,W
0923E:  MULLW  03
09240:  MOVF   FF3,W
09242:  CLRF   03
09244:  ADDLW  1C
09246:  MOVWF  01
09248:  MOVLW  0A
0924A:  ADDWFC 03,F
0924C:  MOVF   01,W
0924E:  MOVWF  x97
09250:  MOVFF  03,A98
09254:  MOVF   x52,W
09256:  MULLW  03
09258:  MOVF   FF3,W
0925A:  ADDLW  03
0925C:  ADDWF  x0E,W
0925E:  MOVWF  FE9
09260:  MOVLW  00
09262:  ADDWFC x0F,W
09264:  MOVWF  FEA
09266:  MOVF   FEF,W
09268:  MOVWF  x99
0926A:  MOVFF  A98,FEA
0926E:  MOVFF  A97,FE9
09272:  MOVFF  A99,FEF
....................             data_packet.header.ivdata[i*3 + 1] = port_data_ptr->data_buffer[i*3 + 1];
09276:  MOVF   x52,W
09278:  MULLW  03
0927A:  MOVF   FF3,W
0927C:  ADDLW  01
0927E:  CLRF   03
09280:  ADDLW  1C
09282:  MOVWF  01
09284:  MOVLW  0A
09286:  ADDWFC 03,F
09288:  MOVF   01,W
0928A:  MOVWF  x97
0928C:  MOVFF  03,A98
09290:  MOVF   x52,W
09292:  MULLW  03
09294:  MOVF   FF3,W
09296:  ADDLW  01
09298:  ADDLW  03
0929A:  ADDWF  x0E,W
0929C:  MOVWF  FE9
0929E:  MOVLW  00
092A0:  ADDWFC x0F,W
092A2:  MOVWF  FEA
092A4:  MOVF   FEF,W
092A6:  MOVWF  x99
092A8:  MOVFF  A98,FEA
092AC:  MOVFF  A97,FE9
092B0:  MOVFF  A99,FEF
....................             data_packet.header.ivdata[i*3 + 2] = port_data_ptr->data_buffer[i*3 + 2];
092B4:  MOVF   x52,W
092B6:  MULLW  03
092B8:  MOVF   FF3,W
092BA:  ADDLW  02
092BC:  CLRF   03
092BE:  ADDLW  1C
092C0:  MOVWF  01
092C2:  MOVLW  0A
092C4:  ADDWFC 03,F
092C6:  MOVF   01,W
092C8:  MOVWF  x97
092CA:  MOVFF  03,A98
092CE:  MOVF   x52,W
092D0:  MULLW  03
092D2:  MOVF   FF3,W
092D4:  ADDLW  02
092D6:  ADDLW  03
092D8:  ADDWF  x0E,W
092DA:  MOVWF  FE9
092DC:  MOVLW  00
092DE:  ADDWFC x0F,W
092E0:  MOVWF  FEA
092E2:  MOVF   FEF,W
092E4:  MOVWF  x99
092E6:  MOVFF  A98,FEA
092EA:  MOVFF  A97,FE9
092EE:  MOVFF  A99,FEF
092F2:  MOVLB  0
....................         } else {
092F4:  GOTO   933C
....................             // 余りは0埋め
....................             data_packet.header.ivdata[i*3]     = 0;
092F8:  MOVLB  A
092FA:  MOVF   x52,W
092FC:  MULLW  03
092FE:  MOVF   FF3,W
09300:  CLRF   03
09302:  ADDLW  1C
09304:  MOVWF  FE9
09306:  MOVLW  0A
09308:  ADDWFC 03,W
0930A:  MOVWF  FEA
0930C:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 1] = 0;
0930E:  MOVF   x52,W
09310:  MULLW  03
09312:  MOVF   FF3,W
09314:  ADDLW  01
09316:  CLRF   03
09318:  ADDLW  1C
0931A:  MOVWF  FE9
0931C:  MOVLW  0A
0931E:  ADDWFC 03,W
09320:  MOVWF  FEA
09322:  CLRF   FEF
....................             data_packet.header.ivdata[i*3 + 2] = 0;
09324:  MOVF   x52,W
09326:  MULLW  03
09328:  MOVF   FF3,W
0932A:  ADDLW  02
0932C:  CLRF   03
0932E:  ADDLW  1C
09330:  MOVWF  FE9
09332:  MOVLW  0A
09334:  ADDWFC 03,W
09336:  MOVWF  FEA
09338:  CLRF   FEF
0933A:  MOVLB  0
....................         }
0933C:  MOVLB  A
0933E:  INCF   x52,F
09340:  MOVLB  0
09342:  GOTO   91F0
....................     }
....................     // フラッシュに書き込み
....................     if (port_data_ptr->port_num == 1) {
09346:  MOVLB  A
09348:  MOVF   x0E,W
0934A:  MOVWF  FE9
0934C:  MOVF   x0F,W
0934E:  MOVWF  FEA
09350:  DECFSZ FEF,W
09352:  BRA    9358
09354:  BRA    935E
09356:  MOVLB  0
09358:  MOVLB  0
0935A:  GOTO   93B8
0935E:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09360:  MOVLB  A
09362:  MOVF   x50,W
09364:  MOVWF  01
09366:  MOVF   x51,W
09368:  MOVWF  03
0936A:  MOVF   01,W
0936C:  MOVWF  x97
0936E:  MOVFF  03,A98
09372:  MOVFF  A98,B35
09376:  MOVFF  A97,B34
0937A:  MOVLW  3F
0937C:  MOVLB  B
0937E:  MOVWF  x36
09380:  MOVLB  0
09382:  CALL   2DF2
09386:  MOVFF  01,A4F
....................         misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
0938A:  MOVLB  A
0938C:  MOVF   x50,W
0938E:  MOVWF  01
09390:  MOVF   x51,W
09392:  MOVWF  03
09394:  MOVF   01,W
09396:  MOVWF  x97
09398:  MOVFF  03,A98
0939C:  MOVLW  04
0939E:  MOVWF  x99
093A0:  MOVFF  A98,A9B
093A4:  MOVFF  A97,A9A
093A8:  CLRF   x9D
093AA:  MOVLW  40
093AC:  MOVWF  x9C
093AE:  MOVLB  0
093B0:  CALL   3F8A
....................         // for (int i = 0; i < PACKET_SIZE; i++) {
....................             // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................         // }
....................         unsigned int8 read_back[PACKET_SIZE];
....................         // read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_IV1_DATA].start, read_back, PACKET_SIZE);
....................         // for (int j = 0; j < PACKET_SIZE; j++) {
....................             // fprintf(PC, "%02X ", read_back[j]);
....................         // }
....................     } else if (port_data_ptr->port_num == 2) {
093B4:  GOTO   9426
093B8:  MOVLB  A
093BA:  MOVF   x0E,W
093BC:  MOVWF  FE9
093BE:  MOVF   x0F,W
093C0:  MOVWF  FEA
093C2:  MOVF   FEF,W
093C4:  SUBLW  02
093C6:  BTFSC  FD8.2
093C8:  BRA    93D0
093CA:  MOVLB  0
093CC:  GOTO   9426
093D0:  MOVLB  0
....................         data_packet.header.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
093D2:  MOVLB  A
093D4:  MOVF   x50,W
093D6:  MOVWF  01
093D8:  MOVF   x51,W
093DA:  MOVWF  03
093DC:  MOVF   01,W
093DE:  MOVWF  x97
093E0:  MOVFF  03,A98
093E4:  MOVFF  A98,B35
093E8:  MOVFF  A97,B34
093EC:  MOVLW  3F
093EE:  MOVLB  B
093F0:  MOVWF  x36
093F2:  MOVLB  0
093F4:  CALL   2DF2
093F8:  MOVFF  01,A4F
....................         misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
093FC:  MOVLB  A
093FE:  MOVF   x50,W
09400:  MOVWF  01
09402:  MOVF   x51,W
09404:  MOVWF  03
09406:  MOVF   01,W
09408:  MOVWF  x97
0940A:  MOVFF  03,A98
0940E:  MOVLW  06
09410:  MOVWF  x99
09412:  MOVFF  A98,A9B
09416:  MOVFF  A97,A9A
0941A:  CLRF   x9D
0941C:  MOVLW  40
0941E:  MOVWF  x9C
09420:  MOVLB  0
09422:  CALL   3F8A
....................     }
.................... 
....................     // ========================データパケットの処理========================
....................     unsigned int16 iv_index = PACKET_IV_HEADER_SIZE;
09426:  MOVLB  A
09428:  CLRF   x94
0942A:  MOVLW  33
0942C:  MOVWF  x93
0942E:  MOVLB  0
....................     // パケットごとに繰り返す
....................     while (iv_index < port_data_ptr->sweep_step) {
09430:  MOVLW  01
09432:  MOVLB  A
09434:  ADDWF  x0E,W
09436:  MOVWF  FE9
09438:  MOVLW  00
0943A:  ADDWFC x0F,W
0943C:  MOVWF  FEA
0943E:  MOVFF  FEC,03
09442:  MOVF   FED,F
09444:  MOVF   FEF,W
09446:  MOVWF  01
09448:  MOVF   x94,W
0944A:  SUBWF  03,W
0944C:  BTFSC  FD8.0
0944E:  BRA    9456
09450:  MOVLB  0
09452:  GOTO   982C
09456:  MOVLB  0
09458:  BTFSS  FD8.2
0945A:  GOTO   9470
0945E:  MOVF   01,W
09460:  MOVLB  A
09462:  SUBWF  x93,W
09464:  BTFSS  FD8.0
09466:  BRA    946E
09468:  MOVLB  0
0946A:  GOTO   982C
0946E:  MOVLB  0
....................         unsigned int16 step_in_packet = 0;
09470:  MOVLB  A
09472:  CLRF   x96
09474:  CLRF   x95
09476:  MOVLB  0
.................... 
....................         // データを詰める（最大21点/パケット）
....................         for (; step_in_packet < IV_DATA_SIZE && iv_index < port_data_ptr->sweep_step;
09478:  MOVLB  A
0947A:  MOVF   x96,F
0947C:  BTFSC  FD8.2
0947E:  BRA    9486
09480:  MOVLB  0
09482:  GOTO   9680
09486:  MOVLB  0
09488:  MOVLB  A
0948A:  MOVF   x95,W
0948C:  SUBLW  14
0948E:  BTFSC  FD8.0
09490:  BRA    9498
09492:  MOVLB  0
09494:  GOTO   9680
09498:  MOVLB  0
0949A:  MOVLW  01
0949C:  MOVLB  A
0949E:  ADDWF  x0E,W
094A0:  MOVWF  FE9
094A2:  MOVLW  00
094A4:  ADDWFC x0F,W
094A6:  MOVWF  FEA
094A8:  MOVFF  FEC,03
094AC:  MOVF   FED,F
094AE:  MOVF   FEF,W
094B0:  MOVWF  01
094B2:  MOVF   x94,W
094B4:  SUBWF  03,W
094B6:  BTFSC  FD8.0
094B8:  BRA    94C0
094BA:  MOVLB  0
094BC:  GOTO   9680
094C0:  MOVLB  0
094C2:  BTFSS  FD8.2
094C4:  GOTO   94DA
094C8:  MOVF   01,W
094CA:  MOVLB  A
094CC:  SUBWF  x93,W
094CE:  BTFSS  FD8.0
094D0:  BRA    94D8
094D2:  MOVLB  0
094D4:  GOTO   9680
094D8:  MOVLB  0
....................              step_in_packet++, iv_index++) {
....................             data_packet.data.iv_data[step_in_packet*3] = port_data_ptr->data_buffer[iv_index*3];
094DA:  MOVFF  A96,A9C
094DE:  MOVFF  A95,A9B
094E2:  MOVLB  A
094E4:  CLRF   x9E
094E6:  MOVLW  03
094E8:  MOVWF  x9D
094EA:  MOVLB  0
094EC:  CALL   7FF4
094F0:  MOVFF  02,A98
094F4:  MOVFF  01,A97
094F8:  MOVLW  10
094FA:  MOVLB  A
094FC:  ADDWF  x97,W
094FE:  MOVWF  01
09500:  MOVLW  0A
09502:  ADDWFC x98,W
09504:  MOVWF  03
09506:  MOVF   01,W
09508:  MOVWF  x99
0950A:  MOVFF  03,A9A
0950E:  MOVFF  A94,A9C
09512:  MOVFF  A93,A9B
09516:  CLRF   x9E
09518:  MOVLW  03
0951A:  MOVWF  x9D
0951C:  MOVLB  0
0951E:  CALL   7FF4
09522:  MOVFF  02,A9C
09526:  MOVFF  01,A9B
0952A:  MOVLW  03
0952C:  MOVLB  A
0952E:  ADDWF  x9B,W
09530:  MOVWF  01
09532:  MOVLW  00
09534:  ADDWFC x9C,W
09536:  MOVWF  03
09538:  MOVF   01,W
0953A:  ADDWF  x0E,W
0953C:  MOVWF  FE9
0953E:  MOVF   x0F,W
09540:  ADDWFC 03,W
09542:  MOVWF  FEA
09544:  MOVF   FEF,W
09546:  MOVWF  x9D
09548:  MOVFF  A9A,FEA
0954C:  MOVFF  A99,FE9
09550:  MOVFF  A9D,FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = port_data_ptr->data_buffer[iv_index*3+1];
09554:  MOVFF  A96,A9C
09558:  MOVFF  A95,A9B
0955C:  CLRF   x9E
0955E:  MOVLW  03
09560:  MOVWF  x9D
09562:  MOVLB  0
09564:  CALL   7FF4
09568:  MOVFF  02,A98
0956C:  MOVFF  01,A97
09570:  MOVLW  01
09572:  MOVLB  A
09574:  ADDWF  x97,F
09576:  MOVLW  00
09578:  ADDWFC x98,F
0957A:  MOVLW  10
0957C:  ADDWF  x97,W
0957E:  MOVWF  01
09580:  MOVLW  0A
09582:  ADDWFC x98,W
09584:  MOVWF  03
09586:  MOVF   01,W
09588:  MOVWF  x99
0958A:  MOVFF  03,A9A
0958E:  MOVFF  A94,A9C
09592:  MOVFF  A93,A9B
09596:  CLRF   x9E
09598:  MOVLW  03
0959A:  MOVWF  x9D
0959C:  MOVLB  0
0959E:  CALL   7FF4
095A2:  MOVFF  02,A9C
095A6:  MOVFF  01,A9B
095AA:  MOVLW  01
095AC:  MOVLB  A
095AE:  ADDWF  x9B,F
095B0:  MOVLW  00
095B2:  ADDWFC x9C,F
095B4:  MOVLW  03
095B6:  ADDWF  x9B,W
095B8:  MOVWF  01
095BA:  MOVLW  00
095BC:  ADDWFC x9C,W
095BE:  MOVWF  03
095C0:  MOVF   01,W
095C2:  ADDWF  x0E,W
095C4:  MOVWF  FE9
095C6:  MOVF   x0F,W
095C8:  ADDWFC 03,W
095CA:  MOVWF  FEA
095CC:  MOVF   FEF,W
095CE:  MOVWF  x9D
095D0:  MOVFF  A9A,FEA
095D4:  MOVFF  A99,FE9
095D8:  MOVFF  A9D,FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = port_data_ptr->data_buffer[iv_index*3+2];
095DC:  MOVFF  A96,A9C
095E0:  MOVFF  A95,A9B
095E4:  CLRF   x9E
095E6:  MOVLW  03
095E8:  MOVWF  x9D
095EA:  MOVLB  0
095EC:  CALL   7FF4
095F0:  MOVFF  02,A98
095F4:  MOVFF  01,A97
095F8:  MOVLW  02
095FA:  MOVLB  A
095FC:  ADDWF  x97,F
095FE:  MOVLW  00
09600:  ADDWFC x98,F
09602:  MOVLW  10
09604:  ADDWF  x97,W
09606:  MOVWF  01
09608:  MOVLW  0A
0960A:  ADDWFC x98,W
0960C:  MOVWF  03
0960E:  MOVF   01,W
09610:  MOVWF  x99
09612:  MOVFF  03,A9A
09616:  MOVFF  A94,A9C
0961A:  MOVFF  A93,A9B
0961E:  CLRF   x9E
09620:  MOVLW  03
09622:  MOVWF  x9D
09624:  MOVLB  0
09626:  CALL   7FF4
0962A:  MOVFF  02,A9C
0962E:  MOVFF  01,A9B
09632:  MOVLW  02
09634:  MOVLB  A
09636:  ADDWF  x9B,F
09638:  MOVLW  00
0963A:  ADDWFC x9C,F
0963C:  MOVLW  03
0963E:  ADDWF  x9B,W
09640:  MOVWF  01
09642:  MOVLW  00
09644:  ADDWFC x9C,W
09646:  MOVWF  03
09648:  MOVF   01,W
0964A:  ADDWF  x0E,W
0964C:  MOVWF  FE9
0964E:  MOVF   x0F,W
09650:  ADDWFC 03,W
09652:  MOVWF  FEA
09654:  MOVF   FEF,W
09656:  MOVWF  x9D
09658:  MOVFF  A9A,FEA
0965C:  MOVFF  A99,FE9
09660:  MOVFF  A9D,FEF
09664:  MOVLB  0
09666:  MOVLB  A
09668:  MOVF   x96,W
0966A:  MOVWF  03
0966C:  MOVF   x95,W
0966E:  INCF   x95,F
09670:  BTFSC  FD8.2
09672:  INCF   x96,F
09674:  INCF   x93,F
09676:  BTFSC  FD8.2
09678:  INCF   x94,F
0967A:  MOVLB  0
0967C:  GOTO   9478
....................         }
.................... 
....................         // 残り領域を 0x00 で埋める（未使用部分）
....................         for (; step_in_packet < 21; step_in_packet++) {
09680:  MOVLB  A
09682:  MOVF   x96,F
09684:  BTFSC  FD8.2
09686:  BRA    968E
09688:  MOVLB  0
0968A:  GOTO   9748
0968E:  MOVLB  0
09690:  MOVLB  A
09692:  MOVF   x95,W
09694:  SUBLW  14
09696:  BTFSC  FD8.0
09698:  BRA    96A0
0969A:  MOVLB  0
0969C:  GOTO   9748
096A0:  MOVLB  0
....................             data_packet.data.iv_data[step_in_packet*3]  = 0x00;
096A2:  MOVFF  A96,A9C
096A6:  MOVFF  A95,A9B
096AA:  MOVLB  A
096AC:  CLRF   x9E
096AE:  MOVLW  03
096B0:  MOVWF  x9D
096B2:  MOVLB  0
096B4:  CALL   7FF4
096B8:  MOVFF  02,A98
096BC:  MOVFF  01,A97
096C0:  MOVLW  10
096C2:  MOVLB  A
096C4:  ADDWF  x97,W
096C6:  MOVWF  FE9
096C8:  MOVLW  0A
096CA:  ADDWFC x98,W
096CC:  MOVWF  FEA
096CE:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+1] = 0x00;
096D0:  MOVFF  A96,A9C
096D4:  MOVFF  A95,A9B
096D8:  CLRF   x9E
096DA:  MOVLW  03
096DC:  MOVWF  x9D
096DE:  MOVLB  0
096E0:  CALL   7FF4
096E4:  MOVFF  02,A98
096E8:  MOVFF  01,A97
096EC:  MOVLW  01
096EE:  MOVLB  A
096F0:  ADDWF  x97,F
096F2:  MOVLW  00
096F4:  ADDWFC x98,F
096F6:  MOVLW  10
096F8:  ADDWF  x97,W
096FA:  MOVWF  FE9
096FC:  MOVLW  0A
096FE:  ADDWFC x98,W
09700:  MOVWF  FEA
09702:  CLRF   FEF
....................             data_packet.data.iv_data[step_in_packet*3+2] = 0x00;
09704:  MOVFF  A96,A9C
09708:  MOVFF  A95,A9B
0970C:  CLRF   x9E
0970E:  MOVLW  03
09710:  MOVWF  x9D
09712:  MOVLB  0
09714:  CALL   7FF4
09718:  MOVFF  02,A98
0971C:  MOVFF  01,A97
09720:  MOVLW  02
09722:  MOVLB  A
09724:  ADDWF  x97,F
09726:  MOVLW  00
09728:  ADDWFC x98,F
0972A:  MOVLW  10
0972C:  ADDWF  x97,W
0972E:  MOVWF  FE9
09730:  MOVLW  0A
09732:  ADDWFC x98,W
09734:  MOVWF  FEA
09736:  CLRF   FEF
09738:  MOVLB  0
0973A:  MOVLB  A
0973C:  INCF   x95,F
0973E:  BTFSC  FD8.2
09740:  INCF   x96,F
09742:  MOVLB  0
09744:  GOTO   9680
....................         }
.................... 
....................         // フラッシュに書き込み
....................         if (port_data_ptr->port_num == 1) {
09748:  MOVLB  A
0974A:  MOVF   x0E,W
0974C:  MOVWF  FE9
0974E:  MOVF   x0F,W
09750:  MOVWF  FEA
09752:  DECFSZ FEF,W
09754:  BRA    975A
09756:  BRA    9760
09758:  MOVLB  0
0975A:  MOVLB  0
0975C:  GOTO   97BA
09760:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
09762:  MOVLB  A
09764:  MOVF   x50,W
09766:  MOVWF  01
09768:  MOVF   x51,W
0976A:  MOVWF  03
0976C:  MOVF   01,W
0976E:  MOVWF  x97
09770:  MOVFF  03,A98
09774:  MOVFF  A98,B35
09778:  MOVFF  A97,B34
0977C:  MOVLW  3F
0977E:  MOVLB  B
09780:  MOVWF  x36
09782:  MOVLB  0
09784:  CALL   2DF2
09788:  MOVFF  01,A4F
....................             misf_write_data(FLASH_ID_IV1_DATA, data_packet_ptr->raw, PACKET_SIZE);
0978C:  MOVLB  A
0978E:  MOVF   x50,W
09790:  MOVWF  01
09792:  MOVF   x51,W
09794:  MOVWF  03
09796:  MOVF   01,W
09798:  MOVWF  x97
0979A:  MOVFF  03,A98
0979E:  MOVLW  04
097A0:  MOVWF  x99
097A2:  MOVFF  A98,A9B
097A6:  MOVFF  A97,A9A
097AA:  CLRF   x9D
097AC:  MOVLW  40
097AE:  MOVWF  x9C
097B0:  MOVLB  0
097B2:  CALL   3F8A
....................             // for (int i = 0; i < PACKET_SIZE; i++) {
....................                 // fprintf(PC, "%02X ", data_packet_ptr->raw[i]);
....................             // }
....................         } else if (port_data_ptr->port_num == 2) {
097B6:  GOTO   9828
097BA:  MOVLB  A
097BC:  MOVF   x0E,W
097BE:  MOVWF  FE9
097C0:  MOVF   x0F,W
097C2:  MOVWF  FEA
097C4:  MOVF   FEF,W
097C6:  SUBLW  02
097C8:  BTFSC  FD8.2
097CA:  BRA    97D2
097CC:  MOVLB  0
097CE:  GOTO   9828
097D2:  MOVLB  0
....................             data_packet.data.crc = calc_crc8(data_packet_ptr->raw, PACKET_SIZE - 1);
097D4:  MOVLB  A
097D6:  MOVF   x50,W
097D8:  MOVWF  01
097DA:  MOVF   x51,W
097DC:  MOVWF  03
097DE:  MOVF   01,W
097E0:  MOVWF  x97
097E2:  MOVFF  03,A98
097E6:  MOVFF  A98,B35
097EA:  MOVFF  A97,B34
097EE:  MOVLW  3F
097F0:  MOVLB  B
097F2:  MOVWF  x36
097F4:  MOVLB  0
097F6:  CALL   2DF2
097FA:  MOVFF  01,A4F
....................             misf_write_data(FLASH_ID_IV2_DATA, data_packet_ptr->raw, PACKET_SIZE);
097FE:  MOVLB  A
09800:  MOVF   x50,W
09802:  MOVWF  01
09804:  MOVF   x51,W
09806:  MOVWF  03
09808:  MOVF   01,W
0980A:  MOVWF  x97
0980C:  MOVFF  03,A98
09810:  MOVLW  06
09812:  MOVWF  x99
09814:  MOVFF  A98,A9B
09818:  MOVFF  A97,A9A
0981C:  CLRF   x9D
0981E:  MOVLW  40
09820:  MOVWF  x9C
09822:  MOVLB  0
09824:  CALL   3F8A
....................         }
09828:  GOTO   9430
....................     }
0982C:  RETURN 0
.................... 
....................     // misf_update_address_area(); // 必要なら有効化
.................... }
.................... 
.................... iv_env_t create_meas_data()
.................... {
....................     iv_env_t data;
....................     memset(&data, 0, sizeof(data));
*
08F1C:  MOVLW  0A
08F1E:  MOVWF  FEA
08F20:  MOVLW  20
08F22:  MOVWF  FE9
08F24:  CLRF   00
08F26:  CLRF   02
08F28:  MOVLW  0C
08F2A:  MOVWF  01
08F2C:  CALL   2BBA
....................     data.time           = get_current_sec();
08F30:  CALL   3920
08F34:  MOVFF  03,A23
08F38:  MOVFF  02,A22
08F3C:  MOVFF  01,A21
08F40:  MOVFF  00,A20
....................     data.temp_py_top    = ad7490_read(ADC_TEMP_PY_TOP);
08F44:  MOVLW  0D
08F46:  MOVLB  A
08F48:  MOVWF  x2C
08F4A:  MOVLB  0
08F4C:  CALL   21B2
08F50:  MOVFF  02,A27
08F54:  MOVFF  01,A26
....................     data.temp_py_bot    = ad7490_read(ADC_TEMP_PY_BOT);
08F58:  MOVLW  0E
08F5A:  MOVLB  A
08F5C:  MOVWF  x2C
08F5E:  MOVLB  0
08F60:  CALL   21B2
08F64:  MOVFF  02,A29
08F68:  MOVFF  01,A28
....................     data.temp_mis7      = ad7490_read(ADC_TEMP_MIS7);
08F6C:  MOVLW  0C
08F6E:  MOVLB  A
08F70:  MOVWF  x2C
08F72:  MOVLB  0
08F74:  CALL   21B2
08F78:  MOVFF  02,A2B
08F7C:  MOVFF  01,A2A
....................     data.pd             = ad7490_read(ADC_PD);
08F80:  MOVLW  0F
08F82:  MOVLB  A
08F84:  MOVWF  x2C
08F86:  MOVLB  0
08F88:  CALL   21B2
08F8C:  MOVFF  02,A25
08F90:  MOVFF  01,A24
....................     return data;
08F94:  MOVLW  20
08F96:  MOVWF  01
08F98:  MOVLW  0A
08F9A:  MOVWF  02
08F9C:  RETURN 0
.................... }
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data)
.................... {
....................     // ADCの12ビット値を電力密度（mW/cm²）に変換する例
....................     // ここでは仮に1 LSB = 0.1 mW/cm²とする
....................     return (unsigned int16)(data);
*
0810E:  MOVLB  2
08110:  MOVF   x27,W
08112:  MOVWF  01
08114:  MOVF   x28,W
08116:  MOVWF  02
08118:  MOVLB  0
0811A:  GOTO   8CD4 (RETURN)
.................... }
.................... 
.................... int16 calc_curr_value(unsigned int16 data){
....................     float voltage_mv;
....................     float current_ma;
.................... 
....................     // 12ビットADCの値を[mV]に変換
....................     voltage_mv = (float)data * ADC_REF_VOLTAGE_MV / ADC_MAX_READING;
*
08A7C:  MOVFF  228,232
08A80:  MOVFF  227,231
08A84:  GOTO   811E
08A88:  MOVFF  03,234
08A8C:  MOVFF  02,233
08A90:  MOVFF  01,232
08A94:  MOVFF  00,231
08A98:  MOVFF  234,238
08A9C:  MOVFF  233,237
08AA0:  MOVFF  232,236
08AA4:  MOVFF  231,235
08AA8:  MOVLB  2
08AAA:  CLRF   x3C
08AAC:  MOVLW  40
08AAE:  MOVWF  x3B
08AB0:  MOVLW  1C
08AB2:  MOVWF  x3A
08AB4:  MOVLW  8A
08AB6:  MOVWF  x39
08AB8:  MOVLB  0
08ABA:  GOTO   8164
08ABE:  MOVFF  03,234
08AC2:  MOVFF  02,233
08AC6:  MOVFF  01,232
08ACA:  MOVFF  00,231
08ACE:  MOVFF  234,238
08AD2:  MOVFF  233,237
08AD6:  MOVFF  232,236
08ADA:  MOVFF  231,235
08ADE:  MOVLB  2
08AE0:  CLRF   x3C
08AE2:  MOVLW  F0
08AE4:  MOVWF  x3B
08AE6:  MOVLW  7F
08AE8:  MOVWF  x3A
08AEA:  MOVLW  8A
08AEC:  MOVWF  x39
08AEE:  MOVLB  0
08AF0:  CALL   82B0
08AF4:  MOVFF  03,22C
08AF8:  MOVFF  02,22B
08AFC:  MOVFF  01,22A
08B00:  MOVFF  00,229
.................... 
....................     // オフセット電圧(ADC_CURR_REF_VOLTAGE_MV)との差から電流[mA]を算出
....................     current_ma = (voltage_mv - ADC_CURR_REF_VOLTAGE_MV) / (SHUNT_RESISTANCE_OHM * AMP_GAIN);
08B04:  BSF    FD8.1
08B06:  MOVFF  22C,234
08B0A:  MOVFF  22B,233
08B0E:  MOVFF  22A,232
08B12:  MOVFF  229,231
08B16:  MOVLB  2
08B18:  CLRF   x38
08B1A:  MOVLW  40
08B1C:  MOVWF  x37
08B1E:  MOVLW  1C
08B20:  MOVWF  x36
08B22:  MOVLW  89
08B24:  MOVWF  x35
08B26:  MOVLB  0
08B28:  GOTO   8576
08B2C:  MOVFF  03,234
08B30:  MOVFF  02,233
08B34:  MOVFF  01,232
08B38:  MOVFF  00,231
08B3C:  MOVFF  234,238
08B40:  MOVFF  233,237
08B44:  MOVFF  232,236
08B48:  MOVFF  231,235
08B4C:  MOVLB  2
08B4E:  CLRF   x3C
08B50:  CLRF   x3B
08B52:  MOVLW  20
08B54:  MOVWF  x3A
08B56:  MOVLW  82
08B58:  MOVWF  x39
08B5A:  MOVLB  0
08B5C:  CALL   82B0
08B60:  MOVFF  03,230
08B64:  MOVFF  02,22F
08B68:  MOVFF  01,22E
08B6C:  MOVFF  00,22D
.................... 
....................     return (int16)current_ma;
08B70:  MOVFF  230,234
08B74:  MOVFF  22F,233
08B78:  MOVFF  22E,232
08B7C:  MOVFF  22D,231
08B80:  GOTO   8A22
08B84:  MOVF   01,W
08B86:  MOVWF  01
08B88:  MOVF   02,W
08B8A:  MOVWF  02
08B8C:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/sato_piclog.c"
.................... #include "sato_piclog.h"                          // 同じフォルダのヘッダー
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../cigs/hal/timer.h"                   // タイマーライブラリ
.................... #ifndef TIMER_H
.................... #define TIMER_H
.................... 
.................... // __________ define _________
.................... 
.................... #define SEC_IN_A_DAY 86400
.................... #define CLOCK_FREQUENCY 32768 // 32.768 kHz
.................... 
.................... // __________ values _________
.................... 
.................... int32 tick_10ms = 0; 
.................... 
.................... unsigned int32 dsec = 0, sec = 0; //dsec -> deci second (0.01 sec)
.................... volatile unsigned int16 day = 0;
.................... 
.................... void timer_init();
.................... // __________ functions _________
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... unsigned int16 get_current_day();
.................... void set_current_10msec(unsigned int32 new_10msec);
.................... 
.................... #INT_TIMER0
.................... static void TIMER0_isr();
.................... 
.................... #INT_TIMER1 
.................... static void TIMER1_isr();
.................... 
.................... // Clock Freq : 32.768kHz
.................... #define TIMER_ISR_1S 0x8000 // 1秒ごとのタイマー割り込み
.................... #define TIMER_ISR_100MSEC 0xF313 // 100ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_10MSEC 0xFEA8 // 10ミリ秒ごとのタイマー割り込み
.................... #define TIMER_ISR_25MSEC 0xFC8D // 25ミリ秒ごとのタイマー割り込み
.................... 
.................... void set_current_sec(unsigned int32 new_sec);
.................... unsigned int32 get_current_sec();
.................... unsigned int16 get_current_msec();
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "sato_flash.h"                 // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"               // フラッシュ操作キュー
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                 // フラッシュデバイス
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... // #define PICLOG_DEBUG
.................... #define MISSION_ID_PICLOG 0x03  // PICLOGミッションID
.................... 
.................... void piclog_make(int8 function, int8 parameter)
*
04E76:  MOVLW  02
04E78:  MOVLB  2
04E7A:  MOVWF  x4D
04E7C:  MOVLW  46
04E7E:  MOVWF  x4C
.................... {
....................     piclog_t piclog;
....................     piclog_t *piclog_ptr = &piclog;
....................     memset(piclog_ptr, 0x00, PICLOG_PACKET_SIZE);
04E80:  MOVFF  24D,FEA
04E84:  MOVFF  24C,FE9
04E88:  CLRF   00
04E8A:  CLRF   02
04E8C:  MOVLW  06
04E8E:  MOVWF  01
04E90:  MOVLB  0
04E92:  CALL   2BBA
....................     piclog_ptr->fields.time = get_current_sec();
04E96:  MOVLB  2
04E98:  MOVF   x4C,W
04E9A:  MOVWF  01
04E9C:  MOVF   x4D,W
04E9E:  MOVWF  03
04EA0:  MOVF   01,W
04EA2:  MOVWF  x4F
04EA4:  MOVFF  03,250
04EA8:  MOVLB  0
04EAA:  CALL   3920
04EAE:  MOVFF  250,FEA
04EB2:  MOVFF  24F,FE9
04EB6:  MOVFF  00,FEF
04EBA:  MOVFF  01,FEC
04EBE:  MOVFF  02,FEC
04EC2:  MOVFF  03,FEC
04EC6:  MOVF   FED,F
04EC8:  MOVF   FED,F
04ECA:  MOVF   FED,F
....................     piclog_ptr->fields.function = function;
04ECC:  MOVLW  04
04ECE:  MOVLB  2
04ED0:  ADDWF  x4C,W
04ED2:  MOVWF  FE9
04ED4:  MOVLW  00
04ED6:  ADDWFC x4D,W
04ED8:  MOVWF  FEA
04EDA:  MOVFF  244,FEF
....................     piclog_ptr->fields.parameter = parameter;
04EDE:  MOVLW  05
04EE0:  ADDWF  x4C,W
04EE2:  MOVWF  FE9
04EE4:  MOVLW  00
04EE6:  ADDWFC x4D,W
04EE8:  MOVWF  FEA
04EEA:  MOVFF  245,FEF
.................... 
....................     printf("[PICLOG] : ");
04EEE:  MOVLW  E6
04EF0:  MOVWF  FF6
04EF2:  MOVLW  06
04EF4:  MOVWF  FF7
04EF6:  MOVLW  00
04EF8:  MOVWF  FF8
04EFA:  MOVLB  0
04EFC:  CALL   1FF0
....................     for (int8 i = 0; i < PICLOG_PACKET_SIZE; i++) {
04F00:  MOVLB  2
04F02:  CLRF   x4E
04F04:  MOVLB  0
04F06:  MOVLB  2
04F08:  MOVF   x4E,W
04F0A:  SUBLW  05
04F0C:  BTFSC  FD8.0
04F0E:  BRA    4F16
04F10:  MOVLB  0
04F12:  GOTO   4F52
04F16:  MOVLB  0
....................         printf("%02X ", piclog_ptr->bytes[i]);
04F18:  MOVLB  2
04F1A:  MOVF   x4E,W
04F1C:  ADDWF  x4C,W
04F1E:  MOVWF  FE9
04F20:  MOVLW  00
04F22:  ADDWFC x4D,W
04F24:  MOVWF  FEA
04F26:  MOVFF  FEF,24F
04F2A:  MOVFF  24F,A26
04F2E:  MOVLW  37
04F30:  MOVLB  A
04F32:  MOVWF  x27
04F34:  MOVLB  0
04F36:  CALL   2232
04F3A:  MOVLW  20
04F3C:  BTFSS  FA6.6
04F3E:  GOTO   4F3C
04F42:  MOVLB  E
04F44:  MOVWF  xF9
04F46:  MOVLB  0
04F48:  MOVLB  2
04F4A:  INCF   x4E,F
04F4C:  MOVLB  0
04F4E:  GOTO   4F06
....................     }
....................     printf("\r\n");
04F52:  MOVLW  0D
04F54:  BTFSS  FA6.6
04F56:  GOTO   4F54
04F5A:  MOVLB  E
04F5C:  MOVWF  xF9
04F5E:  MOVLW  0A
04F60:  MOVLB  0
04F62:  BTFSS  FA6.6
04F64:  GOTO   4F62
04F68:  MOVLB  E
04F6A:  MOVWF  xF9
.................... 
....................     misf_write_data(FLASH_ID_PICLOG, piclog_ptr->bytes, PICLOG_PACKET_SIZE);
04F6C:  MOVLB  2
04F6E:  MOVF   x4C,W
04F70:  MOVWF  01
04F72:  MOVF   x4D,W
04F74:  MOVWF  03
04F76:  MOVF   01,W
04F78:  MOVWF  x4F
04F7A:  MOVFF  03,250
04F7E:  MOVLW  01
04F80:  MOVLB  A
04F82:  MOVWF  x99
04F84:  MOVFF  250,A9B
04F88:  MOVFF  24F,A9A
04F8C:  CLRF   x9D
04F8E:  MOVLW  06
04F90:  MOVWF  x9C
04F92:  MOVLB  0
04F94:  CALL   3F8A
....................     misf_update_address_area();
04F98:  CALL   4DE6
04F9C:  RETURN 0
.................... }
.................... // End of file
.................... 
.................... #include "domain/sato_smf.c"
.................... #include "sato_smf.h"  
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/sato_config.h" // int8,int32 型など(CCS C) 依存
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... // ADC Settings
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS1_VOLT  
.................... #define ADC_DIODE_INNER_CURR    ADC_CIGS1_CURR 
.................... #define ADC_DIODE_INNER_AMP    ADC_CIGS1_AMP   
.................... #define ADC_DIODE_INNER_VREF   ADC_CIGS1_VREF  
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS2_VOLT  
.................... #define ADC_DIODE_OUTER_CURR   ADC_CIGS2_CURR  
.................... #define ADC_DIODE_OUTER_AMP    ADC_CIGS2_AMP   
.................... #define ADC_DIODE_OUTER_VREF   ADC_CIGS2_VREF  
.................... #define ADC_DIODE_INNER_DAC    ADC_CIGS1_DAC   
.................... #define ADC_DIODE_OUTER_DAC    ADC_CIGS2_DAC   
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "sato_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "sato_flash.h"
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"              // Flash device definitions
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/smf_queue.h"            // システム設定 
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/tool/calc_tools.h"           // SMF処理関数 
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/mmj_smf_memorymap.h" 
.................... #ifndef SMF_MEMORY_MAP_H
.................... #define SMF_MEMORY_MAP_H
.................... 
.................... /*
....................  * Auto-generated Memory Map Header
....................  * Generated from: MMJ_ICD_021_IICD_06_Memory_map.xlsx
....................  * Generated at: 2025-07-27 20:54:05
....................  */
.................... #define PACKET_SIZE 64
.................... 
.................... typedef struct {
....................     unsigned int32 used_size;
....................     unsigned int8 loop_counter;
....................     unsigned int8 reserved[3];
.................... } partition_header_t;
.................... 
.................... 
.................... typedef enum smf_memory_id_t{
....................     // SATO
....................     SMF_SATO_DATA_TABLE = 0x90,
....................     SMF_SATO_PICLOG = 0x91,
....................     SMF_SATO_INNER_DIODE_HEADER = 0xA2,
....................     SMF_SATO_INNER_DIODE_DATA = 0xA3,
....................     SMF_SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SMF_SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     SMF_CIGS_DATA_TABLE = 0xC0,
....................     SMF_CIGS_PICLOG = 0xC1,
....................     SMF_CIGS_ENVIRO = 0xC2,
....................     SMF_CIGS_IV1_HEADER = 0xC3,
....................     SMF_CIGS_IV1_DATA = 0xC4,
....................     SMF_CIGS_IV2_HEADER = 0xC5,
....................     SMF_CIGS_IV2_DATA = 0xC6,
.................... };
.................... 
.................... 
.................... 
.................... // Base Memory Configuration
.................... #define SMF_SIZE 0x08000000 // 128MB
.................... #define SMF_START_ADDRESS 0x00000000
.................... #define SMF_END_ADDRESS   0x07FFFFFF
.................... 
.................... 
.................... // ===== Device IDs from メモリマップ  =====
.................... #define MAIN_DEVICE_ID 0x10
.................... #define COM_DEVICE_ID 0x20
.................... #define APRS_DEVICE_ID 0x60
.................... #define CAM_DEVICE_ID 0x70
.................... #define CHO_DEVICE_ID 0x80
.................... #define SATO_DEVICE_ID 0x90
.................... #define BHU_DEVICE_ID 0xB0
.................... #define CIGS_DEVICE_ID 0xC0
.................... 
.................... // ===== Data IDs from メモリマップ  =====
.................... #define ID_MAIN_ADDRESS_AREA 0x10
.................... #define ID_MAIN_ADDRESS 0x11
.................... #define ID_MAIN_RESERVED_COMMAND 0x12
.................... #define ID_MAIN_HK 0x14
.................... #define ID_MAIN_HSHK 0x15
.................... #define ID_MAIN_LSHK 0x16
.................... #define ID_MAIN_PIC_LOG 0x1F
.................... #define ID_COM_RSSI_TRX_T_LOG 0x20
.................... #define ID_COM_PIC_LOG 0x2F
.................... #define ID_APRS_PIC_DATA_TABLE 0x60
.................... #define ID_APRS_APRS 0x61
.................... #define ID_APRS_IN_VEHICLE_COMMUNICATION_MISSION 0x62
.................... #define ID_APRS_TLE_DATA 0x63
.................... #define ID_APRS_ECOSYSTEM 0x67
.................... #define ID_APRS_PIC_LOG 0x6F
.................... #define ID_CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE 0x70
.................... #define ID_CAM_CHIBANY_IMAGE_DATA_SIZE 0x71
.................... #define ID_CAM_CHIBANY_VIDEO_SIZE 0x72
.................... #define ID_CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE 0x73
.................... #define ID_CAM_POLEN_IMAGE_DATA_SIZE 0x74
.................... #define ID_CAM_POLLEN_VIDEO_DATA_SIZE 0x75
.................... #define ID_CAM_MCU_LOG_DATA_SIZE 0x7F
.................... #define ID_CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE 0x80
.................... #define ID_CHO_GREECE_IMAGE_DATA_SIZE 0x81
.................... #define ID_CHO_SENSOR_DATA_SIZE 0x82
.................... #define ID_CHO_MCU_LOG_DATA_SIZE 0x8F
.................... #define ID_SATO_PIC_DATA_TABLE 0x90
.................... #define ID_SATO_CYCLE_MODE_DATA 0x91
.................... #define ID_SATO_RANDOM_MODE_DATA 0x92
.................... #define ID_SATO_MULTIPLE_POINT_MODE_DATA 0x93
.................... #define ID_SATO_VOLTAGE_SWEEP_MODE_DATA 0x94
.................... #define ID_SATO_PIC_LOG 0x9F
.................... #define ID_BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE 0xB0
.................... #define ID_BHU_FOREST_IMAGE_DATA_SIZE 0xB1
.................... #define ID_BHU_SENSOR_DATA_DATA_SIZE 0xB2
.................... #define ID_BHU_MCU_LOG_DATA_SIZE 0xBF
.................... #define ID_CIGS_DATA_TABLE 0xC0
.................... #define ID_CIGS_MEASURE_DATA 0xC1
.................... #define ID_CIGS_PICLOG 0xCF
.................... 
.................... // ===== Memory Address Mappings from メモリマップ  =====
.................... #define MAIN_ADDRESS_AREA_START_ADDRESS 0x00000000
.................... #define MAIN_ADDRESS_AREA_END_ADDRESS 0x00000FFF
.................... #define MAIN_ADDRESS_START_ADDRESS 0x00001000
.................... #define MAIN_ADDRESS_END_ADDRESS 0x00001FFF
.................... #define MAIN_RESERVED_COMMAND_START_ADDRESS 0x00002000
.................... #define MAIN_RESERVED_COMMAND_END_ADDRESS 0x00003FFF
.................... #define MAIN_HK_START_ADDRESS 0x00004000
.................... #define MAIN_HK_END_ADDRESS 0x02003FFF
.................... #define MAIN_HSHK_START_ADDRESS 0x02004000
.................... #define MAIN_HSHK_END_ADDRESS 0x02103FFF
.................... #define MAIN_LSHK_START_ADDRESS 0x02104000
.................... #define MAIN_LSHK_END_ADDRESS 0x02303FFF
.................... #define MAIN_PIC_LOG_START_ADDRESS 0x02304000
.................... #define MAIN_PIC_LOG_END_ADDRESS 0x0240FFFF
.................... #define COM_RSSI_TRX_T_LOG_START_ADDRESS 0x02800000
.................... #define COM_RSSI_TRX_T_LOG_END_ADDRESS 0x028FFFFF
.................... #define COM_PIC_LOG_START_ADDRESS 0x02900000
.................... #define COM_PIC_LOG_END_ADDRESS 0x029FFFFF
.................... #define APRS_PIC_DATA_TABLE_START_ADDRESS 0x02C00000
.................... #define APRS_PIC_DATA_TABLE_END_ADDRESS 0x02C00FFF
.................... #define APRS_APRS_START_ADDRESS 0x02C01000
.................... #define APRS_APRS_END_ADDRESS 0x02D00FFF
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_START_ADDRESS 0x02D01000
.................... #define APRS_IN_VEHICLE_COMMUNICATION_MISSION_END_ADDRESS 0x02D01FFF
.................... #define APRS_TLE_DATA_START_ADDRESS 0x02D02000
.................... #define APRS_TLE_DATA_END_ADDRESS 0x02D02FFF
.................... #define APRS_ECOSYSTEM_START_ADDRESS 0x02D03000
.................... #define APRS_ECOSYSTEM_END_ADDRESS 0x02E02FFF
.................... #define APRS_PIC_LOG_START_ADDRESS 0x02E03000
.................... #define APRS_PIC_LOG_END_ADDRESS 0x02E03FFF
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x02F10000
.................... #define CAM_CHIBANY_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x02F10FFF
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_START_ADDRESS 0x03311000
.................... #define CAM_CHIBANY_IMAGE_DATA_SIZE_END_ADDRESS 0x03311FFF
.................... #define CAM_CHIBANY_VIDEO_SIZE_START_ADDRESS 0x03712000
.................... #define CAM_CHIBANY_VIDEO_SIZE_END_ADDRESS 0x03712FFF
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x03B13000
.................... #define CAM_POLLEN_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x03B13FFF
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_START_ADDRESS 0x03F14000
.................... #define CAM_POLEN_IMAGE_DATA_SIZE_END_ADDRESS 0x03F14FFF
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_START_ADDRESS 0x04315000
.................... #define CAM_POLLEN_VIDEO_DATA_SIZE_END_ADDRESS 0x04315FFF
.................... #define CAM_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04320000
.................... #define CAM_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04320FFF
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x04440000
.................... #define CHO_GREECE_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x04440FFF
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_START_ADDRESS 0x04451000
.................... #define CHO_GREECE_IMAGE_DATA_SIZE_END_ADDRESS 0x04451FFF
.................... #define CHO_SENSOR_DATA_SIZE_START_ADDRESS 0x04852000
.................... #define CHO_SENSOR_DATA_SIZE_END_ADDRESS 0x04852FFF
.................... #define CHO_MCU_LOG_DATA_SIZE_START_ADDRESS 0x04863000
.................... #define CHO_MCU_LOG_DATA_SIZE_END_ADDRESS 0x04863FFF
.................... #define SATO_PIC_DATA_TABLE_START_ADDRESS 0x04980000
.................... #define SATO_PIC_DATA_TABLE_END_ADDRESS 0x04980FFF
.................... #define SATO_CYCLE_MODE_DATA_START_ADDRESS 0x04981000
.................... #define SATO_CYCLE_MODE_DATA_END_ADDRESS 0x04A80FFF
.................... #define SATO_RANDOM_MODE_DATA_START_ADDRESS 0x04A81000
.................... #define SATO_RANDOM_MODE_DATA_END_ADDRESS 0x04E80FFF
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_START_ADDRESS 0x04E81000
.................... #define SATO_MULTIPLE_POINT_MODE_DATA_END_ADDRESS 0x04F80FFF
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_START_ADDRESS 0x04F81000
.................... #define SATO_VOLTAGE_SWEEP_MODE_DATA_END_ADDRESS 0x05080FFF
.................... #define SATO_PIC_LOG_START_ADDRESS 0x05081000
.................... #define SATO_PIC_LOG_END_ADDRESS 0x05081FFF
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_START_ADDRESS 0x05190000
.................... #define BHU_FOREST_THUMBNAIL_IMAGE_DATA_SIZE_END_ADDRESS 0x05190FFF
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_START_ADDRESS 0x05591000
.................... #define BHU_FOREST_IMAGE_DATA_SIZE_END_ADDRESS 0x05591FFF
.................... #define BHU_SENSOR_DATA_DATA_SIZE_START_ADDRESS 0x05992000
.................... #define BHU_SENSOR_DATA_DATA_SIZE_END_ADDRESS 0x05992FFF
.................... #define BHU_MCU_LOG_DATA_SIZE_START_ADDRESS 0x06993000
.................... #define BHU_MCU_LOG_DATA_SIZE_END_ADDRESS   0x06993FFF
.................... // CIGS related partitions
.................... #define CIGS_DATA_TABLE_START_ADDRESS   0x06AA0000
.................... #define CIGS_DATA_TABLE_END_ADDRESS     0x06AA0FFF
.................... #define CIGS_PICLOG_START_ADDRESS       0x06AA1000
.................... #define CIGS_PICLOG_END_ADDRESS         0x06AB0FFF
.................... #define CIGS_ENVIRO_START_ADDRESS       0x06AB1000
.................... #define CIGS_ENVIRO_END_ADDRESS         0x06B50FFF
.................... #define CIGS_IV1_HEADER_START_ADDRESS   0x06B51000
.................... #define CIGS_IV1_HEADER_END_ADDRESS     0x06BF0FFF
.................... #define CIGS_IV1_DATA_START_ADDRESS     0x06BF1000
.................... #define CIGS_IV1_DATA_END_ADDRESS       0x06FF0FFF
.................... #define CIGS_IV2_HEADER_START_ADDRESS   0x06FF1000
.................... #define CIGS_IV2_HEADER_END_ADDRESS     0x07090FFF
.................... #define CIGS_IV2_DATA_START_ADDRESS     0x07091000
.................... #define CIGS_IV2_DATA_END_ADDRESS       0x07490FFF
.................... 
.................... /*
.................... enum smf_memory_id{
....................     // SATO
....................     SATO_DATA_TABLE = 0xA0,
....................     SATO_PICLOG = 0xA1,
....................     SATO_INNER_DIODE_HEADER = 0xA2,
....................     SATO_INNER_DIODE_DATA = 0xA3,
....................     SATO_OUTER_DIODE_HEADER = 0xA4,
....................     SATO_OUTER_DIODE_DATA = 0xA5,
.................... 
....................     // CIGS related IDs
....................     IDF_CIGS_DATA_TABLE = 0xC0,
....................     IDF_CIGS_PICLOG = 0xC1,
....................     IDF_CIGS_ENVIRO = 0xC2,
....................     IDF_CIGS_IV1_HEADER = 0xC3,
....................     IDF_CIGS_IV1_DATA = 0xC4,
....................     IDF_CIGS_IV2_HEADER = 0xC5,
....................     IDF_CIGS_IV2_DATA = 0xC6,
.................... }
.................... */
.................... #endif // SMF_MEMORY_MAP_H
.................... 
.................... 
.................... #define MAX_READ_SIZE 64
.................... #define SIZE_AREA_SIZE 0x1000
.................... #define SUBSECTOR_SIZE 0x1000 // (4096bytes)
.................... #define CRC_RETRY_COUNT 5     // CRC検証のリトライ回数 (smf_queue.hの値と整合するなら一元化検討)
.................... 
.................... 
.................... 
.................... PartitionParam param = {0};
.................... 
.................... 
.................... const ADDRESS_AREA_T SMF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { CIGS_DATA_TABLE_START_ADDRESS,   CIGS_DATA_TABLE_END_ADDRESS,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { CIGS_PICLOG_START_ADDRESS,       CIGS_PICLOG_END_ADDRESS,       MISF_CIGS_PICLOG_SIZE },
....................     { CIGS_ENVIRO_START_ADDRESS,       CIGS_ENVIRO_END_ADDRESS,       MISF_CIGS_ENVIRO_SIZE },
....................     { CIGS_IV1_HEADER_START_ADDRESS,   CIGS_IV1_HEADER_END_ADDRESS,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { CIGS_IV1_DATA_START_ADDRESS,     CIGS_IV1_DATA_END_ADDRESS,     MISF_CIGS_IV1_DATA_SIZE },
....................     { CIGS_IV2_HEADER_START_ADDRESS,   CIGS_IV2_HEADER_END_ADDRESS,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { CIGS_IV2_DATA_START_ADDRESS,     CIGS_IV2_DATA_END_ADDRESS,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... 
.................... 
.................... 
.................... 
.................... void smf_data_table_init()
.................... {
....................     fprintf(PC, "SMF Data Table Initialize\r\n");
*
077D8:  MOVLW  F2
077DA:  MOVWF  FF6
077DC:  MOVLW  06
077DE:  MOVWF  FF7
077E0:  MOVLW  00
077E2:  MOVWF  FF8
077E4:  CALL   1FF0
....................     for ( unsigned int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SUBSECTOR_SIZE )
077E8:  MOVLW  06
077EA:  MOVLB  2
077EC:  MOVWF  x87
077EE:  MOVLW  AA
077F0:  MOVWF  x86
077F2:  CLRF   x85
077F4:  CLRF   x84
077F6:  MOVLB  0
077F8:  MOVLB  2
077FA:  MOVF   x87,W
077FC:  SUBLW  07
077FE:  BTFSC  FD8.0
07800:  BRA    7808
07802:  MOVLB  0
07804:  GOTO   788A
07808:  MOVLB  0
0780A:  BTFSS  FD8.2
0780C:  GOTO   7852
07810:  MOVLB  2
07812:  MOVF   x86,W
07814:  SUBLW  49
07816:  BTFSC  FD8.0
07818:  BRA    7820
0781A:  MOVLB  0
0781C:  GOTO   788A
07820:  MOVLB  0
07822:  BTFSS  FD8.2
07824:  GOTO   7852
07828:  MOVLB  2
0782A:  MOVF   x85,W
0782C:  SUBLW  0F
0782E:  BTFSC  FD8.0
07830:  BRA    7838
07832:  MOVLB  0
07834:  GOTO   788A
07838:  MOVLB  0
0783A:  BTFSS  FD8.2
0783C:  GOTO   7852
07840:  MOVLB  2
07842:  MOVF   x84,W
07844:  SUBLW  FE
07846:  BTFSC  FD8.0
07848:  BRA    7850
0784A:  MOVLB  0
0784C:  GOTO   788A
07850:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, address);
07852:  MOVFF  119,A51
07856:  MOVFF  118,A50
0785A:  MOVFF  117,A4F
0785E:  MOVFF  116,A4E
07862:  MOVFF  287,A55
07866:  MOVFF  286,A54
0786A:  MOVFF  285,A53
0786E:  MOVFF  284,A52
07872:  CALL   4AC2
07876:  MOVLW  10
07878:  MOVLB  2
0787A:  ADDWF  x85,F
0787C:  MOVLW  00
0787E:  ADDWFC x86,F
07880:  MOVLW  00
07882:  ADDWFC x87,F
07884:  MOVLB  0
07886:  GOTO   77F8
....................     }
....................     smf_data_table_t smf_data_table = {0};
0788A:  MOVLB  2
0788C:  CLRF   x88
0788E:  CLRF   x89
07890:  CLRF   x8A
07892:  CLRF   x8B
07894:  CLRF   x8C
07896:  CLRF   x8D
07898:  CLRF   x8E
0789A:  CLRF   x8F
0789C:  CLRF   x90
0789E:  CLRF   x91
078A0:  CLRF   x92
078A2:  CLRF   x93
078A4:  CLRF   x94
078A6:  CLRF   x95
078A8:  CLRF   x96
078AA:  CLRF   x97
078AC:  CLRF   x98
078AE:  CLRF   x99
078B0:  CLRF   x9A
078B2:  CLRF   x9B
078B4:  CLRF   x9C
078B6:  CLRF   x9D
078B8:  CLRF   x9E
078BA:  CLRF   x9F
078BC:  CLRF   xA0
078BE:  CLRF   xA1
078C0:  CLRF   xA2
078C2:  CLRF   xA3
078C4:  CLRF   xA4
078C6:  CLRF   xA5
078C8:  CLRF   xA6
078CA:  CLRF   xA7
078CC:  CLRF   xA8
078CE:  CLRF   xA9
078D0:  CLRF   xAA
078D2:  CLRF   xAB
078D4:  CLRF   xAC
078D6:  CLRF   xAD
078D8:  CLRF   xAE
078DA:  CLRF   xAF
078DC:  CLRF   xB0
078DE:  CLRF   xB1
078E0:  CLRF   xB2
078E2:  CLRF   xB3
078E4:  CLRF   xB4
078E6:  CLRF   xB5
078E8:  CLRF   xB6
078EA:  CLRF   xB7
078EC:  CLRF   xB8
078EE:  CLRF   xB9
078F0:  CLRF   xBA
078F2:  CLRF   xBB
078F4:  CLRF   xBC
078F6:  CLRF   xBD
078F8:  CLRF   xBE
078FA:  CLRF   xBF
078FC:  CLRF   xC0
078FE:  CLRF   xC1
07900:  CLRF   xC2
07902:  CLRF   xC3
07904:  CLRF   xC4
07906:  CLRF   xC5
07908:  CLRF   xC6
0790A:  CLRF   xC7
....................     smf_data_table.fields.crc = calc_crc8(smf_data_table.bytes, PACKET_SIZE - 1); // CRCを計算して初期化    
0790C:  MOVLW  02
0790E:  MOVLB  B
07910:  MOVWF  x35
07912:  MOVLW  88
07914:  MOVWF  x34
07916:  MOVLW  3F
07918:  MOVWF  x36
0791A:  MOVLB  0
0791C:  CALL   2DF2
07920:  MOVFF  01,2C7
....................     write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table.bytes, PACKET_SIZE);
07924:  MOVFF  119,B37
07928:  MOVFF  118,B36
0792C:  MOVFF  117,B35
07930:  MOVFF  116,B34
07934:  MOVLW  06
07936:  MOVLB  B
07938:  MOVWF  x3B
0793A:  MOVLW  AA
0793C:  MOVWF  x3A
0793E:  CLRF   x39
07940:  CLRF   x38
07942:  MOVLW  02
07944:  MOVWF  x3D
07946:  MOVLW  88
07948:  MOVWF  x3C
0794A:  CLRF   x3F
0794C:  MOVLW  40
0794E:  MOVWF  x3E
07950:  MOVLB  0
07952:  CALL   3C3E
07956:  RETURN 0
.................... }
.................... 
.................... void read_smf_header(smf_data_table_t *smf_data_table)
.................... {
....................     int8 retry_count;
.................... 
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
*
0F25E:  MOVLB  2
0F260:  CLRF   x83
0F262:  MOVLB  0
0F264:  MOVLB  2
0F266:  MOVF   x83,W
0F268:  SUBLW  04
0F26A:  BTFSC  FD8.0
0F26C:  BRA    F274
0F26E:  MOVLB  0
0F270:  GOTO   F350
0F274:  MOVLB  0
....................     {
....................         // ヘッダを読み出し
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0F276:  MOVLB  2
0F278:  MOVF   x81,W
0F27A:  MOVWF  01
0F27C:  MOVF   x82,W
0F27E:  MOVWF  03
0F280:  MOVF   01,W
0F282:  MOVWF  x84
0F284:  MOVFF  03,285
0F288:  MOVFF  119,B37
0F28C:  MOVFF  118,B36
0F290:  MOVFF  117,B35
0F294:  MOVFF  116,B34
0F298:  MOVLW  06
0F29A:  MOVLB  B
0F29C:  MOVWF  x3B
0F29E:  MOVLW  AA
0F2A0:  MOVWF  x3A
0F2A2:  CLRF   x39
0F2A4:  CLRF   x38
0F2A6:  MOVFF  285,B3D
0F2AA:  MOVFF  284,B3C
0F2AE:  CLRF   x41
0F2B0:  CLRF   x40
0F2B2:  CLRF   x3F
0F2B4:  MOVLW  40
0F2B6:  MOVWF  x3E
0F2B8:  MOVLB  0
0F2BA:  CALL   2BDE
....................         print_smf_counter_status(smf_data_table);
0F2BE:  MOVFF  282,285
0F2C2:  MOVFF  281,284
0F2C6:  CALL   EA36
.................... 
....................         // CRC検証
....................         if (is_crc_valid(smf_data_table->bytes, PACKET_SIZE))
0F2CA:  MOVLB  2
0F2CC:  MOVF   x81,W
0F2CE:  MOVWF  01
0F2D0:  MOVF   x82,W
0F2D2:  MOVWF  03
0F2D4:  MOVF   01,W
0F2D6:  MOVWF  x84
0F2D8:  MOVFF  03,285
0F2DC:  MOVFF  285,2C6
0F2E0:  MOVFF  284,2C5
0F2E4:  MOVLW  40
0F2E6:  MOVWF  xC7
0F2E8:  MOVLB  0
0F2EA:  CALL   F0DA
0F2EE:  MOVF   01,F
0F2F0:  BTFSC  FD8.2
0F2F2:  GOTO   F2FA
....................         {
....................             return; // 成功したら終了
0F2F6:  GOTO   F3DC
....................         }
....................         // NGなら少し待って再試行
....................         printf("CRC ERROR %d\r\n", retry_count + 1);
0F2FA:  MOVLW  01
0F2FC:  MOVLB  2
0F2FE:  ADDWF  x83,W
0F300:  MOVWF  x84
0F302:  MOVLW  0E
0F304:  MOVWF  FF6
0F306:  MOVLW  07
0F308:  MOVWF  FF7
0F30A:  MOVLW  00
0F30C:  MOVWF  FF8
0F30E:  MOVLW  0A
0F310:  MOVLB  A
0F312:  MOVWF  x0C
0F314:  MOVLB  0
0F316:  CALL   2026
0F31A:  MOVFF  284,2C5
0F31E:  MOVLW  18
0F320:  MOVLB  2
0F322:  MOVWF  xC6
0F324:  MOVLB  0
0F326:  CALL   F128
0F32A:  MOVLW  0D
0F32C:  BTFSS  FA6.6
0F32E:  GOTO   F32C
0F332:  MOVLB  E
0F334:  MOVWF  xF9
0F336:  MOVLW  0A
0F338:  MOVLB  0
0F33A:  BTFSS  FA6.6
0F33C:  GOTO   F33A
0F340:  MOVLB  E
0F342:  MOVWF  xF9
0F344:  MOVLB  0
0F346:  MOVLB  2
0F348:  INCF   x83,F
0F34A:  MOVLB  0
0F34C:  GOTO   F264
....................     }
.................... 
....................     // ここまで来たら失敗
....................     printf("CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0F350:  MOVLW  1E
0F352:  MOVWF  FF6
0F354:  MOVLW  07
0F356:  MOVWF  FF7
0F358:  MOVLW  00
0F35A:  MOVWF  FF8
0F35C:  MOVLW  1E
0F35E:  MOVLB  A
0F360:  MOVWF  x0C
0F362:  MOVLB  0
0F364:  CALL   2026
0F368:  MOVLW  05
0F36A:  MOVLB  2
0F36C:  MOVWF  xC5
0F36E:  MOVLW  18
0F370:  MOVWF  xC6
0F372:  MOVLB  0
0F374:  CALL   F128
0F378:  MOVLW  3E
0F37A:  MOVWF  FF6
0F37C:  MOVLW  07
0F37E:  MOVWF  FF7
0F380:  MOVLW  00
0F382:  MOVWF  FF8
0F384:  MOVLW  0B
0F386:  MOVLB  A
0F388:  MOVWF  x0C
0F38A:  MOVLB  0
0F38C:  CALL   2026
.................... 
....................     // 読み込み失敗時は初期化しておく
....................     smf_data_table_init();
0F390:  CALL   77D8
....................     read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
0F394:  MOVLB  2
0F396:  MOVF   x81,W
0F398:  MOVWF  01
0F39A:  MOVF   x82,W
0F39C:  MOVWF  03
0F39E:  MOVF   01,W
0F3A0:  MOVWF  x84
0F3A2:  MOVFF  03,285
0F3A6:  MOVFF  119,B37
0F3AA:  MOVFF  118,B36
0F3AE:  MOVFF  117,B35
0F3B2:  MOVFF  116,B34
0F3B6:  MOVLW  06
0F3B8:  MOVLB  B
0F3BA:  MOVWF  x3B
0F3BC:  MOVLW  AA
0F3BE:  MOVWF  x3A
0F3C0:  CLRF   x39
0F3C2:  CLRF   x38
0F3C4:  MOVFF  285,B3D
0F3C8:  MOVFF  284,B3C
0F3CC:  CLRF   x41
0F3CE:  CLRF   x40
0F3D0:  CLRF   x3F
0F3D2:  MOVLW  40
0F3D4:  MOVWF  x3E
0F3D6:  MOVLB  0
0F3D8:  CALL   2BDE
.................... 
....................     return;
0F3DC:  GOTO   10090 (RETURN)
.................... }
.................... 
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table)
0F3E0:  MOVLB  2
0F3E2:  BCF    x83.0
.................... {
....................     int1 crc_valid = 0;
....................     int8 readdata[PACKET_SIZE];
....................     smf_data_table->fields.crc = calc_crc8(smf_data_table->bytes, PACKET_SIZE - 1); // CRCを更新
0F3E4:  MOVLW  3F
0F3E6:  ADDWF  x81,W
0F3E8:  MOVWF  01
0F3EA:  MOVLW  00
0F3EC:  ADDWFC x82,W
0F3EE:  MOVWF  03
0F3F0:  MOVF   01,W
0F3F2:  MOVWF  xC5
0F3F4:  MOVFF  03,2C6
0F3F8:  MOVF   x81,W
0F3FA:  MOVWF  01
0F3FC:  MOVF   x82,W
0F3FE:  MOVWF  03
0F400:  MOVF   01,W
0F402:  MOVWF  xC7
0F404:  MOVFF  03,2C8
0F408:  MOVFF  2C8,B35
0F40C:  MOVFF  2C7,B34
0F410:  MOVLW  3F
0F412:  MOVLB  B
0F414:  MOVWF  x36
0F416:  MOVLB  0
0F418:  CALL   2DF2
0F41C:  MOVFF  2C6,FEA
0F420:  MOVFF  2C5,FE9
0F424:  MOVFF  01,FEF
.................... 
....................     for (int8 retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
0F428:  MOVLB  2
0F42A:  CLRF   xC4
0F42C:  MOVLB  0
0F42E:  MOVLB  2
0F430:  MOVF   xC4,W
0F432:  SUBLW  04
0F434:  BTFSC  FD8.0
0F436:  BRA    F43E
0F438:  MOVLB  0
0F43A:  GOTO   F50A
0F43E:  MOVLB  0
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
0F440:  MOVFF  119,A51
0F444:  MOVFF  118,A50
0F448:  MOVFF  117,A4F
0F44C:  MOVFF  116,A4E
0F450:  MOVLW  06
0F452:  MOVLB  A
0F454:  MOVWF  x55
0F456:  MOVLW  AA
0F458:  MOVWF  x54
0F45A:  CLRF   x53
0F45C:  CLRF   x52
0F45E:  MOVLB  0
0F460:  CALL   4AC2
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE); // ヘッダーを書き込み
0F464:  MOVLB  2
0F466:  MOVF   x81,W
0F468:  MOVWF  01
0F46A:  MOVF   x82,W
0F46C:  MOVWF  03
0F46E:  MOVF   01,W
0F470:  MOVWF  xC5
0F472:  MOVFF  03,2C6
0F476:  MOVFF  119,B37
0F47A:  MOVFF  118,B36
0F47E:  MOVFF  117,B35
0F482:  MOVFF  116,B34
0F486:  MOVLW  06
0F488:  MOVLB  B
0F48A:  MOVWF  x3B
0F48C:  MOVLW  AA
0F48E:  MOVWF  x3A
0F490:  CLRF   x39
0F492:  CLRF   x38
0F494:  MOVFF  2C6,B3D
0F498:  MOVFF  2C5,B3C
0F49C:  CLRF   x3F
0F49E:  MOVLW  40
0F4A0:  MOVWF  x3E
0F4A2:  MOVLB  0
0F4A4:  CALL   3C3E
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
0F4A8:  MOVFF  119,B37
0F4AC:  MOVFF  118,B36
0F4B0:  MOVFF  117,B35
0F4B4:  MOVFF  116,B34
0F4B8:  MOVLW  06
0F4BA:  MOVLB  B
0F4BC:  MOVWF  x3B
0F4BE:  MOVLW  AA
0F4C0:  MOVWF  x3A
0F4C2:  CLRF   x39
0F4C4:  CLRF   x38
0F4C6:  MOVLW  02
0F4C8:  MOVWF  x3D
0F4CA:  MOVLW  84
0F4CC:  MOVWF  x3C
0F4CE:  CLRF   x41
0F4D0:  CLRF   x40
0F4D2:  CLRF   x3F
0F4D4:  MOVLW  40
0F4D6:  MOVWF  x3E
0F4D8:  MOVLB  0
0F4DA:  CALL   2BDE
....................         if (is_crc_valid(readdata, PACKET_SIZE))
0F4DE:  MOVLW  02
0F4E0:  MOVLB  2
0F4E2:  MOVWF  xC6
0F4E4:  MOVLW  84
0F4E6:  MOVWF  xC5
0F4E8:  MOVLW  40
0F4EA:  MOVWF  xC7
0F4EC:  MOVLB  0
0F4EE:  CALL   F0DA
0F4F2:  MOVF   01,F
0F4F4:  BTFSC  FD8.2
0F4F6:  GOTO   F500
....................         {
....................             crc_valid = 1; // FIX            break;
0F4FA:  MOVLB  2
0F4FC:  BSF    x83.0
0F4FE:  MOVLB  0
....................         }
0F500:  MOVLB  2
0F502:  INCF   xC4,F
0F504:  MOVLB  0
0F506:  GOTO   F42E
....................     }
....................     if (!crc_valid)
0F50A:  MOVLB  2
0F50C:  BTFSS  x83.0
0F50E:  BRA    F516
0F510:  MOVLB  0
0F512:  GOTO   F558
0F516:  MOVLB  0
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
0F518:  MOVLW  4A
0F51A:  MOVWF  FF6
0F51C:  MOVLW  07
0F51E:  MOVWF  FF7
0F520:  MOVLW  00
0F522:  MOVWF  FF8
0F524:  MOVLW  25
0F526:  MOVLB  A
0F528:  MOVWF  x0C
0F52A:  MOVLB  0
0F52C:  CALL   2026
0F530:  MOVLW  05
0F532:  MOVLB  2
0F534:  MOVWF  xC5
0F536:  MOVLW  18
0F538:  MOVWF  xC6
0F53A:  MOVLB  0
0F53C:  CALL   F128
0F540:  MOVLW  71
0F542:  MOVWF  FF6
0F544:  MOVLW  07
0F546:  MOVWF  FF7
0F548:  MOVLW  00
0F54A:  MOVWF  FF8
0F54C:  MOVLW  0B
0F54E:  MOVLB  A
0F550:  MOVWF  x0C
0F552:  MOVLB  0
0F554:  CALL   2026
....................         // return; 
....................     }
0F558:  GOTO   10DA8 (RETURN)
.................... }
.................... 
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table)
.................... {
....................     fprintf(PC, "\r\n[SMF Counter Status]\r\n");
*
0EA36:  MOVLW  7E
0EA38:  MOVWF  FF6
0EA3A:  MOVLW  07
0EA3C:  MOVWF  FF7
0EA3E:  MOVLW  00
0EA40:  MOVWF  FF8
0EA42:  CALL   1FF0
....................     fprintf(PC, "\tPARTITION\tUSED\t\tRESERVE\r\n");
0EA46:  MOVLW  98
0EA48:  MOVWF  FF6
0EA4A:  MOVLW  07
0EA4C:  MOVWF  FF7
0EA4E:  MOVLW  00
0EA50:  MOVWF  FF8
0EA52:  CALL   1FF0
....................     fprintf(PC, "\t---------\t----------\t----------\r\n");
0EA56:  MOVLW  B4
0EA58:  MOVWF  FF6
0EA5A:  MOVLW  07
0EA5C:  MOVWF  FF7
0EA5E:  MOVLW  00
0EA60:  MOVWF  FF8
0EA62:  CALL   1FF0
....................     fprintf(PC, "\tPICLOG\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_PICLOG_DATA].used_size, smf_data_table->fields.headers[CIGS_PICLOG_DATA].reserved);
0EA66:  MOVLW  08
0EA68:  MOVLB  2
0EA6A:  ADDWF  x84,W
0EA6C:  MOVWF  FE9
0EA6E:  MOVLW  00
0EA70:  ADDWFC x85,W
0EA72:  MOVWF  FEA
0EA74:  MOVFF  FEF,286
0EA78:  MOVFF  FEC,287
0EA7C:  MOVFF  FEC,288
0EA80:  MOVFF  FEC,289
0EA84:  MOVF   FED,F
0EA86:  MOVF   FED,F
0EA88:  MOVF   FED,F
0EA8A:  MOVLW  0C
0EA8C:  ADDWF  x84,W
0EA8E:  MOVWF  FE9
0EA90:  MOVLW  00
0EA92:  ADDWFC x85,W
0EA94:  MOVWF  FEA
0EA96:  MOVFF  FEF,28A
0EA9A:  MOVFF  FEC,28B
0EA9E:  MOVFF  FEC,28C
0EAA2:  MOVFF  FEC,28D
0EAA6:  MOVF   FED,F
0EAA8:  MOVF   FED,F
0EAAA:  MOVF   FED,F
0EAAC:  MOVLW  D8
0EAAE:  MOVWF  FF6
0EAB0:  MOVLW  07
0EAB2:  MOVWF  FF7
0EAB4:  MOVLW  00
0EAB6:  MOVWF  FF8
0EAB8:  MOVLW  0B
0EABA:  MOVLB  A
0EABC:  MOVWF  x0C
0EABE:  MOVLB  0
0EAC0:  CALL   2026
0EAC4:  MOVFF  289,A26
0EAC8:  MOVLW  37
0EACA:  MOVLB  A
0EACC:  MOVWF  x27
0EACE:  MOVLB  0
0EAD0:  CALL   2232
0EAD4:  MOVFF  288,A26
0EAD8:  MOVLW  37
0EADA:  MOVLB  A
0EADC:  MOVWF  x27
0EADE:  MOVLB  0
0EAE0:  CALL   2232
0EAE4:  MOVFF  287,A26
0EAE8:  MOVLW  37
0EAEA:  MOVLB  A
0EAEC:  MOVWF  x27
0EAEE:  MOVLB  0
0EAF0:  CALL   2232
0EAF4:  MOVFF  286,A26
0EAF8:  MOVLW  37
0EAFA:  MOVLB  A
0EAFC:  MOVWF  x27
0EAFE:  MOVLB  0
0EB00:  CALL   2232
0EB04:  MOVLW  E8
0EB06:  MOVWF  FF6
0EB08:  MOVLW  07
0EB0A:  MOVWF  FF7
0EB0C:  MOVLW  00
0EB0E:  MOVWF  FF8
0EB10:  MOVLW  03
0EB12:  MOVLB  A
0EB14:  MOVWF  x0C
0EB16:  MOVLB  0
0EB18:  CALL   2026
0EB1C:  MOVFF  28D,A26
0EB20:  MOVLW  37
0EB22:  MOVLB  A
0EB24:  MOVWF  x27
0EB26:  MOVLB  0
0EB28:  CALL   2232
0EB2C:  MOVFF  28C,A26
0EB30:  MOVLW  37
0EB32:  MOVLB  A
0EB34:  MOVWF  x27
0EB36:  MOVLB  0
0EB38:  CALL   2232
0EB3C:  MOVFF  28B,A26
0EB40:  MOVLW  37
0EB42:  MOVLB  A
0EB44:  MOVWF  x27
0EB46:  MOVLB  0
0EB48:  CALL   2232
0EB4C:  MOVFF  28A,A26
0EB50:  MOVLW  37
0EB52:  MOVLB  A
0EB54:  MOVWF  x27
0EB56:  MOVLB  0
0EB58:  CALL   2232
0EB5C:  MOVLW  0D
0EB5E:  BTFSS  FA6.6
0EB60:  GOTO   EB5E
0EB64:  MOVLB  E
0EB66:  MOVWF  xF9
0EB68:  MOVLW  0A
0EB6A:  MOVLB  0
0EB6C:  BTFSS  FA6.6
0EB6E:  GOTO   EB6C
0EB72:  MOVLB  E
0EB74:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_ENVIRO_DATA].used_size, smf_data_table->fields.headers[CIGS_ENVIRO_DATA].reserved);
0EB76:  MOVLW  10
0EB78:  MOVLB  2
0EB7A:  ADDWF  x84,W
0EB7C:  MOVWF  FE9
0EB7E:  MOVLW  00
0EB80:  ADDWFC x85,W
0EB82:  MOVWF  FEA
0EB84:  MOVFF  FEF,286
0EB88:  MOVFF  FEC,287
0EB8C:  MOVFF  FEC,288
0EB90:  MOVFF  FEC,289
0EB94:  MOVF   FED,F
0EB96:  MOVF   FED,F
0EB98:  MOVF   FED,F
0EB9A:  MOVLW  14
0EB9C:  ADDWF  x84,W
0EB9E:  MOVWF  FE9
0EBA0:  MOVLW  00
0EBA2:  ADDWFC x85,W
0EBA4:  MOVWF  FEA
0EBA6:  MOVFF  FEF,28A
0EBAA:  MOVFF  FEC,28B
0EBAE:  MOVFF  FEC,28C
0EBB2:  MOVFF  FEC,28D
0EBB6:  MOVF   FED,F
0EBB8:  MOVF   FED,F
0EBBA:  MOVF   FED,F
0EBBC:  MOVLW  F4
0EBBE:  MOVWF  FF6
0EBC0:  MOVLW  07
0EBC2:  MOVWF  FF7
0EBC4:  MOVLW  00
0EBC6:  MOVWF  FF8
0EBC8:  MOVLW  0B
0EBCA:  MOVLB  A
0EBCC:  MOVWF  x0C
0EBCE:  MOVLB  0
0EBD0:  CALL   2026
0EBD4:  MOVFF  289,A26
0EBD8:  MOVLW  37
0EBDA:  MOVLB  A
0EBDC:  MOVWF  x27
0EBDE:  MOVLB  0
0EBE0:  CALL   2232
0EBE4:  MOVFF  288,A26
0EBE8:  MOVLW  37
0EBEA:  MOVLB  A
0EBEC:  MOVWF  x27
0EBEE:  MOVLB  0
0EBF0:  CALL   2232
0EBF4:  MOVFF  287,A26
0EBF8:  MOVLW  37
0EBFA:  MOVLB  A
0EBFC:  MOVWF  x27
0EBFE:  MOVLB  0
0EC00:  CALL   2232
0EC04:  MOVFF  286,A26
0EC08:  MOVLW  37
0EC0A:  MOVLB  A
0EC0C:  MOVWF  x27
0EC0E:  MOVLB  0
0EC10:  CALL   2232
0EC14:  MOVLW  04
0EC16:  MOVWF  FF6
0EC18:  MOVLW  08
0EC1A:  MOVWF  FF7
0EC1C:  MOVLW  00
0EC1E:  MOVWF  FF8
0EC20:  MOVLW  03
0EC22:  MOVLB  A
0EC24:  MOVWF  x0C
0EC26:  MOVLB  0
0EC28:  CALL   2026
0EC2C:  MOVFF  28D,A26
0EC30:  MOVLW  37
0EC32:  MOVLB  A
0EC34:  MOVWF  x27
0EC36:  MOVLB  0
0EC38:  CALL   2232
0EC3C:  MOVFF  28C,A26
0EC40:  MOVLW  37
0EC42:  MOVLB  A
0EC44:  MOVWF  x27
0EC46:  MOVLB  0
0EC48:  CALL   2232
0EC4C:  MOVFF  28B,A26
0EC50:  MOVLW  37
0EC52:  MOVLB  A
0EC54:  MOVWF  x27
0EC56:  MOVLB  0
0EC58:  CALL   2232
0EC5C:  MOVFF  28A,A26
0EC60:  MOVLW  37
0EC62:  MOVLB  A
0EC64:  MOVWF  x27
0EC66:  MOVLB  0
0EC68:  CALL   2232
0EC6C:  MOVLW  0D
0EC6E:  BTFSS  FA6.6
0EC70:  GOTO   EC6E
0EC74:  MOVLB  E
0EC76:  MOVWF  xF9
0EC78:  MOVLW  0A
0EC7A:  MOVLB  0
0EC7C:  BTFSS  FA6.6
0EC7E:  GOTO   EC7C
0EC82:  MOVLB  E
0EC84:  MOVWF  xF9
....................     fprintf(PC, "\tIV1_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV1_HEADER].reserved);
0EC86:  MOVLW  18
0EC88:  MOVLB  2
0EC8A:  ADDWF  x84,W
0EC8C:  MOVWF  FE9
0EC8E:  MOVLW  00
0EC90:  ADDWFC x85,W
0EC92:  MOVWF  FEA
0EC94:  MOVFF  FEF,286
0EC98:  MOVFF  FEC,287
0EC9C:  MOVFF  FEC,288
0ECA0:  MOVFF  FEC,289
0ECA4:  MOVF   FED,F
0ECA6:  MOVF   FED,F
0ECA8:  MOVF   FED,F
0ECAA:  MOVLW  1C
0ECAC:  ADDWF  x84,W
0ECAE:  MOVWF  FE9
0ECB0:  MOVLW  00
0ECB2:  ADDWFC x85,W
0ECB4:  MOVWF  FEA
0ECB6:  MOVFF  FEF,28A
0ECBA:  MOVFF  FEC,28B
0ECBE:  MOVFF  FEC,28C
0ECC2:  MOVFF  FEC,28D
0ECC6:  MOVF   FED,F
0ECC8:  MOVF   FED,F
0ECCA:  MOVF   FED,F
0ECCC:  MOVLW  10
0ECCE:  MOVWF  FF6
0ECD0:  MOVLW  08
0ECD2:  MOVWF  FF7
0ECD4:  MOVLW  00
0ECD6:  MOVWF  FF8
0ECD8:  MOVLW  0E
0ECDA:  MOVLB  A
0ECDC:  MOVWF  x0C
0ECDE:  MOVLB  0
0ECE0:  CALL   2026
0ECE4:  MOVFF  289,A26
0ECE8:  MOVLW  37
0ECEA:  MOVLB  A
0ECEC:  MOVWF  x27
0ECEE:  MOVLB  0
0ECF0:  CALL   2232
0ECF4:  MOVFF  288,A26
0ECF8:  MOVLW  37
0ECFA:  MOVLB  A
0ECFC:  MOVWF  x27
0ECFE:  MOVLB  0
0ED00:  CALL   2232
0ED04:  MOVFF  287,A26
0ED08:  MOVLW  37
0ED0A:  MOVLB  A
0ED0C:  MOVWF  x27
0ED0E:  MOVLB  0
0ED10:  CALL   2232
0ED14:  MOVFF  286,A26
0ED18:  MOVLW  37
0ED1A:  MOVLB  A
0ED1C:  MOVWF  x27
0ED1E:  MOVLB  0
0ED20:  CALL   2232
0ED24:  MOVLW  23
0ED26:  MOVWF  FF6
0ED28:  MOVLW  08
0ED2A:  MOVWF  FF7
0ED2C:  MOVLW  00
0ED2E:  MOVWF  FF8
0ED30:  MOVLW  03
0ED32:  MOVLB  A
0ED34:  MOVWF  x0C
0ED36:  MOVLB  0
0ED38:  CALL   2026
0ED3C:  MOVFF  28D,A26
0ED40:  MOVLW  37
0ED42:  MOVLB  A
0ED44:  MOVWF  x27
0ED46:  MOVLB  0
0ED48:  CALL   2232
0ED4C:  MOVFF  28C,A26
0ED50:  MOVLW  37
0ED52:  MOVLB  A
0ED54:  MOVWF  x27
0ED56:  MOVLB  0
0ED58:  CALL   2232
0ED5C:  MOVFF  28B,A26
0ED60:  MOVLW  37
0ED62:  MOVLB  A
0ED64:  MOVWF  x27
0ED66:  MOVLB  0
0ED68:  CALL   2232
0ED6C:  MOVFF  28A,A26
0ED70:  MOVLW  37
0ED72:  MOVLB  A
0ED74:  MOVWF  x27
0ED76:  MOVLB  0
0ED78:  CALL   2232
0ED7C:  MOVLW  0D
0ED7E:  BTFSS  FA6.6
0ED80:  GOTO   ED7E
0ED84:  MOVLB  E
0ED86:  MOVWF  xF9
0ED88:  MOVLW  0A
0ED8A:  MOVLB  0
0ED8C:  BTFSS  FA6.6
0ED8E:  GOTO   ED8C
0ED92:  MOVLB  E
0ED94:  MOVWF  xF9
....................     fprintf(PC, "\tIV1_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV1_DATA].used_size, smf_data_table->fields.headers[CIGS_IV1_DATA].reserved);
0ED96:  MOVLW  20
0ED98:  MOVLB  2
0ED9A:  ADDWF  x84,W
0ED9C:  MOVWF  FE9
0ED9E:  MOVLW  00
0EDA0:  ADDWFC x85,W
0EDA2:  MOVWF  FEA
0EDA4:  MOVFF  FEF,286
0EDA8:  MOVFF  FEC,287
0EDAC:  MOVFF  FEC,288
0EDB0:  MOVFF  FEC,289
0EDB4:  MOVF   FED,F
0EDB6:  MOVF   FED,F
0EDB8:  MOVF   FED,F
0EDBA:  MOVLW  24
0EDBC:  ADDWF  x84,W
0EDBE:  MOVWF  FE9
0EDC0:  MOVLW  00
0EDC2:  ADDWFC x85,W
0EDC4:  MOVWF  FEA
0EDC6:  MOVFF  FEF,28A
0EDCA:  MOVFF  FEC,28B
0EDCE:  MOVFF  FEC,28C
0EDD2:  MOVFF  FEC,28D
0EDD6:  MOVF   FED,F
0EDD8:  MOVF   FED,F
0EDDA:  MOVF   FED,F
0EDDC:  MOVLW  2E
0EDDE:  MOVWF  FF6
0EDE0:  MOVLW  08
0EDE2:  MOVWF  FF7
0EDE4:  MOVLW  00
0EDE6:  MOVWF  FF8
0EDE8:  MOVLW  0C
0EDEA:  MOVLB  A
0EDEC:  MOVWF  x0C
0EDEE:  MOVLB  0
0EDF0:  CALL   2026
0EDF4:  MOVFF  289,A26
0EDF8:  MOVLW  37
0EDFA:  MOVLB  A
0EDFC:  MOVWF  x27
0EDFE:  MOVLB  0
0EE00:  CALL   2232
0EE04:  MOVFF  288,A26
0EE08:  MOVLW  37
0EE0A:  MOVLB  A
0EE0C:  MOVWF  x27
0EE0E:  MOVLB  0
0EE10:  CALL   2232
0EE14:  MOVFF  287,A26
0EE18:  MOVLW  37
0EE1A:  MOVLB  A
0EE1C:  MOVWF  x27
0EE1E:  MOVLB  0
0EE20:  CALL   2232
0EE24:  MOVFF  286,A26
0EE28:  MOVLW  37
0EE2A:  MOVLB  A
0EE2C:  MOVWF  x27
0EE2E:  MOVLB  0
0EE30:  CALL   2232
0EE34:  MOVLW  3F
0EE36:  MOVWF  FF6
0EE38:  MOVLW  08
0EE3A:  MOVWF  FF7
0EE3C:  MOVLW  00
0EE3E:  MOVWF  FF8
0EE40:  MOVLW  03
0EE42:  MOVLB  A
0EE44:  MOVWF  x0C
0EE46:  MOVLB  0
0EE48:  CALL   2026
0EE4C:  MOVFF  28D,A26
0EE50:  MOVLW  37
0EE52:  MOVLB  A
0EE54:  MOVWF  x27
0EE56:  MOVLB  0
0EE58:  CALL   2232
0EE5C:  MOVFF  28C,A26
0EE60:  MOVLW  37
0EE62:  MOVLB  A
0EE64:  MOVWF  x27
0EE66:  MOVLB  0
0EE68:  CALL   2232
0EE6C:  MOVFF  28B,A26
0EE70:  MOVLW  37
0EE72:  MOVLB  A
0EE74:  MOVWF  x27
0EE76:  MOVLB  0
0EE78:  CALL   2232
0EE7C:  MOVFF  28A,A26
0EE80:  MOVLW  37
0EE82:  MOVLB  A
0EE84:  MOVWF  x27
0EE86:  MOVLB  0
0EE88:  CALL   2232
0EE8C:  MOVLW  0D
0EE8E:  BTFSS  FA6.6
0EE90:  GOTO   EE8E
0EE94:  MOVLB  E
0EE96:  MOVWF  xF9
0EE98:  MOVLW  0A
0EE9A:  MOVLB  0
0EE9C:  BTFSS  FA6.6
0EE9E:  GOTO   EE9C
0EEA2:  MOVLB  E
0EEA4:  MOVWF  xF9
....................     fprintf(PC, "\tIV2_HEADER\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_HEADER].used_size, smf_data_table->fields.headers[CIGS_IV2_HEADER].reserved);
0EEA6:  MOVLW  28
0EEA8:  MOVLB  2
0EEAA:  ADDWF  x84,W
0EEAC:  MOVWF  FE9
0EEAE:  MOVLW  00
0EEB0:  ADDWFC x85,W
0EEB2:  MOVWF  FEA
0EEB4:  MOVFF  FEF,286
0EEB8:  MOVFF  FEC,287
0EEBC:  MOVFF  FEC,288
0EEC0:  MOVFF  FEC,289
0EEC4:  MOVF   FED,F
0EEC6:  MOVF   FED,F
0EEC8:  MOVF   FED,F
0EECA:  MOVLW  2C
0EECC:  ADDWF  x84,W
0EECE:  MOVWF  FE9
0EED0:  MOVLW  00
0EED2:  ADDWFC x85,W
0EED4:  MOVWF  FEA
0EED6:  MOVFF  FEF,28A
0EEDA:  MOVFF  FEC,28B
0EEDE:  MOVFF  FEC,28C
0EEE2:  MOVFF  FEC,28D
0EEE6:  MOVF   FED,F
0EEE8:  MOVF   FED,F
0EEEA:  MOVF   FED,F
0EEEC:  MOVLW  4A
0EEEE:  MOVWF  FF6
0EEF0:  MOVLW  08
0EEF2:  MOVWF  FF7
0EEF4:  MOVLW  00
0EEF6:  MOVWF  FF8
0EEF8:  MOVLW  0E
0EEFA:  MOVLB  A
0EEFC:  MOVWF  x0C
0EEFE:  MOVLB  0
0EF00:  CALL   2026
0EF04:  MOVFF  289,A26
0EF08:  MOVLW  37
0EF0A:  MOVLB  A
0EF0C:  MOVWF  x27
0EF0E:  MOVLB  0
0EF10:  CALL   2232
0EF14:  MOVFF  288,A26
0EF18:  MOVLW  37
0EF1A:  MOVLB  A
0EF1C:  MOVWF  x27
0EF1E:  MOVLB  0
0EF20:  CALL   2232
0EF24:  MOVFF  287,A26
0EF28:  MOVLW  37
0EF2A:  MOVLB  A
0EF2C:  MOVWF  x27
0EF2E:  MOVLB  0
0EF30:  CALL   2232
0EF34:  MOVFF  286,A26
0EF38:  MOVLW  37
0EF3A:  MOVLB  A
0EF3C:  MOVWF  x27
0EF3E:  MOVLB  0
0EF40:  CALL   2232
0EF44:  MOVLW  5D
0EF46:  MOVWF  FF6
0EF48:  MOVLW  08
0EF4A:  MOVWF  FF7
0EF4C:  MOVLW  00
0EF4E:  MOVWF  FF8
0EF50:  MOVLW  03
0EF52:  MOVLB  A
0EF54:  MOVWF  x0C
0EF56:  MOVLB  0
0EF58:  CALL   2026
0EF5C:  MOVFF  28D,A26
0EF60:  MOVLW  37
0EF62:  MOVLB  A
0EF64:  MOVWF  x27
0EF66:  MOVLB  0
0EF68:  CALL   2232
0EF6C:  MOVFF  28C,A26
0EF70:  MOVLW  37
0EF72:  MOVLB  A
0EF74:  MOVWF  x27
0EF76:  MOVLB  0
0EF78:  CALL   2232
0EF7C:  MOVFF  28B,A26
0EF80:  MOVLW  37
0EF82:  MOVLB  A
0EF84:  MOVWF  x27
0EF86:  MOVLB  0
0EF88:  CALL   2232
0EF8C:  MOVFF  28A,A26
0EF90:  MOVLW  37
0EF92:  MOVLB  A
0EF94:  MOVWF  x27
0EF96:  MOVLB  0
0EF98:  CALL   2232
0EF9C:  MOVLW  0D
0EF9E:  BTFSS  FA6.6
0EFA0:  GOTO   EF9E
0EFA4:  MOVLB  E
0EFA6:  MOVWF  xF9
0EFA8:  MOVLW  0A
0EFAA:  MOVLB  0
0EFAC:  BTFSS  FA6.6
0EFAE:  GOTO   EFAC
0EFB2:  MOVLB  E
0EFB4:  MOVWF  xF9
....................     fprintf(PC, "\tIV2_DATA\t0x%08LX\t0x%08LX\r\n", smf_data_table->fields.headers[CIGS_IV2_DATA].used_size, smf_data_table->fields.headers[CIGS_IV2_DATA].reserved);
0EFB6:  MOVLW  30
0EFB8:  MOVLB  2
0EFBA:  ADDWF  x84,W
0EFBC:  MOVWF  FE9
0EFBE:  MOVLW  00
0EFC0:  ADDWFC x85,W
0EFC2:  MOVWF  FEA
0EFC4:  MOVFF  FEF,286
0EFC8:  MOVFF  FEC,287
0EFCC:  MOVFF  FEC,288
0EFD0:  MOVFF  FEC,289
0EFD4:  MOVF   FED,F
0EFD6:  MOVF   FED,F
0EFD8:  MOVF   FED,F
0EFDA:  MOVLW  34
0EFDC:  ADDWF  x84,W
0EFDE:  MOVWF  FE9
0EFE0:  MOVLW  00
0EFE2:  ADDWFC x85,W
0EFE4:  MOVWF  FEA
0EFE6:  MOVFF  FEF,28A
0EFEA:  MOVFF  FEC,28B
0EFEE:  MOVFF  FEC,28C
0EFF2:  MOVFF  FEC,28D
0EFF6:  MOVF   FED,F
0EFF8:  MOVF   FED,F
0EFFA:  MOVF   FED,F
0EFFC:  MOVLW  68
0EFFE:  MOVWF  FF6
0F000:  MOVLW  08
0F002:  MOVWF  FF7
0F004:  MOVLW  00
0F006:  MOVWF  FF8
0F008:  MOVLW  0C
0F00A:  MOVLB  A
0F00C:  MOVWF  x0C
0F00E:  MOVLB  0
0F010:  CALL   2026
0F014:  MOVFF  289,A26
0F018:  MOVLW  37
0F01A:  MOVLB  A
0F01C:  MOVWF  x27
0F01E:  MOVLB  0
0F020:  CALL   2232
0F024:  MOVFF  288,A26
0F028:  MOVLW  37
0F02A:  MOVLB  A
0F02C:  MOVWF  x27
0F02E:  MOVLB  0
0F030:  CALL   2232
0F034:  MOVFF  287,A26
0F038:  MOVLW  37
0F03A:  MOVLB  A
0F03C:  MOVWF  x27
0F03E:  MOVLB  0
0F040:  CALL   2232
0F044:  MOVFF  286,A26
0F048:  MOVLW  37
0F04A:  MOVLB  A
0F04C:  MOVWF  x27
0F04E:  MOVLB  0
0F050:  CALL   2232
0F054:  MOVLW  79
0F056:  MOVWF  FF6
0F058:  MOVLW  08
0F05A:  MOVWF  FF7
0F05C:  MOVLW  00
0F05E:  MOVWF  FF8
0F060:  MOVLW  03
0F062:  MOVLB  A
0F064:  MOVWF  x0C
0F066:  MOVLB  0
0F068:  CALL   2026
0F06C:  MOVFF  28D,A26
0F070:  MOVLW  37
0F072:  MOVLB  A
0F074:  MOVWF  x27
0F076:  MOVLB  0
0F078:  CALL   2232
0F07C:  MOVFF  28C,A26
0F080:  MOVLW  37
0F082:  MOVLB  A
0F084:  MOVWF  x27
0F086:  MOVLB  0
0F088:  CALL   2232
0F08C:  MOVFF  28B,A26
0F090:  MOVLW  37
0F092:  MOVLB  A
0F094:  MOVWF  x27
0F096:  MOVLB  0
0F098:  CALL   2232
0F09C:  MOVFF  28A,A26
0F0A0:  MOVLW  37
0F0A2:  MOVLB  A
0F0A4:  MOVWF  x27
0F0A6:  MOVLB  0
0F0A8:  CALL   2232
0F0AC:  MOVLW  0D
0F0AE:  BTFSS  FA6.6
0F0B0:  GOTO   F0AE
0F0B4:  MOVLB  E
0F0B6:  MOVWF  xF9
0F0B8:  MOVLW  0A
0F0BA:  MOVLB  0
0F0BC:  BTFSS  FA6.6
0F0BE:  GOTO   F0BC
0F0C2:  MOVLB  E
0F0C4:  MOVWF  xF9
....................     fprintf(PC, "\t==========================================\r\n\r\n");
0F0C6:  MOVLW  84
0F0C8:  MOVWF  FF6
0F0CA:  MOVLW  08
0F0CC:  MOVWF  FF7
0F0CE:  MOVLW  00
0F0D0:  MOVWF  FF8
0F0D2:  MOVLB  0
0F0D4:  CALL   1FF0
0F0D8:  RETURN 0
.................... }
.................... 
.................... void smf_write(FlashOperationStruct *smf_queue_ptr)
.................... {
....................     fprintf(PC, "\r\n_______________________________\r\n");
*
10000:  MOVLW  B4
10002:  MOVWF  FF6
10004:  MOVLW  08
10006:  MOVWF  FF7
10008:  MOVLW  00
1000A:  MOVWF  FF8
1000C:  CALL   1FF0
....................     fprintf(PC, "_________Start copy_data_________\r\n");
10010:  MOVLW  D8
10012:  MOVWF  FF6
10014:  MOVLW  08
10016:  MOVWF  FF7
10018:  MOVLW  00
1001A:  MOVWF  FF8
1001C:  CALL   1FF0
....................     
....................     // 接続確認
....................     if (!is_connect(mis_fm))
10020:  MOVFF  115,284
10024:  MOVFF  114,283
10028:  MOVFF  113,282
1002C:  MOVFF  112,281
10030:  CALL   2AF2
10034:  MOVF   01,F
10036:  BTFSS  FD8.2
10038:  GOTO   10050
....................     {
....................         fprintf(PC, "Error: MIS FM is not connected\r\n");
1003C:  MOVLW  FC
1003E:  MOVWF  FF6
10040:  MOVLW  08
10042:  MOVWF  FF7
10044:  MOVLW  00
10046:  MOVWF  FF8
10048:  CALL   1FF0
....................         return;
1004C:  GOTO   10DCC
....................     }    
....................     if (!is_connect(smf))
10050:  MOVFF  119,284
10054:  MOVFF  118,283
10058:  MOVFF  117,282
1005C:  MOVFF  116,281
10060:  CALL   2AF2
10064:  MOVF   01,F
10066:  BTFSS  FD8.2
10068:  GOTO   10080
....................     {
....................         fprintf(PC, "Error: SMF is not connected\r\n");
1006C:  MOVLW  1E
1006E:  MOVWF  FF6
10070:  MOVLW  09
10072:  MOVWF  FF7
10074:  MOVLW  00
10076:  MOVWF  FF8
10078:  CALL   1FF0
....................         return;
1007C:  GOTO   10DCC
....................     }    
.................... 
.................... 
....................     smf_data_table_t smf_data_table;
....................     read_smf_header(&smf_data_table);
10080:  MOVLW  01
10082:  MOVLB  2
10084:  MOVWF  x82
10086:  MOVLW  E0
10088:  MOVWF  x81
1008A:  MOVLB  0
1008C:  GOTO   F25E
.................... 
.................... 
....................     unsigned int32 misf_write_src;
....................     unsigned int32 misf_write_size;
.................... 
....................     //アドレスと自動更新
....................     if (smf_queue_ptr->source_type == SOURCE_MISF_UNCOPIED )
10090:  MOVLW  03
10092:  MOVLB  1
10094:  ADDWF  xDE,W
10096:  MOVWF  01
10098:  MOVLW  00
1009A:  ADDWFC xDF,W
1009C:  MOVWF  03
1009E:  MOVF   01,W
100A0:  MOVWF  FE9
100A2:  MOVFF  03,FEA
100A6:  BTFSS  FEF.0
100A8:  BRA    100B0
100AA:  MOVLB  0
100AC:  GOTO   101E6
100B0:  MOVLB  0
....................     {
....................         misf_write_src = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start + misf_counter_table[smf_queue_ptr->mission_id].used_counter - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
100B2:  MOVLB  1
100B4:  MOVF   xDE,W
100B6:  MOVWF  FE9
100B8:  MOVF   xDF,W
100BA:  MOVWF  FEA
100BC:  MOVF   FEF,W
100BE:  MULLW  0C
100C0:  MOVF   FF3,W
100C2:  MOVLB  2
100C4:  CLRF   x82
100C6:  MOVWF  x81
100C8:  MOVFF  282,03
100CC:  MOVF   x81,W
100CE:  MOVLB  0
100D0:  CALL   014E
100D4:  MOVWF  00
100D6:  TBLRD*+
100D8:  MOVFF  FF5,01
100DC:  TBLRD*+
100DE:  MOVFF  FF5,02
100E2:  TBLRD*+
100E4:  MOVFF  FF5,03
100E8:  MOVFF  03,286
100EC:  MOVFF  02,285
100F0:  MOVFF  01,284
100F4:  MOVFF  00,283
100F8:  MOVLB  1
100FA:  MOVF   xDE,W
100FC:  MOVWF  FE9
100FE:  MOVF   xDF,W
10100:  MOVWF  FEA
10102:  MOVF   FEF,W
10104:  MULLW  0A
10106:  MOVF   FF3,W
10108:  MOVLB  2
1010A:  CLRF   x88
1010C:  MOVWF  x87
1010E:  MOVLW  22
10110:  ADDWF  x87,W
10112:  MOVWF  FE9
10114:  MOVLW  01
10116:  ADDWFC x88,W
10118:  MOVWF  FEA
1011A:  MOVFF  FEF,00
1011E:  MOVFF  FEC,01
10122:  MOVFF  FEC,02
10126:  MOVFF  FEC,03
1012A:  MOVF   FED,F
1012C:  MOVF   FED,F
1012E:  MOVF   FED,F
10130:  MOVF   00,W
10132:  ADDWF  x83,F
10134:  MOVF   01,W
10136:  ADDWFC x84,F
10138:  MOVF   02,W
1013A:  ADDWFC x85,F
1013C:  MOVF   03,W
1013E:  ADDWFC x86,F
10140:  MOVLB  1
10142:  MOVF   xDE,W
10144:  MOVWF  FE9
10146:  MOVF   xDF,W
10148:  MOVWF  FEA
1014A:  MOVF   FEF,W
1014C:  MULLW  0A
1014E:  MOVF   FF3,W
10150:  MOVLB  2
10152:  CLRF   x8A
10154:  MOVWF  x89
10156:  MOVLW  04
10158:  ADDWF  x89,W
1015A:  MOVWF  01
1015C:  MOVLW  00
1015E:  ADDWFC x8A,W
10160:  MOVWF  03
10162:  MOVF   01,W
10164:  ADDLW  22
10166:  MOVWF  FE9
10168:  MOVLW  01
1016A:  ADDWFC 03,W
1016C:  MOVWF  FEA
1016E:  MOVFF  FEF,00
10172:  MOVFF  FEC,01
10176:  MOVFF  FEC,02
1017A:  MOVFF  FEC,03
1017E:  MOVF   FED,F
10180:  MOVF   FED,F
10182:  MOVF   FED,F
10184:  MOVF   00,W
10186:  SUBWF  x83,W
10188:  MOVWF  x20
1018A:  MOVF   01,W
1018C:  SUBWFB x84,W
1018E:  MOVWF  x21
10190:  MOVF   02,W
10192:  SUBWFB x85,W
10194:  MOVWF  x22
10196:  MOVF   03,W
10198:  SUBWFB x86,W
1019A:  MOVWF  x23
....................         misf_write_size = misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
1019C:  MOVLB  1
1019E:  MOVF   xDE,W
101A0:  MOVWF  FE9
101A2:  MOVF   xDF,W
101A4:  MOVWF  FEA
101A6:  MOVF   FEF,W
101A8:  MULLW  0A
101AA:  MOVF   FF3,W
101AC:  MOVLB  2
101AE:  CLRF   x82
101B0:  MOVWF  x81
101B2:  MOVLW  04
101B4:  ADDWF  x81,W
101B6:  MOVWF  01
101B8:  MOVLW  00
101BA:  ADDWFC x82,W
101BC:  MOVWF  03
101BE:  MOVF   01,W
101C0:  ADDLW  22
101C2:  MOVWF  FE9
101C4:  MOVLW  01
101C6:  ADDWFC 03,W
101C8:  MOVWF  FEA
101CA:  MOVFF  FEF,224
101CE:  MOVFF  FEC,225
101D2:  MOVFF  FEC,226
101D6:  MOVFF  FEC,227
101DA:  MOVF   FED,F
101DC:  MOVF   FED,F
101DE:  MOVF   FED,F
101E0:  MOVLB  0
....................     }else if(smf_queue_ptr->source_type == SOURCE_MISF_MANUAL)
101E2:  GOTO   10250
101E6:  MOVLW  03
101E8:  MOVLB  1
101EA:  ADDWF  xDE,W
101EC:  MOVWF  01
101EE:  MOVLW  00
101F0:  ADDWFC xDF,W
101F2:  MOVWF  03
101F4:  MOVF   01,W
101F6:  MOVWF  FE9
101F8:  MOVFF  03,FEA
101FC:  BTFSC  FEF.0
101FE:  BRA    10206
10200:  MOVLB  0
10202:  GOTO   10250
10206:  MOVLB  0
....................     {
....................         misf_write_src = smf_queue_ptr->misf_start_addr;
10208:  MOVLW  04
1020A:  MOVLB  1
1020C:  ADDWF  xDE,W
1020E:  MOVWF  FE9
10210:  MOVLW  00
10212:  ADDWFC xDF,W
10214:  MOVWF  FEA
10216:  MOVFF  FEF,220
1021A:  MOVFF  FEC,221
1021E:  MOVFF  FEC,222
10222:  MOVFF  FEC,223
10226:  MOVF   FED,F
10228:  MOVF   FED,F
1022A:  MOVF   FED,F
....................         misf_write_size = smf_queue_ptr->misf_size;
1022C:  MOVLW  08
1022E:  ADDWF  xDE,W
10230:  MOVWF  FE9
10232:  MOVLW  00
10234:  ADDWFC xDF,W
10236:  MOVWF  FEA
10238:  MOVFF  FEF,224
1023C:  MOVFF  FEC,225
10240:  MOVFF  FEC,226
10244:  MOVFF  FEC,227
10248:  MOVF   FED,F
1024A:  MOVF   FED,F
1024C:  MOVF   FED,F
1024E:  MOVLB  0
....................     }
.................... 
....................     unsigned int32 smf_address_start = SMF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 smf_address_end   = SMF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
....................     unsigned int32 misf_address_start = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].start;
....................     unsigned int32 misf_address_end   = MISF_ADDRESS_TABLE[smf_queue_ptr->mission_id].end;
10250:  MOVLB  1
10252:  MOVF   xDE,W
10254:  MOVWF  FE9
10256:  MOVF   xDF,W
10258:  MOVWF  FEA
1025A:  MOVF   FEF,W
1025C:  MULLW  0C
1025E:  MOVF   FF3,W
10260:  MOVLB  2
10262:  CLRF   x82
10264:  MOVWF  x81
10266:  MOVFF  282,03
1026A:  MOVF   x81,W
1026C:  MOVLB  0
1026E:  CALL   00E6
10272:  MOVWF  00
10274:  TBLRD*+
10276:  MOVFF  FF5,01
1027A:  TBLRD*+
1027C:  MOVFF  FF5,02
10280:  TBLRD*+
10282:  MOVFF  FF5,03
10286:  MOVFF  03,22B
1028A:  MOVFF  02,22A
1028E:  MOVFF  01,229
10292:  MOVFF  00,228
10296:  MOVLB  1
10298:  MOVF   xDE,W
1029A:  MOVWF  FE9
1029C:  MOVF   xDF,W
1029E:  MOVWF  FEA
102A0:  MOVF   FEF,W
102A2:  MULLW  0C
102A4:  MOVF   FF3,W
102A6:  MOVLB  2
102A8:  CLRF   x84
102AA:  MOVWF  x83
102AC:  MOVLW  04
102AE:  ADDWF  x83,W
102B0:  MOVWF  01
102B2:  MOVLW  00
102B4:  ADDWFC x84,W
102B6:  MOVWF  03
102B8:  MOVF   01,W
102BA:  MOVLB  0
102BC:  CALL   00E6
102C0:  MOVWF  00
102C2:  TBLRD*+
102C4:  MOVFF  FF5,01
102C8:  TBLRD*+
102CA:  MOVFF  FF5,02
102CE:  TBLRD*+
102D0:  MOVFF  FF5,03
102D4:  MOVFF  03,22F
102D8:  MOVFF  02,22E
102DC:  MOVFF  01,22D
102E0:  MOVFF  00,22C
102E4:  MOVLB  1
102E6:  MOVF   xDE,W
102E8:  MOVWF  FE9
102EA:  MOVF   xDF,W
102EC:  MOVWF  FEA
102EE:  MOVF   FEF,W
102F0:  MULLW  0C
102F2:  MOVF   FF3,W
102F4:  MOVLB  2
102F6:  CLRF   x84
102F8:  MOVWF  x83
102FA:  MOVFF  284,03
102FE:  MOVF   x83,W
10300:  MOVLB  0
10302:  CALL   014E
10306:  MOVWF  00
10308:  TBLRD*+
1030A:  MOVFF  FF5,01
1030E:  TBLRD*+
10310:  MOVFF  FF5,02
10314:  TBLRD*+
10316:  MOVFF  FF5,03
1031A:  MOVFF  03,233
1031E:  MOVFF  02,232
10322:  MOVFF  01,231
10326:  MOVFF  00,230
1032A:  MOVLB  1
1032C:  MOVF   xDE,W
1032E:  MOVWF  FE9
10330:  MOVF   xDF,W
10332:  MOVWF  FEA
10334:  MOVF   FEF,W
10336:  MULLW  0C
10338:  MOVF   FF3,W
1033A:  MOVLB  2
1033C:  CLRF   x86
1033E:  MOVWF  x85
10340:  MOVLW  04
10342:  ADDWF  x85,W
10344:  MOVWF  01
10346:  MOVLW  00
10348:  ADDWFC x86,W
1034A:  MOVWF  03
1034C:  MOVF   01,W
1034E:  MOVLB  0
10350:  CALL   014E
10354:  MOVWF  00
10356:  TBLRD*+
10358:  MOVFF  FF5,01
1035C:  TBLRD*+
1035E:  MOVFF  FF5,02
10362:  TBLRD*+
10364:  MOVFF  FF5,03
10368:  MOVFF  03,237
1036C:  MOVFF  02,236
10370:  MOVFF  01,235
10374:  MOVFF  00,234
.................... 
....................     switch ( smf_queue_ptr->mission_id )
10378:  MOVLB  1
1037A:  MOVF   xDE,W
1037C:  MOVWF  FE9
1037E:  MOVF   xDF,W
10380:  MOVWF  FEA
10382:  MOVF   FEF,W
10384:  XORLW  00
10386:  MOVLB  0
10388:  BTFSC  FD8.2
1038A:  GOTO   103C2
1038E:  XORLW  01
10390:  BTFSC  FD8.2
10392:  GOTO   103D6
10396:  XORLW  03
10398:  BTFSC  FD8.2
1039A:  GOTO   103EA
1039E:  XORLW  01
103A0:  BTFSC  FD8.2
103A2:  GOTO   103FE
103A6:  XORLW  07
103A8:  BTFSC  FD8.2
103AA:  GOTO   10412
103AE:  XORLW  01
103B0:  BTFSC  FD8.2
103B2:  GOTO   10426
103B6:  XORLW  03
103B8:  BTFSC  FD8.2
103BA:  GOTO   1043A
103BE:  GOTO   1044E
....................     {
....................         case CIGS_DATA_TABLE:
....................             fprintf(PC, "FLASH ID: CIGS_DATA_TABLE\r\n");
103C2:  MOVLW  3C
103C4:  MOVWF  FF6
103C6:  MOVLW  09
103C8:  MOVWF  FF7
103CA:  MOVLW  00
103CC:  MOVWF  FF8
103CE:  CALL   1FF0
....................             break;
103D2:  GOTO   104A4
....................         case CIGS_PICLOG_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_PICLOG_DATA\r\n");
103D6:  MOVLW  58
103D8:  MOVWF  FF6
103DA:  MOVLW  09
103DC:  MOVWF  FF7
103DE:  MOVLW  00
103E0:  MOVWF  FF8
103E2:  CALL   1FF0
....................             break;
103E6:  GOTO   104A4
....................         case CIGS_ENVIRO_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_ENVIRO_DATA\r\n");
103EA:  MOVLW  76
103EC:  MOVWF  FF6
103EE:  MOVLW  09
103F0:  MOVWF  FF7
103F2:  MOVLW  00
103F4:  MOVWF  FF8
103F6:  CALL   1FF0
....................             break;
103FA:  GOTO   104A4
....................         case CIGS_IV1_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_HEADER\r\n");
103FE:  MOVLW  94
10400:  MOVWF  FF6
10402:  MOVLW  09
10404:  MOVWF  FF7
10406:  MOVLW  00
10408:  MOVWF  FF8
1040A:  CALL   1FF0
....................             break;
1040E:  GOTO   104A4
....................         case CIGS_IV1_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV1_DATA\r\n");
10412:  MOVLW  B0
10414:  MOVWF  FF6
10416:  MOVLW  09
10418:  MOVWF  FF7
1041A:  MOVLW  00
1041C:  MOVWF  FF8
1041E:  CALL   1FF0
....................             break;
10422:  GOTO   104A4
....................         case CIGS_IV2_HEADER:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_HEADER\r\n");
10426:  MOVLW  CA
10428:  MOVWF  FF6
1042A:  MOVLW  09
1042C:  MOVWF  FF7
1042E:  MOVLW  00
10430:  MOVWF  FF8
10432:  CALL   1FF0
....................             break;
10436:  GOTO   104A4
....................         case CIGS_IV2_DATA:
....................             fprintf(PC, "FLASH ID: CIGS_IV2_DATA\r\n");
1043A:  MOVLW  E6
1043C:  MOVWF  FF6
1043E:  MOVLW  09
10440:  MOVWF  FF7
10442:  MOVLW  00
10444:  MOVWF  FF8
10446:  CALL   1FF0
....................             break;
1044A:  GOTO   104A4
....................         default:
....................             fprintf(PC, "Error: Invalid mission ID %d\r\n", smf_queue_ptr->mission_id);
1044E:  MOVLB  1
10450:  MOVF   xDE,W
10452:  MOVWF  FE9
10454:  MOVF   xDF,W
10456:  MOVWF  FEA
10458:  MOVFF  FEF,281
1045C:  MOVLW  00
1045E:  MOVWF  FF6
10460:  MOVLW  0A
10462:  MOVWF  FF7
10464:  MOVLW  00
10466:  MOVWF  FF8
10468:  MOVLW  1A
1046A:  MOVLB  A
1046C:  MOVWF  x0C
1046E:  MOVLB  0
10470:  CALL   2026
10474:  MOVFF  281,2C5
10478:  MOVLW  18
1047A:  MOVLB  2
1047C:  MOVWF  xC6
1047E:  MOVLB  0
10480:  CALL   F128
10484:  MOVLW  0D
10486:  BTFSS  FA6.6
10488:  GOTO   10486
1048C:  MOVLB  E
1048E:  MOVWF  xF9
10490:  MOVLW  0A
10492:  MOVLB  0
10494:  BTFSS  FA6.6
10496:  GOTO   10494
1049A:  MOVLB  E
1049C:  MOVWF  xF9
....................             return;
1049E:  MOVLB  0
104A0:  GOTO   10DCC
....................     }
.................... 
....................     // Print MISF ADDRESS
....................     fprintf(PC,"[MISF ADDRESS]\r\n");
104A4:  MOVLW  20
104A6:  MOVWF  FF6
104A8:  MOVLW  0A
104AA:  MOVWF  FF7
104AC:  MOVLW  00
104AE:  MOVWF  FF8
104B0:  CALL   1FF0
....................     fprintf(PC, "\tParam\tData\r\n");
104B4:  MOVLW  32
104B6:  MOVWF  FF6
104B8:  MOVLW  0A
104BA:  MOVWF  FF7
104BC:  MOVLW  00
104BE:  MOVWF  FF8
104C0:  CALL   1FF0
....................     fprintf(PC, "\t-----\t----------\r\n");
104C4:  MOVLW  40
104C6:  MOVWF  FF6
104C8:  MOVLW  0A
104CA:  MOVWF  FF7
104CC:  MOVLW  00
104CE:  MOVWF  FF8
104D0:  CALL   1FF0
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", misf_address_start);
104D4:  MOVLW  54
104D6:  MOVWF  FF6
104D8:  MOVLW  0A
104DA:  MOVWF  FF7
104DC:  MOVLW  00
104DE:  MOVWF  FF8
104E0:  MOVLW  09
104E2:  MOVLB  A
104E4:  MOVWF  x0C
104E6:  MOVLB  0
104E8:  CALL   2026
104EC:  MOVFF  233,A26
104F0:  MOVLW  37
104F2:  MOVLB  A
104F4:  MOVWF  x27
104F6:  MOVLB  0
104F8:  CALL   2232
104FC:  MOVFF  232,A26
10500:  MOVLW  37
10502:  MOVLB  A
10504:  MOVWF  x27
10506:  MOVLB  0
10508:  CALL   2232
1050C:  MOVFF  231,A26
10510:  MOVLW  37
10512:  MOVLB  A
10514:  MOVWF  x27
10516:  MOVLB  0
10518:  CALL   2232
1051C:  MOVFF  230,A26
10520:  MOVLW  37
10522:  MOVLB  A
10524:  MOVWF  x27
10526:  MOVLB  0
10528:  CALL   2232
1052C:  MOVLW  0D
1052E:  BTFSS  FA6.6
10530:  GOTO   1052E
10534:  MOVLB  E
10536:  MOVWF  xF9
10538:  MOVLW  0A
1053A:  MOVLB  0
1053C:  BTFSS  FA6.6
1053E:  GOTO   1053C
10542:  MOVLB  E
10544:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", misf_address_end);
10546:  MOVLW  66
10548:  MOVWF  FF6
1054A:  MOVLW  0A
1054C:  MOVWF  FF7
1054E:  MOVLW  00
10550:  MOVWF  FF8
10552:  MOVLW  07
10554:  MOVLB  A
10556:  MOVWF  x0C
10558:  MOVLB  0
1055A:  CALL   2026
1055E:  MOVFF  237,A26
10562:  MOVLW  37
10564:  MOVLB  A
10566:  MOVWF  x27
10568:  MOVLB  0
1056A:  CALL   2232
1056E:  MOVFF  236,A26
10572:  MOVLW  37
10574:  MOVLB  A
10576:  MOVWF  x27
10578:  MOVLB  0
1057A:  CALL   2232
1057E:  MOVFF  235,A26
10582:  MOVLW  37
10584:  MOVLB  A
10586:  MOVWF  x27
10588:  MOVLB  0
1058A:  CALL   2232
1058E:  MOVFF  234,A26
10592:  MOVLW  37
10594:  MOVLB  A
10596:  MOVWF  x27
10598:  MOVLB  0
1059A:  CALL   2232
1059E:  MOVLW  0D
105A0:  BTFSS  FA6.6
105A2:  GOTO   105A0
105A6:  MOVLB  E
105A8:  MOVWF  xF9
105AA:  MOVLW  0A
105AC:  MOVLB  0
105AE:  BTFSS  FA6.6
105B0:  GOTO   105AE
105B4:  MOVLB  E
105B6:  MOVWF  xF9
....................     fprintf(PC, "\tSRC\t0x%08LX\r\n", misf_write_src);
105B8:  MOVLW  76
105BA:  MOVWF  FF6
105BC:  MOVLW  0A
105BE:  MOVWF  FF7
105C0:  MOVLW  00
105C2:  MOVWF  FF8
105C4:  MOVLW  07
105C6:  MOVLB  A
105C8:  MOVWF  x0C
105CA:  MOVLB  0
105CC:  CALL   2026
105D0:  MOVFF  223,A26
105D4:  MOVLW  37
105D6:  MOVLB  A
105D8:  MOVWF  x27
105DA:  MOVLB  0
105DC:  CALL   2232
105E0:  MOVFF  222,A26
105E4:  MOVLW  37
105E6:  MOVLB  A
105E8:  MOVWF  x27
105EA:  MOVLB  0
105EC:  CALL   2232
105F0:  MOVFF  221,A26
105F4:  MOVLW  37
105F6:  MOVLB  A
105F8:  MOVWF  x27
105FA:  MOVLB  0
105FC:  CALL   2232
10600:  MOVFF  220,A26
10604:  MOVLW  37
10606:  MOVLB  A
10608:  MOVWF  x27
1060A:  MOVLB  0
1060C:  CALL   2232
10610:  MOVLW  0D
10612:  BTFSS  FA6.6
10614:  GOTO   10612
10618:  MOVLB  E
1061A:  MOVWF  xF9
1061C:  MOVLW  0A
1061E:  MOVLB  0
10620:  BTFSS  FA6.6
10622:  GOTO   10620
10626:  MOVLB  E
10628:  MOVWF  xF9
....................     fprintf(PC, "\tSIZE\t0x%08LX\r\n", misf_write_size);
1062A:  MOVLW  86
1062C:  MOVWF  FF6
1062E:  MOVLW  0A
10630:  MOVWF  FF7
10632:  MOVLW  00
10634:  MOVWF  FF8
10636:  MOVLW  08
10638:  MOVLB  A
1063A:  MOVWF  x0C
1063C:  MOVLB  0
1063E:  CALL   2026
10642:  MOVFF  227,A26
10646:  MOVLW  37
10648:  MOVLB  A
1064A:  MOVWF  x27
1064C:  MOVLB  0
1064E:  CALL   2232
10652:  MOVFF  226,A26
10656:  MOVLW  37
10658:  MOVLB  A
1065A:  MOVWF  x27
1065C:  MOVLB  0
1065E:  CALL   2232
10662:  MOVFF  225,A26
10666:  MOVLW  37
10668:  MOVLB  A
1066A:  MOVWF  x27
1066C:  MOVLB  0
1066E:  CALL   2232
10672:  MOVFF  224,A26
10676:  MOVLW  37
10678:  MOVLB  A
1067A:  MOVWF  x27
1067C:  MOVLB  0
1067E:  CALL   2232
10682:  MOVLW  0D
10684:  BTFSS  FA6.6
10686:  GOTO   10684
1068A:  MOVLB  E
1068C:  MOVWF  xF9
1068E:  MOVLW  0A
10690:  MOVLB  0
10692:  BTFSS  FA6.6
10694:  GOTO   10692
10698:  MOVLB  E
1069A:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
1069C:  MOVLW  96
1069E:  MOVWF  FF6
106A0:  MOVLW  0A
106A2:  MOVWF  FF7
106A4:  MOVLW  00
106A6:  MOVWF  FF8
106A8:  MOVLB  0
106AA:  CALL   1FF0
.................... 
....................     // Print SMF ADDRESS
....................     fprintf(PC,"[SMF ADDRESS]\r\n");
106AE:  MOVLW  AA
106B0:  MOVWF  FF6
106B2:  MOVLW  0A
106B4:  MOVWF  FF7
106B6:  MOVLW  00
106B8:  MOVWF  FF8
106BA:  CALL   1FF0
....................     fprintf(PC, "\tParam\tData\r\n");
106BE:  MOVLW  BA
106C0:  MOVWF  FF6
106C2:  MOVLW  0A
106C4:  MOVWF  FF7
106C6:  MOVLW  00
106C8:  MOVWF  FF8
106CA:  CALL   1FF0
....................     fprintf(PC, "\t-----\t----------\r\n");
106CE:  MOVLW  C8
106D0:  MOVWF  FF6
106D2:  MOVLW  0A
106D4:  MOVWF  FF7
106D6:  MOVLW  00
106D8:  MOVWF  FF8
106DA:  CALL   1FF0
....................     fprintf(PC, "\tSTART\t0x%08LX\r\n", smf_address_start);
106DE:  MOVLW  DC
106E0:  MOVWF  FF6
106E2:  MOVLW  0A
106E4:  MOVWF  FF7
106E6:  MOVLW  00
106E8:  MOVWF  FF8
106EA:  MOVLW  09
106EC:  MOVLB  A
106EE:  MOVWF  x0C
106F0:  MOVLB  0
106F2:  CALL   2026
106F6:  MOVFF  22B,A26
106FA:  MOVLW  37
106FC:  MOVLB  A
106FE:  MOVWF  x27
10700:  MOVLB  0
10702:  CALL   2232
10706:  MOVFF  22A,A26
1070A:  MOVLW  37
1070C:  MOVLB  A
1070E:  MOVWF  x27
10710:  MOVLB  0
10712:  CALL   2232
10716:  MOVFF  229,A26
1071A:  MOVLW  37
1071C:  MOVLB  A
1071E:  MOVWF  x27
10720:  MOVLB  0
10722:  CALL   2232
10726:  MOVFF  228,A26
1072A:  MOVLW  37
1072C:  MOVLB  A
1072E:  MOVWF  x27
10730:  MOVLB  0
10732:  CALL   2232
10736:  MOVLW  0D
10738:  BTFSS  FA6.6
1073A:  GOTO   10738
1073E:  MOVLB  E
10740:  MOVWF  xF9
10742:  MOVLW  0A
10744:  MOVLB  0
10746:  BTFSS  FA6.6
10748:  GOTO   10746
1074C:  MOVLB  E
1074E:  MOVWF  xF9
....................     fprintf(PC, "\tEND\t0x%08LX\r\n", smf_address_end);
10750:  MOVLW  EE
10752:  MOVWF  FF6
10754:  MOVLW  0A
10756:  MOVWF  FF7
10758:  MOVLW  00
1075A:  MOVWF  FF8
1075C:  MOVLW  07
1075E:  MOVLB  A
10760:  MOVWF  x0C
10762:  MOVLB  0
10764:  CALL   2026
10768:  MOVFF  22F,A26
1076C:  MOVLW  37
1076E:  MOVLB  A
10770:  MOVWF  x27
10772:  MOVLB  0
10774:  CALL   2232
10778:  MOVFF  22E,A26
1077C:  MOVLW  37
1077E:  MOVLB  A
10780:  MOVWF  x27
10782:  MOVLB  0
10784:  CALL   2232
10788:  MOVFF  22D,A26
1078C:  MOVLW  37
1078E:  MOVLB  A
10790:  MOVWF  x27
10792:  MOVLB  0
10794:  CALL   2232
10798:  MOVFF  22C,A26
1079C:  MOVLW  37
1079E:  MOVLB  A
107A0:  MOVWF  x27
107A2:  MOVLB  0
107A4:  CALL   2232
107A8:  MOVLW  0D
107AA:  BTFSS  FA6.6
107AC:  GOTO   107AA
107B0:  MOVLB  E
107B2:  MOVWF  xF9
107B4:  MOVLW  0A
107B6:  MOVLB  0
107B8:  BTFSS  FA6.6
107BA:  GOTO   107B8
107BE:  MOVLB  E
107C0:  MOVWF  xF9
....................     fprintf(PC, "\tUSED\t0x%08LX\r\n", smf_data_table.fields.headers[smf_queue_ptr->mission_id].used_size);
107C2:  MOVLB  1
107C4:  MOVF   xDE,W
107C6:  MOVWF  FE9
107C8:  MOVF   xDF,W
107CA:  MOVWF  FEA
107CC:  MOVF   FEF,W
107CE:  MULLW  08
107D0:  MOVF   FF3,W
107D2:  MOVLB  2
107D4:  CLRF   x82
107D6:  MOVWF  x81
107D8:  MOVLW  E0
107DA:  ADDWF  x81,W
107DC:  MOVWF  FE9
107DE:  MOVLW  01
107E0:  ADDWFC x82,W
107E2:  MOVWF  FEA
107E4:  MOVFF  FEF,283
107E8:  MOVFF  FEC,284
107EC:  MOVFF  FEC,285
107F0:  MOVFF  FEC,286
107F4:  MOVF   FED,F
107F6:  MOVF   FED,F
107F8:  MOVF   FED,F
107FA:  MOVLW  FE
107FC:  MOVWF  FF6
107FE:  MOVLW  0A
10800:  MOVWF  FF7
10802:  MOVLW  00
10804:  MOVWF  FF8
10806:  MOVLW  08
10808:  MOVLB  A
1080A:  MOVWF  x0C
1080C:  MOVLB  0
1080E:  CALL   2026
10812:  MOVFF  286,A26
10816:  MOVLW  37
10818:  MOVLB  A
1081A:  MOVWF  x27
1081C:  MOVLB  0
1081E:  CALL   2232
10822:  MOVFF  285,A26
10826:  MOVLW  37
10828:  MOVLB  A
1082A:  MOVWF  x27
1082C:  MOVLB  0
1082E:  CALL   2232
10832:  MOVFF  284,A26
10836:  MOVLW  37
10838:  MOVLB  A
1083A:  MOVWF  x27
1083C:  MOVLB  0
1083E:  CALL   2232
10842:  MOVFF  283,A26
10846:  MOVLW  37
10848:  MOVLB  A
1084A:  MOVWF  x27
1084C:  MOVLB  0
1084E:  CALL   2232
10852:  MOVLW  0D
10854:  BTFSS  FA6.6
10856:  GOTO   10854
1085A:  MOVLB  E
1085C:  MOVWF  xF9
1085E:  MOVLW  0A
10860:  MOVLB  0
10862:  BTFSS  FA6.6
10864:  GOTO   10862
10868:  MOVLB  E
1086A:  MOVWF  xF9
....................     fprintf(PC, "\tNEXT\t0x%08LX\r\n", smf_address_start + smf_data_table.fields.headers[smf_queue_ptr->mission_id].used_size);
1086C:  MOVLB  1
1086E:  MOVF   xDE,W
10870:  MOVWF  FE9
10872:  MOVF   xDF,W
10874:  MOVWF  FEA
10876:  MOVF   FEF,W
10878:  MULLW  08
1087A:  MOVF   FF3,W
1087C:  MOVLB  2
1087E:  CLRF   x82
10880:  MOVWF  x81
10882:  MOVLW  E0
10884:  ADDWF  x81,W
10886:  MOVWF  FE9
10888:  MOVLW  01
1088A:  ADDWFC x82,W
1088C:  MOVWF  FEA
1088E:  MOVFF  FEF,00
10892:  MOVFF  FEC,01
10896:  MOVFF  FEC,02
1089A:  MOVFF  FEC,03
1089E:  MOVF   FED,F
108A0:  MOVF   FED,F
108A2:  MOVF   FED,F
108A4:  MOVF   00,W
108A6:  ADDWF  x28,W
108A8:  MOVWF  x83
108AA:  MOVF   01,W
108AC:  ADDWFC x29,W
108AE:  MOVWF  x84
108B0:  MOVF   02,W
108B2:  ADDWFC x2A,W
108B4:  MOVWF  x85
108B6:  MOVF   03,W
108B8:  ADDWFC x2B,W
108BA:  MOVWF  x86
108BC:  MOVLW  0E
108BE:  MOVWF  FF6
108C0:  MOVLW  0B
108C2:  MOVWF  FF7
108C4:  MOVLW  00
108C6:  MOVWF  FF8
108C8:  MOVLW  08
108CA:  MOVLB  A
108CC:  MOVWF  x0C
108CE:  MOVLB  0
108D0:  CALL   2026
108D4:  MOVFF  286,A26
108D8:  MOVLW  37
108DA:  MOVLB  A
108DC:  MOVWF  x27
108DE:  MOVLB  0
108E0:  CALL   2232
108E4:  MOVFF  285,A26
108E8:  MOVLW  37
108EA:  MOVLB  A
108EC:  MOVWF  x27
108EE:  MOVLB  0
108F0:  CALL   2232
108F4:  MOVFF  284,A26
108F8:  MOVLW  37
108FA:  MOVLB  A
108FC:  MOVWF  x27
108FE:  MOVLB  0
10900:  CALL   2232
10904:  MOVFF  283,A26
10908:  MOVLW  37
1090A:  MOVLB  A
1090C:  MOVWF  x27
1090E:  MOVLB  0
10910:  CALL   2232
10914:  MOVLW  0D
10916:  BTFSS  FA6.6
10918:  GOTO   10916
1091C:  MOVLB  E
1091E:  MOVWF  xF9
10920:  MOVLW  0A
10922:  MOVLB  0
10924:  BTFSS  FA6.6
10926:  GOTO   10924
1092A:  MOVLB  E
1092C:  MOVWF  xF9
....................     fprintf(PC, "\t-----\t----------\r\n");
1092E:  MOVLW  1E
10930:  MOVWF  FF6
10932:  MOVLW  0B
10934:  MOVWF  FF7
10936:  MOVLW  00
10938:  MOVWF  FF8
1093A:  MOVLB  0
1093C:  CALL   1FF0
.................... 
.................... 
.................... 
.................... 
....................     unsigned int8 buffer[PACKET_SIZE];
....................     unsigned int32 smf_write_address;
....................     unsigned int32 misf_read_address;
.................... 
....................     misf_read_address = misf_write_src;
10940:  MOVFF  223,27F
10944:  MOVFF  222,27E
10948:  MOVFF  221,27D
1094C:  MOVFF  220,27C
.................... 
.................... 
....................     fprintf(PC, "WRITE DATA TO SMF\r\n");
10950:  MOVLW  32
10952:  MOVWF  FF6
10954:  MOVLW  0B
10956:  MOVWF  FF7
10958:  MOVLW  00
1095A:  MOVWF  FF8
1095C:  CALL   1FF0
....................     while (misf_write_size > 0)
10960:  MOVLB  2
10962:  MOVF   x24,F
10964:  BTFSC  FD8.2
10966:  BRA    1096E
10968:  MOVLB  0
1096A:  GOTO   109A0
1096E:  MOVLB  0
10970:  MOVLB  2
10972:  MOVF   x25,F
10974:  BTFSC  FD8.2
10976:  BRA    1097E
10978:  MOVLB  0
1097A:  GOTO   109A0
1097E:  MOVLB  0
10980:  MOVLB  2
10982:  MOVF   x26,F
10984:  BTFSC  FD8.2
10986:  BRA    1098E
10988:  MOVLB  0
1098A:  GOTO   109A0
1098E:  MOVLB  0
10990:  MOVLB  2
10992:  MOVF   x27,F
10994:  BTFSS  FD8.2
10996:  BRA    1099E
10998:  MOVLB  0
1099A:  GOTO   10D5C
1099E:  MOVLB  0
....................     {
.................... 
....................         memset(buffer, 0x11, PACKET_SIZE);
109A0:  MOVLW  02
109A2:  MOVWF  FEA
109A4:  MOVLW  38
109A6:  MOVWF  FE9
109A8:  MOVLW  11
109AA:  MOVWF  00
109AC:  CLRF   02
109AE:  MOVLW  40
109B0:  MOVWF  01
109B2:  CALL   2BBA
....................         smf_write_address = smf_address_start + smf_data_table.fields.headers[smf_queue_ptr->mission_id].used_size;
109B6:  MOVLB  1
109B8:  MOVF   xDE,W
109BA:  MOVWF  FE9
109BC:  MOVF   xDF,W
109BE:  MOVWF  FEA
109C0:  MOVF   FEF,W
109C2:  MULLW  08
109C4:  MOVF   FF3,W
109C6:  MOVLB  2
109C8:  CLRF   x82
109CA:  MOVWF  x81
109CC:  MOVLW  E0
109CE:  ADDWF  x81,W
109D0:  MOVWF  FE9
109D2:  MOVLW  01
109D4:  ADDWFC x82,W
109D6:  MOVWF  FEA
109D8:  MOVFF  FEF,00
109DC:  MOVFF  FEC,01
109E0:  MOVFF  FEC,02
109E4:  MOVFF  FEC,03
109E8:  MOVF   FED,F
109EA:  MOVF   FED,F
109EC:  MOVF   FED,F
109EE:  MOVF   00,W
109F0:  ADDWF  x28,W
109F2:  MOVWF  x78
109F4:  MOVF   01,W
109F6:  ADDWFC x29,W
109F8:  MOVWF  x79
109FA:  MOVF   02,W
109FC:  ADDWFC x2A,W
109FE:  MOVWF  x7A
10A00:  MOVF   03,W
10A02:  ADDWFC x2B,W
10A04:  MOVWF  x7B
.................... 
....................         read_data_bytes(mis_fm, misf_read_address, buffer, PACKET_SIZE);
10A06:  MOVFF  115,B37
10A0A:  MOVFF  114,B36
10A0E:  MOVFF  113,B35
10A12:  MOVFF  112,B34
10A16:  MOVFF  27F,B3B
10A1A:  MOVFF  27E,B3A
10A1E:  MOVFF  27D,B39
10A22:  MOVFF  27C,B38
10A26:  MOVLW  02
10A28:  MOVLB  B
10A2A:  MOVWF  x3D
10A2C:  MOVLW  38
10A2E:  MOVWF  x3C
10A30:  CLRF   x41
10A32:  CLRF   x40
10A34:  CLRF   x3F
10A36:  MOVLW  40
10A38:  MOVWF  x3E
10A3A:  MOVLB  0
10A3C:  CALL   2BDE
....................         fprintf(PC," ");
10A40:  MOVLW  20
10A42:  BTFSS  FA6.6
10A44:  GOTO   10A42
10A48:  MOVLB  E
10A4A:  MOVWF  xF9
....................         write_data_bytes(smf, smf_write_address, buffer, PACKET_SIZE);
10A4C:  MOVFF  119,B37
10A50:  MOVFF  118,B36
10A54:  MOVFF  117,B35
10A58:  MOVFF  116,B34
10A5C:  MOVFF  27B,B3B
10A60:  MOVFF  27A,B3A
10A64:  MOVFF  279,B39
10A68:  MOVFF  278,B38
10A6C:  MOVLW  02
10A6E:  MOVLB  B
10A70:  MOVWF  x3D
10A72:  MOVLW  38
10A74:  MOVWF  x3C
10A76:  CLRF   x3F
10A78:  MOVLW  40
10A7A:  MOVWF  x3E
10A7C:  MOVLB  0
10A7E:  CALL   3C3E
....................         fprintf(PC,".");
10A82:  MOVLW  2E
10A84:  BTFSS  FA6.6
10A86:  GOTO   10A84
10A8A:  MOVLB  E
10A8C:  MOVWF  xF9
....................         // counter update
....................         smf_data_table.fields.headers[smf_queue_ptr->mission_id].used_size += PACKET_SIZE;
10A8E:  MOVLB  1
10A90:  MOVF   xDE,W
10A92:  MOVWF  FE9
10A94:  MOVF   xDF,W
10A96:  MOVWF  FEA
10A98:  MOVF   FEF,W
10A9A:  MULLW  08
10A9C:  MOVF   FF3,W
10A9E:  MOVLB  2
10AA0:  CLRF   x82
10AA2:  MOVWF  x81
10AA4:  MOVLW  E0
10AA6:  ADDWF  x81,W
10AA8:  MOVWF  FE9
10AAA:  MOVLW  01
10AAC:  ADDWFC x82,W
10AAE:  MOVWF  FEA
10AB0:  MOVLW  40
10AB2:  ADDWF  FEF,W
10AB4:  MOVWF  00
10AB6:  MOVLW  00
10AB8:  ADDWFC FEC,W
10ABA:  MOVWF  01
10ABC:  MOVLW  00
10ABE:  ADDWFC FEC,W
10AC0:  MOVWF  02
10AC2:  MOVLW  00
10AC4:  ADDWFC FEC,W
10AC6:  MOVWF  03
10AC8:  MOVF   FED,F
10ACA:  MOVF   FED,F
10ACC:  MOVF   FED,F
10ACE:  MOVFF  00,FEF
10AD2:  MOVFF  01,FEC
10AD6:  MOVFF  02,FEC
10ADA:  MOVFF  03,FEC
10ADE:  MOVF   FED,F
10AE0:  MOVF   FED,F
10AE2:  MOVF   FED,F
....................         if (misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter >= PACKET_SIZE){
10AE4:  MOVLB  1
10AE6:  MOVF   xDE,W
10AE8:  MOVWF  FE9
10AEA:  MOVF   xDF,W
10AEC:  MOVWF  FEA
10AEE:  MOVF   FEF,W
10AF0:  MULLW  0A
10AF2:  MOVF   FF3,W
10AF4:  MOVLB  2
10AF6:  CLRF   x82
10AF8:  MOVWF  x81
10AFA:  MOVLW  04
10AFC:  ADDWF  x81,W
10AFE:  MOVWF  01
10B00:  MOVLW  00
10B02:  ADDWFC x82,W
10B04:  MOVWF  03
10B06:  MOVF   01,W
10B08:  ADDLW  22
10B0A:  MOVWF  FE9
10B0C:  MOVLW  01
10B0E:  ADDWFC 03,W
10B10:  MOVWF  FEA
10B12:  MOVFF  FEF,281
10B16:  MOVFF  FEC,282
10B1A:  MOVFF  FEC,283
10B1E:  MOVFF  FEC,284
10B22:  MOVF   FED,F
10B24:  MOVF   FED,F
10B26:  MOVF   FED,F
10B28:  MOVF   x84,F
10B2A:  BTFSC  FD8.2
10B2C:  BRA    10B34
10B2E:  MOVLB  0
10B30:  GOTO   10B68
10B34:  MOVLB  0
10B36:  MOVLB  2
10B38:  MOVF   x83,F
10B3A:  BTFSC  FD8.2
10B3C:  BRA    10B44
10B3E:  MOVLB  0
10B40:  GOTO   10B68
10B44:  MOVLB  0
10B46:  MOVLB  2
10B48:  MOVF   x82,F
10B4A:  BTFSC  FD8.2
10B4C:  BRA    10B54
10B4E:  MOVLB  0
10B50:  GOTO   10B68
10B54:  MOVLB  0
10B56:  MOVLB  2
10B58:  MOVF   x81,W
10B5A:  SUBLW  3F
10B5C:  BTFSS  FD8.0
10B5E:  BRA    10B66
10B60:  MOVLB  0
10B62:  GOTO   10BD0
10B66:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter -= PACKET_SIZE;
10B68:  MOVLB  1
10B6A:  MOVF   xDE,W
10B6C:  MOVWF  FE9
10B6E:  MOVF   xDF,W
10B70:  MOVWF  FEA
10B72:  MOVF   FEF,W
10B74:  MULLW  0A
10B76:  MOVF   FF3,W
10B78:  MOVLB  2
10B7A:  CLRF   x82
10B7C:  MOVWF  x81
10B7E:  MOVLW  04
10B80:  ADDWF  x81,W
10B82:  MOVWF  01
10B84:  MOVLW  00
10B86:  ADDWFC x82,W
10B88:  MOVWF  03
10B8A:  MOVF   01,W
10B8C:  ADDLW  22
10B8E:  MOVWF  FE9
10B90:  MOVLW  01
10B92:  ADDWFC 03,W
10B94:  MOVWF  FEA
10B96:  MOVLW  40
10B98:  SUBWF  FEF,W
10B9A:  MOVWF  00
10B9C:  MOVLW  00
10B9E:  SUBWFB FEC,W
10BA0:  MOVWF  01
10BA2:  MOVLW  00
10BA4:  SUBWFB FEC,W
10BA6:  MOVWF  02
10BA8:  MOVLW  00
10BAA:  SUBWFB FEC,W
10BAC:  MOVWF  03
10BAE:  MOVF   FED,F
10BB0:  MOVF   FED,F
10BB2:  MOVF   FED,F
10BB4:  MOVFF  00,FEF
10BB8:  MOVFF  01,FEC
10BBC:  MOVFF  02,FEC
10BC0:  MOVFF  03,FEC
10BC4:  MOVF   FED,F
10BC6:  MOVF   FED,F
10BC8:  MOVF   FED,F
10BCA:  MOVLB  0
....................         }else{
10BCC:  GOTO   10CE2
....................             unsigned int8 add = PACKET_SIZE - misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter;
10BD0:  MOVLB  1
10BD2:  MOVF   xDE,W
10BD4:  MOVWF  FE9
10BD6:  MOVF   xDF,W
10BD8:  MOVWF  FEA
10BDA:  MOVF   FEF,W
10BDC:  MULLW  0A
10BDE:  MOVF   FF3,W
10BE0:  MOVLB  2
10BE2:  CLRF   x82
10BE4:  MOVWF  x81
10BE6:  MOVLW  04
10BE8:  ADDWF  x81,W
10BEA:  MOVWF  01
10BEC:  MOVLW  00
10BEE:  ADDWFC x82,W
10BF0:  MOVWF  03
10BF2:  MOVF   01,W
10BF4:  ADDLW  22
10BF6:  MOVWF  FE9
10BF8:  MOVLW  01
10BFA:  ADDWFC 03,W
10BFC:  MOVWF  FEA
10BFE:  MOVFF  FEF,00
10C02:  MOVFF  FEC,01
10C06:  MOVFF  FEC,02
10C0A:  MOVFF  FEC,03
10C0E:  MOVF   FED,F
10C10:  MOVF   FED,F
10C12:  MOVF   FED,F
10C14:  MOVLW  40
10C16:  BSF    FD8.0
10C18:  SUBFWB 00,W
10C1A:  MOVWF  x80
10C1C:  MOVLB  0
....................             misf_counter_table[smf_queue_ptr->mission_id].uncopied_counter = 0;
10C1E:  MOVLB  1
10C20:  MOVF   xDE,W
10C22:  MOVWF  FE9
10C24:  MOVF   xDF,W
10C26:  MOVWF  FEA
10C28:  MOVF   FEF,W
10C2A:  MULLW  0A
10C2C:  MOVF   FF3,W
10C2E:  MOVLB  2
10C30:  CLRF   x82
10C32:  MOVWF  x81
10C34:  MOVLW  04
10C36:  ADDWF  x81,W
10C38:  MOVWF  01
10C3A:  MOVLW  00
10C3C:  ADDWFC x82,W
10C3E:  MOVWF  03
10C40:  MOVF   01,W
10C42:  ADDLW  22
10C44:  MOVWF  FE9
10C46:  MOVLW  01
10C48:  ADDWFC 03,W
10C4A:  MOVWF  FEA
10C4C:  CLRF   FEF
10C4E:  CLRF   FEC
10C50:  CLRF   FEC
10C52:  CLRF   FEC
10C54:  MOVF   FED,F
10C56:  MOVF   FED,F
10C58:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].used_counter += add;
10C5A:  MOVLB  1
10C5C:  MOVF   xDE,W
10C5E:  MOVWF  FE9
10C60:  MOVF   xDF,W
10C62:  MOVWF  FEA
10C64:  MOVF   FEF,W
10C66:  MULLW  0A
10C68:  MOVF   FF3,W
10C6A:  MOVLB  2
10C6C:  CLRF   x82
10C6E:  MOVWF  x81
10C70:  MOVLW  22
10C72:  ADDWF  x81,W
10C74:  MOVWF  FE9
10C76:  MOVLW  01
10C78:  ADDWFC x82,W
10C7A:  MOVWF  FEA
10C7C:  MOVF   x80,W
10C7E:  ADDWF  FEF,W
10C80:  MOVWF  00
10C82:  MOVLW  00
10C84:  ADDWFC FEC,W
10C86:  MOVWF  01
10C88:  MOVLW  00
10C8A:  ADDWFC FEC,W
10C8C:  MOVWF  02
10C8E:  MOVLW  00
10C90:  ADDWFC FEC,W
10C92:  MOVWF  03
10C94:  MOVF   FED,F
10C96:  MOVF   FED,F
10C98:  MOVF   FED,F
10C9A:  MOVFF  00,FEF
10C9E:  MOVFF  01,FEC
10CA2:  MOVFF  02,FEC
10CA6:  MOVFF  03,FEC
10CAA:  MOVF   FED,F
10CAC:  MOVF   FED,F
10CAE:  MOVF   FED,F
....................             misf_counter_table[smf_queue_ptr->mission_id].reserve_counter1 = 0;
10CB0:  MOVLB  1
10CB2:  MOVF   xDE,W
10CB4:  MOVWF  FE9
10CB6:  MOVF   xDF,W
10CB8:  MOVWF  FEA
10CBA:  MOVF   FEF,W
10CBC:  MULLW  0A
10CBE:  MOVF   FF3,W
10CC0:  MOVLB  2
10CC2:  CLRF   x82
10CC4:  MOVWF  x81
10CC6:  MOVLW  08
10CC8:  ADDWF  x81,W
10CCA:  MOVWF  01
10CCC:  MOVLW  00
10CCE:  ADDWFC x82,W
10CD0:  MOVWF  03
10CD2:  MOVF   01,W
10CD4:  ADDLW  22
10CD6:  MOVWF  FE9
10CD8:  MOVLW  01
10CDA:  ADDWFC 03,W
10CDC:  MOVWF  FEA
10CDE:  CLRF   FEF
10CE0:  MOVLB  0
....................         }
....................         misf_read_address += PACKET_SIZE;
10CE2:  MOVLW  40
10CE4:  MOVLB  2
10CE6:  ADDWF  x7C,F
10CE8:  MOVLW  00
10CEA:  ADDWFC x7D,F
10CEC:  MOVLW  00
10CEE:  ADDWFC x7E,F
10CF0:  MOVLW  00
10CF2:  ADDWFC x7F,F
....................         if (misf_write_size > PACKET_SIZE){
10CF4:  MOVF   x27,F
10CF6:  BTFSC  FD8.2
10CF8:  BRA    10D00
10CFA:  MOVLB  0
10CFC:  GOTO   10D34
10D00:  MOVLB  0
10D02:  MOVLB  2
10D04:  MOVF   x26,F
10D06:  BTFSC  FD8.2
10D08:  BRA    10D10
10D0A:  MOVLB  0
10D0C:  GOTO   10D34
10D10:  MOVLB  0
10D12:  MOVLB  2
10D14:  MOVF   x25,F
10D16:  BTFSC  FD8.2
10D18:  BRA    10D20
10D1A:  MOVLB  0
10D1C:  GOTO   10D34
10D20:  MOVLB  0
10D22:  MOVLB  2
10D24:  MOVF   x24,W
10D26:  SUBLW  40
10D28:  BTFSS  FD8.0
10D2A:  BRA    10D32
10D2C:  MOVLB  0
10D2E:  GOTO   10D4C
10D32:  MOVLB  0
....................             misf_write_size -= PACKET_SIZE;
10D34:  MOVLW  40
10D36:  MOVLB  2
10D38:  SUBWF  x24,F
10D3A:  MOVLW  00
10D3C:  SUBWFB x25,F
10D3E:  MOVLW  00
10D40:  SUBWFB x26,F
10D42:  MOVLW  00
10D44:  SUBWFB x27,F
10D46:  MOVLB  0
....................         }else{
10D48:  GOTO   10D58
....................             misf_write_size = 0;
10D4C:  MOVLB  2
10D4E:  CLRF   x27
10D50:  CLRF   x26
10D52:  CLRF   x25
10D54:  CLRF   x24
10D56:  MOVLB  0
....................         }
10D58:  GOTO   10960
....................         
....................     }
....................     fprintf(PC, "\r\n");
10D5C:  MOVLW  0D
10D5E:  BTFSS  FA6.6
10D60:  GOTO   10D5E
10D64:  MOVLB  E
10D66:  MOVWF  xF9
10D68:  MOVLW  0A
10D6A:  MOVLB  0
10D6C:  BTFSS  FA6.6
10D6E:  GOTO   10D6C
10D72:  MOVLB  E
10D74:  MOVWF  xF9
.................... 
....................     fprintf(PC, "SMF Counter Update\r\n");
10D76:  MOVLW  46
10D78:  MOVWF  FF6
10D7A:  MOVLW  0B
10D7C:  MOVWF  FF7
10D7E:  MOVLW  00
10D80:  MOVWF  FF8
10D82:  MOVLB  0
10D84:  CALL   1FF0
....................     print_smf_counter_status(&smf_data_table);
10D88:  MOVLW  01
10D8A:  MOVLB  2
10D8C:  MOVWF  x85
10D8E:  MOVLW  E0
10D90:  MOVWF  x84
10D92:  MOVLB  0
10D94:  CALL   EA36
....................     // write size area
....................     smf_write_header(&smf_data_table);
10D98:  MOVLW  01
10D9A:  MOVLB  2
10D9C:  MOVWF  x82
10D9E:  MOVLW  E0
10DA0:  MOVWF  x81
10DA2:  MOVLB  0
10DA4:  GOTO   F3E0
....................     misf_update_address_area();
10DA8:  CALL   4DE6
....................     fprintf(PC, "\r\n_________End copy_data__________\r\n");
10DAC:  MOVLW  5C
10DAE:  MOVWF  FF6
10DB0:  MOVLW  0B
10DB2:  MOVWF  FF7
10DB4:  MOVLW  00
10DB6:  MOVWF  FF8
10DB8:  CALL   1FF0
....................     fprintf(PC, "_______________________________\r\n\r\n");
10DBC:  MOVLW  82
10DBE:  MOVWF  FF6
10DC0:  MOVLW  0B
10DC2:  MOVWF  FF7
10DC4:  MOVLW  00
10DC6:  MOVWF  FF8
10DC8:  CALL   1FF0
10DCC:  GOTO   11644 (RETURN)
.................... }
.................... 
.................... void smf_read(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
0F6E4:  MOVLW  A6
0F6E6:  MOVWF  FF6
0F6E8:  MOVLW  0B
0F6EA:  MOVWF  FF7
0F6EC:  MOVLW  00
0F6EE:  MOVWF  FF8
0F6F0:  CALL   1FF0
....................     fprintf(PC, "___Start SMF Read____\r\n");
0F6F4:  MOVLW  C0
0F6F6:  MOVWF  FF6
0F6F8:  MOVLW  0B
0F6FA:  MOVWF  FF7
0F6FC:  MOVLW  00
0F6FE:  MOVWF  FF8
0F700:  CALL   1FF0
.................... 
....................     int8 buffer[PACKET_SIZE];
.................... 
....................     SmfAddressStruct smf_address = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 read_address = smf_data->misf_start_addr; // 呼び出し側でSMF内アドレスを設定する前提
....................     unsigned int32 read_size = smf_data->misf_size;
0F704:  MOVLB  1
0F706:  MOVF   xDE,W
0F708:  MOVWF  FE9
0F70A:  MOVF   xDF,W
0F70C:  MOVWF  FEA
0F70E:  MOVFF  FEF,240
0F712:  MOVFF  240,247
0F716:  MOVLB  0
0F718:  CALL   F55C
0F71C:  MOVFF  02,03
0F720:  MOVF   01,W
0F722:  MOVWF  FE1
0F724:  MOVFF  03,FE2
0F728:  MOVLW  02
0F72A:  MOVWF  FEA
0F72C:  MOVLW  20
0F72E:  MOVWF  FE9
0F730:  MOVLW  08
0F732:  MOVWF  01
0F734:  MOVFF  FE6,FEE
0F738:  DECFSZ 01,F
0F73A:  GOTO   F734
0F73E:  MOVLW  04
0F740:  MOVLB  1
0F742:  ADDWF  xDE,W
0F744:  MOVWF  FE9
0F746:  MOVLW  00
0F748:  ADDWFC xDF,W
0F74A:  MOVWF  FEA
0F74C:  MOVFF  FEF,228
0F750:  MOVFF  FEC,229
0F754:  MOVFF  FEC,22A
0F758:  MOVFF  FEC,22B
0F75C:  MOVF   FED,F
0F75E:  MOVF   FED,F
0F760:  MOVF   FED,F
0F762:  MOVLW  08
0F764:  ADDWF  xDE,W
0F766:  MOVWF  FE9
0F768:  MOVLW  00
0F76A:  ADDWFC xDF,W
0F76C:  MOVWF  FEA
0F76E:  MOVFF  FEF,22C
0F772:  MOVFF  FEC,22D
0F776:  MOVFF  FEC,22E
0F77A:  MOVFF  FEC,22F
0F77E:  MOVF   FED,F
0F780:  MOVF   FED,F
0F782:  MOVF   FED,F
.................... 
....................     // 境界チェック (start/end は [start_address, end_address) の半開区間想定)
....................     if (read_address < (unsigned int32)smf_address.start_address || read_address >= (unsigned int32)smf_address.end_address) {
0F784:  MOVLB  2
0F786:  MOVF   x2B,W
0F788:  SUBWF  x23,W
0F78A:  BTFSC  FD8.0
0F78C:  BRA    F794
0F78E:  MOVLB  0
0F790:  GOTO   F7DE
0F794:  MOVLB  0
0F796:  BTFSS  FD8.2
0F798:  GOTO   F838
0F79C:  MOVLB  2
0F79E:  MOVF   x2A,W
0F7A0:  SUBWF  x22,W
0F7A2:  BTFSC  FD8.0
0F7A4:  BRA    F7AC
0F7A6:  MOVLB  0
0F7A8:  GOTO   F7DE
0F7AC:  MOVLB  0
0F7AE:  BTFSS  FD8.2
0F7B0:  GOTO   F838
0F7B4:  MOVLB  2
0F7B6:  MOVF   x29,W
0F7B8:  SUBWF  x21,W
0F7BA:  BTFSC  FD8.0
0F7BC:  BRA    F7C4
0F7BE:  MOVLB  0
0F7C0:  GOTO   F7DE
0F7C4:  MOVLB  0
0F7C6:  BTFSS  FD8.2
0F7C8:  GOTO   F838
0F7CC:  MOVLB  2
0F7CE:  MOVF   x20,W
0F7D0:  SUBWF  x28,W
0F7D2:  BTFSC  FD8.0
0F7D4:  BRA    F7DC
0F7D6:  MOVLB  0
0F7D8:  GOTO   F838
0F7DC:  MOVLB  0
0F7DE:  MOVLB  2
0F7E0:  MOVF   x27,W
0F7E2:  SUBWF  x2B,W
0F7E4:  BTFSC  FD8.0
0F7E6:  BRA    F7EE
0F7E8:  MOVLB  0
0F7EA:  GOTO   F95C
0F7EE:  MOVLB  0
0F7F0:  BTFSS  FD8.2
0F7F2:  GOTO   F838
0F7F6:  MOVLB  2
0F7F8:  MOVF   x26,W
0F7FA:  SUBWF  x2A,W
0F7FC:  BTFSC  FD8.0
0F7FE:  BRA    F806
0F800:  MOVLB  0
0F802:  GOTO   F95C
0F806:  MOVLB  0
0F808:  BTFSS  FD8.2
0F80A:  GOTO   F838
0F80E:  MOVLB  2
0F810:  MOVF   x25,W
0F812:  SUBWF  x29,W
0F814:  BTFSC  FD8.0
0F816:  BRA    F81E
0F818:  MOVLB  0
0F81A:  GOTO   F95C
0F81E:  MOVLB  0
0F820:  BTFSS  FD8.2
0F822:  GOTO   F838
0F826:  MOVLB  2
0F828:  MOVF   x24,W
0F82A:  SUBWF  x28,W
0F82C:  BTFSC  FD8.0
0F82E:  BRA    F836
0F830:  MOVLB  0
0F832:  GOTO   F95C
0F836:  MOVLB  0
....................         fprintf(PC, "Error: Read address 0x%08LX out of SMF mission range [0x%08LX - 0x%08LX)\r\n",
....................                 read_address, (unsigned int32)smf_address.start_address, (unsigned int32)smf_address.end_address);
0F838:  MOVLW  D8
0F83A:  MOVWF  FF6
0F83C:  MOVLW  0B
0F83E:  MOVWF  FF7
0F840:  MOVLW  00
0F842:  MOVWF  FF8
0F844:  MOVLW  16
0F846:  MOVLB  A
0F848:  MOVWF  x0C
0F84A:  MOVLB  0
0F84C:  CALL   2026
0F850:  MOVFF  22B,A26
0F854:  MOVLW  37
0F856:  MOVLB  A
0F858:  MOVWF  x27
0F85A:  MOVLB  0
0F85C:  CALL   2232
0F860:  MOVFF  22A,A26
0F864:  MOVLW  37
0F866:  MOVLB  A
0F868:  MOVWF  x27
0F86A:  MOVLB  0
0F86C:  CALL   2232
0F870:  MOVFF  229,A26
0F874:  MOVLW  37
0F876:  MOVLB  A
0F878:  MOVWF  x27
0F87A:  MOVLB  0
0F87C:  CALL   2232
0F880:  MOVFF  228,A26
0F884:  MOVLW  37
0F886:  MOVLB  A
0F888:  MOVWF  x27
0F88A:  MOVLB  0
0F88C:  CALL   2232
0F890:  MOVLW  F3
0F892:  MOVWF  FF6
0F894:  MOVLW  0B
0F896:  MOVWF  FF7
0F898:  MOVLW  00
0F89A:  MOVWF  FF8
0F89C:  MOVLW  1D
0F89E:  MOVLB  A
0F8A0:  MOVWF  x0C
0F8A2:  MOVLB  0
0F8A4:  CALL   2026
0F8A8:  MOVFF  223,A26
0F8AC:  MOVLW  37
0F8AE:  MOVLB  A
0F8B0:  MOVWF  x27
0F8B2:  MOVLB  0
0F8B4:  CALL   2232
0F8B8:  MOVFF  222,A26
0F8BC:  MOVLW  37
0F8BE:  MOVLB  A
0F8C0:  MOVWF  x27
0F8C2:  MOVLB  0
0F8C4:  CALL   2232
0F8C8:  MOVFF  221,A26
0F8CC:  MOVLW  37
0F8CE:  MOVLB  A
0F8D0:  MOVWF  x27
0F8D2:  MOVLB  0
0F8D4:  CALL   2232
0F8D8:  MOVFF  220,A26
0F8DC:  MOVLW  37
0F8DE:  MOVLB  A
0F8E0:  MOVWF  x27
0F8E2:  MOVLB  0
0F8E4:  CALL   2232
0F8E8:  MOVLW  15
0F8EA:  MOVWF  FF6
0F8EC:  MOVLW  0C
0F8EE:  MOVWF  FF7
0F8F0:  MOVLW  00
0F8F2:  MOVWF  FF8
0F8F4:  MOVLW  05
0F8F6:  MOVLB  A
0F8F8:  MOVWF  x0C
0F8FA:  MOVLB  0
0F8FC:  CALL   2026
0F900:  MOVFF  227,A26
0F904:  MOVLW  37
0F906:  MOVLB  A
0F908:  MOVWF  x27
0F90A:  MOVLB  0
0F90C:  CALL   2232
0F910:  MOVFF  226,A26
0F914:  MOVLW  37
0F916:  MOVLB  A
0F918:  MOVWF  x27
0F91A:  MOVLB  0
0F91C:  CALL   2232
0F920:  MOVFF  225,A26
0F924:  MOVLW  37
0F926:  MOVLB  A
0F928:  MOVWF  x27
0F92A:  MOVLB  0
0F92C:  CALL   2232
0F930:  MOVFF  224,A26
0F934:  MOVLW  37
0F936:  MOVLB  A
0F938:  MOVWF  x27
0F93A:  MOVLB  0
0F93C:  CALL   2232
0F940:  MOVLW  1F
0F942:  MOVWF  FF6
0F944:  MOVLW  0C
0F946:  MOVWF  FF7
0F948:  MOVLW  00
0F94A:  MOVWF  FF8
0F94C:  MOVLW  03
0F94E:  MOVLB  A
0F950:  MOVWF  x0C
0F952:  MOVLB  0
0F954:  CALL   2026
....................         return;
0F958:  GOTO   FE0C
....................     }
....................     unsigned int32 mission_remaining = (unsigned int32)smf_address.end_address - read_address; // 読める残り
0F95C:  MOVLB  2
0F95E:  MOVF   x28,W
0F960:  SUBWF  x24,W
0F962:  MOVWF  x30
0F964:  MOVF   x29,W
0F966:  SUBWFB x25,W
0F968:  MOVWF  x31
0F96A:  MOVF   x2A,W
0F96C:  SUBWFB x26,W
0F96E:  MOVWF  x32
0F970:  MOVF   x2B,W
0F972:  SUBWFB x27,W
0F974:  MOVWF  x33
....................     if (read_size > mission_remaining) {
0F976:  MOVF   x33,W
0F978:  SUBWF  x2F,W
0F97A:  BTFSC  FD8.0
0F97C:  BRA    F984
0F97E:  MOVLB  0
0F980:  GOTO   FA56
0F984:  MOVLB  0
0F986:  BTFSS  FD8.2
0F988:  GOTO   F9CE
0F98C:  MOVLB  2
0F98E:  MOVF   x32,W
0F990:  SUBWF  x2E,W
0F992:  BTFSC  FD8.0
0F994:  BRA    F99C
0F996:  MOVLB  0
0F998:  GOTO   FA56
0F99C:  MOVLB  0
0F99E:  BTFSS  FD8.2
0F9A0:  GOTO   F9CE
0F9A4:  MOVLB  2
0F9A6:  MOVF   x31,W
0F9A8:  SUBWF  x2D,W
0F9AA:  BTFSC  FD8.0
0F9AC:  BRA    F9B4
0F9AE:  MOVLB  0
0F9B0:  GOTO   FA56
0F9B4:  MOVLB  0
0F9B6:  BTFSS  FD8.2
0F9B8:  GOTO   F9CE
0F9BC:  MOVLB  2
0F9BE:  MOVF   x2C,W
0F9C0:  SUBWF  x30,W
0F9C2:  BTFSS  FD8.0
0F9C4:  BRA    F9CC
0F9C6:  MOVLB  0
0F9C8:  GOTO   FA56
0F9CC:  MOVLB  0
....................         fprintf(PC, "Warn: Adjust read size from %lu to %lu (mission end)\r\n", read_size, mission_remaining);
0F9CE:  MOVLW  24
0F9D0:  MOVWF  FF6
0F9D2:  MOVLW  0C
0F9D4:  MOVWF  FF7
0F9D6:  MOVLW  00
0F9D8:  MOVWF  FF8
0F9DA:  MOVLW  1C
0F9DC:  MOVLB  A
0F9DE:  MOVWF  x0C
0F9E0:  MOVLB  0
0F9E2:  CALL   2026
0F9E6:  MOVLW  41
0F9E8:  MOVWF  FE9
0F9EA:  MOVFF  22F,247
0F9EE:  MOVFF  22E,246
0F9F2:  MOVFF  22D,245
0F9F6:  MOVFF  22C,244
0F9FA:  CALL   6056
0F9FE:  MOVLW  43
0FA00:  MOVWF  FF6
0FA02:  MOVLW  0C
0FA04:  MOVWF  FF7
0FA06:  MOVLW  00
0FA08:  MOVWF  FF8
0FA0A:  MOVLW  04
0FA0C:  MOVLB  A
0FA0E:  MOVWF  x0C
0FA10:  MOVLB  0
0FA12:  CALL   2026
0FA16:  MOVLW  41
0FA18:  MOVWF  FE9
0FA1A:  MOVFF  233,247
0FA1E:  MOVFF  232,246
0FA22:  MOVFF  231,245
0FA26:  MOVFF  230,244
0FA2A:  CALL   6056
0FA2E:  MOVLW  4A
0FA30:  MOVWF  FF6
0FA32:  MOVLW  0C
0FA34:  MOVWF  FF7
0FA36:  MOVLW  00
0FA38:  MOVWF  FF8
0FA3A:  MOVLW  10
0FA3C:  MOVLB  A
0FA3E:  MOVWF  x0C
0FA40:  MOVLB  0
0FA42:  CALL   2026
....................         read_size = mission_remaining;
0FA46:  MOVFF  233,22F
0FA4A:  MOVFF  232,22E
0FA4E:  MOVFF  231,22D
0FA52:  MOVFF  230,22C
....................     }
....................     if (read_size == 0) {
0FA56:  MOVLB  2
0FA58:  MOVF   x2C,F
0FA5A:  BTFSC  FD8.2
0FA5C:  BRA    FA64
0FA5E:  MOVLB  0
0FA60:  GOTO   FAAA
0FA64:  MOVLB  0
0FA66:  MOVLB  2
0FA68:  MOVF   x2D,F
0FA6A:  BTFSC  FD8.2
0FA6C:  BRA    FA74
0FA6E:  MOVLB  0
0FA70:  GOTO   FAAA
0FA74:  MOVLB  0
0FA76:  MOVLB  2
0FA78:  MOVF   x2E,F
0FA7A:  BTFSC  FD8.2
0FA7C:  BRA    FA84
0FA7E:  MOVLB  0
0FA80:  GOTO   FAAA
0FA84:  MOVLB  0
0FA86:  MOVLB  2
0FA88:  MOVF   x2F,F
0FA8A:  BTFSC  FD8.2
0FA8C:  BRA    FA94
0FA8E:  MOVLB  0
0FA90:  GOTO   FAAA
0FA94:  MOVLB  0
....................         fprintf(PC, "Info: Nothing to read (size=0)\r\n");
0FA96:  MOVLW  5C
0FA98:  MOVWF  FF6
0FA9A:  MOVLW  0C
0FA9C:  MOVWF  FF7
0FA9E:  MOVLW  00
0FAA0:  MOVWF  FF8
0FAA2:  CALL   1FF0
....................         return;
0FAA6:  GOTO   FE0C
....................     }
.................... 
....................     fprintf(PC, "In SMF Read source data address: %LX\r\n", read_address);
0FAAA:  MOVLW  7E
0FAAC:  MOVWF  FF6
0FAAE:  MOVLW  0C
0FAB0:  MOVWF  FF7
0FAB2:  MOVLW  00
0FAB4:  MOVWF  FF8
0FAB6:  MOVLW  21
0FAB8:  MOVLB  A
0FABA:  MOVWF  x0C
0FABC:  MOVLB  0
0FABE:  CALL   2026
0FAC2:  MOVFF  22B,A26
0FAC6:  MOVLW  37
0FAC8:  MOVLB  A
0FACA:  MOVWF  x27
0FACC:  MOVLB  0
0FACE:  CALL   2232
0FAD2:  MOVFF  22A,A26
0FAD6:  MOVLW  37
0FAD8:  MOVLB  A
0FADA:  MOVWF  x27
0FADC:  MOVLB  0
0FADE:  CALL   2232
0FAE2:  MOVFF  229,A26
0FAE6:  MOVLW  37
0FAE8:  MOVLB  A
0FAEA:  MOVWF  x27
0FAEC:  MOVLB  0
0FAEE:  CALL   2232
0FAF2:  MOVFF  228,A26
0FAF6:  MOVLW  37
0FAF8:  MOVLB  A
0FAFA:  MOVWF  x27
0FAFC:  MOVLB  0
0FAFE:  CALL   2232
0FB02:  MOVLW  0D
0FB04:  BTFSS  FA6.6
0FB06:  GOTO   FB04
0FB0A:  MOVLB  E
0FB0C:  MOVWF  xF9
0FB0E:  MOVLW  0A
0FB10:  MOVLB  0
0FB12:  BTFSS  FA6.6
0FB14:  GOTO   FB12
0FB18:  MOVLB  E
0FB1A:  MOVWF  xF9
....................     fprintf(PC, "In SMF Read data size          : %lu (0x%lx)\r\n\r\n", read_size, read_size);
0FB1C:  MOVLW  A6
0FB1E:  MOVWF  FF6
0FB20:  MOVLW  0C
0FB22:  MOVWF  FF7
0FB24:  MOVLW  00
0FB26:  MOVWF  FF8
0FB28:  MOVLW  21
0FB2A:  MOVLB  A
0FB2C:  MOVWF  x0C
0FB2E:  MOVLB  0
0FB30:  CALL   2026
0FB34:  MOVLW  41
0FB36:  MOVWF  FE9
0FB38:  MOVFF  22F,247
0FB3C:  MOVFF  22E,246
0FB40:  MOVFF  22D,245
0FB44:  MOVFF  22C,244
0FB48:  CALL   6056
0FB4C:  MOVLW  CA
0FB4E:  MOVWF  FF6
0FB50:  MOVLW  0C
0FB52:  MOVWF  FF7
0FB54:  MOVLW  00
0FB56:  MOVWF  FF8
0FB58:  MOVLW  04
0FB5A:  MOVLB  A
0FB5C:  MOVWF  x0C
0FB5E:  MOVLB  0
0FB60:  CALL   2026
0FB64:  MOVFF  22F,A26
0FB68:  MOVLW  57
0FB6A:  MOVLB  A
0FB6C:  MOVWF  x27
0FB6E:  MOVLB  0
0FB70:  CALL   2232
0FB74:  MOVFF  22E,A26
0FB78:  MOVLW  57
0FB7A:  MOVLB  A
0FB7C:  MOVWF  x27
0FB7E:  MOVLB  0
0FB80:  CALL   2232
0FB84:  MOVFF  22D,A26
0FB88:  MOVLW  57
0FB8A:  MOVLB  A
0FB8C:  MOVWF  x27
0FB8E:  MOVLB  0
0FB90:  CALL   2232
0FB94:  MOVFF  22C,A26
0FB98:  MOVLW  57
0FB9A:  MOVLB  A
0FB9C:  MOVWF  x27
0FB9E:  MOVLB  0
0FBA0:  CALL   2232
0FBA4:  MOVLW  D1
0FBA6:  MOVWF  FF6
0FBA8:  MOVLW  0C
0FBAA:  MOVWF  FF7
0FBAC:  MOVLW  00
0FBAE:  MOVWF  FF8
0FBB0:  MOVLW  05
0FBB2:  MOVLB  A
0FBB4:  MOVWF  x0C
0FBB6:  MOVLB  0
0FBB8:  CALL   2026
.................... 
....................     if (!is_connect(smf)){
0FBBC:  MOVFF  119,284
0FBC0:  MOVFF  118,283
0FBC4:  MOVFF  117,282
0FBC8:  MOVFF  116,281
0FBCC:  CALL   2AF2
0FBD0:  MOVF   01,F
0FBD2:  BTFSS  FD8.2
0FBD4:  GOTO   FBE8
....................         fprintf(PC, "Error: SMF is not connected\r\n");
0FBD8:  MOVLW  D8
0FBDA:  MOVWF  FF6
0FBDC:  MOVLW  0C
0FBDE:  MOVWF  FF7
0FBE0:  MOVLW  00
0FBE2:  MOVWF  FF8
0FBE4:  CALL   1FF0
....................     }
....................     fprintf(PC, "READ DATA FROM SMF...\r\n");
0FBE8:  MOVLW  F6
0FBEA:  MOVWF  FF6
0FBEC:  MOVLW  0C
0FBEE:  MOVWF  FF7
0FBF0:  MOVLW  00
0FBF2:  MOVWF  FF8
0FBF4:  CALL   1FF0
....................     unsigned int32 end_address = read_address + read_size;
0FBF8:  MOVLB  2
0FBFA:  MOVF   x2C,W
0FBFC:  ADDWF  x28,W
0FBFE:  MOVWF  x34
0FC00:  MOVF   x2D,W
0FC02:  ADDWFC x29,W
0FC04:  MOVWF  x35
0FC06:  MOVF   x2E,W
0FC08:  ADDWFC x2A,W
0FC0A:  MOVWF  x36
0FC0C:  MOVF   x2F,W
0FC0E:  ADDWFC x2B,W
0FC10:  MOVWF  x37
....................     for (unsigned int32 addr = read_address; addr < end_address; addr += PACKET_SIZE) {
0FC12:  MOVFF  22B,23B
0FC16:  MOVFF  22A,23A
0FC1A:  MOVFF  229,239
0FC1E:  MOVFF  228,238
0FC22:  MOVLB  0
0FC24:  MOVLB  2
0FC26:  MOVF   x3B,W
0FC28:  SUBWF  x37,W
0FC2A:  BTFSC  FD8.0
0FC2C:  BRA    FC34
0FC2E:  MOVLB  0
0FC30:  GOTO   FDEC
0FC34:  MOVLB  0
0FC36:  BTFSS  FD8.2
0FC38:  GOTO   FC7E
0FC3C:  MOVLB  2
0FC3E:  MOVF   x3A,W
0FC40:  SUBWF  x36,W
0FC42:  BTFSC  FD8.0
0FC44:  BRA    FC4C
0FC46:  MOVLB  0
0FC48:  GOTO   FDEC
0FC4C:  MOVLB  0
0FC4E:  BTFSS  FD8.2
0FC50:  GOTO   FC7E
0FC54:  MOVLB  2
0FC56:  MOVF   x39,W
0FC58:  SUBWF  x35,W
0FC5A:  BTFSC  FD8.0
0FC5C:  BRA    FC64
0FC5E:  MOVLB  0
0FC60:  GOTO   FDEC
0FC64:  MOVLB  0
0FC66:  BTFSS  FD8.2
0FC68:  GOTO   FC7E
0FC6C:  MOVLB  2
0FC6E:  MOVF   x34,W
0FC70:  SUBWF  x38,W
0FC72:  BTFSS  FD8.0
0FC74:  BRA    FC7C
0FC76:  MOVLB  0
0FC78:  GOTO   FDEC
0FC7C:  MOVLB  0
....................         unsigned int16 chunk = (end_address - addr) >= PACKET_SIZE ? PACKET_SIZE : (unsigned int16)(end_address - addr);
0FC7E:  MOVLB  2
0FC80:  MOVF   x38,W
0FC82:  SUBWF  x34,W
0FC84:  MOVWF  x40
0FC86:  MOVF   x39,W
0FC88:  SUBWFB x35,W
0FC8A:  MOVWF  x41
0FC8C:  MOVF   x3A,W
0FC8E:  SUBWFB x36,W
0FC90:  MOVWF  x42
0FC92:  MOVF   x3B,W
0FC94:  SUBWFB x37,W
0FC96:  MOVWF  x43
0FC98:  MOVF   x43,F
0FC9A:  BTFSC  FD8.2
0FC9C:  BRA    FCA4
0FC9E:  MOVLB  0
0FCA0:  GOTO   FCD8
0FCA4:  MOVLB  0
0FCA6:  MOVLB  2
0FCA8:  MOVF   x42,F
0FCAA:  BTFSC  FD8.2
0FCAC:  BRA    FCB4
0FCAE:  MOVLB  0
0FCB0:  GOTO   FCD8
0FCB4:  MOVLB  0
0FCB6:  MOVLB  2
0FCB8:  MOVF   x41,F
0FCBA:  BTFSC  FD8.2
0FCBC:  BRA    FCC4
0FCBE:  MOVLB  0
0FCC0:  GOTO   FCD8
0FCC4:  MOVLB  0
0FCC6:  MOVLB  2
0FCC8:  MOVF   x40,W
0FCCA:  SUBLW  3F
0FCCC:  BTFSS  FD8.0
0FCCE:  BRA    FCD6
0FCD0:  MOVLB  0
0FCD2:  GOTO   FCE0
0FCD6:  MOVLB  0
0FCD8:  CLRF   03
0FCDA:  MOVLW  40
0FCDC:  GOTO   FD02
0FCE0:  MOVLB  2
0FCE2:  MOVF   x38,W
0FCE4:  SUBWF  x34,W
0FCE6:  MOVWF  00
0FCE8:  MOVF   x39,W
0FCEA:  SUBWFB x35,W
0FCEC:  MOVWF  01
0FCEE:  MOVF   x3A,W
0FCF0:  SUBWFB x36,W
0FCF2:  MOVWF  02
0FCF4:  MOVF   x3B,W
0FCF6:  SUBWFB x37,W
0FCF8:  MOVWF  03
0FCFA:  MOVFF  01,03
0FCFE:  MOVF   00,W
0FD00:  MOVLB  0
0FD02:  MOVLB  2
0FD04:  MOVWF  x3C
0FD06:  MOVFF  03,23D
0FD0A:  MOVLB  0
....................         read_data_bytes(smf, addr, buffer, chunk);
0FD0C:  MOVFF  119,B37
0FD10:  MOVFF  118,B36
0FD14:  MOVFF  117,B35
0FD18:  MOVFF  116,B34
0FD1C:  MOVFF  23B,B3B
0FD20:  MOVFF  23A,B3A
0FD24:  MOVFF  239,B39
0FD28:  MOVFF  238,B38
0FD2C:  MOVLW  01
0FD2E:  MOVLB  B
0FD30:  MOVWF  x3D
0FD32:  MOVLW  E0
0FD34:  MOVWF  x3C
0FD36:  CLRF   x41
0FD38:  CLRF   x40
0FD3A:  MOVFF  23D,B3F
0FD3E:  MOVFF  23C,B3E
0FD42:  MOVLB  0
0FD44:  CALL   2BDE
....................         for (unsigned int16 i = 0; i < chunk; i++) fprintf(PC, "%02X ", buffer[i]);
0FD48:  MOVLB  2
0FD4A:  CLRF   x3F
0FD4C:  CLRF   x3E
0FD4E:  MOVLB  0
0FD50:  MOVLB  2
0FD52:  MOVF   x3F,W
0FD54:  SUBWF  x3D,W
0FD56:  BTFSC  FD8.0
0FD58:  BRA    FD60
0FD5A:  MOVLB  0
0FD5C:  GOTO   FDB8
0FD60:  MOVLB  0
0FD62:  BTFSS  FD8.2
0FD64:  GOTO   FD7A
0FD68:  MOVLB  2
0FD6A:  MOVF   x3C,W
0FD6C:  SUBWF  x3E,W
0FD6E:  BTFSS  FD8.0
0FD70:  BRA    FD78
0FD72:  MOVLB  0
0FD74:  GOTO   FDB8
0FD78:  MOVLB  0
0FD7A:  MOVLW  E0
0FD7C:  MOVLB  2
0FD7E:  ADDWF  x3E,W
0FD80:  MOVWF  FE9
0FD82:  MOVLW  01
0FD84:  ADDWFC x3F,W
0FD86:  MOVWF  FEA
0FD88:  MOVFF  FEF,240
0FD8C:  MOVFF  240,A26
0FD90:  MOVLW  37
0FD92:  MOVLB  A
0FD94:  MOVWF  x27
0FD96:  MOVLB  0
0FD98:  CALL   2232
0FD9C:  MOVLW  20
0FD9E:  BTFSS  FA6.6
0FDA0:  GOTO   FD9E
0FDA4:  MOVLB  E
0FDA6:  MOVWF  xF9
0FDA8:  MOVLB  0
0FDAA:  MOVLB  2
0FDAC:  INCF   x3E,F
0FDAE:  BTFSC  FD8.2
0FDB0:  INCF   x3F,F
0FDB2:  MOVLB  0
0FDB4:  GOTO   FD50
....................         fprintf(PC, "\r\n");
0FDB8:  MOVLW  0D
0FDBA:  BTFSS  FA6.6
0FDBC:  GOTO   FDBA
0FDC0:  MOVLB  E
0FDC2:  MOVWF  xF9
0FDC4:  MOVLW  0A
0FDC6:  MOVLB  0
0FDC8:  BTFSS  FA6.6
0FDCA:  GOTO   FDC8
0FDCE:  MOVLB  E
0FDD0:  MOVWF  xF9
0FDD2:  MOVLB  0
0FDD4:  MOVLW  40
0FDD6:  MOVLB  2
0FDD8:  ADDWF  x38,F
0FDDA:  MOVLW  00
0FDDC:  ADDWFC x39,F
0FDDE:  MOVLW  00
0FDE0:  ADDWFC x3A,F
0FDE2:  MOVLW  00
0FDE4:  ADDWFC x3B,F
0FDE6:  MOVLB  0
0FDE8:  GOTO   FC24
....................     }
....................     fprintf(PC, "\r\n___End SMF Read____\r\n");
0FDEC:  MOVLW  0E
0FDEE:  MOVWF  FF6
0FDF0:  MOVLW  0D
0FDF2:  MOVWF  FF7
0FDF4:  MOVLW  00
0FDF6:  MOVWF  FF8
0FDF8:  CALL   1FF0
....................     fprintf(PC, "____________________\r\n\r\n");
0FDFC:  MOVLW  26
0FDFE:  MOVWF  FF6
0FE00:  MOVLW  0D
0FE02:  MOVWF  FF7
0FE04:  MOVLW  00
0FE06:  MOVWF  FF8
0FE08:  CALL   1FF0
0FE0C:  GOTO   11654 (RETURN)
.................... }
.................... 
.................... void smf_erase(FlashOperationStruct *smf_data)
.................... {
....................     fprintf(PC, "\r\n____________________\r\n");
*
10DD0:  MOVLW  40
10DD2:  MOVWF  FF6
10DD4:  MOVLW  0D
10DD6:  MOVWF  FF7
10DD8:  MOVLW  00
10DDA:  MOVWF  FF8
10DDC:  CALL   1FF0
....................     fprintf(PC, "___Start smf_erase____\r\n");
10DE0:  MOVLW  5A
10DE2:  MOVWF  FF6
10DE4:  MOVLW  0D
10DE6:  MOVWF  FF7
10DE8:  MOVLW  00
10DEA:  MOVWF  FF8
10DEC:  CALL   1FF0
.................... 
....................     SmfAddressStruct mission_type = get_smf_address_struct(smf_data->mission_id);
....................     unsigned int32 erase_address = smf_data->misf_start_addr;
....................     unsigned int32 erase_size = smf_data->misf_size;
10DF0:  MOVLB  1
10DF2:  MOVF   xDE,W
10DF4:  MOVWF  FE9
10DF6:  MOVF   xDF,W
10DF8:  MOVWF  FEA
10DFA:  MOVFF  FEF,1F8
10DFE:  MOVFF  1F8,247
10E02:  MOVLB  0
10E04:  CALL   F55C
10E08:  MOVFF  02,03
10E0C:  MOVF   01,W
10E0E:  MOVWF  FE1
10E10:  MOVFF  03,FE2
10E14:  MOVLW  01
10E16:  MOVWF  FEA
10E18:  MOVLW  E0
10E1A:  MOVWF  FE9
10E1C:  MOVLW  08
10E1E:  MOVWF  01
10E20:  MOVFF  FE6,FEE
10E24:  DECFSZ 01,F
10E26:  GOTO   10E20
10E2A:  MOVLW  04
10E2C:  MOVLB  1
10E2E:  ADDWF  xDE,W
10E30:  MOVWF  FE9
10E32:  MOVLW  00
10E34:  ADDWFC xDF,W
10E36:  MOVWF  FEA
10E38:  MOVFF  FEF,1E8
10E3C:  MOVFF  FEC,1E9
10E40:  MOVFF  FEC,1EA
10E44:  MOVFF  FEC,1EB
10E48:  MOVF   FED,F
10E4A:  MOVF   FED,F
10E4C:  MOVF   FED,F
10E4E:  MOVLW  08
10E50:  ADDWF  xDE,W
10E52:  MOVWF  FE9
10E54:  MOVLW  00
10E56:  ADDWFC xDF,W
10E58:  MOVWF  FEA
10E5A:  MOVFF  FEF,1EC
10E5E:  MOVFF  FEC,1ED
10E62:  MOVFF  FEC,1EE
10E66:  MOVFF  FEC,1EF
10E6A:  MOVF   FED,F
10E6C:  MOVF   FED,F
10E6E:  MOVF   FED,F
....................     fprintf(PC, "[SMF] Erase address   : %LX\r\n", erase_address);
10E70:  MOVLW  74
10E72:  MOVWF  FF6
10E74:  MOVLW  0D
10E76:  MOVWF  FF7
10E78:  MOVLW  00
10E7A:  MOVWF  FF8
10E7C:  MOVLW  18
10E7E:  MOVLB  A
10E80:  MOVWF  x0C
10E82:  MOVLB  0
10E84:  CALL   2026
10E88:  MOVFF  1EB,A26
10E8C:  MOVLW  37
10E8E:  MOVLB  A
10E90:  MOVWF  x27
10E92:  MOVLB  0
10E94:  CALL   2232
10E98:  MOVFF  1EA,A26
10E9C:  MOVLW  37
10E9E:  MOVLB  A
10EA0:  MOVWF  x27
10EA2:  MOVLB  0
10EA4:  CALL   2232
10EA8:  MOVFF  1E9,A26
10EAC:  MOVLW  37
10EAE:  MOVLB  A
10EB0:  MOVWF  x27
10EB2:  MOVLB  0
10EB4:  CALL   2232
10EB8:  MOVFF  1E8,A26
10EBC:  MOVLW  37
10EBE:  MOVLB  A
10EC0:  MOVWF  x27
10EC2:  MOVLB  0
10EC4:  CALL   2232
10EC8:  MOVLW  0D
10ECA:  BTFSS  FA6.6
10ECC:  GOTO   10ECA
10ED0:  MOVLB  E
10ED2:  MOVWF  xF9
10ED4:  MOVLW  0A
10ED6:  MOVLB  0
10ED8:  BTFSS  FA6.6
10EDA:  GOTO   10ED8
10EDE:  MOVLB  E
10EE0:  MOVWF  xF9
....................     fprintf(PC, "[SMF] Erase data size : %lu (0x%lx)\r\n\r\n", erase_size, erase_size);
10EE2:  MOVLW  92
10EE4:  MOVWF  FF6
10EE6:  MOVLW  0D
10EE8:  MOVWF  FF7
10EEA:  MOVLW  00
10EEC:  MOVWF  FF8
10EEE:  MOVLW  18
10EF0:  MOVLB  A
10EF2:  MOVWF  x0C
10EF4:  MOVLB  0
10EF6:  CALL   2026
10EFA:  MOVLW  41
10EFC:  MOVWF  FE9
10EFE:  MOVFF  1EF,247
10F02:  MOVFF  1EE,246
10F06:  MOVFF  1ED,245
10F0A:  MOVFF  1EC,244
10F0E:  CALL   6056
10F12:  MOVLW  AD
10F14:  MOVWF  FF6
10F16:  MOVLW  0D
10F18:  MOVWF  FF7
10F1A:  MOVLW  00
10F1C:  MOVWF  FF8
10F1E:  MOVLW  04
10F20:  MOVLB  A
10F22:  MOVWF  x0C
10F24:  MOVLB  0
10F26:  CALL   2026
10F2A:  MOVFF  1EF,A26
10F2E:  MOVLW  57
10F30:  MOVLB  A
10F32:  MOVWF  x27
10F34:  MOVLB  0
10F36:  CALL   2232
10F3A:  MOVFF  1EE,A26
10F3E:  MOVLW  57
10F40:  MOVLB  A
10F42:  MOVWF  x27
10F44:  MOVLB  0
10F46:  CALL   2232
10F4A:  MOVFF  1ED,A26
10F4E:  MOVLW  57
10F50:  MOVLB  A
10F52:  MOVWF  x27
10F54:  MOVLB  0
10F56:  CALL   2232
10F5A:  MOVFF  1EC,A26
10F5E:  MOVLW  57
10F60:  MOVLB  A
10F62:  MOVWF  x27
10F64:  MOVLB  0
10F66:  CALL   2232
10F6A:  MOVLW  B4
10F6C:  MOVWF  FF6
10F6E:  MOVLW  0D
10F70:  MOVWF  FF7
10F72:  MOVLW  00
10F74:  MOVWF  FF8
10F76:  MOVLW  05
10F78:  MOVLB  A
10F7A:  MOVWF  x0C
10F7C:  MOVLB  0
10F7E:  CALL   2026
.................... 
....................     if (!is_connect(smf)){
10F82:  MOVFF  119,284
10F86:  MOVFF  118,283
10F8A:  MOVFF  117,282
10F8E:  MOVFF  116,281
10F92:  CALL   2AF2
10F96:  MOVF   01,F
10F98:  BTFSS  FD8.2
10F9A:  GOTO   10FB2
....................         fprintf(PC, "Error: SMF is not connected\r\n");
10F9E:  MOVLW  BA
10FA0:  MOVWF  FF6
10FA2:  MOVLW  0D
10FA4:  MOVWF  FF7
10FA6:  MOVLW  00
10FA8:  MOVWF  FF8
10FAA:  CALL   1FF0
....................         return;
10FAE:  GOTO   1144E
....................     }
.................... 
....................     // Check if erase operation is within mission_type range
....................     if (erase_address < mission_type.start_address || erase_address >= mission_type.end_address) {
10FB2:  MOVLB  1
10FB4:  MOVF   xEB,W
10FB6:  SUBWF  xE3,W
10FB8:  BTFSC  FD8.0
10FBA:  BRA    10FC2
10FBC:  MOVLB  0
10FBE:  GOTO   1100C
10FC2:  MOVLB  0
10FC4:  BTFSS  FD8.2
10FC6:  GOTO   11066
10FCA:  MOVLB  1
10FCC:  MOVF   xEA,W
10FCE:  SUBWF  xE2,W
10FD0:  BTFSC  FD8.0
10FD2:  BRA    10FDA
10FD4:  MOVLB  0
10FD6:  GOTO   1100C
10FDA:  MOVLB  0
10FDC:  BTFSS  FD8.2
10FDE:  GOTO   11066
10FE2:  MOVLB  1
10FE4:  MOVF   xE9,W
10FE6:  SUBWF  xE1,W
10FE8:  BTFSC  FD8.0
10FEA:  BRA    10FF2
10FEC:  MOVLB  0
10FEE:  GOTO   1100C
10FF2:  MOVLB  0
10FF4:  BTFSS  FD8.2
10FF6:  GOTO   11066
10FFA:  MOVLB  1
10FFC:  MOVF   xE0,W
10FFE:  SUBWF  xE8,W
11000:  BTFSC  FD8.0
11002:  BRA    1100A
11004:  MOVLB  0
11006:  GOTO   11066
1100A:  MOVLB  0
1100C:  MOVLB  1
1100E:  MOVF   xE7,W
11010:  SUBWF  xEB,W
11012:  BTFSC  FD8.0
11014:  BRA    1101C
11016:  MOVLB  0
11018:  GOTO   1118A
1101C:  MOVLB  0
1101E:  BTFSS  FD8.2
11020:  GOTO   11066
11024:  MOVLB  1
11026:  MOVF   xE6,W
11028:  SUBWF  xEA,W
1102A:  BTFSC  FD8.0
1102C:  BRA    11034
1102E:  MOVLB  0
11030:  GOTO   1118A
11034:  MOVLB  0
11036:  BTFSS  FD8.2
11038:  GOTO   11066
1103C:  MOVLB  1
1103E:  MOVF   xE5,W
11040:  SUBWF  xE9,W
11042:  BTFSC  FD8.0
11044:  BRA    1104C
11046:  MOVLB  0
11048:  GOTO   1118A
1104C:  MOVLB  0
1104E:  BTFSS  FD8.2
11050:  GOTO   11066
11054:  MOVLB  1
11056:  MOVF   xE4,W
11058:  SUBWF  xE8,W
1105A:  BTFSC  FD8.0
1105C:  BRA    11064
1105E:  MOVLB  0
11060:  GOTO   1118A
11064:  MOVLB  0
....................         fprintf(PC, "Error: Erase source address 0x%LX is outside mission range [0x%LX - 0x%LX]\r\n", 
....................                 erase_address, mission_type.start_address, mission_type.end_address);
11066:  MOVLW  D8
11068:  MOVWF  FF6
1106A:  MOVLW  0D
1106C:  MOVWF  FF7
1106E:  MOVLW  00
11070:  MOVWF  FF8
11072:  MOVLW  1E
11074:  MOVLB  A
11076:  MOVWF  x0C
11078:  MOVLB  0
1107A:  CALL   2026
1107E:  MOVFF  1EB,A26
11082:  MOVLW  37
11084:  MOVLB  A
11086:  MOVWF  x27
11088:  MOVLB  0
1108A:  CALL   2232
1108E:  MOVFF  1EA,A26
11092:  MOVLW  37
11094:  MOVLB  A
11096:  MOVWF  x27
11098:  MOVLB  0
1109A:  CALL   2232
1109E:  MOVFF  1E9,A26
110A2:  MOVLW  37
110A4:  MOVLB  A
110A6:  MOVWF  x27
110A8:  MOVLB  0
110AA:  CALL   2232
110AE:  MOVFF  1E8,A26
110B2:  MOVLW  37
110B4:  MOVLB  A
110B6:  MOVWF  x27
110B8:  MOVLB  0
110BA:  CALL   2232
110BE:  MOVLW  F9
110C0:  MOVWF  FF6
110C2:  MOVLW  0D
110C4:  MOVWF  FF7
110C6:  MOVLW  00
110C8:  MOVWF  FF8
110CA:  MOVLW  1D
110CC:  MOVLB  A
110CE:  MOVWF  x0C
110D0:  MOVLB  0
110D2:  CALL   2026
110D6:  MOVFF  1E3,A26
110DA:  MOVLW  37
110DC:  MOVLB  A
110DE:  MOVWF  x27
110E0:  MOVLB  0
110E2:  CALL   2232
110E6:  MOVFF  1E2,A26
110EA:  MOVLW  37
110EC:  MOVLB  A
110EE:  MOVWF  x27
110F0:  MOVLB  0
110F2:  CALL   2232
110F6:  MOVFF  1E1,A26
110FA:  MOVLW  37
110FC:  MOVLB  A
110FE:  MOVWF  x27
11100:  MOVLB  0
11102:  CALL   2232
11106:  MOVFF  1E0,A26
1110A:  MOVLW  37
1110C:  MOVLB  A
1110E:  MOVWF  x27
11110:  MOVLB  0
11112:  CALL   2232
11116:  MOVLW  19
11118:  MOVWF  FF6
1111A:  MOVLW  0E
1111C:  MOVWF  FF7
1111E:  MOVLW  00
11120:  MOVWF  FF8
11122:  MOVLW  05
11124:  MOVLB  A
11126:  MOVWF  x0C
11128:  MOVLB  0
1112A:  CALL   2026
1112E:  MOVFF  1E7,A26
11132:  MOVLW  37
11134:  MOVLB  A
11136:  MOVWF  x27
11138:  MOVLB  0
1113A:  CALL   2232
1113E:  MOVFF  1E6,A26
11142:  MOVLW  37
11144:  MOVLB  A
11146:  MOVWF  x27
11148:  MOVLB  0
1114A:  CALL   2232
1114E:  MOVFF  1E5,A26
11152:  MOVLW  37
11154:  MOVLB  A
11156:  MOVWF  x27
11158:  MOVLB  0
1115A:  CALL   2232
1115E:  MOVFF  1E4,A26
11162:  MOVLW  37
11164:  MOVLB  A
11166:  MOVWF  x27
11168:  MOVLB  0
1116A:  CALL   2232
1116E:  MOVLW  21
11170:  MOVWF  FF6
11172:  MOVLW  0E
11174:  MOVWF  FF7
11176:  MOVLW  00
11178:  MOVWF  FF8
1117A:  MOVLW  03
1117C:  MOVLB  A
1117E:  MOVWF  x0C
11180:  MOVLB  0
11182:  CALL   2026
....................         return;
11186:  GOTO   1144E
....................     }
.................... 
....................     if ((erase_address + erase_size) > mission_type.end_address) {
1118A:  MOVLB  1
1118C:  MOVF   xEC,W
1118E:  ADDWF  xE8,W
11190:  MOVWF  xF8
11192:  MOVF   xED,W
11194:  ADDWFC xE9,W
11196:  MOVWF  xF9
11198:  MOVF   xEE,W
1119A:  ADDWFC xEA,W
1119C:  MOVWF  xFA
1119E:  MOVF   xEF,W
111A0:  ADDWFC xEB,W
111A2:  MOVWF  xFB
111A4:  MOVF   xE7,W
111A6:  SUBWF  xFB,W
111A8:  BTFSC  FD8.0
111AA:  BRA    111B2
111AC:  MOVLB  0
111AE:  GOTO   1129C
111B2:  MOVLB  0
111B4:  BTFSS  FD8.2
111B6:  GOTO   111FC
111BA:  MOVLB  1
111BC:  MOVF   xE6,W
111BE:  SUBWF  xFA,W
111C0:  BTFSC  FD8.0
111C2:  BRA    111CA
111C4:  MOVLB  0
111C6:  GOTO   1129C
111CA:  MOVLB  0
111CC:  BTFSS  FD8.2
111CE:  GOTO   111FC
111D2:  MOVLB  1
111D4:  MOVF   xE5,W
111D6:  SUBWF  xF9,W
111D8:  BTFSC  FD8.0
111DA:  BRA    111E2
111DC:  MOVLB  0
111DE:  GOTO   1129C
111E2:  MOVLB  0
111E4:  BTFSS  FD8.2
111E6:  GOTO   111FC
111EA:  MOVLB  1
111EC:  MOVF   xF8,W
111EE:  SUBWF  xE4,W
111F0:  BTFSS  FD8.0
111F2:  BRA    111FA
111F4:  MOVLB  0
111F6:  GOTO   1129C
111FA:  MOVLB  0
....................         fprintf(PC, "Error: Erase operation would exceed mission end address 0x%LX\r\n", mission_type.end_address);
111FC:  MOVLW  26
111FE:  MOVWF  FF6
11200:  MOVLW  0E
11202:  MOVWF  FF7
11204:  MOVLW  00
11206:  MOVWF  FF8
11208:  MOVLW  3A
1120A:  MOVLB  A
1120C:  MOVWF  x0C
1120E:  MOVLB  0
11210:  CALL   2026
11214:  MOVFF  1E7,A26
11218:  MOVLW  37
1121A:  MOVLB  A
1121C:  MOVWF  x27
1121E:  MOVLB  0
11220:  CALL   2232
11224:  MOVFF  1E6,A26
11228:  MOVLW  37
1122A:  MOVLB  A
1122C:  MOVWF  x27
1122E:  MOVLB  0
11230:  CALL   2232
11234:  MOVFF  1E5,A26
11238:  MOVLW  37
1123A:  MOVLB  A
1123C:  MOVWF  x27
1123E:  MOVLB  0
11240:  CALL   2232
11244:  MOVFF  1E4,A26
11248:  MOVLW  37
1124A:  MOVLB  A
1124C:  MOVWF  x27
1124E:  MOVLB  0
11250:  CALL   2232
11254:  MOVLW  0D
11256:  BTFSS  FA6.6
11258:  GOTO   11256
1125C:  MOVLB  E
1125E:  MOVWF  xF9
11260:  MOVLW  0A
11262:  MOVLB  0
11264:  BTFSS  FA6.6
11266:  GOTO   11264
1126A:  MOVLB  E
1126C:  MOVWF  xF9
....................         fprintf(PC, "Limiting erase size to stay within mission bounds\r\n");
1126E:  MOVLW  66
11270:  MOVWF  FF6
11272:  MOVLW  0E
11274:  MOVWF  FF7
11276:  MOVLW  00
11278:  MOVWF  FF8
1127A:  MOVLB  0
1127C:  CALL   1FF0
....................         erase_size = mission_type.end_address - erase_address;
11280:  MOVLB  1
11282:  MOVF   xE8,W
11284:  SUBWF  xE4,W
11286:  MOVWF  xEC
11288:  MOVF   xE9,W
1128A:  SUBWFB xE5,W
1128C:  MOVWF  xED
1128E:  MOVF   xEA,W
11290:  SUBWFB xE6,W
11292:  MOVWF  xEE
11294:  MOVF   xEB,W
11296:  SUBWFB xE7,W
11298:  MOVWF  xEF
1129A:  MOVLB  0
....................     }
.................... 
....................     fprintf(PC, "Erase operation validated within mission range\r\n");
1129C:  MOVLW  9A
1129E:  MOVWF  FF6
112A0:  MOVLW  0E
112A2:  MOVWF  FF7
112A4:  MOVLW  00
112A6:  MOVWF  FF8
112A8:  CALL   1FF0
....................     unsigned int32 erase_end = erase_address + erase_size;
....................     // 4KB境界開始へアライン
....................     unsigned int32 current = erase_address & ~0xFFF;
112AC:  MOVLB  1
112AE:  MOVF   xEC,W
112B0:  ADDWF  xE8,W
112B2:  MOVWF  xF0
112B4:  MOVF   xED,W
112B6:  ADDWFC xE9,W
112B8:  MOVWF  xF1
112BA:  MOVF   xEE,W
112BC:  ADDWFC xEA,W
112BE:  MOVWF  xF2
112C0:  MOVF   xEF,W
112C2:  ADDWFC xEB,W
112C4:  MOVWF  xF3
112C6:  CLRF   xF4
112C8:  MOVF   xE9,W
112CA:  ANDLW  F0
112CC:  MOVWF  xF5
112CE:  CLRF   xF6
112D0:  CLRF   xF7
112D2:  MOVLB  0
....................     while (current < erase_end && current < (unsigned int32)mission_type.end_address) {
112D4:  MOVLB  1
112D6:  MOVF   xF7,W
112D8:  SUBWF  xF3,W
112DA:  BTFSC  FD8.0
112DC:  BRA    112E4
112DE:  MOVLB  0
112E0:  GOTO   113C0
112E4:  MOVLB  0
112E6:  BTFSS  FD8.2
112E8:  GOTO   1132E
112EC:  MOVLB  1
112EE:  MOVF   xF6,W
112F0:  SUBWF  xF2,W
112F2:  BTFSC  FD8.0
112F4:  BRA    112FC
112F6:  MOVLB  0
112F8:  GOTO   113C0
112FC:  MOVLB  0
112FE:  BTFSS  FD8.2
11300:  GOTO   1132E
11304:  MOVLB  1
11306:  MOVF   xF5,W
11308:  SUBWF  xF1,W
1130A:  BTFSC  FD8.0
1130C:  BRA    11314
1130E:  MOVLB  0
11310:  GOTO   113C0
11314:  MOVLB  0
11316:  BTFSS  FD8.2
11318:  GOTO   1132E
1131C:  MOVLB  1
1131E:  MOVF   xF0,W
11320:  SUBWF  xF4,W
11322:  BTFSS  FD8.0
11324:  BRA    1132C
11326:  MOVLB  0
11328:  GOTO   113C0
1132C:  MOVLB  0
1132E:  MOVLB  1
11330:  MOVF   xF7,W
11332:  SUBWF  xE7,W
11334:  BTFSC  FD8.0
11336:  BRA    1133E
11338:  MOVLB  0
1133A:  GOTO   113C0
1133E:  MOVLB  0
11340:  BTFSS  FD8.2
11342:  GOTO   11388
11346:  MOVLB  1
11348:  MOVF   xF6,W
1134A:  SUBWF  xE6,W
1134C:  BTFSC  FD8.0
1134E:  BRA    11356
11350:  MOVLB  0
11352:  GOTO   113C0
11356:  MOVLB  0
11358:  BTFSS  FD8.2
1135A:  GOTO   11388
1135E:  MOVLB  1
11360:  MOVF   xF5,W
11362:  SUBWF  xE5,W
11364:  BTFSC  FD8.0
11366:  BRA    1136E
11368:  MOVLB  0
1136A:  GOTO   113C0
1136E:  MOVLB  0
11370:  BTFSS  FD8.2
11372:  GOTO   11388
11376:  MOVLB  1
11378:  MOVF   xE4,W
1137A:  SUBWF  xF4,W
1137C:  BTFSS  FD8.0
1137E:  BRA    11386
11380:  MOVLB  0
11382:  GOTO   113C0
11386:  MOVLB  0
....................         subsector_4kByte_erase(smf, current);
11388:  MOVFF  119,A51
1138C:  MOVFF  118,A50
11390:  MOVFF  117,A4F
11394:  MOVFF  116,A4E
11398:  MOVFF  1F7,A55
1139C:  MOVFF  1F6,A54
113A0:  MOVFF  1F5,A53
113A4:  MOVFF  1F4,A52
113A8:  CALL   4AC2
....................         current += SUBSECTOR_SIZE;
113AC:  MOVLW  10
113AE:  MOVLB  1
113B0:  ADDWF  xF5,F
113B2:  MOVLW  00
113B4:  ADDWFC xF6,F
113B6:  MOVLW  00
113B8:  ADDWFC xF7,F
113BA:  MOVLB  0
113BC:  GOTO   112D4
....................     }
....................     fprintf(PC, "Erased %lu bytes (aligned)\r\n", (current - (erase_address & ~0xFFF)));
113C0:  CLRF   00
113C2:  MOVLB  1
113C4:  MOVF   xE9,W
113C6:  ANDLW  F0
113C8:  MOVWF  01
113CA:  CLRF   02
113CC:  CLRF   03
113CE:  MOVF   00,W
113D0:  SUBWF  xF4,W
113D2:  MOVWF  xF8
113D4:  MOVF   01,W
113D6:  SUBWFB xF5,W
113D8:  MOVWF  xF9
113DA:  MOVF   02,W
113DC:  SUBWFB xF6,W
113DE:  MOVWF  xFA
113E0:  MOVF   03,W
113E2:  SUBWFB xF7,W
113E4:  MOVWF  xFB
113E6:  MOVLW  CC
113E8:  MOVWF  FF6
113EA:  MOVLW  0E
113EC:  MOVWF  FF7
113EE:  MOVLW  00
113F0:  MOVWF  FF8
113F2:  MOVLW  07
113F4:  MOVLB  A
113F6:  MOVWF  x0C
113F8:  MOVLB  0
113FA:  CALL   2026
113FE:  MOVLW  41
11400:  MOVWF  FE9
11402:  MOVFF  1FB,247
11406:  MOVFF  1FA,246
1140A:  MOVFF  1F9,245
1140E:  MOVFF  1F8,244
11412:  CALL   6056
11416:  MOVLW  D6
11418:  MOVWF  FF6
1141A:  MOVLW  0E
1141C:  MOVWF  FF7
1141E:  MOVLW  00
11420:  MOVWF  FF8
11422:  MOVLW  12
11424:  MOVLB  A
11426:  MOVWF  x0C
11428:  MOVLB  0
1142A:  CALL   2026
.................... 
....................     fprintf(PC, "\r\n___End smf_erase____\r\n");
1142E:  MOVLW  EA
11430:  MOVWF  FF6
11432:  MOVLW  0E
11434:  MOVWF  FF7
11436:  MOVLW  00
11438:  MOVWF  FF8
1143A:  CALL   1FF0
....................     fprintf(PC, "____________________\r\n\r\n");
1143E:  MOVLW  04
11440:  MOVWF  FF6
11442:  MOVLW  0F
11444:  MOVWF  FF7
11446:  MOVLW  00
11448:  MOVWF  FF8
1144A:  CALL   1FF0
1144E:  GOTO   11664 (RETURN)
.................... }
.................... 
.................... // End of file
.................... 
.................... #include "domain/sato_flash.c"
.................... #include "sato_flash.h"                           
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../hal/sato_config.h"             
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... // ADC Settings
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS1_VOLT  
.................... #define ADC_DIODE_INNER_CURR    ADC_CIGS1_CURR 
.................... #define ADC_DIODE_INNER_AMP    ADC_CIGS1_AMP   
.................... #define ADC_DIODE_INNER_VREF   ADC_CIGS1_VREF  
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS2_VOLT  
.................... #define ADC_DIODE_OUTER_CURR   ADC_CIGS2_CURR  
.................... #define ADC_DIODE_OUTER_AMP    ADC_CIGS2_AMP   
.................... #define ADC_DIODE_OUTER_VREF   ADC_CIGS2_VREF  
.................... #define ADC_DIODE_INNER_DAC    ADC_CIGS1_DAC   
.................... #define ADC_DIODE_OUTER_DAC    ADC_CIGS2_DAC   
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/device/mt25q.h"                
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/tool/calc_tools.h"             
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... #include "../lib/tool/smf_queue.h"              
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... 
.................... const ADDRESS_AREA_T MISF_ADDRESS_TABLE[FLASH_ID_COUNT] = {
....................     { MISF_CIGS_DATA_TABLE_START,   MISF_CIGS_DATA_TABLE_END,   MISF_CIGS_DATA_TABLE_SIZE },
....................     { MISF_CIGS_PICLOG_START,       MISF_CIGS_PICLOG_END,       MISF_CIGS_PICLOG_SIZE },
....................     { MISF_CIGS_ENVIRO_START,       MISF_CIGS_ENVIRO_END,       MISF_CIGS_ENVIRO_SIZE },
....................     { MISF_CIGS_IV1_HEADER_START,   MISF_CIGS_IV1_HEADER_END,   MISF_CIGS_IV1_HEADER_SIZE },
....................     { MISF_CIGS_IV1_DATA_START,     MISF_CIGS_IV1_DATA_END,     MISF_CIGS_IV1_DATA_SIZE },
....................     { MISF_CIGS_IV2_HEADER_START,   MISF_CIGS_IV2_HEADER_END,   MISF_CIGS_IV2_HEADER_SIZE },
....................     { MISF_CIGS_IV2_DATA_START,     MISF_CIGS_IV2_DATA_END,     MISF_CIGS_IV2_DATA_SIZE }
.................... };
.................... 
.................... FlashCounter_t misf_counter_table[FLASH_ID_COUNT];
.................... FlashCounter_t *misf_counter_table_ptr[FLASH_ID_COUNT] = {&misf_counter_table[0], &misf_counter_table[1], &misf_counter_table[2], &misf_counter_table[3], &misf_counter_table[4], &misf_counter_table[5], &misf_counter_table[6]};
.................... 
.................... void misf_init()
.................... {
....................     fprintf(PC, "MISSION FLASH Initialize\r\n");
*
03668:  MOVLW  1E
0366A:  MOVWF  FF6
0366C:  MOVLW  0F
0366E:  MOVWF  FF7
03670:  MOVLW  00
03672:  MOVWF  FF8
03674:  CALL   1FF0
....................     output_high(MIS_FM_CS);
03678:  MOVLW  FE
0367A:  MOVWF  F98
0367C:  BSF    F8F.0
....................     output_high(SMF_CS);
0367E:  MOVLW  FB
03680:  MOVWF  F92
03682:  BSF    F89.2
.................... 
....................     // 接続処理
....................     if (is_connect(mis_fm)) {
03684:  MOVFF  115,284
03688:  MOVFF  114,283
0368C:  MOVFF  113,282
03690:  MOVFF  112,281
03694:  CALL   2AF2
03698:  MOVF   01,F
0369A:  BTFSC  FD8.2
0369C:  GOTO   36B4
....................         fprintf(PC, "\t[MIS FM] Connected\r\n");
036A0:  MOVLW  3A
036A2:  MOVWF  FF6
036A4:  MOVLW  0F
036A6:  MOVWF  FF7
036A8:  MOVLW  00
036AA:  MOVWF  FF8
036AC:  CALL   1FF0
....................     } else {
036B0:  GOTO   36C4
....................         fprintf(PC, "\t[MIS FM] Not Connected\r\n");
036B4:  MOVLW  50
036B6:  MOVWF  FF6
036B8:  MOVLW  0F
036BA:  MOVWF  FF7
036BC:  MOVLW  00
036BE:  MOVWF  FF8
036C0:  CALL   1FF0
....................     }
....................     if (is_connect(smf)) {
036C4:  MOVFF  119,284
036C8:  MOVFF  118,283
036CC:  MOVFF  117,282
036D0:  MOVFF  116,281
036D4:  CALL   2AF2
036D8:  MOVF   01,F
036DA:  BTFSC  FD8.2
036DC:  GOTO   36F4
....................         fprintf(PC, "\t[SMF] Connected\r\n");
036E0:  MOVLW  6A
036E2:  MOVWF  FF6
036E4:  MOVLW  0F
036E6:  MOVWF  FF7
036E8:  MOVLW  00
036EA:  MOVWF  FF8
036EC:  CALL   1FF0
....................     } else {
036F0:  GOTO   3704
....................         fprintf(PC, "\t[SMF] Not Connected\r\n");
036F4:  MOVLW  7E
036F6:  MOVWF  FF6
036F8:  MOVLW  0F
036FA:  MOVWF  FF7
036FC:  MOVLW  00
036FE:  MOVWF  FF8
03700:  CALL   1FF0
....................     }
.................... 
....................     //=== MIS_FM カウンタテーブル読出し ===//
....................     FlashData_t read_header;
....................     FlashData_t *read_header_ptr = &read_header;
03704:  MOVLW  02
03706:  MOVLB  2
03708:  MOVWF  x74
0370A:  MOVLW  33
0370C:  MOVWF  x73
....................     memset(read_header_ptr, 0x00, sizeof(FlashData_t));
0370E:  MOVFF  274,FEA
03712:  MOVFF  273,FE9
03716:  CLRF   00
03718:  CLRF   02
0371A:  MOVLW  40
0371C:  MOVWF  01
0371E:  MOVLB  0
03720:  CALL   2BBA
....................     fprintf(PC, "\t[MIS FM] %08LX\r\n", MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
03724:  MOVLW  96
03726:  MOVWF  FF6
03728:  MOVLW  0F
0372A:  MOVWF  FF7
0372C:  MOVLW  00
0372E:  MOVWF  FF8
03730:  MOVLW  0A
03732:  MOVLB  A
03734:  MOVWF  x0C
03736:  MOVLB  0
03738:  CALL   2026
0373C:  MOVLB  A
0373E:  CLRF   x26
03740:  MOVLW  37
03742:  MOVWF  x27
03744:  MOVLB  0
03746:  CALL   2232
0374A:  MOVLB  A
0374C:  CLRF   x26
0374E:  MOVLW  37
03750:  MOVWF  x27
03752:  MOVLB  0
03754:  CALL   2232
03758:  MOVLB  A
0375A:  CLRF   x26
0375C:  MOVLW  37
0375E:  MOVWF  x27
03760:  MOVLB  0
03762:  CALL   2232
03766:  MOVLB  A
03768:  CLRF   x26
0376A:  MOVLW  37
0376C:  MOVWF  x27
0376E:  MOVLB  0
03770:  CALL   2232
03774:  MOVLW  0D
03776:  BTFSS  FA6.6
03778:  GOTO   3776
0377C:  MOVLB  E
0377E:  MOVWF  xF9
03780:  MOVLW  0A
03782:  MOVLB  0
03784:  BTFSS  FA6.6
03786:  GOTO   3784
0378A:  MOVLB  E
0378C:  MOVWF  xF9
....................     read_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, read_header_ptr->bytes, PACKET_SIZE);
0378E:  MOVLB  2
03790:  MOVF   x73,W
03792:  MOVWF  01
03794:  MOVF   x74,W
03796:  MOVWF  03
03798:  MOVF   01,W
0379A:  MOVWF  x75
0379C:  MOVFF  03,276
037A0:  MOVFF  115,B37
037A4:  MOVFF  114,B36
037A8:  MOVFF  113,B35
037AC:  MOVFF  112,B34
037B0:  MOVLB  B
037B2:  CLRF   x3B
037B4:  CLRF   x3A
037B6:  CLRF   x39
037B8:  CLRF   x38
037BA:  MOVFF  276,B3D
037BE:  MOVFF  275,B3C
037C2:  CLRF   x41
037C4:  CLRF   x40
037C6:  CLRF   x3F
037C8:  MOVLW  40
037CA:  MOVWF  x3E
037CC:  MOVLB  0
037CE:  CALL   2BDE
.................... 
....................     // CRC 検証
....................     if (read_header_ptr->packet.crc != calc_crc8(read_header_ptr->bytes, PACKET_SIZE - 1)) {
037D2:  MOVLW  3F
037D4:  MOVLB  2
037D6:  ADDWF  x73,W
037D8:  MOVWF  FE9
037DA:  MOVLW  00
037DC:  ADDWFC x74,W
037DE:  MOVWF  FEA
037E0:  MOVFF  FEF,275
037E4:  MOVF   x73,W
037E6:  MOVWF  01
037E8:  MOVF   x74,W
037EA:  MOVWF  03
037EC:  MOVF   01,W
037EE:  MOVWF  x76
037F0:  MOVFF  03,277
037F4:  MOVFF  277,B35
037F8:  MOVFF  276,B34
037FC:  MOVLW  3F
037FE:  MOVLB  B
03800:  MOVWF  x36
03802:  MOVLB  0
03804:  CALL   2DF2
03808:  MOVF   01,W
0380A:  MOVLB  2
0380C:  SUBWF  x75,W
0380E:  BTFSS  FD8.2
03810:  BRA    3818
03812:  MOVLB  0
03814:  GOTO   382A
03818:  MOVLB  0
....................         fprintf(PC, "\t[MIS FM] CRC error -> initialize counters\r\n");
0381A:  MOVLW  A8
0381C:  MOVWF  FF6
0381E:  MOVLW  0F
03820:  MOVWF  FF7
03822:  MOVLW  00
03824:  MOVWF  FF8
03826:  CALL   1FF0
....................         
....................     }
....................     misf_counter_table[FLASH_ID_PICLOG]       = read_header_ptr->packet.payload.logdata.piclog;
0382A:  MOVLB  2
0382C:  MOVF   x73,W
0382E:  MOVWF  FE1
03830:  MOVF   x74,W
03832:  MOVWF  FE2
03834:  MOVLW  01
03836:  MOVWF  FEA
03838:  MOVLW  2C
0383A:  MOVWF  FE9
0383C:  MOVLW  0A
0383E:  MOVWF  01
03840:  MOVLB  0
03842:  MOVFF  FE6,FEE
03846:  DECFSZ 01,F
03848:  GOTO   3842
....................     misf_counter_table[FLASH_ID_ENVIRONMENT]  = read_header_ptr->packet.payload.logdata.environment;
0384C:  MOVLW  0A
0384E:  MOVLB  2
03850:  ADDWF  x73,W
03852:  MOVWF  FE1
03854:  MOVLW  00
03856:  ADDWFC x74,W
03858:  MOVWF  FE2
0385A:  MOVLW  01
0385C:  MOVWF  FEA
0385E:  MOVLW  36
03860:  MOVWF  FE9
03862:  MOVLW  0A
03864:  MOVWF  01
03866:  MOVLB  0
03868:  MOVFF  FE6,FEE
0386C:  DECFSZ 01,F
0386E:  GOTO   3868
....................     misf_counter_table[FLASH_ID_IV1_HEADER]   = read_header_ptr->packet.payload.logdata.iv1_header;
03872:  MOVLW  14
03874:  MOVLB  2
03876:  ADDWF  x73,W
03878:  MOVWF  FE1
0387A:  MOVLW  00
0387C:  ADDWFC x74,W
0387E:  MOVWF  FE2
03880:  MOVLW  01
03882:  MOVWF  FEA
03884:  MOVLW  40
03886:  MOVWF  FE9
03888:  MOVLW  0A
0388A:  MOVWF  01
0388C:  MOVLB  0
0388E:  MOVFF  FE6,FEE
03892:  DECFSZ 01,F
03894:  GOTO   388E
....................     misf_counter_table[FLASH_ID_IV1_DATA]     = read_header_ptr->packet.payload.logdata.iv1_data;
03898:  MOVLW  1E
0389A:  MOVLB  2
0389C:  ADDWF  x73,W
0389E:  MOVWF  FE1
038A0:  MOVLW  00
038A2:  ADDWFC x74,W
038A4:  MOVWF  FE2
038A6:  MOVLW  01
038A8:  MOVWF  FEA
038AA:  MOVLW  4A
038AC:  MOVWF  FE9
038AE:  MOVLW  0A
038B0:  MOVWF  01
038B2:  MOVLB  0
038B4:  MOVFF  FE6,FEE
038B8:  DECFSZ 01,F
038BA:  GOTO   38B4
....................     misf_counter_table[FLASH_ID_IV2_HEADER]   = read_header_ptr->packet.payload.logdata.iv2_header;
038BE:  MOVLW  28
038C0:  MOVLB  2
038C2:  ADDWF  x73,W
038C4:  MOVWF  FE1
038C6:  MOVLW  00
038C8:  ADDWFC x74,W
038CA:  MOVWF  FE2
038CC:  MOVLW  01
038CE:  MOVWF  FEA
038D0:  MOVLW  54
038D2:  MOVWF  FE9
038D4:  MOVLW  0A
038D6:  MOVWF  01
038D8:  MOVLB  0
038DA:  MOVFF  FE6,FEE
038DE:  DECFSZ 01,F
038E0:  GOTO   38DA
....................     misf_counter_table[FLASH_ID_IV2_DATA]     = read_header_ptr->packet.payload.logdata.iv2_data;
038E4:  MOVLW  32
038E6:  MOVLB  2
038E8:  ADDWF  x73,W
038EA:  MOVWF  FE1
038EC:  MOVLW  00
038EE:  ADDWFC x74,W
038F0:  MOVWF  FE2
038F2:  MOVLW  01
038F4:  MOVWF  FEA
038F6:  MOVLW  5E
038F8:  MOVWF  FE9
038FA:  MOVLW  0A
038FC:  MOVWF  01
038FE:  MOVLB  0
03900:  MOVFF  FE6,FEE
03904:  DECFSZ 01,F
03906:  GOTO   3900
.................... 
....................     print_misf_address_table();
0390A:  GOTO   2E5E
.................... 
....................     fprintf(PC, "\tComplete\r\n");
0390E:  MOVLW  D6
03910:  MOVWF  FF6
03912:  MOVLW  0F
03914:  MOVWF  FF7
03916:  MOVLW  00
03918:  MOVWF  FF8
0391A:  CALL   1FF0
0391E:  RETURN 0
.................... }
.................... 
.................... void print_misf_address_table()
.................... {
....................     fprintf(PC, "\tField\t\tCounterName\tValue\r\n");
*
02E5E:  MOVLW  E2
02E60:  MOVWF  FF6
02E62:  MOVLW  0F
02E64:  MOVWF  FF7
02E66:  MOVLW  00
02E68:  MOVWF  FF8
02E6A:  CALL   1FF0
....................     fprintf(PC, "\t------------\t-------------\t-------------\r\n");
02E6E:  MOVLW  FE
02E70:  MOVWF  FF6
02E72:  MOVLW  0F
02E74:  MOVWF  FF7
02E76:  MOVLW  00
02E78:  MOVWF  FF8
02E7A:  CALL   1FF0
....................     fprintf(PC, "\tPICLOG\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].used_counter);
02E7E:  MOVLW  2A
02E80:  MOVWF  FF6
02E82:  MOVLW  10
02E84:  MOVWF  FF7
02E86:  MOVLW  00
02E88:  MOVWF  FF8
02E8A:  MOVLW  11
02E8C:  MOVLB  A
02E8E:  MOVWF  x0C
02E90:  MOVLB  0
02E92:  CALL   2026
02E96:  MOVFF  12F,A26
02E9A:  MOVLW  37
02E9C:  MOVLB  A
02E9E:  MOVWF  x27
02EA0:  MOVLB  0
02EA2:  CALL   2232
02EA6:  MOVFF  12E,A26
02EAA:  MOVLW  37
02EAC:  MOVLB  A
02EAE:  MOVWF  x27
02EB0:  MOVLB  0
02EB2:  CALL   2232
02EB6:  MOVFF  12D,A26
02EBA:  MOVLW  37
02EBC:  MOVLB  A
02EBE:  MOVWF  x27
02EC0:  MOVLB  0
02EC2:  CALL   2232
02EC6:  MOVFF  12C,A26
02ECA:  MOVLW  37
02ECC:  MOVLB  A
02ECE:  MOVWF  x27
02ED0:  MOVLB  0
02ED2:  CALL   2232
02ED6:  MOVLW  0D
02ED8:  BTFSS  FA6.6
02EDA:  GOTO   2ED8
02EDE:  MOVLB  E
02EE0:  MOVWF  xF9
02EE2:  MOVLW  0A
02EE4:  MOVLB  0
02EE6:  BTFSS  FA6.6
02EE8:  GOTO   2EE6
02EEC:  MOVLB  E
02EEE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
02EF0:  MOVLW  44
02EF2:  MOVWF  FF6
02EF4:  MOVLW  10
02EF6:  MOVWF  FF7
02EF8:  MOVLW  00
02EFA:  MOVWF  FF8
02EFC:  MOVLW  0E
02EFE:  MOVLB  A
02F00:  MOVWF  x0C
02F02:  MOVLB  0
02F04:  CALL   2026
02F08:  MOVFF  133,A26
02F0C:  MOVLW  37
02F0E:  MOVLB  A
02F10:  MOVWF  x27
02F12:  MOVLB  0
02F14:  CALL   2232
02F18:  MOVFF  132,A26
02F1C:  MOVLW  37
02F1E:  MOVLB  A
02F20:  MOVWF  x27
02F22:  MOVLB  0
02F24:  CALL   2232
02F28:  MOVFF  131,A26
02F2C:  MOVLW  37
02F2E:  MOVLB  A
02F30:  MOVWF  x27
02F32:  MOVLB  0
02F34:  CALL   2232
02F38:  MOVFF  130,A26
02F3C:  MOVLW  37
02F3E:  MOVLB  A
02F40:  MOVWF  x27
02F42:  MOVLB  0
02F44:  CALL   2232
02F48:  MOVLW  0D
02F4A:  BTFSS  FA6.6
02F4C:  GOTO   2F4A
02F50:  MOVLB  E
02F52:  MOVWF  xF9
02F54:  MOVLW  0A
02F56:  MOVLB  0
02F58:  BTFSS  FA6.6
02F5A:  GOTO   2F58
02F5E:  MOVLB  E
02F60:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_PICLOG].reserve_counter1,misf_counter_table[FLASH_ID_PICLOG].reserve_counter2);
02F62:  MOVLW  5A
02F64:  MOVWF  FF6
02F66:  MOVLW  10
02F68:  MOVWF  FF7
02F6A:  MOVLW  00
02F6C:  MOVWF  FF8
02F6E:  MOVLW  0E
02F70:  MOVLB  A
02F72:  MOVWF  x0C
02F74:  MOVLB  0
02F76:  CALL   2026
02F7A:  MOVFF  134,A26
02F7E:  MOVLW  37
02F80:  MOVLB  A
02F82:  MOVWF  x27
02F84:  MOVLB  0
02F86:  CALL   2232
02F8A:  MOVLW  6C
02F8C:  MOVWF  FF6
02F8E:  MOVLW  10
02F90:  MOVWF  FF7
02F92:  MOVLW  00
02F94:  MOVWF  FF8
02F96:  MOVLW  04
02F98:  MOVLB  A
02F9A:  MOVWF  x0C
02F9C:  MOVLB  0
02F9E:  CALL   2026
02FA2:  MOVFF  135,A26
02FA6:  MOVLW  37
02FA8:  MOVLB  A
02FAA:  MOVWF  x27
02FAC:  MOVLB  0
02FAE:  CALL   2232
02FB2:  MOVLW  0D
02FB4:  BTFSS  FA6.6
02FB6:  GOTO   2FB4
02FBA:  MOVLB  E
02FBC:  MOVWF  xF9
02FBE:  MOVLW  0A
02FC0:  MOVLB  0
02FC2:  BTFSS  FA6.6
02FC4:  GOTO   2FC2
02FC8:  MOVLB  E
02FCA:  MOVWF  xF9
....................     fprintf(PC, "\tENVIRO\t\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].used_counter);
02FCC:  MOVLW  78
02FCE:  MOVWF  FF6
02FD0:  MOVLW  10
02FD2:  MOVWF  FF7
02FD4:  MOVLW  00
02FD6:  MOVWF  FF8
02FD8:  MOVLW  11
02FDA:  MOVLB  A
02FDC:  MOVWF  x0C
02FDE:  MOVLB  0
02FE0:  CALL   2026
02FE4:  MOVFF  139,A26
02FE8:  MOVLW  37
02FEA:  MOVLB  A
02FEC:  MOVWF  x27
02FEE:  MOVLB  0
02FF0:  CALL   2232
02FF4:  MOVFF  138,A26
02FF8:  MOVLW  37
02FFA:  MOVLB  A
02FFC:  MOVWF  x27
02FFE:  MOVLB  0
03000:  CALL   2232
03004:  MOVFF  137,A26
03008:  MOVLW  37
0300A:  MOVLB  A
0300C:  MOVWF  x27
0300E:  MOVLB  0
03010:  CALL   2232
03014:  MOVFF  136,A26
03018:  MOVLW  37
0301A:  MOVLB  A
0301C:  MOVWF  x27
0301E:  MOVLB  0
03020:  CALL   2232
03024:  MOVLW  0D
03026:  BTFSS  FA6.6
03028:  GOTO   3026
0302C:  MOVLB  E
0302E:  MOVWF  xF9
03030:  MOVLW  0A
03032:  MOVLB  0
03034:  BTFSS  FA6.6
03036:  GOTO   3034
0303A:  MOVLB  E
0303C:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].uncopied_counter);
0303E:  MOVLW  92
03040:  MOVWF  FF6
03042:  MOVLW  10
03044:  MOVWF  FF7
03046:  MOVLW  00
03048:  MOVWF  FF8
0304A:  MOVLW  0E
0304C:  MOVLB  A
0304E:  MOVWF  x0C
03050:  MOVLB  0
03052:  CALL   2026
03056:  MOVFF  13D,A26
0305A:  MOVLW  37
0305C:  MOVLB  A
0305E:  MOVWF  x27
03060:  MOVLB  0
03062:  CALL   2232
03066:  MOVFF  13C,A26
0306A:  MOVLW  37
0306C:  MOVLB  A
0306E:  MOVWF  x27
03070:  MOVLB  0
03072:  CALL   2232
03076:  MOVFF  13B,A26
0307A:  MOVLW  37
0307C:  MOVLB  A
0307E:  MOVWF  x27
03080:  MOVLB  0
03082:  CALL   2232
03086:  MOVFF  13A,A26
0308A:  MOVLW  37
0308C:  MOVLB  A
0308E:  MOVWF  x27
03090:  MOVLB  0
03092:  CALL   2232
03096:  MOVLW  0D
03098:  BTFSS  FA6.6
0309A:  GOTO   3098
0309E:  MOVLB  E
030A0:  MOVWF  xF9
030A2:  MOVLW  0A
030A4:  MOVLB  0
030A6:  BTFSS  FA6.6
030A8:  GOTO   30A6
030AC:  MOVLB  E
030AE:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter1,misf_counter_table[FLASH_ID_ENVIRONMENT].reserve_counter2);
030B0:  MOVLW  A8
030B2:  MOVWF  FF6
030B4:  MOVLW  10
030B6:  MOVWF  FF7
030B8:  MOVLW  00
030BA:  MOVWF  FF8
030BC:  MOVLW  0E
030BE:  MOVLB  A
030C0:  MOVWF  x0C
030C2:  MOVLB  0
030C4:  CALL   2026
030C8:  MOVFF  13E,A26
030CC:  MOVLW  37
030CE:  MOVLB  A
030D0:  MOVWF  x27
030D2:  MOVLB  0
030D4:  CALL   2232
030D8:  MOVLW  BA
030DA:  MOVWF  FF6
030DC:  MOVLW  10
030DE:  MOVWF  FF7
030E0:  MOVLW  00
030E2:  MOVWF  FF8
030E4:  MOVLW  04
030E6:  MOVLB  A
030E8:  MOVWF  x0C
030EA:  MOVLB  0
030EC:  CALL   2026
030F0:  MOVFF  13F,A26
030F4:  MOVLW  37
030F6:  MOVLB  A
030F8:  MOVWF  x27
030FA:  MOVLB  0
030FC:  CALL   2232
03100:  MOVLW  0D
03102:  BTFSS  FA6.6
03104:  GOTO   3102
03108:  MOVLB  E
0310A:  MOVWF  xF9
0310C:  MOVLW  0A
0310E:  MOVLB  0
03110:  BTFSS  FA6.6
03112:  GOTO   3110
03116:  MOVLB  E
03118:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].used_counter);
0311A:  MOVLW  C6
0311C:  MOVWF  FF6
0311E:  MOVLW  10
03120:  MOVWF  FF7
03122:  MOVLW  00
03124:  MOVWF  FF8
03126:  MOVLW  14
03128:  MOVLB  A
0312A:  MOVWF  x0C
0312C:  MOVLB  0
0312E:  CALL   2026
03132:  MOVFF  143,A26
03136:  MOVLW  37
03138:  MOVLB  A
0313A:  MOVWF  x27
0313C:  MOVLB  0
0313E:  CALL   2232
03142:  MOVFF  142,A26
03146:  MOVLW  37
03148:  MOVLB  A
0314A:  MOVWF  x27
0314C:  MOVLB  0
0314E:  CALL   2232
03152:  MOVFF  141,A26
03156:  MOVLW  37
03158:  MOVLB  A
0315A:  MOVWF  x27
0315C:  MOVLB  0
0315E:  CALL   2232
03162:  MOVFF  140,A26
03166:  MOVLW  37
03168:  MOVLB  A
0316A:  MOVWF  x27
0316C:  MOVLB  0
0316E:  CALL   2232
03172:  MOVLW  0D
03174:  BTFSS  FA6.6
03176:  GOTO   3174
0317A:  MOVLB  E
0317C:  MOVWF  xF9
0317E:  MOVLW  0A
03180:  MOVLB  0
03182:  BTFSS  FA6.6
03184:  GOTO   3182
03188:  MOVLB  E
0318A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].uncopied_counter);
0318C:  MOVLW  E2
0318E:  MOVWF  FF6
03190:  MOVLW  10
03192:  MOVWF  FF7
03194:  MOVLW  00
03196:  MOVWF  FF8
03198:  MOVLW  0E
0319A:  MOVLB  A
0319C:  MOVWF  x0C
0319E:  MOVLB  0
031A0:  CALL   2026
031A4:  MOVFF  147,A26
031A8:  MOVLW  37
031AA:  MOVLB  A
031AC:  MOVWF  x27
031AE:  MOVLB  0
031B0:  CALL   2232
031B4:  MOVFF  146,A26
031B8:  MOVLW  37
031BA:  MOVLB  A
031BC:  MOVWF  x27
031BE:  MOVLB  0
031C0:  CALL   2232
031C4:  MOVFF  145,A26
031C8:  MOVLW  37
031CA:  MOVLB  A
031CC:  MOVWF  x27
031CE:  MOVLB  0
031D0:  CALL   2232
031D4:  MOVFF  144,A26
031D8:  MOVLW  37
031DA:  MOVLB  A
031DC:  MOVWF  x27
031DE:  MOVLB  0
031E0:  CALL   2232
031E4:  MOVLW  0D
031E6:  BTFSS  FA6.6
031E8:  GOTO   31E6
031EC:  MOVLB  E
031EE:  MOVWF  xF9
031F0:  MOVLW  0A
031F2:  MOVLB  0
031F4:  BTFSS  FA6.6
031F6:  GOTO   31F4
031FA:  MOVLB  E
031FC:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV1_HEADER].reserve_counter2);
031FE:  MOVLW  F8
03200:  MOVWF  FF6
03202:  MOVLW  10
03204:  MOVWF  FF7
03206:  MOVLW  00
03208:  MOVWF  FF8
0320A:  MOVLW  0E
0320C:  MOVLB  A
0320E:  MOVWF  x0C
03210:  MOVLB  0
03212:  CALL   2026
03216:  MOVFF  148,A26
0321A:  MOVLW  37
0321C:  MOVLB  A
0321E:  MOVWF  x27
03220:  MOVLB  0
03222:  CALL   2232
03226:  MOVLW  0A
03228:  MOVWF  FF6
0322A:  MOVLW  11
0322C:  MOVWF  FF7
0322E:  MOVLW  00
03230:  MOVWF  FF8
03232:  MOVLW  04
03234:  MOVLB  A
03236:  MOVWF  x0C
03238:  MOVLB  0
0323A:  CALL   2026
0323E:  MOVFF  149,A26
03242:  MOVLW  37
03244:  MOVLB  A
03246:  MOVWF  x27
03248:  MOVLB  0
0324A:  CALL   2232
0324E:  MOVLW  0D
03250:  BTFSS  FA6.6
03252:  GOTO   3250
03256:  MOVLB  E
03258:  MOVWF  xF9
0325A:  MOVLW  0A
0325C:  MOVLB  0
0325E:  BTFSS  FA6.6
03260:  GOTO   325E
03264:  MOVLB  E
03266:  MOVWF  xF9
....................     fprintf(PC, "\tIV1 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].used_counter);
03268:  MOVLW  16
0326A:  MOVWF  FF6
0326C:  MOVLW  11
0326E:  MOVWF  FF7
03270:  MOVLW  00
03272:  MOVWF  FF8
03274:  MOVLW  12
03276:  MOVLB  A
03278:  MOVWF  x0C
0327A:  MOVLB  0
0327C:  CALL   2026
03280:  MOVFF  14D,A26
03284:  MOVLW  37
03286:  MOVLB  A
03288:  MOVWF  x27
0328A:  MOVLB  0
0328C:  CALL   2232
03290:  MOVFF  14C,A26
03294:  MOVLW  37
03296:  MOVLB  A
03298:  MOVWF  x27
0329A:  MOVLB  0
0329C:  CALL   2232
032A0:  MOVFF  14B,A26
032A4:  MOVLW  37
032A6:  MOVLB  A
032A8:  MOVWF  x27
032AA:  MOVLB  0
032AC:  CALL   2232
032B0:  MOVFF  14A,A26
032B4:  MOVLW  37
032B6:  MOVLB  A
032B8:  MOVWF  x27
032BA:  MOVLB  0
032BC:  CALL   2232
032C0:  MOVLW  0D
032C2:  BTFSS  FA6.6
032C4:  GOTO   32C2
032C8:  MOVLB  E
032CA:  MOVWF  xF9
032CC:  MOVLW  0A
032CE:  MOVLB  0
032D0:  BTFSS  FA6.6
032D2:  GOTO   32D0
032D6:  MOVLB  E
032D8:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV1_DATA].uncopied_counter);
032DA:  MOVLW  30
032DC:  MOVWF  FF6
032DE:  MOVLW  11
032E0:  MOVWF  FF7
032E2:  MOVLW  00
032E4:  MOVWF  FF8
032E6:  MOVLW  0E
032E8:  MOVLB  A
032EA:  MOVWF  x0C
032EC:  MOVLB  0
032EE:  CALL   2026
032F2:  MOVFF  151,A26
032F6:  MOVLW  37
032F8:  MOVLB  A
032FA:  MOVWF  x27
032FC:  MOVLB  0
032FE:  CALL   2232
03302:  MOVFF  150,A26
03306:  MOVLW  37
03308:  MOVLB  A
0330A:  MOVWF  x27
0330C:  MOVLB  0
0330E:  CALL   2232
03312:  MOVFF  14F,A26
03316:  MOVLW  37
03318:  MOVLB  A
0331A:  MOVWF  x27
0331C:  MOVLB  0
0331E:  CALL   2232
03322:  MOVFF  14E,A26
03326:  MOVLW  37
03328:  MOVLB  A
0332A:  MOVWF  x27
0332C:  MOVLB  0
0332E:  CALL   2232
03332:  MOVLW  0D
03334:  BTFSS  FA6.6
03336:  GOTO   3334
0333A:  MOVLB  E
0333C:  MOVWF  xF9
0333E:  MOVLW  0A
03340:  MOVLB  0
03342:  BTFSS  FA6.6
03344:  GOTO   3342
03348:  MOVLB  E
0334A:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV1_DATA].reserve_counter2);
0334C:  MOVLW  46
0334E:  MOVWF  FF6
03350:  MOVLW  11
03352:  MOVWF  FF7
03354:  MOVLW  00
03356:  MOVWF  FF8
03358:  MOVLW  0E
0335A:  MOVLB  A
0335C:  MOVWF  x0C
0335E:  MOVLB  0
03360:  CALL   2026
03364:  MOVFF  152,A26
03368:  MOVLW  37
0336A:  MOVLB  A
0336C:  MOVWF  x27
0336E:  MOVLB  0
03370:  CALL   2232
03374:  MOVLW  58
03376:  MOVWF  FF6
03378:  MOVLW  11
0337A:  MOVWF  FF7
0337C:  MOVLW  00
0337E:  MOVWF  FF8
03380:  MOVLW  04
03382:  MOVLB  A
03384:  MOVWF  x0C
03386:  MOVLB  0
03388:  CALL   2026
0338C:  MOVFF  153,A26
03390:  MOVLW  37
03392:  MOVLB  A
03394:  MOVWF  x27
03396:  MOVLB  0
03398:  CALL   2232
0339C:  MOVLW  0D
0339E:  BTFSS  FA6.6
033A0:  GOTO   339E
033A4:  MOVLB  E
033A6:  MOVWF  xF9
033A8:  MOVLW  0A
033AA:  MOVLB  0
033AC:  BTFSS  FA6.6
033AE:  GOTO   33AC
033B2:  MOVLB  E
033B4:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 HEADER\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].used_counter);
033B6:  MOVLW  64
033B8:  MOVWF  FF6
033BA:  MOVLW  11
033BC:  MOVWF  FF7
033BE:  MOVLW  00
033C0:  MOVWF  FF8
033C2:  MOVLW  14
033C4:  MOVLB  A
033C6:  MOVWF  x0C
033C8:  MOVLB  0
033CA:  CALL   2026
033CE:  MOVFF  157,A26
033D2:  MOVLW  37
033D4:  MOVLB  A
033D6:  MOVWF  x27
033D8:  MOVLB  0
033DA:  CALL   2232
033DE:  MOVFF  156,A26
033E2:  MOVLW  37
033E4:  MOVLB  A
033E6:  MOVWF  x27
033E8:  MOVLB  0
033EA:  CALL   2232
033EE:  MOVFF  155,A26
033F2:  MOVLW  37
033F4:  MOVLB  A
033F6:  MOVWF  x27
033F8:  MOVLB  0
033FA:  CALL   2232
033FE:  MOVFF  154,A26
03402:  MOVLW  37
03404:  MOVLB  A
03406:  MOVWF  x27
03408:  MOVLB  0
0340A:  CALL   2232
0340E:  MOVLW  0D
03410:  BTFSS  FA6.6
03412:  GOTO   3410
03416:  MOVLB  E
03418:  MOVWF  xF9
0341A:  MOVLW  0A
0341C:  MOVLB  0
0341E:  BTFSS  FA6.6
03420:  GOTO   341E
03424:  MOVLB  E
03426:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].uncopied_counter);
03428:  MOVLW  80
0342A:  MOVWF  FF6
0342C:  MOVLW  11
0342E:  MOVWF  FF7
03430:  MOVLW  00
03432:  MOVWF  FF8
03434:  MOVLW  0E
03436:  MOVLB  A
03438:  MOVWF  x0C
0343A:  MOVLB  0
0343C:  CALL   2026
03440:  MOVFF  15B,A26
03444:  MOVLW  37
03446:  MOVLB  A
03448:  MOVWF  x27
0344A:  MOVLB  0
0344C:  CALL   2232
03450:  MOVFF  15A,A26
03454:  MOVLW  37
03456:  MOVLB  A
03458:  MOVWF  x27
0345A:  MOVLB  0
0345C:  CALL   2232
03460:  MOVFF  159,A26
03464:  MOVLW  37
03466:  MOVLB  A
03468:  MOVWF  x27
0346A:  MOVLB  0
0346C:  CALL   2232
03470:  MOVFF  158,A26
03474:  MOVLW  37
03476:  MOVLB  A
03478:  MOVWF  x27
0347A:  MOVLB  0
0347C:  CALL   2232
03480:  MOVLW  0D
03482:  BTFSS  FA6.6
03484:  GOTO   3482
03488:  MOVLB  E
0348A:  MOVWF  xF9
0348C:  MOVLW  0A
0348E:  MOVLB  0
03490:  BTFSS  FA6.6
03492:  GOTO   3490
03496:  MOVLB  E
03498:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter1,misf_counter_table[FLASH_ID_IV2_HEADER].reserve_counter2);
0349A:  MOVLW  96
0349C:  MOVWF  FF6
0349E:  MOVLW  11
034A0:  MOVWF  FF7
034A2:  MOVLW  00
034A4:  MOVWF  FF8
034A6:  MOVLW  0E
034A8:  MOVLB  A
034AA:  MOVWF  x0C
034AC:  MOVLB  0
034AE:  CALL   2026
034B2:  MOVFF  15C,A26
034B6:  MOVLW  37
034B8:  MOVLB  A
034BA:  MOVWF  x27
034BC:  MOVLB  0
034BE:  CALL   2232
034C2:  MOVLW  A8
034C4:  MOVWF  FF6
034C6:  MOVLW  11
034C8:  MOVWF  FF7
034CA:  MOVLW  00
034CC:  MOVWF  FF8
034CE:  MOVLW  04
034D0:  MOVLB  A
034D2:  MOVWF  x0C
034D4:  MOVLB  0
034D6:  CALL   2026
034DA:  MOVFF  15D,A26
034DE:  MOVLW  37
034E0:  MOVLB  A
034E2:  MOVWF  x27
034E4:  MOVLB  0
034E6:  CALL   2232
034EA:  MOVLW  0D
034EC:  BTFSS  FA6.6
034EE:  GOTO   34EC
034F2:  MOVLB  E
034F4:  MOVWF  xF9
034F6:  MOVLW  0A
034F8:  MOVLB  0
034FA:  BTFSS  FA6.6
034FC:  GOTO   34FA
03500:  MOVLB  E
03502:  MOVWF  xF9
....................     fprintf(PC, "\tIV2 DATA\tUsed\t\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].used_counter);
03504:  MOVLW  B4
03506:  MOVWF  FF6
03508:  MOVLW  11
0350A:  MOVWF  FF7
0350C:  MOVLW  00
0350E:  MOVWF  FF8
03510:  MOVLW  12
03512:  MOVLB  A
03514:  MOVWF  x0C
03516:  MOVLB  0
03518:  CALL   2026
0351C:  MOVFF  161,A26
03520:  MOVLW  37
03522:  MOVLB  A
03524:  MOVWF  x27
03526:  MOVLB  0
03528:  CALL   2232
0352C:  MOVFF  160,A26
03530:  MOVLW  37
03532:  MOVLB  A
03534:  MOVWF  x27
03536:  MOVLB  0
03538:  CALL   2232
0353C:  MOVFF  15F,A26
03540:  MOVLW  37
03542:  MOVLB  A
03544:  MOVWF  x27
03546:  MOVLB  0
03548:  CALL   2232
0354C:  MOVFF  15E,A26
03550:  MOVLW  37
03552:  MOVLB  A
03554:  MOVWF  x27
03556:  MOVLB  0
03558:  CALL   2232
0355C:  MOVLW  0D
0355E:  BTFSS  FA6.6
03560:  GOTO   355E
03564:  MOVLB  E
03566:  MOVWF  xF9
03568:  MOVLW  0A
0356A:  MOVLB  0
0356C:  BTFSS  FA6.6
0356E:  GOTO   356C
03572:  MOVLB  E
03574:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tUncopyed\t0x%08LX\r\n", misf_counter_table[FLASH_ID_IV2_DATA].uncopied_counter);
03576:  MOVLW  CE
03578:  MOVWF  FF6
0357A:  MOVLW  11
0357C:  MOVWF  FF7
0357E:  MOVLW  00
03580:  MOVWF  FF8
03582:  MOVLW  0E
03584:  MOVLB  A
03586:  MOVWF  x0C
03588:  MOVLB  0
0358A:  CALL   2026
0358E:  MOVFF  165,A26
03592:  MOVLW  37
03594:  MOVLB  A
03596:  MOVWF  x27
03598:  MOVLB  0
0359A:  CALL   2232
0359E:  MOVFF  164,A26
035A2:  MOVLW  37
035A4:  MOVLB  A
035A6:  MOVWF  x27
035A8:  MOVLB  0
035AA:  CALL   2232
035AE:  MOVFF  163,A26
035B2:  MOVLW  37
035B4:  MOVLB  A
035B6:  MOVWF  x27
035B8:  MOVLB  0
035BA:  CALL   2232
035BE:  MOVFF  162,A26
035C2:  MOVLW  37
035C4:  MOVLB  A
035C6:  MOVWF  x27
035C8:  MOVLB  0
035CA:  CALL   2232
035CE:  MOVLW  0D
035D0:  BTFSS  FA6.6
035D2:  GOTO   35D0
035D6:  MOVLB  E
035D8:  MOVWF  xF9
035DA:  MOVLW  0A
035DC:  MOVLB  0
035DE:  BTFSS  FA6.6
035E0:  GOTO   35DE
035E4:  MOVLB  E
035E6:  MOVWF  xF9
....................     fprintf(PC, "\t\t\tReserve\t\t0x%02X/ 0x%02X\r\n", misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter1,misf_counter_table[FLASH_ID_IV2_DATA].reserve_counter2);
035E8:  MOVLW  E4
035EA:  MOVWF  FF6
035EC:  MOVLW  11
035EE:  MOVWF  FF7
035F0:  MOVLW  00
035F2:  MOVWF  FF8
035F4:  MOVLW  0E
035F6:  MOVLB  A
035F8:  MOVWF  x0C
035FA:  MOVLB  0
035FC:  CALL   2026
03600:  MOVFF  166,A26
03604:  MOVLW  37
03606:  MOVLB  A
03608:  MOVWF  x27
0360A:  MOVLB  0
0360C:  CALL   2232
03610:  MOVLW  F6
03612:  MOVWF  FF6
03614:  MOVLW  11
03616:  MOVWF  FF7
03618:  MOVLW  00
0361A:  MOVWF  FF8
0361C:  MOVLW  04
0361E:  MOVLB  A
03620:  MOVWF  x0C
03622:  MOVLB  0
03624:  CALL   2026
03628:  MOVFF  167,A26
0362C:  MOVLW  37
0362E:  MOVLB  A
03630:  MOVWF  x27
03632:  MOVLB  0
03634:  CALL   2232
03638:  MOVLW  0D
0363A:  BTFSS  FA6.6
0363C:  GOTO   363A
03640:  MOVLB  E
03642:  MOVWF  xF9
03644:  MOVLW  0A
03646:  MOVLB  0
03648:  BTFSS  FA6.6
0364A:  GOTO   3648
0364E:  MOVLB  E
03650:  MOVWF  xF9
....................     fprintf(PC, "\t==================================================\r\n");
03652:  MOVLW  02
03654:  MOVWF  FF6
03656:  MOVLW  12
03658:  MOVWF  FF7
0365A:  MOVLW  00
0365C:  MOVWF  FF8
0365E:  MOVLB  0
03660:  CALL   1FF0
03664:  GOTO   390E (RETURN)
.................... }
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size)
.................... {
....................     /*
....................     fprintf(PC, "[MIS FM] Write Data Size:%lu\r\n", size);
....................     fprintf(PC, "%08LX\r\n", MISF_ADDRESS_TABLE[id].start);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].used_counter);
....................     fprintf(PC, "%08LX\r\n", misf_counter_table[id].reserve_counter1);
....................     for (unsigned int32 j = 0; j < size; j++) {
....................         fprintf(PC, "%02X ", data_ptr[j]);
....................     }
....................     fprintf(PC, "\r\n");
....................     */
....................     // パケット境界チェック
....................     if (size == PACKET_SIZE){
*
03F8A:  MOVLB  A
03F8C:  MOVF   x9C,W
03F8E:  SUBLW  40
03F90:  BTFSC  FD8.2
03F92:  BRA    3F9A
03F94:  MOVLB  0
03F96:  GOTO   412A
03F9A:  MOVLB  0
03F9C:  MOVLB  A
03F9E:  MOVF   x9D,F
03FA0:  BTFSC  FD8.2
03FA2:  BRA    3FAA
03FA4:  MOVLB  0
03FA6:  GOTO   412A
03FAA:  MOVLB  0
....................         // fprintf(PC, "PACKET SIZE 64\r\n");
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
03FAC:  MOVLB  A
03FAE:  MOVF   x99,W
03FB0:  MULLW  0C
03FB2:  MOVF   FF3,W
03FB4:  MOVLB  B
03FB6:  CLRF   x35
03FB8:  MOVWF  x34
03FBA:  MOVFF  B35,03
03FBE:  MOVF   x34,W
03FC0:  MOVLB  0
03FC2:  CALL   014E
03FC6:  MOVWF  00
03FC8:  TBLRD*+
03FCA:  MOVFF  FF5,01
03FCE:  TBLRD*+
03FD0:  MOVFF  FF5,02
03FD4:  TBLRD*+
03FD6:  MOVFF  FF5,03
03FDA:  MOVFF  03,B39
03FDE:  MOVFF  02,B38
03FE2:  MOVFF  01,B37
03FE6:  MOVFF  00,B36
03FEA:  MOVLB  A
03FEC:  MOVF   x99,W
03FEE:  MULLW  0A
03FF0:  MOVF   FF3,W
03FF2:  MOVLB  B
03FF4:  CLRF   x3B
03FF6:  MOVWF  x3A
03FF8:  MOVLW  22
03FFA:  ADDWF  x3A,W
03FFC:  MOVWF  FE9
03FFE:  MOVLW  01
04000:  ADDWFC x3B,W
04002:  MOVWF  FEA
04004:  MOVFF  FEF,00
04008:  MOVFF  FEC,01
0400C:  MOVFF  FEC,02
04010:  MOVFF  FEC,03
04014:  MOVF   FED,F
04016:  MOVF   FED,F
04018:  MOVF   FED,F
0401A:  MOVF   00,W
0401C:  ADDWF  x36,W
0401E:  MOVLB  A
04020:  MOVWF  x9E
04022:  MOVF   01,W
04024:  MOVLB  B
04026:  ADDWFC x37,W
04028:  MOVLB  A
0402A:  MOVWF  x9F
0402C:  MOVF   02,W
0402E:  MOVLB  B
04030:  ADDWFC x38,W
04032:  MOVLB  A
04034:  MOVWF  xA0
04036:  MOVF   03,W
04038:  MOVLB  B
0403A:  ADDWFC x39,W
0403C:  MOVLB  A
0403E:  MOVWF  xA1
04040:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
04042:  MOVFF  115,B37
04046:  MOVFF  114,B36
0404A:  MOVFF  113,B35
0404E:  MOVFF  112,B34
04052:  MOVFF  AA1,B3B
04056:  MOVFF  AA0,B3A
0405A:  MOVFF  A9F,B39
0405E:  MOVFF  A9E,B38
04062:  MOVFF  A9B,B3D
04066:  MOVFF  A9A,B3C
0406A:  MOVFF  A9D,B3F
0406E:  MOVFF  A9C,B3E
04072:  CALL   3C3E
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         misf_counter_table[id].used_counter     += size;
04076:  MOVLB  A
04078:  MOVF   x99,W
0407A:  MULLW  0A
0407C:  MOVF   FF3,W
0407E:  MOVLB  B
04080:  CLRF   x35
04082:  MOVWF  x34
04084:  MOVLW  22
04086:  ADDWF  x34,W
04088:  MOVWF  FE9
0408A:  MOVLW  01
0408C:  ADDWFC x35,W
0408E:  MOVWF  FEA
04090:  MOVLB  A
04092:  MOVF   x9C,W
04094:  ADDWF  FEF,W
04096:  MOVWF  00
04098:  MOVF   x9D,W
0409A:  ADDWFC FEC,W
0409C:  MOVWF  01
0409E:  MOVLW  00
040A0:  ADDWFC FEC,W
040A2:  MOVWF  02
040A4:  MOVLW  00
040A6:  ADDWFC FEC,W
040A8:  MOVWF  03
040AA:  MOVF   FED,F
040AC:  MOVF   FED,F
040AE:  MOVF   FED,F
040B0:  MOVFF  00,FEF
040B4:  MOVFF  01,FEC
040B8:  MOVFF  02,FEC
040BC:  MOVFF  03,FEC
040C0:  MOVF   FED,F
040C2:  MOVF   FED,F
040C4:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
040C6:  MOVF   x99,W
040C8:  MULLW  0A
040CA:  MOVF   FF3,W
040CC:  MOVLB  B
040CE:  CLRF   x35
040D0:  MOVWF  x34
040D2:  MOVLW  04
040D4:  ADDWF  x34,W
040D6:  MOVWF  01
040D8:  MOVLW  00
040DA:  ADDWFC x35,W
040DC:  MOVWF  03
040DE:  MOVF   01,W
040E0:  ADDLW  22
040E2:  MOVWF  FE9
040E4:  MOVLW  01
040E6:  ADDWFC 03,W
040E8:  MOVWF  FEA
040EA:  MOVLB  A
040EC:  MOVF   x9C,W
040EE:  ADDWF  FEF,W
040F0:  MOVWF  00
040F2:  MOVF   x9D,W
040F4:  ADDWFC FEC,W
040F6:  MOVWF  01
040F8:  MOVLW  00
040FA:  ADDWFC FEC,W
040FC:  MOVWF  02
040FE:  MOVLW  00
04100:  ADDWFC FEC,W
04102:  MOVWF  03
04104:  MOVF   FED,F
04106:  MOVF   FED,F
04108:  MOVF   FED,F
0410A:  MOVFF  00,FEF
0410E:  MOVFF  01,FEC
04112:  MOVFF  02,FEC
04116:  MOVFF  03,FEC
0411A:  MOVF   FED,F
0411C:  MOVF   FED,F
0411E:  MOVF   FED,F
.................... 
....................         return;
04120:  MOVLB  0
04122:  GOTO   495E
....................     }
04126:  GOTO   47C0
....................     
....................     else if (misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1) {
0412A:  MOVLB  A
0412C:  MOVF   x99,W
0412E:  MULLW  0A
04130:  MOVF   FF3,W
04132:  MOVLB  B
04134:  CLRF   x35
04136:  MOVWF  x34
04138:  MOVLW  08
0413A:  ADDWF  x34,W
0413C:  MOVWF  01
0413E:  MOVLW  00
04140:  ADDWFC x35,W
04142:  MOVWF  03
04144:  MOVF   01,W
04146:  ADDLW  22
04148:  MOVWF  FE9
0414A:  MOVLW  01
0414C:  ADDWFC 03,W
0414E:  MOVWF  FEA
04150:  MOVF   FEF,W
04152:  MOVLB  A
04154:  ADDWF  x9C,W
04156:  MOVLB  B
04158:  MOVWF  x34
0415A:  MOVLW  00
0415C:  MOVLB  A
0415E:  ADDWFC x9D,W
04160:  MOVLB  B
04162:  MOVWF  x35
04164:  MOVF   x34,W
04166:  SUBLW  3F
04168:  BTFSC  FD8.2
0416A:  BRA    4172
0416C:  MOVLB  0
0416E:  GOTO   445A
04172:  MOVLB  0
04174:  MOVLB  B
04176:  MOVF   x35,F
04178:  BTFSC  FD8.2
0417A:  BRA    4182
0417C:  MOVLB  0
0417E:  GOTO   445A
04182:  MOVLB  0
....................         unsigned int8 blank_size = PACKET_SIZE - 1 - misf_counter_table[id].reserve_counter1;
....................         // fprintf(PC, "0x%02X", blank_size);
....................         unsigned int8 blank_data[PACKET_SIZE];
04184:  MOVLB  A
04186:  MOVF   x99,W
04188:  MULLW  0A
0418A:  MOVF   FF3,W
0418C:  MOVLB  B
0418E:  CLRF   x35
04190:  MOVWF  x34
04192:  MOVLW  08
04194:  ADDWF  x34,W
04196:  MOVWF  01
04198:  MOVLW  00
0419A:  ADDWFC x35,W
0419C:  MOVWF  03
0419E:  MOVF   01,W
041A0:  ADDLW  22
041A2:  MOVWF  FE9
041A4:  MOVLW  01
041A6:  ADDWFC 03,W
041A8:  MOVWF  FEA
041AA:  MOVF   FEF,W
041AC:  XORLW  FF
041AE:  ADDLW  40
041B0:  MOVLB  A
041B2:  MOVWF  xA2
041B4:  MOVLB  0
....................         memset(blank_data, 0, blank_size);
041B6:  MOVLW  0A
041B8:  MOVWF  FEA
041BA:  MOVLW  A3
041BC:  MOVWF  FE9
041BE:  CLRF   00
041C0:  CLRF   02
041C2:  MOVFF  AA2,01
041C6:  CALL   2BBA
.................... 
....................         // アドレス再計算
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
041CA:  MOVLB  A
041CC:  MOVF   x99,W
041CE:  MULLW  0C
041D0:  MOVF   FF3,W
041D2:  MOVLB  B
041D4:  CLRF   x35
041D6:  MOVWF  x34
041D8:  MOVFF  B35,03
041DC:  MOVF   x34,W
041DE:  MOVLB  0
041E0:  CALL   014E
041E4:  MOVWF  00
041E6:  TBLRD*+
041E8:  MOVFF  FF5,01
041EC:  TBLRD*+
041EE:  MOVFF  FF5,02
041F2:  TBLRD*+
041F4:  MOVFF  FF5,03
041F8:  MOVFF  03,B39
041FC:  MOVFF  02,B38
04200:  MOVFF  01,B37
04204:  MOVFF  00,B36
04208:  MOVLB  A
0420A:  MOVF   x99,W
0420C:  MULLW  0A
0420E:  MOVF   FF3,W
04210:  MOVLB  B
04212:  CLRF   x3B
04214:  MOVWF  x3A
04216:  MOVLW  22
04218:  ADDWF  x3A,W
0421A:  MOVWF  FE9
0421C:  MOVLW  01
0421E:  ADDWFC x3B,W
04220:  MOVWF  FEA
04222:  MOVFF  FEF,00
04226:  MOVFF  FEC,01
0422A:  MOVFF  FEC,02
0422E:  MOVFF  FEC,03
04232:  MOVF   FED,F
04234:  MOVF   FED,F
04236:  MOVF   FED,F
04238:  MOVF   00,W
0423A:  ADDWF  x36,W
0423C:  MOVLB  A
0423E:  MOVWF  xE3
04240:  MOVF   01,W
04242:  MOVLB  B
04244:  ADDWFC x37,W
04246:  MOVLB  A
04248:  MOVWF  xE4
0424A:  MOVF   02,W
0424C:  MOVLB  B
0424E:  ADDWFC x38,W
04250:  MOVLB  A
04252:  MOVWF  xE5
04254:  MOVF   03,W
04256:  MOVLB  B
04258:  ADDWFC x39,W
0425A:  MOVLB  A
0425C:  MOVWF  xE6
.................... 
....................         // 未使用部分を 0 埋め
....................         write_data_bytes(mis_fm, write_address, blank_data, blank_size);
0425E:  MOVFF  115,B37
04262:  MOVFF  114,B36
04266:  MOVFF  113,B35
0426A:  MOVFF  112,B34
0426E:  MOVFF  AE6,B3B
04272:  MOVFF  AE5,B3A
04276:  MOVFF  AE4,B39
0427A:  MOVFF  AE3,B38
0427E:  MOVLW  0A
04280:  MOVLB  B
04282:  MOVWF  x3D
04284:  MOVLW  A3
04286:  MOVWF  x3C
04288:  CLRF   x3F
0428A:  MOVFF  AA2,B3E
0428E:  MOVLB  0
04290:  CALL   3C3E
.................... 
....................         // CRC 計算（本体部分だけ読む）
....................         unsigned int8 packet_data[PACKET_SIZE - 1];
....................         unsigned int32 read_address = write_address + blank_size - PACKET_SIZE - 1;
04294:  MOVLB  A
04296:  MOVF   xA2,W
04298:  ADDWF  xE3,W
0429A:  MOVLB  B
0429C:  MOVWF  x34
0429E:  MOVLW  00
042A0:  MOVLB  A
042A2:  ADDWFC xE4,W
042A4:  MOVLB  B
042A6:  MOVWF  x35
042A8:  MOVLW  00
042AA:  MOVLB  A
042AC:  ADDWFC xE5,W
042AE:  MOVLB  B
042B0:  MOVWF  x36
042B2:  MOVLW  00
042B4:  MOVLB  A
042B6:  ADDWFC xE6,W
042B8:  MOVLB  B
042BA:  MOVWF  x37
042BC:  MOVLW  40
042BE:  SUBWF  x34,F
042C0:  MOVLW  00
042C2:  SUBWFB x35,F
042C4:  MOVLW  00
042C6:  SUBWFB x36,F
042C8:  MOVLW  00
042CA:  SUBWFB x37,F
042CC:  MOVLW  01
042CE:  SUBWF  x34,W
042D0:  MOVWF  x26
042D2:  MOVLW  00
042D4:  SUBWFB x35,W
042D6:  MOVWF  x27
042D8:  MOVLW  00
042DA:  SUBWFB x36,W
042DC:  MOVWF  x28
042DE:  MOVLW  00
042E0:  SUBWFB x37,W
042E2:  MOVWF  x29
....................         read_data_bytes(mis_fm, read_address, packet_data, PACKET_SIZE - 1);
042E4:  MOVFF  115,B37
042E8:  MOVFF  114,B36
042EC:  MOVFF  113,B35
042F0:  MOVFF  112,B34
042F4:  MOVFF  B29,B3B
042F8:  MOVFF  B28,B3A
042FC:  MOVFF  B27,B39
04300:  MOVFF  B26,B38
04304:  MOVLW  0A
04306:  MOVWF  x3D
04308:  MOVLW  E7
0430A:  MOVWF  x3C
0430C:  CLRF   x41
0430E:  CLRF   x40
04310:  CLRF   x3F
04312:  MOVLW  3F
04314:  MOVWF  x3E
04316:  MOVLB  0
04318:  CALL   2BDE
....................         unsigned int8 crc = calc_crc8(packet_data, PACKET_SIZE - 1);
0431C:  MOVLW  0A
0431E:  MOVLB  B
04320:  MOVWF  x35
04322:  MOVLW  E7
04324:  MOVWF  x34
04326:  MOVLW  3F
04328:  MOVWF  x36
0432A:  MOVLB  0
0432C:  CALL   2DF2
04330:  MOVFF  01,B2A
....................         // fprintf(PC, "0x%02X", crc);
....................         // CRC 書き込み
....................         write_address += blank_size;
04334:  MOVLB  A
04336:  MOVF   xA2,W
04338:  ADDWF  xE3,F
0433A:  MOVLW  00
0433C:  ADDWFC xE4,F
0433E:  MOVLW  00
04340:  ADDWFC xE5,F
04342:  MOVLW  00
04344:  ADDWFC xE6,F
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
04346:  MOVFF  115,B37
0434A:  MOVFF  114,B36
0434E:  MOVFF  113,B35
04352:  MOVFF  112,B34
04356:  MOVFF  AE6,B3B
0435A:  MOVFF  AE5,B3A
0435E:  MOVFF  AE4,B39
04362:  MOVFF  AE3,B38
04366:  MOVLW  0B
04368:  MOVLB  B
0436A:  MOVWF  x3D
0436C:  MOVLW  2A
0436E:  MOVWF  x3C
04370:  CLRF   x3F
04372:  MOVLW  01
04374:  MOVWF  x3E
04376:  MOVLB  0
04378:  CALL   3C3E
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += blank_size + 1;
0437C:  MOVLB  A
0437E:  MOVF   x99,W
04380:  MULLW  0A
04382:  MOVF   FF3,W
04384:  MOVLB  B
04386:  CLRF   x35
04388:  MOVWF  x34
0438A:  MOVLW  22
0438C:  ADDWF  x34,W
0438E:  MOVWF  FE9
04390:  MOVLW  01
04392:  ADDWFC x35,W
04394:  MOVWF  FEA
04396:  MOVLW  01
04398:  MOVLB  A
0439A:  ADDWF  xA2,W
0439C:  ADDWF  FEF,W
0439E:  MOVWF  00
043A0:  MOVLW  00
043A2:  ADDWFC FEC,W
043A4:  MOVWF  01
043A6:  MOVLW  00
043A8:  ADDWFC FEC,W
043AA:  MOVWF  02
043AC:  MOVLW  00
043AE:  ADDWFC FEC,W
043B0:  MOVWF  03
043B2:  MOVF   FED,F
043B4:  MOVF   FED,F
043B6:  MOVF   FED,F
043B8:  MOVFF  00,FEF
043BC:  MOVFF  01,FEC
043C0:  MOVFF  02,FEC
043C4:  MOVFF  03,FEC
043C8:  MOVF   FED,F
043CA:  MOVF   FED,F
043CC:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += blank_size + 1;
043CE:  MOVF   x99,W
043D0:  MULLW  0A
043D2:  MOVF   FF3,W
043D4:  MOVLB  B
043D6:  CLRF   x35
043D8:  MOVWF  x34
043DA:  MOVLW  04
043DC:  ADDWF  x34,W
043DE:  MOVWF  01
043E0:  MOVLW  00
043E2:  ADDWFC x35,W
043E4:  MOVWF  03
043E6:  MOVF   01,W
043E8:  ADDLW  22
043EA:  MOVWF  FE9
043EC:  MOVLW  01
043EE:  ADDWFC 03,W
043F0:  MOVWF  FEA
043F2:  MOVLW  01
043F4:  MOVLB  A
043F6:  ADDWF  xA2,W
043F8:  ADDWF  FEF,W
043FA:  MOVWF  00
043FC:  MOVLW  00
043FE:  ADDWFC FEC,W
04400:  MOVWF  01
04402:  MOVLW  00
04404:  ADDWFC FEC,W
04406:  MOVWF  02
04408:  MOVLW  00
0440A:  ADDWFC FEC,W
0440C:  MOVWF  03
0440E:  MOVF   FED,F
04410:  MOVF   FED,F
04412:  MOVF   FED,F
04414:  MOVFF  00,FEF
04418:  MOVFF  01,FEC
0441C:  MOVFF  02,FEC
04420:  MOVFF  03,FEC
04424:  MOVF   FED,F
04426:  MOVF   FED,F
04428:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
0442A:  MOVF   x99,W
0442C:  MULLW  0A
0442E:  MOVF   FF3,W
04430:  MOVLB  B
04432:  CLRF   x35
04434:  MOVWF  x34
04436:  MOVLW  08
04438:  ADDWF  x34,W
0443A:  MOVWF  01
0443C:  MOVLW  00
0443E:  ADDWFC x35,W
04440:  MOVWF  03
04442:  MOVF   01,W
04444:  ADDLW  22
04446:  MOVWF  FE9
04448:  MOVLW  01
0444A:  ADDWFC 03,W
0444C:  MOVWF  FEA
0444E:  CLRF   FEF
....................         return;
04450:  MOVLB  0
04452:  GOTO   495E
.................... 
....................     }else  if(misf_counter_table[id].reserve_counter1 + size == PACKET_SIZE-1){
04456:  GOTO   47C0
0445A:  MOVLB  A
0445C:  MOVF   x99,W
0445E:  MULLW  0A
04460:  MOVF   FF3,W
04462:  MOVLB  B
04464:  CLRF   x35
04466:  MOVWF  x34
04468:  MOVLW  08
0446A:  ADDWF  x34,W
0446C:  MOVWF  01
0446E:  MOVLW  00
04470:  ADDWFC x35,W
04472:  MOVWF  03
04474:  MOVF   01,W
04476:  ADDLW  22
04478:  MOVWF  FE9
0447A:  MOVLW  01
0447C:  ADDWFC 03,W
0447E:  MOVWF  FEA
04480:  MOVF   FEF,W
04482:  MOVLB  A
04484:  ADDWF  x9C,W
04486:  MOVLB  B
04488:  MOVWF  x34
0448A:  MOVLW  00
0448C:  MOVLB  A
0448E:  ADDWFC x9D,W
04490:  MOVLB  B
04492:  MOVWF  x35
04494:  MOVF   x34,W
04496:  SUBLW  3F
04498:  BTFSC  FD8.2
0449A:  BRA    44A2
0449C:  MOVLB  0
0449E:  GOTO   47C0
044A2:  MOVLB  0
044A4:  MOVLB  B
044A6:  MOVF   x35,F
044A8:  BTFSC  FD8.2
044AA:  BRA    44B2
044AC:  MOVLB  0
044AE:  GOTO   47C0
044B2:  MOVLB  0
....................         // データ書き込み
....................         unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
044B4:  MOVLB  A
044B6:  MOVF   x99,W
044B8:  MULLW  0C
044BA:  MOVF   FF3,W
044BC:  MOVLB  B
044BE:  CLRF   x35
044C0:  MOVWF  x34
044C2:  MOVFF  B35,03
044C6:  MOVF   x34,W
044C8:  MOVLB  0
044CA:  CALL   014E
044CE:  MOVWF  00
044D0:  TBLRD*+
044D2:  MOVFF  FF5,01
044D6:  TBLRD*+
044D8:  MOVFF  FF5,02
044DC:  TBLRD*+
044DE:  MOVFF  FF5,03
044E2:  MOVFF  03,B39
044E6:  MOVFF  02,B38
044EA:  MOVFF  01,B37
044EE:  MOVFF  00,B36
044F2:  MOVLB  A
044F4:  MOVF   x99,W
044F6:  MULLW  0A
044F8:  MOVF   FF3,W
044FA:  MOVLB  B
044FC:  CLRF   x3B
044FE:  MOVWF  x3A
04500:  MOVLW  22
04502:  ADDWF  x3A,W
04504:  MOVWF  FE9
04506:  MOVLW  01
04508:  ADDWFC x3B,W
0450A:  MOVWF  FEA
0450C:  MOVFF  FEF,00
04510:  MOVFF  FEC,01
04514:  MOVFF  FEC,02
04518:  MOVFF  FEC,03
0451C:  MOVF   FED,F
0451E:  MOVF   FED,F
04520:  MOVF   FED,F
04522:  MOVF   00,W
04524:  ADDWF  x36,W
04526:  MOVWF  x2B
04528:  MOVF   01,W
0452A:  ADDWFC x37,W
0452C:  MOVWF  x2C
0452E:  MOVF   02,W
04530:  ADDWFC x38,W
04532:  MOVWF  x2D
04534:  MOVF   03,W
04536:  ADDWFC x39,W
04538:  MOVWF  x2E
0453A:  MOVLB  0
....................         write_data_bytes(mis_fm, write_address, data_ptr, size);
0453C:  MOVFF  115,B37
04540:  MOVFF  114,B36
04544:  MOVFF  113,B35
04548:  MOVFF  112,B34
0454C:  MOVFF  B2E,B3B
04550:  MOVFF  B2D,B3A
04554:  MOVFF  B2C,B39
04558:  MOVFF  B2B,B38
0455C:  MOVFF  A9B,B3D
04560:  MOVFF  A9A,B3C
04564:  MOVFF  A9D,B3F
04568:  MOVFF  A9C,B3E
0456C:  CALL   3C3E
....................         // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................         // for (unsigned int32 j = 0; j < size; j++) {
....................             // fprintf(PC, "%02X ", data_ptr[j]);
....................         // }
....................         // fprintf(PC, "\Sr\n");
.................... 
....................         misf_counter_table[id].used_counter     += size;
04570:  MOVLB  A
04572:  MOVF   x99,W
04574:  MULLW  0A
04576:  MOVF   FF3,W
04578:  MOVLB  B
0457A:  CLRF   x35
0457C:  MOVWF  x34
0457E:  MOVLW  22
04580:  ADDWF  x34,W
04582:  MOVWF  FE9
04584:  MOVLW  01
04586:  ADDWFC x35,W
04588:  MOVWF  FEA
0458A:  MOVLB  A
0458C:  MOVF   x9C,W
0458E:  ADDWF  FEF,W
04590:  MOVWF  00
04592:  MOVF   x9D,W
04594:  ADDWFC FEC,W
04596:  MOVWF  01
04598:  MOVLW  00
0459A:  ADDWFC FEC,W
0459C:  MOVWF  02
0459E:  MOVLW  00
045A0:  ADDWFC FEC,W
045A2:  MOVWF  03
045A4:  MOVF   FED,F
045A6:  MOVF   FED,F
045A8:  MOVF   FED,F
045AA:  MOVFF  00,FEF
045AE:  MOVFF  01,FEC
045B2:  MOVFF  02,FEC
045B6:  MOVFF  03,FEC
045BA:  MOVF   FED,F
045BC:  MOVF   FED,F
045BE:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += size;
045C0:  MOVF   x99,W
045C2:  MULLW  0A
045C4:  MOVF   FF3,W
045C6:  MOVLB  B
045C8:  CLRF   x35
045CA:  MOVWF  x34
045CC:  MOVLW  04
045CE:  ADDWF  x34,W
045D0:  MOVWF  01
045D2:  MOVLW  00
045D4:  ADDWFC x35,W
045D6:  MOVWF  03
045D8:  MOVF   01,W
045DA:  ADDLW  22
045DC:  MOVWF  FE9
045DE:  MOVLW  01
045E0:  ADDWFC 03,W
045E2:  MOVWF  FEA
045E4:  MOVLB  A
045E6:  MOVF   x9C,W
045E8:  ADDWF  FEF,W
045EA:  MOVWF  00
045EC:  MOVF   x9D,W
045EE:  ADDWFC FEC,W
045F0:  MOVWF  01
045F2:  MOVLW  00
045F4:  ADDWFC FEC,W
045F6:  MOVWF  02
045F8:  MOVLW  00
045FA:  ADDWFC FEC,W
045FC:  MOVWF  03
045FE:  MOVF   FED,F
04600:  MOVF   FED,F
04602:  MOVF   FED,F
04604:  MOVFF  00,FEF
04608:  MOVFF  01,FEC
0460C:  MOVFF  02,FEC
04610:  MOVFF  03,FEC
04614:  MOVF   FED,F
04616:  MOVF   FED,F
04618:  MOVF   FED,F
....................         unsigned int8 crc = calc_crc8(data_ptr, size);
0461A:  MOVFF  A9B,B35
0461E:  MOVFF  A9A,B34
04622:  MOVFF  A9C,B36
04626:  MOVLB  0
04628:  CALL   2DF2
0462C:  MOVFF  01,B2F
.................... 
....................         // CRC 書き込み
....................         write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
04630:  MOVLB  A
04632:  MOVF   x99,W
04634:  MULLW  0C
04636:  MOVF   FF3,W
04638:  MOVLB  B
0463A:  CLRF   x35
0463C:  MOVWF  x34
0463E:  MOVFF  B35,03
04642:  MOVF   x34,W
04644:  MOVLB  0
04646:  CALL   014E
0464A:  MOVWF  00
0464C:  TBLRD*+
0464E:  MOVFF  FF5,01
04652:  TBLRD*+
04654:  MOVFF  FF5,02
04658:  TBLRD*+
0465A:  MOVFF  FF5,03
0465E:  MOVFF  03,B39
04662:  MOVFF  02,B38
04666:  MOVFF  01,B37
0466A:  MOVFF  00,B36
0466E:  MOVLB  A
04670:  MOVF   x99,W
04672:  MULLW  0A
04674:  MOVF   FF3,W
04676:  MOVLB  B
04678:  CLRF   x3B
0467A:  MOVWF  x3A
0467C:  MOVLW  22
0467E:  ADDWF  x3A,W
04680:  MOVWF  FE9
04682:  MOVLW  01
04684:  ADDWFC x3B,W
04686:  MOVWF  FEA
04688:  MOVFF  FEF,00
0468C:  MOVFF  FEC,01
04690:  MOVFF  FEC,02
04694:  MOVFF  FEC,03
04698:  MOVF   FED,F
0469A:  MOVF   FED,F
0469C:  MOVF   FED,F
0469E:  MOVF   00,W
046A0:  ADDWF  x36,W
046A2:  MOVWF  x2B
046A4:  MOVF   01,W
046A6:  ADDWFC x37,W
046A8:  MOVWF  x2C
046AA:  MOVF   02,W
046AC:  ADDWFC x38,W
046AE:  MOVWF  x2D
046B0:  MOVF   03,W
046B2:  ADDWFC x39,W
046B4:  MOVWF  x2E
....................         write_data_bytes(mis_fm, write_address, &crc, 1);
046B6:  MOVFF  115,B37
046BA:  MOVFF  114,B36
046BE:  MOVFF  113,B35
046C2:  MOVFF  112,B34
046C6:  MOVFF  B2E,B3B
046CA:  MOVFF  B2D,B3A
046CE:  MOVFF  B2C,B39
046D2:  MOVFF  B2B,B38
046D6:  MOVLW  0B
046D8:  MOVWF  x3D
046DA:  MOVLW  2F
046DC:  MOVWF  x3C
046DE:  CLRF   x3F
046E0:  MOVLW  01
046E2:  MOVWF  x3E
046E4:  MOVLB  0
046E6:  CALL   3C3E
.................... 
....................         // カウンタ更新
....................         misf_counter_table[id].used_counter     += 1;
046EA:  MOVLB  A
046EC:  MOVF   x99,W
046EE:  MULLW  0A
046F0:  MOVF   FF3,W
046F2:  MOVLB  B
046F4:  CLRF   x35
046F6:  MOVWF  x34
046F8:  MOVLW  22
046FA:  ADDWF  x34,W
046FC:  MOVWF  FE9
046FE:  MOVLW  01
04700:  ADDWFC x35,W
04702:  MOVWF  FEA
04704:  MOVLW  01
04706:  ADDWF  FEF,W
04708:  MOVWF  00
0470A:  MOVLW  00
0470C:  ADDWFC FEC,W
0470E:  MOVWF  01
04710:  MOVLW  00
04712:  ADDWFC FEC,W
04714:  MOVWF  02
04716:  MOVLW  00
04718:  ADDWFC FEC,W
0471A:  MOVWF  03
0471C:  MOVF   FED,F
0471E:  MOVF   FED,F
04720:  MOVF   FED,F
04722:  MOVFF  00,FEF
04726:  MOVFF  01,FEC
0472A:  MOVFF  02,FEC
0472E:  MOVFF  03,FEC
04732:  MOVF   FED,F
04734:  MOVF   FED,F
04736:  MOVF   FED,F
....................         misf_counter_table[id].uncopied_counter += 1;
04738:  MOVLB  A
0473A:  MOVF   x99,W
0473C:  MULLW  0A
0473E:  MOVF   FF3,W
04740:  MOVLB  B
04742:  CLRF   x35
04744:  MOVWF  x34
04746:  MOVLW  04
04748:  ADDWF  x34,W
0474A:  MOVWF  01
0474C:  MOVLW  00
0474E:  ADDWFC x35,W
04750:  MOVWF  03
04752:  MOVF   01,W
04754:  ADDLW  22
04756:  MOVWF  FE9
04758:  MOVLW  01
0475A:  ADDWFC 03,W
0475C:  MOVWF  FEA
0475E:  MOVLW  01
04760:  ADDWF  FEF,W
04762:  MOVWF  00
04764:  MOVLW  00
04766:  ADDWFC FEC,W
04768:  MOVWF  01
0476A:  MOVLW  00
0476C:  ADDWFC FEC,W
0476E:  MOVWF  02
04770:  MOVLW  00
04772:  ADDWFC FEC,W
04774:  MOVWF  03
04776:  MOVF   FED,F
04778:  MOVF   FED,F
0477A:  MOVF   FED,F
0477C:  MOVFF  00,FEF
04780:  MOVFF  01,FEC
04784:  MOVFF  02,FEC
04788:  MOVFF  03,FEC
0478C:  MOVF   FED,F
0478E:  MOVF   FED,F
04790:  MOVF   FED,F
....................         misf_counter_table[id].reserve_counter1  = 0;
04792:  MOVLB  A
04794:  MOVF   x99,W
04796:  MULLW  0A
04798:  MOVF   FF3,W
0479A:  MOVLB  B
0479C:  CLRF   x35
0479E:  MOVWF  x34
047A0:  MOVLW  08
047A2:  ADDWF  x34,W
047A4:  MOVWF  01
047A6:  MOVLW  00
047A8:  ADDWFC x35,W
047AA:  MOVWF  03
047AC:  MOVF   01,W
047AE:  ADDLW  22
047B0:  MOVWF  FE9
047B2:  MOVLW  01
047B4:  ADDWFC 03,W
047B6:  MOVWF  FEA
047B8:  CLRF   FEF
.................... 
....................         // アドレステーブル更新
....................         // misf_update_address_area();
....................         return;
047BA:  MOVLB  0
047BC:  GOTO   495E
....................     }
.................... 
....................     // データ書き込み
....................     unsigned int32 write_address = MISF_ADDRESS_TABLE[id].start + misf_counter_table[id].used_counter;
047C0:  MOVLB  A
047C2:  MOVF   x99,W
047C4:  MULLW  0C
047C6:  MOVF   FF3,W
047C8:  MOVLB  B
047CA:  CLRF   x35
047CC:  MOVWF  x34
047CE:  MOVFF  B35,03
047D2:  MOVF   x34,W
047D4:  MOVLB  0
047D6:  CALL   014E
047DA:  MOVWF  00
047DC:  TBLRD*+
047DE:  MOVFF  FF5,01
047E2:  TBLRD*+
047E4:  MOVFF  FF5,02
047E8:  TBLRD*+
047EA:  MOVFF  FF5,03
047EE:  MOVFF  03,B39
047F2:  MOVFF  02,B38
047F6:  MOVFF  01,B37
047FA:  MOVFF  00,B36
047FE:  MOVLB  A
04800:  MOVF   x99,W
04802:  MULLW  0A
04804:  MOVF   FF3,W
04806:  MOVLB  B
04808:  CLRF   x3B
0480A:  MOVWF  x3A
0480C:  MOVLW  22
0480E:  ADDWF  x3A,W
04810:  MOVWF  FE9
04812:  MOVLW  01
04814:  ADDWFC x3B,W
04816:  MOVWF  FEA
04818:  MOVFF  FEF,00
0481C:  MOVFF  FEC,01
04820:  MOVFF  FEC,02
04824:  MOVFF  FEC,03
04828:  MOVF   FED,F
0482A:  MOVF   FED,F
0482C:  MOVF   FED,F
0482E:  MOVF   00,W
04830:  ADDWF  x36,W
04832:  MOVWF  x30
04834:  MOVF   01,W
04836:  ADDWFC x37,W
04838:  MOVWF  x31
0483A:  MOVF   02,W
0483C:  ADDWFC x38,W
0483E:  MOVWF  x32
04840:  MOVF   03,W
04842:  ADDWFC x39,W
04844:  MOVWF  x33
....................     // fprintf(PC, "ADDRESS 0x%08LX DATA ", write_address);
....................     write_data_bytes(mis_fm, write_address, data_ptr, size);
04846:  MOVFF  115,B37
0484A:  MOVFF  114,B36
0484E:  MOVFF  113,B35
04852:  MOVFF  112,B34
04856:  MOVFF  B33,B3B
0485A:  MOVFF  B32,B3A
0485E:  MOVFF  B31,B39
04862:  MOVFF  B30,B38
04866:  MOVFF  A9B,B3D
0486A:  MOVFF  A9A,B3C
0486E:  MOVFF  A9D,B3F
04872:  MOVFF  A9C,B3E
04876:  MOVLB  0
04878:  CALL   3C3E
.................... 
....................     // カウンタ更新
....................     misf_counter_table[id].used_counter     += size;
0487C:  MOVLB  A
0487E:  MOVF   x99,W
04880:  MULLW  0A
04882:  MOVF   FF3,W
04884:  MOVLB  B
04886:  CLRF   x35
04888:  MOVWF  x34
0488A:  MOVLW  22
0488C:  ADDWF  x34,W
0488E:  MOVWF  FE9
04890:  MOVLW  01
04892:  ADDWFC x35,W
04894:  MOVWF  FEA
04896:  MOVLB  A
04898:  MOVF   x9C,W
0489A:  ADDWF  FEF,W
0489C:  MOVWF  00
0489E:  MOVF   x9D,W
048A0:  ADDWFC FEC,W
048A2:  MOVWF  01
048A4:  MOVLW  00
048A6:  ADDWFC FEC,W
048A8:  MOVWF  02
048AA:  MOVLW  00
048AC:  ADDWFC FEC,W
048AE:  MOVWF  03
048B0:  MOVF   FED,F
048B2:  MOVF   FED,F
048B4:  MOVF   FED,F
048B6:  MOVFF  00,FEF
048BA:  MOVFF  01,FEC
048BE:  MOVFF  02,FEC
048C2:  MOVFF  03,FEC
048C6:  MOVF   FED,F
048C8:  MOVF   FED,F
048CA:  MOVF   FED,F
....................     misf_counter_table[id].uncopied_counter += size;
048CC:  MOVF   x99,W
048CE:  MULLW  0A
048D0:  MOVF   FF3,W
048D2:  MOVLB  B
048D4:  CLRF   x35
048D6:  MOVWF  x34
048D8:  MOVLW  04
048DA:  ADDWF  x34,W
048DC:  MOVWF  01
048DE:  MOVLW  00
048E0:  ADDWFC x35,W
048E2:  MOVWF  03
048E4:  MOVF   01,W
048E6:  ADDLW  22
048E8:  MOVWF  FE9
048EA:  MOVLW  01
048EC:  ADDWFC 03,W
048EE:  MOVWF  FEA
048F0:  MOVLB  A
048F2:  MOVF   x9C,W
048F4:  ADDWF  FEF,W
048F6:  MOVWF  00
048F8:  MOVF   x9D,W
048FA:  ADDWFC FEC,W
048FC:  MOVWF  01
048FE:  MOVLW  00
04900:  ADDWFC FEC,W
04902:  MOVWF  02
04904:  MOVLW  00
04906:  ADDWFC FEC,W
04908:  MOVWF  03
0490A:  MOVF   FED,F
0490C:  MOVF   FED,F
0490E:  MOVF   FED,F
04910:  MOVFF  00,FEF
04914:  MOVFF  01,FEC
04918:  MOVFF  02,FEC
0491C:  MOVFF  03,FEC
04920:  MOVF   FED,F
04922:  MOVF   FED,F
04924:  MOVF   FED,F
....................     misf_counter_table[id].reserve_counter1 += size;
04926:  MOVF   x99,W
04928:  MULLW  0A
0492A:  MOVF   FF3,W
0492C:  MOVLB  B
0492E:  CLRF   x35
04930:  MOVWF  x34
04932:  MOVLW  08
04934:  ADDWF  x34,W
04936:  MOVWF  01
04938:  MOVLW  00
0493A:  ADDWFC x35,W
0493C:  MOVWF  03
0493E:  MOVF   01,W
04940:  ADDLW  22
04942:  MOVWF  FE9
04944:  MOVLW  01
04946:  ADDWFC 03,W
04948:  MOVWF  FEA
0494A:  MOVF   FEF,W
0494C:  MOVLB  A
0494E:  ADDWF  x9C,W
04950:  MOVWF  01
04952:  MOVLW  00
04954:  ADDWFC x9D,W
04956:  MOVWF  03
04958:  MOVF   01,W
0495A:  MOVWF  FEF
0495C:  MOVLB  0
0495E:  RETURN 0
.................... 
....................     // アドレステーブル更新
....................     // misf_update_address_area();
.................... }
.................... 
.................... FlashData_t make_flash_data_table(void)
04960:  MOVLW  0A
04962:  MOVLB  A
04964:  MOVWF  x95
04966:  MOVLW  54
04968:  MOVWF  x94
.................... {
....................     FlashData_t flash_data;
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     // 初期化
....................     memset(flash_data_ptr->bytes, 0, sizeof(flash_data_ptr->bytes));
0496A:  MOVF   x94,W
0496C:  MOVWF  01
0496E:  MOVF   x95,W
04970:  MOVWF  03
04972:  MOVF   01,W
04974:  MOVWF  x96
04976:  MOVFF  03,A97
0497A:  MOVFF  A97,FEA
0497E:  MOVFF  A96,FE9
04982:  CLRF   00
04984:  CLRF   02
04986:  MOVLW  40
04988:  MOVWF  01
0498A:  MOVLB  0
0498C:  CALL   2BBA
.................... 
....................     flash_data_ptr->packet.payload.logdata.piclog = misf_counter_table[FLASH_ID_PICLOG];
04990:  MOVLB  A
04992:  MOVF   x94,W
04994:  MOVWF  FE9
04996:  MOVF   x95,W
04998:  MOVWF  FEA
0499A:  MOVLW  01
0499C:  MOVWF  FE2
0499E:  MOVLW  2C
049A0:  MOVWF  FE1
049A2:  MOVLW  0A
049A4:  MOVWF  01
049A6:  MOVLB  0
049A8:  MOVFF  FE6,FEE
049AC:  DECFSZ 01,F
049AE:  GOTO   49A8
....................     flash_data_ptr->packet.payload.logdata.environment = misf_counter_table[FLASH_ID_ENVIRONMENT];
049B2:  MOVLW  0A
049B4:  MOVLB  A
049B6:  ADDWF  x94,W
049B8:  MOVWF  FE9
049BA:  MOVLW  00
049BC:  ADDWFC x95,W
049BE:  MOVWF  FEA
049C0:  MOVLW  01
049C2:  MOVWF  FE2
049C4:  MOVLW  36
049C6:  MOVWF  FE1
049C8:  MOVLW  0A
049CA:  MOVWF  01
049CC:  MOVLB  0
049CE:  MOVFF  FE6,FEE
049D2:  DECFSZ 01,F
049D4:  GOTO   49CE
....................     flash_data_ptr->packet.payload.logdata.iv1_header = misf_counter_table[FLASH_ID_IV1_HEADER];
049D8:  MOVLW  14
049DA:  MOVLB  A
049DC:  ADDWF  x94,W
049DE:  MOVWF  FE9
049E0:  MOVLW  00
049E2:  ADDWFC x95,W
049E4:  MOVWF  FEA
049E6:  MOVLW  01
049E8:  MOVWF  FE2
049EA:  MOVLW  40
049EC:  MOVWF  FE1
049EE:  MOVLW  0A
049F0:  MOVWF  01
049F2:  MOVLB  0
049F4:  MOVFF  FE6,FEE
049F8:  DECFSZ 01,F
049FA:  GOTO   49F4
....................     flash_data_ptr->packet.payload.logdata.iv1_data = misf_counter_table[FLASH_ID_IV1_DATA];
049FE:  MOVLW  1E
04A00:  MOVLB  A
04A02:  ADDWF  x94,W
04A04:  MOVWF  FE9
04A06:  MOVLW  00
04A08:  ADDWFC x95,W
04A0A:  MOVWF  FEA
04A0C:  MOVLW  01
04A0E:  MOVWF  FE2
04A10:  MOVLW  4A
04A12:  MOVWF  FE1
04A14:  MOVLW  0A
04A16:  MOVWF  01
04A18:  MOVLB  0
04A1A:  MOVFF  FE6,FEE
04A1E:  DECFSZ 01,F
04A20:  GOTO   4A1A
....................     flash_data_ptr->packet.payload.logdata.iv2_header = misf_counter_table[FLASH_ID_IV2_HEADER];
04A24:  MOVLW  28
04A26:  MOVLB  A
04A28:  ADDWF  x94,W
04A2A:  MOVWF  FE9
04A2C:  MOVLW  00
04A2E:  ADDWFC x95,W
04A30:  MOVWF  FEA
04A32:  MOVLW  01
04A34:  MOVWF  FE2
04A36:  MOVLW  54
04A38:  MOVWF  FE1
04A3A:  MOVLW  0A
04A3C:  MOVWF  01
04A3E:  MOVLB  0
04A40:  MOVFF  FE6,FEE
04A44:  DECFSZ 01,F
04A46:  GOTO   4A40
....................     flash_data_ptr->packet.payload.logdata.iv2_data = misf_counter_table[FLASH_ID_IV2_DATA];
04A4A:  MOVLW  32
04A4C:  MOVLB  A
04A4E:  ADDWF  x94,W
04A50:  MOVWF  FE9
04A52:  MOVLW  00
04A54:  ADDWFC x95,W
04A56:  MOVWF  FEA
04A58:  MOVLW  01
04A5A:  MOVWF  FE2
04A5C:  MOVLW  5E
04A5E:  MOVWF  FE1
04A60:  MOVLW  0A
04A62:  MOVWF  01
04A64:  MOVLB  0
04A66:  MOVFF  FE6,FEE
04A6A:  DECFSZ 01,F
04A6C:  GOTO   4A66
.................... 
....................     // CRC 計算
....................     flash_data_ptr->packet.crc = calc_crc8(flash_data_ptr->bytes, PACKET_SIZE - 1);
04A70:  MOVLW  3F
04A72:  MOVLB  A
04A74:  ADDWF  x94,W
04A76:  MOVWF  01
04A78:  MOVLW  00
04A7A:  ADDWFC x95,W
04A7C:  MOVWF  03
04A7E:  MOVF   01,W
04A80:  MOVWF  x96
04A82:  MOVFF  03,A97
04A86:  MOVF   x94,W
04A88:  MOVWF  01
04A8A:  MOVF   x95,W
04A8C:  MOVWF  03
04A8E:  MOVF   01,W
04A90:  MOVWF  x98
04A92:  MOVFF  03,A99
04A96:  MOVFF  A99,B35
04A9A:  MOVFF  A98,B34
04A9E:  MOVLW  3F
04AA0:  MOVLB  B
04AA2:  MOVWF  x36
04AA4:  MOVLB  0
04AA6:  CALL   2DF2
04AAA:  MOVFF  A97,FEA
04AAE:  MOVFF  A96,FE9
04AB2:  MOVFF  01,FEF
.................... 
....................     return flash_data;
04AB6:  MOVLW  54
04AB8:  MOVWF  01
04ABA:  MOVLW  0A
04ABC:  MOVWF  02
04ABE:  GOTO   4DEA (RETURN)
.................... }
.................... 
.................... void misf_update_address_area(void)
*
04DE6:  GOTO   4960
04DEA:  MOVFF  02,03
04DEE:  MOVF   01,W
04DF0:  MOVWF  FE1
04DF2:  MOVFF  03,FE2
04DF6:  MOVLW  0A
04DF8:  MOVWF  FEA
04DFA:  MOVLW  0C
04DFC:  MOVWF  FE9
04DFE:  MOVLW  40
04E00:  MOVWF  01
04E02:  MOVFF  FE6,FEE
04E06:  DECFSZ 01,F
04E08:  GOTO   4E02
04E0C:  MOVLW  0A
04E0E:  MOVLB  A
04E10:  MOVWF  x4D
04E12:  MOVLW  0C
04E14:  MOVWF  x4C
.................... {
....................     FlashData_t flash_data = make_flash_data_table();
....................     FlashData_t *flash_data_ptr = &flash_data;
.................... 
....................     subsector_4kByte_erase(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start);
04E16:  MOVFF  115,A51
04E1A:  MOVFF  114,A50
04E1E:  MOVFF  113,A4F
04E22:  MOVFF  112,A4E
04E26:  CLRF   x55
04E28:  CLRF   x54
04E2A:  CLRF   x53
04E2C:  CLRF   x52
04E2E:  MOVLB  0
04E30:  CALL   4AC2
....................     write_data_bytes(mis_fm, MISF_ADDRESS_TABLE[FLASH_ID_DATA_TABLE].start, flash_data_ptr->bytes, PACKET_SIZE);
04E34:  MOVLB  A
04E36:  MOVF   x4C,W
04E38:  MOVWF  01
04E3A:  MOVF   x4D,W
04E3C:  MOVWF  03
04E3E:  MOVF   01,W
04E40:  MOVWF  x4E
04E42:  MOVFF  03,A4F
04E46:  MOVFF  115,B37
04E4A:  MOVFF  114,B36
04E4E:  MOVFF  113,B35
04E52:  MOVFF  112,B34
04E56:  MOVLB  B
04E58:  CLRF   x3B
04E5A:  CLRF   x3A
04E5C:  CLRF   x39
04E5E:  CLRF   x38
04E60:  MOVFF  A4F,B3D
04E64:  MOVFF  A4E,B3C
04E68:  CLRF   x3F
04E6A:  MOVLW  40
04E6C:  MOVWF  x3E
04E6E:  MOVLB  0
04E70:  CALL   3C3E
04E74:  RETURN 0
.................... }
.................... 
.................... 
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode)
.................... {
....................     FlashOperationStruct data;
....................     // 構造体の初期化
....................     data.mission_id = mission_id;
....................     data.func_type = func_type;
....................     data.write_mode = write_mode;
....................     data.source_type = SOURCE_MISF_UNCOPIED;
....................     enqueue_flash_operation(&data);
.................... }
.................... 
.................... void write_smf_header(smf_data_table_t *smf_data_table)
.................... {
.................... 
....................     int8 readdata[PACKET_SIZE];
....................     int8 retry_count;
....................     int1 crc_valid = 0;
....................     for (retry_count = 0; retry_count < CRC_RETRY_COUNT; retry_count++)
....................     {
....................         subsector_4kByte_erase(smf, CIGS_DATA_TABLE_START_ADDRESS);
....................         write_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, smf_data_table->bytes, PACKET_SIZE);
....................         read_data_bytes(smf, CIGS_DATA_TABLE_START_ADDRESS, readdata, PACKET_SIZE);
....................         if (is_crc_valid(readdata, PACKET_SIZE-1))
....................         {
....................             crc_valid = 1; // FIX: フラグ更新
....................             fprintf(PC, "CRC verification passed on attempt %d\r\n", retry_count + 1);
....................             break;
....................         }
....................     }
....................     if (!crc_valid)
....................     {
....................         fprintf(PC, "Error: CRC verification failed after %d attempts\r\n", CRC_RETRY_COUNT);
....................         // return; 
....................     }
.................... }
.................... 
.................... 
.................... 
.................... // End of file
.................... 
.................... 
.................... // アプリケーション実装ファイル
.................... #include "application/sato_excute_mission.c"
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../hal/sato_config.h"             // システム設定
.................... #ifndef MMJ_CIGS_CONFIG_H
.................... #define MMJ_CIGS_CONFIG_H
.................... 
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //#include <16F1789.h>
.................... #opt 0 // 0 = no optimization, 1 = optimize for speed, 2 = optimize for size
.................... 
.................... #device ADC=12
.................... #use delay(crystal=16MHz)
.................... #fuses HS, NOWDT, NOBROWNOUT, NOPROTECT
.................... #device HIGH_INTS=TRUE
.................... #define PIC18
.................... //#define PIC16
.................... 
.................... 
.................... 
.................... #ifdef PIC16
....................     //#include <16F1789.h>
....................     #fuses NOMCLR
....................     //-------------Serial--------------------
....................     #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BOSS)
....................     #use rs232(baud=9600,parity=N,xmit=PIN_B4,bits=8,stream=PC,FORCE_SW)
.................... 
.................... 
....................     // -------------SPI--------------------
....................     // MOSI:PIN_C5, MISO:PIN_C4, SCK:PIN_C3
....................     // Shared Mission Flash
....................     #define MIS_FM_CS  PIN_D3
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS= 8, STREAM = MIS_FM_STREAM)
.................... 
....................     // Mission Flash
....................     #define SMF_CS PIN_D1
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = SMF_STREAM)
....................     #use spi(MASTER, SPI1, BAUD = 100000, MODE = 0, BITS = 8, STREAM = spi_cell_write)
....................     // Analog to Digital Converter 
....................     #define ADC_CS PIN_D2
....................     //#use spi(MASTER, SPI1, BAUD = 9600, MODE=2, BITS = 16, STREAM = ADC_STREAM)
....................     #use spi(MASTER, CLK = PIN_C3, DI = PIN_C4, DO = PIN_C5, ENABLE = PIN_D2, BAUD = 57600, BITS = 16, STREAM = ADC_STREAM, MODE = 2 )
....................     
....................     
....................     // AI/O___ADC
....................     #define TEMP_TOP PIN_B0
....................     #define TEMP_BOT PIN_A3
....................     #define CIGS_VOLT PIN_A0 //PIN_A0
....................     #define CIGS_CURR PIN_A1
....................     #define PD PIN_E0
....................     #define VREF PIN_A4
....................  
....................     // AI/O___DAC
....................     #define LOAD PIN_A5
.................... 
....................     /* DEMO
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A0, MODE=0, BITS=8, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A1, MODE=0, BITS=8, ENABLE_ACTIVE=1, STREAM=MISF)
....................     #use spi (MASTER, SPI1, ENABLE=PIN_A3, BAUD=40000, MODE=2, BITS=16, ENABLE_ACTIVE=1, STREAM=ADC)
....................     #use spi (MASTER, MODE=0, BITS=8, STREAM=SPI_4)
....................     */
.................... #endif
.................... 
.................... #ifdef PIC18
....................     //#include <18F67J94.h>
....................     //-------------UART--------------------
....................     // BOSS command port
....................     #pin_select TX3=PIN_E3                                                          
....................     #pin_select RX3=PIN_F2                                                        
....................     #use rs232(baud=9600, parity=N, UART3, bits=8, stream=BOSS, ERRORS)                      
....................     
....................     // PC debug port
....................     #pin_select TX4=PIN_E5
....................     #pin_select RX4=PIN_D4  
....................     #use rs232(baud=9600,parity=N, UART4, bits=8,stream=PC, ERRORS)
.................... 
....................     // -------------SPI--------------------
....................     // Shared Mission Flash
....................     #define SMF_CS PIN_A2
....................     #pin_select SCK1OUT=PIN_A3
....................     #pin_select SDI1=PIN_A0
....................     #pin_select SDO1=PIN_A1
....................     // #use spi (MASTER, SPI1, BAUD=200000, MODE=0, BITS=8, STREAM=SMF_STREAM)
....................     #use spi (MASTER, CLK=PIN_A3, DI=PIN_A1, DO=PIN_A0, BAUD=20000000, MODE=0, BITS=8, STREAM=SMF_STREAM)
.................... 
.................... 
....................     // Mission Flash
....................     #define MIS_FM_CS  PIN_G0
....................     #use spi (MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6, BAUD=20000000, MODE=0, BITS=8, STREAM=MIS_FM_STREAM)
.................... 
.................... 
....................     // ADC  
....................     #define ADC_CS PIN_B1
....................     // #pin_select SCK2OUT=PIN_B2
....................     // #pin_select SDI2=PIN_B4
....................     // #pin_select SDO2=PIN_B5
....................     // #use spi (MASTER, SPI2, BAUD=200000, MODE=2, BITS=16, STREAM=ADC_STREAM)
....................     #use spi (MASTER, CLK=PIN_B2, DI=PIN_B4, DO=PIN_B5, BAUD=20000000, MODE=2, BITS=16, STREAM=ADC_STREAM)
.................... 
....................     // DAC
....................     #define DAC1_CS PIN_D7
....................     #define DAC2_CS PIN_D6
....................     #use spi (MASTER, CLK=PIN_D5, DO=PIN_D4,  BAUD=20000000, MODE=2, BITS=16, STREAM=DAC_STREAM)
.................... 
.................... 
....................     // DI/O___
....................     #define CONNECT_CIGS1 PIN_C3
....................     #define CONNECT_CIGS2 PIN_C5
....................     #define EN_NPWR1 PIN_C7
....................     #define EN_NPWR2 PIN_C6
.................... 
.................... #endif
.................... 
.................... //-------------I/O port--------------------
.................... #use FIXED_IO( A_outputs=SMF_CS )
.................... #use FIXED_IO( B_outputs=ADC_CS )
.................... #use FIXED_IO( C_outputs=CONNECT_CIGS1, CONNECT_CIGS2, EN_NPWR1, EN_NPWR2 )
.................... #use FIXED_IO( D_outputs=DAC1_CS, DAC2_CS )
.................... #use FIXED_IO( G_outputs=MIS_FM_CS )
.................... 
.................... #define ADC_CIGS1_VOLT      AD7490_CH0
.................... #define ADC_CIGS1_CURR      AD7490_CH1
.................... #define ADC_CIGS1_AMP       AD7490_CH2
.................... #define ADC_CIGS1_VREF      AD7490_CH3
.................... #define ADC_CIGS2_VOLT      AD7490_CH4
.................... #define ADC_CIGS2_CURR      AD7490_CH5
.................... #define ADC_CIGS2_AMP       AD7490_CH6
.................... #define ADC_CIGS2_VREF      AD7490_CH7
.................... #define ADC_CIGS1_DAC       AD7490_CH8
.................... #define ADC_CIGS2_DAC       AD7490_CH9
.................... #define EMPTY_VIN0          AD7490_CH10
.................... #define EMPTY_VIN1          AD7490_CH11
.................... #define ADC_TEMP_MIS7       AD7490_CH12
.................... #define ADC_TEMP_PY_TOP     AD7490_CH13
.................... #define ADC_TEMP_PY_BOT     AD7490_CH14
.................... #define ADC_PD              AD7490_CH15
.................... 
.................... // ADC Settings
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS1_VOLT  
.................... #define ADC_DIODE_INNER_CURR    ADC_CIGS1_CURR 
.................... #define ADC_DIODE_INNER_AMP    ADC_CIGS1_AMP   
.................... #define ADC_DIODE_INNER_VREF   ADC_CIGS1_VREF  
.................... #define ADC_DIODE_INNER_VOLT   ADC_CIGS2_VOLT  
.................... #define ADC_DIODE_OUTER_CURR   ADC_CIGS2_CURR  
.................... #define ADC_DIODE_OUTER_AMP    ADC_CIGS2_AMP   
.................... #define ADC_DIODE_OUTER_VREF   ADC_CIGS2_VREF  
.................... #define ADC_DIODE_INNER_DAC    ADC_CIGS1_DAC   
.................... #define ADC_DIODE_OUTER_DAC    ADC_CIGS2_DAC   
.................... 
.................... 
.................... #endif // MMJ_CIGS_CONFIG_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/value_status.h"    // ステータス定義
.................... #ifndef VALUE_STATUS_H
.................... #define VALUE_STATUS_H
.................... 
.................... // there is used in main.c and mission
.................... 
.................... volatile int1 is_use_smf_req_in_mission = FALSE;
.................... volatile int8 status[4] = {IDLE, 0, 0, 0};
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "sato_excute_mission.h"                  // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_EXCUTE_MISSION_H
.................... #define MMJ_CIGS_EXCUTE_MISSION_H
.................... 
.................... // _________ values _________
.................... //#define PARAMETER_LENGTH 8
.................... #include "../lib/communication/mission_tools.h"
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command);
.................... 
.................... void handle_uplink_command(Command *command);
.................... 
.................... int1 handle_status_check(Command *command);
.................... 
.................... void handle_smf_available(Command *command);
.................... 
.................... void handle_recieve_time(Command *command);
.................... 
.................... 
.................... void execute_mission(int8 *content);
.................... 
.................... int8 duration_sec = 30; // duration sec for mission
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "sato_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "sato_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... 
.................... #include "../domain/sato_smf.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_SMF_H
.................... #define MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/tool/smf_queue.h"  // FlashOperationStruct定義
.................... #include "../hal/sato_config.h" // int8,int32 型など(CCS C) 依存
.................... #include "sato_flash.h"       // MISF_ADDRESS_TABLE, misf_counter_table 依存
.................... 
.................... #define CRC_RETRY_COUNT 5
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t smf_counter_table[];
.................... 
.................... 
.................... 
.................... 
.................... 
.................... // Mission ID 列挙（smf_queue.h の MissionID と整合させる）
.................... typedef enum{
....................     SMF_MISSION_DATA_TABLE = CIGS_DATA_TABLE,
....................     SMF_MISSION_PICLOG     = CIGS_PICLOG_DATA,
....................     SMF_MISSION_ENVIRO     = CIGS_ENVIRO_DATA,
....................     SMF_MISSION_IV1_HEADER = CIGS_IV1_HEADER,
....................     SMF_MISSION_IV1_DATA   = CIGS_IV1_DATA,
....................     SMF_MISSION_IV2_HEADER = CIGS_IV2_HEADER,
....................     SMF_MISSION_IV2_DATA   = CIGS_IV2_DATA
.................... } SmfMissionAlias; // 利便用Alias
.................... 
.................... // SMF操作関数
.................... void smf_write(FlashOperationStruct *smf_data_ptr);
.................... void smf_read(FlashOperationStruct *smf_data_ptr);
.................... void smf_erase(FlashOperationStruct *smf_data_ptr);
.................... 
.................... // カウンター管理関数
.................... void update_misf_counters(int8 mission_id, int32 transfer_size);
.................... void reset_misf_counters(int8 mission_id);
.................... void print_misf_counter_status(int8 mission_id);
.................... 
.................... 
.................... // SMF Partition Header
.................... typedef struct {
....................     int32 used_size;
....................     int32 reserved;
.................... } SMF_PARTITION;
.................... 
.................... // パーティション管理構造体
.................... typedef struct {
....................     SMF_PARTITION piclog;     // データテーブル領域は利用しないため削除
....................     SMF_PARTITION env;
....................     SMF_PARTITION iv1_header;
....................     SMF_PARTITION iv1_data;
....................     SMF_PARTITION iv2_header;
....................     SMF_PARTITION iv2_data;
....................     int32 write_bytes[4];
.................... } PartitionParam;
.................... 
.................... extern PartitionParam param;  // extern宣言に変更
.................... 
.................... typedef union {
....................     unsigned int8 bytes[PACKET_SIZE];  // 生データアクセス用
....................     struct {
....................         SMF_PARTITION headers[7];
....................         unsigned int8 reserved[7];
....................         unsigned int8 crc;  // 最後の1バイト
....................     } fields;
.................... } smf_data_table_t;
.................... 
.................... void smf_write_header(smf_data_table_t *smf_data_table);
.................... void print_smf_counter_status(smf_data_table_t *smf_data_table);
.................... 
.................... // MSB形式でpartition_headerに値を設定する関数（piclog等必要分のみ）
.................... void set_piclog_used_size_msb(int32 value);
.................... int32 get_piclog_used_size_msb(void);
.................... // 旧 data_table/meas 互換マクロは削除（不要）
.................... 
.................... // mission_idから対応するSMF_PARTITIONを取得する関数
.................... SMF_PARTITION* get_smf_partition_by_mission_id(int8 mission_id);
.................... void update_smf_partition_by_mission_id(int8 mission_id, int32 used_size, int32 loop_counter);
.................... 
.................... 
.................... #endif  // MMJ_CIGS_SMF_H
.................... 
.................... #include "../lib/communication/typedef_content.h"    // 通信ライブラリ
.................... #ifndef TYPEDEF_CONTENT_H
.................... #define TYPEDEF_CONTENT_H
.................... 
.................... // there is used in main.c
.................... 
.................... typedef enum {
....................     EXECUTING_MISSION = 0x02,
....................     IDLE              = 0x03,
....................     SMF_USE_REQ       = 0x04,
....................     COPYING           = 0x05,
....................     FINISHED          = 0x06,
....................     TIME_REQ          = 0x07
.................... } MisMcuStatusContent;
.................... 
.................... 
.................... typedef enum {
....................     ALLOW = 0x01,
....................     DENY  = 0x00
.................... } IsSmfAvailableContent;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../lib/communication/mission_tools.h"      // ミッションツール
.................... #ifndef MISSION_TOOLS_H
.................... #define MISSION_TOOLS_H
.................... 
.................... #include "communication_driver.h"
.................... 
.................... 
.................... // ________________ fuctions ____________
.................... 
.................... // Check and reply to messages received from BOSS PIC
.................... void check_and_respond_to_boss();
.................... 
.................... // Request using SMF to BOSS PIC
.................... // !!!After use, you must call `void finished_use_smf()`
.................... int1 req_use_smf();
.................... 
.................... // Call after using SMF
.................... void finished_use_smf();
.................... //unsigned int8 calc_crc8(unsigned int8 frame[], int8 payload_size);
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "../domain/sato_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/communication/communication_driver.h" // 通信ドライバー
.................... #ifndef COMMUNICATION_DRIVER_H
.................... #define COMMUNICATION_DRIVER_H
.................... 
.................... #include "communication.h"
.................... 
.................... 
.................... // This is redundant, but it is a process to hide the Communication library as a driver.
.................... Command make_command(unsigned int8 receive_signal[], int8 receive_signal_size);
.................... 
.................... void transmit_ack(void);
.................... void transmit_status(void);
.................... 
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... void execute_mission(int8 *uplink_cmt_ptr)
*
0E1B6:  MOVLB  1
0E1B8:  MOVF   xDD,W
0E1BA:  MOVWF  FE9
0E1BC:  MOVF   xDE,W
0E1BE:  MOVWF  FEA
0E1C0:  MOVFF  FEF,1DF
.................... {
....................    // record to executed mission list
....................    int8 command_id = uplink_cmt_ptr[0];
....................    //unsigned int8 *parameter = &content[1];
....................       
....................    // execution mission
....................    fprintf(PC, "\r\n______________________________\r\n_____Start execute_mission_____\r\n\r\n");
0E1C4:  MOVLW  94
0E1C6:  MOVWF  FF6
0E1C8:  MOVLW  12
0E1CA:  MOVWF  FF7
0E1CC:  MOVLW  00
0E1CE:  MOVWF  FF8
0E1D0:  MOVLB  0
0E1D2:  CALL   1FF0
....................    fprintf(PC, "Command ID: %X\r\n\r\n", command_id);
0E1D6:  MOVLW  DA
0E1D8:  MOVWF  FF6
0E1DA:  MOVLW  12
0E1DC:  MOVWF  FF7
0E1DE:  MOVLW  00
0E1E0:  MOVWF  FF8
0E1E2:  MOVLW  0C
0E1E4:  MOVLB  A
0E1E6:  MOVWF  x0C
0E1E8:  MOVLB  0
0E1EA:  CALL   2026
0E1EE:  MOVFF  1DF,A26
0E1F2:  MOVLW  37
0E1F4:  MOVLB  A
0E1F6:  MOVWF  x27
0E1F8:  MOVLB  0
0E1FA:  CALL   2232
0E1FE:  MOVLW  E8
0E200:  MOVWF  FF6
0E202:  MOVLW  12
0E204:  MOVWF  FF7
0E206:  MOVLW  00
0E208:  MOVWF  FF8
0E20A:  MOVLW  04
0E20C:  MOVLB  A
0E20E:  MOVWF  x0C
0E210:  MOVLB  0
0E212:  CALL   2026
....................    switch(command_id)
0E216:  MOVLB  1
0E218:  MOVF   xDF,W
0E21A:  XORLW  10
0E21C:  MOVLB  0
0E21E:  BTFSC  FD8.2
0E220:  GOTO   E308
0E224:  XORLW  01
0E226:  BTFSC  FD8.2
0E228:  GOTO   E30C
0E22C:  XORLW  03
0E22E:  BTFSC  FD8.2
0E230:  GOTO   E310
0E234:  XORLW  13
0E236:  BTFSC  FD8.2
0E238:  GOTO   E314
0E23C:  XORLW  12
0E23E:  BTFSC  FD8.2
0E240:  GOTO   E318
0E244:  XORLW  93
0E246:  BTFSC  FD8.2
0E248:  GOTO   E31C
0E24C:  XORLW  01
0E24E:  BTFSC  FD8.2
0E250:  GOTO   E32C
0E254:  XORLW  03
0E256:  BTFSC  FD8.2
0E258:  GOTO   E33C
0E25C:  XORLW  01
0E25E:  BTFSC  FD8.2
0E260:  GOTO   E34C
0E264:  XORLW  07
0E266:  BTFSC  FD8.2
0E268:  GOTO   E35C
0E26C:  XORLW  01
0E26E:  BTFSC  FD8.2
0E270:  GOTO   E36C
0E274:  XORLW  03
0E276:  BTFSC  FD8.2
0E278:  GOTO   E37C
0E27C:  XORLW  01
0E27E:  BTFSC  FD8.2
0E280:  GOTO   E38C
0E284:  XORLW  0F
0E286:  BTFSC  FD8.2
0E288:  GOTO   E39C
0E28C:  XORLW  18
0E28E:  BTFSC  FD8.2
0E290:  GOTO   E3AC
0E294:  XORLW  01
0E296:  BTFSC  FD8.2
0E298:  GOTO   E3BC
0E29C:  XORLW  03
0E29E:  BTFSC  FD8.2
0E2A0:  GOTO   E3CC
0E2A4:  XORLW  01
0E2A6:  BTFSC  FD8.2
0E2A8:  GOTO   E3DC
0E2AC:  XORLW  07
0E2AE:  BTFSC  FD8.2
0E2B0:  GOTO   E3EC
0E2B4:  XORLW  01
0E2B6:  BTFSC  FD8.2
0E2B8:  GOTO   E3FC
0E2BC:  XORLW  03
0E2BE:  BTFSC  FD8.2
0E2C0:  GOTO   E40C
0E2C4:  XORLW  36
0E2C6:  BTFSC  FD8.2
0E2C8:  GOTO   E414
0E2CC:  XORLW  01
0E2CE:  BTFSC  FD8.2
0E2D0:  GOTO   E424
0E2D4:  XORLW  03
0E2D6:  BTFSC  FD8.2
0E2D8:  GOTO   E434
0E2DC:  XORLW  01
0E2DE:  BTFSC  FD8.2
0E2E0:  GOTO   E444
0E2E4:  XORLW  07
0E2E6:  BTFSC  FD8.2
0E2E8:  GOTO   E448
0E2EC:  XORLW  01
0E2EE:  BTFSC  FD8.2
0E2F0:  GOTO   E450
0E2F4:  XORLW  03
0E2F6:  BTFSC  FD8.2
0E2F8:  GOTO   E460
0E2FC:  XORLW  16
0E2FE:  BTFSC  FD8.2
0E300:  GOTO   E53E
0E304:  GOTO   E74A
....................    {
....................       case 0x10: // example command
....................          // mode_dummy(content);
....................          //mode_iv_meas_adc();
....................          break;
0E308:  GOTO   E75E
....................       case 0x11:
....................          // mode_test_iv(content);
....................          break;
0E30C:  GOTO   E75E
....................       case 0x12:
....................          // test_adc();
....................          break;
0E310:  GOTO   E75E
....................       case 0x01:
....................          //mode_measure(content); // check if the flash is connected
....................          break;
0E314:  GOTO   E75E
....................       case 0x13:
....................          // mode_sweep_port1(content[1]); // Sweep Port 1 with the given step
....................          break;
0E318:  GOTO   E75E
.................... 
....................       // ___________________ MISF Commands ______________________
....................       case ID_MISF_ERASE_ALL:
....................          mode_misf_erase_all(uplink_cmt_ptr);
0E31C:  MOVFF  1DE,1F0
0E320:  MOVFF  1DD,1EF
0E324:  CALL   59FA
....................          break;
0E328:  GOTO   E75E
....................       case ID_MISF_ERASE_1SECTOR:
....................          mode_misf_erase_1sector(uplink_cmt_ptr);
0E32C:  MOVFF  1DE,1EE
0E330:  MOVFF  1DD,1ED
0E334:  GOTO   5AD8
....................          break;
0E338:  GOTO   E75E
....................       case ID_MISF_ERASE_4kByte_SUBSECTOR:
....................          mode_misf_erase_4kbyte_subsector(uplink_cmt_ptr);
0E33C:  MOVFF  1DE,1EE
0E340:  MOVFF  1DD,1ED
0E344:  GOTO   5C70
....................          break;
0E348:  GOTO   E75E
....................       case ID_MISF_ERASE_64kByte_SUBSECTOR:
....................          mode_misf_erase_64kbyte_subsector(uplink_cmt_ptr);
0E34C:  MOVFF  1DE,1EE
0E350:  MOVFF  1DD,1ED
0E354:  GOTO   5E08
....................          break;
0E358:  GOTO   E75E
....................       case ID_MISF_WRITE_DEMO:
....................          mode_misf_write_demo(uplink_cmt_ptr);
0E35C:  MOVFF  1DE,1EE
0E360:  MOVFF  1DD,1ED
0E364:  GOTO   615C
....................          break;
0E368:  GOTO   E75E
....................       case ID_MISF_WRITE_4kByte_SUBSECTOR:
....................          mode_misf_write_4kbyte_subsector(uplink_cmt_ptr);
0E36C:  MOVFF  1DE,1EE
0E370:  MOVFF  1DD,1ED
0E374:  GOTO   67CC
....................          break;
0E378:  GOTO   E75E
....................       case ID_MISF_READ:
....................          mode_misf_read(uplink_cmt_ptr);
0E37C:  MOVFF  1DE,1EE
0E380:  MOVFF  1DD,1ED
0E384:  GOTO   6844
....................          break;
0E388:  GOTO   E75E
....................       case ID_MISF_READ_ADDRESS:
....................          mode_misf_read_address(uplink_cmt_ptr);
0E38C:  MOVFF  1DE,1EE
0E390:  MOVFF  1DD,1ED
0E394:  GOTO   7042
....................          break;
0E398:  GOTO   E75E
....................       case ID_MISF_ERASE_AND_RESET:
....................          mode_misf_erase_and_reset(uplink_cmt_ptr);
0E39C:  MOVFF  1DE,1EE
0E3A0:  MOVFF  1DD,1ED
0E3A4:  GOTO   734A
....................          break;
0E3A8:  GOTO   E75E
.................... 
....................       // ___________________ SMF Commands ______________________
....................       case ID_SMF_COPY:
....................          mode_smf_copy(uplink_cmt_ptr);
0E3AC:  MOVFF  1DE,1EE
0E3B0:  MOVFF  1DD,1ED
0E3B4:  GOTO   73A2
....................          break;
0E3B8:  GOTO   E75E
....................       case ID_SMF_READ:
....................          mode_smf_read(uplink_cmt_ptr);
0E3BC:  MOVFF  1DE,1EE
0E3C0:  MOVFF  1DD,1ED
0E3C4:  GOTO   747E
....................          break;
0E3C8:  GOTO   E75E
....................       case ID_SMF_ERASE:
....................          mode_smf_erase(uplink_cmt_ptr);
0E3CC:  MOVFF  1DE,1EE
0E3D0:  MOVFF  1DD,1ED
0E3D4:  GOTO   7770
....................          break;
0E3D8:  GOTO   E75E
....................       case ID_SMF_COPY_FORCE:
....................          mode_smf_address_reset(uplink_cmt_ptr);
0E3DC:  MOVFF  1DE,1EE
0E3E0:  MOVFF  1DD,1ED
0E3E4:  GOTO   7958
....................          break;
0E3E8:  GOTO   E75E
....................       case ID_SMF_READ_FORCE:
....................          mode_smf_read_force(uplink_cmt_ptr);
0E3EC:  MOVFF  1DE,1EE
0E3F0:  MOVFF  1DD,1ED
0E3F4:  GOTO   7AD8
....................          break;
0E3F8:  GOTO   E75E
....................       case ID_SMF_ERASE_FORCE:
....................          mode_smf_erase_force(uplink_cmt_ptr);
0E3FC:  MOVFF  1DE,1EE
0E400:  MOVFF  1DD,1ED
0E404:  GOTO   7F08
....................          break;
0E408:  GOTO   E75E
....................       case ID_SMF_RESET:
....................          smf_data_table_init();
0E40C:  CALL   77D8
....................          break;
0E410:  GOTO   E75E
....................          
....................          
....................       // ________________MEAS________________________________
....................       case ID_MEAS_IV:
....................          mode_meas_iv(uplink_cmt_ptr);
0E414:  MOVFF  1DE,1EE
0E418:  MOVFF  1DD,1ED
0E41C:  GOTO   A780
....................          break;
0E420:  GOTO   E75E
....................       case ID_MEAS_DEBUG:
....................          mode_meas_iv_debug(uplink_cmt_ptr);
0E424:  MOVFF  1DE,1EE
0E428:  MOVFF  1DD,1ED
0E42C:  GOTO   C2D4
....................          break;
0E430:  GOTO   E75E
....................       case ID_MEAS_ENV:
....................          mode_meas_env(uplink_cmt_ptr);
0E434:  MOVFF  1DE,1EE
0E438:  MOVFF  1DD,1ED
0E43C:  GOTO   C5B8
....................          break;
0E440:  GOTO   E75E
....................       case ID_MEAS_ENV_PRINT:
....................          // mode_meas_env_debug(uplink_cmt_ptr);
....................          break;
0E444:  GOTO   E75E
....................       case ID_MEAS_IV_PRINT:
....................          sweep_with_print();
0E448:  GOTO   C6B2
....................          break;
0E44C:  GOTO   E75E
....................       case ID_MEAS_PD:
....................          mode_meas_pd(uplink_cmt_ptr);
0E450:  MOVFF  1DE,1EE
0E454:  MOVFF  1DD,1ED
0E458:  GOTO   DE82
....................          break;
0E45C:  GOTO   E75E
....................       case 0xA6:
....................          connect_port1();
0E460:  CALL   4F9E
....................          connect_port2();
0E464:  CALL   4FA6
....................          unsigned int16 cell1_curr;
....................          unsigned int16 cell2_curr;
....................          mcp4901_1_write(10); 
0E468:  MOVLB  A
0E46A:  CLRF   x1B
0E46C:  MOVLW  0A
0E46E:  MOVWF  x1A
0E470:  MOVLB  0
0E472:  CALL   2562
....................          mcp4901_2_write(10);
0E476:  MOVLB  A
0E478:  CLRF   x1B
0E47A:  MOVLW  0A
0E47C:  MOVWF  x1A
0E47E:  MOVLB  0
0E480:  CALL   25A0
....................          while (TRUE)
....................          {  
....................             cell1_curr = ad7490_read(ADC_CIGS1_CURR);
0E484:  MOVLW  01
0E486:  MOVLB  A
0E488:  MOVWF  x2C
0E48A:  MOVLB  0
0E48C:  CALL   21B2
0E490:  MOVFF  02,1E1
0E494:  MOVFF  01,1E0
....................             cell2_curr = ad7490_read(ADC_CIGS2_CURR);
0E498:  MOVLW  05
0E49A:  MOVLB  A
0E49C:  MOVWF  x2C
0E49E:  MOVLB  0
0E4A0:  CALL   21B2
0E4A4:  MOVFF  02,1E3
0E4A8:  MOVFF  01,1E2
....................             fprintf(PC, "%04LX,%04LX\r\n", cell1_curr, cell2_curr);
0E4AC:  MOVFF  1E1,A26
0E4B0:  MOVLW  37
0E4B2:  MOVLB  A
0E4B4:  MOVWF  x27
0E4B6:  MOVLB  0
0E4B8:  CALL   2232
0E4BC:  MOVFF  1E0,A26
0E4C0:  MOVLW  37
0E4C2:  MOVLB  A
0E4C4:  MOVWF  x27
0E4C6:  MOVLB  0
0E4C8:  CALL   2232
0E4CC:  MOVLW  2C
0E4CE:  BTFSS  FA6.6
0E4D0:  GOTO   E4CE
0E4D4:  MOVLB  E
0E4D6:  MOVWF  xF9
0E4D8:  MOVFF  1E3,A26
0E4DC:  MOVLW  37
0E4DE:  MOVLB  A
0E4E0:  MOVWF  x27
0E4E2:  MOVLB  0
0E4E4:  CALL   2232
0E4E8:  MOVFF  1E2,A26
0E4EC:  MOVLW  37
0E4EE:  MOVLB  A
0E4F0:  MOVWF  x27
0E4F2:  MOVLB  0
0E4F4:  CALL   2232
0E4F8:  MOVLW  0D
0E4FA:  BTFSS  FA6.6
0E4FC:  GOTO   E4FA
0E500:  MOVLB  E
0E502:  MOVWF  xF9
0E504:  MOVLW  0A
0E506:  MOVLB  0
0E508:  BTFSS  FA6.6
0E50A:  GOTO   E508
0E50E:  MOVLB  E
0E510:  MOVWF  xF9
....................             delay_ms(1000);
0E512:  MOVLW  04
0E514:  MOVLB  1
0E516:  MOVWF  xED
0E518:  MOVLB  0
0E51A:  MOVLW  FA
0E51C:  MOVLB  B
0E51E:  MOVWF  x4C
0E520:  MOVLB  0
0E522:  CALL   1FC2
0E526:  MOVLB  1
0E528:  DECFSZ xED,F
0E52A:  BRA    E530
0E52C:  BRA    E534
0E52E:  MOVLB  0
0E530:  MOVLB  0
0E532:  BRA    E51A
0E534:  MOVLB  0
0E536:  GOTO   E484
....................          }
....................          break;
0E53A:  GOTO   E75E
.................... 
....................       // ________________Others______________________________
....................       case 0xB0:
....................          unsigned int32 total_seconds = get_current_sec();
....................          unsigned int16 days;
....................          unsigned int8 hours, minutes, seconds;
0E53E:  CALL   3920
0E542:  MOVFF  03,1E7
0E546:  MOVFF  02,1E6
0E54A:  MOVFF  01,1E5
0E54E:  MOVFF  00,1E4
....................          days    = total_seconds / 86400;
0E552:  BCF    FD8.1
0E554:  MOVFF  1E7,253
0E558:  MOVFF  1E6,252
0E55C:  MOVFF  1E5,251
0E560:  MOVFF  1E4,250
0E564:  MOVLB  2
0E566:  CLRF   x57
0E568:  MOVLW  01
0E56A:  MOVWF  x56
0E56C:  MOVLW  51
0E56E:  MOVWF  x55
0E570:  MOVLW  80
0E572:  MOVWF  x54
0E574:  MOVLB  0
0E576:  CALL   5F7C
0E57A:  MOVFF  01,1E9
0E57E:  MOVFF  00,1E8
....................          hours   = (total_seconds % 86400) / 3600;
0E582:  BSF    FD8.1
0E584:  MOVLW  01
0E586:  MOVWF  FEA
0E588:  MOVLW  ED
0E58A:  MOVWF  FE9
0E58C:  MOVFF  1E7,253
0E590:  MOVFF  1E6,252
0E594:  MOVFF  1E5,251
0E598:  MOVFF  1E4,250
0E59C:  MOVLB  2
0E59E:  CLRF   x57
0E5A0:  MOVLW  01
0E5A2:  MOVWF  x56
0E5A4:  MOVLW  51
0E5A6:  MOVWF  x55
0E5A8:  MOVLW  80
0E5AA:  MOVWF  x54
0E5AC:  MOVLB  0
0E5AE:  CALL   5F7C
0E5B2:  MOVFF  1F0,1F4
0E5B6:  MOVFF  1EF,1F3
0E5BA:  MOVFF  1EE,1F2
0E5BE:  MOVFF  1ED,1F1
0E5C2:  MOVFF  FEA,1F6
0E5C6:  MOVFF  FE9,1F5
0E5CA:  BCF    FD8.1
0E5CC:  MOVFF  1F4,253
0E5D0:  MOVFF  1F3,252
0E5D4:  MOVFF  1F2,251
0E5D8:  MOVFF  1F1,250
0E5DC:  MOVLB  2
0E5DE:  CLRF   x57
0E5E0:  CLRF   x56
0E5E2:  MOVLW  0E
0E5E4:  MOVWF  x55
0E5E6:  MOVLW  10
0E5E8:  MOVWF  x54
0E5EA:  MOVLB  0
0E5EC:  CALL   5F7C
0E5F0:  MOVFF  1F6,FEA
0E5F4:  MOVFF  1F5,FE9
0E5F8:  MOVFF  00,1EA
....................          minutes = (total_seconds % 3600) / 60;
0E5FC:  BSF    FD8.1
0E5FE:  MOVLW  01
0E600:  MOVWF  FEA
0E602:  MOVLW  ED
0E604:  MOVWF  FE9
0E606:  MOVFF  1E7,253
0E60A:  MOVFF  1E6,252
0E60E:  MOVFF  1E5,251
0E612:  MOVFF  1E4,250
0E616:  MOVLB  2
0E618:  CLRF   x57
0E61A:  CLRF   x56
0E61C:  MOVLW  0E
0E61E:  MOVWF  x55
0E620:  MOVLW  10
0E622:  MOVWF  x54
0E624:  MOVLB  0
0E626:  CALL   5F7C
0E62A:  MOVFF  1F0,1F4
0E62E:  MOVFF  1EF,1F3
0E632:  MOVFF  1EE,1F2
0E636:  MOVFF  1ED,1F1
0E63A:  MOVFF  FEA,1F6
0E63E:  MOVFF  FE9,1F5
0E642:  BCF    FD8.1
0E644:  MOVFF  1F4,253
0E648:  MOVFF  1F3,252
0E64C:  MOVFF  1F2,251
0E650:  MOVFF  1F1,250
0E654:  MOVLB  2
0E656:  CLRF   x57
0E658:  CLRF   x56
0E65A:  CLRF   x55
0E65C:  MOVLW  3C
0E65E:  MOVWF  x54
0E660:  MOVLB  0
0E662:  CALL   5F7C
0E666:  MOVFF  1F6,FEA
0E66A:  MOVFF  1F5,FE9
0E66E:  MOVFF  00,1EB
....................          seconds = total_seconds % 60;
0E672:  BSF    FD8.1
0E674:  MOVLW  01
0E676:  MOVWF  FEA
0E678:  MOVLW  ED
0E67A:  MOVWF  FE9
0E67C:  MOVFF  1E7,253
0E680:  MOVFF  1E6,252
0E684:  MOVFF  1E5,251
0E688:  MOVFF  1E4,250
0E68C:  MOVLB  2
0E68E:  CLRF   x57
0E690:  CLRF   x56
0E692:  CLRF   x55
0E694:  MOVLW  3C
0E696:  MOVWF  x54
0E698:  MOVLB  0
0E69A:  CALL   5F7C
0E69E:  MOVFF  1ED,1EC
.................... 
....................          fprintf(PC, "\t\t-> Get time to %lu days, %02u:%02u:%02u\r\n",
....................                days, hours, minutes, seconds);
0E6A2:  MOVLW  EE
0E6A4:  MOVWF  FF6
0E6A6:  MOVLW  12
0E6A8:  MOVWF  FF7
0E6AA:  MOVLW  00
0E6AC:  MOVWF  FF8
0E6AE:  MOVLW  11
0E6B0:  MOVLB  A
0E6B2:  MOVWF  x0C
0E6B4:  MOVLB  0
0E6B6:  CALL   2026
0E6BA:  MOVLW  10
0E6BC:  MOVWF  FE9
0E6BE:  MOVFF  1E9,228
0E6C2:  MOVFF  1E8,227
0E6C6:  CALL   8B8E
0E6CA:  MOVLW  02
0E6CC:  MOVWF  FF6
0E6CE:  MOVLW  13
0E6D0:  MOVWF  FF7
0E6D2:  MOVLW  00
0E6D4:  MOVWF  FF8
0E6D6:  MOVLW  07
0E6D8:  MOVLB  A
0E6DA:  MOVWF  x0C
0E6DC:  MOVLB  0
0E6DE:  CALL   2026
0E6E2:  MOVFF  1EA,1ED
0E6E6:  MOVLW  01
0E6E8:  MOVLB  1
0E6EA:  MOVWF  xEE
0E6EC:  MOVLB  0
0E6EE:  CALL   E0FA
0E6F2:  MOVLW  3A
0E6F4:  BTFSS  FA6.6
0E6F6:  GOTO   E6F4
0E6FA:  MOVLB  E
0E6FC:  MOVWF  xF9
0E6FE:  MOVFF  1EB,1ED
0E702:  MOVLW  01
0E704:  MOVLB  1
0E706:  MOVWF  xEE
0E708:  MOVLB  0
0E70A:  CALL   E0FA
0E70E:  MOVLW  3A
0E710:  BTFSS  FA6.6
0E712:  GOTO   E710
0E716:  MOVLB  E
0E718:  MOVWF  xF9
0E71A:  MOVFF  1EC,1ED
0E71E:  MOVLW  01
0E720:  MOVLB  1
0E722:  MOVWF  xEE
0E724:  MOVLB  0
0E726:  CALL   E0FA
0E72A:  MOVLW  0D
0E72C:  BTFSS  FA6.6
0E72E:  GOTO   E72C
0E732:  MOVLB  E
0E734:  MOVWF  xF9
0E736:  MOVLW  0A
0E738:  MOVLB  0
0E73A:  BTFSS  FA6.6
0E73C:  GOTO   E73A
0E740:  MOVLB  E
0E742:  MOVWF  xF9
....................          break;
0E744:  MOVLB  0
0E746:  GOTO   E75E
.................... 
....................       default:
....................          fprintf(PC, "\t\t-> Invalid CMD ID!\r\n");
0E74A:  MOVLW  1A
0E74C:  MOVWF  FF6
0E74E:  MOVLW  13
0E750:  MOVWF  FF7
0E752:  MOVLW  00
0E754:  MOVWF  FF8
0E756:  CALL   1FF0
....................          break;
0E75A:  GOTO   E75E
....................    }
....................    fprintf(PC, "\r\n______End execute_mission______\r\n_______________________________\r\n");
0E75E:  MOVLW  32
0E760:  MOVWF  FF6
0E762:  MOVLW  13
0E764:  MOVWF  FF7
0E766:  MOVLW  00
0E768:  MOVWF  FF8
0E76A:  CALL   1FF0
0E76E:  GOTO   E7DC (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... int1 execute_command(Command *command)
.................... {
....................    fprintf(PC, "Start execute_command\r\n");
*
0FE24:  MOVLW  78
0FE26:  MOVWF  FF6
0FE28:  MOVLW  13
0FE2A:  MOVWF  FF7
0FE2C:  MOVLW  00
0FE2E:  MOVWF  FF8
0FE30:  CALL   1FF0
....................    
....................    switch(command->frame_id)
0FE34:  MOVLB  1
0FE36:  MOVF   xD7,W
0FE38:  MOVWF  FE9
0FE3A:  MOVF   xD8,W
0FE3C:  MOVWF  FEA
0FE3E:  MOVF   FEF,W
0FE40:  ADDLW  FC
0FE42:  BTFSS  FD8.0
0FE44:  BRA    FE4C
0FE46:  MOVLB  0
0FE48:  GOTO   FEA4
0FE4C:  ADDLW  04
0FE4E:  MOVLB  0
0FE50:  GOTO   FEAC
....................    {
....................       case UPLINK_COMMAND:
....................          handle_uplink_command(command);
0FE54:  MOVFF  1D8,1DA
0FE58:  MOVFF  1D7,1D9
0FE5C:  GOTO   E790
....................          break;
0FE60:  GOTO   FEA4
....................          
....................       case STATUS_CHECK:
....................          if (handle_status_check(command)){
0FE64:  MOVFF  1D8,1DA
0FE68:  MOVFF  1D7,1D9
0FE6C:  GOTO   E7F8
0FE70:  MOVF   01,F
0FE72:  BTFSC  FD8.2
0FE74:  GOTO   FE80
....................             return TRUE; // if status is finished, return TRUE
0FE78:  MOVLW  01
0FE7A:  MOVWF  01
0FE7C:  GOTO   FEA8
....................          }        
....................          break;
0FE80:  GOTO   FEA4
....................       
....................       case IS_SMF_AVAILABLE:
....................          handle_smf_available(command);
0FE84:  MOVFF  1D8,1DA
0FE88:  MOVFF  1D7,1D9
0FE8C:  GOTO   11452
....................          break;
0FE90:  GOTO   FEA4
....................       
....................       case SEND_TIME:
....................          handle_recieve_time(command);
0FE94:  MOVFF  1D8,1DA
0FE98:  MOVFF  1D7,1D9
0FE9C:  GOTO   11714
....................          break;
0FEA0:  GOTO   FEA4
....................    }
....................    return FALSE;
0FEA4:  MOVLW  00
0FEA6:  MOVWF  01
0FEA8:  GOTO   11F28 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void handle_uplink_command(Command *command) {
....................    fprintf(PC, "\t-> Uplink command\r\n");
*
0E790:  MOVLW  90
0E792:  MOVWF  FF6
0E794:  MOVLW  13
0E796:  MOVWF  FF7
0E798:  MOVLW  00
0E79A:  MOVWF  FF8
0E79C:  CALL   1FF0
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
0E7A0:  MOVLW  A6
0E7A2:  MOVWF  FF6
0E7A4:  MOVLW  13
0E7A6:  MOVWF  FF7
0E7A8:  MOVLW  00
0E7AA:  MOVWF  FF8
0E7AC:  CALL   1FF0
....................    transmit_ack();
0E7B0:  CALL   568A
.................... 
....................    status[0] = EXECUTING_MISSION;
0E7B4:  MOVLW  02
0E7B6:  MOVWF  4C
....................    execute_mission(command->content);
0E7B8:  MOVLW  03
0E7BA:  MOVLB  1
0E7BC:  ADDWF  xD9,W
0E7BE:  MOVWF  01
0E7C0:  MOVLW  00
0E7C2:  ADDWFC xDA,W
0E7C4:  MOVWF  03
0E7C6:  MOVF   01,W
0E7C8:  MOVWF  xDB
0E7CA:  MOVFF  03,1DC
0E7CE:  MOVFF  1DC,1DE
0E7D2:  MOVFF  1DB,1DD
0E7D6:  MOVLB  0
0E7D8:  GOTO   E1B6
....................    if (is_empty_flash_queue())
0E7DC:  CALL   E772
0E7E0:  MOVF   01,F
0E7E2:  BTFSC  FD8.2
0E7E4:  GOTO   E7F0
....................       status[0] = FINISHED;
0E7E8:  MOVLW  06
0E7EA:  MOVWF  4C
0E7EC:  GOTO   E7F4
....................    else
....................       status[0] = SMF_USE_REQ;
0E7F0:  MOVLW  04
0E7F2:  MOVWF  4C
0E7F4:  GOTO   FE60 (RETURN)
.................... 
....................    //return TRUE; // ここでTRUEを返すことで、実行後に何か処理をすることができる
....................    
.................... }
.................... 
.................... 
.................... int1 handle_status_check(Command *command) {
....................    fprintf(PC, "\t-> Status check\r\n");
0E7F8:  MOVLW  C0
0E7FA:  MOVWF  FF6
0E7FC:  MOVLW  13
0E7FE:  MOVWF  FF7
0E800:  MOVLW  00
0E802:  MOVWF  FF8
0E804:  CALL   1FF0
....................    fprintf(PC, "\t   Transmit MIS MCU Status\r\n");
0E808:  MOVLW  D4
0E80A:  MOVWF  FF6
0E80C:  MOVLW  13
0E80E:  MOVWF  FF7
0E810:  MOVLW  00
0E812:  MOVWF  FF8
0E814:  CALL   1FF0
....................    transmit_status();
0E818:  CALL   A4AE
....................    if (status[0] == FINISHED)
0E81C:  MOVF   4C,W
0E81E:  SUBLW  06
0E820:  BTFSS  FD8.2
0E822:  GOTO   E842
....................    {
....................       fprintf(PC, "finished in status_check\r\n");
0E826:  MOVLW  F2
0E828:  MOVWF  FF6
0E82A:  MOVLW  13
0E82C:  MOVWF  FF7
0E82E:  MOVLW  00
0E830:  MOVWF  FF8
0E832:  CALL   1FF0
....................       return TRUE;
0E836:  MOVLW  01
0E838:  MOVWF  01
0E83A:  GOTO   E84A
....................    }
0E83E:  GOTO   E84A
....................    else{
....................       return FALSE;
0E842:  MOVLW  00
0E844:  MOVWF  01
0E846:  GOTO   E84A
....................    }
0E84A:  GOTO   FE70 (RETURN)
.................... }
.................... 
.................... 
.................... void handle_smf_available(Command *command)
.................... {
....................     fprintf(PC, "\t-> SMF available check\r\n");
*
11452:  MOVLW  0E
11454:  MOVWF  FF6
11456:  MOVLW  14
11458:  MOVWF  FF7
1145A:  MOVLW  00
1145C:  MOVWF  FF8
1145E:  CALL   1FF0
....................     fprintf(PC, "\t   Transmit Acknowledgement\r\n");
11462:  MOVLW  28
11464:  MOVWF  FF6
11466:  MOVLW  14
11468:  MOVWF  FF7
1146A:  MOVLW  00
1146C:  MOVWF  FF8
1146E:  CALL   1FF0
....................     transmit_ack();
11472:  CALL   568A
.................... 
....................     if (command->content[0] != ALLOW) {
11476:  MOVLW  03
11478:  MOVLB  1
1147A:  ADDWF  xD9,W
1147C:  MOVWF  FE9
1147E:  MOVLW  00
11480:  ADDWFC xDA,W
11482:  MOVWF  FEA
11484:  DECFSZ FEF,W
11486:  BRA    1148C
11488:  BRA    11492
1148A:  MOVLB  0
1148C:  MOVLB  0
1148E:  GOTO   11498
11492:  MOVLB  0
11494:  GOTO   114AC
....................         fprintf(PC, "\t\t-> denied\r\n");
11498:  MOVLW  48
1149A:  MOVWF  FF6
1149C:  MOVLW  14
1149E:  MOVWF  FF7
114A0:  MOVLW  00
114A2:  MOVWF  FF8
114A4:  CALL   1FF0
....................         return;
114A8:  GOTO   11710
....................     }
.................... 
....................     fprintf(PC, "\t\t-> allowed\r\n");
114AC:  MOVLW  56
114AE:  MOVWF  FF6
114B0:  MOVLW  14
114B2:  MOVWF  FF7
114B4:  MOVLW  00
114B6:  MOVWF  FF8
114B8:  CALL   1FF0
....................     status[0] = COPYING;
114BC:  MOVLW  05
114BE:  MOVWF  4C
.................... 
....................     int8 processed_count = 0;
114C0:  MOVLB  1
114C2:  CLRF   xDB
114C4:  MOVLB  0
.................... 
....................     while (!is_empty_flash_queue()) {
114C6:  CALL   E772
114CA:  MOVF   01,F
114CC:  BTFSS  FD8.2
114CE:  GOTO   116CC
....................         FlashOperationStruct *smf_data = dequeue_flash_operation();
114D2:  GOTO   E84E
114D6:  MOVFF  02,1DD
114DA:  MOVFF  01,1DC
....................         /*
....................         if (smf_data == NULL) {
....................             fprintf(PC, "\t\t-> dequeue NULL (break)\r\n");
....................             break;
....................         }
....................          */
....................         fprintf(PC, "\t\t-> Dequeued: func=%u mission=%u size=%ld addr=%ld\r\n",
....................                 (unsigned int)smf_data->func_type,
....................                 (unsigned int)smf_data->mission_id,
....................                 smf_data->misf_size,
....................                 smf_data->misf_start_addr);
114DE:  MOVLW  01
114E0:  MOVLB  1
114E2:  ADDWF  xDC,W
114E4:  MOVWF  FE9
114E6:  MOVLW  00
114E8:  ADDWFC xDD,W
114EA:  MOVWF  FEA
114EC:  MOVFF  FEF,1DE
114F0:  MOVF   xDC,W
114F2:  MOVWF  FE9
114F4:  MOVF   xDD,W
114F6:  MOVWF  FEA
114F8:  MOVFF  FEF,1DF
114FC:  MOVLW  08
114FE:  ADDWF  xDC,W
11500:  MOVWF  FE9
11502:  MOVLW  00
11504:  ADDWFC xDD,W
11506:  MOVWF  FEA
11508:  MOVFF  FEF,1E0
1150C:  MOVFF  FEC,1E1
11510:  MOVFF  FEC,1E2
11514:  MOVFF  FEC,1E3
11518:  MOVF   FED,F
1151A:  MOVF   FED,F
1151C:  MOVF   FED,F
1151E:  MOVLW  04
11520:  ADDWF  xDC,W
11522:  MOVWF  FE9
11524:  MOVLW  00
11526:  ADDWFC xDD,W
11528:  MOVWF  FEA
1152A:  MOVFF  FEF,1E4
1152E:  MOVFF  FEC,1E5
11532:  MOVFF  FEC,1E6
11536:  MOVFF  FEC,1E7
1153A:  MOVF   FED,F
1153C:  MOVF   FED,F
1153E:  MOVF   FED,F
11540:  MOVLW  66
11542:  MOVWF  FF6
11544:  MOVLW  14
11546:  MOVWF  FF7
11548:  MOVLW  00
1154A:  MOVWF  FF8
1154C:  MOVLW  14
1154E:  MOVLB  A
11550:  MOVWF  x0C
11552:  MOVLB  0
11554:  CALL   2026
11558:  MOVFF  1DE,1ED
1155C:  MOVLW  1B
1155E:  MOVLB  1
11560:  MOVWF  xEE
11562:  MOVLB  0
11564:  CALL   E0FA
11568:  MOVLW  7C
1156A:  MOVWF  FF6
1156C:  MOVLW  14
1156E:  MOVWF  FF7
11570:  MOVLW  00
11572:  MOVWF  FF8
11574:  MOVLW  09
11576:  MOVLB  A
11578:  MOVWF  x0C
1157A:  MOVLB  0
1157C:  CALL   2026
11580:  MOVFF  1DF,1ED
11584:  MOVLW  1B
11586:  MOVLB  1
11588:  MOVWF  xEE
1158A:  MOVLB  0
1158C:  CALL   E0FA
11590:  MOVLW  87
11592:  MOVWF  FF6
11594:  MOVLW  14
11596:  MOVWF  FF7
11598:  MOVLW  00
1159A:  MOVWF  FF8
1159C:  MOVLW  06
1159E:  MOVLB  A
115A0:  MOVWF  x0C
115A2:  MOVLB  0
115A4:  CALL   2026
115A8:  MOVLW  41
115AA:  MOVWF  FE9
115AC:  MOVFF  1E3,1EB
115B0:  MOVFF  1E2,1EA
115B4:  MOVFF  1E1,1E9
115B8:  MOVFF  1E0,1E8
115BC:  CALL   E8B0
115C0:  MOVLW  90
115C2:  MOVWF  FF6
115C4:  MOVLW  14
115C6:  MOVWF  FF7
115C8:  MOVLW  00
115CA:  MOVWF  FF8
115CC:  MOVLW  06
115CE:  MOVLB  A
115D0:  MOVWF  x0C
115D2:  MOVLB  0
115D4:  CALL   2026
115D8:  MOVLW  41
115DA:  MOVWF  FE9
115DC:  MOVFF  1E7,1EB
115E0:  MOVFF  1E6,1EA
115E4:  MOVFF  1E5,1E9
115E8:  MOVFF  1E4,1E8
115EC:  CALL   E8B0
115F0:  MOVLW  0D
115F2:  BTFSS  FA6.6
115F4:  GOTO   115F2
115F8:  MOVLB  E
115FA:  MOVWF  xF9
115FC:  MOVLW  0A
115FE:  MOVLB  0
11600:  BTFSS  FA6.6
11602:  GOTO   11600
11606:  MOVLB  E
11608:  MOVWF  xF9
.................... 
....................         switch (smf_data->func_type) {
1160A:  MOVLW  01
1160C:  MOVLB  1
1160E:  ADDWF  xDC,W
11610:  MOVWF  FE9
11612:  MOVLW  00
11614:  ADDWFC xDD,W
11616:  MOVWF  FEA
11618:  MOVF   FEF,W
1161A:  XORLW  00
1161C:  MOVLB  0
1161E:  BTFSC  FD8.2
11620:  GOTO   11638
11624:  XORLW  01
11626:  BTFSC  FD8.2
11628:  GOTO   11648
1162C:  XORLW  03
1162E:  BTFSC  FD8.2
11630:  GOTO   11658
11634:  GOTO   11668
....................             case ENUM_SMF_WRITE:
....................                 smf_write(smf_data);
11638:  MOVFF  1DD,1DF
1163C:  MOVFF  1DC,1DE
11640:  GOTO   10000
....................                 break;
11644:  GOTO   116C2
....................             case ENUM_SMF_READ:
....................                 smf_read(smf_data);
11648:  MOVFF  1DD,1DF
1164C:  MOVFF  1DC,1DE
11650:  GOTO   F6E4
....................                 break;
11654:  GOTO   116C2
....................             case ENUM_SMF_ERASE:
....................                 smf_erase(smf_data);
11658:  MOVFF  1DD,1DF
1165C:  MOVFF  1DC,1DE
11660:  GOTO   10DD0
....................                 break;
11664:  GOTO   116C2
....................             default:
....................                 fprintf(PC, "\t\t   Unknown func_type=%u\r\n",
....................                         (unsigned int)smf_data->func_type);
11668:  MOVLW  01
1166A:  MOVLB  1
1166C:  ADDWF  xDC,W
1166E:  MOVWF  FE9
11670:  MOVLW  00
11672:  ADDWFC xDD,W
11674:  MOVWF  FEA
11676:  MOVFF  FEF,1DE
1167A:  MOVLW  9C
1167C:  MOVWF  FF6
1167E:  MOVLW  14
11680:  MOVWF  FF7
11682:  MOVLW  00
11684:  MOVWF  FF8
11686:  MOVLW  17
11688:  MOVLB  A
1168A:  MOVWF  x0C
1168C:  MOVLB  0
1168E:  CALL   2026
11692:  MOVFF  1DE,1ED
11696:  MOVLW  1B
11698:  MOVLB  1
1169A:  MOVWF  xEE
1169C:  MOVLB  0
1169E:  CALL   E0FA
116A2:  MOVLW  0D
116A4:  BTFSS  FA6.6
116A6:  GOTO   116A4
116AA:  MOVLB  E
116AC:  MOVWF  xF9
116AE:  MOVLW  0A
116B0:  MOVLB  0
116B2:  BTFSS  FA6.6
116B4:  GOTO   116B2
116B8:  MOVLB  E
116BA:  MOVWF  xF9
....................                 break;
116BC:  MOVLB  0
116BE:  GOTO   116C2
....................         }
....................         processed_count++;
116C2:  MOVLB  1
116C4:  INCF   xDB,F
116C6:  MOVLB  0
116C8:  GOTO   114C6
....................     }
.................... 
....................     fprintf(PC, "\t\t-> Completed %u operations\r\n",
....................             (unsigned int)processed_count);
116CC:  MOVLW  B8
116CE:  MOVWF  FF6
116D0:  MOVLW  14
116D2:  MOVWF  FF7
116D4:  MOVLW  00
116D6:  MOVWF  FF8
116D8:  MOVLW  0F
116DA:  MOVLB  A
116DC:  MOVWF  x0C
116DE:  MOVLB  0
116E0:  CALL   2026
116E4:  MOVFF  1DB,1ED
116E8:  MOVLW  1B
116EA:  MOVLB  1
116EC:  MOVWF  xEE
116EE:  MOVLB  0
116F0:  CALL   E0FA
116F4:  MOVLW  C9
116F6:  MOVWF  FF6
116F8:  MOVLW  14
116FA:  MOVWF  FF7
116FC:  MOVLW  00
116FE:  MOVWF  FF8
11700:  MOVLW  0D
11702:  MOVLB  A
11704:  MOVWF  x0C
11706:  MOVLB  0
11708:  CALL   2026
.................... 
....................     status[0] = FINISHED;
1170C:  MOVLW  06
1170E:  MOVWF  4C
11710:  GOTO   FE90 (RETURN)
.................... }
.................... 
.................... void handle_recieve_time(Command *command)
.................... {
....................    fprintf(PC, "\t-> TIME Receive\r\n");
11714:  MOVLW  D8
11716:  MOVWF  FF6
11718:  MOVLW  14
1171A:  MOVWF  FF7
1171C:  MOVLW  00
1171E:  MOVWF  FF8
11720:  CALL   1FF0
....................    fprintf(PC, "\t   Transmit Acknolegde\r\n");
11724:  MOVLW  EC
11726:  MOVWF  FF6
11728:  MOVLW  14
1172A:  MOVWF  FF7
1172C:  MOVLW  00
1172E:  MOVWF  FF8
11730:  CALL   1FF0
....................    transmit_ack();
11734:  CALL   568A
.................... 
....................    // 4バイト(MSB, big-endian)に詰められた MM/DD hh:mm:ss を復元
....................    // [31:26]=0, [25:22]=month(1-12), [21:17]=day(1-31), [16:12]=hour(0-23), [11:6]=minute(0-59), [5:0]=second(0-59)
....................    unsigned int32 total_seconds = ((unsigned int32)command->content[0] << 24) |
....................                       ((unsigned int32)command->content[1] << 16) |
....................                       ((unsigned int32)command->content[2] << 8)  |
....................                       ((unsigned int32)command->content[3]);
11738:  MOVLW  03
1173A:  MOVLB  1
1173C:  ADDWF  xD9,W
1173E:  MOVWF  FE9
11740:  MOVLW  00
11742:  ADDWFC xDA,W
11744:  MOVWF  FEA
11746:  MOVF   FEF,W
11748:  CLRF   xE7
1174A:  CLRF   xE6
1174C:  CLRF   xE5
1174E:  MOVWF  xE4
11750:  MOVFF  1E4,1E7
11754:  CLRF   xE4
11756:  CLRF   xE5
11758:  CLRF   xE6
1175A:  MOVLW  04
1175C:  ADDWF  xD9,W
1175E:  MOVWF  FE9
11760:  MOVLW  00
11762:  ADDWFC xDA,W
11764:  MOVWF  FEA
11766:  MOVF   FEF,W
11768:  CLRF   xEC
1176A:  CLRF   xEB
1176C:  CLRF   xEA
1176E:  MOVWF  xE9
11770:  MOVFF  1EA,03
11774:  MOVFF  1E9,02
11778:  CLRF   00
1177A:  CLRF   01
1177C:  MOVF   00,W
1177E:  IORWF  xE4,F
11780:  MOVF   01,W
11782:  IORWF  xE5,F
11784:  MOVF   02,W
11786:  IORWF  xE6,F
11788:  MOVF   03,W
1178A:  IORWF  xE7,F
1178C:  MOVLW  05
1178E:  ADDWF  xD9,W
11790:  MOVWF  FE9
11792:  MOVLW  00
11794:  ADDWFC xDA,W
11796:  MOVWF  FEA
11798:  MOVF   FEF,W
1179A:  CLRF   xEC
1179C:  CLRF   xEB
1179E:  CLRF   xEA
117A0:  MOVWF  xE9
117A2:  MOVFF  1EB,03
117A6:  MOVFF  1EA,02
117AA:  MOVFF  1E9,01
117AE:  CLRF   00
117B0:  MOVF   00,W
117B2:  IORWF  xE4,F
117B4:  MOVF   01,W
117B6:  IORWF  xE5,F
117B8:  MOVF   02,W
117BA:  IORWF  xE6,F
117BC:  MOVF   03,W
117BE:  IORWF  xE7,F
117C0:  MOVLW  06
117C2:  ADDWF  xD9,W
117C4:  MOVWF  FE9
117C6:  MOVLW  00
117C8:  ADDWFC xDA,W
117CA:  MOVWF  FEA
117CC:  MOVF   FEF,W
117CE:  MOVWF  00
117D0:  CLRF   01
117D2:  CLRF   02
117D4:  CLRF   03
117D6:  MOVF   00,W
117D8:  IORWF  xE4,W
117DA:  MOVWF  xDB
117DC:  MOVF   01,W
117DE:  IORWF  xE5,W
117E0:  MOVWF  xDC
117E2:  MOVF   02,W
117E4:  IORWF  xE6,W
117E6:  MOVWF  xDD
117E8:  MOVF   03,W
117EA:  IORWF  xE7,W
117EC:  MOVWF  xDE
.................... 
....................    set_current_sec(total_seconds);
117EE:  MOVFF  1DE,1E7
117F2:  MOVFF  1DD,1E6
117F6:  MOVFF  1DC,1E5
117FA:  MOVFF  1DB,1E4
117FE:  MOVLB  0
11800:  GOTO   FE10
....................    unsigned int16 days;
....................    unsigned int8 hours, minutes, seconds;
....................    days    = total_seconds / 86400;
11804:  BCF    FD8.1
11806:  MOVFF  1DE,253
1180A:  MOVFF  1DD,252
1180E:  MOVFF  1DC,251
11812:  MOVFF  1DB,250
11816:  MOVLB  2
11818:  CLRF   x57
1181A:  MOVLW  01
1181C:  MOVWF  x56
1181E:  MOVLW  51
11820:  MOVWF  x55
11822:  MOVLW  80
11824:  MOVWF  x54
11826:  MOVLB  0
11828:  CALL   5F7C
1182C:  MOVFF  01,1E0
11830:  MOVFF  00,1DF
....................    hours   = (total_seconds % 86400) / 3600;
11834:  BSF    FD8.1
11836:  MOVLW  01
11838:  MOVWF  FEA
1183A:  MOVLW  E4
1183C:  MOVWF  FE9
1183E:  MOVFF  1DE,253
11842:  MOVFF  1DD,252
11846:  MOVFF  1DC,251
1184A:  MOVFF  1DB,250
1184E:  MOVLB  2
11850:  CLRF   x57
11852:  MOVLW  01
11854:  MOVWF  x56
11856:  MOVLW  51
11858:  MOVWF  x55
1185A:  MOVLW  80
1185C:  MOVWF  x54
1185E:  MOVLB  0
11860:  CALL   5F7C
11864:  MOVFF  1E7,1EB
11868:  MOVFF  1E6,1EA
1186C:  MOVFF  1E5,1E9
11870:  MOVFF  1E4,1E8
11874:  MOVFF  FEA,1ED
11878:  MOVFF  FE9,1EC
1187C:  BCF    FD8.1
1187E:  MOVFF  1EB,253
11882:  MOVFF  1EA,252
11886:  MOVFF  1E9,251
1188A:  MOVFF  1E8,250
1188E:  MOVLB  2
11890:  CLRF   x57
11892:  CLRF   x56
11894:  MOVLW  0E
11896:  MOVWF  x55
11898:  MOVLW  10
1189A:  MOVWF  x54
1189C:  MOVLB  0
1189E:  CALL   5F7C
118A2:  MOVFF  1ED,FEA
118A6:  MOVFF  1EC,FE9
118AA:  MOVFF  00,1E1
....................    minutes = (total_seconds % 3600) / 60;
118AE:  BSF    FD8.1
118B0:  MOVLW  01
118B2:  MOVWF  FEA
118B4:  MOVLW  E4
118B6:  MOVWF  FE9
118B8:  MOVFF  1DE,253
118BC:  MOVFF  1DD,252
118C0:  MOVFF  1DC,251
118C4:  MOVFF  1DB,250
118C8:  MOVLB  2
118CA:  CLRF   x57
118CC:  CLRF   x56
118CE:  MOVLW  0E
118D0:  MOVWF  x55
118D2:  MOVLW  10
118D4:  MOVWF  x54
118D6:  MOVLB  0
118D8:  CALL   5F7C
118DC:  MOVFF  1E7,1EB
118E0:  MOVFF  1E6,1EA
118E4:  MOVFF  1E5,1E9
118E8:  MOVFF  1E4,1E8
118EC:  MOVFF  FEA,1ED
118F0:  MOVFF  FE9,1EC
118F4:  BCF    FD8.1
118F6:  MOVFF  1EB,253
118FA:  MOVFF  1EA,252
118FE:  MOVFF  1E9,251
11902:  MOVFF  1E8,250
11906:  MOVLB  2
11908:  CLRF   x57
1190A:  CLRF   x56
1190C:  CLRF   x55
1190E:  MOVLW  3C
11910:  MOVWF  x54
11912:  MOVLB  0
11914:  CALL   5F7C
11918:  MOVFF  1ED,FEA
1191C:  MOVFF  1EC,FE9
11920:  MOVFF  00,1E2
....................    seconds = total_seconds % 60;
11924:  BSF    FD8.1
11926:  MOVLW  01
11928:  MOVWF  FEA
1192A:  MOVLW  E4
1192C:  MOVWF  FE9
1192E:  MOVFF  1DE,253
11932:  MOVFF  1DD,252
11936:  MOVFF  1DC,251
1193A:  MOVFF  1DB,250
1193E:  MOVLB  2
11940:  CLRF   x57
11942:  CLRF   x56
11944:  CLRF   x55
11946:  MOVLW  3C
11948:  MOVWF  x54
1194A:  MOVLB  0
1194C:  CALL   5F7C
11950:  MOVFF  1E4,1E3
.................... 
....................    fprintf(PC, "\t\t-> Set time to %lu days, %02u:%02u:%02u\r\n",
....................            days, hours, minutes, seconds);
11954:  MOVLW  06
11956:  MOVWF  FF6
11958:  MOVLW  15
1195A:  MOVWF  FF7
1195C:  MOVLW  00
1195E:  MOVWF  FF8
11960:  MOVLW  11
11962:  MOVLB  A
11964:  MOVWF  x0C
11966:  MOVLB  0
11968:  CALL   2026
1196C:  MOVLW  10
1196E:  MOVWF  FE9
11970:  MOVFF  1E0,228
11974:  MOVFF  1DF,227
11978:  CALL   8B8E
1197C:  MOVLW  1A
1197E:  MOVWF  FF6
11980:  MOVLW  15
11982:  MOVWF  FF7
11984:  MOVLW  00
11986:  MOVWF  FF8
11988:  MOVLW  07
1198A:  MOVLB  A
1198C:  MOVWF  x0C
1198E:  MOVLB  0
11990:  CALL   2026
11994:  MOVFF  1E1,1ED
11998:  MOVLW  01
1199A:  MOVLB  1
1199C:  MOVWF  xEE
1199E:  MOVLB  0
119A0:  CALL   E0FA
119A4:  MOVLW  3A
119A6:  BTFSS  FA6.6
119A8:  GOTO   119A6
119AC:  MOVLB  E
119AE:  MOVWF  xF9
119B0:  MOVFF  1E2,1ED
119B4:  MOVLW  01
119B6:  MOVLB  1
119B8:  MOVWF  xEE
119BA:  MOVLB  0
119BC:  CALL   E0FA
119C0:  MOVLW  3A
119C2:  BTFSS  FA6.6
119C4:  GOTO   119C2
119C8:  MOVLB  E
119CA:  MOVWF  xF9
119CC:  MOVFF  1E3,1ED
119D0:  MOVLW  01
119D2:  MOVLB  1
119D4:  MOVWF  xEE
119D6:  MOVLB  0
119D8:  CALL   E0FA
119DC:  MOVLW  0D
119DE:  BTFSS  FA6.6
119E0:  GOTO   119DE
119E4:  MOVLB  E
119E6:  MOVWF  xF9
119E8:  MOVLW  0A
119EA:  MOVLB  0
119EC:  BTFSS  FA6.6
119EE:  GOTO   119EC
119F2:  MOVLB  E
119F4:  MOVWF  xF9
119F6:  MOVLB  0
119F8:  GOTO   FEA0 (RETURN)
.................... 
.................... }
.................... // End of file
.................... 
.................... #include "application/sato_mode_mission.c"
.................... #include "sato_mode_mission.h"                    // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_MISSION_H
.................... #define MMJ_CIGS_MODE_MISSION_H
.................... 
.................... #define CMD_LENGTH 9
.................... 
.................... // ______________CMD ID________________
.................... // Operation Command
.................... #define ID_MEAS_IV 0xA0
.................... #define ID_MEAS_DEBUG 0xA1
.................... #define ID_MEAS_ENV 0xA2
.................... #define ID_MEAS_ENV_PRINT 0xA3
.................... #define ID_MEAS_IV_PRINT 0xA4
.................... #define ID_MEAS_PD 0xA5
.................... 
.................... // ______________MODE FUNCTIONS____________
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_env_debug(unsigned int8 *uplinkcmd_ptr);
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr);
.................... 
.................... typedef union {
....................     unsigned int8 raw;
....................     struct {
....................         unsigned int8 mission_continue : 1;
....................         unsigned int8 erase_and_save : 1;
....................         unsigned int8 reserved : 6;
....................     } flag;
.................... } mission_state_t;
.................... 
.................... 
.................... typedef struct {
....................     unsigned int8 id; // Command ID
....................     unsigned int16 sleep_time; // Sleep time in milliseconds
....................     unsigned int16 curr_threshold; // Current threshold for measurement
....................     unsigned int16 pd_threshold; // PD threshold for measurement
....................     unsigned int16 curr_limit; // Current limit for measurement
....................     unsigned int16 meas_time; // Measurement time in milliseconds
....................     mission_state_t mission_state; // Flag to indicate if the measurement is finished
.................... } MEAS_IV_CMD;
.................... 
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int16 interval;
....................     unsigned int16 pd_threshold;
....................     unsigned int16 meas_time;
....................     unsigned int16 log_threshold;
....................     unsigned int16 sweep_limit;
.................... } meas_iv_param_t;
.................... 
.................... 
.................... // MEAS_IV_CMD make_meas_iv_cmd(unsigned int8 uplinkcmd[]);
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr);
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr);
.................... #endif // MMJ_CIGS_MODE_MISSION_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/sato_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../lib/device/ad7490.h"                    // ADCライブラリ
.................... #ifndef  AD7490_H
.................... #define  AD7490_H
.................... 
.................... // === AD7490 Control Word ===
.................... // Bit[15]   : WRITE (常に0)
.................... // Bit[14:13]: SEQ mode (シーケンス設定)
.................... // Bit[12]   : SHADOW (0=disabled, 1=enabled)
.................... // Bit[11]   : Don't Care
.................... // Bit[10]   : PM1 (Power Management)
.................... // Bit[9]    : PM0
.................... // Bit[8]    : REFSEL (0=internal, 1=external)
.................... // Bit[7]    : Coding (0=straight binary, 1=twos complement)
.................... // Bit[6]    : Don't Care
.................... // Bit[5]    : ADD2
.................... // Bit[4]    : ADD1
.................... // Bit[3]    : ADD0
.................... // Bit[2]    : DIFF (0=single-ended, 1=differential)
.................... // Bit[1:0]  : Don't Care
.................... 
.................... 
.................... 
.................... typedef union {
....................     unsigned int16 value; // 16-bit value for direct access
....................     struct {
....................         int1 reserved0; // Reserved bits
....................         int1 reserved1; // Reserved bits
....................         int1 reserved2; // Reserved bits
....................         int1 reserved3; // Reserved bits   
....................         int1 coding; // 1: Two's complement, 0: Binary
....................         int1 range; // 1: Range mode, 0: Normal mode
....................         int1 weak_tri; // 1: Weak trigger, 0: Strong trigger
....................         int1 shadow; // 1: Shadow register, 0: Direct access
....................         int1 pm0;
....................         int1 pm1; // Power mode bits
....................         int1 add0;
....................         int1 add1; // Channel address bits
....................         int1 add2;
....................         int1 add3; // Channel address bits
....................         int1 seq; // 1: Sequential mode, 0: Random mode
....................         int1 write; // 1: Write operation, 0: Read operation
.................... 
....................     } fields;
.................... } ad7490_cmd_t;
.................... 
.................... // Public Function 
.................... //void ad7490_init(void);
.................... unsigned int16 ad7490_make_cmd(int8 channel);
.................... 
.................... 
.................... // Resistor Settings
.................... #define AD7490_EN_WRITE 0b1
.................... 
.................... // Power Mode Register
.................... #define AD7490_PM_NORMAL 0b00000011
.................... #define AD7490_PM_SHUTDOWN 0b00000001
.................... #define AD7490_PM_AUTO_SHUTDOWN 0b00000010
.................... #define AD7490_PM_AUTO_STANDBY 0b00000000
.................... 
.................... 
.................... // ----------------------------
.................... // WRITE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_WRITE_DISABLE = 0,  // 書き込み無効
....................     AD7490_WRITE_ENABLE  = 1   // 書き込み有効
.................... } ad7490_write_t;
.................... 
.................... // ----------------------------
.................... // SEQ bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SEQ_DISABLE = 0,
....................     AD7490_SEQ_ENABLE  = 1
.................... } ad7490_seq_t;
.................... 
.................... // ----------------------------
.................... // CODING bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CODING_BINARY  = 0, // ストレートバイナリ
....................     AD7490_CODING_TWOS    = 1  // Two’s complement
.................... } ad7490_coding_t;
.................... 
.................... // ----------------------------
.................... // RANGE bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_RANGE_2REF  = 0, // 0〜2*REFIN
....................     AD7490_RANGE_REF   = 1  // 0〜REFIN
.................... } ad7490_range_t;
.................... 
.................... // ----------------------------
.................... // WEAK/TRI bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_DOUT_TRI   = 0, // Three-state
....................     AD7490_DOUT_WEAK  = 1  // Weakly driven
.................... } ad7490_dout_t;
.................... 
.................... // ----------------------------
.................... // SHADOW bit
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_SHADOW_DISABLE = 0,
....................     AD7490_SHADOW_ENABLE  = 1
.................... } ad7490_shadow_t;
.................... 
.................... // ----------------------------
.................... // Power Mode (PM1, PM0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_PWR_NORMAL    = 0, // 00
....................     AD7490_PWR_FULLDOWN  = 1, // 01
....................     AD7490_PWR_AUTO      = 2, // 10
....................     AD7490_PWR_SHUTDOWN  = 3  // 11
.................... } ad7490_pwr_mode_t;
.................... 
.................... // ----------------------------
.................... // Channel Address (ADD3–ADD0)
.................... // ----------------------------
.................... typedef enum {
....................     AD7490_CH0  = 0,
....................     AD7490_CH1  = 1,
....................     AD7490_CH2  = 2,
....................     AD7490_CH3  = 3,
....................     AD7490_CH4  = 4,
....................     AD7490_CH5  = 5,
....................     AD7490_CH6  = 6,
....................     AD7490_CH7  = 7,
....................     AD7490_CH8  = 8,
....................     AD7490_CH9  = 9,
....................     AD7490_CH10 = 10,
....................     AD7490_CH11 = 11,
....................     AD7490_CH12 = 12,
....................     AD7490_CH13 = 13,
....................     AD7490_CH14 = 14,
....................     AD7490_CH15 = 15
.................... } ad7490_channel_t;
.................... 
.................... 
.................... #endif // AD7490_H
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/sato_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/sato_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... 
.................... void mode_meas_iv(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS IV\r\n");
*
0A780:  MOVLW  32
0A782:  MOVWF  FF6
0A784:  MOVLW  15
0A786:  MOVWF  FF7
0A788:  MOVLW  00
0A78A:  MOVWF  FF8
0A78C:  CALL   1FF0
....................    meas_iv_param_t cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0A790:  MOVFF  1EE,224
0A794:  MOVFF  1ED,223
0A798:  CALL   8016
0A79C:  MOVFF  02,03
0A7A0:  MOVF   01,W
0A7A2:  MOVWF  FE1
0A7A4:  MOVFF  03,FE2
0A7A8:  MOVLW  01
0A7AA:  MOVWF  FEA
0A7AC:  MOVLW  EF
0A7AE:  MOVWF  FE9
0A7B0:  MOVLW  0B
0A7B2:  MOVWF  01
0A7B4:  MOVFF  FE6,FEE
0A7B8:  DECFSZ 01,F
0A7BA:  GOTO   A7B4
....................    print_meas_iv_cmd(&cmd); // Print the command parameters for debugging
0A7BE:  MOVLW  01
0A7C0:  MOVLB  2
0A7C2:  MOVWF  x1E
0A7C4:  MOVLW  EF
0A7C6:  MOVWF  x1D
0A7C8:  MOVLB  0
0A7CA:  GOTO   8CAE
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log the start of the command execution
0A7CE:  MOVFF  1EF,244
0A7D2:  MOVLB  2
0A7D4:  CLRF   x45
0A7D6:  MOVLB  0
0A7D8:  CALL   4E76
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_sec = 0;
....................    unsigned int16 time_ms = 0;
....................    unsigned int8 counter = 0;
0A7DC:  CALL   3920
0A7E0:  MOVFF  03,1FD
0A7E4:  MOVFF  02,1FC
0A7E8:  MOVFF  01,1FB
0A7EC:  MOVFF  00,1FA
0A7F0:  MOVLB  2
0A7F2:  CLRF   x01
0A7F4:  CLRF   x00
0A7F6:  MOVLB  1
0A7F8:  CLRF   xFF
0A7FA:  CLRF   xFE
0A7FC:  MOVLB  2
0A7FE:  CLRF   x03
0A800:  CLRF   x02
0A802:  CLRF   x04
0A804:  MOVLB  0
....................    do
....................    {
....................       sweep(cmd.log_threshold, cmd.sweep_limit, cmd.pd_threshold); 
0A806:  MOVFF  1F7,21E
0A80A:  MOVFF  1F6,21D
0A80E:  MOVFF  1F9,220
0A812:  MOVFF  1F8,21F
0A816:  MOVFF  1F3,222
0A81A:  MOVFF  1F2,221
0A81E:  GOTO   983C
....................       if (cmd.interval > 0){
0A822:  MOVLB  1
0A824:  MOVF   xF0,F
0A826:  BTFSC  FD8.2
0A828:  BRA    A830
0A82A:  MOVLB  0
0A82C:  GOTO   A842
0A830:  MOVLB  0
0A832:  MOVLB  1
0A834:  MOVF   xF1,F
0A836:  BTFSS  FD8.2
0A838:  BRA    A840
0A83A:  MOVLB  0
0A83C:  GOTO   A86A
0A840:  MOVLB  0
....................          delay_ms(cmd.interval);
0A842:  MOVFF  1F1,21D
0A846:  MOVLB  2
0A848:  INCF   x1D,F
0A84A:  MOVLB  0
0A84C:  MOVLB  2
0A84E:  DECFSZ x1D,F
0A850:  BRA    A856
0A852:  MOVLB  0
0A854:  BRA    A862
0A856:  MOVLB  B
0A858:  SETF   x4C
0A85A:  MOVLB  0
0A85C:  CALL   1FC2
0A860:  BRA    A84C
0A862:  MOVFF  1F0,B4C
0A866:  CALL   1FC2
....................       }
....................       check_and_respond_to_boss(); // Check for boss commands during the wait period
0A86A:  GOTO   A4C6
....................    } while (get_current_sec() - start_time < cmd.meas_time);
0A86E:  CALL   3920
0A872:  MOVFF  03,220
0A876:  MOVFF  02,21F
0A87A:  MOVFF  01,21E
0A87E:  MOVFF  00,21D
0A882:  MOVLB  1
0A884:  MOVF   xFA,W
0A886:  MOVLB  2
0A888:  SUBWF  x1D,F
0A88A:  MOVLB  1
0A88C:  MOVF   xFB,W
0A88E:  MOVLB  2
0A890:  SUBWFB x1E,F
0A892:  MOVLB  1
0A894:  MOVF   xFC,W
0A896:  MOVLB  2
0A898:  SUBWFB x1F,F
0A89A:  MOVLB  1
0A89C:  MOVF   xFD,W
0A89E:  MOVLB  2
0A8A0:  SUBWFB x20,F
0A8A2:  MOVF   x20,F
0A8A4:  BTFSC  FD8.2
0A8A6:  BRA    A8AE
0A8A8:  MOVLB  0
0A8AA:  GOTO   A8EE
0A8AE:  MOVLB  0
0A8B0:  MOVLB  2
0A8B2:  MOVF   x1F,F
0A8B4:  BTFSC  FD8.2
0A8B6:  BRA    A8BE
0A8B8:  MOVLB  0
0A8BA:  GOTO   A8EE
0A8BE:  MOVLB  0
0A8C0:  MOVLB  2
0A8C2:  MOVF   x1E,W
0A8C4:  MOVLB  1
0A8C6:  SUBWF  xF5,W
0A8C8:  BTFSC  FD8.0
0A8CA:  BRA    A8D2
0A8CC:  MOVLB  0
0A8CE:  GOTO   A8EE
0A8D2:  MOVLB  0
0A8D4:  BTFSS  FD8.2
0A8D6:  GOTO   A806
0A8DA:  MOVLB  1
0A8DC:  MOVF   xF4,W
0A8DE:  MOVLB  2
0A8E0:  SUBWF  x1D,W
0A8E2:  BTFSC  FD8.0
0A8E4:  BRA    A8EC
0A8E6:  MOVLB  0
0A8E8:  GOTO   A806
0A8EC:  MOVLB  0
....................    misf_update_address_area();
0A8EE:  CALL   4DE6
....................    piclog_make(cmd.id, PICLOG_PARAM_END); // Log the end of the command execution
0A8F2:  MOVFF  1EF,244
0A8F6:  MOVLB  2
0A8F8:  SETF   x45
0A8FA:  MOVLB  0
0A8FC:  CALL   4E76
.................... 
.................... 
.................... 
....................    FlashOperationStruct data = {0};
0A900:  MOVLB  2
0A902:  CLRF   x05
0A904:  CLRF   x06
0A906:  CLRF   x07
0A908:  CLRF   x08
0A90A:  CLRF   x09
0A90C:  CLRF   x0A
0A90E:  CLRF   x0B
0A910:  CLRF   x0C
0A912:  CLRF   x0D
0A914:  CLRF   x0E
0A916:  CLRF   x0F
0A918:  CLRF   x10
....................    data.func_type = ENUM_SMF_WRITE;
0A91A:  CLRF   x06
....................    data.mission_id = CIGS_IV1_DATA; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0A91C:  MOVLW  04
0A91E:  MOVWF  x05
....................    data.write_mode = SMF_WRITE_CIRCULAR;
0A920:  MOVLW  02
0A922:  MOVWF  x07
....................    data.source_type = SOURCE_MISF_UNCOPIED;
0A924:  BCF    x08.0
.................... 
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0A926:  MOVLW  48
0A928:  MOVWF  FF6
0A92A:  MOVLW  15
0A92C:  MOVWF  FF7
0A92E:  MOVLW  00
0A930:  MOVWF  FF8
0A932:  MOVLB  0
0A934:  CALL   1FF0
....................    fprintf(PC, "\tMission ID:   %02X\r\n", data.mission_id);
0A938:  MOVLW  5A
0A93A:  MOVWF  FF6
0A93C:  MOVLW  15
0A93E:  MOVWF  FF7
0A940:  MOVLW  00
0A942:  MOVWF  FF8
0A944:  MOVLW  0F
0A946:  MOVLB  A
0A948:  MOVWF  x0C
0A94A:  MOVLB  0
0A94C:  CALL   2026
0A950:  MOVFF  205,A26
0A954:  MOVLW  37
0A956:  MOVLB  A
0A958:  MOVWF  x27
0A95A:  MOVLB  0
0A95C:  CALL   2232
0A960:  MOVLW  0D
0A962:  BTFSS  FA6.6
0A964:  GOTO   A962
0A968:  MOVLB  E
0A96A:  MOVWF  xF9
0A96C:  MOVLW  0A
0A96E:  MOVLB  0
0A970:  BTFSS  FA6.6
0A972:  GOTO   A970
0A976:  MOVLB  E
0A978:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", data.func_type);
0A97A:  MOVLW  70
0A97C:  MOVWF  FF6
0A97E:  MOVLW  15
0A980:  MOVWF  FF7
0A982:  MOVLW  00
0A984:  MOVWF  FF8
0A986:  MOVLW  0F
0A988:  MOVLB  A
0A98A:  MOVWF  x0C
0A98C:  MOVLB  0
0A98E:  CALL   2026
0A992:  MOVFF  206,A26
0A996:  MOVLW  37
0A998:  MOVLB  A
0A99A:  MOVWF  x27
0A99C:  MOVLB  0
0A99E:  CALL   2232
0A9A2:  MOVLW  0D
0A9A4:  BTFSS  FA6.6
0A9A6:  GOTO   A9A4
0A9AA:  MOVLB  E
0A9AC:  MOVWF  xF9
0A9AE:  MOVLW  0A
0A9B0:  MOVLB  0
0A9B2:  BTFSS  FA6.6
0A9B4:  GOTO   A9B2
0A9B8:  MOVLB  E
0A9BA:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", data.write_mode);
0A9BC:  MOVLW  86
0A9BE:  MOVWF  FF6
0A9C0:  MOVLW  15
0A9C2:  MOVWF  FF7
0A9C4:  MOVLW  00
0A9C6:  MOVWF  FF8
0A9C8:  MOVLW  0F
0A9CA:  MOVLB  A
0A9CC:  MOVWF  x0C
0A9CE:  MOVLB  0
0A9D0:  CALL   2026
0A9D4:  MOVFF  207,A26
0A9D8:  MOVLW  37
0A9DA:  MOVLB  A
0A9DC:  MOVWF  x27
0A9DE:  MOVLB  0
0A9E0:  CALL   2232
0A9E4:  MOVLW  0D
0A9E6:  BTFSS  FA6.6
0A9E8:  GOTO   A9E6
0A9EC:  MOVLB  E
0A9EE:  MOVWF  xF9
0A9F0:  MOVLW  0A
0A9F2:  MOVLB  0
0A9F4:  BTFSS  FA6.6
0A9F6:  GOTO   A9F4
0A9FA:  MOVLB  E
0A9FC:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", data.source_type);
0A9FE:  MOVLW  00
0AA00:  MOVLB  2
0AA02:  BTFSC  x08.0
0AA04:  MOVLW  01
0AA06:  MOVWF  x1D
0AA08:  MOVLW  9C
0AA0A:  MOVWF  FF6
0AA0C:  MOVLW  15
0AA0E:  MOVWF  FF7
0AA10:  MOVLW  00
0AA12:  MOVWF  FF8
0AA14:  MOVLW  0F
0AA16:  MOVLB  A
0AA18:  MOVWF  x0C
0AA1A:  MOVLB  0
0AA1C:  CALL   2026
0AA20:  MOVFF  21D,A26
0AA24:  MOVLW  37
0AA26:  MOVLB  A
0AA28:  MOVWF  x27
0AA2A:  MOVLB  0
0AA2C:  CALL   2232
0AA30:  MOVLW  0D
0AA32:  BTFSS  FA6.6
0AA34:  GOTO   AA32
0AA38:  MOVLB  E
0AA3A:  MOVWF  xF9
0AA3C:  MOVLW  0A
0AA3E:  MOVLB  0
0AA40:  BTFSS  FA6.6
0AA42:  GOTO   AA40
0AA46:  MOVLB  E
0AA48:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", data.misf_start_addr);
0AA4A:  MOVLW  B2
0AA4C:  MOVWF  FF6
0AA4E:  MOVLW  15
0AA50:  MOVWF  FF7
0AA52:  MOVLW  00
0AA54:  MOVWF  FF8
0AA56:  MOVLW  0F
0AA58:  MOVLB  A
0AA5A:  MOVWF  x0C
0AA5C:  MOVLB  0
0AA5E:  CALL   2026
0AA62:  MOVLW  02
0AA64:  MOVLB  2
0AA66:  MOVWF  x1D
0AA68:  MOVLB  0
0AA6A:  MOVLW  30
0AA6C:  BTFSS  FA6.6
0AA6E:  GOTO   AA6C
0AA72:  MOVLB  E
0AA74:  MOVWF  xF9
0AA76:  MOVLB  2
0AA78:  DECFSZ x1D,F
0AA7A:  BRA    AA80
0AA7C:  BRA    AA86
0AA7E:  MOVLB  0
0AA80:  MOVLB  0
0AA82:  GOTO   AA6A
0AA86:  MOVFF  209,A26
0AA8A:  MOVLW  37
0AA8C:  MOVLB  A
0AA8E:  MOVWF  x27
0AA90:  MOVLB  0
0AA92:  CALL   2232
0AA96:  MOVLW  0D
0AA98:  BTFSS  FA6.6
0AA9A:  GOTO   AA98
0AA9E:  MOVLB  E
0AAA0:  MOVWF  xF9
0AAA2:  MOVLW  0A
0AAA4:  MOVLB  0
0AAA6:  BTFSS  FA6.6
0AAA8:  GOTO   AAA6
0AAAC:  MOVLB  E
0AAAE:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[CIGS_IV1_DATA].uncopied_counter);
0AAB0:  MOVLW  C8
0AAB2:  MOVWF  FF6
0AAB4:  MOVLW  15
0AAB6:  MOVWF  FF7
0AAB8:  MOVLW  00
0AABA:  MOVWF  FF8
0AABC:  MOVLW  0F
0AABE:  MOVLB  A
0AAC0:  MOVWF  x0C
0AAC2:  MOVLB  0
0AAC4:  CALL   2026
0AAC8:  MOVLW  02
0AACA:  MOVLB  2
0AACC:  MOVWF  x1D
0AACE:  MOVLB  0
0AAD0:  MOVLW  30
0AAD2:  BTFSS  FA6.6
0AAD4:  GOTO   AAD2
0AAD8:  MOVLB  E
0AADA:  MOVWF  xF9
0AADC:  MOVLB  2
0AADE:  DECFSZ x1D,F
0AAE0:  BRA    AAE6
0AAE2:  BRA    AAEC
0AAE4:  MOVLB  0
0AAE6:  MOVLB  0
0AAE8:  GOTO   AAD0
0AAEC:  MOVFF  14E,A26
0AAF0:  MOVLW  37
0AAF2:  MOVLB  A
0AAF4:  MOVWF  x27
0AAF6:  MOVLB  0
0AAF8:  CALL   2232
0AAFC:  MOVLW  0D
0AAFE:  BTFSS  FA6.6
0AB00:  GOTO   AAFE
0AB04:  MOVLB  E
0AB06:  MOVWF  xF9
0AB08:  MOVLW  0A
0AB0A:  MOVLB  0
0AB0C:  BTFSS  FA6.6
0AB0E:  GOTO   AB0C
0AB12:  MOVLB  E
0AB14:  MOVWF  xF9
.................... 
....................    enqueue_flash_operation(&data); // SMFへのデータコピーを実行する
0AB16:  MOVLW  02
0AB18:  MOVLB  A
0AB1A:  MOVWF  x0D
0AB1C:  MOVLW  05
0AB1E:  MOVWF  x0C
0AB20:  MOVLB  0
0AB22:  CALL   A506
.................... 
....................    FlashOperationStruct piclog = {0};
0AB26:  MOVLB  2
0AB28:  CLRF   x11
0AB2A:  CLRF   x12
0AB2C:  CLRF   x13
0AB2E:  CLRF   x14
0AB30:  CLRF   x15
0AB32:  CLRF   x16
0AB34:  CLRF   x17
0AB36:  CLRF   x18
0AB38:  CLRF   x19
0AB3A:  CLRF   x1A
0AB3C:  CLRF   x1B
0AB3E:  CLRF   x1C
....................    piclog.func_type = ENUM_SMF_WRITE;
0AB40:  CLRF   x12
....................    piclog.mission_id = FLASH_ID_PICLOG; // ID_CIGS_MEASURE_DATA; // コピーする目的のデータ種別
0AB42:  MOVLW  01
0AB44:  MOVWF  x11
....................    piclog.write_mode = SMF_WRITE_CIRCULAR;
0AB46:  MOVLW  02
0AB48:  MOVWF  x13
....................    piclog.source_type = SOURCE_MISF_UNCOPIED;
0AB4A:  BCF    x14.0
.................... 
....................    fprintf(PC, "\r\nADD SMF QUEUE\r\n");
0AB4C:  MOVLW  DE
0AB4E:  MOVWF  FF6
0AB50:  MOVLW  15
0AB52:  MOVWF  FF7
0AB54:  MOVLW  00
0AB56:  MOVWF  FF8
0AB58:  MOVLB  0
0AB5A:  CALL   1FF0
....................    fprintf(PC, "\tMission ID:   %02X\r\n", piclog.mission_id);
0AB5E:  MOVLW  F0
0AB60:  MOVWF  FF6
0AB62:  MOVLW  15
0AB64:  MOVWF  FF7
0AB66:  MOVLW  00
0AB68:  MOVWF  FF8
0AB6A:  MOVLW  0F
0AB6C:  MOVLB  A
0AB6E:  MOVWF  x0C
0AB70:  MOVLB  0
0AB72:  CALL   2026
0AB76:  MOVFF  211,A26
0AB7A:  MOVLW  37
0AB7C:  MOVLB  A
0AB7E:  MOVWF  x27
0AB80:  MOVLB  0
0AB82:  CALL   2232
0AB86:  MOVLW  0D
0AB88:  BTFSS  FA6.6
0AB8A:  GOTO   AB88
0AB8E:  MOVLB  E
0AB90:  MOVWF  xF9
0AB92:  MOVLW  0A
0AB94:  MOVLB  0
0AB96:  BTFSS  FA6.6
0AB98:  GOTO   AB96
0AB9C:  MOVLB  E
0AB9E:  MOVWF  xF9
....................    fprintf(PC, "\tFunction Type:%02X\r\n", piclog.func_type);
0ABA0:  MOVLW  06
0ABA2:  MOVWF  FF6
0ABA4:  MOVLW  16
0ABA6:  MOVWF  FF7
0ABA8:  MOVLW  00
0ABAA:  MOVWF  FF8
0ABAC:  MOVLW  0F
0ABAE:  MOVLB  A
0ABB0:  MOVWF  x0C
0ABB2:  MOVLB  0
0ABB4:  CALL   2026
0ABB8:  MOVFF  212,A26
0ABBC:  MOVLW  37
0ABBE:  MOVLB  A
0ABC0:  MOVWF  x27
0ABC2:  MOVLB  0
0ABC4:  CALL   2232
0ABC8:  MOVLW  0D
0ABCA:  BTFSS  FA6.6
0ABCC:  GOTO   ABCA
0ABD0:  MOVLB  E
0ABD2:  MOVWF  xF9
0ABD4:  MOVLW  0A
0ABD6:  MOVLB  0
0ABD8:  BTFSS  FA6.6
0ABDA:  GOTO   ABD8
0ABDE:  MOVLB  E
0ABE0:  MOVWF  xF9
....................    fprintf(PC, "\tWrite Mode:   %02X\r\n", piclog.write_mode);
0ABE2:  MOVLW  1C
0ABE4:  MOVWF  FF6
0ABE6:  MOVLW  16
0ABE8:  MOVWF  FF7
0ABEA:  MOVLW  00
0ABEC:  MOVWF  FF8
0ABEE:  MOVLW  0F
0ABF0:  MOVLB  A
0ABF2:  MOVWF  x0C
0ABF4:  MOVLB  0
0ABF6:  CALL   2026
0ABFA:  MOVFF  213,A26
0ABFE:  MOVLW  37
0AC00:  MOVLB  A
0AC02:  MOVWF  x27
0AC04:  MOVLB  0
0AC06:  CALL   2232
0AC0A:  MOVLW  0D
0AC0C:  BTFSS  FA6.6
0AC0E:  GOTO   AC0C
0AC12:  MOVLB  E
0AC14:  MOVWF  xF9
0AC16:  MOVLW  0A
0AC18:  MOVLB  0
0AC1A:  BTFSS  FA6.6
0AC1C:  GOTO   AC1A
0AC20:  MOVLB  E
0AC22:  MOVWF  xF9
....................    fprintf(PC, "\tSource Type:  %02X\r\n", piclog.source_type);
0AC24:  MOVLW  00
0AC26:  MOVLB  2
0AC28:  BTFSC  x14.0
0AC2A:  MOVLW  01
0AC2C:  MOVWF  x1D
0AC2E:  MOVLW  32
0AC30:  MOVWF  FF6
0AC32:  MOVLW  16
0AC34:  MOVWF  FF7
0AC36:  MOVLW  00
0AC38:  MOVWF  FF8
0AC3A:  MOVLW  0F
0AC3C:  MOVLB  A
0AC3E:  MOVWF  x0C
0AC40:  MOVLB  0
0AC42:  CALL   2026
0AC46:  MOVFF  21D,A26
0AC4A:  MOVLW  37
0AC4C:  MOVLB  A
0AC4E:  MOVWF  x27
0AC50:  MOVLB  0
0AC52:  CALL   2232
0AC56:  MOVLW  0D
0AC58:  BTFSS  FA6.6
0AC5A:  GOTO   AC58
0AC5E:  MOVLB  E
0AC60:  MOVWF  xF9
0AC62:  MOVLW  0A
0AC64:  MOVLB  0
0AC66:  BTFSS  FA6.6
0AC68:  GOTO   AC66
0AC6C:  MOVLB  E
0AC6E:  MOVWF  xF9
....................    fprintf(PC, "\tStart Address:%04X\r\n", piclog.misf_start_addr);
0AC70:  MOVLW  48
0AC72:  MOVWF  FF6
0AC74:  MOVLW  16
0AC76:  MOVWF  FF7
0AC78:  MOVLW  00
0AC7A:  MOVWF  FF8
0AC7C:  MOVLW  0F
0AC7E:  MOVLB  A
0AC80:  MOVWF  x0C
0AC82:  MOVLB  0
0AC84:  CALL   2026
0AC88:  MOVLW  02
0AC8A:  MOVLB  2
0AC8C:  MOVWF  x1D
0AC8E:  MOVLB  0
0AC90:  MOVLW  30
0AC92:  BTFSS  FA6.6
0AC94:  GOTO   AC92
0AC98:  MOVLB  E
0AC9A:  MOVWF  xF9
0AC9C:  MOVLB  2
0AC9E:  DECFSZ x1D,F
0ACA0:  BRA    ACA6
0ACA2:  BRA    ACAC
0ACA4:  MOVLB  0
0ACA6:  MOVLB  0
0ACA8:  GOTO   AC90
0ACAC:  MOVFF  215,A26
0ACB0:  MOVLW  37
0ACB2:  MOVLB  A
0ACB4:  MOVWF  x27
0ACB6:  MOVLB  0
0ACB8:  CALL   2232
0ACBC:  MOVLW  0D
0ACBE:  BTFSS  FA6.6
0ACC0:  GOTO   ACBE
0ACC4:  MOVLB  E
0ACC6:  MOVWF  xF9
0ACC8:  MOVLW  0A
0ACCA:  MOVLB  0
0ACCC:  BTFSS  FA6.6
0ACCE:  GOTO   ACCC
0ACD2:  MOVLB  E
0ACD4:  MOVWF  xF9
....................    fprintf(PC, "\tSize:         %04X\r\n", misf_counter_table[FLASH_ID_PICLOG].uncopied_counter);
0ACD6:  MOVLW  5E
0ACD8:  MOVWF  FF6
0ACDA:  MOVLW  16
0ACDC:  MOVWF  FF7
0ACDE:  MOVLW  00
0ACE0:  MOVWF  FF8
0ACE2:  MOVLW  0F
0ACE4:  MOVLB  A
0ACE6:  MOVWF  x0C
0ACE8:  MOVLB  0
0ACEA:  CALL   2026
0ACEE:  MOVLW  02
0ACF0:  MOVLB  2
0ACF2:  MOVWF  x1D
0ACF4:  MOVLB  0
0ACF6:  MOVLW  30
0ACF8:  BTFSS  FA6.6
0ACFA:  GOTO   ACF8
0ACFE:  MOVLB  E
0AD00:  MOVWF  xF9
0AD02:  MOVLB  2
0AD04:  DECFSZ x1D,F
0AD06:  BRA    AD0C
0AD08:  BRA    AD12
0AD0A:  MOVLB  0
0AD0C:  MOVLB  0
0AD0E:  GOTO   ACF6
0AD12:  MOVFF  130,A26
0AD16:  MOVLW  37
0AD18:  MOVLB  A
0AD1A:  MOVWF  x27
0AD1C:  MOVLB  0
0AD1E:  CALL   2232
0AD22:  MOVLW  0D
0AD24:  BTFSS  FA6.6
0AD26:  GOTO   AD24
0AD2A:  MOVLB  E
0AD2C:  MOVWF  xF9
0AD2E:  MOVLW  0A
0AD30:  MOVLB  0
0AD32:  BTFSS  FA6.6
0AD34:  GOTO   AD32
0AD38:  MOVLB  E
0AD3A:  MOVWF  xF9
....................    enqueue_flash_operation(&piclog); // SMFへのデータコピーを実行する
0AD3C:  MOVLW  02
0AD3E:  MOVLB  A
0AD40:  MOVWF  x0D
0AD42:  MOVLW  11
0AD44:  MOVWF  x0C
0AD46:  MOVLB  0
0AD48:  CALL   A506
....................    fprintf(PC, "End MODE MEAS IV mission\r\n");
0AD4C:  MOVLW  74
0AD4E:  MOVWF  FF6
0AD50:  MOVLW  16
0AD52:  MOVWF  FF7
0AD54:  MOVLW  00
0AD56:  MOVWF  FF8
0AD58:  CALL   1FF0
0AD5C:  GOTO   E420 (RETURN)
.................... }
.................... 
.................... void mode_meas_iv_debug(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE IV DEBUG\r\n");
*
0C2D4:  MOVLW  90
0C2D6:  MOVWF  FF6
0C2D8:  MOVLW  16
0C2DA:  MOVWF  FF7
0C2DC:  MOVLW  00
0C2DE:  MOVWF  FF8
0C2E0:  CALL   1FF0
.................... 
....................    MEAS_IV_CMD cmd = make_meas_iv_cmd(uplinkcmd_ptr); // Create the measurement command structure
0C2E4:  MOVFF  1EE,224
0C2E8:  MOVFF  1ED,223
0C2EC:  CALL   8016
0C2F0:  MOVFF  02,03
0C2F4:  MOVF   01,W
0C2F6:  MOVWF  FE1
0C2F8:  MOVFF  03,FE2
0C2FC:  MOVLW  01
0C2FE:  MOVWF  FEA
0C300:  MOVLW  EF
0C302:  MOVWF  FE9
0C304:  MOVLW  0C
0C306:  MOVWF  01
0C308:  MOVFF  FE6,FEE
0C30C:  DECFSZ 01,F
0C30E:  GOTO   C308
....................    
....................    fprintf(PC, "\tID: %02X\r\n", cmd.id);
0C312:  MOVLW  A6
0C314:  MOVWF  FF6
0C316:  MOVLW  16
0C318:  MOVWF  FF7
0C31A:  MOVLW  00
0C31C:  MOVWF  FF8
0C31E:  MOVLW  05
0C320:  MOVLB  A
0C322:  MOVWF  x0C
0C324:  MOVLB  0
0C326:  CALL   2026
0C32A:  MOVFF  1EF,A26
0C32E:  MOVLW  37
0C330:  MOVLB  A
0C332:  MOVWF  x27
0C334:  MOVLB  0
0C336:  CALL   2232
0C33A:  MOVLW  0D
0C33C:  BTFSS  FA6.6
0C33E:  GOTO   C33C
0C342:  MOVLB  E
0C344:  MOVWF  xF9
0C346:  MOVLW  0A
0C348:  MOVLB  0
0C34A:  BTFSS  FA6.6
0C34C:  GOTO   C34A
0C350:  MOVLB  E
0C352:  MOVWF  xF9
....................    fprintf(PC, "\tSleepTime:        0x%04X\r\n", cmd.sleep_time);
0C354:  MOVLW  B2
0C356:  MOVWF  FF6
0C358:  MOVLW  16
0C35A:  MOVWF  FF7
0C35C:  MOVLW  00
0C35E:  MOVWF  FF8
0C360:  MOVLW  15
0C362:  MOVLB  A
0C364:  MOVWF  x0C
0C366:  MOVLB  0
0C368:  CALL   2026
0C36C:  MOVLW  02
0C36E:  MOVLB  2
0C370:  MOVWF  x03
0C372:  MOVLB  0
0C374:  MOVLW  30
0C376:  BTFSS  FA6.6
0C378:  GOTO   C376
0C37C:  MOVLB  E
0C37E:  MOVWF  xF9
0C380:  MOVLB  2
0C382:  DECFSZ x03,F
0C384:  BRA    C38A
0C386:  BRA    C390
0C388:  MOVLB  0
0C38A:  MOVLB  0
0C38C:  GOTO   C374
0C390:  MOVFF  1F0,A26
0C394:  MOVLW  37
0C396:  MOVLB  A
0C398:  MOVWF  x27
0C39A:  MOVLB  0
0C39C:  CALL   2232
0C3A0:  MOVLW  0D
0C3A2:  BTFSS  FA6.6
0C3A4:  GOTO   C3A2
0C3A8:  MOVLB  E
0C3AA:  MOVWF  xF9
0C3AC:  MOVLW  0A
0C3AE:  MOVLB  0
0C3B0:  BTFSS  FA6.6
0C3B2:  GOTO   C3B0
0C3B6:  MOVLB  E
0C3B8:  MOVWF  xF9
....................    fprintf(PC, "\tLogCurrThreshold: 0x%04X\r\n", cmd.curr_threshold);
0C3BA:  MOVLW  CE
0C3BC:  MOVWF  FF6
0C3BE:  MOVLW  16
0C3C0:  MOVWF  FF7
0C3C2:  MOVLW  00
0C3C4:  MOVWF  FF8
0C3C6:  MOVLW  15
0C3C8:  MOVLB  A
0C3CA:  MOVWF  x0C
0C3CC:  MOVLB  0
0C3CE:  CALL   2026
0C3D2:  MOVLW  02
0C3D4:  MOVLB  2
0C3D6:  MOVWF  x03
0C3D8:  MOVLB  0
0C3DA:  MOVLW  30
0C3DC:  BTFSS  FA6.6
0C3DE:  GOTO   C3DC
0C3E2:  MOVLB  E
0C3E4:  MOVWF  xF9
0C3E6:  MOVLB  2
0C3E8:  DECFSZ x03,F
0C3EA:  BRA    C3F0
0C3EC:  BRA    C3F6
0C3EE:  MOVLB  0
0C3F0:  MOVLB  0
0C3F2:  GOTO   C3DA
0C3F6:  MOVFF  1F2,A26
0C3FA:  MOVLW  37
0C3FC:  MOVLB  A
0C3FE:  MOVWF  x27
0C400:  MOVLB  0
0C402:  CALL   2232
0C406:  MOVLW  0D
0C408:  BTFSS  FA6.6
0C40A:  GOTO   C408
0C40E:  MOVLB  E
0C410:  MOVWF  xF9
0C412:  MOVLW  0A
0C414:  MOVLB  0
0C416:  BTFSS  FA6.6
0C418:  GOTO   C416
0C41C:  MOVLB  E
0C41E:  MOVWF  xF9
....................    fprintf(PC, "\tPDThreshold:      0x%04X\r\n", cmd.pd_threshold);
0C420:  MOVLW  EA
0C422:  MOVWF  FF6
0C424:  MOVLW  16
0C426:  MOVWF  FF7
0C428:  MOVLW  00
0C42A:  MOVWF  FF8
0C42C:  MOVLW  15
0C42E:  MOVLB  A
0C430:  MOVWF  x0C
0C432:  MOVLB  0
0C434:  CALL   2026
0C438:  MOVLW  02
0C43A:  MOVLB  2
0C43C:  MOVWF  x03
0C43E:  MOVLB  0
0C440:  MOVLW  30
0C442:  BTFSS  FA6.6
0C444:  GOTO   C442
0C448:  MOVLB  E
0C44A:  MOVWF  xF9
0C44C:  MOVLB  2
0C44E:  DECFSZ x03,F
0C450:  BRA    C456
0C452:  BRA    C45C
0C454:  MOVLB  0
0C456:  MOVLB  0
0C458:  GOTO   C440
0C45C:  MOVFF  1F4,A26
0C460:  MOVLW  37
0C462:  MOVLB  A
0C464:  MOVWF  x27
0C466:  MOVLB  0
0C468:  CALL   2232
0C46C:  MOVLW  0D
0C46E:  BTFSS  FA6.6
0C470:  GOTO   C46E
0C474:  MOVLB  E
0C476:  MOVWF  xF9
0C478:  MOVLW  0A
0C47A:  MOVLB  0
0C47C:  BTFSS  FA6.6
0C47E:  GOTO   C47C
0C482:  MOVLB  E
0C484:  MOVWF  xF9
....................    fprintf(PC, "\tCurrentLimit:     0x%04X\r\n", cmd.curr_limit);
0C486:  MOVLW  06
0C488:  MOVWF  FF6
0C48A:  MOVLW  17
0C48C:  MOVWF  FF7
0C48E:  MOVLW  00
0C490:  MOVWF  FF8
0C492:  MOVLW  15
0C494:  MOVLB  A
0C496:  MOVWF  x0C
0C498:  MOVLB  0
0C49A:  CALL   2026
0C49E:  MOVLW  02
0C4A0:  MOVLB  2
0C4A2:  MOVWF  x03
0C4A4:  MOVLB  0
0C4A6:  MOVLW  30
0C4A8:  BTFSS  FA6.6
0C4AA:  GOTO   C4A8
0C4AE:  MOVLB  E
0C4B0:  MOVWF  xF9
0C4B2:  MOVLB  2
0C4B4:  DECFSZ x03,F
0C4B6:  BRA    C4BC
0C4B8:  BRA    C4C2
0C4BA:  MOVLB  0
0C4BC:  MOVLB  0
0C4BE:  GOTO   C4A6
0C4C2:  MOVFF  1F6,A26
0C4C6:  MOVLW  37
0C4C8:  MOVLB  A
0C4CA:  MOVWF  x27
0C4CC:  MOVLB  0
0C4CE:  CALL   2232
0C4D2:  MOVLW  0D
0C4D4:  BTFSS  FA6.6
0C4D6:  GOTO   C4D4
0C4DA:  MOVLB  E
0C4DC:  MOVWF  xF9
0C4DE:  MOVLW  0A
0C4E0:  MOVLB  0
0C4E2:  BTFSS  FA6.6
0C4E4:  GOTO   C4E2
0C4E8:  MOVLB  E
0C4EA:  MOVWF  xF9
....................    fprintf(PC, "\tMeasurementTime:  0x%04X\r\n", cmd.meas_time);
0C4EC:  MOVLW  22
0C4EE:  MOVWF  FF6
0C4F0:  MOVLW  17
0C4F2:  MOVWF  FF7
0C4F4:  MOVLW  00
0C4F6:  MOVWF  FF8
0C4F8:  MOVLW  15
0C4FA:  MOVLB  A
0C4FC:  MOVWF  x0C
0C4FE:  MOVLB  0
0C500:  CALL   2026
0C504:  MOVLW  02
0C506:  MOVLB  2
0C508:  MOVWF  x03
0C50A:  MOVLB  0
0C50C:  MOVLW  30
0C50E:  BTFSS  FA6.6
0C510:  GOTO   C50E
0C514:  MOVLB  E
0C516:  MOVWF  xF9
0C518:  MOVLB  2
0C51A:  DECFSZ x03,F
0C51C:  BRA    C522
0C51E:  BRA    C528
0C520:  MOVLB  0
0C522:  MOVLB  0
0C524:  GOTO   C50C
0C528:  MOVFF  1F8,A26
0C52C:  MOVLW  37
0C52E:  MOVLB  A
0C530:  MOVWF  x27
0C532:  MOVLB  0
0C534:  CALL   2232
0C538:  MOVLW  0D
0C53A:  BTFSS  FA6.6
0C53C:  GOTO   C53A
0C540:  MOVLB  E
0C542:  MOVWF  xF9
0C544:  MOVLW  0A
0C546:  MOVLB  0
0C548:  BTFSS  FA6.6
0C54A:  GOTO   C548
0C54E:  MOVLB  E
0C550:  MOVWF  xF9
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_START); // Log start
0C552:  MOVFF  1EF,244
0C556:  MOVLB  2
0C558:  CLRF   x45
0C55A:  MOVLB  0
0C55C:  CALL   4E76
.................... 
....................    unsigned int32 start_time = get_current_sec();
....................    unsigned int32 current_time = 0;
0C560:  CALL   3920
0C564:  MOVFF  03,1FE
0C568:  MOVFF  02,1FD
0C56C:  MOVFF  01,1FC
0C570:  MOVFF  00,1FB
0C574:  MOVLB  2
0C576:  CLRF   x02
0C578:  CLRF   x01
0C57A:  CLRF   x00
0C57C:  MOVLB  1
0C57E:  CLRF   xFF
....................    test_sweep(cmd.curr_threshold, cmd.curr_limit);
0C580:  MOVFF  1F3,204
0C584:  MOVFF  1F2,203
0C588:  MOVFF  1F7,206
0C58C:  MOVFF  1F6,205
0C590:  MOVLB  0
0C592:  GOTO   AD60
.................... 
....................    piclog_make(cmd.id, PICLOG_PARAM_END);
0C596:  MOVFF  1EF,244
0C59A:  MOVLB  2
0C59C:  SETF   x45
0C59E:  MOVLB  0
0C5A0:  CALL   4E76
....................    fprintf(PC, "[IVDBG] End MODE IV DEBUG\r\n");
0C5A4:  MOVLW  3E
0C5A6:  MOVWF  FF6
0C5A8:  MOVLW  17
0C5AA:  MOVWF  FF7
0C5AC:  MOVLW  00
0C5AE:  MOVWF  FF8
0C5B0:  CALL   1FF0
0C5B4:  GOTO   E430 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void mode_meas_env(unsigned int8 *uplinkcmd_ptr)
0C5B8:  MOVLB  1
0C5BA:  CLRF   xF0
0C5BC:  MOVLW  64
0C5BE:  MOVWF  xEF
0C5C0:  SETF   xF2
0C5C2:  SETF   xF1
0C5C4:  MOVLB  0
0C5C6:  CALL   3920
0C5CA:  MOVFF  03,1F6
0C5CE:  MOVFF  02,1F5
0C5D2:  MOVFF  01,1F4
0C5D6:  MOVFF  00,1F3
0C5DA:  MOVLB  1
0C5DC:  MOVF   xEF,W
0C5DE:  SUBWF  xF3,W
0C5E0:  MOVWF  xF7
0C5E2:  MOVF   xF0,W
0C5E4:  SUBWFB xF4,W
0C5E6:  MOVWF  xF8
0C5E8:  MOVLW  00
0C5EA:  SUBWFB xF5,W
0C5EC:  MOVWF  xF9
0C5EE:  MOVLW  00
0C5F0:  SUBWFB xF6,W
0C5F2:  MOVWF  xFA
.................... {
....................    unsigned int16 interval = 100;   // 測定間隔 [秒]
....................    unsigned int16 end_time = 0xFFFF;
.................... 
....................    unsigned int32 current_time = get_current_sec();
....................    unsigned int32 last_time = current_time - interval;  // 最初にすぐ測定するため
.................... 
....................    // loging data
....................    unsigned int8 logdata[6];
....................    unsigned int16 temp_top;
....................    unsigned int16 temp_bot;
....................    unsigned int16 temp_mis7;
....................    unsigned int16 PD;
.................... 
....................    // Flash Write 
....................    unsigned int32 write_address;
.................... 
....................    fprintf(PC, "temp_top, temp_bot, temp_mis7, pd\r\n");
0C5F4:  MOVLW  5A
0C5F6:  MOVWF  FF6
0C5F8:  MOVLW  17
0C5FA:  MOVWF  FF7
0C5FC:  MOVLW  00
0C5FE:  MOVWF  FF8
0C600:  MOVLB  0
0C602:  CALL   1FF0
.................... 
....................    while (true) {
....................        current_time = get_current_sec();
0C606:  CALL   3920
0C60A:  MOVFF  03,1F6
0C60E:  MOVFF  02,1F5
0C612:  MOVFF  01,1F4
0C616:  MOVFF  00,1F3
.................... 
....................        // intervalごとに測定
....................        if ((current_time - last_time) >= interval) {
0C61A:  MOVLB  1
0C61C:  MOVF   xF7,W
0C61E:  SUBWF  xF3,W
0C620:  MOVLB  2
0C622:  MOVWF  x0D
0C624:  MOVLB  1
0C626:  MOVF   xF8,W
0C628:  SUBWFB xF4,W
0C62A:  MOVLB  2
0C62C:  MOVWF  x0E
0C62E:  MOVLB  1
0C630:  MOVF   xF9,W
0C632:  SUBWFB xF5,W
0C634:  MOVLB  2
0C636:  MOVWF  x0F
0C638:  MOVLB  1
0C63A:  MOVF   xFA,W
0C63C:  SUBWFB xF6,W
0C63E:  MOVLB  2
0C640:  MOVWF  x10
0C642:  MOVF   x10,F
0C644:  BTFSC  FD8.2
0C646:  BRA    C64E
0C648:  MOVLB  0
0C64A:  GOTO   C68E
0C64E:  MOVLB  0
0C650:  MOVLB  2
0C652:  MOVF   x0F,F
0C654:  BTFSC  FD8.2
0C656:  BRA    C65E
0C658:  MOVLB  0
0C65A:  GOTO   C68E
0C65E:  MOVLB  0
0C660:  MOVLB  1
0C662:  MOVF   xF0,W
0C664:  MOVLB  2
0C666:  SUBWF  x0E,W
0C668:  BTFSC  FD8.0
0C66A:  BRA    C672
0C66C:  MOVLB  0
0C66E:  GOTO   C6AA
0C672:  MOVLB  0
0C674:  BTFSS  FD8.2
0C676:  GOTO   C68E
0C67A:  MOVLB  1
0C67C:  MOVF   xEF,W
0C67E:  MOVLB  2
0C680:  SUBWF  x0D,W
0C682:  BTFSC  FD8.0
0C684:  BRA    C68C
0C686:  MOVLB  0
0C688:  GOTO   C6AA
0C68C:  MOVLB  0
....................            last_time = current_time;
0C68E:  MOVFF  1F6,1FA
0C692:  MOVFF  1F5,1F9
0C696:  MOVFF  1F4,1F8
0C69A:  MOVFF  1F3,1F7
....................          /*
....................            // 次の測定データ(6バイト)で64バイト境界を超えるか確認
....................            if (environment_data_ptr->reserve_counter1 + 6 > PACKET_SIZE) {
....................                unsigned int8 bankdata[4] = {0};
....................                write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................                write_data_bytes(mis_fm, write_address, bankdata, 4);
....................                environment_data_ptr->used_counter   += 4;
....................                environment_data_ptr->uncopied_counter += 4;
....................                environment_data_ptr->reserve_counter1 = 0;
....................                misf_update_address_area();
....................            }
.................... 
....................            // 環境データ読み取り
....................            temp_top  = ad7490_read(ADC_TEMP_PY_TOP);
....................            temp_bot  = ad7490_read(ADC_TEMP_PY_BOT);
....................            temp_mis7 = ad7490_read(ADC_TEMP_MIS7);
....................            PD        = ad7490_read(ADC_PD);
.................... 
....................            logdata[0] = (temp_top >> 4) & 0xFF;
....................            logdata[1] = ((temp_top & 0x0F) << 4) | ((temp_bot >> 8) & 0x0F);
....................            logdata[2] = temp_bot & 0xFF;
....................            logdata[3] = (temp_mis7 >> 4) & 0xFF;
....................            logdata[4] = temp_mis7 & 0xFF;
....................            logdata[5] = PD & 0xFF;
.................... 
....................            // 書き込み
....................            write_address = MISF_CIGS_ENVIRO_START + environment_data_ptr->used_counter;
....................            write_data_bytes(mis_fm, write_address, logdata, 6);
....................            environment_data_ptr->used_counter   += 6;
....................            environment_data_ptr->uncopied_counter += 6;
....................            environment_data_ptr->reserve_counter1 += 6;
....................            fprintf(PC, "0x%04LX, 0x%04LX, 0x%04LX, 0x%04LX\r\n", temp_top, temp_bot, temp_mis7, PD);
....................        }
....................          */
....................        delay_ms(1);  // 過負荷防止用
0C69E:  MOVLW  01
0C6A0:  MOVLB  B
0C6A2:  MOVWF  x4C
0C6A4:  MOVLB  0
0C6A6:  CALL   1FC2
....................    }
0C6AA:  GOTO   C606
.................... }
0C6AE:  GOTO   E440 (RETURN)
.................... }
.................... // make cmd structure from uplink command
.................... meas_iv_param_t make_meas_iv_cmd(int8 *uplinkcmd_ptr)
.................... {
....................    meas_iv_param_t cmd;
....................    cmd.id = uplinkcmd_ptr[0];
*
08016:  MOVLB  2
08018:  MOVF   x23,W
0801A:  MOVWF  FE9
0801C:  MOVF   x24,W
0801E:  MOVWF  FEA
08020:  MOVFF  FEF,225
....................    cmd.interval = ((unsigned int16)uplinkcmd_ptr[1] << 8) | ((unsigned int16)uplinkcmd_ptr[2]);
08024:  MOVLW  01
08026:  ADDWF  x23,W
08028:  MOVWF  FE9
0802A:  MOVLW  00
0802C:  ADDWFC x24,W
0802E:  MOVWF  FEA
08030:  MOVF   FEF,W
08032:  CLRF   x31
08034:  MOVWF  x30
08036:  MOVFF  230,231
0803A:  CLRF   x30
0803C:  MOVLW  02
0803E:  ADDWF  x23,W
08040:  MOVWF  FE9
08042:  MOVLW  00
08044:  ADDWFC x24,W
08046:  MOVWF  FEA
08048:  MOVF   FEF,W
0804A:  CLRF   03
0804C:  IORWF  x30,W
0804E:  MOVWF  x26
08050:  MOVF   03,W
08052:  IORWF  x31,W
08054:  MOVWF  x27
....................    cmd.log_threshold = (unsigned int16)uplinkcmd_ptr[3]<< 4;
08056:  MOVLW  03
08058:  ADDWF  x23,W
0805A:  MOVWF  FE9
0805C:  MOVLW  00
0805E:  ADDWFC x24,W
08060:  MOVWF  FEA
08062:  MOVF   FEF,W
08064:  CLRF   x31
08066:  MOVWF  x30
08068:  RLCF   x30,W
0806A:  MOVWF  x2C
0806C:  RLCF   x31,W
0806E:  MOVWF  x2D
08070:  RLCF   x2C,F
08072:  RLCF   x2D,F
08074:  RLCF   x2C,F
08076:  RLCF   x2D,F
08078:  RLCF   x2C,F
0807A:  RLCF   x2D,F
0807C:  MOVLW  F0
0807E:  ANDWF  x2C,F
....................    cmd.sweep_limit = (unsigned int16)uplinkcmd_ptr[4]<< 4;
08080:  MOVLW  04
08082:  ADDWF  x23,W
08084:  MOVWF  FE9
08086:  MOVLW  00
08088:  ADDWFC x24,W
0808A:  MOVWF  FEA
0808C:  MOVF   FEF,W
0808E:  CLRF   x31
08090:  MOVWF  x30
08092:  RLCF   x30,W
08094:  MOVWF  x2E
08096:  RLCF   x31,W
08098:  MOVWF  x2F
0809A:  RLCF   x2E,F
0809C:  RLCF   x2F,F
0809E:  RLCF   x2E,F
080A0:  RLCF   x2F,F
080A2:  RLCF   x2E,F
080A4:  RLCF   x2F,F
080A6:  MOVLW  F0
080A8:  ANDWF  x2E,F
....................    cmd.pd_threshold = (unsigned int16)uplinkcmd_ptr[5]<< 4;
080AA:  MOVLW  05
080AC:  ADDWF  x23,W
080AE:  MOVWF  FE9
080B0:  MOVLW  00
080B2:  ADDWFC x24,W
080B4:  MOVWF  FEA
080B6:  MOVF   FEF,W
080B8:  CLRF   x31
080BA:  MOVWF  x30
080BC:  RLCF   x30,W
080BE:  MOVWF  x28
080C0:  RLCF   x31,W
080C2:  MOVWF  x29
080C4:  RLCF   x28,F
080C6:  RLCF   x29,F
080C8:  RLCF   x28,F
080CA:  RLCF   x29,F
080CC:  RLCF   x28,F
080CE:  RLCF   x29,F
080D0:  MOVLW  F0
080D2:  ANDWF  x28,F
....................    cmd.meas_time = (unsigned int16)uplinkcmd_ptr[6] *60; // 分 -> 秒
080D4:  MOVLW  06
080D6:  ADDWF  x23,W
080D8:  MOVWF  FE9
080DA:  MOVLW  00
080DC:  ADDWFC x24,W
080DE:  MOVWF  FEA
080E0:  MOVF   FEF,W
080E2:  CLRF   x31
080E4:  MOVWF  x30
080E6:  MOVFF  231,A9C
080EA:  MOVFF  230,A9B
080EE:  MOVLB  A
080F0:  CLRF   x9E
080F2:  MOVLW  3C
080F4:  MOVWF  x9D
080F6:  MOVLB  0
080F8:  CALL   7FF4
080FC:  MOVFF  02,22B
08100:  MOVFF  01,22A
....................    return cmd;
08104:  MOVLW  25
08106:  MOVWF  01
08108:  MOVLW  02
0810A:  MOVWF  02
0810C:  RETURN 0
.................... }
.................... 
.................... void print_meas_iv_cmd(meas_iv_param_t *cmd_ptr)
*
08CAE:  MOVLW  03
08CB0:  MOVLB  2
08CB2:  ADDWF  x1D,W
08CB4:  MOVWF  FE9
08CB6:  MOVLW  00
08CB8:  ADDWFC x1E,W
08CBA:  MOVWF  FEA
08CBC:  MOVFF  FEC,226
08CC0:  MOVF   FED,F
08CC2:  MOVFF  FEF,225
08CC6:  MOVFF  226,228
08CCA:  MOVFF  225,227
08CCE:  MOVLB  0
08CD0:  GOTO   810E
08CD4:  MOVFF  02,220
08CD8:  MOVFF  01,21F
08CDC:  MOVLW  09
08CDE:  MOVLB  2
08CE0:  ADDWF  x1D,W
08CE2:  MOVWF  FE9
08CE4:  MOVLW  00
08CE6:  ADDWFC x1E,W
08CE8:  MOVWF  FEA
08CEA:  MOVFF  FEC,226
08CEE:  MOVF   FED,F
08CF0:  MOVFF  FEF,225
08CF4:  MOVFF  226,228
08CF8:  MOVFF  225,227
08CFC:  MOVLB  0
08CFE:  CALL   8A7C
08D02:  MOVFF  02,222
08D06:  MOVFF  01,221
08D0A:  MOVLW  07
08D0C:  MOVLB  2
08D0E:  ADDWF  x1D,W
08D10:  MOVWF  FE9
08D12:  MOVLW  00
08D14:  ADDWFC x1E,W
08D16:  MOVWF  FEA
08D18:  MOVFF  FEC,226
08D1C:  MOVF   FED,F
08D1E:  MOVFF  FEF,225
08D22:  MOVFF  226,228
08D26:  MOVFF  225,227
08D2A:  MOVLB  0
08D2C:  CALL   8A7C
08D30:  MOVFF  02,224
08D34:  MOVFF  01,223
.................... {
....................    // Calc
....................    unsigned int16 pd_value = calc_pd_value(cmd_ptr->pd_threshold);
....................    int16 sweep_limit = calc_curr_value(cmd_ptr->sweep_limit);
....................    int16 log_threshold = calc_curr_value(cmd_ptr->log_threshold);
.................... 
....................    // Print
....................    fprintf(PC, "MEAS IV Command Parameters:\r\n");
08D38:  MOVLW  7E
08D3A:  MOVWF  FF6
08D3C:  MOVLW  17
08D3E:  MOVWF  FF7
08D40:  MOVLW  00
08D42:  MOVWF  FF8
08D44:  CALL   1FF0
....................    fprintf(PC, "\tID: %02X\r\n", cmd_ptr->id);
08D48:  MOVLB  2
08D4A:  MOVF   x1D,W
08D4C:  MOVWF  FE9
08D4E:  MOVF   x1E,W
08D50:  MOVWF  FEA
08D52:  MOVFF  FEF,225
08D56:  MOVLW  9C
08D58:  MOVWF  FF6
08D5A:  MOVLW  17
08D5C:  MOVWF  FF7
08D5E:  MOVLW  00
08D60:  MOVWF  FF8
08D62:  MOVLW  05
08D64:  MOVLB  A
08D66:  MOVWF  x0C
08D68:  MOVLB  0
08D6A:  CALL   2026
08D6E:  MOVFF  225,A26
08D72:  MOVLW  37
08D74:  MOVLB  A
08D76:  MOVWF  x27
08D78:  MOVLB  0
08D7A:  CALL   2232
08D7E:  MOVLW  0D
08D80:  BTFSS  FA6.6
08D82:  GOTO   8D80
08D86:  MOVLB  E
08D88:  MOVWF  xF9
08D8A:  MOVLW  0A
08D8C:  MOVLB  0
08D8E:  BTFSS  FA6.6
08D90:  GOTO   8D8E
08D94:  MOVLB  E
08D96:  MOVWF  xF9
....................    fprintf(PC, "\tSweepInterval   :%lu[ms]\r\n", cmd_ptr->interval);
08D98:  MOVLW  01
08D9A:  MOVLB  2
08D9C:  ADDWF  x1D,W
08D9E:  MOVWF  FE9
08DA0:  MOVLW  00
08DA2:  ADDWFC x1E,W
08DA4:  MOVWF  FEA
08DA6:  MOVFF  FEC,226
08DAA:  MOVF   FED,F
08DAC:  MOVFF  FEF,225
08DB0:  MOVLW  A8
08DB2:  MOVWF  FF6
08DB4:  MOVLW  17
08DB6:  MOVWF  FF7
08DB8:  MOVLW  00
08DBA:  MOVWF  FF8
08DBC:  MOVLW  12
08DBE:  MOVLB  A
08DC0:  MOVWF  x0C
08DC2:  MOVLB  0
08DC4:  CALL   2026
08DC8:  MOVLW  10
08DCA:  MOVWF  FE9
08DCC:  MOVFF  226,228
08DD0:  MOVFF  225,227
08DD4:  CALL   8B8E
08DD8:  MOVLW  BD
08DDA:  MOVWF  FF6
08DDC:  MOVLW  17
08DDE:  MOVWF  FF7
08DE0:  MOVLW  00
08DE2:  MOVWF  FF8
08DE4:  MOVLW  06
08DE6:  MOVLB  A
08DE8:  MOVWF  x0C
08DEA:  MOVLB  0
08DEC:  CALL   2026
....................    fprintf(PC, "\tPD Threshold    :%lu[W/m2]\r\n", pd_value);
08DF0:  MOVLW  C4
08DF2:  MOVWF  FF6
08DF4:  MOVLW  17
08DF6:  MOVWF  FF7
08DF8:  MOVLW  00
08DFA:  MOVWF  FF8
08DFC:  MOVLW  12
08DFE:  MOVLB  A
08E00:  MOVWF  x0C
08E02:  MOVLB  0
08E04:  CALL   2026
08E08:  MOVLW  10
08E0A:  MOVWF  FE9
08E0C:  MOVFF  220,228
08E10:  MOVFF  21F,227
08E14:  CALL   8B8E
08E18:  MOVLW  D9
08E1A:  MOVWF  FF6
08E1C:  MOVLW  17
08E1E:  MOVWF  FF7
08E20:  MOVLW  00
08E22:  MOVWF  FF8
08E24:  MOVLW  08
08E26:  MOVLB  A
08E28:  MOVWF  x0C
08E2A:  MOVLB  0
08E2C:  CALL   2026
....................    fprintf(PC, "\tSweepLimit      :%lu[mA]\r\n", sweep_limit);
08E30:  MOVLW  E2
08E32:  MOVWF  FF6
08E34:  MOVLW  17
08E36:  MOVWF  FF7
08E38:  MOVLW  00
08E3A:  MOVWF  FF8
08E3C:  MOVLW  12
08E3E:  MOVLB  A
08E40:  MOVWF  x0C
08E42:  MOVLB  0
08E44:  CALL   2026
08E48:  MOVLW  10
08E4A:  MOVWF  FE9
08E4C:  MOVFF  222,228
08E50:  MOVFF  221,227
08E54:  CALL   8B8E
08E58:  MOVLW  F7
08E5A:  MOVWF  FF6
08E5C:  MOVLW  17
08E5E:  MOVWF  FF7
08E60:  MOVLW  00
08E62:  MOVWF  FF8
08E64:  MOVLW  06
08E66:  MOVLB  A
08E68:  MOVWF  x0C
08E6A:  MOVLB  0
08E6C:  CALL   2026
....................    fprintf(PC, "\tLogThreshold    :%lu[mA]\r\n", log_threshold);
08E70:  MOVLW  FE
08E72:  MOVWF  FF6
08E74:  MOVLW  17
08E76:  MOVWF  FF7
08E78:  MOVLW  00
08E7A:  MOVWF  FF8
08E7C:  MOVLW  12
08E7E:  MOVLB  A
08E80:  MOVWF  x0C
08E82:  MOVLB  0
08E84:  CALL   2026
08E88:  MOVLW  10
08E8A:  MOVWF  FE9
08E8C:  MOVFF  224,228
08E90:  MOVFF  223,227
08E94:  CALL   8B8E
08E98:  MOVLW  13
08E9A:  MOVWF  FF6
08E9C:  MOVLW  18
08E9E:  MOVWF  FF7
08EA0:  MOVLW  00
08EA2:  MOVWF  FF8
08EA4:  MOVLW  06
08EA6:  MOVLB  A
08EA8:  MOVWF  x0C
08EAA:  MOVLB  0
08EAC:  CALL   2026
....................    fprintf(PC, "\tMeasurementTime :%lu[s]\r\n\r\n", cmd_ptr->meas_time);
08EB0:  MOVLW  05
08EB2:  MOVLB  2
08EB4:  ADDWF  x1D,W
08EB6:  MOVWF  FE9
08EB8:  MOVLW  00
08EBA:  ADDWFC x1E,W
08EBC:  MOVWF  FEA
08EBE:  MOVFF  FEC,226
08EC2:  MOVF   FED,F
08EC4:  MOVFF  FEF,225
08EC8:  MOVLW  1A
08ECA:  MOVWF  FF6
08ECC:  MOVLW  18
08ECE:  MOVWF  FF7
08ED0:  MOVLW  00
08ED2:  MOVWF  FF8
08ED4:  MOVLW  12
08ED6:  MOVLB  A
08ED8:  MOVWF  x0C
08EDA:  MOVLB  0
08EDC:  CALL   2026
08EE0:  MOVLW  10
08EE2:  MOVWF  FE9
08EE4:  MOVFF  226,228
08EE8:  MOVFF  225,227
08EEC:  CALL   8B8E
08EF0:  MOVLW  2F
08EF2:  MOVWF  FF6
08EF4:  MOVLW  18
08EF6:  MOVWF  FF7
08EF8:  MOVLW  00
08EFA:  MOVWF  FF8
08EFC:  MOVLW  07
08EFE:  MOVLB  A
08F00:  MOVWF  x0C
08F02:  MOVLB  0
08F04:  CALL   2026
08F08:  GOTO   A7CE (RETURN)
.................... }
.................... 
.................... void mode_meas_pd(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start MODE MEAS PD\r\n");
*
0DE82:  MOVLW  38
0DE84:  MOVWF  FF6
0DE86:  MOVLW  18
0DE88:  MOVWF  FF7
0DE8A:  MOVLW  00
0DE8C:  MOVWF  FF8
0DE8E:  CALL   1FF0
.................... 
....................    // uplinkcmd_ptr から interval と測定時間を取り出す
....................    unsigned int16 interval_ms = ((unsigned int16)uplinkcmd_ptr[1] << 8) | uplinkcmd_ptr[2]; // ms
....................    unsigned int16 meas_time_s = (unsigned int16)uplinkcmd_ptr[6] * 60; // 秒
.................... 
....................    unsigned int32 start_time_ms   = get_current_msec();
....................    unsigned int32 current_time_ms = 0;
....................    unsigned int32 meas_time_ms    = (unsigned int32)meas_time_s * 1000; // ms に変換
0DE92:  MOVLW  01
0DE94:  MOVLB  1
0DE96:  ADDWF  xED,W
0DE98:  MOVWF  FE9
0DE9A:  MOVLW  00
0DE9C:  ADDWFC xEE,W
0DE9E:  MOVWF  FEA
0DEA0:  MOVF   FEF,W
0DEA2:  MOVLB  2
0DEA4:  CLRF   x02
0DEA6:  MOVWF  x01
0DEA8:  MOVFF  201,202
0DEAC:  CLRF   x01
0DEAE:  MOVLW  02
0DEB0:  MOVLB  1
0DEB2:  ADDWF  xED,W
0DEB4:  MOVWF  FE9
0DEB6:  MOVLW  00
0DEB8:  ADDWFC xEE,W
0DEBA:  MOVWF  FEA
0DEBC:  MOVF   FEF,W
0DEBE:  MOVLB  2
0DEC0:  IORWF  x01,W
0DEC2:  MOVLB  1
0DEC4:  MOVWF  xEF
0DEC6:  MOVLB  2
0DEC8:  MOVF   x02,W
0DECA:  MOVLB  1
0DECC:  MOVWF  xF0
0DECE:  MOVLW  06
0DED0:  ADDWF  xED,W
0DED2:  MOVWF  FE9
0DED4:  MOVLW  00
0DED6:  ADDWFC xEE,W
0DED8:  MOVWF  FEA
0DEDA:  MOVF   FEF,W
0DEDC:  MOVLB  2
0DEDE:  CLRF   x02
0DEE0:  MOVWF  x01
0DEE2:  MOVFF  202,A9C
0DEE6:  MOVFF  201,A9B
0DEEA:  MOVLB  A
0DEEC:  CLRF   x9E
0DEEE:  MOVLW  3C
0DEF0:  MOVWF  x9D
0DEF2:  MOVLB  0
0DEF4:  CALL   7FF4
0DEF8:  MOVFF  02,1F2
0DEFC:  MOVFF  01,1F1
0DF00:  CALL   982E
0DF04:  MOVLB  1
0DF06:  CLRF   xF6
0DF08:  CLRF   xF5
0DF0A:  MOVFF  02,1F4
0DF0E:  MOVFF  01,1F3
0DF12:  CLRF   xFA
0DF14:  CLRF   xF9
0DF16:  CLRF   xF8
0DF18:  CLRF   xF7
0DF1A:  MOVLB  2
0DF1C:  CLRF   x04
0DF1E:  CLRF   x03
0DF20:  MOVFF  1F2,202
0DF24:  MOVFF  1F1,201
0DF28:  MOVFF  FEA,206
0DF2C:  MOVFF  FE9,205
0DF30:  MOVFF  204,20A
0DF34:  MOVFF  203,209
0DF38:  MOVFF  202,208
0DF3C:  MOVFF  201,207
0DF40:  CLRF   x0E
0DF42:  CLRF   x0D
0DF44:  MOVLW  03
0DF46:  MOVWF  x0C
0DF48:  MOVLW  E8
0DF4A:  MOVWF  x0B
0DF4C:  MOVLB  0
0DF4E:  GOTO   DE0E
0DF52:  MOVFF  206,FEA
0DF56:  MOVFF  205,FE9
0DF5A:  MOVFF  03,1FE
0DF5E:  MOVFF  02,1FD
0DF62:  MOVFF  01,1FC
0DF66:  MOVFF  00,1FB
.................... 
....................    while (current_time_ms - start_time_ms < meas_time_ms) {
0DF6A:  MOVLB  1
0DF6C:  MOVF   xF3,W
0DF6E:  SUBWF  xF7,W
0DF70:  MOVLB  2
0DF72:  MOVWF  x01
0DF74:  MOVLB  1
0DF76:  MOVF   xF4,W
0DF78:  SUBWFB xF8,W
0DF7A:  MOVLB  2
0DF7C:  MOVWF  x02
0DF7E:  MOVLB  1
0DF80:  MOVF   xF5,W
0DF82:  SUBWFB xF9,W
0DF84:  MOVLB  2
0DF86:  MOVWF  x03
0DF88:  MOVLB  1
0DF8A:  MOVF   xF6,W
0DF8C:  SUBWFB xFA,W
0DF8E:  MOVLB  2
0DF90:  MOVWF  x04
0DF92:  MOVF   x04,W
0DF94:  MOVLB  1
0DF96:  SUBWF  xFE,W
0DF98:  BTFSC  FD8.0
0DF9A:  BRA    DFA2
0DF9C:  MOVLB  0
0DF9E:  GOTO   E09E
0DFA2:  MOVLB  0
0DFA4:  BTFSS  FD8.2
0DFA6:  GOTO   DFF2
0DFAA:  MOVLB  2
0DFAC:  MOVF   x03,W
0DFAE:  MOVLB  1
0DFB0:  SUBWF  xFD,W
0DFB2:  BTFSC  FD8.0
0DFB4:  BRA    DFBC
0DFB6:  MOVLB  0
0DFB8:  GOTO   E09E
0DFBC:  MOVLB  0
0DFBE:  BTFSS  FD8.2
0DFC0:  GOTO   DFF2
0DFC4:  MOVLB  2
0DFC6:  MOVF   x02,W
0DFC8:  MOVLB  1
0DFCA:  SUBWF  xFC,W
0DFCC:  BTFSC  FD8.0
0DFCE:  BRA    DFD6
0DFD0:  MOVLB  0
0DFD2:  GOTO   E09E
0DFD6:  MOVLB  0
0DFD8:  BTFSS  FD8.2
0DFDA:  GOTO   DFF2
0DFDE:  MOVLB  1
0DFE0:  MOVF   xFB,W
0DFE2:  MOVLB  2
0DFE4:  SUBWF  x01,W
0DFE6:  BTFSS  FD8.0
0DFE8:  BRA    DFF0
0DFEA:  MOVLB  0
0DFEC:  GOTO   E09E
0DFF0:  MOVLB  0
.................... 
....................       current_time_ms = get_current_msec();
0DFF2:  CALL   982E
0DFF6:  MOVLB  1
0DFF8:  CLRF   xFA
0DFFA:  CLRF   xF9
0DFFC:  MOVFF  02,1F8
0E000:  MOVFF  01,1F7
.................... 
....................       // interval ごとに実行
....................       static unsigned int32 last_meas_time = 0;
....................       if (current_time_ms - last_meas_time >= interval_ms) {
0E004:  MOVF   xC6,W
0E006:  SUBWF  xF7,W
0E008:  MOVLB  2
0E00A:  MOVWF  x01
0E00C:  MOVLB  1
0E00E:  MOVF   xC7,W
0E010:  SUBWFB xF8,W
0E012:  MOVLB  2
0E014:  MOVWF  x02
0E016:  MOVLB  1
0E018:  MOVF   xC8,W
0E01A:  SUBWFB xF9,W
0E01C:  MOVLB  2
0E01E:  MOVWF  x03
0E020:  MOVLB  1
0E022:  MOVF   xC9,W
0E024:  SUBWFB xFA,W
0E026:  MOVLB  2
0E028:  MOVWF  x04
0E02A:  MOVF   x04,F
0E02C:  BTFSC  FD8.2
0E02E:  BRA    E036
0E030:  MOVLB  0
0E032:  GOTO   E076
0E036:  MOVLB  0
0E038:  MOVLB  2
0E03A:  MOVF   x03,F
0E03C:  BTFSC  FD8.2
0E03E:  BRA    E046
0E040:  MOVLB  0
0E042:  GOTO   E076
0E046:  MOVLB  0
0E048:  MOVLB  1
0E04A:  MOVF   xF0,W
0E04C:  MOVLB  2
0E04E:  SUBWF  x02,W
0E050:  BTFSC  FD8.0
0E052:  BRA    E05A
0E054:  MOVLB  0
0E056:  GOTO   E09A
0E05A:  MOVLB  0
0E05C:  BTFSS  FD8.2
0E05E:  GOTO   E076
0E062:  MOVLB  1
0E064:  MOVF   xEF,W
0E066:  MOVLB  2
0E068:  SUBWF  x01,W
0E06A:  BTFSC  FD8.0
0E06C:  BRA    E074
0E06E:  MOVLB  0
0E070:  GOTO   E09A
0E074:  MOVLB  0
....................          last_meas_time = current_time_ms;
0E076:  MOVFF  1FA,1C9
0E07A:  MOVFF  1F9,1C8
0E07E:  MOVFF  1F8,1C7
0E082:  MOVFF  1F7,1C6
.................... 
....................          // PD センサー読み取り
....................          unsigned int16 pd = ad7490_read(ADC_PD);
0E086:  MOVLW  0F
0E088:  MOVLB  A
0E08A:  MOVWF  x2C
0E08C:  MOVLB  0
0E08E:  CALL   21B2
0E092:  MOVFF  02,200
0E096:  MOVFF  01,1FF
.................... 
....................          // デバッグ出力
....................          // fprintf(PC, "Time:%lu ms, PD:%u\r\n", current_time_ms - start_time_ms, pd);
....................       }
0E09A:  GOTO   DF6A
....................    }
.................... 
....................    fprintf(PC, "End MODE MEAS PD\r\n");
0E09E:  MOVLW  4E
0E0A0:  MOVWF  FF6
0E0A2:  MOVLW  18
0E0A4:  MOVWF  FF7
0E0A6:  MOVLW  00
0E0A8:  MOVWF  FF8
0E0AA:  CALL   1FF0
0E0AE:  GOTO   E45C (RETURN)
.................... }
.................... 
.................... #include "application/sato_mode_flash.c"
.................... #include "sato_mode_flash.h"                      // 同じフォルダのヘッダー
.................... #ifndef MMJ_CIGS_MODE_FLASH_H
.................... #define MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //#define PARAMETER_LENGTH 9
.................... 
.................... // ___________MISF FUNCTIONS____________
.................... // Command ID 
.................... #define ID_MISF_ERASE_ALL 0x80
.................... #define ID_MISF_ERASE_1SECTOR 0x81
.................... #define ID_MISF_ERASE_4kByte_SUBSECTOR 0x82
.................... #define ID_MISF_ERASE_64kByte_SUBSECTOR 0x83
.................... #define ID_MISF_WRITE_DEMO 0x84
.................... #define ID_MISF_WRITE_4kByte_SUBSECTOR 0x85
.................... #define ID_MISF_READ 0x86
.................... #define ID_MISF_READ_ADDRESS 0x87
.................... #define ID_MISF_ERASE_AND_RESET 0x88
.................... #define ID_MISF_ADDRESS_RESET 0x8F
.................... 
.................... // Mode
.................... void mode_misf_erase_all(unsigned int8 parameter[]);
.................... void mode_misf_erase_1sector(unsigned int8 parameter[]);
.................... void mode_misf_erase_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_write_demo(unsigned int8 parameter[]);
.................... typedef struct {
....................     unsigned int8 id;
....................     unsigned int32 writeaddress;
....................     unsigned int16 packetnum;
.................... } FLASH_WRITE_PARAM;
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[]);
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr);
.................... typedef struct{
....................     unsigned int8 id;
....................     unsigned int16 readpacketnum;
....................     unsigned int32 readaddress;
.................... }FLASH_PARAM;
.................... void mode_misf_read_address(unsigned int8 parameter[]);
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[]);
.................... void mode_misf_address_reset(unsigned int8 parameter[]);
.................... 
.................... 
.................... 
.................... // ___________SMF FUNCTIONS____________
.................... // Command
.................... #define ID_SMF_COPY 0x90
.................... #define ID_SMF_READ 0x91
.................... #define ID_SMF_ERASE 0x92
.................... #define ID_SMF_COPY_FORCE 0x93
.................... #define ID_SMF_READ_FORCE 0x94
.................... #define ID_SMF_ERASE_FORCE 0x95
.................... #define ID_SMF_RESET 0x96
.................... 
.................... // Mode
.................... void mode_smf_copy(unsigned int8 parameter[]);
.................... void mode_smf_read(unsigned int8 parameter[]);
.................... void mode_smf_erase(unsigned int8 parameter[]);
.................... void mode_smf_copy_force(unsigned int8 parameter[]);
.................... void mode_smf_read_force(unsigned int8 parameter[]);
.................... void mode_smf_erase_force(unsigned int8 parameter[]);
.................... void mode_smf_address_reset(unsigned int8 parameter[]);
.................... 
.................... #endif // MMJ_CIGS_MODE_FLASH_H
.................... 
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/sato_iv.h"          // 測定機能
.................... #ifndef mmj_cigs_iv_H
.................... #define mmj_cigs_iv_H
.................... 
.................... /*
.................... // _________ values _________
.................... #define MISSION_DATA_SIZE 64
.................... volatile unsigned int8 mission_datas[MISSION_DATA_SIZE] = {0x00};
.................... volatile int8 executed_mission_count = 0;
.................... */
.................... 
.................... #define START_MAKER 0xFF
.................... #define RESERVED_VALUE 0x00
.................... 
.................... #define HEADER_SIZE 5  // START_MAKER + time (4バイト)
.................... #define ENV_SIZE    6  // pd + temp_py_top + temp_py_bot + temp_mis7 packed
.................... #define DATA_SIZE_PER_STEP 3 // data0 + data1 12bitずつ
.................... 
.................... 
.................... void make_meas_header(unsigned int8 *packetdata, unsigned int8 *cmd);
.................... 
.................... 
.................... // void sweep(unsigned int8 parameter[]);
.................... void sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit, unsigned int16 pd_threshold);
.................... void test_sweep(unsigned int16 curr_threshold, unsigned int16 curr_limit);
.................... 
.................... typedef struct{
....................     unsigned int32 time;
....................     unsigned int16 pd;
....................     unsigned int16 temp_py_top;
....................     unsigned int16 temp_py_bot;
....................     unsigned int16 temp_mis7;
.................... } iv_env_t;
.................... 
.................... /*
.................... typedef struct{
....................     unsigned int8 port_num; // Port number (1 or 2)
....................     unsigned int16 sweep_step; // Number of steps in the sweep
....................     unsigned int16 data_buffer[2][0xFF]; // Data buffer for voltage and current readings
....................     int1 active; // Indicates if the port is active (1 for active, 0 for inactive)
.................... } sweep_config_t;
.................... */
.................... 
.................... 
.................... typedef union{
....................     struct{
....................         unsigned int8 start_marker;
....................         unsigned int8 reserved;
....................         unsigned int8 command;
....................         unsigned int8 port_num;
....................         unsigned int16 data[2];
....................     }fields;
.................... 
....................     unsigned int8 raw[PACKET_SIZE];
.................... }iv_packet_t;
.................... 
.................... typedef struct {
....................     unsigned int16 voltage;
....................     unsigned int16 current;
.................... } iv_data_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     unsigned int8 data_buffer[0x200];
....................     int1 active;
.................... } sweep_config_t;
.................... 
.................... typedef struct{
....................     unsigned int8 port_num; 
....................     unsigned int16 sweep_step;
....................     iv_data_t data_buffer[0xFF];
....................     int1 active;
.................... } sweep_debug_config_t;
.................... 
.................... typedef struct 
.................... {
....................     unsigned int8 data[3];
.................... } meas_data_t;
.................... 
.................... #define PACKET_IV_HEADER_SIZE 51
.................... #define IV_HEADER_SIZE 17
.................... #define PACKET_IV_DATA_SIZE  63
.................... #define IV_DATA_SIZE  21
.................... 
.................... typedef union{
....................     unsigned int8 raw[PACKET_SIZE];
....................     struct {
....................         unsigned int8 start_marker;
....................         unsigned int32 time_sec;
....................         unsigned int8 time_msec;
....................         meas_data_t env_data[2];
....................         unsigned int8 ivdata[PACKET_IV_HEADER_SIZE];
....................         unsigned int8 crc;
....................     }header;
....................     struct {
....................         unsigned int8 iv_data[PACKET_IV_DATA_SIZE];
....................         unsigned int8 crc;
....................     }data;
.................... } iv_data_packet_t;
.................... 
.................... 
.................... 
.................... iv_env_t create_meas_data();
.................... void log_meas_data(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... void log_meas_data_with_print(iv_env_t *environment_data_ptr, sweep_config_t *port_data);
.................... 
.................... void sweep_with_print();
.................... 
.................... unsigned int16 calc_pd_value(unsigned int16 data);
.................... // 
.................... unsigned int16 calc_curr_value(unsigned int16 data);
.................... #define SHUNT_RESISTANCE_OHM 0.05
.................... #define AMP_GAIN 200
.................... #define ADC_REF_VOLTAGE_MV 2500 
.................... #define ADC_MAX_READING 4095
.................... #define ADC_CURR_REF_VOLTAGE_MV 1250
.................... 
.................... 
.................... 
.................... 
.................... 
.................... 
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/smf_queue.h"                   // ツールライブラリ
.................... #ifndef SMF_QUEUE_H
.................... #define SMF_QUEUE_H
.................... 
.................... typedef enum {
....................    ENUM_SMF_WRITE,    // SMF書き込み操作
....................    ENUM_SMF_READ,     // SMF読み込み操作
....................    ENUM_SMF_ERASE     // SMF消去操作
.................... } FunctionType;
.................... 
.................... // SMF書き込みモード
.................... typedef enum {
....................    SMF_WRITE_OVERWRITE = 0x00,  // 上書きモード
....................    SMF_WRITE_APPEND = 0x01,     // 追記モード
....................    SMF_WRITE_CIRCULAR = 0x02    // 循環書き込みモード（endまで行ったらstartに戻る）
.................... } SmfWriteMode;
.................... 
.................... // データソースタイプ
.................... typedef enum {
....................    SOURCE_MISF_UNCOPIED = 0x00, // MISF未コピーデータを転送
....................    SOURCE_MISF_MANUAL = 0x01    // MISF指定アドレス・サイズを転送
.................... } DataSourceType;
.................... 
.................... 
.................... typedef enum{
....................    CIGS_DATA_TABLE = 0x00,
....................    CIGS_PICLOG_DATA,
....................    CIGS_ENVIRO_DATA,
....................    CIGS_IV1_HEADER,
....................    CIGS_IV1_DATA,
....................    CIGS_IV2_HEADER,
....................    CIGS_IV2_DATA
.................... } MissionID;
.................... 
.................... 
.................... 
.................... typedef struct {
....................    int32 start_address;
....................    int32 end_address;
.................... } SmfAddressStruct;
.................... 
.................... typedef struct{
....................    int32 misf_start_address;
....................    int32 misf_size;
.................... } SmfWriteStruct;
.................... 
.................... typedef struct {
....................     MissionID mission_id;                // ミッションID
....................     FunctionType func_type;         // 操作タイプ
....................     SmfWriteMode write_mode;        // 書き込みモード（書き込み時のみ）
....................     DataSourceType source_type;     // データソースタイプ
....................     int32 misf_start_addr;          // MISF手動指定時の開始アドレス
....................     int32 misf_size;                // MISF手動指定時のサイズ
.................... } FlashOperationStruct;
.................... 
.................... #define SMF_QUEUE_SIZE 16
.................... typedef struct {
....................    FlashOperationStruct entries[SMF_QUEUE_SIZE];  // キューエントリー配列
....................    int8 head_index;                               // 取り出し位置（読み取りインデックス）
....................    int8 tail_index;                               // 追加位置（書き込みインデックス）
.................... } FlashQueueStruct;
.................... 
.................... 
.................... 
.................... // _____________________ values _________________
.................... 
.................... volatile FlashQueueStruct flash_queue = {0};
.................... 
.................... // MISF/SMF統合管理インスタンス（ミッション別）
.................... //volatile MisfSmfManagerStruct misf_smf_manager[8] = {0}; // 最大8ミッション対応
.................... 
.................... 
.................... // ___________________ functions ________________
.................... 
.................... // MISF/SMF管理関数
.................... void init_misf_smf_manager(int8 mission_id, int32 misf_start, int32 misf_size, int32 smf_start, int32 smf_size);
.................... void update_misf_data(int8 mission_id, int32 data_size);
.................... void process_misf_to_smf_transfer(int8 mission_id);
.................... int32 get_uncopied_data_size(int8 mission_id);
.................... void mark_data_copied(int8 mission_id, int32 copied_size);
.................... int1 is_misf_full(int8 mission_id);
.................... //MisfSmfManagerStruct* get_misf_smf_manager(int8 mission_id);
.................... 
.................... void enqueue_flash_operation(FlashOperationStruct *data);
.................... 
.................... FlashOperationStruct *dequeue_flash_operation();
.................... 
.................... FlashOperationStruct *peek_flash_operation(void);
.................... 
.................... void remove_flash_operation(void);
.................... 
.................... int1 is_empty_flash_queue(void);
.................... 
.................... SmfAddressStruct get_smf_address_struct(MissionID mission_id);
.................... 
.................... // 便利な関数
.................... void enqueue_uncopied_data(int8 mission_id, SmfWriteMode write_mode);
.................... void enqueue_manual_data(int8 mission_id, int32 misf_addr, int32 size, SmfWriteMode write_mode);
.................... void enqueue_read_data(int32 smf_addr, int32 size);
.................... void enqueue_erase_data(int32 smf_addr, int32 size);
.................... 
.................... // 統合管理対応の便利な関数
.................... void enqueue_auto_transfer(int8 mission_id);  // 未コピーデータの自動転送
.................... void complete_transfer_and_update_counter(int8 mission_id, int32 transferred_size);  // 転送完了とカウンタ更新
.................... 
.................... SmfWriteStruct get_smf_write_struct(MissionID mission_id);
.................... #endif   //SMF_QUEUE_H
.................... 
.................... #include "../lib/device/mt25q.h"                     // デバイスライブラリ
.................... #ifndef MT25Q_H
.................... #define MT25Q_H
.................... 
.................... // =========
.................... //#define MT25Q_DEBUG
.................... // =========
.................... 
.................... 
.................... #define FLASH_STREAM0 MIS_FM_STREAM     // <- Align the names to `config.h` Stream name
.................... #define FLASH_STREAM1 SMF_STREAM
.................... #define FLASH_STREAM2 SMF_STREAM // dont use
.................... #define FLASH_STREAM3 SMF_STREAM // dont use
.................... 
.................... typedef enum spi_stream{
....................     SPI_0 = 0,
....................     SPI_1,
....................     SPI_2,
....................     SPI_3
.................... }SpiStreamId;
.................... 
.................... #define MT25QL128ABA 0x00     //Mission Flash
.................... #define MT25QL01GBBB 0x01     //SMF,CF
.................... typedef struct select_stream_to_flash{
....................     SpiStreamId spi_stream_id;
....................     unsigned int8 flash_model;
....................     int16 cs_pin;
.................... }Flash;
.................... 
.................... 
.................... Flash mis_fm = {SPI_0, MT25QL128ABA, MIS_FM_CS};
.................... Flash smf = {SPI_1, MT25QL01GBBB, SMF_CS};
.................... 
.................... 
.................... 
.................... // ===================== Function List =====================
.................... // Public Functions
.................... 
.................... int1 is_connect(Flash flash_stream);
.................... 
.................... void write_data_bytes(Flash flash_stream, unsigned int32 write_start_address, unsigned int8 *write_data, unsigned int16 write_amount);      
.................... 
.................... void read_data_bytes(Flash flash_stream, unsigned int32 read_start_address, unsigned int8 *read_data, unsigned int32 read_amount);  
.................... 
.................... void sector_erase(Flash flash_stream, unsigned int32 sector_address);
.................... 
.................... void subsector_32kByte_erase(Flash flash_stream, unsigned int32 subsector_address);  
....................                                
.................... void subsector_4kByte_erase(Flash flash_stream, unsigned int32 subsector_address);      
.................... 
.................... //Private Functions
....................  
.................... void flash_setting(Flash flash_stream);
....................  
.................... int8 status_register(Flash flash_stream);
....................  
.................... int8 read_id(Flash flash_stream);
.................... 
.................... unsigned int8 read_data_byte(Flash flash_stream, unsigned int32 read_address);
.................... 
.................... void write_data_byte(Flash flash_stream, unsigned int32 write_address, unsigned int8 write_data);
.................... 
.................... 
.................... 
.................... // ===================== Flash Commands =====================
.................... #define CMD_READ_ID                     0x9F
.................... #define CMD_READ_STATUS_REGISTER        0x05
.................... #define CMD_READ                        0x03//for MT25QL128ABA
.................... #define CMD_4BYTE_READ                  0x13//for MT25QL01GBBB
.................... #define CMD_WRITE_ENABLE                0x06
.................... #define CMD_PAGE_PROGRAM                0x02//for MT25QL128ABA
.................... #define CMD_4BYTE_PAGE_PROGRAM          0x12//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_4KB_ERASE         0x20//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_4KB_ERASE   0x21//for MT25QL01GBBB
.................... #define CMD_SUBSECTOR_32KB_ERASE        0x52//for MT25QL128ABA
.................... #define CMD_4BYTE_SUBSECTOR_32KB_ERASE  0x5C//for MT25QL01GBBB
.................... #define CMD_SECTOR_ERASE                0xD8//for MT25QL128ABA
.................... #define CMD_4BYTE_SECTOR_ERASE          0xDC//for MT25QL01GBBB
.................... 
.................... // ====================== Value List =====================
.................... #define MANUFACTURER_ID_MICRON 0x20 // Manufacturer ID for Micron flash
.................... #define READ_ID_DATASIZE 20 // 20 bytes for read ID data
.................... 
.................... 
.................... // ====================== Data Structures =====================
.................... typedef union
.................... {
....................     unsigned int8 bytes[READ_ID_DATASIZE]; // 20 bytes for read ID
....................     struct {
....................         unsigned int8 manufacturer_id; // 1 byte
....................         unsigned int8 memory_type;     // 1 byte
....................         unsigned int8 capacity;        // 1 byte
....................         unsigned int8 reserved;       // 1 byte
....................     } fields;
.................... }READ_ID_DATA;
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... #include "../domain/sato_flash.h"             // ストレージ機能
.................... #ifndef MMJ_CIGS_FLASH_H
.................... #define MMJ_CIGS_FLASH_H
.................... 
.................... //#include <string.h>
.................... //#include "../hal/cigs_config.h"
.................... 
.................... #ifndef PACKET_SIZE
....................     #define PACKET_SIZE 64
.................... #endif
.................... 
.................... 
.................... #define MISF_START 0x00000000
.................... #define MISF_END   0x00BC0FFF
.................... #define SECTOR_64K_BYTE  0x10000
.................... 
.................... #define MISF_CIGS_DATA_TABLE_SIZE 64
.................... 
.................... // Flash Address
.................... #define MISF_CIGS_DATA_TABLE_START 0x00000000
.................... #define MISF_CIGS_DATA_TABLE_END   0x00000FFF
.................... #define MISF_CIGS_DATA_TABLE_SIZE  4096
.................... 
.................... #define MISF_CIGS_PICLOG_START    0x00010000
.................... #define MISF_CIGS_PICLOG_END      0x00140FFF
.................... #define MISF_CIGS_PICLOG_SIZE     1310720
.................... 
.................... #define MISF_CIGS_ENVIRO_START    0x00141000
.................... #define MISF_CIGS_ENVIRO_END      0x00280FFF
.................... #define MISF_CIGS_ENVIRO_SIZE     1310720
.................... 
.................... #define MISF_CIGS_IV1_HEADER_START 0x00281000
.................... #define MISF_CIGS_IV1_HEADER_END   0x00320FFF
.................... #define MISF_CIGS_IV1_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV1_DATA_START   0x00321000
.................... #define MISF_CIGS_IV1_DATA_END     0x00720FFF
.................... #define MISF_CIGS_IV1_DATA_SIZE    4194304
.................... 
.................... #define MISF_CIGS_IV2_HEADER_START 0x00721000
.................... #define MISF_CIGS_IV2_HEADER_END   0x007C0FFF
.................... #define MISF_CIGS_IV2_HEADER_SIZE  655360
.................... 
.................... #define MISF_CIGS_IV2_DATA_START   0x007C1000
.................... #define MISF_CIGS_IV2_DATA_END     0x00BC0FFF
.................... #define MISF_CIGS_IV2_DATA_SIZE    4194304
.................... 
.................... // 重複していた #define はここに一度だけ残す
.................... // 例: #define SECTOR_4K_BYTE  0x1000  // 4KByte
.................... // 他ファイルに同じ行があれば削除
.................... 
.................... // Flash カウンタだけを保持する汎用構造
.................... typedef struct {
....................     unsigned int32 used_counter;
....................     unsigned int32 uncopied_counter;
....................     unsigned int8  reserve_counter1;
....................     unsigned int8  reserve_counter2;
.................... } FlashCounter_t;
.................... 
.................... // データ種別ID
.................... typedef enum {
....................     FLASH_ID_DATA_TABLE = 0 ,
....................     FLASH_ID_PICLOG ,
....................     FLASH_ID_ENVIRONMENT,
....................     FLASH_ID_IV1_HEADER,
....................     FLASH_ID_IV1_DATA,
....................     FLASH_ID_IV2_HEADER,
....................     FLASH_ID_IV2_DATA,
....................     FLASH_ID_COUNT = 7
.................... } FlashDataId_t;
.................... 
.................... // Flash_t : 実体側で使用する拡張(必要なら id を保持)
.................... typedef struct {
....................     FlashDataId_t   id;
....................     unsigned int32  used_counter;
....................     unsigned int32  uncopied_counter;
....................     unsigned int8   reserve_counter1;
....................     unsigned int8   reserve_counter2;
.................... } Flash_t;
.................... 
.................... // FlashData_t （既存定義が別ヘッダなら重複しないよう確認）
.................... // ここでは payload 内の logdata.* が FlashCounter_t と仮定
.................... typedef union {
....................     struct {
....................         union {
....................             struct {
....................                 FlashCounter_t piclog;
....................                 FlashCounter_t environment;
....................                 FlashCounter_t iv1_header;
....................                 FlashCounter_t iv1_data;
....................                 FlashCounter_t iv2_header;
....................                 FlashCounter_t iv2_data;
....................             } logdata;  // 合計サイズは63バイト
....................             unsigned int8 reserve[63];
....................         } payload;
....................         unsigned int8 crc;  // 1バイトCRC
....................     } packet;
....................     unsigned int8 bytes[64];
.................... } FlashData_t;
.................... 
.................... 
.................... // 取得系
.................... FlashData_t make_flash_data_table(void);
.................... void misf_update_address_area(void);
.................... void print_flash_status(void);
.................... 
.................... 
.................... // キュー投入
.................... void add_smf_queue(MissionID mission_id, FunctionType func_type, SmfWriteMode write_mode);
.................... void misf_init();
.................... 
.................... typedef struct {
....................     unsigned int32 start;
....................     unsigned int32 end;
....................     unsigned int32 size;
.................... } ADDRESS_AREA_T;
.................... 
.................... 
.................... extern const ADDRESS_AREA_T MISF_ADDRESS_TABLE[];
.................... extern FlashCounter_t misf_counter_table[];
.................... extern FlashCounter_t *misf_counter_table_ptr[];
.................... 
.................... void print_MISF_ADDRESS_TABLE(void);
.................... 
.................... void misf_write_data(FlashDataId_t id, unsigned int8 *data_ptr, unsigned int16 size);
.................... #endif
.................... //------------------End of File------------------
.................... 
.................... #include "../domain/sato_piclog.h"            // ログ機能
.................... #ifndef     MMJ_CIGS_PICLOG_H
.................... #define     MMJ_CIGS_PICLOG_H
.................... 
.................... // PICLOG Param
.................... #define PICLOG_STARTUP 0x00
.................... #define PICLOG_PARAM_START 0x00
.................... #define PICLOG_PARAM_END   0xFF
.................... 
.................... 
.................... #define PICLOG_PACKET_SIZE 6
.................... 
.................... // PICLOG Union
.................... typedef union {
....................     struct {
....................         unsigned int32 time;
....................         unsigned int8  function;
....................         unsigned int8  parameter;
....................     } fields;
....................     unsigned int8 bytes[PICLOG_PACKET_SIZE];
.................... } piclog_t;
.................... 
.................... #define PICLOG_BLANK_SIZE 4
.................... unsigned int8 PICLOG_BLANK_DATA[PICLOG_BLANK_SIZE];
.................... 
.................... // PICLOG 関数（実装は .c）
.................... void piclog_make(unsigned int8 function, unsigned int8 parameter);
.................... 
.................... #endif // MMJ_CIGS_PICLOG_H
.................... //------------------End of File------------------
.................... 
.................... #include "../lib/tool/calc_tools.h"
.................... #ifndef CALC_TOOLS_H
.................... #define CALC_TOOLS_H
....................  
.................... unsigned int8 calc_crc8(unsigned int8 *frame, unsigned int8 payload_size);
.................... int1 is_crc_valid(unsigned int8 *frame, int8 payload_size);
.................... void int32_to_be_array(int32 value, int8 *buf, int8 index);
.................... int32 lsb_array_to_int32(int8 *buf, int8 index);
.................... unsigned int32 lsb_to_msb(unsigned int32 value);
.................... unsigned int32 msb_to_lsb(unsigned int32 value);
.................... 
.................... 
.................... #endif // CALC_TOOLS_H  
.................... 
.................... 
.................... // ========================== MISF Command ============================
.................... void mode_misf_erase_all(int8 parameter[])
.................... {
....................    printf("Start Flash Erase All\r\n");
*
059FA:  MOVLW  62
059FC:  MOVWF  FF6
059FE:  MOVLW  18
05A00:  MOVWF  FF7
05A02:  MOVLW  00
05A04:  MOVWF  FF8
05A06:  CALL   1FF0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
05A0A:  MOVLB  1
05A0C:  MOVF   xEF,W
05A0E:  MOVWF  FE9
05A10:  MOVF   xF0,W
05A12:  MOVWF  FEA
05A14:  MOVFF  FEF,1F1
....................    piclog_make(cmd, 0x00); // Log the command execution
05A18:  MOVFF  1F1,244
05A1C:  MOVLB  2
05A1E:  CLRF   x45
05A20:  MOVLB  0
05A22:  CALL   4E76
....................    
....................    for (int32 address = MISF_START; address < MISF_END; address += SECTOR_64K_BYTE) {
05A26:  MOVLB  1
05A28:  CLRF   xF5
05A2A:  CLRF   xF4
05A2C:  CLRF   xF3
05A2E:  CLRF   xF2
05A30:  MOVLB  0
05A32:  MOVLB  1
05A34:  MOVF   xF5,F
05A36:  BTFSC  FD8.2
05A38:  BRA    5A40
05A3A:  MOVLB  0
05A3C:  GOTO   5AB8
05A40:  MOVLB  0
05A42:  MOVLB  1
05A44:  MOVF   xF4,W
05A46:  SUBLW  BC
05A48:  BTFSC  FD8.0
05A4A:  BRA    5A52
05A4C:  MOVLB  0
05A4E:  GOTO   5AB8
05A52:  MOVLB  0
05A54:  BTFSS  FD8.2
05A56:  GOTO   5A84
05A5A:  MOVLB  1
05A5C:  MOVF   xF3,W
05A5E:  SUBLW  0F
05A60:  BTFSC  FD8.0
05A62:  BRA    5A6A
05A64:  MOVLB  0
05A66:  GOTO   5AB8
05A6A:  MOVLB  0
05A6C:  BTFSS  FD8.2
05A6E:  GOTO   5A84
05A72:  MOVLB  1
05A74:  MOVF   xF2,W
05A76:  SUBLW  FE
05A78:  BTFSC  FD8.0
05A7A:  BRA    5A82
05A7C:  MOVLB  0
05A7E:  GOTO   5AB8
05A82:  MOVLB  0
....................       sector_erase(mis_fm, address); // Erase each sector
05A84:  MOVFF  115,236
05A88:  MOVFF  114,235
05A8C:  MOVFF  113,234
05A90:  MOVFF  112,233
05A94:  MOVFF  1F5,23A
05A98:  MOVFF  1F4,239
05A9C:  MOVFF  1F3,238
05AA0:  MOVFF  1F2,237
05AA4:  CALL   569E
05AA8:  MOVLW  01
05AAA:  MOVLB  1
05AAC:  ADDWF  xF4,F
05AAE:  MOVLW  00
05AB0:  ADDWFC xF5,F
05AB2:  MOVLB  0
05AB4:  GOTO   5A32
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05AB8:  MOVFF  1F1,244
05ABC:  MOVLB  2
05ABE:  SETF   x45
05AC0:  MOVLB  0
05AC2:  CALL   4E76
....................    printf("End Flash Erase All\r\n");
05AC6:  MOVLW  7A
05AC8:  MOVWF  FF6
05ACA:  MOVLW  18
05ACC:  MOVWF  FF7
05ACE:  MOVLW  00
05AD0:  MOVWF  FF8
05AD2:  CALL   1FF0
05AD6:  RETURN 0
.................... }
.................... 
.................... void mode_misf_erase_1sector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 1 Sector\r\n");
05AD8:  MOVLW  90
05ADA:  MOVWF  FF6
05ADC:  MOVLW  18
05ADE:  MOVWF  FF7
05AE0:  MOVLW  00
05AE2:  MOVWF  FF8
05AE4:  CALL   1FF0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    int32 sector_address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05AE8:  MOVLB  1
05AEA:  MOVF   xED,W
05AEC:  MOVWF  FE9
05AEE:  MOVF   xEE,W
05AF0:  MOVWF  FEA
05AF2:  MOVFF  FEF,1EF
05AF6:  MOVLW  01
05AF8:  ADDWF  xED,W
05AFA:  MOVWF  FE9
05AFC:  MOVLW  00
05AFE:  ADDWFC xEE,W
05B00:  MOVWF  FEA
05B02:  MOVF   FEF,W
05B04:  CLRF   xF7
05B06:  CLRF   xF6
05B08:  CLRF   xF5
05B0A:  MOVWF  xF4
05B0C:  MOVFF  1F4,1F7
05B10:  CLRF   xF4
05B12:  CLRF   xF5
05B14:  CLRF   xF6
05B16:  MOVLW  02
05B18:  ADDWF  xED,W
05B1A:  MOVWF  FE9
05B1C:  MOVLW  00
05B1E:  ADDWFC xEE,W
05B20:  MOVWF  FEA
05B22:  MOVF   FEF,W
05B24:  CLRF   xFC
05B26:  CLRF   xFB
05B28:  CLRF   xFA
05B2A:  MOVWF  xF9
05B2C:  MOVFF  1FA,03
05B30:  MOVFF  1F9,02
05B34:  CLRF   00
05B36:  CLRF   01
05B38:  MOVF   00,W
05B3A:  IORWF  xF4,F
05B3C:  MOVF   01,W
05B3E:  IORWF  xF5,F
05B40:  MOVF   02,W
05B42:  IORWF  xF6,F
05B44:  MOVF   03,W
05B46:  IORWF  xF7,F
05B48:  MOVLW  03
05B4A:  ADDWF  xED,W
05B4C:  MOVWF  FE9
05B4E:  MOVLW  00
05B50:  ADDWFC xEE,W
05B52:  MOVWF  FEA
05B54:  MOVF   FEF,W
05B56:  CLRF   xFC
05B58:  CLRF   xFB
05B5A:  CLRF   xFA
05B5C:  MOVWF  xF9
05B5E:  MOVFF  1FB,03
05B62:  MOVFF  1FA,02
05B66:  MOVFF  1F9,01
05B6A:  CLRF   00
05B6C:  MOVF   00,W
05B6E:  IORWF  xF4,F
05B70:  MOVF   01,W
05B72:  IORWF  xF5,F
05B74:  MOVF   02,W
05B76:  IORWF  xF6,F
05B78:  MOVF   03,W
05B7A:  IORWF  xF7,F
05B7C:  MOVLW  04
05B7E:  ADDWF  xED,W
05B80:  MOVWF  FE9
05B82:  MOVLW  00
05B84:  ADDWFC xEE,W
05B86:  MOVWF  FEA
05B88:  MOVF   FEF,W
05B8A:  MOVWF  00
05B8C:  CLRF   01
05B8E:  CLRF   02
05B90:  CLRF   03
05B92:  MOVF   00,W
05B94:  IORWF  xF4,W
05B96:  MOVWF  xF0
05B98:  MOVF   01,W
05B9A:  IORWF  xF5,W
05B9C:  MOVWF  xF1
05B9E:  MOVF   02,W
05BA0:  IORWF  xF6,W
05BA2:  MOVWF  xF2
05BA4:  MOVF   03,W
05BA6:  IORWF  xF7,W
05BA8:  MOVWF  xF3
.................... 
....................    printf("\tSector Address: 0x%08LX\r\n", sector_address);
05BAA:  MOVLW  AE
05BAC:  MOVWF  FF6
05BAE:  MOVLW  18
05BB0:  MOVWF  FF7
05BB2:  MOVLW  00
05BB4:  MOVWF  FF8
05BB6:  MOVLW  13
05BB8:  MOVLB  A
05BBA:  MOVWF  x0C
05BBC:  MOVLB  0
05BBE:  CALL   2026
05BC2:  MOVFF  1F3,A26
05BC6:  MOVLW  37
05BC8:  MOVLB  A
05BCA:  MOVWF  x27
05BCC:  MOVLB  0
05BCE:  CALL   2232
05BD2:  MOVFF  1F2,A26
05BD6:  MOVLW  37
05BD8:  MOVLB  A
05BDA:  MOVWF  x27
05BDC:  MOVLB  0
05BDE:  CALL   2232
05BE2:  MOVFF  1F1,A26
05BE6:  MOVLW  37
05BE8:  MOVLB  A
05BEA:  MOVWF  x27
05BEC:  MOVLB  0
05BEE:  CALL   2232
05BF2:  MOVFF  1F0,A26
05BF6:  MOVLW  37
05BF8:  MOVLB  A
05BFA:  MOVWF  x27
05BFC:  MOVLB  0
05BFE:  CALL   2232
05C02:  MOVLW  0D
05C04:  BTFSS  FA6.6
05C06:  GOTO   5C04
05C0A:  MOVLB  E
05C0C:  MOVWF  xF9
05C0E:  MOVLW  0A
05C10:  MOVLB  0
05C12:  BTFSS  FA6.6
05C14:  GOTO   5C12
05C18:  MOVLB  E
05C1A:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05C1C:  MOVFF  1EF,244
05C20:  MOVLB  2
05C22:  CLRF   x45
05C24:  MOVLB  0
05C26:  CALL   4E76
....................    
....................    sector_erase(mis_fm, sector_address);
05C2A:  MOVFF  115,236
05C2E:  MOVFF  114,235
05C32:  MOVFF  113,234
05C36:  MOVFF  112,233
05C3A:  MOVFF  1F3,23A
05C3E:  MOVFF  1F2,239
05C42:  MOVFF  1F1,238
05C46:  MOVFF  1F0,237
05C4A:  CALL   569E
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05C4E:  MOVFF  1EF,244
05C52:  MOVLB  2
05C54:  SETF   x45
05C56:  MOVLB  0
05C58:  CALL   4E76
....................    printf("End Flash Erase 1 Sector\r\n");
05C5C:  MOVLW  CA
05C5E:  MOVWF  FF6
05C60:  MOVLW  18
05C62:  MOVWF  FF7
05C64:  MOVLW  00
05C66:  MOVWF  FF8
05C68:  CALL   1FF0
05C6C:  GOTO   E338 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_4kbyte_subsector(int8 parameter[])
.................... {
....................    printf("Start Flash Erase 4kByte Subsector\r\n");
05C70:  MOVLW  E6
05C72:  MOVWF  FF6
05C74:  MOVLW  18
05C76:  MOVWF  FF7
05C78:  MOVLW  00
05C7A:  MOVWF  FF8
05C7C:  CALL   1FF0
....................    int8 cmd = parameter[0];
....................    int32 subsector_address =
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
05C80:  MOVLB  1
05C82:  MOVF   xED,W
05C84:  MOVWF  FE9
05C86:  MOVF   xEE,W
05C88:  MOVWF  FEA
05C8A:  MOVFF  FEF,1EF
05C8E:  MOVLW  01
05C90:  ADDWF  xED,W
05C92:  MOVWF  FE9
05C94:  MOVLW  00
05C96:  ADDWFC xEE,W
05C98:  MOVWF  FEA
05C9A:  MOVF   FEF,W
05C9C:  CLRF   xF7
05C9E:  CLRF   xF6
05CA0:  CLRF   xF5
05CA2:  MOVWF  xF4
05CA4:  MOVFF  1F4,1F7
05CA8:  CLRF   xF4
05CAA:  CLRF   xF5
05CAC:  CLRF   xF6
05CAE:  MOVLW  02
05CB0:  ADDWF  xED,W
05CB2:  MOVWF  FE9
05CB4:  MOVLW  00
05CB6:  ADDWFC xEE,W
05CB8:  MOVWF  FEA
05CBA:  MOVF   FEF,W
05CBC:  CLRF   xFC
05CBE:  CLRF   xFB
05CC0:  CLRF   xFA
05CC2:  MOVWF  xF9
05CC4:  MOVFF  1FA,03
05CC8:  MOVFF  1F9,02
05CCC:  CLRF   00
05CCE:  CLRF   01
05CD0:  MOVF   00,W
05CD2:  IORWF  xF4,F
05CD4:  MOVF   01,W
05CD6:  IORWF  xF5,F
05CD8:  MOVF   02,W
05CDA:  IORWF  xF6,F
05CDC:  MOVF   03,W
05CDE:  IORWF  xF7,F
05CE0:  MOVLW  03
05CE2:  ADDWF  xED,W
05CE4:  MOVWF  FE9
05CE6:  MOVLW  00
05CE8:  ADDWFC xEE,W
05CEA:  MOVWF  FEA
05CEC:  MOVF   FEF,W
05CEE:  CLRF   xFC
05CF0:  CLRF   xFB
05CF2:  CLRF   xFA
05CF4:  MOVWF  xF9
05CF6:  MOVFF  1FB,03
05CFA:  MOVFF  1FA,02
05CFE:  MOVFF  1F9,01
05D02:  CLRF   00
05D04:  MOVF   00,W
05D06:  IORWF  xF4,F
05D08:  MOVF   01,W
05D0A:  IORWF  xF5,F
05D0C:  MOVF   02,W
05D0E:  IORWF  xF6,F
05D10:  MOVF   03,W
05D12:  IORWF  xF7,F
05D14:  MOVLW  04
05D16:  ADDWF  xED,W
05D18:  MOVWF  FE9
05D1A:  MOVLW  00
05D1C:  ADDWFC xEE,W
05D1E:  MOVWF  FEA
05D20:  MOVF   FEF,W
05D22:  MOVWF  00
05D24:  CLRF   01
05D26:  CLRF   02
05D28:  CLRF   03
05D2A:  MOVF   00,W
05D2C:  IORWF  xF4,W
05D2E:  MOVWF  xF0
05D30:  MOVF   01,W
05D32:  IORWF  xF5,W
05D34:  MOVWF  xF1
05D36:  MOVF   02,W
05D38:  IORWF  xF6,W
05D3A:  MOVWF  xF2
05D3C:  MOVF   03,W
05D3E:  IORWF  xF7,W
05D40:  MOVWF  xF3
....................    printf("\tSubsector Address: 0x%08LX\r\n", subsector_address);
05D42:  MOVLW  0C
05D44:  MOVWF  FF6
05D46:  MOVLW  19
05D48:  MOVWF  FF7
05D4A:  MOVLW  00
05D4C:  MOVWF  FF8
05D4E:  MOVLW  16
05D50:  MOVLB  A
05D52:  MOVWF  x0C
05D54:  MOVLB  0
05D56:  CALL   2026
05D5A:  MOVFF  1F3,A26
05D5E:  MOVLW  37
05D60:  MOVLB  A
05D62:  MOVWF  x27
05D64:  MOVLB  0
05D66:  CALL   2232
05D6A:  MOVFF  1F2,A26
05D6E:  MOVLW  37
05D70:  MOVLB  A
05D72:  MOVWF  x27
05D74:  MOVLB  0
05D76:  CALL   2232
05D7A:  MOVFF  1F1,A26
05D7E:  MOVLW  37
05D80:  MOVLB  A
05D82:  MOVWF  x27
05D84:  MOVLB  0
05D86:  CALL   2232
05D8A:  MOVFF  1F0,A26
05D8E:  MOVLW  37
05D90:  MOVLB  A
05D92:  MOVWF  x27
05D94:  MOVLB  0
05D96:  CALL   2232
05D9A:  MOVLW  0D
05D9C:  BTFSS  FA6.6
05D9E:  GOTO   5D9C
05DA2:  MOVLB  E
05DA4:  MOVWF  xF9
05DA6:  MOVLW  0A
05DA8:  MOVLB  0
05DAA:  BTFSS  FA6.6
05DAC:  GOTO   5DAA
05DB0:  MOVLB  E
05DB2:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START);
05DB4:  MOVFF  1EF,244
05DB8:  MOVLB  2
05DBA:  CLRF   x45
05DBC:  MOVLB  0
05DBE:  CALL   4E76
....................    subsector_4kByte_erase(mis_fm, subsector_address); // FIX: 固定0消去→指定アドレス
05DC2:  MOVFF  115,A51
05DC6:  MOVFF  114,A50
05DCA:  MOVFF  113,A4F
05DCE:  MOVFF  112,A4E
05DD2:  MOVFF  1F3,A55
05DD6:  MOVFF  1F2,A54
05DDA:  MOVFF  1F1,A53
05DDE:  MOVFF  1F0,A52
05DE2:  CALL   4AC2
....................    piclog_make(cmd, PICLOG_PARAM_END);
05DE6:  MOVFF  1EF,244
05DEA:  MOVLB  2
05DEC:  SETF   x45
05DEE:  MOVLB  0
05DF0:  CALL   4E76
....................    printf("End Flash Erase 4kByte Subsector\r\n");
05DF4:  MOVLW  2A
05DF6:  MOVWF  FF6
05DF8:  MOVLW  19
05DFA:  MOVWF  FF7
05DFC:  MOVLW  00
05DFE:  MOVWF  FF8
05E00:  CALL   1FF0
05E04:  GOTO   E348 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_64kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase 64kByte Subsector\r\n");
05E08:  MOVLW  4E
05E0A:  MOVWF  FF6
05E0C:  MOVLW  19
05E0E:  MOVWF  FF7
05E10:  MOVLW  00
05E12:  MOVWF  FF8
05E14:  CALL   1FF0
....................    unsigned int8 cmd = parameter[0]; // Get the command ID from the parameter array
....................    unsigned int32 subsector_address =
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
05E18:  MOVLB  1
05E1A:  MOVF   xED,W
05E1C:  MOVWF  FE9
05E1E:  MOVF   xEE,W
05E20:  MOVWF  FEA
05E22:  MOVFF  FEF,1EF
05E26:  MOVLW  01
05E28:  ADDWF  xED,W
05E2A:  MOVWF  FE9
05E2C:  MOVLW  00
05E2E:  ADDWFC xEE,W
05E30:  MOVWF  FEA
05E32:  MOVF   FEF,W
05E34:  CLRF   xF7
05E36:  CLRF   xF6
05E38:  CLRF   xF5
05E3A:  MOVWF  xF4
05E3C:  MOVFF  1F4,1F7
05E40:  CLRF   xF4
05E42:  CLRF   xF5
05E44:  CLRF   xF6
05E46:  MOVLW  02
05E48:  ADDWF  xED,W
05E4A:  MOVWF  FE9
05E4C:  MOVLW  00
05E4E:  ADDWFC xEE,W
05E50:  MOVWF  FEA
05E52:  MOVF   FEF,W
05E54:  CLRF   xFC
05E56:  CLRF   xFB
05E58:  CLRF   xFA
05E5A:  MOVWF  xF9
05E5C:  MOVFF  1FA,03
05E60:  MOVFF  1F9,02
05E64:  CLRF   00
05E66:  CLRF   01
05E68:  MOVF   00,W
05E6A:  IORWF  xF4,F
05E6C:  MOVF   01,W
05E6E:  IORWF  xF5,F
05E70:  MOVF   02,W
05E72:  IORWF  xF6,F
05E74:  MOVF   03,W
05E76:  IORWF  xF7,F
05E78:  MOVLW  03
05E7A:  ADDWF  xED,W
05E7C:  MOVWF  FE9
05E7E:  MOVLW  00
05E80:  ADDWFC xEE,W
05E82:  MOVWF  FEA
05E84:  MOVF   FEF,W
05E86:  CLRF   xFC
05E88:  CLRF   xFB
05E8A:  CLRF   xFA
05E8C:  MOVWF  xF9
05E8E:  MOVFF  1FB,03
05E92:  MOVFF  1FA,02
05E96:  MOVFF  1F9,01
05E9A:  CLRF   00
05E9C:  MOVF   00,W
05E9E:  IORWF  xF4,F
05EA0:  MOVF   01,W
05EA2:  IORWF  xF5,F
05EA4:  MOVF   02,W
05EA6:  IORWF  xF6,F
05EA8:  MOVF   03,W
05EAA:  IORWF  xF7,F
05EAC:  MOVLW  04
05EAE:  ADDWF  xED,W
05EB0:  MOVWF  FE9
05EB2:  MOVLW  00
05EB4:  ADDWFC xEE,W
05EB6:  MOVWF  FEA
05EB8:  MOVF   FEF,W
05EBA:  MOVWF  00
05EBC:  CLRF   01
05EBE:  CLRF   02
05EC0:  CLRF   03
05EC2:  MOVF   00,W
05EC4:  IORWF  xF4,W
05EC6:  MOVWF  xF0
05EC8:  MOVF   01,W
05ECA:  IORWF  xF5,W
05ECC:  MOVWF  xF1
05ECE:  MOVF   02,W
05ED0:  IORWF  xF6,W
05ED2:  MOVWF  xF2
05ED4:  MOVF   03,W
05ED6:  IORWF  xF7,W
05ED8:  MOVWF  xF3
....................    
....................    fprintf(PC, "\tSubsector Address: 0x%08LX\r\n", subsector_address);
05EDA:  MOVLW  74
05EDC:  MOVWF  FF6
05EDE:  MOVLW  19
05EE0:  MOVWF  FF7
05EE2:  MOVLW  00
05EE4:  MOVWF  FF8
05EE6:  MOVLW  16
05EE8:  MOVLB  A
05EEA:  MOVWF  x0C
05EEC:  MOVLB  0
05EEE:  CALL   2026
05EF2:  MOVFF  1F3,A26
05EF6:  MOVLW  37
05EF8:  MOVLB  A
05EFA:  MOVWF  x27
05EFC:  MOVLB  0
05EFE:  CALL   2232
05F02:  MOVFF  1F2,A26
05F06:  MOVLW  37
05F08:  MOVLB  A
05F0A:  MOVWF  x27
05F0C:  MOVLB  0
05F0E:  CALL   2232
05F12:  MOVFF  1F1,A26
05F16:  MOVLW  37
05F18:  MOVLB  A
05F1A:  MOVWF  x27
05F1C:  MOVLB  0
05F1E:  CALL   2232
05F22:  MOVFF  1F0,A26
05F26:  MOVLW  37
05F28:  MOVLB  A
05F2A:  MOVWF  x27
05F2C:  MOVLB  0
05F2E:  CALL   2232
05F32:  MOVLW  0D
05F34:  BTFSS  FA6.6
05F36:  GOTO   5F34
05F3A:  MOVLB  E
05F3C:  MOVWF  xF9
05F3E:  MOVLW  0A
05F40:  MOVLB  0
05F42:  BTFSS  FA6.6
05F44:  GOTO   5F42
05F48:  MOVLB  E
05F4A:  MOVWF  xF9
....................    piclog_make(cmd, PICLOG_PARAM_START); // Log the command execution
05F4C:  MOVFF  1EF,244
05F50:  MOVLB  2
05F52:  CLRF   x45
05F54:  MOVLB  0
05F56:  CALL   4E76
....................    
....................    //subsector_64kByte_erase(mis_fm, subsector_address);
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
05F5A:  MOVFF  1EF,244
05F5E:  MOVLB  2
05F60:  SETF   x45
05F62:  MOVLB  0
05F64:  CALL   4E76
....................    fprintf(PC, "End Flash Erase 64kByte Subsector\r\n");
05F68:  MOVLW  92
05F6A:  MOVWF  FF6
05F6C:  MOVLW  19
05F6E:  MOVWF  FF7
05F70:  MOVLW  00
05F72:  MOVWF  FF8
05F74:  CALL   1FF0
05F78:  GOTO   E358 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_demo(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write Demo\r\n");
*
0615C:  MOVLW  B6
0615E:  MOVWF  FF6
06160:  MOVLW  19
06162:  MOVWF  FF7
06164:  MOVLW  00
06166:  MOVWF  FF8
06168:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0616C:  MOVLB  1
0616E:  MOVF   xED,W
06170:  MOVWF  FE9
06172:  MOVF   xEE,W
06174:  MOVWF  FEA
06176:  MOVFF  FEF,243
0617A:  MOVFF  243,244
0617E:  MOVLB  2
06180:  CLRF   x45
06182:  MOVLB  0
06184:  CALL   4E76
.................... 
....................    FLASH_WRITE_PARAM flash_write_param = {0};
06188:  MOVLB  1
0618A:  CLRF   xEF
0618C:  CLRF   xF0
0618E:  CLRF   xF1
06190:  CLRF   xF2
06192:  CLRF   xF3
06194:  CLRF   xF4
06196:  CLRF   xF5
....................    
....................    flash_write_param.id = parameter[0];
06198:  MOVF   xED,W
0619A:  MOVWF  FE9
0619C:  MOVF   xEE,W
0619E:  MOVWF  FEA
061A0:  MOVFF  FEF,1EF
....................    flash_write_param.writeaddress =
....................    ((unsigned int32)parameter[1] << 24) |
....................    ((unsigned int32)parameter[2] << 16) |
....................    ((unsigned int32)parameter[3] << 8)  |
....................    ((unsigned int32)parameter[4]);
061A4:  MOVLW  01
061A6:  ADDWF  xED,W
061A8:  MOVWF  FE9
061AA:  MOVLW  00
061AC:  ADDWFC xEE,W
061AE:  MOVWF  FEA
061B0:  MOVF   FEF,W
061B2:  MOVLB  2
061B4:  CLRF   x46
061B6:  CLRF   x45
061B8:  CLRF   x44
061BA:  MOVWF  x43
061BC:  MOVFF  243,246
061C0:  CLRF   x43
061C2:  CLRF   x44
061C4:  CLRF   x45
061C6:  MOVLW  02
061C8:  MOVLB  1
061CA:  ADDWF  xED,W
061CC:  MOVWF  FE9
061CE:  MOVLW  00
061D0:  ADDWFC xEE,W
061D2:  MOVWF  FEA
061D4:  MOVF   FEF,W
061D6:  MOVLB  2
061D8:  CLRF   x4B
061DA:  CLRF   x4A
061DC:  CLRF   x49
061DE:  MOVWF  x48
061E0:  MOVFF  249,03
061E4:  MOVFF  248,02
061E8:  CLRF   00
061EA:  CLRF   01
061EC:  MOVF   00,W
061EE:  IORWF  x43,F
061F0:  MOVF   01,W
061F2:  IORWF  x44,F
061F4:  MOVF   02,W
061F6:  IORWF  x45,F
061F8:  MOVF   03,W
061FA:  IORWF  x46,F
061FC:  MOVLW  03
061FE:  MOVLB  1
06200:  ADDWF  xED,W
06202:  MOVWF  FE9
06204:  MOVLW  00
06206:  ADDWFC xEE,W
06208:  MOVWF  FEA
0620A:  MOVF   FEF,W
0620C:  MOVLB  2
0620E:  CLRF   x4B
06210:  CLRF   x4A
06212:  CLRF   x49
06214:  MOVWF  x48
06216:  MOVFF  24A,03
0621A:  MOVFF  249,02
0621E:  MOVFF  248,01
06222:  CLRF   00
06224:  MOVF   00,W
06226:  IORWF  x43,F
06228:  MOVF   01,W
0622A:  IORWF  x44,F
0622C:  MOVF   02,W
0622E:  IORWF  x45,F
06230:  MOVF   03,W
06232:  IORWF  x46,F
06234:  MOVLW  04
06236:  MOVLB  1
06238:  ADDWF  xED,W
0623A:  MOVWF  FE9
0623C:  MOVLW  00
0623E:  ADDWFC xEE,W
06240:  MOVWF  FEA
06242:  MOVF   FEF,W
06244:  MOVWF  00
06246:  CLRF   01
06248:  CLRF   02
0624A:  CLRF   03
0624C:  MOVF   00,W
0624E:  MOVLB  2
06250:  IORWF  x43,W
06252:  MOVLB  1
06254:  MOVWF  xF0
06256:  MOVF   01,W
06258:  MOVLB  2
0625A:  IORWF  x44,W
0625C:  MOVLB  1
0625E:  MOVWF  xF1
06260:  MOVF   02,W
06262:  MOVLB  2
06264:  IORWF  x45,W
06266:  MOVLB  1
06268:  MOVWF  xF2
0626A:  MOVF   03,W
0626C:  MOVLB  2
0626E:  IORWF  x46,W
06270:  MOVLB  1
06272:  MOVWF  xF3
....................    flash_write_param.packetnum =
....................    ((unsigned int16)parameter[7] << 8) |
....................    ((unsigned int16)parameter[8]);
06274:  MOVLW  07
06276:  ADDWF  xED,W
06278:  MOVWF  FE9
0627A:  MOVLW  00
0627C:  ADDWFC xEE,W
0627E:  MOVWF  FEA
06280:  MOVF   FEF,W
06282:  MOVLB  2
06284:  CLRF   x44
06286:  MOVWF  x43
06288:  MOVFF  243,244
0628C:  CLRF   x43
0628E:  MOVLW  08
06290:  MOVLB  1
06292:  ADDWF  xED,W
06294:  MOVWF  FE9
06296:  MOVLW  00
06298:  ADDWFC xEE,W
0629A:  MOVWF  FEA
0629C:  MOVF   FEF,W
0629E:  CLRF   03
062A0:  MOVLB  2
062A2:  IORWF  x43,W
062A4:  MOVLB  1
062A6:  MOVWF  xF4
062A8:  MOVF   03,W
062AA:  MOVLB  2
062AC:  IORWF  x44,W
062AE:  MOVLB  1
062B0:  MOVWF  xF5
.................... 
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_write_param.id);
062B2:  MOVLW  D0
062B4:  MOVWF  FF6
062B6:  MOVLW  19
062B8:  MOVWF  FF7
062BA:  MOVLW  00
062BC:  MOVWF  FF8
062BE:  MOVLW  0C
062C0:  MOVLB  A
062C2:  MOVWF  x0C
062C4:  MOVLB  0
062C6:  CALL   2026
062CA:  MOVFF  1EF,A26
062CE:  MOVLW  37
062D0:  MOVLB  A
062D2:  MOVWF  x27
062D4:  MOVLB  0
062D6:  CALL   2232
062DA:  MOVLW  0D
062DC:  BTFSS  FA6.6
062DE:  GOTO   62DC
062E2:  MOVLB  E
062E4:  MOVWF  xF9
062E6:  MOVLW  0A
062E8:  MOVLB  0
062EA:  BTFSS  FA6.6
062EC:  GOTO   62EA
062F0:  MOVLB  E
062F2:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_write_param.writeaddress);
062F4:  MOVLW  E4
062F6:  MOVWF  FF6
062F8:  MOVLW  19
062FA:  MOVWF  FF7
062FC:  MOVLW  00
062FE:  MOVWF  FF8
06300:  MOVLW  0E
06302:  MOVLB  A
06304:  MOVWF  x0C
06306:  MOVLB  0
06308:  CALL   2026
0630C:  MOVFF  1F3,A26
06310:  MOVLW  37
06312:  MOVLB  A
06314:  MOVWF  x27
06316:  MOVLB  0
06318:  CALL   2232
0631C:  MOVFF  1F2,A26
06320:  MOVLW  37
06322:  MOVLB  A
06324:  MOVWF  x27
06326:  MOVLB  0
06328:  CALL   2232
0632C:  MOVFF  1F1,A26
06330:  MOVLW  37
06332:  MOVLB  A
06334:  MOVWF  x27
06336:  MOVLB  0
06338:  CALL   2232
0633C:  MOVFF  1F0,A26
06340:  MOVLW  37
06342:  MOVLB  A
06344:  MOVWF  x27
06346:  MOVLB  0
06348:  CALL   2232
0634C:  MOVLW  0D
0634E:  BTFSS  FA6.6
06350:  GOTO   634E
06354:  MOVLB  E
06356:  MOVWF  xF9
06358:  MOVLW  0A
0635A:  MOVLB  0
0635C:  BTFSS  FA6.6
0635E:  GOTO   635C
06362:  MOVLB  E
06364:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_write_param.packetnum);
06366:  MOVLW  FA
06368:  MOVWF  FF6
0636A:  MOVLW  19
0636C:  MOVWF  FF7
0636E:  MOVLW  00
06370:  MOVWF  FF8
06372:  MOVLW  0E
06374:  MOVLB  A
06376:  MOVWF  x0C
06378:  MOVLB  0
0637A:  CALL   2026
0637E:  MOVFF  1F5,A26
06382:  MOVLW  37
06384:  MOVLB  A
06386:  MOVWF  x27
06388:  MOVLB  0
0638A:  CALL   2232
0638E:  MOVFF  1F4,A26
06392:  MOVLW  37
06394:  MOVLB  A
06396:  MOVWF  x27
06398:  MOVLB  0
0639A:  CALL   2232
0639E:  MOVLW  0D
063A0:  BTFSS  FA6.6
063A2:  GOTO   63A0
063A6:  MOVLB  E
063A8:  MOVWF  xF9
063AA:  MOVLW  0A
063AC:  MOVLB  0
063AE:  BTFSS  FA6.6
063B0:  GOTO   63AE
063B4:  MOVLB  E
063B6:  MOVWF  xF9
.................... 
....................    piclog_make(flash_write_param.id, 0x00); // Log the command execution
063B8:  MOVFF  1EF,244
063BC:  MOVLB  2
063BE:  CLRF   x45
063C0:  MOVLB  0
063C2:  CALL   4E76
....................    
....................    unsigned int8 writedata[64];
....................    unsigned int16 p; // packet index
....................    unsigned int16 base_value;
.................... 
....................    fprintf(PC, "Write Data\r\n");
063C6:  MOVLW  10
063C8:  MOVWF  FF6
063CA:  MOVLW  1A
063CC:  MOVWF  FF7
063CE:  MOVLW  00
063D0:  MOVWF  FF8
063D2:  CALL   1FF0
....................    for (p = 0; p < flash_write_param.packetnum; p++)
063D6:  MOVLB  2
063D8:  CLRF   x37
063DA:  CLRF   x36
063DC:  MOVLB  0
063DE:  MOVLB  2
063E0:  MOVF   x37,W
063E2:  MOVLB  1
063E4:  SUBWF  xF5,W
063E6:  BTFSC  FD8.0
063E8:  BRA    63F0
063EA:  MOVLB  0
063EC:  GOTO   675E
063F0:  MOVLB  0
063F2:  BTFSS  FD8.2
063F4:  GOTO   640C
063F8:  MOVLB  1
063FA:  MOVF   xF4,W
063FC:  MOVLB  2
063FE:  SUBWF  x36,W
06400:  BTFSS  FD8.0
06402:  BRA    640A
06404:  MOVLB  0
06406:  GOTO   675E
0640A:  MOVLB  0
....................    {
....................       base_value = p * PACKET_SIZE;  // パケット毎のスタート値
0640C:  MOVLB  2
0640E:  RLCF   x36,W
06410:  MOVWF  x38
06412:  RLCF   x37,W
06414:  MOVWF  x39
06416:  RLCF   x38,F
06418:  RLCF   x39,F
0641A:  RLCF   x38,F
0641C:  RLCF   x39,F
0641E:  RLCF   x38,F
06420:  RLCF   x39,F
06422:  RLCF   x38,F
06424:  RLCF   x39,F
06426:  RLCF   x38,F
06428:  RLCF   x39,F
0642A:  MOVLW  C0
0642C:  ANDWF  x38,F
.................... 
....................       for (unsigned int8 i = 0; i < PACKET_SIZE; i++)
0642E:  CLRF   x3A
06430:  MOVLB  0
06432:  MOVLB  2
06434:  MOVF   x3A,W
06436:  SUBLW  3F
06438:  BTFSC  FD8.0
0643A:  BRA    6442
0643C:  MOVLB  0
0643E:  GOTO   64A4
06442:  MOVLB  0
....................       {
....................          writedata[i] = (base_value + i) & 0xFF; // 0x00〜0xFFをループ
06444:  CLRF   03
06446:  MOVLB  2
06448:  MOVF   x3A,W
0644A:  ADDLW  F6
0644C:  MOVWF  FE9
0644E:  MOVLW  01
06450:  ADDWFC 03,W
06452:  MOVWF  FEA
06454:  MOVF   x3A,W
06456:  ADDWF  x38,W
06458:  MOVWF  x45
0645A:  MOVLW  00
0645C:  ADDWFC x39,W
0645E:  MOVWF  x46
06460:  MOVF   x45,W
06462:  MOVWF  00
06464:  CLRF   03
06466:  MOVF   00,W
06468:  MOVWF  FEF
....................          fprintf(PC, "%02X ", writedata[i]); // デバッグ用に書き込みデータを表示
0646A:  CLRF   03
0646C:  MOVF   x3A,W
0646E:  ADDLW  F6
06470:  MOVWF  FE9
06472:  MOVLW  01
06474:  ADDWFC 03,W
06476:  MOVWF  FEA
06478:  MOVFF  FEF,243
0647C:  MOVFF  243,A26
06480:  MOVLW  37
06482:  MOVLB  A
06484:  MOVWF  x27
06486:  MOVLB  0
06488:  CALL   2232
0648C:  MOVLW  20
0648E:  BTFSS  FA6.6
06490:  GOTO   648E
06494:  MOVLB  E
06496:  MOVWF  xF9
06498:  MOVLB  0
0649A:  MOVLB  2
0649C:  INCF   x3A,F
0649E:  MOVLB  0
064A0:  GOTO   6432
....................       }
.................... 
....................       unsigned int32 current_address = flash_write_param.writeaddress + (p * PACKET_SIZE);
064A4:  MOVLB  2
064A6:  RLCF   x36,W
064A8:  MOVWF  02
064AA:  RLCF   x37,W
064AC:  MOVWF  03
064AE:  RLCF   02,F
064B0:  RLCF   03,F
064B2:  RLCF   02,F
064B4:  RLCF   03,F
064B6:  RLCF   02,F
064B8:  RLCF   03,F
064BA:  RLCF   02,F
064BC:  RLCF   03,F
064BE:  RLCF   02,F
064C0:  RLCF   03,F
064C2:  MOVLW  C0
064C4:  ANDWF  02,F
064C6:  MOVF   02,W
064C8:  MOVLB  1
064CA:  ADDWF  xF0,W
064CC:  MOVLB  2
064CE:  MOVWF  x3B
064D0:  MOVF   03,W
064D2:  MOVLB  1
064D4:  ADDWFC xF1,W
064D6:  MOVLB  2
064D8:  MOVWF  x3C
064DA:  MOVLW  00
064DC:  MOVLB  1
064DE:  ADDWFC xF2,W
064E0:  MOVLB  2
064E2:  MOVWF  x3D
064E4:  MOVLW  00
064E6:  MOVLB  1
064E8:  ADDWFC xF3,W
064EA:  MOVLB  2
064EC:  MOVWF  x3E
....................       // FLASH 終端チェック (MISF_END は最終アドレス想定: inclusive)
....................       if(current_address > MISF_END){
064EE:  MOVF   x3E,F
064F0:  BTFSC  FD8.2
064F2:  BRA    64FA
064F4:  MOVLB  0
064F6:  GOTO   6528
064FA:  MOVLB  0
064FC:  MOVLB  2
064FE:  MOVF   x3D,W
06500:  SUBLW  BB
06502:  BTFSS  FD8.0
06504:  BRA    650C
06506:  MOVLB  0
06508:  GOTO   65FE
0650C:  MOVLB  0
0650E:  XORLW  FF
06510:  BTFSS  FD8.2
06512:  GOTO   6528
06516:  MOVLB  2
06518:  MOVF   x3C,W
0651A:  SUBLW  0F
0651C:  BTFSS  FD8.0
0651E:  BRA    6526
06520:  MOVLB  0
06522:  GOTO   65FE
06526:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Write address 0x%08LX exceeds device end 0x%08LX -> abort\r\n", current_address, (unsigned int32)MISF_END);
06528:  MOVLW  1E
0652A:  MOVWF  FF6
0652C:  MOVLW  1A
0652E:  MOVWF  FF7
06530:  MOVLW  00
06532:  MOVWF  FF8
06534:  MOVLW  1A
06536:  MOVLB  A
06538:  MOVWF  x0C
0653A:  MOVLB  0
0653C:  CALL   2026
06540:  MOVFF  23E,A26
06544:  MOVLW  37
06546:  MOVLB  A
06548:  MOVWF  x27
0654A:  MOVLB  0
0654C:  CALL   2232
06550:  MOVFF  23D,A26
06554:  MOVLW  37
06556:  MOVLB  A
06558:  MOVWF  x27
0655A:  MOVLB  0
0655C:  CALL   2232
06560:  MOVFF  23C,A26
06564:  MOVLW  37
06566:  MOVLB  A
06568:  MOVWF  x27
0656A:  MOVLB  0
0656C:  CALL   2232
06570:  MOVFF  23B,A26
06574:  MOVLW  37
06576:  MOVLB  A
06578:  MOVWF  x27
0657A:  MOVLB  0
0657C:  CALL   2232
06580:  MOVLW  3D
06582:  MOVWF  FF6
06584:  MOVLW  1A
06586:  MOVWF  FF7
06588:  MOVLW  00
0658A:  MOVWF  FF8
0658C:  MOVLW  16
0658E:  MOVLB  A
06590:  MOVWF  x0C
06592:  MOVLB  0
06594:  CALL   2026
06598:  MOVLB  A
0659A:  CLRF   x26
0659C:  MOVLW  37
0659E:  MOVWF  x27
065A0:  MOVLB  0
065A2:  CALL   2232
065A6:  MOVLW  BC
065A8:  MOVLB  A
065AA:  MOVWF  x26
065AC:  MOVLW  37
065AE:  MOVWF  x27
065B0:  MOVLB  0
065B2:  CALL   2232
065B6:  MOVLW  0F
065B8:  MOVLB  A
065BA:  MOVWF  x26
065BC:  MOVLW  37
065BE:  MOVWF  x27
065C0:  MOVLB  0
065C2:  CALL   2232
065C6:  MOVLB  A
065C8:  SETF   x26
065CA:  MOVLW  37
065CC:  MOVWF  x27
065CE:  MOVLB  0
065D0:  CALL   2232
065D4:  MOVLW  58
065D6:  MOVWF  FF6
065D8:  MOVLW  1A
065DA:  MOVWF  FF7
065DC:  MOVLW  00
065DE:  MOVWF  FF8
065E0:  MOVLW  0B
065E2:  MOVLB  A
065E4:  MOVWF  x0C
065E6:  MOVLB  0
065E8:  CALL   2026
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
065EC:  MOVFF  1EF,244
065F0:  MOVLB  2
065F2:  SETF   x45
065F4:  MOVLB  0
065F6:  CALL   4E76
....................          break;
065FA:  GOTO   675E
....................       }
....................       if(current_address + (PACKET_SIZE - 1) > MISF_END){
065FE:  MOVLW  3F
06600:  MOVLB  2
06602:  ADDWF  x3B,W
06604:  MOVWF  x43
06606:  MOVLW  00
06608:  ADDWFC x3C,W
0660A:  MOVWF  x44
0660C:  MOVLW  00
0660E:  ADDWFC x3D,W
06610:  MOVWF  x45
06612:  MOVLW  00
06614:  ADDWFC x3E,W
06616:  MOVWF  x46
06618:  MOVF   x46,F
0661A:  BTFSC  FD8.2
0661C:  BRA    6624
0661E:  MOVLB  0
06620:  GOTO   6652
06624:  MOVLB  0
06626:  MOVLB  2
06628:  MOVF   x45,W
0662A:  SUBLW  BB
0662C:  BTFSS  FD8.0
0662E:  BRA    6636
06630:  MOVLB  0
06632:  GOTO   671A
06636:  MOVLB  0
06638:  XORLW  FF
0663A:  BTFSS  FD8.2
0663C:  GOTO   6652
06640:  MOVLB  2
06642:  MOVF   x44,W
06644:  SUBLW  0F
06646:  BTFSS  FD8.0
06648:  BRA    6650
0664A:  MOVLB  0
0664C:  GOTO   671A
06650:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - current_address) + 1; // 書込可能残り
06652:  MOVLW  FF
06654:  BSF    FD8.0
06656:  MOVLB  2
06658:  SUBFWB x3B,W
0665A:  MOVWF  x43
0665C:  MOVLW  0F
0665E:  SUBFWB x3C,W
06660:  MOVWF  x44
06662:  MOVLW  BC
06664:  SUBFWB x3D,W
06666:  MOVWF  x45
06668:  MOVLW  00
0666A:  SUBFWB x3E,W
0666C:  MOVWF  x46
0666E:  MOVLW  01
06670:  ADDWF  x43,W
06672:  MOVWF  x3F
06674:  MOVLW  00
06676:  ADDWFC x44,W
06678:  MOVWF  x40
0667A:  MOVLW  00
0667C:  ADDWFC x45,W
0667E:  MOVWF  x41
06680:  MOVLW  00
06682:  ADDWFC x46,W
06684:  MOVWF  x42
06686:  MOVLB  0
....................          fprintf(PC, "\r\n[FLASH] Reached end. Partial write %lu bytes (packet truncated).\r\n", remain);
06688:  MOVLW  64
0668A:  MOVWF  FF6
0668C:  MOVLW  1A
0668E:  MOVWF  FF7
06690:  MOVLW  00
06692:  MOVWF  FF8
06694:  MOVLW  25
06696:  MOVLB  A
06698:  MOVWF  x0C
0669A:  MOVLB  0
0669C:  CALL   2026
066A0:  MOVLW  41
066A2:  MOVWF  FE9
066A4:  MOVFF  242,247
066A8:  MOVFF  241,246
066AC:  MOVFF  240,245
066B0:  MOVFF  23F,244
066B4:  CALL   6056
066B8:  MOVLW  8C
066BA:  MOVWF  FF6
066BC:  MOVLW  1A
066BE:  MOVWF  FF7
066C0:  MOVLW  00
066C2:  MOVWF  FF8
066C4:  MOVLW  1C
066C6:  MOVLB  A
066C8:  MOVWF  x0C
066CA:  MOVLB  0
066CC:  CALL   2026
....................          write_data_bytes(mis_fm, current_address, writedata, (unsigned int16)remain);
066D0:  MOVFF  115,B37
066D4:  MOVFF  114,B36
066D8:  MOVFF  113,B35
066DC:  MOVFF  112,B34
066E0:  MOVFF  23E,B3B
066E4:  MOVFF  23D,B3A
066E8:  MOVFF  23C,B39
066EC:  MOVFF  23B,B38
066F0:  MOVLW  01
066F2:  MOVLB  B
066F4:  MOVWF  x3D
066F6:  MOVLW  F6
066F8:  MOVWF  x3C
066FA:  MOVFF  240,B3F
066FE:  MOVFF  23F,B3E
06702:  MOVLB  0
06704:  CALL   3C3E
....................          piclog_make(flash_write_param.id, PICLOG_PARAM_END);
06708:  MOVFF  1EF,244
0670C:  MOVLB  2
0670E:  SETF   x45
06710:  MOVLB  0
06712:  CALL   4E76
....................          break;
06716:  GOTO   675E
....................       }
....................       write_data_bytes(mis_fm, current_address, writedata, PACKET_SIZE);
0671A:  MOVFF  115,B37
0671E:  MOVFF  114,B36
06722:  MOVFF  113,B35
06726:  MOVFF  112,B34
0672A:  MOVFF  23E,B3B
0672E:  MOVFF  23D,B3A
06732:  MOVFF  23C,B39
06736:  MOVFF  23B,B38
0673A:  MOVLW  01
0673C:  MOVLB  B
0673E:  MOVWF  x3D
06740:  MOVLW  F6
06742:  MOVWF  x3C
06744:  CLRF   x3F
06746:  MOVLW  40
06748:  MOVWF  x3E
0674A:  MOVLB  0
0674C:  CALL   3C3E
06750:  MOVLB  2
06752:  INCF   x36,F
06754:  BTFSC  FD8.2
06756:  INCF   x37,F
06758:  MOVLB  0
0675A:  GOTO   63DE
....................    }
.................... 
....................    piclog_make(flash_write_param.id, PICLOG_PARAM_END); // Log the end of the command execution
0675E:  MOVFF  1EF,244
06762:  MOVLB  2
06764:  SETF   x45
06766:  MOVLB  0
06768:  CALL   4E76
....................    fprintf(PC, "\r\n");
0676C:  MOVLW  0D
0676E:  BTFSS  FA6.6
06770:  GOTO   676E
06774:  MOVLB  E
06776:  MOVWF  xF9
06778:  MOVLW  0A
0677A:  MOVLB  0
0677C:  BTFSS  FA6.6
0677E:  GOTO   677C
06782:  MOVLB  E
06784:  MOVWF  xF9
....................    fprintf(PC, "End Flash Write Demo\r\n");
06786:  MOVLW  AA
06788:  MOVWF  FF6
0678A:  MOVLW  1A
0678C:  MOVWF  FF7
0678E:  MOVLW  00
06790:  MOVWF  FF8
06792:  MOVLB  0
06794:  CALL   1FF0
06798:  GOTO   E368 (RETURN)
.................... }
.................... 
.................... void mode_misf_write_4kbyte_subsector(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Write 4kByte Subsector\r\n");
*
067CC:  MOVLW  C2
067CE:  MOVWF  FF6
067D0:  MOVLW  1A
067D2:  MOVWF  FF7
067D4:  MOVLW  00
067D6:  MOVWF  FF8
067D8:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
067DC:  MOVLB  1
067DE:  MOVF   xED,W
067E0:  MOVWF  FE9
067E2:  MOVF   xEE,W
067E4:  MOVWF  FEA
067E6:  MOVFF  FEF,1F3
067EA:  MOVFF  1F3,244
067EE:  MOVLB  2
067F0:  CLRF   x45
067F2:  MOVLB  0
067F4:  CALL   4E76
....................    flash_setting(mis_fm);
067F8:  MOVFF  115,2FB
067FC:  MOVFF  114,2FA
06800:  MOVFF  113,2F9
06804:  MOVFF  112,2F8
06808:  CALL   679C
....................    unsigned int32 write_address = 0x00000000;
0680C:  MOVLB  1
0680E:  CLRF   xF2
06810:  CLRF   xF1
06812:  CLRF   xF0
06814:  CLRF   xEF
....................    //int8 write_data[256] = {0x01, 0x02, 0x03, 0x04}; // Example data
....................    //write_data_bytes(mis_fm, write_address, write_data, 256);
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
06816:  MOVF   xED,W
06818:  MOVWF  FE9
0681A:  MOVF   xEE,W
0681C:  MOVWF  FEA
0681E:  MOVFF  FEF,1F3
06822:  MOVFF  1F3,244
06826:  MOVLB  2
06828:  SETF   x45
0682A:  MOVLB  0
0682C:  CALL   4E76
....................    fprintf(PC, "End Flash Write 4kByte Subsector\r\n");
06830:  MOVLW  E8
06832:  MOVWF  FF6
06834:  MOVLW  1A
06836:  MOVWF  FF7
06838:  MOVLW  00
0683A:  MOVWF  FF8
0683C:  CALL   1FF0
06840:  GOTO   E378 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read(unsigned int8 *uplinkcmd_ptr)
.................... {
....................    fprintf(PC, "Start Flash Read\r\n");
06844:  MOVLW  0C
06846:  MOVWF  FF6
06848:  MOVLW  1B
0684A:  MOVWF  FF7
0684C:  MOVLW  00
0684E:  MOVWF  FF8
06850:  CALL   1FF0
.................... 
.................... 
....................    FLASH_PARAM flash_param = {0};
06854:  MOVLB  1
06856:  CLRF   xEF
06858:  CLRF   xF0
0685A:  CLRF   xF1
0685C:  CLRF   xF2
0685E:  CLRF   xF3
06860:  CLRF   xF4
06862:  CLRF   xF5
....................    flash_param.id = uplinkcmd_ptr[0];
06864:  MOVF   xED,W
06866:  MOVWF  FE9
06868:  MOVF   xEE,W
0686A:  MOVWF  FEA
0686C:  MOVFF  FEF,1EF
....................    flash_param.readaddress = -
....................       ((unsigned int32)uplinkcmd_ptr[1] << 24) |
....................       ((unsigned int32)uplinkcmd_ptr[2] << 16) |
....................       ((unsigned int32)uplinkcmd_ptr[3] << 8)  |
....................       ((unsigned int32)uplinkcmd_ptr[4]);
06870:  MOVLW  01
06872:  ADDWF  xED,W
06874:  MOVWF  FE9
06876:  MOVLW  00
06878:  ADDWFC xEE,W
0687A:  MOVWF  FEA
0687C:  MOVF   FEF,W
0687E:  MOVLB  2
06880:  CLRF   x47
06882:  CLRF   x46
06884:  CLRF   x45
06886:  MOVWF  x44
06888:  MOVFF  244,03
0688C:  CLRF   00
0688E:  CLRF   01
06890:  CLRF   02
06892:  MOVLW  00
06894:  BSF    FD8.0
06896:  SUBFWB 00,W
06898:  MOVWF  x44
0689A:  MOVLW  00
0689C:  SUBFWB 01,W
0689E:  MOVWF  x45
068A0:  MOVLW  00
068A2:  SUBFWB 02,W
068A4:  MOVWF  x46
068A6:  MOVLW  00
068A8:  SUBFWB 03,W
068AA:  MOVWF  x47
068AC:  MOVLW  02
068AE:  MOVLB  1
068B0:  ADDWF  xED,W
068B2:  MOVWF  FE9
068B4:  MOVLW  00
068B6:  ADDWFC xEE,W
068B8:  MOVWF  FEA
068BA:  MOVF   FEF,W
068BC:  MOVLB  2
068BE:  CLRF   x4C
068C0:  CLRF   x4B
068C2:  CLRF   x4A
068C4:  MOVWF  x49
068C6:  MOVFF  24A,03
068CA:  MOVFF  249,02
068CE:  CLRF   00
068D0:  CLRF   01
068D2:  MOVF   00,W
068D4:  IORWF  x44,F
068D6:  MOVF   01,W
068D8:  IORWF  x45,F
068DA:  MOVF   02,W
068DC:  IORWF  x46,F
068DE:  MOVF   03,W
068E0:  IORWF  x47,F
068E2:  MOVLW  03
068E4:  MOVLB  1
068E6:  ADDWF  xED,W
068E8:  MOVWF  FE9
068EA:  MOVLW  00
068EC:  ADDWFC xEE,W
068EE:  MOVWF  FEA
068F0:  MOVF   FEF,W
068F2:  MOVLB  2
068F4:  CLRF   x4C
068F6:  CLRF   x4B
068F8:  CLRF   x4A
068FA:  MOVWF  x49
068FC:  MOVFF  24B,03
06900:  MOVFF  24A,02
06904:  MOVFF  249,01
06908:  CLRF   00
0690A:  MOVF   00,W
0690C:  IORWF  x44,F
0690E:  MOVF   01,W
06910:  IORWF  x45,F
06912:  MOVF   02,W
06914:  IORWF  x46,F
06916:  MOVF   03,W
06918:  IORWF  x47,F
0691A:  MOVLW  04
0691C:  MOVLB  1
0691E:  ADDWF  xED,W
06920:  MOVWF  FE9
06922:  MOVLW  00
06924:  ADDWFC xEE,W
06926:  MOVWF  FEA
06928:  MOVF   FEF,W
0692A:  MOVWF  00
0692C:  CLRF   01
0692E:  CLRF   02
06930:  CLRF   03
06932:  MOVF   00,W
06934:  MOVLB  2
06936:  IORWF  x44,W
06938:  MOVLB  1
0693A:  MOVWF  xF2
0693C:  MOVF   01,W
0693E:  MOVLB  2
06940:  IORWF  x45,W
06942:  MOVLB  1
06944:  MOVWF  xF3
06946:  MOVF   02,W
06948:  MOVLB  2
0694A:  IORWF  x46,W
0694C:  MOVLB  1
0694E:  MOVWF  xF4
06950:  MOVF   03,W
06952:  MOVLB  2
06954:  IORWF  x47,W
06956:  MOVLB  1
06958:  MOVWF  xF5
....................    flash_param.readpacketnum = 
....................       ((unsigned int16)uplinkcmd_ptr[6] << 8) |
....................       ((unsigned int16)uplinkcmd_ptr[7]);
0695A:  MOVLW  06
0695C:  ADDWF  xED,W
0695E:  MOVWF  FE9
06960:  MOVLW  00
06962:  ADDWFC xEE,W
06964:  MOVWF  FEA
06966:  MOVF   FEF,W
06968:  MOVLB  2
0696A:  CLRF   x45
0696C:  MOVWF  x44
0696E:  MOVFF  244,245
06972:  CLRF   x44
06974:  MOVLW  07
06976:  MOVLB  1
06978:  ADDWF  xED,W
0697A:  MOVWF  FE9
0697C:  MOVLW  00
0697E:  ADDWFC xEE,W
06980:  MOVWF  FEA
06982:  MOVF   FEF,W
06984:  CLRF   03
06986:  MOVLB  2
06988:  IORWF  x44,W
0698A:  MOVLB  1
0698C:  MOVWF  xF0
0698E:  MOVF   03,W
06990:  MOVLB  2
06992:  IORWF  x45,W
06994:  MOVLB  1
06996:  MOVWF  xF1
....................       piclog_make(flash_param.id, PICLOG_PARAM_START); // Log the command execution
06998:  MOVFF  1EF,244
0699C:  MOVLB  2
0699E:  CLRF   x45
069A0:  MOVLB  0
069A2:  CALL   4E76
....................    fprintf(PC, "\tMODE     : %02X\r\n", flash_param.id);
069A6:  MOVLW  20
069A8:  MOVWF  FF6
069AA:  MOVLW  1B
069AC:  MOVWF  FF7
069AE:  MOVLW  00
069B0:  MOVWF  FF8
069B2:  MOVLW  0C
069B4:  MOVLB  A
069B6:  MOVWF  x0C
069B8:  MOVLB  0
069BA:  CALL   2026
069BE:  MOVFF  1EF,A26
069C2:  MOVLW  37
069C4:  MOVLB  A
069C6:  MOVWF  x27
069C8:  MOVLB  0
069CA:  CALL   2232
069CE:  MOVLW  0D
069D0:  BTFSS  FA6.6
069D2:  GOTO   69D0
069D6:  MOVLB  E
069D8:  MOVWF  xF9
069DA:  MOVLW  0A
069DC:  MOVLB  0
069DE:  BTFSS  FA6.6
069E0:  GOTO   69DE
069E4:  MOVLB  E
069E6:  MOVWF  xF9
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", flash_param.readaddress);
069E8:  MOVLW  34
069EA:  MOVWF  FF6
069EC:  MOVLW  1B
069EE:  MOVWF  FF7
069F0:  MOVLW  00
069F2:  MOVWF  FF8
069F4:  MOVLW  0E
069F6:  MOVLB  A
069F8:  MOVWF  x0C
069FA:  MOVLB  0
069FC:  CALL   2026
06A00:  MOVFF  1F5,A26
06A04:  MOVLW  37
06A06:  MOVLB  A
06A08:  MOVWF  x27
06A0A:  MOVLB  0
06A0C:  CALL   2232
06A10:  MOVFF  1F4,A26
06A14:  MOVLW  37
06A16:  MOVLB  A
06A18:  MOVWF  x27
06A1A:  MOVLB  0
06A1C:  CALL   2232
06A20:  MOVFF  1F3,A26
06A24:  MOVLW  37
06A26:  MOVLB  A
06A28:  MOVWF  x27
06A2A:  MOVLB  0
06A2C:  CALL   2232
06A30:  MOVFF  1F2,A26
06A34:  MOVLW  37
06A36:  MOVLB  A
06A38:  MOVWF  x27
06A3A:  MOVLB  0
06A3C:  CALL   2232
06A40:  MOVLW  0D
06A42:  BTFSS  FA6.6
06A44:  GOTO   6A42
06A48:  MOVLB  E
06A4A:  MOVWF  xF9
06A4C:  MOVLW  0A
06A4E:  MOVLB  0
06A50:  BTFSS  FA6.6
06A52:  GOTO   6A50
06A56:  MOVLB  E
06A58:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", flash_param.readpacketnum);
06A5A:  MOVLW  4A
06A5C:  MOVWF  FF6
06A5E:  MOVLW  1B
06A60:  MOVWF  FF7
06A62:  MOVLW  00
06A64:  MOVWF  FF8
06A66:  MOVLW  0E
06A68:  MOVLB  A
06A6A:  MOVWF  x0C
06A6C:  MOVLB  0
06A6E:  CALL   2026
06A72:  MOVFF  1F1,A26
06A76:  MOVLW  37
06A78:  MOVLB  A
06A7A:  MOVWF  x27
06A7C:  MOVLB  0
06A7E:  CALL   2232
06A82:  MOVFF  1F0,A26
06A86:  MOVLW  37
06A88:  MOVLB  A
06A8A:  MOVWF  x27
06A8C:  MOVLB  0
06A8E:  CALL   2232
06A92:  MOVLW  0D
06A94:  BTFSS  FA6.6
06A96:  GOTO   6A94
06A9A:  MOVLB  E
06A9C:  MOVWF  xF9
06A9E:  MOVLW  0A
06AA0:  MOVLB  0
06AA2:  BTFSS  FA6.6
06AA4:  GOTO   6AA2
06AA8:  MOVLB  E
06AAA:  MOVWF  xF9
....................    
....................    piclog_make(flash_param.id, 0x00);
06AAC:  MOVFF  1EF,244
06AB0:  MOVLB  2
06AB2:  CLRF   x45
06AB4:  MOVLB  0
06AB6:  CALL   4E76
....................    
.................... 
....................    unsigned int8 readdata[PACKET_SIZE] = {0x00}; // Initialize read data buffer
06ABA:  MOVLB  1
06ABC:  CLRF   xF6
06ABE:  CLRF   xF7
06AC0:  CLRF   xF8
06AC2:  CLRF   xF9
06AC4:  CLRF   xFA
06AC6:  CLRF   xFB
06AC8:  CLRF   xFC
06ACA:  CLRF   xFD
06ACC:  CLRF   xFE
06ACE:  CLRF   xFF
06AD0:  MOVLB  2
06AD2:  CLRF   x00
06AD4:  CLRF   x01
06AD6:  CLRF   x02
06AD8:  CLRF   x03
06ADA:  CLRF   x04
06ADC:  CLRF   x05
06ADE:  CLRF   x06
06AE0:  CLRF   x07
06AE2:  CLRF   x08
06AE4:  CLRF   x09
06AE6:  CLRF   x0A
06AE8:  CLRF   x0B
06AEA:  CLRF   x0C
06AEC:  CLRF   x0D
06AEE:  CLRF   x0E
06AF0:  CLRF   x0F
06AF2:  CLRF   x10
06AF4:  CLRF   x11
06AF6:  CLRF   x12
06AF8:  CLRF   x13
06AFA:  CLRF   x14
06AFC:  CLRF   x15
06AFE:  CLRF   x16
06B00:  CLRF   x17
06B02:  CLRF   x18
06B04:  CLRF   x19
06B06:  CLRF   x1A
06B08:  CLRF   x1B
06B0A:  CLRF   x1C
06B0C:  CLRF   x1D
06B0E:  CLRF   x1E
06B10:  CLRF   x1F
06B12:  CLRF   x20
06B14:  CLRF   x21
06B16:  CLRF   x22
06B18:  CLRF   x23
06B1A:  CLRF   x24
06B1C:  CLRF   x25
06B1E:  CLRF   x26
06B20:  CLRF   x27
06B22:  CLRF   x28
06B24:  CLRF   x29
06B26:  CLRF   x2A
06B28:  CLRF   x2B
06B2A:  CLRF   x2C
06B2C:  CLRF   x2D
06B2E:  CLRF   x2E
06B30:  CLRF   x2F
06B32:  CLRF   x30
06B34:  CLRF   x31
06B36:  CLRF   x32
06B38:  CLRF   x33
06B3A:  CLRF   x34
06B3C:  CLRF   x35
....................    unsigned int32 read_address;
....................    fprintf(PC, "ADDRESS  :\r\n");
06B3E:  MOVLW  60
06B40:  MOVWF  FF6
06B42:  MOVLW  1B
06B44:  MOVWF  FF7
06B46:  MOVLW  00
06B48:  MOVWF  FF8
06B4A:  MOVLB  0
06B4C:  CALL   1FF0
.................... 
....................    if(is_connect(mis_fm) == FALSE) {
06B50:  MOVFF  115,284
06B54:  MOVFF  114,283
06B58:  MOVFF  113,282
06B5C:  MOVFF  112,281
06B60:  CALL   2AF2
06B64:  MOVF   01,F
06B66:  BTFSS  FD8.2
06B68:  GOTO   6B8E
....................       fprintf(PC, "Mission Flash is not connected\r\n");
06B6C:  MOVLW  6E
06B6E:  MOVWF  FF6
06B70:  MOVLW  1B
06B72:  MOVWF  FF7
06B74:  MOVLW  00
06B76:  MOVWF  FF8
06B78:  CALL   1FF0
....................       piclog_make(flash_param.id, PICLOG_PARAM_END);
06B7C:  MOVFF  1EF,244
06B80:  MOVLB  2
06B82:  SETF   x45
06B84:  MOVLB  0
06B86:  CALL   4E76
....................       return; // FIX: 接続失敗時終了
06B8A:  GOTO   703E
....................    }
.................... 
....................    for (unsigned int32 packetcount = 0; packetcount < flash_param.readpacketnum; packetcount++){
06B8E:  MOVLB  2
06B90:  CLRF   x3D
06B92:  CLRF   x3C
06B94:  CLRF   x3B
06B96:  CLRF   x3A
06B98:  MOVLB  0
06B9A:  MOVLB  2
06B9C:  MOVF   x3D,F
06B9E:  BTFSC  FD8.2
06BA0:  BRA    6BA8
06BA2:  MOVLB  0
06BA4:  GOTO   7020
06BA8:  MOVLB  0
06BAA:  MOVLB  2
06BAC:  MOVF   x3C,F
06BAE:  BTFSC  FD8.2
06BB0:  BRA    6BB8
06BB2:  MOVLB  0
06BB4:  GOTO   7020
06BB8:  MOVLB  0
06BBA:  MOVLB  2
06BBC:  MOVF   x3B,W
06BBE:  MOVLB  1
06BC0:  SUBWF  xF1,W
06BC2:  BTFSC  FD8.0
06BC4:  BRA    6BCC
06BC6:  MOVLB  0
06BC8:  GOTO   7020
06BCC:  MOVLB  0
06BCE:  BTFSS  FD8.2
06BD0:  GOTO   6BE8
06BD4:  MOVLB  1
06BD6:  MOVF   xF0,W
06BD8:  MOVLB  2
06BDA:  SUBWF  x3A,W
06BDC:  BTFSS  FD8.0
06BDE:  BRA    6BE6
06BE0:  MOVLB  0
06BE2:  GOTO   7020
06BE6:  MOVLB  0
....................       read_address = flash_param.readaddress + packetcount * PACKET_SIZE;
06BE8:  MOVLB  2
06BEA:  RLCF   x3A,W
06BEC:  MOVWF  00
06BEE:  RLCF   x3B,W
06BF0:  MOVWF  01
06BF2:  RLCF   x3C,W
06BF4:  MOVWF  02
06BF6:  RLCF   x3D,W
06BF8:  MOVWF  03
06BFA:  RLCF   00,F
06BFC:  RLCF   01,F
06BFE:  RLCF   02,F
06C00:  RLCF   03,F
06C02:  RLCF   00,F
06C04:  RLCF   01,F
06C06:  RLCF   02,F
06C08:  RLCF   03,F
06C0A:  RLCF   00,F
06C0C:  RLCF   01,F
06C0E:  RLCF   02,F
06C10:  RLCF   03,F
06C12:  RLCF   00,F
06C14:  RLCF   01,F
06C16:  RLCF   02,F
06C18:  RLCF   03,F
06C1A:  RLCF   00,F
06C1C:  RLCF   01,F
06C1E:  RLCF   02,F
06C20:  RLCF   03,F
06C22:  MOVLW  C0
06C24:  ANDWF  00,F
06C26:  MOVF   00,W
06C28:  MOVLB  1
06C2A:  ADDWF  xF2,W
06C2C:  MOVLB  2
06C2E:  MOVWF  x36
06C30:  MOVF   01,W
06C32:  MOVLB  1
06C34:  ADDWFC xF3,W
06C36:  MOVLB  2
06C38:  MOVWF  x37
06C3A:  MOVF   02,W
06C3C:  MOVLB  1
06C3E:  ADDWFC xF4,W
06C40:  MOVLB  2
06C42:  MOVWF  x38
06C44:  MOVF   03,W
06C46:  MOVLB  1
06C48:  ADDWFC xF5,W
06C4A:  MOVLB  2
06C4C:  MOVWF  x39
....................       // fprintf(PC, "ADDRESS 0x%08LX DATA ",read_address);
....................       // 終端チェック
....................       if(read_address > MISF_END){
06C4E:  MOVF   x39,F
06C50:  BTFSC  FD8.2
06C52:  BRA    6C5A
06C54:  MOVLB  0
06C56:  GOTO   6C88
06C5A:  MOVLB  0
06C5C:  MOVLB  2
06C5E:  MOVF   x38,W
06C60:  SUBLW  BB
06C62:  BTFSS  FD8.0
06C64:  BRA    6C6C
06C66:  MOVLB  0
06C68:  GOTO   6D50
06C6C:  MOVLB  0
06C6E:  XORLW  FF
06C70:  BTFSS  FD8.2
06C72:  GOTO   6C88
06C76:  MOVLB  2
06C78:  MOVF   x37,W
06C7A:  SUBLW  0F
06C7C:  BTFSS  FD8.0
06C7E:  BRA    6C86
06C80:  MOVLB  0
06C82:  GOTO   6D50
06C86:  MOVLB  0
....................          fprintf(PC, "[FLASH] Read address 0x%08LX exceeds device end 0x%08LX -> stop\r\n", read_address, (unsigned int32)MISF_END);
06C88:  MOVLW  90
06C8A:  MOVWF  FF6
06C8C:  MOVLW  1B
06C8E:  MOVWF  FF7
06C90:  MOVLW  00
06C92:  MOVWF  FF8
06C94:  MOVLW  17
06C96:  MOVLB  A
06C98:  MOVWF  x0C
06C9A:  MOVLB  0
06C9C:  CALL   2026
06CA0:  MOVFF  239,A26
06CA4:  MOVLW  37
06CA6:  MOVLB  A
06CA8:  MOVWF  x27
06CAA:  MOVLB  0
06CAC:  CALL   2232
06CB0:  MOVFF  238,A26
06CB4:  MOVLW  37
06CB6:  MOVLB  A
06CB8:  MOVWF  x27
06CBA:  MOVLB  0
06CBC:  CALL   2232
06CC0:  MOVFF  237,A26
06CC4:  MOVLW  37
06CC6:  MOVLB  A
06CC8:  MOVWF  x27
06CCA:  MOVLB  0
06CCC:  CALL   2232
06CD0:  MOVFF  236,A26
06CD4:  MOVLW  37
06CD6:  MOVLB  A
06CD8:  MOVWF  x27
06CDA:  MOVLB  0
06CDC:  CALL   2232
06CE0:  MOVLW  AC
06CE2:  MOVWF  FF6
06CE4:  MOVLW  1B
06CE6:  MOVWF  FF7
06CE8:  MOVLW  00
06CEA:  MOVWF  FF8
06CEC:  MOVLW  16
06CEE:  MOVLB  A
06CF0:  MOVWF  x0C
06CF2:  MOVLB  0
06CF4:  CALL   2026
06CF8:  MOVLB  A
06CFA:  CLRF   x26
06CFC:  MOVLW  37
06CFE:  MOVWF  x27
06D00:  MOVLB  0
06D02:  CALL   2232
06D06:  MOVLW  BC
06D08:  MOVLB  A
06D0A:  MOVWF  x26
06D0C:  MOVLW  37
06D0E:  MOVWF  x27
06D10:  MOVLB  0
06D12:  CALL   2232
06D16:  MOVLW  0F
06D18:  MOVLB  A
06D1A:  MOVWF  x26
06D1C:  MOVLW  37
06D1E:  MOVWF  x27
06D20:  MOVLB  0
06D22:  CALL   2232
06D26:  MOVLB  A
06D28:  SETF   x26
06D2A:  MOVLW  37
06D2C:  MOVWF  x27
06D2E:  MOVLB  0
06D30:  CALL   2232
06D34:  MOVLW  C7
06D36:  MOVWF  FF6
06D38:  MOVLW  1B
06D3A:  MOVWF  FF7
06D3C:  MOVLW  00
06D3E:  MOVWF  FF8
06D40:  MOVLW  0A
06D42:  MOVLB  A
06D44:  MOVWF  x0C
06D46:  MOVLB  0
06D48:  CALL   2026
....................          break;
06D4C:  GOTO   7020
....................       }
....................       if(read_address + (PACKET_SIZE - 1) > MISF_END){
06D50:  MOVLW  3F
06D52:  MOVLB  2
06D54:  ADDWF  x36,W
06D56:  MOVWF  x44
06D58:  MOVLW  00
06D5A:  ADDWFC x37,W
06D5C:  MOVWF  x45
06D5E:  MOVLW  00
06D60:  ADDWFC x38,W
06D62:  MOVWF  x46
06D64:  MOVLW  00
06D66:  ADDWFC x39,W
06D68:  MOVWF  x47
06D6A:  MOVF   x47,F
06D6C:  BTFSC  FD8.2
06D6E:  BRA    6D76
06D70:  MOVLB  0
06D72:  GOTO   6DA4
06D76:  MOVLB  0
06D78:  MOVLB  2
06D7A:  MOVF   x46,W
06D7C:  SUBLW  BB
06D7E:  BTFSS  FD8.0
06D80:  BRA    6D88
06D82:  MOVLB  0
06D84:  GOTO   6F06
06D88:  MOVLB  0
06D8A:  XORLW  FF
06D8C:  BTFSS  FD8.2
06D8E:  GOTO   6DA4
06D92:  MOVLB  2
06D94:  MOVF   x45,W
06D96:  SUBLW  0F
06D98:  BTFSS  FD8.0
06D9A:  BRA    6DA2
06D9C:  MOVLB  0
06D9E:  GOTO   6F06
06DA2:  MOVLB  0
....................          unsigned int32 remain = (MISF_END - read_address) + 1;
06DA4:  MOVLW  FF
06DA6:  BSF    FD8.0
06DA8:  MOVLB  2
06DAA:  SUBFWB x36,W
06DAC:  MOVWF  x44
06DAE:  MOVLW  0F
06DB0:  SUBFWB x37,W
06DB2:  MOVWF  x45
06DB4:  MOVLW  BC
06DB6:  SUBFWB x38,W
06DB8:  MOVWF  x46
06DBA:  MOVLW  00
06DBC:  SUBFWB x39,W
06DBE:  MOVWF  x47
06DC0:  MOVLW  01
06DC2:  ADDWF  x44,W
06DC4:  MOVWF  x3E
06DC6:  MOVLW  00
06DC8:  ADDWFC x45,W
06DCA:  MOVWF  x3F
06DCC:  MOVLW  00
06DCE:  ADDWFC x46,W
06DD0:  MOVWF  x40
06DD2:  MOVLW  00
06DD4:  ADDWFC x47,W
06DD6:  MOVWF  x41
06DD8:  MOVLB  0
....................          fprintf(PC, "[FLASH] End reached. Partial read %lu bytes.\r\n", remain);
06DDA:  MOVLW  D2
06DDC:  MOVWF  FF6
06DDE:  MOVLW  1B
06DE0:  MOVWF  FF7
06DE2:  MOVLW  00
06DE4:  MOVWF  FF8
06DE6:  MOVLW  22
06DE8:  MOVLB  A
06DEA:  MOVWF  x0C
06DEC:  MOVLB  0
06DEE:  CALL   2026
06DF2:  MOVLW  41
06DF4:  MOVWF  FE9
06DF6:  MOVFF  241,247
06DFA:  MOVFF  240,246
06DFE:  MOVFF  23F,245
06E02:  MOVFF  23E,244
06E06:  CALL   6056
06E0A:  MOVLW  F7
06E0C:  MOVWF  FF6
06E0E:  MOVLW  1B
06E10:  MOVWF  FF7
06E12:  MOVLW  00
06E14:  MOVWF  FF8
06E16:  MOVLW  09
06E18:  MOVLB  A
06E1A:  MOVWF  x0C
06E1C:  MOVLB  0
06E1E:  CALL   2026
....................          read_data_bytes(mis_fm, read_address, readdata, remain);
06E22:  MOVFF  115,B37
06E26:  MOVFF  114,B36
06E2A:  MOVFF  113,B35
06E2E:  MOVFF  112,B34
06E32:  MOVFF  239,B3B
06E36:  MOVFF  238,B3A
06E3A:  MOVFF  237,B39
06E3E:  MOVFF  236,B38
06E42:  MOVLW  01
06E44:  MOVLB  B
06E46:  MOVWF  x3D
06E48:  MOVLW  F6
06E4A:  MOVWF  x3C
06E4C:  MOVFF  241,B41
06E50:  MOVFF  240,B40
06E54:  MOVFF  23F,B3F
06E58:  MOVFF  23E,B3E
06E5C:  MOVLB  0
06E5E:  CALL   2BDE
....................          for (unsigned int8 bytecount = 0; bytecount < remain; bytecount++)
06E62:  MOVLB  2
06E64:  CLRF   x42
06E66:  MOVLB  0
06E68:  MOVLB  2
06E6A:  MOVF   x41,F
06E6C:  BTFSC  FD8.2
06E6E:  BRA    6E76
06E70:  MOVLB  0
06E72:  GOTO   6EAA
06E76:  MOVLB  0
06E78:  MOVLB  2
06E7A:  MOVF   x40,F
06E7C:  BTFSC  FD8.2
06E7E:  BRA    6E86
06E80:  MOVLB  0
06E82:  GOTO   6EAA
06E86:  MOVLB  0
06E88:  MOVLB  2
06E8A:  MOVF   x3F,F
06E8C:  BTFSC  FD8.2
06E8E:  BRA    6E96
06E90:  MOVLB  0
06E92:  GOTO   6EAA
06E96:  MOVLB  0
06E98:  MOVLB  2
06E9A:  MOVF   x3E,W
06E9C:  SUBWF  x42,W
06E9E:  BTFSS  FD8.0
06EA0:  BRA    6EA8
06EA2:  MOVLB  0
06EA4:  GOTO   6EE6
06EA8:  MOVLB  0
....................             fprintf(PC, "%02X ", readdata[bytecount]);
06EAA:  CLRF   03
06EAC:  MOVLB  2
06EAE:  MOVF   x42,W
06EB0:  ADDLW  F6
06EB2:  MOVWF  FE9
06EB4:  MOVLW  01
06EB6:  ADDWFC 03,W
06EB8:  MOVWF  FEA
06EBA:  MOVFF  FEF,244
06EBE:  MOVFF  244,A26
06EC2:  MOVLW  37
06EC4:  MOVLB  A
06EC6:  MOVWF  x27
06EC8:  MOVLB  0
06ECA:  CALL   2232
06ECE:  MOVLW  20
06ED0:  BTFSS  FA6.6
06ED2:  GOTO   6ED0
06ED6:  MOVLB  E
06ED8:  MOVWF  xF9
06EDA:  MOVLB  0
06EDC:  MOVLB  2
06EDE:  INCF   x42,F
06EE0:  MOVLB  0
06EE2:  GOTO   6E68
....................          fprintf(PC, "\r\n");
06EE6:  MOVLW  0D
06EE8:  BTFSS  FA6.6
06EEA:  GOTO   6EE8
06EEE:  MOVLB  E
06EF0:  MOVWF  xF9
06EF2:  MOVLW  0A
06EF4:  MOVLB  0
06EF6:  BTFSS  FA6.6
06EF8:  GOTO   6EF6
06EFC:  MOVLB  E
06EFE:  MOVWF  xF9
....................          break;
06F00:  MOVLB  0
06F02:  GOTO   7020
....................       }
....................       read_data_bytes(mis_fm, read_address, readdata, PACKET_SIZE);
06F06:  MOVFF  115,B37
06F0A:  MOVFF  114,B36
06F0E:  MOVFF  113,B35
06F12:  MOVFF  112,B34
06F16:  MOVFF  239,B3B
06F1A:  MOVFF  238,B3A
06F1E:  MOVFF  237,B39
06F22:  MOVFF  236,B38
06F26:  MOVLW  01
06F28:  MOVLB  B
06F2A:  MOVWF  x3D
06F2C:  MOVLW  F6
06F2E:  MOVWF  x3C
06F30:  CLRF   x41
06F32:  CLRF   x40
06F34:  CLRF   x3F
06F36:  MOVLW  40
06F38:  MOVWF  x3E
06F3A:  MOVLB  0
06F3C:  CALL   2BDE
....................       fprintf(PC, "%08LX : ",read_address);
06F40:  MOVFF  239,A26
06F44:  MOVLW  37
06F46:  MOVLB  A
06F48:  MOVWF  x27
06F4A:  MOVLB  0
06F4C:  CALL   2232
06F50:  MOVFF  238,A26
06F54:  MOVLW  37
06F56:  MOVLB  A
06F58:  MOVWF  x27
06F5A:  MOVLB  0
06F5C:  CALL   2232
06F60:  MOVFF  237,A26
06F64:  MOVLW  37
06F66:  MOVLB  A
06F68:  MOVWF  x27
06F6A:  MOVLB  0
06F6C:  CALL   2232
06F70:  MOVFF  236,A26
06F74:  MOVLW  37
06F76:  MOVLB  A
06F78:  MOVWF  x27
06F7A:  MOVLB  0
06F7C:  CALL   2232
06F80:  MOVLW  07
06F82:  MOVWF  FF6
06F84:  MOVLW  1C
06F86:  MOVWF  FF7
06F88:  MOVLW  00
06F8A:  MOVWF  FF8
06F8C:  MOVLW  03
06F8E:  MOVLB  A
06F90:  MOVWF  x0C
06F92:  MOVLB  0
06F94:  CALL   2026
....................       for (unsigned int8 bytecount = 0; bytecount < PACKET_SIZE; bytecount++){
06F98:  MOVLB  2
06F9A:  CLRF   x43
06F9C:  MOVLB  0
06F9E:  MOVLB  2
06FA0:  MOVF   x43,W
06FA2:  SUBLW  3F
06FA4:  BTFSC  FD8.0
06FA6:  BRA    6FAE
06FA8:  MOVLB  0
06FAA:  GOTO   6FEC
06FAE:  MOVLB  0
....................          fprintf(PC,"%02X ",readdata[bytecount]);
06FB0:  CLRF   03
06FB2:  MOVLB  2
06FB4:  MOVF   x43,W
06FB6:  ADDLW  F6
06FB8:  MOVWF  FE9
06FBA:  MOVLW  01
06FBC:  ADDWFC 03,W
06FBE:  MOVWF  FEA
06FC0:  MOVFF  FEF,244
06FC4:  MOVFF  244,A26
06FC8:  MOVLW  37
06FCA:  MOVLB  A
06FCC:  MOVWF  x27
06FCE:  MOVLB  0
06FD0:  CALL   2232
06FD4:  MOVLW  20
06FD6:  BTFSS  FA6.6
06FD8:  GOTO   6FD6
06FDC:  MOVLB  E
06FDE:  MOVWF  xF9
06FE0:  MOVLB  0
06FE2:  MOVLB  2
06FE4:  INCF   x43,F
06FE6:  MOVLB  0
06FE8:  GOTO   6F9E
....................       }
....................       fprintf(PC,"\r\n");
06FEC:  MOVLW  0D
06FEE:  BTFSS  FA6.6
06FF0:  GOTO   6FEE
06FF4:  MOVLB  E
06FF6:  MOVWF  xF9
06FF8:  MOVLW  0A
06FFA:  MOVLB  0
06FFC:  BTFSS  FA6.6
06FFE:  GOTO   6FFC
07002:  MOVLB  E
07004:  MOVWF  xF9
07006:  MOVLB  0
07008:  MOVLW  01
0700A:  MOVLB  2
0700C:  ADDWF  x3A,F
0700E:  BTFSC  FD8.0
07010:  INCF   x3B,F
07012:  BTFSC  FD8.2
07014:  INCF   x3C,F
07016:  BTFSC  FD8.2
07018:  INCF   x3D,F
0701A:  MOVLB  0
0701C:  GOTO   6B9A
....................    }
....................    piclog_make(flash_param.id, PICLOG_PARAM_END); // Log the end of the command execution
07020:  MOVFF  1EF,244
07024:  MOVLB  2
07026:  SETF   x45
07028:  MOVLB  0
0702A:  CALL   4E76
....................    fprintf(PC, "End Flash Read\r\n");
0702E:  MOVLW  0C
07030:  MOVWF  FF6
07032:  MOVLW  1C
07034:  MOVWF  FF7
07036:  MOVLW  00
07038:  MOVWF  FF8
0703A:  CALL   1FF0
0703E:  GOTO   E388 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_misf_read_address(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Read Address\r\n");
07042:  MOVLW  1E
07044:  MOVWF  FF6
07046:  MOVLW  1C
07048:  MOVWF  FF7
0704A:  MOVLW  00
0704C:  MOVWF  FF8
0704E:  CALL   1FF0
....................    flash_setting(mis_fm);
07052:  MOVFF  115,2FB
07056:  MOVFF  114,2FA
0705A:  MOVFF  113,2F9
0705E:  MOVFF  112,2F8
07062:  CALL   679C
....................    unsigned int32 read_address = 0x00000000;
....................    int8 read_data[4];
07066:  MOVLB  1
07068:  CLRF   xF2
0706A:  CLRF   xF1
0706C:  CLRF   xF0
0706E:  CLRF   xEF
....................    read_data_bytes(mis_fm, read_address, read_data, 4);
07070:  MOVFF  115,B37
07074:  MOVFF  114,B36
07078:  MOVFF  113,B35
0707C:  MOVFF  112,B34
07080:  MOVFF  1F2,B3B
07084:  MOVFF  1F1,B3A
07088:  MOVFF  1F0,B39
0708C:  MOVFF  1EF,B38
07090:  MOVLW  01
07092:  MOVLB  B
07094:  MOVWF  x3D
07096:  MOVLW  F3
07098:  MOVWF  x3C
0709A:  CLRF   x41
0709C:  CLRF   x40
0709E:  CLRF   x3F
070A0:  MOVLW  04
070A2:  MOVWF  x3E
070A4:  MOVLB  0
070A6:  CALL   2BDE
....................    fprintf(PC, "Read Data: %02X %02X %02X %02X\r\n", read_data[0], read_data[1], read_data[2], read_data[3]);
070AA:  MOVLW  3A
070AC:  MOVWF  FF6
070AE:  MOVLW  1C
070B0:  MOVWF  FF7
070B2:  MOVLW  00
070B4:  MOVWF  FF8
070B6:  MOVLW  0B
070B8:  MOVLB  A
070BA:  MOVWF  x0C
070BC:  MOVLB  0
070BE:  CALL   2026
070C2:  MOVFF  1F3,A26
070C6:  MOVLW  37
070C8:  MOVLB  A
070CA:  MOVWF  x27
070CC:  MOVLB  0
070CE:  CALL   2232
070D2:  MOVLW  20
070D4:  BTFSS  FA6.6
070D6:  GOTO   70D4
070DA:  MOVLB  E
070DC:  MOVWF  xF9
070DE:  MOVFF  1F4,A26
070E2:  MOVLW  37
070E4:  MOVLB  A
070E6:  MOVWF  x27
070E8:  MOVLB  0
070EA:  CALL   2232
070EE:  MOVLW  20
070F0:  BTFSS  FA6.6
070F2:  GOTO   70F0
070F6:  MOVLB  E
070F8:  MOVWF  xF9
070FA:  MOVFF  1F5,A26
070FE:  MOVLW  37
07100:  MOVLB  A
07102:  MOVWF  x27
07104:  MOVLB  0
07106:  CALL   2232
0710A:  MOVLW  20
0710C:  BTFSS  FA6.6
0710E:  GOTO   710C
07112:  MOVLB  E
07114:  MOVWF  xF9
07116:  MOVFF  1F6,A26
0711A:  MOVLW  37
0711C:  MOVLB  A
0711E:  MOVWF  x27
07120:  MOVLB  0
07122:  CALL   2232
07126:  MOVLW  0D
07128:  BTFSS  FA6.6
0712A:  GOTO   7128
0712E:  MOVLB  E
07130:  MOVWF  xF9
07132:  MOVLW  0A
07134:  MOVLB  0
07136:  BTFSS  FA6.6
07138:  GOTO   7136
0713C:  MOVLB  E
0713E:  MOVWF  xF9
....................    fprintf(PC, "End Flash Read Address\r\n");
07140:  MOVLW  5C
07142:  MOVWF  FF6
07144:  MOVLW  1C
07146:  MOVWF  FF7
07148:  MOVLW  00
0714A:  MOVWF  FF8
0714C:  MOVLB  0
0714E:  CALL   1FF0
07152:  GOTO   E398 (RETURN)
.................... }
.................... 
.................... void mode_misf_erase_and_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Erase and Reset\r\n");
*
0734A:  MOVLW  76
0734C:  MOVWF  FF6
0734E:  MOVLW  1C
07350:  MOVWF  FF7
07352:  MOVLW  00
07354:  MOVWF  FF8
07356:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
0735A:  MOVLB  1
0735C:  MOVF   xED,W
0735E:  MOVWF  FE9
07360:  MOVF   xEE,W
07362:  MOVWF  FEA
07364:  MOVFF  FEF,1EF
07368:  MOVFF  1EF,244
0736C:  MOVLB  2
0736E:  CLRF   x45
07370:  MOVLB  0
07372:  CALL   4E76
.................... 
....................    mode_misf_erase_all(parameter); // Erase all flash memory
07376:  MOVFF  1EE,1F0
0737A:  MOVFF  1ED,1EF
0737E:  CALL   59FA
....................    mode_misf_address_reset(parameter); // Reset the address area
07382:  MOVFF  1EE,1F0
07386:  MOVFF  1ED,1EF
0738A:  GOTO   7156
.................... 
....................    fprintf(PC, "End Flash Erase and Reset\r\n");
0738E:  MOVLW  94
07390:  MOVWF  FF6
07392:  MOVLW  1C
07394:  MOVWF  FF7
07396:  MOVLW  00
07398:  MOVWF  FF8
0739A:  CALL   1FF0
0739E:  GOTO   E3A8 (RETURN)
.................... }
.................... // ========================== SMF Command ============================
.................... void mode_smf_copy(int8 parameter[])
.................... {
....................    printf("Start Flash SMF Copy\r\n");
073A2:  MOVLW  B0
073A4:  MOVWF  FF6
073A6:  MOVLW  1C
073A8:  MOVWF  FF7
073AA:  MOVLW  00
073AC:  MOVWF  FF8
073AE:  CALL   1FF0
....................    flash_setting(mis_fm);
073B2:  MOVFF  115,2FB
073B6:  MOVFF  114,2FA
073BA:  MOVFF  113,2F9
073BE:  MOVFF  112,2F8
073C2:  CALL   679C
....................    flash_setting(smf);
073C6:  MOVFF  119,2FB
073CA:  MOVFF  118,2FA
073CE:  MOVFF  117,2F9
073D2:  MOVFF  116,2F8
073D6:  CALL   679C
....................    
....................    // 統合管理システムを使用したコピー操作
....................    int8 mission_id = parameter[0];
....................    
....................    // 未コピーデータの自動転送をキューに追加
....................    //enqueue_auto_transfer(mission_id);
....................    
....................    // Example copy operation with integration system
....................    int32 src_address = 0x00000000;
....................    int32 dest_address = 0x00001000; // Example destination address
....................    int8 read_data[256];
073DA:  MOVLB  1
073DC:  MOVF   xED,W
073DE:  MOVWF  FE9
073E0:  MOVF   xEE,W
073E2:  MOVWF  FEA
073E4:  MOVFF  FEF,1EF
073E8:  CLRF   xF3
073EA:  CLRF   xF2
073EC:  CLRF   xF1
073EE:  CLRF   xF0
073F0:  CLRF   xF7
073F2:  CLRF   xF6
073F4:  MOVLW  10
073F6:  MOVWF  xF5
073F8:  CLRF   xF4
....................    read_data_bytes(mis_fm, src_address, read_data, 256);
073FA:  MOVFF  115,B37
073FE:  MOVFF  114,B36
07402:  MOVFF  113,B35
07406:  MOVFF  112,B34
0740A:  MOVFF  1F3,B3B
0740E:  MOVFF  1F2,B3A
07412:  MOVFF  1F1,B39
07416:  MOVFF  1F0,B38
0741A:  MOVLW  01
0741C:  MOVLB  B
0741E:  MOVWF  x3D
07420:  MOVLW  F8
07422:  MOVWF  x3C
07424:  CLRF   x41
07426:  CLRF   x40
07428:  MOVLW  01
0742A:  MOVWF  x3F
0742C:  CLRF   x3E
0742E:  MOVLB  0
07430:  CALL   2BDE
....................    write_data_bytes(smf, dest_address, read_data, 256);
07434:  MOVFF  119,B37
07438:  MOVFF  118,B36
0743C:  MOVFF  117,B35
07440:  MOVFF  116,B34
07444:  MOVFF  1F7,B3B
07448:  MOVFF  1F6,B3A
0744C:  MOVFF  1F5,B39
07450:  MOVFF  1F4,B38
07454:  MOVLW  01
07456:  MOVLB  B
07458:  MOVWF  x3D
0745A:  MOVLW  F8
0745C:  MOVWF  x3C
0745E:  MOVLW  01
07460:  MOVWF  x3F
07462:  CLRF   x3E
07464:  MOVLB  0
07466:  CALL   3C3E
....................    
....................    // 転送完了後のカウンタ更新
....................    //complete_transfer_and_update_counter(mission_id, 256);
....................    
....................    printf("End Flash SMF Copy\r\n");
0746A:  MOVLW  C8
0746C:  MOVWF  FF6
0746E:  MOVLW  1C
07470:  MOVWF  FF7
07472:  MOVLW  00
07474:  MOVWF  FF8
07476:  CALL   1FF0
0747A:  GOTO   E3B8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_read(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Read\r\n");
0747E:  MOVLW  DE
07480:  MOVWF  FF6
07482:  MOVLW  1C
07484:  MOVWF  FF7
07486:  MOVLW  00
07488:  MOVWF  FF8
0748A:  CALL   1FF0
....................    unsigned int32 read_address = 
....................       ((unsigned int32)parameter[1] << 24) |
....................       ((unsigned int32)parameter[2] << 16) |
....................       ((unsigned int32)parameter[3] << 8)  |
....................       ((unsigned int32)parameter[4]);
....................    unsigned int16 read_packetnum = 
....................       ((unsigned int16)parameter[6] << 8) |
....................       ((unsigned int16)parameter[7]);
....................    
....................    unsigned int8 read_data[PACKET_SIZE];
0748E:  MOVLW  01
07490:  MOVLB  1
07492:  ADDWF  xED,W
07494:  MOVWF  FE9
07496:  MOVLW  00
07498:  ADDWFC xEE,W
0749A:  MOVWF  FEA
0749C:  MOVF   FEF,W
0749E:  MOVLB  2
074A0:  CLRF   x39
074A2:  CLRF   x38
074A4:  CLRF   x37
074A6:  MOVWF  x36
074A8:  MOVFF  236,239
074AC:  CLRF   x36
074AE:  CLRF   x37
074B0:  CLRF   x38
074B2:  MOVLW  02
074B4:  MOVLB  1
074B6:  ADDWF  xED,W
074B8:  MOVWF  FE9
074BA:  MOVLW  00
074BC:  ADDWFC xEE,W
074BE:  MOVWF  FEA
074C0:  MOVF   FEF,W
074C2:  MOVLB  2
074C4:  CLRF   x3E
074C6:  CLRF   x3D
074C8:  CLRF   x3C
074CA:  MOVWF  x3B
074CC:  MOVFF  23C,03
074D0:  MOVFF  23B,02
074D4:  CLRF   00
074D6:  CLRF   01
074D8:  MOVF   00,W
074DA:  IORWF  x36,F
074DC:  MOVF   01,W
074DE:  IORWF  x37,F
074E0:  MOVF   02,W
074E2:  IORWF  x38,F
074E4:  MOVF   03,W
074E6:  IORWF  x39,F
074E8:  MOVLW  03
074EA:  MOVLB  1
074EC:  ADDWF  xED,W
074EE:  MOVWF  FE9
074F0:  MOVLW  00
074F2:  ADDWFC xEE,W
074F4:  MOVWF  FEA
074F6:  MOVF   FEF,W
074F8:  MOVLB  2
074FA:  CLRF   x3E
074FC:  CLRF   x3D
074FE:  CLRF   x3C
07500:  MOVWF  x3B
07502:  MOVFF  23D,03
07506:  MOVFF  23C,02
0750A:  MOVFF  23B,01
0750E:  CLRF   00
07510:  MOVF   00,W
07512:  IORWF  x36,F
07514:  MOVF   01,W
07516:  IORWF  x37,F
07518:  MOVF   02,W
0751A:  IORWF  x38,F
0751C:  MOVF   03,W
0751E:  IORWF  x39,F
07520:  MOVLW  04
07522:  MOVLB  1
07524:  ADDWF  xED,W
07526:  MOVWF  FE9
07528:  MOVLW  00
0752A:  ADDWFC xEE,W
0752C:  MOVWF  FEA
0752E:  MOVF   FEF,W
07530:  MOVWF  00
07532:  CLRF   01
07534:  CLRF   02
07536:  CLRF   03
07538:  MOVF   00,W
0753A:  MOVLB  2
0753C:  IORWF  x36,W
0753E:  MOVLB  1
07540:  MOVWF  xEF
07542:  MOVF   01,W
07544:  MOVLB  2
07546:  IORWF  x37,W
07548:  MOVLB  1
0754A:  MOVWF  xF0
0754C:  MOVF   02,W
0754E:  MOVLB  2
07550:  IORWF  x38,W
07552:  MOVLB  1
07554:  MOVWF  xF1
07556:  MOVF   03,W
07558:  MOVLB  2
0755A:  IORWF  x39,W
0755C:  MOVLB  1
0755E:  MOVWF  xF2
07560:  MOVLW  06
07562:  ADDWF  xED,W
07564:  MOVWF  FE9
07566:  MOVLW  00
07568:  ADDWFC xEE,W
0756A:  MOVWF  FEA
0756C:  MOVF   FEF,W
0756E:  MOVLB  2
07570:  CLRF   x37
07572:  MOVWF  x36
07574:  MOVFF  236,237
07578:  CLRF   x36
0757A:  MOVLW  07
0757C:  MOVLB  1
0757E:  ADDWF  xED,W
07580:  MOVWF  FE9
07582:  MOVLW  00
07584:  ADDWFC xEE,W
07586:  MOVWF  FEA
07588:  MOVF   FEF,W
0758A:  CLRF   03
0758C:  MOVLB  2
0758E:  IORWF  x36,W
07590:  MOVLB  1
07592:  MOVWF  xF3
07594:  MOVF   03,W
07596:  MOVLB  2
07598:  IORWF  x37,W
0759A:  MOVLB  1
0759C:  MOVWF  xF4
.................... 
....................    fprintf(PC, "\tAddress  : 0x%08LX\r\n", read_address);
0759E:  MOVLW  F6
075A0:  MOVWF  FF6
075A2:  MOVLW  1C
075A4:  MOVWF  FF7
075A6:  MOVLW  00
075A8:  MOVWF  FF8
075AA:  MOVLW  0E
075AC:  MOVLB  A
075AE:  MOVWF  x0C
075B0:  MOVLB  0
075B2:  CALL   2026
075B6:  MOVFF  1F2,A26
075BA:  MOVLW  37
075BC:  MOVLB  A
075BE:  MOVWF  x27
075C0:  MOVLB  0
075C2:  CALL   2232
075C6:  MOVFF  1F1,A26
075CA:  MOVLW  37
075CC:  MOVLB  A
075CE:  MOVWF  x27
075D0:  MOVLB  0
075D2:  CALL   2232
075D6:  MOVFF  1F0,A26
075DA:  MOVLW  37
075DC:  MOVLB  A
075DE:  MOVWF  x27
075E0:  MOVLB  0
075E2:  CALL   2232
075E6:  MOVFF  1EF,A26
075EA:  MOVLW  37
075EC:  MOVLB  A
075EE:  MOVWF  x27
075F0:  MOVLB  0
075F2:  CALL   2232
075F6:  MOVLW  0D
075F8:  BTFSS  FA6.6
075FA:  GOTO   75F8
075FE:  MOVLB  E
07600:  MOVWF  xF9
07602:  MOVLW  0A
07604:  MOVLB  0
07606:  BTFSS  FA6.6
07608:  GOTO   7606
0760C:  MOVLB  E
0760E:  MOVWF  xF9
....................    fprintf(PC, "\tPacketNum: 0x%04LX\r\n", read_packetnum);
07610:  MOVLW  0C
07612:  MOVWF  FF6
07614:  MOVLW  1D
07616:  MOVWF  FF7
07618:  MOVLW  00
0761A:  MOVWF  FF8
0761C:  MOVLW  0E
0761E:  MOVLB  A
07620:  MOVWF  x0C
07622:  MOVLB  0
07624:  CALL   2026
07628:  MOVFF  1F4,A26
0762C:  MOVLW  37
0762E:  MOVLB  A
07630:  MOVWF  x27
07632:  MOVLB  0
07634:  CALL   2232
07638:  MOVFF  1F3,A26
0763C:  MOVLW  37
0763E:  MOVLB  A
07640:  MOVWF  x27
07642:  MOVLB  0
07644:  CALL   2232
07648:  MOVLW  0D
0764A:  BTFSS  FA6.6
0764C:  GOTO   764A
07650:  MOVLB  E
07652:  MOVWF  xF9
07654:  MOVLW  0A
07656:  MOVLB  0
07658:  BTFSS  FA6.6
0765A:  GOTO   7658
0765E:  MOVLB  E
07660:  MOVWF  xF9
....................    fprintf(PC, "Read Data\r\n");
07662:  MOVLW  22
07664:  MOVWF  FF6
07666:  MOVLW  1D
07668:  MOVWF  FF7
0766A:  MOVLW  00
0766C:  MOVWF  FF8
0766E:  MOVLB  0
07670:  CALL   1FF0
.................... 
....................    while (read_packetnum > 0) {
07674:  MOVLB  1
07676:  MOVF   xF3,F
07678:  BTFSC  FD8.2
0767A:  BRA    7682
0767C:  MOVLB  0
0767E:  GOTO   7694
07682:  MOVLB  0
07684:  MOVLB  1
07686:  MOVF   xF4,F
07688:  BTFSS  FD8.2
0768A:  BRA    7692
0768C:  MOVLB  0
0768E:  GOTO   775C
07692:  MOVLB  0
....................       read_data_bytes(smf, read_address, read_data, PACKET_SIZE);
07694:  MOVFF  119,B37
07698:  MOVFF  118,B36
0769C:  MOVFF  117,B35
076A0:  MOVFF  116,B34
076A4:  MOVFF  1F2,B3B
076A8:  MOVFF  1F1,B3A
076AC:  MOVFF  1F0,B39
076B0:  MOVFF  1EF,B38
076B4:  MOVLW  01
076B6:  MOVLB  B
076B8:  MOVWF  x3D
076BA:  MOVLW  F5
076BC:  MOVWF  x3C
076BE:  CLRF   x41
076C0:  CLRF   x40
076C2:  CLRF   x3F
076C4:  MOVLW  40
076C6:  MOVWF  x3E
076C8:  MOVLB  0
076CA:  CALL   2BDE
.................... 
....................       for (int i = 0; i < PACKET_SIZE; i++) {
076CE:  MOVLB  2
076D0:  CLRF   x35
076D2:  MOVLB  0
076D4:  MOVLB  2
076D6:  MOVF   x35,W
076D8:  SUBLW  3F
076DA:  BTFSC  FD8.0
076DC:  BRA    76E4
076DE:  MOVLB  0
076E0:  GOTO   7722
076E4:  MOVLB  0
....................          fprintf(PC, "%02X ", read_data[i]);
076E6:  CLRF   03
076E8:  MOVLB  2
076EA:  MOVF   x35,W
076EC:  ADDLW  F5
076EE:  MOVWF  FE9
076F0:  MOVLW  01
076F2:  ADDWFC 03,W
076F4:  MOVWF  FEA
076F6:  MOVFF  FEF,236
076FA:  MOVFF  236,A26
076FE:  MOVLW  37
07700:  MOVLB  A
07702:  MOVWF  x27
07704:  MOVLB  0
07706:  CALL   2232
0770A:  MOVLW  20
0770C:  BTFSS  FA6.6
0770E:  GOTO   770C
07712:  MOVLB  E
07714:  MOVWF  xF9
07716:  MOVLB  0
07718:  MOVLB  2
0771A:  INCF   x35,F
0771C:  MOVLB  0
0771E:  GOTO   76D4
....................       }
....................       fprintf(PC, "\r\n");
07722:  MOVLW  0D
07724:  BTFSS  FA6.6
07726:  GOTO   7724
0772A:  MOVLB  E
0772C:  MOVWF  xF9
0772E:  MOVLW  0A
07730:  MOVLB  0
07732:  BTFSS  FA6.6
07734:  GOTO   7732
07738:  MOVLB  E
0773A:  MOVWF  xF9
....................       read_address += PACKET_SIZE;
0773C:  MOVLW  40
0773E:  MOVLB  1
07740:  ADDWF  xEF,F
07742:  MOVLW  00
07744:  ADDWFC xF0,F
07746:  MOVLW  00
07748:  ADDWFC xF1,F
0774A:  MOVLW  00
0774C:  ADDWFC xF2,F
....................       read_packetnum--;
0774E:  MOVF   xF3,W
07750:  BTFSC  FD8.2
07752:  DECF   xF4,F
07754:  DECF   xF3,F
07756:  MOVLB  0
07758:  GOTO   7674
....................    }
....................    fprintf(PC, "\r\nEnd Flash SMF Read\r\n");
0775C:  MOVLW  2E
0775E:  MOVWF  FF6
07760:  MOVLW  1D
07762:  MOVWF  FF7
07764:  MOVLW  00
07766:  MOVWF  FF8
07768:  CALL   1FF0
0776C:  GOTO   E3C8 (RETURN)
.................... }
.................... 
.................... 
.................... void mode_smf_erase(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash SMF Erase\r\n");
07770:  MOVLW  46
07772:  MOVWF  FF6
07774:  MOVLW  1D
07776:  MOVWF  FF7
07778:  MOVLW  00
0777A:  MOVWF  FF8
0777C:  CALL   1FF0
....................    flash_setting(smf);
07780:  MOVFF  119,2FB
07784:  MOVFF  118,2FA
07788:  MOVFF  117,2F9
0778C:  MOVFF  116,2F8
07790:  CALL   679C
....................    unsigned int32 erase_address = 0x00000000; // Example address
07794:  MOVLB  1
07796:  CLRF   xF2
07798:  CLRF   xF1
0779A:  CLRF   xF0
0779C:  CLRF   xEF
....................    sector_erase(smf, erase_address); // Erase the sector
0779E:  MOVFF  119,236
077A2:  MOVFF  118,235
077A6:  MOVFF  117,234
077AA:  MOVFF  116,233
077AE:  MOVFF  1F2,23A
077B2:  MOVFF  1F1,239
077B6:  MOVFF  1F0,238
077BA:  MOVFF  1EF,237
077BE:  MOVLB  0
077C0:  CALL   569E
....................    fprintf(PC, "End Flash SMF Erase\r\n");
077C4:  MOVLW  5E
077C6:  MOVWF  FF6
077C8:  MOVLW  1D
077CA:  MOVWF  FF7
077CC:  MOVLW  00
077CE:  MOVWF  FF8
077D0:  CALL   1FF0
077D4:  GOTO   E3D8 (RETURN)
.................... }  
.................... 
.................... void mode_misf_address_reset(unsigned int8 parameter[])
.................... {
....................    fprintf(PC, "Start Flash Address Reset\r\n");
*
07156:  MOVLW  74
07158:  MOVWF  FF6
0715A:  MOVLW  1D
0715C:  MOVWF  FF7
0715E:  MOVLW  00
07160:  MOVWF  FF8
07162:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); 
07166:  MOVLB  1
07168:  MOVF   xEF,W
0716A:  MOVWF  FE9
0716C:  MOVF   xF0,W
0716E:  MOVWF  FEA
07170:  MOVFF  FEF,233
07174:  MOVFF  233,244
07178:  MOVLB  2
0717A:  CLRF   x45
0717C:  MOVLB  0
0717E:  CALL   4E76
....................    FlashData_t flash_data;
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07182:  MOVLW  01
07184:  MOVWF  FEA
07186:  MOVLW  F1
07188:  MOVWF  FE9
0718A:  CLRF   00
0718C:  CLRF   02
0718E:  MOVLW  40
07190:  MOVWF  01
07192:  CALL   2BBA
....................    /*
....................    for (int i = 0; i < PACKET_SIZE; i++) {
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
....................    }
....................    */
....................    fprintf(PC, "\r\n");
07196:  MOVLW  0D
07198:  BTFSS  FA6.6
0719A:  GOTO   7198
0719E:  MOVLB  E
071A0:  MOVWF  xF9
071A2:  MOVLW  0A
071A4:  MOVLB  0
071A6:  BTFSS  FA6.6
071A8:  GOTO   71A6
071AC:  MOVLB  E
071AE:  MOVWF  xF9
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
071B0:  MOVLW  01
071B2:  MOVLB  B
071B4:  MOVWF  x35
071B6:  MOVLW  F1
071B8:  MOVWF  x34
071BA:  MOVLW  3F
071BC:  MOVWF  x36
071BE:  MOVLB  0
071C0:  CALL   2DF2
071C4:  MOVFF  01,230
....................    for (int i = 0; i < PACKET_SIZE; i++) {
071C8:  MOVLB  2
071CA:  CLRF   x31
071CC:  MOVLB  0
071CE:  MOVLB  2
071D0:  MOVF   x31,W
071D2:  SUBLW  3F
071D4:  BTFSC  FD8.0
071D6:  BRA    71DE
071D8:  MOVLB  0
071DA:  GOTO   721C
071DE:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
071E0:  CLRF   03
071E2:  MOVLB  2
071E4:  MOVF   x31,W
071E6:  ADDLW  F1
071E8:  MOVWF  FE9
071EA:  MOVLW  01
071EC:  ADDWFC 03,W
071EE:  MOVWF  FEA
071F0:  MOVFF  FEF,233
071F4:  MOVFF  233,A26
071F8:  MOVLW  37
071FA:  MOVLB  A
071FC:  MOVWF  x27
071FE:  MOVLB  0
07200:  CALL   2232
07204:  MOVLW  20
07206:  BTFSS  FA6.6
07208:  GOTO   7206
0720C:  MOVLB  E
0720E:  MOVWF  xF9
07210:  MOVLB  0
07212:  MOVLB  2
07214:  INCF   x31,F
07216:  MOVLB  0
07218:  GOTO   71CE
....................    }
....................    fprintf(PC, "\r\n");
0721C:  MOVLW  0D
0721E:  BTFSS  FA6.6
07220:  GOTO   721E
07224:  MOVLB  E
07226:  MOVWF  xF9
07228:  MOVLW  0A
0722A:  MOVLB  0
0722C:  BTFSS  FA6.6
0722E:  GOTO   722C
07232:  MOVLB  E
07234:  MOVWF  xF9
....................    write_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07236:  MOVFF  115,B37
0723A:  MOVFF  114,B36
0723E:  MOVFF  113,B35
07242:  MOVFF  112,B34
07246:  MOVLB  B
07248:  CLRF   x3B
0724A:  CLRF   x3A
0724C:  CLRF   x39
0724E:  CLRF   x38
07250:  MOVLW  01
07252:  MOVWF  x3D
07254:  MOVLW  F1
07256:  MOVWF  x3C
07258:  CLRF   x3F
0725A:  MOVLW  40
0725C:  MOVWF  x3E
0725E:  MOVLB  0
07260:  CALL   3C3E
....................    memset(flash_data.bytes, 0, PACKET_SIZE);
07264:  MOVLW  01
07266:  MOVWF  FEA
07268:  MOVLW  F1
0726A:  MOVWF  FE9
0726C:  CLRF   00
0726E:  CLRF   02
07270:  MOVLW  40
07272:  MOVWF  01
07274:  CALL   2BBA
....................    read_data_bytes(mis_fm, MISF_CIGS_DATA_TABLE_START, flash_data.bytes, PACKET_SIZE);
07278:  MOVFF  115,B37
0727C:  MOVFF  114,B36
07280:  MOVFF  113,B35
07284:  MOVFF  112,B34
07288:  MOVLB  B
0728A:  CLRF   x3B
0728C:  CLRF   x3A
0728E:  CLRF   x39
07290:  CLRF   x38
07292:  MOVLW  01
07294:  MOVWF  x3D
07296:  MOVLW  F1
07298:  MOVWF  x3C
0729A:  CLRF   x41
0729C:  CLRF   x40
0729E:  CLRF   x3F
072A0:  MOVLW  40
072A2:  MOVWF  x3E
072A4:  MOVLB  0
072A6:  CALL   2BDE
....................    flash_data.packet.crc = calc_crc8(flash_data.bytes, PACKET_SIZE-1);
072AA:  MOVLW  01
072AC:  MOVLB  B
072AE:  MOVWF  x35
072B0:  MOVLW  F1
072B2:  MOVWF  x34
072B4:  MOVLW  3F
072B6:  MOVWF  x36
072B8:  MOVLB  0
072BA:  CALL   2DF2
072BE:  MOVFF  01,230
....................    for (int i = 0; i < PACKET_SIZE; i++) {
072C2:  MOVLB  2
072C4:  CLRF   x32
072C6:  MOVLB  0
072C8:  MOVLB  2
072CA:  MOVF   x32,W
072CC:  SUBLW  3F
072CE:  BTFSC  FD8.0
072D0:  BRA    72D8
072D2:  MOVLB  0
072D4:  GOTO   7316
072D8:  MOVLB  0
....................       fprintf(PC, "%02X ", flash_data.bytes[i]);
072DA:  CLRF   03
072DC:  MOVLB  2
072DE:  MOVF   x32,W
072E0:  ADDLW  F1
072E2:  MOVWF  FE9
072E4:  MOVLW  01
072E6:  ADDWFC 03,W
072E8:  MOVWF  FEA
072EA:  MOVFF  FEF,233
072EE:  MOVFF  233,A26
072F2:  MOVLW  37
072F4:  MOVLB  A
072F6:  MOVWF  x27
072F8:  MOVLB  0
072FA:  CALL   2232
072FE:  MOVLW  20
07300:  BTFSS  FA6.6
07302:  GOTO   7300
07306:  MOVLB  E
07308:  MOVWF  xF9
0730A:  MOVLB  0
0730C:  MOVLB  2
0730E:  INCF   x32,F
07310:  MOVLB  0
07312:  GOTO   72C8
....................    }
....................    misf_init(); // Update the address area after writing
07316:  CALL   3668
.................... 
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
0731A:  MOVLB  1
0731C:  MOVF   xEF,W
0731E:  MOVWF  FE9
07320:  MOVF   xF0,W
07322:  MOVWF  FEA
07324:  MOVFF  FEF,233
07328:  MOVFF  233,244
0732C:  MOVLB  2
0732E:  SETF   x45
07330:  MOVLB  0
07332:  CALL   4E76
....................    fprintf(PC, "End Flash Address Reset\r\n");
07336:  MOVLW  90
07338:  MOVWF  FF6
0733A:  MOVLW  1D
0733C:  MOVWF  FF7
0733E:  MOVLW  00
07340:  MOVWF  FF8
07342:  CALL   1FF0
07346:  GOTO   738E (RETURN)
.................... }
.................... 
.................... // ---------- SMF Command Functions ----------
.................... void mode_smf_read_force(int8 parameter[])
*
07AD8:  MOVLW  01
07ADA:  MOVLB  1
07ADC:  ADDWF  xED,W
07ADE:  MOVWF  FE9
07AE0:  MOVLW  00
07AE2:  ADDWFC xEE,W
07AE4:  MOVWF  FEA
07AE6:  MOVF   FEF,W
07AE8:  MOVLB  2
07AEA:  CLRF   x3F
07AEC:  CLRF   x3E
07AEE:  CLRF   x3D
07AF0:  MOVWF  x3C
07AF2:  MOVFF  23C,23F
07AF6:  CLRF   x3C
07AF8:  CLRF   x3D
07AFA:  CLRF   x3E
07AFC:  MOVLW  02
07AFE:  MOVLB  1
07B00:  ADDWF  xED,W
07B02:  MOVWF  FE9
07B04:  MOVLW  00
07B06:  ADDWFC xEE,W
07B08:  MOVWF  FEA
07B0A:  MOVF   FEF,W
07B0C:  MOVLB  2
07B0E:  CLRF   x44
07B10:  CLRF   x43
07B12:  CLRF   x42
07B14:  MOVWF  x41
07B16:  MOVFF  242,03
07B1A:  MOVFF  241,02
07B1E:  CLRF   00
07B20:  CLRF   01
07B22:  MOVF   00,W
07B24:  IORWF  x3C,F
07B26:  MOVF   01,W
07B28:  IORWF  x3D,F
07B2A:  MOVF   02,W
07B2C:  IORWF  x3E,F
07B2E:  MOVF   03,W
07B30:  IORWF  x3F,F
07B32:  MOVLW  03
07B34:  MOVLB  1
07B36:  ADDWF  xED,W
07B38:  MOVWF  FE9
07B3A:  MOVLW  00
07B3C:  ADDWFC xEE,W
07B3E:  MOVWF  FEA
07B40:  MOVF   FEF,W
07B42:  MOVLB  2
07B44:  CLRF   x44
07B46:  CLRF   x43
07B48:  CLRF   x42
07B4A:  MOVWF  x41
07B4C:  MOVFF  243,03
07B50:  MOVFF  242,02
07B54:  MOVFF  241,01
07B58:  CLRF   00
07B5A:  MOVF   00,W
07B5C:  IORWF  x3C,F
07B5E:  MOVF   01,W
07B60:  IORWF  x3D,F
07B62:  MOVF   02,W
07B64:  IORWF  x3E,F
07B66:  MOVF   03,W
07B68:  IORWF  x3F,F
07B6A:  MOVLW  04
07B6C:  MOVLB  1
07B6E:  ADDWF  xED,W
07B70:  MOVWF  FE9
07B72:  MOVLW  00
07B74:  ADDWFC xEE,W
07B76:  MOVWF  FEA
07B78:  MOVF   FEF,W
07B7A:  MOVWF  00
07B7C:  CLRF   01
07B7E:  CLRF   02
07B80:  CLRF   03
07B82:  MOVF   00,W
07B84:  MOVLB  2
07B86:  IORWF  x3C,W
07B88:  MOVLB  1
07B8A:  MOVWF  xEF
07B8C:  MOVF   01,W
07B8E:  MOVLB  2
07B90:  IORWF  x3D,W
07B92:  MOVLB  1
07B94:  MOVWF  xF0
07B96:  MOVF   02,W
07B98:  MOVLB  2
07B9A:  IORWF  x3E,W
07B9C:  MOVLB  1
07B9E:  MOVWF  xF1
07BA0:  MOVF   03,W
07BA2:  MOVLB  2
07BA4:  IORWF  x3F,W
07BA6:  MOVLB  1
07BA8:  MOVWF  xF2
07BAA:  MOVLW  07
07BAC:  ADDWF  xED,W
07BAE:  MOVWF  FE9
07BB0:  MOVLW  00
07BB2:  ADDWFC xEE,W
07BB4:  MOVWF  FEA
07BB6:  MOVF   FEF,W
07BB8:  MOVLB  2
07BBA:  CLRF   x3D
07BBC:  MOVWF  x3C
07BBE:  MOVFF  23C,23D
07BC2:  CLRF   x3C
07BC4:  MOVLW  08
07BC6:  MOVLB  1
07BC8:  ADDWF  xED,W
07BCA:  MOVWF  FE9
07BCC:  MOVLW  00
07BCE:  ADDWFC xEE,W
07BD0:  MOVWF  FEA
07BD2:  MOVF   FEF,W
07BD4:  CLRF   03
07BD6:  MOVLB  2
07BD8:  IORWF  x3C,W
07BDA:  MOVLB  1
07BDC:  MOVWF  xF3
07BDE:  MOVF   03,W
07BE0:  MOVLB  2
07BE2:  IORWF  x3D,W
07BE4:  MOVLB  1
07BE6:  MOVWF  xF4
.................... {
....................    int32 address = 
....................       ((int32)parameter[1] << 24) |
....................       ((int32)parameter[2] << 16) |
....................       ((int32)parameter[3] << 8)  |
....................       ((int32)parameter[4]);
....................    
....................    int16 packet_num = 
....................       ((int16)parameter[7] << 8) |
....................       ((int16)parameter[8]);
....................       
....................    int8 read_data[PACKET_SIZE] = {0x00}; // Initialize read data buffer
07BE8:  CLRF   xF5
07BEA:  CLRF   xF6
07BEC:  CLRF   xF7
07BEE:  CLRF   xF8
07BF0:  CLRF   xF9
07BF2:  CLRF   xFA
07BF4:  CLRF   xFB
07BF6:  CLRF   xFC
07BF8:  CLRF   xFD
07BFA:  CLRF   xFE
07BFC:  CLRF   xFF
07BFE:  MOVLB  2
07C00:  CLRF   x00
07C02:  CLRF   x01
07C04:  CLRF   x02
07C06:  CLRF   x03
07C08:  CLRF   x04
07C0A:  CLRF   x05
07C0C:  CLRF   x06
07C0E:  CLRF   x07
07C10:  CLRF   x08
07C12:  CLRF   x09
07C14:  CLRF   x0A
07C16:  CLRF   x0B
07C18:  CLRF   x0C
07C1A:  CLRF   x0D
07C1C:  CLRF   x0E
07C1E:  CLRF   x0F
07C20:  CLRF   x10
07C22:  CLRF   x11
07C24:  CLRF   x12
07C26:  CLRF   x13
07C28:  CLRF   x14
07C2A:  CLRF   x15
07C2C:  CLRF   x16
07C2E:  CLRF   x17
07C30:  CLRF   x18
07C32:  CLRF   x19
07C34:  CLRF   x1A
07C36:  CLRF   x1B
07C38:  CLRF   x1C
07C3A:  CLRF   x1D
07C3C:  CLRF   x1E
07C3E:  CLRF   x1F
07C40:  CLRF   x20
07C42:  CLRF   x21
07C44:  CLRF   x22
07C46:  CLRF   x23
07C48:  CLRF   x24
07C4A:  CLRF   x25
07C4C:  CLRF   x26
07C4E:  CLRF   x27
07C50:  CLRF   x28
07C52:  CLRF   x29
07C54:  CLRF   x2A
07C56:  CLRF   x2B
07C58:  CLRF   x2C
07C5A:  CLRF   x2D
07C5C:  CLRF   x2E
07C5E:  CLRF   x2F
07C60:  CLRF   x30
07C62:  CLRF   x31
07C64:  CLRF   x32
07C66:  CLRF   x33
07C68:  CLRF   x34
....................    if(!is_connect(smf)) {
07C6A:  MOVFF  119,284
07C6E:  MOVFF  118,283
07C72:  MOVFF  117,282
07C76:  MOVFF  116,281
07C7A:  MOVLB  0
07C7C:  CALL   2AF2
07C80:  MOVF   01,F
07C82:  BTFSS  FD8.2
07C84:  GOTO   7C9C
....................       printf("SMF is not connected\r\n");
07C88:  MOVLW  AA
07C8A:  MOVWF  FF6
07C8C:  MOVLW  1D
07C8E:  MOVWF  FF7
07C90:  MOVLW  00
07C92:  MOVWF  FF8
07C94:  CALL   1FF0
....................       return;
07C98:  GOTO   7F04
....................    }
....................    printf("Start Flash SMF Read Force\r\n");
07C9C:  MOVLW  C2
07C9E:  MOVWF  FF6
07CA0:  MOVLW  1D
07CA2:  MOVWF  FF7
07CA4:  MOVLW  00
07CA6:  MOVWF  FF8
07CA8:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START); // Log the command execution
07CAC:  MOVLB  1
07CAE:  MOVF   xED,W
07CB0:  MOVWF  FE9
07CB2:  MOVF   xEE,W
07CB4:  MOVWF  FEA
07CB6:  MOVFF  FEF,23C
07CBA:  MOVFF  23C,244
07CBE:  MOVLB  2
07CC0:  CLRF   x45
07CC2:  MOVLB  0
07CC4:  CALL   4E76
.................... 
....................    // 統合管理システムからキューに追加
....................    // enqueue_read_data(address, packet_num * PACKET_SIZE);
.................... 
....................    printf("\tAddress  : 0x%08LX\r\n", address);
07CC8:  MOVLW  E0
07CCA:  MOVWF  FF6
07CCC:  MOVLW  1D
07CCE:  MOVWF  FF7
07CD0:  MOVLW  00
07CD2:  MOVWF  FF8
07CD4:  MOVLW  0E
07CD6:  MOVLB  A
07CD8:  MOVWF  x0C
07CDA:  MOVLB  0
07CDC:  CALL   2026
07CE0:  MOVFF  1F2,A26
07CE4:  MOVLW  37
07CE6:  MOVLB  A
07CE8:  MOVWF  x27
07CEA:  MOVLB  0
07CEC:  CALL   2232
07CF0:  MOVFF  1F1,A26
07CF4:  MOVLW  37
07CF6:  MOVLB  A
07CF8:  MOVWF  x27
07CFA:  MOVLB  0
07CFC:  CALL   2232
07D00:  MOVFF  1F0,A26
07D04:  MOVLW  37
07D06:  MOVLB  A
07D08:  MOVWF  x27
07D0A:  MOVLB  0
07D0C:  CALL   2232
07D10:  MOVFF  1EF,A26
07D14:  MOVLW  37
07D16:  MOVLB  A
07D18:  MOVWF  x27
07D1A:  MOVLB  0
07D1C:  CALL   2232
07D20:  MOVLW  0D
07D22:  BTFSS  FA6.6
07D24:  GOTO   7D22
07D28:  MOVLB  E
07D2A:  MOVWF  xF9
07D2C:  MOVLW  0A
07D2E:  MOVLB  0
07D30:  BTFSS  FA6.6
07D32:  GOTO   7D30
07D36:  MOVLB  E
07D38:  MOVWF  xF9
....................    printf("\tPacketNum: 0x%04LX\r\n", packet_num);
07D3A:  MOVLW  F6
07D3C:  MOVWF  FF6
07D3E:  MOVLW  1D
07D40:  MOVWF  FF7
07D42:  MOVLW  00
07D44:  MOVWF  FF8
07D46:  MOVLW  0E
07D48:  MOVLB  A
07D4A:  MOVWF  x0C
07D4C:  MOVLB  0
07D4E:  CALL   2026
07D52:  MOVFF  1F4,A26
07D56:  MOVLW  37
07D58:  MOVLB  A
07D5A:  MOVWF  x27
07D5C:  MOVLB  0
07D5E:  CALL   2232
07D62:  MOVFF  1F3,A26
07D66:  MOVLW  37
07D68:  MOVLB  A
07D6A:  MOVWF  x27
07D6C:  MOVLB  0
07D6E:  CALL   2232
07D72:  MOVLW  0D
07D74:  BTFSS  FA6.6
07D76:  GOTO   7D74
07D7A:  MOVLB  E
07D7C:  MOVWF  xF9
07D7E:  MOVLW  0A
07D80:  MOVLB  0
07D82:  BTFSS  FA6.6
07D84:  GOTO   7D82
07D88:  MOVLB  E
07D8A:  MOVWF  xF9
....................    printf("read data\r\n");
07D8C:  MOVLW  0C
07D8E:  MOVWF  FF6
07D90:  MOVLW  1E
07D92:  MOVWF  FF7
07D94:  MOVLW  00
07D96:  MOVWF  FF8
07D98:  MOVLB  0
07D9A:  CALL   1FF0
....................    for (int16 packet_count = 0; packet_count < packet_num; packet_count++)
07D9E:  MOVLB  2
07DA0:  CLRF   x36
07DA2:  CLRF   x35
07DA4:  MOVLB  0
07DA6:  MOVLB  2
07DA8:  MOVF   x36,W
07DAA:  MOVLB  1
07DAC:  SUBWF  xF4,W
07DAE:  BTFSC  FD8.0
07DB0:  BRA    7DB8
07DB2:  MOVLB  0
07DB4:  GOTO   7ED8
07DB8:  MOVLB  0
07DBA:  BTFSS  FD8.2
07DBC:  GOTO   7DD4
07DC0:  MOVLB  1
07DC2:  MOVF   xF3,W
07DC4:  MOVLB  2
07DC6:  SUBWF  x35,W
07DC8:  BTFSS  FD8.0
07DCA:  BRA    7DD2
07DCC:  MOVLB  0
07DCE:  GOTO   7ED8
07DD2:  MOVLB  0
....................    {
....................       int32 current_address = address + (packet_count * PACKET_SIZE);
07DD4:  MOVLB  2
07DD6:  RLCF   x35,W
07DD8:  MOVWF  02
07DDA:  RLCF   x36,W
07DDC:  MOVWF  03
07DDE:  RLCF   02,F
07DE0:  RLCF   03,F
07DE2:  RLCF   02,F
07DE4:  RLCF   03,F
07DE6:  RLCF   02,F
07DE8:  RLCF   03,F
07DEA:  RLCF   02,F
07DEC:  RLCF   03,F
07DEE:  RLCF   02,F
07DF0:  RLCF   03,F
07DF2:  MOVLW  C0
07DF4:  ANDWF  02,F
07DF6:  MOVF   02,W
07DF8:  MOVLB  1
07DFA:  ADDWF  xEF,W
07DFC:  MOVLB  2
07DFE:  MOVWF  x37
07E00:  MOVF   03,W
07E02:  MOVLB  1
07E04:  ADDWFC xF0,W
07E06:  MOVLB  2
07E08:  MOVWF  x38
07E0A:  MOVLW  00
07E0C:  MOVLB  1
07E0E:  ADDWFC xF1,W
07E10:  MOVLB  2
07E12:  MOVWF  x39
07E14:  MOVLW  00
07E16:  MOVLB  1
07E18:  ADDWFC xF2,W
07E1A:  MOVLB  2
07E1C:  MOVWF  x3A
07E1E:  MOVLB  0
....................       read_data_bytes(smf, current_address, read_data, PACKET_SIZE);
07E20:  MOVFF  119,B37
07E24:  MOVFF  118,B36
07E28:  MOVFF  117,B35
07E2C:  MOVFF  116,B34
07E30:  MOVFF  23A,B3B
07E34:  MOVFF  239,B3A
07E38:  MOVFF  238,B39
07E3C:  MOVFF  237,B38
07E40:  MOVLW  01
07E42:  MOVLB  B
07E44:  MOVWF  x3D
07E46:  MOVLW  F5
07E48:  MOVWF  x3C
07E4A:  CLRF   x41
07E4C:  CLRF   x40
07E4E:  CLRF   x3F
07E50:  MOVLW  40
07E52:  MOVWF  x3E
07E54:  MOVLB  0
07E56:  CALL   2BDE
....................       for (int8 byte_count = 0; byte_count < PACKET_SIZE; byte_count++)
07E5A:  MOVLB  2
07E5C:  CLRF   x3B
07E5E:  MOVLB  0
07E60:  MOVLB  2
07E62:  MOVF   x3B,W
07E64:  SUBLW  3F
07E66:  BTFSC  FD8.0
07E68:  BRA    7E70
07E6A:  MOVLB  0
07E6C:  GOTO   7EAE
07E70:  MOVLB  0
....................       {
....................          printf("%02X ", read_data[byte_count]);
07E72:  CLRF   03
07E74:  MOVLB  2
07E76:  MOVF   x3B,W
07E78:  ADDLW  F5
07E7A:  MOVWF  FE9
07E7C:  MOVLW  01
07E7E:  ADDWFC 03,W
07E80:  MOVWF  FEA
07E82:  MOVFF  FEF,23C
07E86:  MOVFF  23C,A26
07E8A:  MOVLW  37
07E8C:  MOVLB  A
07E8E:  MOVWF  x27
07E90:  MOVLB  0
07E92:  CALL   2232
07E96:  MOVLW  20
07E98:  BTFSS  FA6.6
07E9A:  GOTO   7E98
07E9E:  MOVLB  E
07EA0:  MOVWF  xF9
07EA2:  MOVLB  0
07EA4:  MOVLB  2
07EA6:  INCF   x3B,F
07EA8:  MOVLB  0
07EAA:  GOTO   7E60
....................       }
....................       printf("\r\n");
07EAE:  MOVLW  0D
07EB0:  BTFSS  FA6.6
07EB2:  GOTO   7EB0
07EB6:  MOVLB  E
07EB8:  MOVWF  xF9
07EBA:  MOVLW  0A
07EBC:  MOVLB  0
07EBE:  BTFSS  FA6.6
07EC0:  GOTO   7EBE
07EC4:  MOVLB  E
07EC6:  MOVWF  xF9
07EC8:  MOVLB  0
07ECA:  MOVLB  2
07ECC:  INCF   x35,F
07ECE:  BTFSC  FD8.2
07ED0:  INCF   x36,F
07ED2:  MOVLB  0
07ED4:  GOTO   7DA6
....................    }
.................... 
....................    printf("\r\nEnd Flash SMF Read Force\r\n");
07ED8:  MOVLW  18
07EDA:  MOVWF  FF6
07EDC:  MOVLW  1E
07EDE:  MOVWF  FF7
07EE0:  MOVLW  00
07EE2:  MOVWF  FF8
07EE4:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07EE8:  MOVLB  1
07EEA:  MOVF   xED,W
07EEC:  MOVWF  FE9
07EEE:  MOVF   xEE,W
07EF0:  MOVWF  FEA
07EF2:  MOVFF  FEF,23C
07EF6:  MOVFF  23C,244
07EFA:  MOVLB  2
07EFC:  SETF   x45
07EFE:  MOVLB  0
07F00:  CALL   4E76
07F04:  GOTO   E3F8 (RETURN)
.................... }
.................... 
.................... void mode_smf_erase_force(int8 parameter[])
.................... {
....................    printf("Start SMF Erase All\r\n");
07F08:  MOVLW  36
07F0A:  MOVWF  FF6
07F0C:  MOVLW  1E
07F0E:  MOVWF  FF7
07F10:  MOVLW  00
07F12:  MOVWF  FF8
07F14:  CALL   1FF0
....................    int8 cmd = parameter[0]; // Get the command ID from the parameter array
07F18:  MOVLB  1
07F1A:  MOVF   xED,W
07F1C:  MOVWF  FE9
07F1E:  MOVF   xEE,W
07F20:  MOVWF  FEA
07F22:  MOVFF  FEF,1EF
....................    piclog_make(cmd, 0x00); // Log the command execution
07F26:  MOVFF  1EF,244
07F2A:  MOVLB  2
07F2C:  CLRF   x45
07F2E:  MOVLB  0
07F30:  CALL   4E76
....................    
.................... 
....................    
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07F34:  MOVLW  06
07F36:  MOVLB  1
07F38:  MOVWF  xF3
07F3A:  MOVLW  AA
07F3C:  MOVWF  xF2
07F3E:  CLRF   xF1
07F40:  CLRF   xF0
07F42:  MOVLB  0
07F44:  MOVLB  1
07F46:  MOVF   xF3,W
07F48:  SUBLW  07
07F4A:  BTFSC  FD8.0
07F4C:  BRA    7F54
07F4E:  MOVLB  0
07F50:  GOTO   7FD2
07F54:  MOVLB  0
07F56:  BTFSS  FD8.2
07F58:  GOTO   7F9E
07F5C:  MOVLB  1
07F5E:  MOVF   xF2,W
07F60:  SUBLW  49
07F62:  BTFSC  FD8.0
07F64:  BRA    7F6C
07F66:  MOVLB  0
07F68:  GOTO   7FD2
07F6C:  MOVLB  0
07F6E:  BTFSS  FD8.2
07F70:  GOTO   7F9E
07F74:  MOVLB  1
07F76:  MOVF   xF1,W
07F78:  SUBLW  0F
07F7A:  BTFSC  FD8.0
07F7C:  BRA    7F84
07F7E:  MOVLB  0
07F80:  GOTO   7FD2
07F84:  MOVLB  0
07F86:  BTFSS  FD8.2
07F88:  GOTO   7F9E
07F8C:  MOVLB  1
07F8E:  MOVF   xF0,W
07F90:  SUBLW  FE
07F92:  BTFSC  FD8.0
07F94:  BRA    7F9C
07F96:  MOVLB  0
07F98:  GOTO   7FD2
07F9C:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07F9E:  MOVFF  119,236
07FA2:  MOVFF  118,235
07FA6:  MOVFF  117,234
07FAA:  MOVFF  116,233
07FAE:  MOVFF  1F3,23A
07FB2:  MOVFF  1F2,239
07FB6:  MOVFF  1F1,238
07FBA:  MOVFF  1F0,237
07FBE:  CALL   569E
07FC2:  MOVLW  01
07FC4:  MOVLB  1
07FC6:  ADDWF  xF2,F
07FC8:  MOVLW  00
07FCA:  ADDWFC xF3,F
07FCC:  MOVLB  0
07FCE:  GOTO   7F44
....................    }
....................    piclog_make(cmd, PICLOG_PARAM_END); // Log the end of the command execution
07FD2:  MOVFF  1EF,244
07FD6:  MOVLB  2
07FD8:  SETF   x45
07FDA:  MOVLB  0
07FDC:  CALL   4E76
....................    printf("End SMF Erase All\r\n");
07FE0:  MOVLW  4C
07FE2:  MOVWF  FF6
07FE4:  MOVLW  1E
07FE6:  MOVWF  FF7
07FE8:  MOVLW  00
07FEA:  MOVWF  FF8
07FEC:  CALL   1FF0
07FF0:  GOTO   E408 (RETURN)
.................... }
.................... 
.................... void mode_smf_address_reset(int8 parameter[])
.................... {
....................    printf("Start SMF Reset\r\n");
*
07958:  MOVLW  60
0795A:  MOVWF  FF6
0795C:  MOVLW  1E
0795E:  MOVWF  FF7
07960:  MOVLW  00
07962:  MOVWF  FF8
07964:  CALL   1FF0
....................    piclog_make(parameter[0], PICLOG_PARAM_START);
07968:  MOVLB  1
0796A:  MOVF   xED,W
0796C:  MOVWF  FE9
0796E:  MOVF   xEE,W
07970:  MOVWF  FEA
07972:  MOVFF  FEF,233
07976:  MOVFF  233,244
0797A:  MOVLB  2
0797C:  CLRF   x45
0797E:  MOVLB  0
07980:  CALL   4E76
....................    int8 writedata[PACKET_SIZE] = {0x00}; 
07984:  MOVLB  1
07986:  CLRF   xEF
07988:  CLRF   xF0
0798A:  CLRF   xF1
0798C:  CLRF   xF2
0798E:  CLRF   xF3
07990:  CLRF   xF4
07992:  CLRF   xF5
07994:  CLRF   xF6
07996:  CLRF   xF7
07998:  CLRF   xF8
0799A:  CLRF   xF9
0799C:  CLRF   xFA
0799E:  CLRF   xFB
079A0:  CLRF   xFC
079A2:  CLRF   xFD
079A4:  CLRF   xFE
079A6:  CLRF   xFF
079A8:  MOVLB  2
079AA:  CLRF   x00
079AC:  CLRF   x01
079AE:  CLRF   x02
079B0:  CLRF   x03
079B2:  CLRF   x04
079B4:  CLRF   x05
079B6:  CLRF   x06
079B8:  CLRF   x07
079BA:  CLRF   x08
079BC:  CLRF   x09
079BE:  CLRF   x0A
079C0:  CLRF   x0B
079C2:  CLRF   x0C
079C4:  CLRF   x0D
079C6:  CLRF   x0E
079C8:  CLRF   x0F
079CA:  CLRF   x10
079CC:  CLRF   x11
079CE:  CLRF   x12
079D0:  CLRF   x13
079D2:  CLRF   x14
079D4:  CLRF   x15
079D6:  CLRF   x16
079D8:  CLRF   x17
079DA:  CLRF   x18
079DC:  CLRF   x19
079DE:  CLRF   x1A
079E0:  CLRF   x1B
079E2:  CLRF   x1C
079E4:  CLRF   x1D
079E6:  CLRF   x1E
079E8:  CLRF   x1F
079EA:  CLRF   x20
079EC:  CLRF   x21
079EE:  CLRF   x22
079F0:  CLRF   x23
079F2:  CLRF   x24
079F4:  CLRF   x25
079F6:  CLRF   x26
079F8:  CLRF   x27
079FA:  CLRF   x28
079FC:  CLRF   x29
079FE:  CLRF   x2A
07A00:  CLRF   x2B
07A02:  CLRF   x2C
07A04:  CLRF   x2D
07A06:  CLRF   x2E
....................    for (int32 address = CIGS_DATA_TABLE_START_ADDRESS; address < CIGS_IV2_DATA_END_ADDRESS; address += SECTOR_64K_BYTE) {
07A08:  MOVLW  06
07A0A:  MOVWF  x32
07A0C:  MOVLW  AA
07A0E:  MOVWF  x31
07A10:  CLRF   x30
07A12:  CLRF   x2F
07A14:  MOVLB  0
07A16:  MOVLB  2
07A18:  MOVF   x32,W
07A1A:  SUBLW  07
07A1C:  BTFSC  FD8.0
07A1E:  BRA    7A26
07A20:  MOVLB  0
07A22:  GOTO   7AA4
07A26:  MOVLB  0
07A28:  BTFSS  FD8.2
07A2A:  GOTO   7A70
07A2E:  MOVLB  2
07A30:  MOVF   x31,W
07A32:  SUBLW  49
07A34:  BTFSC  FD8.0
07A36:  BRA    7A3E
07A38:  MOVLB  0
07A3A:  GOTO   7AA4
07A3E:  MOVLB  0
07A40:  BTFSS  FD8.2
07A42:  GOTO   7A70
07A46:  MOVLB  2
07A48:  MOVF   x30,W
07A4A:  SUBLW  0F
07A4C:  BTFSC  FD8.0
07A4E:  BRA    7A56
07A50:  MOVLB  0
07A52:  GOTO   7AA4
07A56:  MOVLB  0
07A58:  BTFSS  FD8.2
07A5A:  GOTO   7A70
07A5E:  MOVLB  2
07A60:  MOVF   x2F,W
07A62:  SUBLW  FE
07A64:  BTFSC  FD8.0
07A66:  BRA    7A6E
07A68:  MOVLB  0
07A6A:  GOTO   7AA4
07A6E:  MOVLB  0
....................       sector_erase(smf, address); // Erase each sector
07A70:  MOVFF  119,236
07A74:  MOVFF  118,235
07A78:  MOVFF  117,234
07A7C:  MOVFF  116,233
07A80:  MOVFF  232,23A
07A84:  MOVFF  231,239
07A88:  MOVFF  230,238
07A8C:  MOVFF  22F,237
07A90:  CALL   569E
07A94:  MOVLW  01
07A96:  MOVLB  2
07A98:  ADDWF  x31,F
07A9A:  MOVLW  00
07A9C:  ADDWFC x32,F
07A9E:  MOVLB  0
07AA0:  GOTO   7A16
....................    }
....................    smf_data_table_init(); // Update the address area after writing
07AA4:  CALL   77D8
.................... 
....................    piclog_make(parameter[0], PICLOG_PARAM_END); // Log the end of the command execution
07AA8:  MOVLB  1
07AAA:  MOVF   xED,W
07AAC:  MOVWF  FE9
07AAE:  MOVF   xEE,W
07AB0:  MOVWF  FEA
07AB2:  MOVFF  FEF,233
07AB6:  MOVFF  233,244
07ABA:  MOVLB  2
07ABC:  SETF   x45
07ABE:  MOVLB  0
07AC0:  CALL   4E76
....................    printf("End SMF Reset\r\n");
07AC4:  MOVLW  72
07AC6:  MOVWF  FF6
07AC8:  MOVLW  1E
07ACA:  MOVWF  FF7
07ACC:  MOVLW  00
07ACE:  MOVWF  FF8
07AD0:  CALL   1FF0
07AD4:  GOTO   E3E8 (RETURN)
.................... }
.................... 
.................... 
.................... #endif // MMJ_CIGS_MAIN_H
.................... //------------------End of File------------------
.................... 
.................... 
.................... void main()
*
119FC:  CLRF   FF8
119FE:  BCF    FF1.2
11A00:  BCF    F9F.0
11A02:  BCF    FA9.5
11A04:  BSF    FD0.7
11A06:  BSF    07.7
11A08:  MOVLB  E
11A0A:  MOVLW  55
11A0C:  MOVWF  F7E
11A0E:  MOVLW  AA
11A10:  MOVWF  F7E
11A12:  BCF    F66.6
11A14:  MOVLW  F9
11A16:  MOVWF  x2C
11A18:  MOVLW  F6
11A1A:  MOVWF  x2D
11A1C:  MOVLW  0F
11A1E:  MOVWF  x2E
11A20:  MOVLW  40
11A22:  MOVWF  x12
11A24:  MOVLW  30
11A26:  MOVWF  x13
11A28:  MOVLW  20
11A2A:  MOVWF  x22
11A2C:  MOVLW  30
11A2E:  MOVWF  x24
11A30:  MOVLW  55
11A32:  MOVWF  F7E
11A34:  MOVLW  AA
11A36:  MOVWF  F7E
11A38:  BSF    F66.6
11A3A:  CLRF   F9B
11A3C:  CLRF   F64
11A3E:  CLRF   F65
11A40:  CLRF   F66
11A42:  MOVLW  02
11A44:  MOVWF  FD3
11A46:  CLRF   1B
11A48:  MOVLB  F
11A4A:  BSF    x2D.3
11A4C:  MOVLW  A0
11A4E:  MOVWF  x2B
11A50:  MOVLW  01
11A52:  MOVWF  x2C
11A54:  MOVLW  A6
11A56:  MOVWF  x2E
11A58:  MOVLW  90
11A5A:  MOVWF  x2F
11A5C:  MOVLB  E
11A5E:  BSF    xFD.3
11A60:  MOVLW  A0
11A62:  MOVWF  xFB
11A64:  MOVLW  01
11A66:  MOVWF  xFC
11A68:  MOVLW  A6
11A6A:  MOVWF  xFE
11A6C:  MOVLW  90
11A6E:  MOVWF  xFF
11A70:  BSF    F92.1
11A72:  BCF    F92.0
11A74:  BCF    F92.3
11A76:  BCF    F89.3
11A78:  BSF    F96.0
11A7A:  BCF    F96.6
11A7C:  BCF    F96.1
11A7E:  BCF    F8D.1
11A80:  BSF    F93.4
11A82:  BCF    F93.5
11A84:  BCF    F93.2
11A86:  BSF    F8A.2
11A88:  BCF    F95.4
11A8A:  BCF    F95.5
11A8C:  BSF    F8C.5
11A8E:  CLRF   1F
11A90:  CLRF   1E
11A92:  CLRF   1D
11A94:  CLRF   1C
11A96:  CLRF   23
11A98:  CLRF   22
11A9A:  CLRF   21
11A9C:  CLRF   20
11A9E:  CLRF   27
11AA0:  CLRF   26
11AA2:  CLRF   25
11AA4:  CLRF   24
11AA6:  CLRF   29
11AA8:  CLRF   28
11AAA:  CLRF   4A
11AAC:  BCF    4B.0
11AAE:  MOVLW  1E
11AB0:  MOVLB  1
11AB2:  MOVWF  x7A
11AB4:  CLRF   x7F
11AB6:  CLRF   x7E
11AB8:  CLRF   x7D
11ABA:  CLRF   x7C
11ABC:  CLRF   x83
11ABE:  CLRF   x82
11AC0:  CLRF   x81
11AC2:  CLRF   x80
11AC4:  CLRF   x85
11AC6:  CLRF   x84
11AC8:  MOVLB  E
11ACA:  CLRF   xD9
11ACC:  CLRF   xDA
11ACE:  CLRF   xCE
11AD0:  CLRF   xCF
11AD2:  CLRF   xD0
11AD4:  CLRF   xD1
11AD6:  CLRF   xD2
11AD8:  CLRF   xD3
11ADA:  CLRF   xD4
11ADC:  CLRF   xD5
11ADE:  CLRF   x45
11AE0:  CLRF   x46
11AE2:  CLRF   x47
11AE4:  BCF    x8D.7
11AE6:  BCF    x8D.6
11AE8:  BCF    x8D.5
11AEA:  MOVLB  F
11AEC:  CLRF   x53
11AEE:  CLRF   x38
11AF0:  CLRF   x37
11AF2:  MOVLB  0
11AF4:  CLRF   2A
11AF6:  CLRF   2B
11AF8:  CLRF   2C
11AFA:  CLRF   2D
11AFC:  CLRF   2E
11AFE:  CLRF   2F
11B00:  CLRF   30
11B02:  CLRF   31
11B04:  CLRF   32
11B06:  CLRF   33
11B08:  CLRF   34
11B0A:  CLRF   35
11B0C:  CLRF   36
11B0E:  CLRF   37
11B10:  CLRF   38
11B12:  CLRF   39
11B14:  CLRF   3A
11B16:  CLRF   3B
11B18:  CLRF   3C
11B1A:  CLRF   3D
11B1C:  CLRF   3E
11B1E:  CLRF   3F
11B20:  CLRF   40
11B22:  CLRF   41
11B24:  CLRF   42
11B26:  CLRF   43
11B28:  CLRF   44
11B2A:  CLRF   45
11B2C:  CLRF   46
11B2E:  CLRF   47
11B30:  CLRF   48
11B32:  CLRF   49
11B34:  MOVLW  03
11B36:  MOVWF  4C
11B38:  CLRF   4D
11B3A:  CLRF   4E
11B3C:  CLRF   4F
11B3E:  CLRF   50
11B40:  CLRF   51
11B42:  CLRF   52
11B44:  CLRF   53
11B46:  CLRF   54
11B48:  CLRF   55
11B4A:  CLRF   56
11B4C:  CLRF   57
11B4E:  CLRF   58
11B50:  CLRF   59
11B52:  CLRF   5A
11B54:  CLRF   5B
11B56:  CLRF   5C
11B58:  CLRF   5D
11B5A:  CLRF   5E
11B5C:  CLRF   5F
11B5E:  CLRF   x60
11B60:  CLRF   x61
11B62:  CLRF   x62
11B64:  CLRF   x63
11B66:  CLRF   x64
11B68:  CLRF   x65
11B6A:  CLRF   x66
11B6C:  CLRF   x67
11B6E:  CLRF   x68
11B70:  CLRF   x69
11B72:  CLRF   x6A
11B74:  CLRF   x6B
11B76:  CLRF   x6C
11B78:  CLRF   x6D
11B7A:  CLRF   x6E
11B7C:  CLRF   x6F
11B7E:  CLRF   x70
11B80:  CLRF   x71
11B82:  CLRF   x72
11B84:  CLRF   x73
11B86:  CLRF   x74
11B88:  CLRF   x75
11B8A:  CLRF   x76
11B8C:  CLRF   x77
11B8E:  CLRF   x78
11B90:  CLRF   x79
11B92:  CLRF   x7A
11B94:  CLRF   x7B
11B96:  CLRF   x7C
11B98:  CLRF   x7D
11B9A:  CLRF   x7E
11B9C:  CLRF   x7F
11B9E:  CLRF   x80
11BA0:  CLRF   x81
11BA2:  CLRF   x82
11BA4:  CLRF   x83
11BA6:  CLRF   x84
11BA8:  CLRF   x85
11BAA:  CLRF   x86
11BAC:  CLRF   x87
11BAE:  CLRF   x88
11BB0:  CLRF   x89
11BB2:  CLRF   x8A
11BB4:  CLRF   x8B
11BB6:  CLRF   x8C
11BB8:  CLRF   x8D
11BBA:  CLRF   x8E
11BBC:  CLRF   x8F
11BBE:  CLRF   x90
11BC0:  CLRF   x91
11BC2:  CLRF   x92
11BC4:  CLRF   x93
11BC6:  CLRF   x94
11BC8:  CLRF   x95
11BCA:  CLRF   x96
11BCC:  CLRF   x97
11BCE:  CLRF   x98
11BD0:  CLRF   x99
11BD2:  CLRF   x9A
11BD4:  CLRF   x9B
11BD6:  CLRF   x9C
11BD8:  CLRF   x9D
11BDA:  CLRF   x9E
11BDC:  CLRF   x9F
11BDE:  CLRF   xA0
11BE0:  CLRF   xA1
11BE2:  CLRF   xA2
11BE4:  CLRF   xA3
11BE6:  CLRF   xA4
11BE8:  CLRF   xA5
11BEA:  CLRF   xA6
11BEC:  CLRF   xA7
11BEE:  CLRF   xA8
11BF0:  CLRF   xA9
11BF2:  CLRF   xAA
11BF4:  CLRF   xAB
11BF6:  CLRF   xAC
11BF8:  CLRF   xAD
11BFA:  CLRF   xAE
11BFC:  CLRF   xAF
11BFE:  CLRF   xB0
11C00:  CLRF   xB1
11C02:  CLRF   xB2
11C04:  CLRF   xB3
11C06:  CLRF   xB4
11C08:  CLRF   xB5
11C0A:  CLRF   xB6
11C0C:  CLRF   xB7
11C0E:  CLRF   xB8
11C10:  CLRF   xB9
11C12:  CLRF   xBA
11C14:  CLRF   xBB
11C16:  CLRF   xBC
11C18:  CLRF   xBD
11C1A:  CLRF   xBE
11C1C:  CLRF   xBF
11C1E:  CLRF   xC0
11C20:  CLRF   xC1
11C22:  CLRF   xC2
11C24:  CLRF   xC3
11C26:  CLRF   xC4
11C28:  CLRF   xC5
11C2A:  CLRF   xC6
11C2C:  CLRF   xC7
11C2E:  CLRF   xC8
11C30:  CLRF   xC9
11C32:  CLRF   xCA
11C34:  CLRF   xCB
11C36:  CLRF   xCC
11C38:  CLRF   xCD
11C3A:  CLRF   xCE
11C3C:  CLRF   xCF
11C3E:  CLRF   xD0
11C40:  CLRF   xD1
11C42:  CLRF   xD2
11C44:  CLRF   xD3
11C46:  CLRF   xD4
11C48:  CLRF   xD5
11C4A:  CLRF   xD6
11C4C:  CLRF   xD7
11C4E:  CLRF   xD8
11C50:  CLRF   xD9
11C52:  CLRF   xDA
11C54:  CLRF   xDB
11C56:  CLRF   xDC
11C58:  CLRF   xDD
11C5A:  CLRF   xDE
11C5C:  CLRF   xDF
11C5E:  CLRF   xE0
11C60:  CLRF   xE1
11C62:  CLRF   xE2
11C64:  CLRF   xE3
11C66:  CLRF   xE4
11C68:  CLRF   xE5
11C6A:  CLRF   xE6
11C6C:  CLRF   xE7
11C6E:  CLRF   xE8
11C70:  CLRF   xE9
11C72:  CLRF   xEA
11C74:  CLRF   xEB
11C76:  CLRF   xEC
11C78:  CLRF   xED
11C7A:  CLRF   xEE
11C7C:  CLRF   xEF
11C7E:  CLRF   xF0
11C80:  CLRF   xF1
11C82:  CLRF   xF2
11C84:  CLRF   xF3
11C86:  CLRF   xF4
11C88:  CLRF   xF5
11C8A:  CLRF   xF6
11C8C:  CLRF   xF7
11C8E:  CLRF   xF8
11C90:  CLRF   xF9
11C92:  CLRF   xFA
11C94:  CLRF   xFB
11C96:  CLRF   xFC
11C98:  CLRF   xFD
11C9A:  CLRF   xFE
11C9C:  CLRF   xFF
11C9E:  MOVLB  1
11CA0:  CLRF   x00
11CA2:  CLRF   x01
11CA4:  CLRF   x02
11CA6:  CLRF   x03
11CA8:  CLRF   x04
11CAA:  CLRF   x05
11CAC:  CLRF   x06
11CAE:  CLRF   x07
11CB0:  CLRF   x08
11CB2:  CLRF   x09
11CB4:  CLRF   x0A
11CB6:  CLRF   x0B
11CB8:  CLRF   x0C
11CBA:  CLRF   x0D
11CBC:  CLRF   x0E
11CBE:  CLRF   x0F
11CC0:  CLRF   x10
11CC2:  CLRF   x11
11CC4:  CLRF   x12
11CC6:  CLRF   x13
11CC8:  MOVLW  30
11CCA:  MOVWF  x14
11CCC:  MOVLW  7C
11CCE:  MOVWF  x15
11CD0:  MOVLW  01
11CD2:  MOVWF  x16
11CD4:  MOVLW  01
11CD6:  MOVWF  x17
11CD8:  MOVLW  02
11CDA:  MOVWF  x18
11CDC:  MOVLW  7C
11CDE:  MOVWF  x19
11CE0:  CLRF   x1A
11CE2:  MOVLW  09
11CE4:  MOVWF  x1B
11CE6:  MOVLW  01
11CE8:  MOVWF  x1C
11CEA:  CLRF   x1D
11CEC:  MOVLW  02
11CEE:  MOVWF  x1E
11CF0:  MOVLW  01
11CF2:  MOVWF  x1F
11CF4:  MOVLW  03
11CF6:  MOVWF  x20
11CF8:  MOVLW  04
11CFA:  MOVWF  x21
11CFC:  CLRF   x86
11CFE:  CLRF   x87
11D00:  CLRF   x88
11D02:  CLRF   x89
11D04:  CLRF   x8A
11D06:  CLRF   x8B
11D08:  CLRF   x8C
11D0A:  CLRF   x8D
11D0C:  CLRF   x8E
11D0E:  CLRF   x8F
11D10:  CLRF   x90
11D12:  CLRF   x91
11D14:  CLRF   x92
11D16:  CLRF   x93
11D18:  CLRF   x94
11D1A:  CLRF   x95
11D1C:  CLRF   x96
11D1E:  CLRF   x97
11D20:  CLRF   x98
11D22:  CLRF   x99
11D24:  CLRF   x9A
11D26:  CLRF   x9B
11D28:  CLRF   x9C
11D2A:  CLRF   x9D
11D2C:  CLRF   x9E
11D2E:  CLRF   x9F
11D30:  CLRF   xA0
11D32:  CLRF   xA1
11D34:  CLRF   xA2
11D36:  CLRF   xA3
11D38:  CLRF   xA4
11D3A:  CLRF   xA5
11D3C:  CLRF   xA6
11D3E:  CLRF   xA7
11D40:  CLRF   xA8
11D42:  CLRF   xA9
11D44:  CLRF   xAA
11D46:  CLRF   xAB
11D48:  CLRF   xAC
11D4A:  CLRF   xAD
11D4C:  CLRF   xAE
11D4E:  CLRF   xAF
11D50:  CLRF   xB0
11D52:  CLRF   xB1
11D54:  CLRF   xB2
11D56:  CLRF   xB3
11D58:  CLRF   xB4
11D5A:  CLRF   xB5
11D5C:  CLRF   xB6
11D5E:  CLRF   xB7
11D60:  CLRF   xB8
11D62:  CLRF   xB9
11D64:  CLRF   xBA
11D66:  CLRF   xBB
11D68:  CLRF   xBC
11D6A:  CLRF   xBD
11D6C:  CLRF   xBE
11D6E:  CLRF   xBF
11D70:  CLRF   xC0
11D72:  CLRF   xC1
11D74:  CLRF   xC2
11D76:  CLRF   xC3
11D78:  CLRF   xC4
11D7A:  CLRF   xC5
11D7C:  MOVLW  01
11D7E:  MOVWF  x69
11D80:  MOVLW  22
11D82:  MOVWF  x68
11D84:  MOVLW  01
11D86:  MOVWF  x6B
11D88:  MOVLW  2C
11D8A:  MOVWF  x6A
11D8C:  MOVLW  01
11D8E:  MOVWF  x6D
11D90:  MOVLW  36
11D92:  MOVWF  x6C
11D94:  MOVLW  01
11D96:  MOVWF  x6F
11D98:  MOVLW  40
11D9A:  MOVWF  x6E
11D9C:  MOVLW  01
11D9E:  MOVWF  x71
11DA0:  MOVLW  4A
11DA2:  MOVWF  x70
11DA4:  MOVLW  01
11DA6:  MOVWF  x73
11DA8:  MOVLW  54
11DAA:  MOVWF  x72
11DAC:  MOVLW  01
11DAE:  MOVWF  x75
11DB0:  MOVLW  5E
11DB2:  MOVWF  x74
11DB4:  CLRF   xC6
11DB6:  CLRF   xC7
11DB8:  CLRF   xC8
11DBA:  CLRF   xC9
11DBC:  MOVLB  0
.................... { 
....................    delay_ms(100); // wait for power stable
11DBE:  MOVLW  64
11DC0:  MOVLB  B
11DC2:  MOVWF  x4C
11DC4:  MOVLB  0
11DC6:  CALL   1FC2
....................    fprintf(PC,"\r\n\r\n\r\n============================================================\r\n");
11DCA:  MOVLW  82
11DCC:  MOVWF  FF6
11DCE:  MOVLW  1E
11DD0:  MOVWF  FF7
11DD2:  MOVLW  00
11DD4:  MOVWF  FF8
11DD6:  CALL   1FF0
....................    fprintf(PC,"This is MOMIJI CIGS PIC BBM for MIS7_BBM6.\r\n");
11DDA:  MOVLW  C8
11DDC:  MOVWF  FF6
11DDE:  MOVLW  1E
11DE0:  MOVWF  FF7
11DE2:  MOVLW  00
11DE4:  MOVWF  FF8
11DE6:  CALL   1FF0
....................    fprintf(PC,"Last updated on %s %s, by Inoue.\r\n\r\n", __DATE__, __TIME__);
11DEA:  MOVLW  F6
11DEC:  MOVWF  FF6
11DEE:  MOVLW  1E
11DF0:  MOVWF  FF7
11DF2:  MOVLW  00
11DF4:  MOVWF  FF8
11DF6:  MOVLW  10
11DF8:  MOVLB  A
11DFA:  MOVWF  x0C
11DFC:  MOVLB  0
11DFE:  CALL   2026
11E02:  MOVLW  1C
11E04:  MOVWF  FF6
11E06:  MOVLW  1F
11E08:  MOVWF  FF7
11E0A:  MOVLW  00
11E0C:  MOVWF  FF8
11E0E:  CALL   1FF0
11E12:  MOVLW  20
11E14:  BTFSS  FA6.6
11E16:  GOTO   11E14
11E1A:  MOVLB  E
11E1C:  MOVWF  xF9
11E1E:  MOVLW  26
11E20:  MOVWF  FF6
11E22:  MOVLW  1F
11E24:  MOVWF  FF7
11E26:  MOVLW  00
11E28:  MOVWF  FF8
11E2A:  MOVLB  0
11E2C:  CALL   1FF0
11E30:  MOVLW  0B
11E32:  MOVWF  FF6
11E34:  MOVLW  1F
11E36:  MOVWF  FF7
11E38:  MOVLW  00
11E3A:  MOVWF  FF8
11E3C:  MOVLW  0F
11E3E:  MOVLB  A
11E40:  MOVWF  x0C
11E42:  MOVLB  0
11E44:  CALL   2026
....................    
....................    // io_init();
....................    setup_uart_to_boss();
11E48:  GOTO   2060
....................    timer_init();
11E4C:  GOTO   208A
....................    ad7490_init();
11E50:  GOTO   22AE
....................    mcp4901_init();
11E54:  GOTO   25DE
....................    misf_init();
11E58:  CALL   3668
....................    
....................    piclog_make(PICLOG_STARTUP,0x00);
11E5C:  MOVLB  2
11E5E:  CLRF   x44
11E60:  CLRF   x45
11E62:  MOVLB  0
11E64:  CALL   4E76
.................... 
....................    int1 is_finished = FALSE;
11E68:  MOVLB  1
11E6A:  BCF    xCA.0
....................    fprintf(PC,"____CIGS PIC Start Operation_____\r\n\r\n");
11E6C:  MOVLW  30
11E6E:  MOVWF  FF6
11E70:  MOVLW  1F
11E72:  MOVWF  FF7
11E74:  MOVLW  00
11E76:  MOVWF  FF8
11E78:  MOVLB  0
11E7A:  CALL   1FF0
....................    
....................    //enable_negative_power();
....................    connect_port1();
11E7E:  CALL   4F9E
....................    connect_port2();
11E82:  CALL   4FA6
....................    mcp4901_1_write(0);
11E86:  MOVLB  A
11E88:  CLRF   x1B
11E8A:  CLRF   x1A
11E8C:  MOVLB  0
11E8E:  CALL   2562
....................    mcp4901_2_write(0);
11E92:  MOVLB  A
11E94:  CLRF   x1B
11E96:  CLRF   x1A
11E98:  MOVLB  0
11E9A:  CALL   25A0
....................    connect_negative_power1(TRUE); // CIGS1 Negative Power ON
11E9E:  MOVLW  01
11EA0:  MOVLB  1
11EA2:  MOVWF  xD7
11EA4:  MOVLB  0
11EA6:  GOTO   4FAE
....................    
....................    fprintf(PC,"waiting for BOSS PIC command");
11EAA:  MOVLW  56
11EAC:  MOVWF  FF6
11EAE:  MOVLW  1F
11EB0:  MOVWF  FF7
11EB2:  MOVLW  00
11EB4:  MOVWF  FF8
11EB6:  CALL   1FF0
.................... 
....................    //Start loop
....................    while(TRUE)
....................    {
....................       if(boss_receive_buffer_size > 0)
11EBA:  MOVF   4A,F
11EBC:  BTFSC  FD8.2
11EBE:  GOTO   11F60
....................       {
....................          //Command command = make_command(boss_receive_buffer, boss_receive_buffer_size);
....................          volatile Command recieve_cmd = make_receive_command(boss_receive_buffer, boss_receive_buffer_size);
11EC2:  MOVLB  1
11EC4:  CLRF   xDE
11EC6:  MOVLW  2A
11EC8:  MOVWF  xDD
11ECA:  MOVFF  4A,1DF
11ECE:  MOVLB  0
11ED0:  GOTO   52EA
11ED4:  MOVFF  02,03
11ED8:  MOVF   01,W
11EDA:  MOVWF  FE1
11EDC:  MOVFF  03,FE2
11EE0:  MOVLW  01
11EE2:  MOVWF  FEA
11EE4:  MOVLW  CB
11EE6:  MOVWF  FE9
11EE8:  MOVLW  0C
11EEA:  MOVWF  01
11EEC:  MOVFF  FE6,FEE
11EF0:  DECFSZ 01,F
11EF2:  GOTO   11EEC
....................          clear_receive_signal(boss_receive_buffer, &boss_receive_buffer_size);
11EF6:  MOVLB  2
11EF8:  CLRF   x1E
11EFA:  MOVLW  2A
11EFC:  MOVWF  x1D
11EFE:  CLRF   x20
11F00:  MOVLW  4A
11F02:  MOVWF  x1F
11F04:  MOVLB  0
11F06:  CALL   54EC
....................          
....................          if(recieve_cmd.is_exist){
11F0A:  MOVLB  1
11F0C:  BTFSC  xCD.0
11F0E:  BRA    11F16
11F10:  MOVLB  0
11F12:  GOTO   11F60
11F16:  MOVLB  0
....................             is_finished = execute_command(&recieve_cmd); // FIX: 戻り値を保持
11F18:  MOVLW  01
11F1A:  MOVLB  1
11F1C:  MOVWF  xD8
11F1E:  MOVLW  CB
11F20:  MOVWF  xD7
11F22:  MOVLB  0
11F24:  GOTO   FE24
11F28:  MOVLB  1
11F2A:  BCF    xCA.0
11F2C:  BTFSC  01.0
11F2E:  BSF    xCA.0
....................             if (is_finished == TRUE)
11F30:  BTFSC  xCA.0
11F32:  BRA    11F3A
11F34:  MOVLB  0
11F36:  GOTO   11F50
11F3A:  MOVLB  0
....................             {
....................                fprintf(PC, "\r\n\r\n======\r\n\r\nFinished process.\r\n");
11F3C:  MOVLW  74
11F3E:  MOVWF  FF6
11F40:  MOVLW  1F
11F42:  MOVWF  FF7
11F44:  MOVLW  00
11F46:  MOVWF  FF8
11F48:  CALL   1FF0
....................             }else{
11F4C:  GOTO   11F60
....................                fprintf(PC,"\r\nwaiting for BOSS PIC command");
11F50:  MOVLW  96
11F52:  MOVWF  FF6
11F54:  MOVLW  1F
11F56:  MOVWF  FF7
11F58:  MOVLW  00
11F5A:  MOVWF  FF8
11F5C:  CALL   1FF0
....................             }
....................          }
....................       }
....................          
....................       delay_ms(500);
11F60:  MOVLW  02
11F62:  MOVLB  1
11F64:  MOVWF  xD7
11F66:  MOVLB  0
11F68:  MOVLW  FA
11F6A:  MOVLB  B
11F6C:  MOVWF  x4C
11F6E:  MOVLB  0
11F70:  CALL   1FC2
11F74:  MOVLB  1
11F76:  DECFSZ xD7,F
11F78:  BRA    11F7E
11F7A:  BRA    11F82
11F7C:  MOVLB  0
11F7E:  MOVLB  0
11F80:  BRA    11F68
....................       fprintf(PC, ".");
11F82:  MOVLW  2E
11F84:  MOVLB  0
11F86:  BTFSS  FA6.6
11F88:  GOTO   11F86
11F8C:  MOVLB  E
11F8E:  MOVWF  xF9
11F90:  MOVLB  0
11F92:  GOTO   11EBA
....................    }
....................    
....................    fprintf(PC, "End main\r\n");
11F96:  MOVLW  B6
11F98:  MOVWF  FF6
11F9A:  MOVLW  1F
11F9C:  MOVWF  FF7
11F9E:  MOVLW  00
11FA0:  MOVWF  FF8
11FA2:  CALL   1FF0
....................    
.................... }
.................... // End of files
11FA6:  SLEEP 

Configuration Fuses:
   Word  1: F6A0   STVREN NOXINST NODEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS NODSWDT DSWDTOSC_INT
